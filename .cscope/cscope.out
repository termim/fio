cscope 15 $HOME/tmp/fio/fio/.cscope -q 0000018391 0002153473
	@/home/terekhov/tmp/fio/fio/arch/arch-alpha.h

1 #i‚de‡
ARCH_ALPHA_H


2 
	#ARCH_ALPHA_H


	)

4 
	#FIO_ARCH
 (
¨ch_Æpha
)

	)

6 #i‚de‡
__NR_i›rio_£t


7 
	#__NR_i›rio_£t
 442

	)

8 
	#__NR_i›rio_gë
 443

	)

11 #i‚de‡
__NR_Ádvi£64


12 
	#__NR_Ádvi£64
 413

	)

15 #i‚de‡
__NR_sys_•li˚


16 
	#__NR_sys_•li˚
 468

	)

17 
	#__NR_sys_ãe
 470

	)

18 
	#__NR_sys_vm•li˚
 471

	)

21 
	#n›
 dÿ{ } 0)

	)

22 
	#ªad_b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
("mb": : :"mem‹y")

	)

23 
	#wrôe_b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
("wmb": : :"mem‹y")

	)

	@/home/terekhov/tmp/fio/fio/arch/arch-arm.h

1 #i‚de‡
ARCH_ARM_H


2 
	#ARCH_ARM_H


	)

4 
	#FIO_ARCH
 (
¨ch_¨m
)

	)

6 #i‚de‡
__NR_i›rio_£t


7 
	#__NR_i›rio_£t
 314

	)

8 
	#__NR_i›rio_gë
 315

	)

11 #i‚de‡
__NR_Ádvi£64


12 
	#__NR_Ádvi£64
 270

	)

15 #i‚de‡
__NR_sys_•li˚


16 
	#__NR_sys_•li˚
 340

	)

17 
	#__NR_sys_ãe
 342

	)

18 
	#__NR_sys_vm•li˚
 343

	)

21 #i‡
deföed
 (
__ARM_ARCH_4__
Ë|| deföed (
__ARM_ARCH_4T__
) \

22 || 
deföed
 (
__ARM_ARCH_5__
Ë|| deföed (
__ARM_ARCH_5T__
Ë|| deföed (
__ARM_ARCH_5TE__
Ë|| deföed (
__ARM_ARCH_5TEJ__
) \

23 || 
deföed
(
__ARM_ARCH_6__
Ë|| deföed(
__ARM_ARCH_6J__
Ë|| deföed(
__ARM_ARCH_6Z__
Ë|| 
	$deföed
(
__ARM_ARCH_6ZK__
)

24 
	#n›
 
__asm__
 
	`__vﬁ©ûe__
("mov\å0,r0\t@Ç›\n\t")

	)

25 
	#ªad_b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
 ("" : : : "mem‹y")

	)

26 
	#wrôe_b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
 ("" : : : "mem‹y")

	)

27 #ñi‡
	`deföed
(
__ARM_ARCH_7A__
)

28 
	#n›
 
__asm__
 
	`__vﬁ©ûe__
 ("n›")

	)

29 
	#ªad_b¨rõr
(Ë
	`__sync_synchr⁄ize
()

	)

30 
	#wrôe_b¨rõr
(Ë
	`__sync_synchr⁄ize
()

	)

	@/home/terekhov/tmp/fio/fio/arch/arch-generic.h

1 #i‚de‡
ARCH_GENERIC_H


2 
	#ARCH_GENERIC_H


	)

4 
	#FIO_ARCH
 (
¨ch_gíîic
)

	)

6 
	#n›
 dÿ{ } 0)

	)

7 
	#ªad_b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
("": : :"mem‹y")

	)

8 
	#wrôe_b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
("": : :"mem‹y")

	)

	@/home/terekhov/tmp/fio/fio/arch/arch-hppa.h

1 #i‚de‡
ARCH_HPPA_H


2 
	#ARCH_HPPA_H


	)

4 
	#FIO_ARCH
 (
¨ch_hµa
)

	)

6 #i‚de‡
__NR_i›rio_£t


7 
	#__NR_i›rio_£t
 267

	)

8 
	#__NR_i›rio_gë
 268

	)

11 #i‚de‡
__NR_Ádvi£64


12 
	#__NR_Ádvi£64
 236

	)

15 #i‚de‡
__NR_sys_•li˚


16 
	#__NR_sys_•li˚
 291

	)

17 
	#__NR_sys_ãe
 293

	)

18 
	#__NR_sys_vm•li˚
 294

	)

21 
	#n›
 dÿ{ } 0)

	)

23 
	#ªad_b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
 ("" : : : "mem‹y")

	)

24 
	#wrôe_b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
 ("" : : : "mem‹y")

	)

	@/home/terekhov/tmp/fio/fio/arch/arch-ia64.h

1 #i‚de‡
ARCH_IA64_H


2 
	#ARCH_IA64_H


	)

4 
	#FIO_ARCH
 (
¨ch_ü64
)

	)

6 #i‚de‡
__NR_i›rio_£t


7 
	#__NR_i›rio_£t
 1274

	)

8 
	#__NR_i›rio_gë
 1275

	)

11 #i‚de‡
__NR_Ádvi£64


12 
	#__NR_Ádvi£64
 1234

	)

15 #i‚de‡
__NR_sys_•li˚


16 
	#__NR_sys_•li˚
 1297

	)

17 
	#__NR_sys_ãe
 1301

	)

18 
	#__NR_sys_vm•li˚
 1302

	)

21 
	#n›
 
asm
 vﬁ©ûê("höà@∑u£" ::: "mem‹y");

	)

22 
	#ªad_b¨rõr
(Ë
asm
 vﬁ©ûê("mf" ::: "mem‹y")

	)

23 
	#wrôe_b¨rõr
(Ë
asm
 vﬁ©ûê("mf" ::: "mem‹y")

	)

25 
	#ü64_p›˙t
(
x
) \

27 
ü64_öåi_ªs
; \

28 
	`asm
 ("p›˙à%0=%1" : "Ù" (
ü64_öåi_ªs
Ë: "r" (
x
)); \

29 
ü64_öåi_ªs
; \

30 })

	)

32 
ölöe
 
	$¨ch_ffz
(
bômask
)

34  
	`ü64_p›˙t
(
bômask
 & (~bitmask - 1));

35 
	}
}

37 
ölöe
 
	$gë_˝u_˛ock
()

39 
ªt
;

41 
__asm__
 
	`__vﬁ©ûe__
("mov %0˜r.ôc" : "Ù" (
ªt
) : : "memory");

42  
ªt
;

43 
	}
}

45 
	#ARCH_HAVE_INIT


	)

46 
tsc_ªlübÀ
;

47 
ölöe
 
	$¨ch_öô
(*
ívp
[])

49 
tsc_ªlübÀ
 = 1;

51 
	}
}

53 
	#ARCH_HAVE_FFZ


	)

54 
	#ARCH_HAVE_CPU_CLOCK


	)

	@/home/terekhov/tmp/fio/fio/arch/arch-mips.h

1 #i‚de‡
ARCH_MIPS64_H


2 
	#ARCH_MIPS64_H


	)

4 
	#FIO_ARCH
 (
¨ch_mùs
)

	)

6 #i‚de‡
__NR_i›rio_£t


7 
	#__NR_i›rio_£t
 314

	)

8 
	#__NR_i›rio_gë
 315

	)

11 #i‚de‡
__NR_Ádvi£64


12 
	#__NR_Ádvi£64
 215

	)

15 #i‚de‡
__NR_sys_•li˚


16 
	#__NR_sys_•li˚
 263

	)

17 
	#__NR_sys_ãe
 265

	)

18 
	#__NR_sys_vm•li˚
 266

	)

21 
	#ªad_b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
("": : :"mem‹y")

	)

22 
	#wrôe_b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
("": : :"mem‹y")

	)

23 
	#n›
 
__asm__
 
	`__vﬁ©ûe__
("": : :"mem‹y")

	)

	@/home/terekhov/tmp/fio/fio/arch/arch-ppc.h

1 #i‚de‡
ARCH_PPC_H


2 
	#ARCH_PPC_H


	)

4 
	~<uni°d.h
>

5 
	~<°dlib.h
>

6 
	~<sys/ty≥s.h
>

7 
	~<sys/waô.h
>

9 
	#FIO_ARCH
 (
¨ch_µc
)

	)

11 #i‚de‡
__NR_i›rio_£t


12 
	#__NR_i›rio_£t
 273

	)

13 
	#__NR_i›rio_gë
 274

	)

16 #i‚de‡
__NR_Ádvi£64


17 
	#__NR_Ádvi£64
 233

	)

20 #i‚de‡
__NR_sys_•li˚


21 
	#__NR_sys_•li˚
 283

	)

22 
	#__NR_sys_ãe
 284

	)

23 
	#__NR_sys_vm•li˚
 285

	)

26 
	#n›
 dÿ{ } 0)

	)

28 #ifde‡
__powîpc64__


29 
	#ªad_b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
 ("lwsync" : : : "mem‹y")

	)

31 
	#ªad_b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
 ("sync" : : : "mem‹y")

	)

34 
	#wrôe_b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
 ("sync" : : : "mem‹y")

	)

36 
ölöe
 
	$__ûog2
(
bômask
)

38 
lz
;

40 
	`asm
 ("˙ézw %0,%1" : "Ù" (
lz
Ë: "r" (
bômask
));

41  31 - 
lz
;

42 
	}
}

44 
ölöe
 
	$¨ch_ffz
(
bômask
)

46 i‡((
bômask
 = ~bitmask) == 0)

48  
	`__ûog2
(
bômask
 & -bitmask);

49 
	}
}

51 
ölöe
 
	$mf•r
(
ªg
)

53 
vÆ
;

55 
asm
 vﬁ©ûe("mf•∏%0,%1": "Ù" (
vÆ
Ë: "K" (
ªg
));

56  
vÆ
;

57 
	}
}

59 
	#SPRN_TBRL
 0x10C

	)

60 
	#SPRN_TBRU
 0x10D

	)

61 
	#SPRN_ATBL
 0x20E

	)

62 
	#SPRN_ATBU
 0x20F

	)

64 
ölöe
 
	$gë_˝u_˛ock
()

66 
tbl
, 
tbu0
, 
tbu1
;

67 
ªt
;

70 i‡(
¨ch_Êags
 & 
ARCH_FLAG_1
) {

71 
tbu0
 = 
	`mf•r
(
SPRN_ATBU
);

72 
tbl
 = 
	`mf•r
(
SPRN_ATBL
);

73 
tbu1
 = 
	`mf•r
(
SPRN_ATBU
);

75 
tbu0
 = 
	`mf•r
(
SPRN_TBRU
);

76 
tbl
 = 
	`mf•r
(
SPRN_TBRL
);

77 
tbu1
 = 
	`mf•r
(
SPRN_TBRU
);

79 } 
tbu0
 !
tbu1
);

81 
ªt
 = ((()
tbu0
Ë<< 32Ë| 
tbl
;

82  
ªt
;

83 
	}
}

85 
	$©b_chûd
()

87 
¨ch_Êags
 |
ARCH_FLAG_1
;

88 
	`gë_˝u_˛ock
();

89 
	`_exô
(0);

90 
	}
}

92 
	$©b_˛ockã°
()

94 
pid_t
 
pid
;

96 
pid
 = 
	`f‹k
();

97 i‡(!
pid
)

98 
	`©b_chûd
();

99 i‡(
pid
 != -1) {

100 
°©us
;

102 
pid
 = 
	`waô
(&
°©us
);

103 i‡(
pid
 =-1 || !
	`WIFEXITED
(
°©us
))

104 
¨ch_Êags
 &~
ARCH_FLAG_1
;

106 
¨ch_Êags
 |
ARCH_FLAG_1
;

108 
	}
}

110 
	#ARCH_HAVE_INIT


	)

111 
tsc_ªlübÀ
;

113 
ölöe
 
	$¨ch_öô
(*
ívp
[])

116 
tsc_ªlübÀ
 = 1;

117 
	`©b_˛ockã°
();

120 
	}
}

122 
	#ARCH_HAVE_FFZ


	)

	@/home/terekhov/tmp/fio/fio/arch/arch-s390.h

1 #i‚de‡
ARCH_S390_H


2 
	#ARCH_S390_H


	)

4 
	#FIO_ARCH
 (
¨ch_s390
)

	)

6 #i‚de‡
__NR_i›rio_£t


7 
	#__NR_i›rio_£t
 282

	)

8 
	#__NR_i›rio_gë
 283

	)

11 #i‚de‡
__NR_Ádvi£64


12 
	#__NR_Ádvi£64
 253

	)

15 #i‚de‡
__NR_sys_•li˚


16 
	#__NR_sys_•li˚
 306

	)

17 
	#__NR_sys_ãe
 308

	)

18 
	#__NR_sys_vm•li˚
 309

	)

21 
	#n›
 
asm
 vﬁ©ûe("n›" : : : "mem‹y")

	)

22 
	#ªad_b¨rõr
(Ë
asm
 vﬁ©ûe("b¸ 15,0" : : : "mem‹y")

	)

23 
	#wrôe_b¨rõr
(Ë
asm
 vﬁ©ûe("b¸ 15,0" : : : "mem‹y")

	)

25 
ölöe
 
	$gë_˝u_˛ock
()

27 
˛k
;

29 #ifde‡
CONFIG_S390_Z196_FACILITIES


34 
__asm__
 
	`__vﬁ©ûe__
("°ck‡%0" : "=Q" (
˛k
) : : "cc");

36 
__asm__
 
	`__vﬁ©ûe__
("°ck %0" : "=Q" (
˛k
) : : "cc");

38  
˛k
>>12;

39 
	}
}

41 
	#ARCH_CPU_CLOCK_CYCLES_PER_USEC
 1

	)

42 
	#ARCH_HAVE_CPU_CLOCK


	)

44 
	#ARCH_HAVE_INIT


	)

45 
tsc_ªlübÀ
;

46 
ölöe
 
	$¨ch_öô
(*
ívp
[])

48 
tsc_ªlübÀ
 = 1;

50 
	}
}

	@/home/terekhov/tmp/fio/fio/arch/arch-sh.h

3 #i‚de‡
ARCH_SH_H


4 
	#ARCH_SH_H


	)

6 
	#FIO_ARCH
 (
¨ch_sh
)

	)

8 #i‚de‡
__NR_i›rio_£t


9 
	#__NR_i›rio_£t
 288

	)

10 
	#__NR_i›rio_gë
 289

	)

13 #i‚de‡
__NR_Ádvi£64


14 
	#__NR_Ádvi£64
 250

	)

17 #i‚de‡
__NR_sys_•li˚


18 
	#__NR_sys_•li˚
 313

	)

19 
	#__NR_sys_ãe
 315

	)

20 
	#__NR_sys_vm•li˚
 316

	)

23 
	#n›
 
__asm__
 
	`__vﬁ©ûe__
 ("n›": : :"mem‹y")

	)

25 
	#mb
() \

27 i‡(
¨ch_Êags
 & 
ARCH_FLAG_1
) \

28 
__asm__
 
	`__vﬁ©ûe__
 ("synco": : :"memory"); \

30 
__asm__
 
	`__vﬁ©ûe__
 (" " : : : "memory"); \

31 } 0)

	)

33 
	#ªad_b¨rõr
(Ë
	`mb
()

	)

34 
	#wrôe_b¨rõr
(Ë
	`mb
()

	)

36 
	~<°dio.h
>

37 
	~<ñf.h
>

39 
¨ch_Êags
;

41 
	#CPU_HAS_LLSC
 0x0040

	)

43 
ölöe
 
	$¨ch_öô
(*
ívp
[])

45 
Elf32_auxv_t
 *
auxv
;

47 *
ívp
++ !
NULL
)

50 
auxv
 = (
Elf32_auxv_t
 *Ë
ívp
;áuxv->
a_ty≥
 !
AT_NULL
;áuxv++) {

51 i‡(
auxv
->
a_ty≥
 =
AT_HWCAP
) {

52 i‡(
auxv
->
a_un
.
a_vÆ
 & 
CPU_HAS_LLSC
) {

53 
¨ch_Êags
 |
ARCH_FLAG_1
;

60 
	}
}

62 
	#ARCH_HAVE_INIT


	)

	@/home/terekhov/tmp/fio/fio/arch/arch-sparc.h

1 #i‚de‡
ARCH_SPARC_H


2 
	#ARCH_SPARC_H


	)

4 
	#FIO_ARCH
 (
¨ch_•¨c
)

	)

6 #i‚de‡
__NR_i›rio_£t


7 
	#__NR_i›rio_£t
 196

	)

8 
	#__NR_i›rio_gë
 218

	)

11 #i‚de‡
__NR_Ádvi£64


12 
	#__NR_Ádvi£64
 209

	)

15 #i‚de‡
__NR_sys_•li˚


16 
	#__NR_sys_•li˚
 232

	)

17 
	#__NR_sys_ãe
 280

	)

18 
	#__NR_sys_vm•li˚
 25

	)

21 
	#n›
 dÿ{ } 0)

	)

23 
	#ªad_b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
 ("" : : : "mem‹y")

	)

24 
	#wrôe_b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
 ("" : : : "mem‹y")

	)

	@/home/terekhov/tmp/fio/fio/arch/arch-sparc64.h

1 #i‚de‡
ARCH_SPARC64_H


2 
	#ARCH_SPARC64_H


	)

4 
	#FIO_ARCH
 (
¨ch_•¨c64
)

	)

6 #i‚de‡
__NR_i›rio_£t


7 
	#__NR_i›rio_£t
 196

	)

8 
	#__NR_i›rio_gë
 218

	)

11 #i‚de‡
__NR_Ádvi£64


12 
	#__NR_Ádvi£64
 209

	)

15 #i‚de‡
__NR_sys_•li˚


16 
	#__NR_sys_•li˚
 232

	)

17 
	#__NR_sys_ãe
 280

	)

18 
	#__NR_sys_vm•li˚
 25

	)

21 
	#n›
 dÿ{ } 0)

	)

23 
	#memb¨_ß„
(
ty≥
) \

24 dÿ{ 
__asm__
 
	`__vﬁ©ûe__
("ba,pt %%xcc, 1f\n\t" \

25 " memb¨ " 
ty≥
 "\n" \

28 } 0)

	)

30 
	#ªad_b¨rõr
(Ë
	`memb¨_ß„
("#LﬂdLﬂd")

	)

31 
	#wrôe_b¨rõr
(Ë
	`memb¨_ß„
("#St‹eSt‹e")

	)

	@/home/terekhov/tmp/fio/fio/arch/arch-x86-common.h

1 #i‚de‡
FIO_ARCH_X86_COMMON


2 
	#FIO_ARCH_X86_COMMON


	)

4 
	~<°rög.h
>

6 
ölöe
 
	$˝uid
(
›
,

7 *
óx
, *
ebx
,

8 *
ecx
, *
edx
)

10 *
óx
 = 
›
;

11 *
ecx
 = 0;

12 
	`do_˝uid
(
óx
, 
ebx
, 
ecx
, 
edx
);

13 
	}
}

15 
	#ARCH_HAVE_INIT


	)

17 
tsc_ªlübÀ
;

19 
ölöe
 
	$¨ch_öô_öãl
(
Àvñ
)

21 
óx
, 
ebx
, 
ecx
 = 0, 
edx
;

26 
óx
 = 1;

27 
	`do_˝uid
(&
óx
, &
ebx
, &
ecx
, &
edx
);

28 i‡(!(
edx
 & (1U << 4)))

34 
óx
 = 0x80000007;

35 
	`do_˝uid
(&
óx
, &
ebx
, &
ecx
, &
edx
);

36  
edx
 & (1U << 8);

37 
	}
}

39 
ölöe
 
	$¨ch_öô_amd
(
Àvñ
)

41 
óx
, 
ebx
, 
ecx
, 
edx
;

43 
	`˝uid
(0x80000000, &
óx
, &
ebx
, &
ecx
, &
edx
);

44 i‡(
óx
 < 0x80000007)

47 
	`˝uid
(0x80000007, &
óx
, &
ebx
, &
ecx
, &
edx
);

48 i‡(
edx
 & (1 << 8))

52 
	}
}

54 
ölöe
 
	$¨ch_öô
(*
ívp
[])

56 
Àvñ
;

57 
°r
[13];

59 
	`˝uid
(0, &
Àvñ
, (*Ë&
°r
[0],

60 (*Ë&
°r
[8],

61 (*Ë&
°r
[4]);

63 
°r
[12] = '\0';

64 i‡(!
	`°rcmp
(
°r
, "GenuineIntel"))

65 
tsc_ªlübÀ
 = 
	`¨ch_öô_öãl
(
Àvñ
);

66 i‡(!
	`°rcmp
(
°r
, "AuthenticAMD"))

67 
tsc_ªlübÀ
 = 
	`¨ch_öô_amd
(
Àvñ
);

70 
	}
}

	@/home/terekhov/tmp/fio/fio/arch/arch-x86.h

1 #i‚de‡
ARCH_X86_H


2 
	#ARCH_X86_H


	)

4 
ölöe
 
	$do_˝uid
(*
óx
, *
ebx
,

5 *
ecx
, *
edx
)

7 
asm
 volatile("xchgl %%ebx, %1\ncpuid\nxchgl %%ebx, %1"

8 : "˜" (*
óx
), "Ù" (*
ebx
), "=c" (*
ecx
), "=d" (*
edx
)

9 : "0" (*
óx
)

11 
	}
}

13 
	~"¨ch-x86-comm⁄.h
"

15 
	#FIO_ARCH
 (
¨ch_i386
)

	)

17 #i‚de‡
__NR_i›rio_£t


18 
	#__NR_i›rio_£t
 289

	)

19 
	#__NR_i›rio_gë
 290

	)

22 #i‚de‡
__NR_Ádvi£64


23 
	#__NR_Ádvi£64
 250

	)

26 #i‚de‡
__NR_sys_•li˚


27 
	#__NR_sys_•li˚
 313

	)

28 
	#__NR_sys_ãe
 315

	)

29 
	#__NR_sys_vm•li˚
 316

	)

32 
	#FIO_HUGE_PAGE
 4194304

	)

34 
	#n›
 
__asm__
 
	`__vﬁ©ûe__
("ªp;n›": : :"mem‹y")

	)

35 
	#ªad_b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
("": : :"mem‹y")

	)

36 
	#wrôe_b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
("": : :"mem‹y")

	)

38 
ölöe
 
	$¨ch_ffz
(
bômask
)

40 
	`__asm__
("bsÊ %1,%0" :"Ù" (
bômask
) :"r" (~bitmask));

41  
bômask
;

42 
	}
}

44 
ölöe
 
	$gë_˝u_˛ock
()

46 
ªt
;

48 
__asm__
 
	`__vﬁ©ûe__
("rdtsc" : "=A" (
ªt
));

49  
ªt
;

50 
	}
}

52 
	#ARCH_HAVE_FFZ


	)

53 
	#ARCH_HAVE_CPU_CLOCK


	)

	@/home/terekhov/tmp/fio/fio/arch/arch-x86_64.h

1 #i‚de‡
ARCH_X86_64_h


2 
	#ARCH_X86_64_h


	)

4 
ölöe
 
	$do_˝uid
(*
óx
, *
ebx
,

5 *
ecx
, *
edx
)

7 
asm
 volatile("cpuid"

8 : "˜" (*
óx
), "=b" (*
ebx
), "=c" (*
ecx
), "=d" (*
edx
)

9 : "0" (*
óx
), "2" (*
ecx
)

11 
	}
}

13 
	~"¨ch-x86-comm⁄.h
"

15 
	#FIO_ARCH
 (
¨ch_x86_64
)

	)

17 #i‚de‡
__NR_i›rio_£t


18 
	#__NR_i›rio_£t
 251

	)

19 
	#__NR_i›rio_gë
 252

	)

22 #i‚de‡
__NR_Ádvi£64


23 
	#__NR_Ádvi£64
 221

	)

26 #i‚de‡
__NR_sys_•li˚


27 
	#__NR_sys_•li˚
 275

	)

28 
	#__NR_sys_ãe
 276

	)

29 
	#__NR_sys_vm•li˚
 278

	)

32 #i‚de‡
__NR_shmgë


33 
	#__NR_shmgë
 29

	)

34 
	#__NR_shm©
 30

	)

35 
	#__NR_shm˘l
 31

	)

36 
	#__NR_shmdt
 67

	)

39 
	#FIO_HUGE_PAGE
 2097152

	)

41 
	#n›
 
__asm__
 
	`__vﬁ©ûe__
("ªp;n›": : :"mem‹y")

	)

42 
	#ªad_b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
("l„n˚":::"mem‹y")

	)

43 
	#wrôe_b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
("s„n˚":::"mem‹y")

	)

45 
ölöe
 
	$¨ch_ffz
(
bômask
)

47 
	`__asm__
("bs‡%1,%0" :"Ù" (
bômask
) :"r" (~bitmask));

48  
bômask
;

49 
	}
}

51 
ölöe
 
	$gë_˝u_˛ock
()

53 
lo
, 
hi
;

55 
__asm__
 
	`__vﬁ©ûe__
("rdtsc" : "˜" (
lo
), "=d" (
hi
));

56  ((Ë
hi
 << 32ULLË| 
lo
;

57 
	}
}

59 
	#ARCH_HAVE_FFZ


	)

60 
	#ARCH_HAVE_SSE4_2


	)

61 
	#ARCH_HAVE_CPU_CLOCK


	)

	@/home/terekhov/tmp/fio/fio/arch/arch.h

1 #i‚de‡
ARCH_H


2 
	#ARCH_H


	)

5 
	m¨ch_x86_64
 = 1,

6 
	m¨ch_i386
,

7 
	m¨ch_µc
,

8 
	m¨ch_ü64
,

9 
	m¨ch_s390
,

10 
	m¨ch_Æpha
,

11 
	m¨ch_•¨c
,

12 
	m¨ch_•¨c64
,

13 
	m¨ch_¨m
,

14 
	m¨ch_sh
,

15 
	m¨ch_hµa
,

16 
	m¨ch_mùs
,

18 
	m¨ch_gíîic
,

20 
	m¨ch_ƒ
,

24 
	mARCH_FLAG_1
 = 1 << 0,

25 
	mARCH_FLAG_2
 = 1 << 1,

26 
	mARCH_FLAG_3
 = 1 << 2,

27 
	mARCH_FLAG_4
 = 1 << 3,

30 
¨ch_Êags
;

32 #i‡
deföed
(
__i386__
)

33 
	~"¨ch-x86.h
"

34 #ñi‡
deföed
(
__x86_64__
)

35 
	~"¨ch-x86_64.h
"

36 #ñi‡
deföed
(
__powîpc__
Ë|| deföed(
__powîpc64__
Ë|| deföed(
__µc__
)

37 
	~"¨ch-µc.h
"

38 #ñi‡
deföed
(
__ü64__
)

39 
	~"¨ch-ü64.h
"

40 #ñi‡
deföed
(
__Æpha__
)

41 
	~"¨ch-Æpha.h
"

42 #ñi‡
deföed
(
__s390x__
Ë|| deföed(
__s390__
)

43 
	~"¨ch-s390.h
"

44 #ñi‡
deföed
(
__•¨c__
)

45 
	~"¨ch-•¨c.h
"

46 #ñi‡
deföed
(
__•¨c64__
)

47 
	~"¨ch-•¨c64.h
"

48 #ñi‡
deföed
(
__¨m__
)

49 
	~"¨ch-¨m.h
"

50 #ñi‡
deföed
(
__mùs__
Ë|| deföed(
__mùs64__
)

51 
	~"¨ch-mùs.h
"

52 #ñi‡
deföed
(
__sh__
)

53 
	~"¨ch-sh.h
"

54 #ñi‡
deföed
(
__hµa__
)

55 
	~"¨ch-hµa.h
"

58 
	~"¨ch-gíîic.h
"

61 #ifde‡
ARCH_HAVE_FFZ


62 
	#ffz
(
bômask
Ë
	`¨ch_ffz
(bômask)

	)

64 
	~"../lib/ffz.h
"

67 #i‚de‡
ARCH_HAVE_INIT


68 
ölöe
 
	$¨ch_öô
(*
ívp
[])

71 
	}
}

	@/home/terekhov/tmp/fio/fio/backend.c

24 
	~<uni°d.h
>

25 
	~<f˙é.h
>

26 
	~<°rög.h
>

27 
	~<limôs.h
>

28 
	~<sig«l.h
>

29 
	~<time.h
>

30 
	~<loˇÀ.h
>

31 
	~<as£π.h
>

32 
	~<time.h
>

33 
	~<öây≥s.h
>

34 
	~<sys/°©.h
>

35 
	~<sys/waô.h
>

36 
	~<sys/ùc.h
>

37 
	~<sys/mm™.h
>

39 
	~"fio.h
"

40 #i‚de‡
FIO_NO_HAVE_SHM_H


41 
	~<sys/shm.h
>

43 
	~"hash.h
"

44 
	~"smÆloc.h
"

45 
	~"vîify.h
"

46 
	~"åim.h
"

47 
	~"diskutû.h
"

48 
	~"cgroup.h
"

49 
	~"¥ofûe.h
"

50 
	~"lib/ønd.h
"

51 
	~"memÆign.h
"

52 
	~"£rvî.h
"

53 
	~"lib/gërußge.h
"

54 
	~"idÀtime.h
"

55 
	~"îr.h
"

57 
±hªad_t
 
	gdisk_utû_thªad
;

58 
fio_muãx
 *
	gdisk_thªad_muãx
;

59 
fio_muãx
 *
	g°¨tup_muãx
;

60 
Êi°_hód
 *
	gcgroup_li°
;

61 *
	gcgroup_m¡
;

62 
	gexô_vÆue
;

63 vﬁ©ûê
	gfio_ab‹t
;

64 
	gƒ_¥o˚ss
 = 0;

65 
	gƒ_thªad
 = 0;

67 
io_log
 *
	gagg_io_log
[
DDIR_RWDIR_CNT
];

69 
	ggroupid
 = 0;

70 
	gthªad_numbî
 = 0;

71 
	g°©_numbî
 = 0;

72 
	gshm_id
 = 0;

73 
	gãmp_°Æl_ts
;

74 
	gd⁄e_£cs
 = 0;

75 vﬁ©ûê
	gdisk_utû_exô
 = 0;

77 
	#PAGE_ALIGN
(
buf
) \

78 (*Ë(((
uöçå_t
Ë(
buf
Ë+ 
∑ge_mask
Ë& ~∑ge_mask)

	)

80 
	#JOB_START_TIMEOUT
 (5 * 1000)

	)

82 
	$sig_öt
(
sig
)

84 i‡(
thªads
) {

85 i‡(
is_backíd
)

86 
	`fio_£rvî_gŸ_sig«l
(
sig
);

88 
	`log_öfo
("\nfio:Åîmö©ög o¿sig«»%d\n", 
sig
);

89 
	`fÊush
(
°dout
);

90 
exô_vÆue
 = 128;

93 
	`fio_ãrmö©e_thªads
(
TERMINATE_ALL
);

95 
	}
}

97 
	$sig_show_°©us
(
sig
)

99 
	`show_ru¬ög_run_°©s
();

100 
	}
}

102 
	$£t_sig_h™dÀrs
()

104 
siga˘i⁄
 
a˘
;

106 
	`mem£t
(&
a˘
, 0, (act));

107 
a˘
.
ß_h™dÀr
 = 
sig_öt
;

108 
a˘
.
ß_Êags
 = 
SA_RESTART
;

109 
	`siga˘i⁄
(
SIGINT
, &
a˘
, 
NULL
);

111 
	`mem£t
(&
a˘
, 0, (act));

112 
a˘
.
ß_h™dÀr
 = 
sig_öt
;

113 
a˘
.
ß_Êags
 = 
SA_RESTART
;

114 
	`siga˘i⁄
(
SIGTERM
, &
a˘
, 
NULL
);

117 #ifde‡
WIN32


118 
	`mem£t
(&
a˘
, 0, (act));

119 
a˘
.
ß_h™dÀr
 = 
sig_öt
;

120 
a˘
.
ß_Êags
 = 
SA_RESTART
;

121 
	`siga˘i⁄
(
SIGBREAK
, &
a˘
, 
NULL
);

124 
	`mem£t
(&
a˘
, 0, (act));

125 
a˘
.
ß_h™dÀr
 = 
sig_show_°©us
;

126 
a˘
.
ß_Êags
 = 
SA_RESTART
;

127 
	`siga˘i⁄
(
SIGUSR1
, &
a˘
, 
NULL
);

129 i‡(
is_backíd
) {

130 
	`mem£t
(&
a˘
, 0, (act));

131 
a˘
.
ß_h™dÀr
 = 
sig_öt
;

132 
a˘
.
ß_Êags
 = 
SA_RESTART
;

133 
	`siga˘i⁄
(
SIGPIPE
, &
a˘
, 
NULL
);

135 
	}
}

140 
	$__check_mö_øã
(
thªad_d©a
 *
td
, 
timevÆ
 *
now
,

141 
fio_ddú
 
ddú
)

143 
byãs
 = 0;

144 
i›s
 = 0;

145 
•ít
;

146 
øã
;

147 
øãmö
 = 0;

148 
øã_i›s
 = 0;

149 
øã_i›s_mö
 = 0;

151 
	`as£π
(
	`ddú_rw
(
ddú
));

153 i‡(!
td
->
o
.
øãmö
[
ddú
] && !td->o.
øã_i›s_mö
[ddir])

159 i‡(
	`mtime_sö˚
(&
td
->
°¨t
, 
now
) < 2000)

162 
i›s
 +
td
->
this_io_blocks
[
ddú
];

163 
byãs
 +
td
->
this_io_byãs
[
ddú
];

164 
øãmö
 +
td
->
o
.øãmö[
ddú
];

165 
øã_i›s
 +
td
->
o
.øã_i›s[
ddú
];

166 
øã_i›s_mö
 +
td
->
o
.øã_i›s_mö[
ddú
];

171 i‡(
td
->
øã_byãs
[
ddú
] ||Åd->
øã_blocks
[ddir]) {

172 
•ít
 = 
	`mtime_sö˚
(&
td
->
œ°øã
[
ddú
], 
now
);

173 i‡(
•ít
 < 
td
->
o
.
øãcy˛e
)

176 i‡(
td
->
o
.
øã
[
ddú
]) {

180 i‡(
byãs
 < 
td
->
øã_byãs
[
ddú
]) {

181 
	`log_îr
("%s: möÑ©ê%uÇŸ më\n", 
td
->
o
.
«me
,

182 
øãmö
);

185 i‡(
•ít
)

186 
øã
 = ((
byãs
 - 
td
->
øã_byãs
[
ddú
]Ë* 1000Ë/ 
•ít
;

188 
øã
 = 0;

190 i‡(
øã
 < 
øãmö
 ||

191 
byãs
 < 
td
->
øã_byãs
[
ddú
]) {

192 
	`log_îr
("%s: minÑate %uÇot met, got"

193 " %luKB/£c\n", 
td
->
o
.
«me
,

194 
øãmö
, 
øã
);

202 i‡(
i›s
 < 
øã_i›s
) {

203 
	`log_îr
("%s: min iopsÑate %uÇot met\n",

204 
td
->
o
.
«me
, 
øã_i›s
);

207 i‡(
•ít
)

208 
øã
 = ((
i›s
 - 
td
->
øã_blocks
[
ddú
]Ë* 1000Ë/ 
•ít
;

210 
øã
 = 0;

212 i‡(
øã
 < 
øã_i›s_mö
 ||

213 
i›s
 < 
td
->
øã_blocks
[
ddú
]) {

214 
	`log_îr
("%s: min iopsÑate %uÇot met,"

215 " gŸ %lu\n", 
td
->
o
.
«me
,

216 
øã_i›s_mö
, 
øã
);

222 
td
->
øã_byãs
[
ddú
] = 
byãs
;

223 
td
->
øã_blocks
[
ddú
] = 
i›s
;

224 
	`mem˝y
(&
td
->
œ°øã
[
ddú
], 
now
, (*now));

226 
	}
}

228 
	$check_mö_øã
(
thªad_d©a
 *
td
, 
timevÆ
 *
now
,

229 
uöt64_t
 *
byãs_d⁄e
)

231 
ªt
 = 0;

233 i‡(
byãs_d⁄e
[
DDIR_READ
])

234 
ªt
 |
	`__check_mö_øã
(
td
, 
now
, 
DDIR_READ
);

235 i‡(
byãs_d⁄e
[
DDIR_WRITE
])

236 
ªt
 |
	`__check_mö_øã
(
td
, 
now
, 
DDIR_WRITE
);

237 i‡(
byãs_d⁄e
[
DDIR_TRIM
])

238 
ªt
 |
	`__check_mö_øã
(
td
, 
now
, 
DDIR_TRIM
);

240  
ªt
;

241 
	}
}

247 
	$˛ónup_≥ndög_aio
(
thªad_d©a
 *
td
)

249 
r
;

254 
r
 = 
	`io_u_queued_com∂ëe
(
td
, 0, 
NULL
);

255 i‡(
r
 < 0)

261 i‡(
td
->
io_›s
->
ˇn˚l
) {

262 
io_u
 *io_u;

263 
i
;

265 
	`io_u_qôî
(&
td
->
io_u_Æl
, 
io_u
, 
i
) {

266 i‡(
io_u
->
Êags
 & 
IO_U_F_FLIGHT
) {

267 
r
 = 
td
->
io_›s
->
	`ˇn˚l
—d, 
io_u
);

268 i‡(!
r
)

269 
	`put_io_u
(
td
, 
io_u
);

274 i‡(
td
->
cur_dïth
)

275 
r
 = 
	`io_u_queued_com∂ëe
(
td
,Åd->
cur_dïth
, 
NULL
);

276 
	}
}

282 
	$fio_io_sync
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

284 
io_u
 *io_u = 
	`__gë_io_u
(
td
);

285 
ªt
;

287 i‡(!
io_u
)

290 
io_u
->
ddú
 = 
DDIR_SYNC
;

291 
io_u
->
fûe
 = 
f
;

293 i‡(
	`td_io_¥ï
(
td
, 
io_u
)) {

294 
	`put_io_u
(
td
, 
io_u
);

298 
ªqueue
:

299 
ªt
 = 
	`td_io_queue
(
td
, 
io_u
);

300 i‡(
ªt
 < 0) {

301 
	`td_vîr‹
(
td
, 
io_u
->
îr‹
, "td_io_queue");

302 
	`put_io_u
(
td
, 
io_u
);

304 } i‡(
ªt
 =
FIO_Q_QUEUED
) {

305 i‡(
	`io_u_queued_com∂ëe
(
td
, 1, 
NULL
) < 0)

307 } i‡(
ªt
 =
FIO_Q_COMPLETED
) {

308 i‡(
io_u
->
îr‹
) {

309 
	`td_vîr‹
(
td
, 
io_u
->
îr‹
, "td_io_queue");

313 i‡(
	`io_u_sync_com∂ëe
(
td
, 
io_u
, 
NULL
) < 0)

315 } i‡(
ªt
 =
FIO_Q_BUSY
) {

316 i‡(
	`td_io_commô
(
td
))

318 
ªqueue
;

322 
	}
}

324 
	$fio_fûe_fsync
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

326 
ªt
;

328 i‡(
	`fio_fûe_›í
(
f
))

329  
	`fio_io_sync
(
td
, 
f
);

331 i‡(
	`td_io_›í_fûe
(
td
, 
f
))

334 
ªt
 = 
	`fio_io_sync
(
td
, 
f
);

335 
	`td_io_˛o£_fûe
(
td
, 
f
);

336  
ªt
;

337 
	}
}

339 
ölöe
 
	$__upd©e_tv_ˇche
(
thªad_d©a
 *
td
)

341 
	`fio_gëtime
(&
td
->
tv_ˇche
, 
NULL
);

342 
	}
}

344 
ölöe
 
	$upd©e_tv_ˇche
(
thªad_d©a
 *
td
)

346 i‡((++
td
->
tv_ˇche_ƒ
 &Åd->
tv_ˇche_mask
) ==Åd->tv_cache_mask)

347 
	`__upd©e_tv_ˇche
(
td
);

348 
	}
}

350 
ölöe
 
	$ru¡ime_ex˚eded
(
thªad_d©a
 *
td
, 
timevÆ
 *
t
)

352 i‡(
	`ö_ømp_time
(
td
))

354 i‡(!
td
->
o
.
timeout
)

356 i‡(
	`utime_sö˚
(&
td
->
ïoch
, 
t
Ë>td->
o
.
timeout
)

360 
	}
}

362 
	$bªak_⁄_this_îr‹
(
thªad_d©a
 *
td
, 
fio_ddú
 
ddú
,

363 *
ªçå
)

365 
ªt
 = *
ªçå
;

367 i‡(
ªt
 < 0 || 
td
->
îr‹
) {

368 
îr
 = 
td
->
îr‹
;

369 
îr‹_ty≥_bô
 
eb
;

371 i‡(
ªt
 < 0)

372 
îr
 = -
ªt
;

374 
eb
 = 
	`td_îr‹_ty≥
(
ddú
, 
îr
);

375 i‡(!(
td
->
o
.
c⁄töue_⁄_îr‹
 & (1 << 
eb
)))

378 i‡(
	`td_n⁄_Áèl_îr‹
(
td
, 
eb
, 
îr
)) {

383 
	`upd©e_îr‹_cou¡
(
td
, 
îr
);

384 
	`td_˛ór_îr‹
(
td
);

385 *
ªçå
 = 0;

387 } i‡(
td
->
o
.
fûl_devi˚
 && 
îr
 =
ENOSPC
) {

392 
	`td_˛ór_îr‹
(
td
);

393 
td
->
ãrmö©e
 = 1;

400 
	`upd©e_îr‹_cou¡
(
td
, 
îr
);

406 
	}
}

408 
	$check_upd©e_rußge
(
thªad_d©a
 *
td
)

410 i‡(
td
->
upd©e_rußge
) {

411 
td
->
upd©e_rußge
 = 0;

412 
	`upd©e_rußge_°©
(
td
);

413 
	`fio_muãx_up
(
td
->
rußge_£m
);

415 
	}
}

421 
	$do_vîify
(
thªad_d©a
 *
td
, 
uöt64_t
 
vîify_byãs
)

423 
uöt64_t
 
byãs_d⁄e
[
DDIR_RWDIR_CNT
] = { 0, 0, 0 };

424 
fio_fûe
 *
f
;

425 
io_u
 *io_u;

426 
ªt
, 
mö_evíts
;

427 
i
;

429 
	`d¥öt
(
FD_VERIFY
, "startingÜoop\n");

435 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

436 i‡(!
	`fio_fûe_›í
(
f
))

438 i‡(
	`fio_io_sync
(
td
, 
f
))

440 i‡(
	`fûe_övÆid©e_ˇche
(
td
, 
f
))

444 
	`check_upd©e_rußge
(
td
);

446 i‡(
td
->
îr‹
)

449 
	`td_£t_run°©e
(
td
, 
TD_VERIFYING
);

451 
io_u
 = 
NULL
;

452 !
td
->
ãrmö©e
) {

453 
fio_ddú
 
ddú
;

454 
ªt2
, 
fuŒ
;

456 
	`upd©e_tv_ˇche
(
td
);

457 
	`check_upd©e_rußge
(
td
);

459 i‡(
	`ru¡ime_ex˚eded
(
td
, &td->
tv_ˇche
)) {

460 
	`__upd©e_tv_ˇche
(
td
);

461 i‡(
	`ru¡ime_ex˚eded
(
td
, &td->
tv_ˇche
)) {

462 
td
->
ãrmö©e
 = 1;

467 i‡(
	`Êow_thªshﬁd_ex˚eded
(
td
))

470 i‡(!
td
->
o
.
ex≥rimíèl_vîify
) {

471 
io_u
 = 
	`__gë_io_u
(
td
);

472 i‡(!
io_u
)

475 i‡(
	`gë_√xt_vîify
(
td
, 
io_u
)) {

476 
	`put_io_u
(
td
, 
io_u
);

480 i‡(
	`td_io_¥ï
(
td
, 
io_u
)) {

481 
	`put_io_u
(
td
, 
io_u
);

485 i‡(
	`ddú_rw_sum
(
byãs_d⁄e
Ë+ 
td
->
o
.
rw_mö_bs
 > 
vîify_byãs
)

488 (
io_u
 = 
	`gë_io_u
(
td
)Ë!
NULL
) {

489 i‡(
	`IS_ERR
(
io_u
)) {

490 
io_u
 = 
NULL
;

491 
ªt
 = 
FIO_Q_BUSY
;

492 
ª≠
;

500 i‡(
io_u
->
ddú
 =
DDIR_READ
) {

505 
td
->
io_issues
[
DDIR_READ
]++;

506 
	`put_io_u
(
td
, 
io_u
);

508 } i‡(
io_u
->
ddú
 =
DDIR_TRIM
) {

509 
io_u
->
ddú
 = 
DDIR_READ
;

510 
io_u
->
Êags
 |
IO_U_F_TRIMMED
;

512 } i‡(
io_u
->
ddú
 =
DDIR_WRITE
) {

513 
io_u
->
ddú
 = 
DDIR_READ
;

516 
	`put_io_u
(
td
, 
io_u
);

521 i‡(!
io_u
)

525 i‡(
td
->
o
.
vîify_async
)

526 
io_u
->
íd_io
 = 
vîify_io_u_async
;

528 
io_u
->
íd_io
 = 
vîify_io_u
;

530 
ddú
 = 
io_u
->ddir;

532 
ªt
 = 
	`td_io_queue
(
td
, 
io_u
);

533 
ªt
) {

534 
FIO_Q_COMPLETED
:

535 i‡(
io_u
->
îr‹
) {

536 
ªt
 = -
io_u
->
îr‹
;

537 
	`˛ór_io_u
(
td
, 
io_u
);

538 } i‡(
io_u
->
ªsid
) {

539 
byãs
 = 
io_u
->
x„r_buÊí
 - io_u->
ªsid
;

544 i‡(!
byãs
) {

545 
	`td_vîr‹
(
td
, 
EIO
, "fullÑesid");

546 
	`put_io_u
(
td
, 
io_u
);

550 
io_u
->
x„r_buÊí
 = io_u->
ªsid
;

551 
io_u
->
x„r_buf
 +
byãs
;

552 
io_u
->
off£t
 +
byãs
;

554 i‡(
	`ddú_rw
(
io_u
->
ddú
))

555 
td
->
ts
.
sh‹t_io_u
[
io_u
->
ddú
]++;

557 
f
 = 
io_u
->
fûe
;

558 i‡(
io_u
->
off£t
 =
f
->
ªÆ_fûe_size
)

559 
sync_d⁄e
;

561 
	`ªqueue_io_u
(
td
, &
io_u
);

563 
sync_d⁄e
:

564 
ªt
 = 
	`io_u_sync_com∂ëe
(
td
, 
io_u
, 
byãs_d⁄e
);

565 i‡(
ªt
 < 0)

569 
FIO_Q_QUEUED
:

571 
FIO_Q_BUSY
:

572 
	`ªqueue_io_u
(
td
, &
io_u
);

573 
ªt2
 = 
	`td_io_commô
(
td
);

574 i‡(
ªt2
 < 0)

575 
ªt
 = 
ªt2
;

578 
	`as£π
(
ªt
 < 0);

579 
	`td_vîr‹
(
td
, -
ªt
, "td_io_queue");

583 i‡(
	`bªak_⁄_this_îr‹
(
td
, 
ddú
, &
ªt
))

591 
ª≠
:

592 
fuŒ
 = 
	`queue_fuŒ
(
td
Ë|| (
ªt
 =
FIO_Q_BUSY
 &&Åd->
cur_dïth
);

593 i‡(
fuŒ
 || !
td
->
o
.
iodïth_b©ch_com∂ëe
) {

594 
mö_evíts
 = 
	`mö
(
td
->
o
.
iodïth_b©ch_com∂ëe
,

595 
td
->
cur_dïth
);

599 i‡(
fuŒ
 && !
mö_evíts
)

600 
mö_evíts
 = 1;

608 i‡(
	`io_u_queued_com∂ëe
(
td
, 
mö_evíts
, 
byãs_d⁄e
) < 0) {

609 
ªt
 = -1;

612 } 
fuŒ
 && (
td
->
cur_dïth
 >Åd->
o
.
iodïth_low
));

614 i‡(
ªt
 < 0)

618 
	`check_upd©e_rußge
(
td
);

620 i‡(!
td
->
îr‹
) {

621 
mö_evíts
 = 
td
->
cur_dïth
;

623 i‡(
mö_evíts
)

624 
ªt
 = 
	`io_u_queued_com∂ëe
(
td
, 
mö_evíts
, 
NULL
);

626 
	`˛ónup_≥ndög_aio
(
td
);

628 
	`td_£t_run°©e
(
td
, 
TD_RUNNING
);

630 
	`d¥öt
(
FD_VERIFY
, "exitingÜoop\n");

631 
	}
}

633 
	$ex˚eds_numbî_ios
(
thªad_d©a
 *
td
)

635 
numbî_ios
;

637 i‡(!
td
->
o
.
numbî_ios
)

640 
numbî_ios
 = 
	`ddú_rw_sum
(
td
->
this_io_blocks
);

641 
numbî_ios
 +
td
->
io_u_queued
 +Åd->
io_u_ö_Êight
;

643  
numbî_ios
 >
td
->
o
.number_ios;

644 
	}
}

646 
	$io_byãs_ex˚eded
(
thªad_d©a
 *
td
)

648 
byãs
, 
limô
;

650 i‡(
	`td_rw
(
td
))

651 
byãs
 = 
td
->
this_io_byãs
[
DDIR_READ
] +Åd->this_io_byãs[
DDIR_WRITE
];

652 i‡(
	`td_wrôe
(
td
))

653 
byãs
 = 
td
->
this_io_byãs
[
DDIR_WRITE
];

654 i‡(
	`td_ªad
(
td
))

655 
byãs
 = 
td
->
this_io_byãs
[
DDIR_READ
];

657 
byãs
 = 
td
->
this_io_byãs
[
DDIR_TRIM
];

659 i‡(
td
->
o
.
io_limô
)

660 
limô
 = 
td
->
o
.
io_limô
;

662 
limô
 = 
td
->
o
.
size
;

664  
byãs
 >
limô
 || 
	`ex˚eds_numbî_ios
(
td
);

665 
	}
}

673 
uöt64_t
 
	$do_io
(
thªad_d©a
 *
td
)

675 
uöt64_t
 
byãs_d⁄e
[
DDIR_RWDIR_CNT
] = { 0, 0, 0 };

676 
i
;

677 
ªt
 = 0;

678 
uöt64_t
 
tŸÆ_byãs
, 
byãs_issued
 = 0;

680 i‡(
	`ö_ømp_time
(
td
))

681 
	`td_£t_run°©e
(
td
, 
TD_RAMP
);

683 
	`td_£t_run°©e
(
td
, 
TD_RUNNING
);

685 
	`œt_èrgë_öô
(
td
);

692 
tŸÆ_byãs
 = 
td
->
o
.
size
;

693 i‡(
td
->
o
.
vîify
 !
VERIFY_NONE
 &&

694 (
	`td_wrôe
(
td
Ë&&Åd->
o
.
vîify_backlog
))

695 
tŸÆ_byãs
 +
td
->
o
.
size
;

697 (
td
->
o
.
ªad_iﬁog_fûe
 && !
	`Êi°_em±y
(&td->
io_log_li°
)) ||

698 (!
	`Êi°_em±y
(&
td
->
åim_li°
)Ë|| !
	`io_byãs_ex˚eded
(td) ||

699 
td
->
o
.
time_ba£d
) {

700 
timevÆ
 
comp_time
;

701 
mö_evts
 = 0;

702 
io_u
 *io_u;

703 
ªt2
, 
fuŒ
;

704 
fio_ddú
 
ddú
;

706 
	`check_upd©e_rußge
(
td
);

708 i‡(
td
->
ãrmö©e
 ||Åd->
d⁄e
)

711 
	`upd©e_tv_ˇche
(
td
);

713 i‡(
	`ru¡ime_ex˚eded
(
td
, &td->
tv_ˇche
)) {

714 
	`__upd©e_tv_ˇche
(
td
);

715 i‡(
	`ru¡ime_ex˚eded
(
td
, &td->
tv_ˇche
)) {

716 
td
->
ãrmö©e
 = 1;

721 i‡(
	`Êow_thªshﬁd_ex˚eded
(
td
))

724 i‡(
byãs_issued
 >
tŸÆ_byãs
)

727 
io_u
 = 
	`gë_io_u
(
td
);

728 i‡(
	`IS_ERR_OR_NULL
(
io_u
)) {

729 
îr
 = 
	`PTR_ERR
(
io_u
);

731 
io_u
 = 
NULL
;

732 i‡(
îr
 =-
EBUSY
) {

733 
ªt
 = 
FIO_Q_BUSY
;

734 
ª≠
;

736 i‡(
td
->
o
.
œãncy_èrgë
)

737 
ª≠
;

741 
ddú
 = 
io_u
->ddir;

748 i‡(
td
->
o
.
vîify
 !
VERIFY_NONE
 && 
io_u
->
ddú
 =
DDIR_READ
 &&

749 ((
io_u
->
Êags
 & 
IO_U_F_VER_LIST
Ë|| !
	`td_rw
(
td
))) {

751 i‡(!
td
->
o
.
vîify_∑âîn_byãs
) {

752 
io_u
->
ønd_£ed
 = 
	`__ønd
(&
td
->
__vîify_°©e
);

754 
io_u
->
ønd_£ed
 *
	`__ønd
(&
td
->
__vîify_°©e
);

757 i‡(
td
->
o
.
vîify_async
)

758 
io_u
->
íd_io
 = 
vîify_io_u_async
;

760 
io_u
->
íd_io
 = 
vîify_io_u
;

761 
	`td_£t_run°©e
(
td
, 
TD_VERIFYING
);

762 } i‡(
	`ö_ømp_time
(
td
))

763 
	`td_£t_run°©e
(
td
, 
TD_RAMP
);

765 
	`td_£t_run°©e
(
td
, 
TD_RUNNING
);

772 i‡(
	`td_wrôe
(
td
Ë&& 
io_u
->
ddú
 =
DDIR_WRITE
 &&

773 
td
->
o
.
do_vîify
 &&

774 
td
->
o
.
vîify
 !
VERIFY_NONE
 &&

775 !
td
->
o
.
ex≥rimíèl_vîify
)

776 
	`log_io_põ˚
(
td
, 
io_u
);

778 
ªt
 = 
	`td_io_queue
(
td
, 
io_u
);

779 
ªt
) {

780 
FIO_Q_COMPLETED
:

781 i‡(
io_u
->
îr‹
) {

782 
ªt
 = -
io_u
->
îr‹
;

783 
	`u∆og_io_põ˚
(
td
, 
io_u
);

784 
	`˛ór_io_u
(
td
, 
io_u
);

785 } i‡(
io_u
->
ªsid
) {

786 
byãs
 = 
io_u
->
x„r_buÊí
 - io_u->
ªsid
;

787 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

789 
byãs_issued
 +
byãs
;

791 
	`åim_io_põ˚
(
td
, 
io_u
);

796 i‡(!
byãs
) {

797 
	`u∆og_io_põ˚
(
td
, 
io_u
);

798 
	`td_vîr‹
(
td
, 
EIO
, "fullÑesid");

799 
	`put_io_u
(
td
, 
io_u
);

803 
io_u
->
x„r_buÊí
 = io_u->
ªsid
;

804 
io_u
->
x„r_buf
 +
byãs
;

805 
io_u
->
off£t
 +
byãs
;

807 i‡(
	`ddú_rw
(
io_u
->
ddú
))

808 
td
->
ts
.
sh‹t_io_u
[
io_u
->
ddú
]++;

810 i‡(
io_u
->
off£t
 =
f
->
ªÆ_fûe_size
)

811 
sync_d⁄e
;

813 
	`ªqueue_io_u
(
td
, &
io_u
);

815 
sync_d⁄e
:

816 i‡(
	`__should_check_øã
(
td
, 
DDIR_READ
) ||

817 
	`__should_check_øã
(
td
, 
DDIR_WRITE
) ||

818 
	`__should_check_øã
(
td
, 
DDIR_TRIM
))

819 
	`fio_gëtime
(&
comp_time
, 
NULL
);

821 
ªt
 = 
	`io_u_sync_com∂ëe
(
td
, 
io_u
, 
byãs_d⁄e
);

822 i‡(
ªt
 < 0)

824 
byãs_issued
 +
io_u
->
x„r_buÊí
;

827 
FIO_Q_QUEUED
:

833 i‡(
td
->
io_›s
->
commô
 =
NULL
)

834 
	`io_u_queued
(
td
, 
io_u
);

835 
byãs_issued
 +
io_u
->
x„r_buÊí
;

837 
FIO_Q_BUSY
:

838 
	`u∆og_io_põ˚
(
td
, 
io_u
);

839 
	`ªqueue_io_u
(
td
, &
io_u
);

840 
ªt2
 = 
	`td_io_commô
(
td
);

841 i‡(
ªt2
 < 0)

842 
ªt
 = 
ªt2
;

845 
	`as£π
(
ªt
 < 0);

846 
	`put_io_u
(
td
, 
io_u
);

850 i‡(
	`bªak_⁄_this_îr‹
(
td
, 
ddú
, &
ªt
))

858 
ª≠
:

859 
fuŒ
 = 
	`queue_fuŒ
(
td
Ë|| (
ªt
 =
FIO_Q_BUSY
 &&Åd->
cur_dïth
);

860 i‡(
fuŒ
 || !
td
->
o
.
iodïth_b©ch_com∂ëe
) {

861 
mö_evts
 = 
	`mö
(
td
->
o
.
iodïth_b©ch_com∂ëe
,

862 
td
->
cur_dïth
);

866 i‡(
fuŒ
 && !
mö_evts
)

867 
mö_evts
 = 1;

869 i‡(
	`__should_check_øã
(
td
, 
DDIR_READ
) ||

870 
	`__should_check_øã
(
td
, 
DDIR_WRITE
) ||

871 
	`__should_check_øã
(
td
, 
DDIR_TRIM
))

872 
	`fio_gëtime
(&
comp_time
, 
NULL
);

875 
ªt
 = 
	`io_u_queued_com∂ëe
(
td
, 
mö_evts
, 
byãs_d⁄e
);

876 i‡(
ªt
 < 0)

879 } 
fuŒ
 && (
td
->
cur_dïth
 >Åd->
o
.
iodïth_low
));

882 i‡(
ªt
 < 0)

884 i‡(!
	`ddú_rw_sum
(
byãs_d⁄e
Ë&& !(
td
->
io_›s
->
Êags
 & 
FIO_NOIO
))

887 i‡(!
	`ö_ømp_time
(
td
Ë&& 
	`should_check_øã
—d, 
byãs_d⁄e
)) {

888 i‡(
	`check_mö_øã
(
td
, &
comp_time
, 
byãs_d⁄e
)) {

889 i‡(
exôÆl_⁄_ãrmö©e
)

890 
	`fio_ãrmö©e_thªads
(
td
->
groupid
);

891 
	`td_vîr‹
(
td
, 
EIO
, "check_min_rate");

895 i‡(!
	`ö_ømp_time
(
td
Ë&&Åd->
o
.
œãncy_èrgë
)

896 
	`œt_èrgë_check
(
td
);

898 i‡(
td
->
o
.
thöktime
) {

899 
b
;

901 
b
 = 
	`ddú_rw_sum
(
td
->
io_blocks
);

902 i‡(!(
b
 % 
td
->
o
.
thöktime_blocks
)) {

903 
À·
;

905 
	`io_u_quõs˚
(
td
);

907 i‡(
td
->
o
.
thöktime_•ö
)

908 
	`u£c_•ö
(
td
->
o
.
thöktime_•ö
);

910 
À·
 = 
td
->
o
.
thöktime
 -Åd->o.
thöktime_•ö
;

911 i‡(
À·
)

912 
	`u£c_¶ìp
(
td
, 
À·
);

917 
	`check_upd©e_rußge
(
td
);

919 i‡(
td
->
åim_íåõs
)

920 
	`log_îr
("fio: %luÅrimÉ¡rõ†Àaked?\n", 
td
->
åim_íåõs
);

922 i‡(
td
->
o
.
fûl_devi˚
 &&Åd->
îr‹
 =
ENOSPC
) {

923 
td
->
îr‹
 = 0;

924 
td
->
ãrmö©e
 = 1;

926 i‡(!
td
->
îr‹
) {

927 
fio_fûe
 *
f
;

929 
i
 = 
td
->
cur_dïth
;

930 i‡(
i
) {

931 
ªt
 = 
	`io_u_queued_com∂ëe
(
td
, 
i
, 
byãs_d⁄e
);

932 i‡(
td
->
o
.
fûl_devi˚
 &&Åd->
îr‹
 =
ENOSPC
)

933 
td
->
îr‹
 = 0;

936 i‡(
	`should_fsync
(
td
Ë&&Åd->
o
.
íd_fsync
) {

937 
	`td_£t_run°©e
(
td
, 
TD_FSYNCING
);

939 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

940 i‡(!
	`fio_fûe_fsync
(
td
, 
f
))

943 
	`log_îr
("fio:Énd_fsync failed for file %s\n",

944 
f
->
fûe_«me
);

948 
	`˛ónup_≥ndög_aio
(
td
);

953 i‡(!
	`ddú_rw_sum
(
td
->
this_io_byãs
))

954 
td
->
d⁄e
 = 1;

956  
byãs_d⁄e
[
DDIR_WRITE
] + byãs_d⁄e[
DDIR_TRIM
];

957 
	}
}

959 
	$˛ónup_io_u
(
thªad_d©a
 *
td
)

961 
io_u
 *io_u;

963 (
io_u
 = 
	`io_u_qp›
(&
td
->
io_u_‰ìli°
)Ë!
NULL
) {

965 i‡(
td
->
io_›s
->
io_u_‰ì
)

966 
td
->
io_›s
->
	`io_u_‰ì
—d, 
io_u
);

968 
	`fio_mem‰ì
(
io_u
, (*io_u));

971 
	`‰ì_io_mem
(
td
);

973 
	`io_u_ªxô
(&
td
->
io_u_ªqueues
);

974 
	`io_u_qexô
(&
td
->
io_u_‰ìli°
);

975 
	`io_u_qexô
(&
td
->
io_u_Æl
);

976 
	}
}

978 
	$öô_io_u
(
thªad_d©a
 *
td
)

980 
io_u
 *io_u;

981 
max_bs
, 
mö_wrôe
;

982 
˛_Æign
, 
i
, 
max_unôs
;

983 
d©a_x„r
 = 1, 
îr
;

984 *
p
;

986 
max_unôs
 = 
td
->
o
.
iodïth
;

987 
max_bs
 = 
	`td_max_bs
(
td
);

988 
mö_wrôe
 = 
td
->
o
.
mö_bs
[
DDIR_WRITE
];

989 
td
->
‹ig_buf„r_size
 = (Ë
max_bs


990 * (Ë
max_unôs
;

992 i‡((
td
->
io_›s
->
Êags
 & 
FIO_NOIO
Ë|| !(
	`td_ªad
—dË|| 
	`td_wrôe
(td)))

993 
d©a_x„r
 = 0;

995 
îr
 = 0;

996 
îr
 +
	`io_u_röô
(&
td
->
io_u_ªqueues
,Åd->
o
.
iodïth
);

997 
îr
 +
	`io_u_qöô
(&
td
->
io_u_‰ìli°
,Åd->
o
.
iodïth
);

998 
îr
 +
	`io_u_qöô
(&
td
->
io_u_Æl
,Åd->
o
.
iodïth
);

1000 i‡(
îr
) {

1001 
	`log_îr
("fio: failed setting up IO queues\n");

1011 i‡(
td
->
o
.
odúe˘
 ||Åd->o.
mem_Æign
 ||Åd->o.
ﬂtomic
 ||

1012 (
td
->
io_›s
->
Êags
 & 
FIO_RAWIO
))

1013 
td
->
‹ig_buf„r_size
 +
∑ge_mask
 +Åd->
o
.
mem_Æign
;

1015 i‡(
td
->
o
.
mem_ty≥
 =
MEM_SHMHUGE
 ||Åd->o.mem_ty≥ =
MEM_MMAPHUGE
) {

1016 
bs
;

1018 
bs
 = 
td
->
‹ig_buf„r_size
 +Åd->
o
.
hugïage_size
 - 1;

1019 
td
->
‹ig_buf„r_size
 = 
bs
 & ~—d->
o
.
hugïage_size
 - 1);

1022 i‡(
td
->
‹ig_buf„r_size
 !(
size_t
)Åd->orig_buffer_size) {

1023 
	`log_îr
("fio: IO memoryÅooÜarge. Reduce max_bs or iodepth\n");

1027 i‡(
d©a_x„r
 && 
	`Æloˇã_io_mem
(
td
))

1030 i‡(
td
->
o
.
odúe˘
 ||Åd->o.
mem_Æign
 ||Åd->o.
ﬂtomic
 ||

1031 (
td
->
io_›s
->
Êags
 & 
FIO_RAWIO
))

1032 
p
 = 
	`PAGE_ALIGN
(
td
->
‹ig_buf„r
Ë+Åd->
o
.
mem_Æign
;

1034 
p
 = 
td
->
‹ig_buf„r
;

1036 
˛_Æign
 = 
	`os_ˇche_löe_size
();

1038 
i
 = 0; i < 
max_unôs
; i++) {

1039 *
±r
;

1041 i‡(
td
->
ãrmö©e
)

1044 
±r
 = 
	`fio_memÆign
(
˛_Æign
, (*
io_u
));

1045 i‡(!
±r
) {

1046 
	`log_îr
("fio: unableÅoállocateáligned memory\n");

1050 
io_u
 = 
±r
;

1051 
	`mem£t
(
io_u
, 0, (*io_u));

1052 
	`INIT_FLIST_HEAD
(&
io_u
->
vîify_li°
);

1053 
	`d¥öt
(
FD_MEM
, "io_uáŒo¯%p, index %u\n", 
io_u
, 
i
);

1055 i‡(
d©a_x„r
) {

1056 
io_u
->
buf
 = 
p
;

1057 
	`d¥öt
(
FD_MEM
, "io_u %p, mem %p\n", 
io_u
, io_u->
buf
);

1059 i‡(
	`td_wrôe
(
td
))

1060 
	`io_u_fûl_buf„r
(
td
, 
io_u
, 
mö_wrôe
, 
max_bs
);

1061 i‡(
	`td_wrôe
(
td
Ë&&Åd->
o
.
vîify_∑âîn_byãs
) {

1066 
	`fûl_vîify_∑âîn
(
td
, 
io_u
->
buf
, 
max_bs
, io_u, 0, 0);

1070 
io_u
->
ödex
 = 
i
;

1071 
io_u
->
Êags
 = 
IO_U_F_FREE
;

1072 
	`io_u_qpush
(&
td
->
io_u_‰ìli°
, 
io_u
);

1078 
	`io_u_qpush
(&
td
->
io_u_Æl
, 
io_u
);

1080 i‡(
td
->
io_›s
->
io_u_öô
) {

1081 
ªt
 = 
td
->
io_›s
->
	`io_u_öô
—d, 
io_u
);

1083 i‡(
ªt
) {

1084 
	`log_îr
("fio: faûedÅÿöôÉngöêd©a: %d\n", 
ªt
);

1089 
p
 +
max_bs
;

1093 
	}
}

1095 
	$swôch_ioscheduÀr
(
thªad_d©a
 *
td
)

1097 
tmp
[256], 
tmp2
[128];

1098 
FILE
 *
f
;

1099 
ªt
;

1101 i‡(
td
->
io_›s
->
Êags
 & 
FIO_DISKLESSIO
)

1104 
	`•rötf
(
tmp
, "%s/queue/scheduÀr", 
td
->
sysfs_roŸ
);

1106 
f
 = 
	`f›í
(
tmp
, "r+");

1107 i‡(!
f
) {

1108 i‡(
î∫o
 =
ENOENT
) {

1109 
	`log_îr
("fio: os or kernel doesn't support IO scheduler"

1113 
	`td_vîr‹
(
td
, 
î∫o
, "fopen iosched");

1120 
ªt
 = 
	`fwrôe
(
td
->
o
.
ioscheduÀr
, 
	`°æí
—d->o.ioscheduÀr), 1, 
f
);

1121 i‡(
	`„º‹
(
f
Ë|| 
ªt
 != 1) {

1122 
	`td_vîr‹
(
td
, 
î∫o
, "fwrite");

1123 
	`f˛o£
(
f
);

1127 
	`ªwöd
(
f
);

1132 
ªt
 = 
	`‰ód
(
tmp
, —mp), 1, 
f
);

1133 i‡(
	`„º‹
(
f
Ë|| 
ªt
 < 0) {

1134 
	`td_vîr‹
(
td
, 
î∫o
, "fread");

1135 
	`f˛o£
(
f
);

1138 
tmp
[(tmp) - 1] = '\0';

1141 
	`•rötf
(
tmp2
, "[%s]", 
td
->
o
.
ioscheduÀr
);

1142 i‡(!
	`°r°r
(
tmp
, 
tmp2
)) {

1143 
	`log_îr
("fio: iÿscheduÀ∏%†nŸ found\n", 
td
->
o
.
ioscheduÀr
);

1144 
	`td_vîr‹
(
td
, 
EINVAL
, "iosched_switch");

1145 
	`f˛o£
(
f
);

1149 
	`f˛o£
(
f
);

1151 
	}
}

1153 
	$kìp_ru¬ög
(
thªad_d©a
 *
td
)

1155 
limô
;

1157 i‡(
td
->
d⁄e
)

1159 i‡(
td
->
o
.
time_ba£d
)

1161 i‡(
td
->
o
.
lo›s
) {

1162 
td
->
o
.
lo›s
--;

1165 i‡(
	`ex˚eds_numbî_ios
(
td
))

1168 i‡(
td
->
o
.
io_limô
)

1169 
limô
 = 
td
->
o
.
io_limô
;

1171 
limô
 = 
td
->
o
.
size
;

1173 i‡(
limô
 !-1ULL && 
	`ddú_rw_sum
(
td
->
io_byãs
) <Üimit) {

1174 
uöt64_t
 
diff
;

1180 
diff
 = 
limô
 - 
	`ddú_rw_sum
(
td
->
io_byãs
);

1181 i‡(
diff
 < 
	`td_max_bs
(
td
))

1184 i‡(
	`fio_fûes_d⁄e
(
td
))

1191 
	}
}

1193 
	$exec_°rög
(
thªad_›ti⁄s
 *
o
, c⁄° *
°rög
, c⁄° *
mode
)

1195 
ªt
, 
√wÀn
 = 
	`°æí
(
°rög
Ë+ såÀn(
o
->
«me
Ë+ såÀn(
mode
) + 9 + 1;

1196 *
°r
;

1198 
°r
 = 
	`mÆloc
(
√wÀn
);

1199 
	`•rötf
(
°r
, "%†&> %s.%s.txt", 
°rög
, 
o
->
«me
, 
mode
);

1201 
	`log_öfo
("%†: Savög ouçuào‡%†ö %s.%s.txt\n",
o
->
«me
, 
mode
, o->name, mode);

1202 
ªt
 = 
	`sy°em
(
°r
);

1203 i‡(
ªt
 == -1)

1204 
	`log_îr
("fio:Éxe¯o‡cmd <%s> faûed\n", 
°r
);

1206 
	`‰ì
(
°r
);

1207  
ªt
;

1208 
	}
}

1213 
uöt64_t
 
	$do_dry_run
(
thªad_d©a
 *
td
)

1215 
uöt64_t
 
byãs_d⁄e
[
DDIR_RWDIR_CNT
] = { 0, 0, 0 };

1217 
	`td_£t_run°©e
(
td
, 
TD_RUNNING
);

1219 (
td
->
o
.
ªad_iﬁog_fûe
 && !
	`Êi°_em±y
(&td->
io_log_li°
)) ||

1220 (!
	`Êi°_em±y
(&
td
->
åim_li°
)Ë|| !
	`io_byãs_ex˚eded
(td)) {

1221 
io_u
 *io_u;

1222 
ªt
;

1224 i‡(
td
->
ãrmö©e
 ||Åd->
d⁄e
)

1227 
io_u
 = 
	`gë_io_u
(
td
);

1228 i‡(!
io_u
)

1231 
io_u
->
Êags
 |
IO_U_F_FLIGHT
;

1232 
io_u
->
îr‹
 = 0;

1233 
io_u
->
ªsid
 = 0;

1234 i‡(
	`ddú_rw
(
	`ac˘_ddú
(
io_u
)))

1235 
td
->
io_issues
[
	`ac˘_ddú
(
io_u
)]++;

1236 i‡(
	`ddú_rw
(
io_u
->
ddú
)) {

1237 
	`io_u_m¨k_dïth
(
td
, 1);

1238 
td
->
ts
.
tŸÆ_io_u
[
io_u
->
ddú
]++;

1241 i‡(
	`td_wrôe
(
td
Ë&& 
io_u
->
ddú
 =
DDIR_WRITE
 &&

1242 
td
->
o
.
do_vîify
 &&

1243 
td
->
o
.
vîify
 !
VERIFY_NONE
 &&

1244 !
td
->
o
.
ex≥rimíèl_vîify
)

1245 
	`log_io_põ˚
(
td
, 
io_u
);

1247 
ªt
 = 
	`io_u_sync_com∂ëe
(
td
, 
io_u
, 
byãs_d⁄e
);

1248 (Ë
ªt
;

1251  
byãs_d⁄e
[
DDIR_WRITE
] + byãs_d⁄e[
DDIR_TRIM
];

1252 
	}
}

1258 *
	$thªad_maö
(*
d©a
)

1260 
ñ≠£d
;

1261 
thªad_d©a
 *
td
 = 
d©a
;

1262 
thªad_›ti⁄s
 *
o
 = &
td
->o;

1263 
±hªad_c⁄d©å_t
 
©å
;

1264 
˛ór_°©e
;

1265 
ªt
;

1267 i‡(!
o
->
u£_thªad
) {

1268 
	`£tsid
();

1269 
td
->
pid
 = 
	`gëpid
();

1271 
td
->
pid
 = 
	`gëtid
();

1276 
	`fio_time_öô
();

1278 
	`fio_loˇl_˛ock_öô
(
o
->
u£_thªad
);

1280 
	`d¥öt
(
FD_PROCESS
, "job†pid=%d sèπed\n", (Ë
td
->
pid
);

1282 i‡(
is_backíd
)

1283 
	`fio_£rvî_£nd_°¨t
(
td
);

1285 
	`INIT_FLIST_HEAD
(&
td
->
io_log_li°
);

1286 
	`INIT_FLIST_HEAD
(&
td
->
io_hi°_li°
);

1287 
	`INIT_FLIST_HEAD
(&
td
->
vîify_li°
);

1288 
	`INIT_FLIST_HEAD
(&
td
->
åim_li°
);

1289 
	`INIT_FLIST_HEAD
(&
td
->
√xt_ønd_li°
);

1290 
	`±hªad_muãx_öô
(&
td
->
io_u_lock
, 
NULL
);

1291 
td
->
io_hi°_åì
 = 
RB_ROOT
;

1293 
	`±hªad_c⁄d©å_öô
(&
©å
);

1294 
	`±hªad_c⁄d_öô
(&
td
->
vîify_c⁄d
, &
©å
);

1295 
	`±hªad_c⁄d_öô
(&
td
->
‰ì_c⁄d
, &
©å
);

1297 
	`td_£t_run°©e
(
td
, 
TD_INITIALIZED
);

1298 
	`d¥öt
(
FD_MUTEX
, "up startup_mutex\n");

1299 
	`fio_muãx_up
(
°¨tup_muãx
);

1300 
	`d¥öt
(
FD_MUTEX
, "wait onÅd->mutex\n");

1301 
	`fio_muãx_down
(
td
->
muãx
);

1302 
	`d¥öt
(
FD_MUTEX
, "done waiting onÅd->mutex\n");

1308 i‡(
o
->
gid
 !-1U && 
	`£tgid
(o->gid)) {

1309 
	`td_vîr‹
(
td
, 
î∫o
, "setgid");

1310 
îr
;

1312 i‡(
o
->
uid
 !-1U && 
	`£tuid
(o->uid)) {

1313 
	`td_vîr‹
(
td
, 
î∫o
, "setuid");

1314 
îr
;

1321 i‡(
o
->
gtod_˝u
)

1322 
	`fio_˝u_˛ór
(&
o
->
˝umask
, o->
gtod_˝u
);

1328 i‡(
o
->
˝umask_£t
) {

1329 i‡(
o
->
˝us_Ælowed_pﬁicy
 =
FIO_CPUS_SPLIT
) {

1330 
ªt
 = 
	`fio_˝us_•lô
(&
o
->
˝umask
, 
td
->
thªad_numbî
 - 1);

1331 i‡(!
ªt
) {

1332 
	`log_îr
("fio:Ço CPUs set\n");

1333 
	`log_îr
("fio: Try increasingÇumber ofávailable CPUs\n");

1334 
	`td_vîr‹
(
td
, 
EINVAL
, "cpus_split");

1335 
îr
;

1338 
ªt
 = 
	`fio_£èfföôy
(
td
->
pid
, 
o
->
˝umask
);

1339 i‡(
ªt
 == -1) {

1340 
	`td_vîr‹
(
td
, 
î∫o
, "cpu_set_affinity");

1341 
îr
;

1345 #ifde‡
CONFIG_LIBNUMA


1347 i‡(
o
->
numa_˝umask_£t
 || o->
numa_memmask_£t
) {

1348 
bômask
 *
mask
;

1349 
ªt
;

1351 i‡(
	`numa_avaûabÀ
() < 0) {

1352 
	`td_vîr‹
(
td
, 
î∫o
, "DoesÇot support NUMA API\n");

1353 
îr
;

1356 i‡(
o
->
numa_˝umask_£t
) {

1357 
mask
 = 
	`numa_∑r£_node°rög
(
o
->
numa_˝unodes
);

1358 
ªt
 = 
	`numa_run_⁄_node_mask
(
mask
);

1359 
	`numa_‰ì_nodemask
(
mask
);

1360 i‡(
ªt
 == -1) {

1361 
	`td_vîr‹
(
td
, 
î∫o
, \

1363 
îr
;

1367 i‡(
o
->
numa_memmask_£t
) {

1369 
mask
 = 
NULL
;

1370 i‡(
o
->
numa_memnodes
)

1371 
mask
 = 
	`numa_∑r£_node°rög
(
o
->
numa_memnodes
);

1373 
o
->
numa_mem_mode
) {

1374 
MPOL_INTERLEAVE
:

1375 
	`numa_£t_öãæóve_mask
(
mask
);

1377 
MPOL_BIND
:

1378 
	`numa_£t_memböd
(
mask
);

1380 
MPOL_LOCAL
:

1381 
	`numa_£t_loˇœŒoc
();

1383 
MPOL_PREFERRED
:

1384 
	`numa_£t_¥e„ºed
(
o
->
numa_mem_¥e„r_node
);

1386 
MPOL_DEFAULT
:

1391 i‡(
mask
)

1392 
	`numa_‰ì_nodemask
(
mask
);

1398 i‡(
	`fio_pö_mem‹y
(
td
))

1399 
îr
;

1405 i‡(
	`öô_iﬁog
(
td
))

1406 
îr
;

1408 i‡(
	`öô_io_u
(
td
))

1409 
îr
;

1411 i‡(
o
->
vîify_async
 && 
	`vîify_async_öô
(
td
))

1412 
îr
;

1414 i‡(
o
->
i›rio
) {

1415 
ªt
 = 
	`i›rio_£t
(
IOPRIO_WHO_PROCESS
, 0, 
o
->
i›rio_˛ass
, o->
i›rio
);

1416 i‡(
ªt
 == -1) {

1417 
	`td_vîr‹
(
td
, 
î∫o
, "ioprio_set");

1418 
îr
;

1422 i‡(
o
->
cgroup
 && 
	`cgroup_£tup
(
td
, 
cgroup_li°
, &
cgroup_m¡
))

1423 
îr
;

1425 
î∫o
 = 0;

1426 i‡(
	`ni˚
(
o
->
ni˚
Ë=-1 && 
î∫o
 != 0) {

1427 
	`td_vîr‹
(
td
, 
î∫o
, "nice");

1428 
îr
;

1431 i‡(
o
->
ioscheduÀr
 && 
	`swôch_ioscheduÀr
(
td
))

1432 
îr
;

1434 i‡(!
o
->
¸óã_£rülize
 && 
	`£tup_fûes
(
td
))

1435 
îr
;

1437 i‡(
	`td_io_öô
(
td
))

1438 
îr
;

1440 i‡(
	`öô_øndom_m≠
(
td
))

1441 
îr
;

1443 i‡(
o
->
exec_¥îun
 && 
	`exec_°rög
(o, o->exec_prerun, (const *)"prerun"))

1444 
îr
;

1446 i‡(
o
->
¥e_ªad
) {

1447 i‡(
	`¥e_ªad_fûes
(
td
) < 0)

1448 
îr
;

1451 
	`fio_vîify_öô
(
td
);

1453 
	`fio_gëtime
(&
td
->
ïoch
, 
NULL
);

1454 
	`fio_gërußge
(&
td
->
ru_°¨t
);

1455 
˛ór_°©e
 = 0;

1456 
	`kìp_ru¬ög
(
td
)) {

1457 
uöt64_t
 
vîify_byãs
;

1459 
	`fio_gëtime
(&
td
->
°¨t
, 
NULL
);

1460 
	`mem˝y
(&
td
->
bw_ßm∂e_time
, &td->
°¨t
, (td->start));

1461 
	`mem˝y
(&
td
->
i›s_ßm∂e_time
, &td->
°¨t
, (td->start));

1462 
	`mem˝y
(&
td
->
tv_ˇche
, &td->
°¨t
, (td->start));

1464 i‡(
o
->
øãmö
[
DDIR_READ
] || o->øãmö[
DDIR_WRITE
] ||

1465 
o
->
øãmö
[
DDIR_TRIM
]) {

1466 
	`mem˝y
(&
td
->
œ°øã
[
DDIR_READ
], &td->
bw_ßm∂e_time
,

1467 (
td
->
bw_ßm∂e_time
));

1468 
	`mem˝y
(&
td
->
œ°øã
[
DDIR_WRITE
], &td->
bw_ßm∂e_time
,

1469 (
td
->
bw_ßm∂e_time
));

1470 
	`mem˝y
(&
td
->
œ°øã
[
DDIR_TRIM
], &td->
bw_ßm∂e_time
,

1471 (
td
->
bw_ßm∂e_time
));

1474 i‡(
˛ór_°©e
)

1475 
	`˛ór_io_°©e
(
td
);

1477 
	`¥u√_io_põ˚_log
(
td
);

1479 i‡(
td
->
o
.
vîify_⁄ly
 && (
	`td_wrôe
—dË|| 
	`td_rw
(td)))

1480 
vîify_byãs
 = 
	`do_dry_run
(
td
);

1482 
vîify_byãs
 = 
	`do_io
(
td
);

1484 
˛ór_°©e
 = 1;

1486 i‡(
	`td_ªad
(
td
Ë&&Åd->
io_byãs
[
DDIR_READ
]) {

1487 
ñ≠£d
 = 
	`utime_sö˚_now
(&
td
->
°¨t
);

1488 
td
->
ts
.
ru¡ime
[
DDIR_READ
] +
ñ≠£d
;

1490 i‡(
	`td_wrôe
(
td
Ë&&Åd->
io_byãs
[
DDIR_WRITE
]) {

1491 
ñ≠£d
 = 
	`utime_sö˚_now
(&
td
->
°¨t
);

1492 
td
->
ts
.
ru¡ime
[
DDIR_WRITE
] +
ñ≠£d
;

1494 i‡(
	`td_åim
(
td
Ë&&Åd->
io_byãs
[
DDIR_TRIM
]) {

1495 
ñ≠£d
 = 
	`utime_sö˚_now
(&
td
->
°¨t
);

1496 
td
->
ts
.
ru¡ime
[
DDIR_TRIM
] +
ñ≠£d
;

1499 i‡(
td
->
îr‹
 ||Åd->
ãrmö©e
)

1502 i‡(!
o
->
do_vîify
 ||

1503 
o
->
vîify
 =
VERIFY_NONE
 ||

1504 (
td
->
io_›s
->
Êags
 & 
FIO_UNIDIR
))

1507 
	`˛ór_io_°©e
(
td
);

1509 
	`fio_gëtime
(&
td
->
°¨t
, 
NULL
);

1511 
	`do_vîify
(
td
, 
vîify_byãs
);

1513 
td
->
ts
.
ru¡ime
[
DDIR_READ
] +
	`utime_sö˚_now
(&td->
°¨t
);

1515 i‡(
td
->
îr‹
 ||Åd->
ãrmö©e
)

1519 
	`upd©e_rußge_°©
(
td
);

1520 
td
->
ts
.
ru¡ime
[
DDIR_READ
] = (td->ts.runtime[DDIR_READ] + 999) / 1000;

1521 
td
->
ts
.
ru¡ime
[
DDIR_WRITE
] = (td->ts.runtime[DDIR_WRITE] + 999) / 1000;

1522 
td
->
ts
.
ru¡ime
[
DDIR_TRIM
] = (td->ts.runtime[DDIR_TRIM] + 999) / 1000;

1523 
td
->
ts
.
tŸÆ_run_time
 = 
	`mtime_sö˚_now
(&td->
ïoch
);

1524 
td
->
ts
.
io_byãs
[
DDIR_READ
] =Åd->io_bytes[DDIR_READ];

1525 
td
->
ts
.
io_byãs
[
DDIR_WRITE
] =Åd->io_bytes[DDIR_WRITE];

1526 
td
->
ts
.
io_byãs
[
DDIR_TRIM
] =Åd->io_bytes[DDIR_TRIM];

1528 
	`fio_u≈ö_mem‹y
(
td
);

1530 
	`fio_wrôeout_logs
(
td
);

1532 i‡(
o
->
exec_po°run
)

1533 
	`exec_°rög
(
o
, o->
exec_po°run
, (const *)"postrun");

1535 i‡(
exôÆl_⁄_ãrmö©e
)

1536 
	`fio_ãrmö©e_thªads
(
td
->
groupid
);

1538 
îr
:

1539 i‡(
td
->
îr‹
)

1540 
	`log_öfo
("fio:Öid=%d,Éº=%d/%s\n", (Ë
td
->
pid
,Åd->
îr‹
,

1541 
td
->
vîr‹
);

1543 i‡(
o
->
vîify_async
)

1544 
	`vîify_async_exô
(
td
);

1546 
	`˛o£_™d_‰ì_fûes
(
td
);

1547 
	`˛ónup_io_u
(
td
);

1548 
	`˛o£_i€ngöe
(
td
);

1549 
	`cgroup_shutdown
(
td
, &
cgroup_m¡
);

1551 i‡(
o
->
˝umask_£t
) {

1552 
ªt
 = 
	`fio_˝u£t_exô
(&
o
->
˝umask
);

1554 
	`td_vîr‹
(
td
, 
ªt
, "fio_cpuset_exit");

1560 i‡(
o
->
wrôe_iﬁog_fûe
)

1561 
	`wrôe_iﬁog_˛o£
(
td
);

1563 
	`fio_muãx_ªmove
(
td
->
rußge_£m
);

1564 
td
->
rußge_£m
 = 
NULL
;

1566 
	`fio_muãx_ªmove
(
td
->
muãx
);

1567 
td
->
muãx
 = 
NULL
;

1569 
	`td_£t_run°©e
(
td
, 
TD_EXITED
);

1570  (*Ë(
uöçå_t
Ë
td
->
îr‹
;

1571 
	}
}

1578 
	$f‹k_maö
(
shmid
, 
off£t
)

1580 
thªad_d©a
 *
td
;

1581 *
d©a
, *
ªt
;

1583 #i‚de‡
__hpux


1584 
d©a
 = 
	`shm©
(
shmid
, 
NULL
, 0);

1585 i‡(
d©a
 == (*) -1) {

1586 
__îr
 = 
î∫o
;

1588 
	`≥º‹
("shmat");

1589  
__îr
;

1595 
d©a
 = 
thªads
;

1598 
td
 = 
d©a
 + 
off£t
 * (
thªad_d©a
);

1599 
ªt
 = 
	`thªad_maö
(
td
);

1600 
	`shmdt
(
d©a
);

1601  (Ë(
uöçå_t
Ë
ªt
;

1602 
	}
}

1607 
	$ª≠_thªads
(*
ƒ_ru¬ög
, *
t_øã
,

1608 *
m_øã
)

1610 
thªad_d©a
 *
td
;

1611 
˝uthªads
, 
ªÆthªads
, 
≥ndög
;

1612 
i
, 
°©us
, 
ªt
;

1617 
ªÆthªads
 = 
≥ndög
 = 
˝uthªads
 = 0;

1618 
	`f‹_óch_td
(
td
, 
i
) {

1619 
Êags
 = 0;

1625 i‡(
td
->
io_›s
 && !
	`°rcmp
—d->io_›s->
«me
, "cpuio"))

1626 
˝uthªads
++;

1628 
ªÆthªads
++;

1630 i‡(!
td
->
pid
) {

1631 
≥ndög
++;

1634 i‡(
td
->
run°©e
 =
TD_REAPED
)

1636 i‡(
td
->
o
.
u£_thªad
) {

1637 i‡(
td
->
run°©e
 =
TD_EXITED
) {

1638 
	`td_£t_run°©e
(
td
, 
TD_REAPED
);

1639 
ª≠ed
;

1644 
Êags
 = 
WNOHANG
;

1645 i‡(
td
->
run°©e
 =
TD_EXITED
)

1646 
Êags
 = 0;

1651 
ªt
 = 
	`waôpid
(
td
->
pid
, &
°©us
, 
Êags
);

1652 i‡(
ªt
 < 0) {

1653 i‡(
î∫o
 =
ECHILD
) {

1654 
	`log_îr
("fio:Öid=%d disappeared %d\n",

1655 (Ë
td
->
pid
,Åd->
run°©e
);

1656 
td
->
sig
 = 
ECHILD
;

1657 
	`td_£t_run°©e
(
td
, 
TD_REAPED
);

1658 
ª≠ed
;

1660 
	`≥º‹
("waitpid");

1661 } i‡(
ªt
 =
td
->
pid
) {

1662 i‡(
	`WIFSIGNALED
(
°©us
)) {

1663 
sig
 = 
	`WTERMSIG
(
°©us
);

1665 i‡(
sig
 !
SIGTERM
 && sig !
SIGUSR2
)

1666 
	`log_îr
("fio:Öid=%d, got signal=%d\n",

1667 (Ë
td
->
pid
, 
sig
);

1668 
td
->
sig
 = sig;

1669 
	`td_£t_run°©e
(
td
, 
TD_REAPED
);

1670 
ª≠ed
;

1672 i‡(
	`WIFEXITED
(
°©us
)) {

1673 i‡(
	`WEXITSTATUS
(
°©us
Ë&& !
td
->
îr‹
)

1674 
td
->
îr‹
 = 
	`WEXITSTATUS
(
°©us
);

1676 
	`td_£t_run°©e
(
td
, 
TD_REAPED
);

1677 
ª≠ed
;

1684 
≥ndög
++;

1686 
ª≠ed
:

1687 (*
ƒ_ru¬ög
)--;

1688 (*
m_øã
Ë-
	`ddú_rw_sum
(
td
->
o
.
øãmö
);

1689 (*
t_øã
Ë-
	`ddú_rw_sum
(
td
->
o
.
øã
);

1690 i‡(!
td
->
pid
)

1691 
≥ndög
--;

1693 i‡(
td
->
îr‹
)

1694 
exô_vÆue
++;

1696 
d⁄e_£cs
 +
	`mtime_sö˚_now
(&
td
->
ïoch
) / 1000;

1697 
	`¥ofûe_td_exô
(
td
);

1700 i‡(*
ƒ_ru¬ög
 =
˝uthªads
 && !
≥ndög
 && 
ªÆthªads
)

1701 
	`fio_ãrmö©e_thªads
(
TERMINATE_ALL
);

1702 
	}
}

1704 
	$do_u¶ìp
(
u£cs
)

1706 
	`check_f‹_ru¬ög_°©s
();

1707 
	`u¶ìp
(
u£cs
);

1708 
	}
}

1713 
	$run_thªads
()

1715 
thªad_d©a
 *
td
;

1716 
i
, 
todo
, 
ƒ_ru¬ög
, 
m_øã
, 
t_øã
, 
ƒ_°¨ãd
;

1717 
uöt64_t
 
•ít
;

1719 i‡(
fio_gtod_ofÊﬂd
 && 
	`fio_°¨t_gtod_thªad
())

1722 
	`fio_idÀ_¥of_öô
();

1724 
	`£t_sig_h™dÀrs
();

1726 
ƒ_thªad
 = 
ƒ_¥o˚ss
 = 0;

1727 
	`f‹_óch_td
(
td
, 
i
) {

1728 i‡(
td
->
o
.
u£_thªad
)

1729 
ƒ_thªad
++;

1731 
ƒ_¥o˚ss
++;

1734 i‡(
ouçut_f‹m©
 =
FIO_OUTPUT_NORMAL
) {

1735 
	`log_öfo
("Starting ");

1736 i‡(
ƒ_thªad
)

1737 
	`log_öfo
("%dÅhªad%s", 
ƒ_thªad
,

1738 
ƒ_thªad
 > 1 ? "s" : "");

1739 i‡(
ƒ_¥o˚ss
) {

1740 i‡(
ƒ_thªad
)

1741 
	`log_öfo
("ánd ");

1742 
	`log_öfo
("%dÖro˚ss%s", 
ƒ_¥o˚ss
,

1743 
ƒ_¥o˚ss
 > 1 ? "es" : "");

1745 
	`log_öfo
("\n");

1746 
	`fÊush
(
°dout
);

1749 
todo
 = 
thªad_numbî
;

1750 
ƒ_ru¬ög
 = 0;

1751 
ƒ_°¨ãd
 = 0;

1752 
m_øã
 = 
t_øã
 = 0;

1754 
	`f‹_óch_td
(
td
, 
i
) {

1755 
	`¥öt_°©us_öô
(
td
->
thªad_numbî
 - 1);

1757 i‡(!
td
->
o
.
¸óã_£rülize
)

1765 i‡(
	`£tup_fûes
(
td
)) {

1766 
exô_vÆue
++;

1767 i‡(
td
->
îr‹
)

1768 
	`log_îr
("fio:Öid=%d,Érr=%d/%s\n",

1769 (Ë
td
->
pid
,Åd->
îr‹
,Åd->
vîr‹
);

1770 
	`td_£t_run°©e
(
td
, 
TD_REAPED
);

1771 
todo
--;

1773 
fio_fûe
 *
f
;

1774 
j
;

1781 
	`f‹_óch_fûe
(
td
, 
f
, 
j
) {

1782 i‡(
	`fio_fûe_›í
(
f
))

1783 
	`td_io_˛o£_fûe
(
td
, 
f
);

1789 
	`fio_idÀ_¥of_°¨t
();

1791 
	`£t_gíesis_time
();

1793 
todo
) {

1794 
thªad_d©a
 *
m≠
[
REAL_MAX_JOBS
];

1795 
timevÆ
 
this_°¨t
;

1796 
this_jobs
 = 0, 
À·
;

1801 
	`f‹_óch_td
(
td
, 
i
) {

1802 i‡(
td
->
run°©e
 !
TD_NOT_CREATED
)

1809 i‡(
td
->
ãrmö©e
) {

1810 
todo
--;

1814 i‡(
td
->
o
.
°¨t_dñay
) {

1815 
•ít
 = 
	`utime_sö˚_gíesis
();

1817 i‡(
td
->
o
.
°¨t_dñay
 > 
•ít
)

1821 i‡(
td
->
o
.
°⁄ewÆl
 && (
ƒ_°¨ãd
 || 
ƒ_ru¬ög
)) {

1822 
	`d¥öt
(
FD_PROCESS
, "%s: stonewall wait\n",

1823 
td
->
o
.
«me
);

1827 
	`öô_disk_utû
(
td
);

1829 
td
->
rußge_£m
 = 
	`fio_muãx_öô
(
FIO_MUTEX_LOCKED
);

1830 
td
->
upd©e_rußge
 = 0;

1836 
	`td_£t_run°©e
(
td
, 
TD_CREATED
);

1837 
m≠
[
this_jobs
++] = 
td
;

1838 
ƒ_°¨ãd
++;

1840 i‡(
td
->
o
.
u£_thªad
) {

1841 
ªt
;

1843 
	`d¥öt
(
FD_PROCESS
, "willÖthread_create\n");

1844 
ªt
 = 
	`±hªad_¸óã
(&
td
->
thªad
, 
NULL
,

1845 
thªad_maö
, 
td
);

1846 i‡(
ªt
) {

1847 
	`log_îr
("pthread_create: %s\n",

1848 
	`°ªº‹
(
ªt
));

1849 
ƒ_°¨ãd
--;

1852 
ªt
 = 
	`±hªad_dëach
(
td
->
thªad
);

1853 i‡(
ªt
)

1854 
	`log_îr
("pthread_detach: %s",

1855 
	`°ªº‹
(
ªt
));

1857 
pid_t
 
pid
;

1858 
	`d¥öt
(
FD_PROCESS
, "will fork\n");

1859 
pid
 = 
	`f‹k
();

1860 i‡(!
pid
) {

1861 
ªt
 = 
	`f‹k_maö
(
shm_id
, 
i
);

1863 
	`_exô
(
ªt
);

1864 } i‡(
i
 =
fio_debug_jobno
)

1865 *
fio_debug_jobp
 = 
pid
;

1867 
	`d¥öt
(
FD_MUTEX
, "wait on startup_mutex\n");

1868 i‡(
	`fio_muãx_down_timeout
(
°¨tup_muãx
, 10)) {

1869 
	`log_îr
("fio: job startup hung?Éxiting.\n");

1870 
	`fio_ãrmö©e_thªads
(
TERMINATE_ALL
);

1871 
fio_ab‹t
 = 1;

1872 
ƒ_°¨ãd
--;

1875 
	`d¥öt
(
FD_MUTEX
, "done waiting on startup_mutex\n");

1882 
	`fio_gëtime
(&
this_°¨t
, 
NULL
);

1883 
À·
 = 
this_jobs
;

1884 
À·
 && !
fio_ab‹t
) {

1885 i‡(
	`mtime_sö˚_now
(&
this_°¨t
Ë> 
JOB_START_TIMEOUT
)

1888 
	`do_u¶ìp
(100000);

1890 
i
 = 0; i < 
this_jobs
; i++) {

1891 
td
 = 
m≠
[
i
];

1892 i‡(!
td
)

1894 i‡(
td
->
run°©e
 =
TD_INITIALIZED
) {

1895 
m≠
[
i
] = 
NULL
;

1896 
À·
--;

1897 } i‡(
td
->
run°©e
 >
TD_EXITED
) {

1898 
m≠
[
i
] = 
NULL
;

1899 
À·
--;

1900 
todo
--;

1901 
ƒ_ru¬ög
++;

1906 i‡(
À·
) {

1907 
	`log_îr
("fio: %d job%†ÁûedÅÿ°¨t\n", 
À·
,

1908 
À·
 > 1 ? "s" : "");

1909 
i
 = 0; i < 
this_jobs
; i++) {

1910 
td
 = 
m≠
[
i
];

1911 i‡(!
td
)

1913 
	`kûl
(
td
->
pid
, 
SIGTERM
);

1921 
	`f‹_óch_td
(
td
, 
i
) {

1922 i‡(
td
->
run°©e
 !
TD_INITIALIZED
)

1925 i‡(
	`ö_ømp_time
(
td
))

1926 
	`td_£t_run°©e
(
td
, 
TD_RAMP
);

1928 
	`td_£t_run°©e
(
td
, 
TD_RUNNING
);

1929 
ƒ_ru¬ög
++;

1930 
ƒ_°¨ãd
--;

1931 
m_øã
 +
	`ddú_rw_sum
(
td
->
o
.
øãmö
);

1932 
t_øã
 +
	`ddú_rw_sum
(
td
->
o
.
øã
);

1933 
todo
--;

1934 
	`fio_muãx_up
(
td
->
muãx
);

1937 
	`ª≠_thªads
(&
ƒ_ru¬ög
, &
t_øã
, &
m_øã
);

1939 i‡(
todo
)

1940 
	`do_u¶ìp
(100000);

1943 
ƒ_ru¬ög
) {

1944 
	`ª≠_thªads
(&
ƒ_ru¬ög
, &
t_øã
, &
m_øã
);

1945 
	`do_u¶ìp
(10000);

1948 
	`fio_idÀ_¥of_°›
();

1950 
	`upd©e_io_ticks
();

1951 
	}
}

1953 
	$waô_f‹_disk_thªad_exô
()

1955 
	`fio_muãx_down
(
disk_thªad_muãx
);

1956 
	}
}

1958 
	$‰ì_disk_utû
()

1960 
	`disk_utû_°¨t_exô
();

1961 
	`waô_f‹_disk_thªad_exô
();

1962 
	`disk_utû_¥u√_íåõs
();

1963 
	}
}

1965 *
	$disk_thªad_maö
(*
d©a
)

1967 
ªt
 = 0;

1969 
	`fio_muãx_up
(
°¨tup_muãx
);

1971 
thªads
 && !
ªt
) {

1972 
	`u¶ìp
(
DISK_UTIL_MSEC
 * 1000);

1973 i‡(!
thªads
)

1975 
ªt
 = 
	`upd©e_io_ticks
();

1977 i‡(!
is_backíd
)

1978 
	`¥öt_thªad_°©us
();

1981 
	`fio_muãx_up
(
disk_thªad_muãx
);

1982  
NULL
;

1983 
	}
}

1985 
	$¸óã_disk_utû_thªad
()

1987 
ªt
;

1989 
	`£tup_disk_utû
();

1991 
disk_thªad_muãx
 = 
	`fio_muãx_öô
(
FIO_MUTEX_LOCKED
);

1993 
ªt
 = 
	`±hªad_¸óã
(&
disk_utû_thªad
, 
NULL
, 
disk_thªad_maö
, NULL);

1994 i‡(
ªt
) {

1995 
	`fio_muãx_ªmove
(
disk_thªad_muãx
);

1996 
	`log_îr
("C™'à¸óã disk utûÅhªad: %s\n", 
	`°ªº‹
(
ªt
));

2000 
ªt
 = 
	`±hªad_dëach
(
disk_utû_thªad
);

2001 i‡(
ªt
) {

2002 
	`fio_muãx_ªmove
(
disk_thªad_muãx
);

2003 
	`log_îr
("C™'àdë©ch disk utûÅhªad: %s\n", 
	`°ªº‹
(
ªt
));

2007 
	`d¥öt
(
FD_MUTEX
, "wait on startup_mutex\n");

2008 
	`fio_muãx_down
(
°¨tup_muãx
);

2009 
	`d¥öt
(
FD_MUTEX
, "done waiting on startup_mutex\n");

2011 
	}
}

2013 
	$fio_backíd
()

2015 
thªad_d©a
 *
td
;

2016 
i
;

2018 i‡(
exec_¥ofûe
) {

2019 i‡(
	`lﬂd_¥ofûe
(
exec_¥ofûe
))

2021 
	`‰ì
(
exec_¥ofûe
);

2022 
exec_¥ofûe
 = 
NULL
;

2024 i‡(!
thªad_numbî
)

2027 i‡(
wrôe_bw_log
) {

2028 
	`£tup_log
(&
agg_io_log
[
DDIR_READ
], 0, 
IO_LOG_TYPE_BW
);

2029 
	`£tup_log
(&
agg_io_log
[
DDIR_WRITE
], 0, 
IO_LOG_TYPE_BW
);

2030 
	`£tup_log
(&
agg_io_log
[
DDIR_TRIM
], 0, 
IO_LOG_TYPE_BW
);

2033 
°¨tup_muãx
 = 
	`fio_muãx_öô
(
FIO_MUTEX_LOCKED
);

2034 i‡(
°¨tup_muãx
 =
NULL
)

2037 
	`£t_gíesis_time
();

2038 
	`°©_öô
();

2039 
	`¸óã_disk_utû_thªad
();

2041 
cgroup_li°
 = 
	`smÆloc
((*cgroup_list));

2042 
	`INIT_FLIST_HEAD
(
cgroup_li°
);

2044 
	`run_thªads
();

2046 i‡(!
fio_ab‹t
) {

2047 
	`show_run_°©s
();

2048 i‡(
wrôe_bw_log
) {

2049 
	`__föish_log
(
agg_io_log
[
DDIR_READ
], "agg-read_bw.log");

2050 
	`__föish_log
(
agg_io_log
[
DDIR_WRITE
],

2052 
	`__föish_log
(
agg_io_log
[
DDIR_TRIM
],

2057 
	`f‹_óch_td
(
td
, 
i
)

2058 
	`fio_›ti⁄s_‰ì
(
td
);

2060 
	`‰ì_disk_utû
();

2061 
	`cgroup_kûl
(
cgroup_li°
);

2062 
	`s‰ì
(
cgroup_li°
);

2063 
	`s‰ì
(
cgroup_m¡
);

2065 
	`fio_muãx_ªmove
(
°¨tup_muãx
);

2066 
	`fio_muãx_ªmove
(
disk_thªad_muãx
);

2067 
	`°©_exô
();

2068  
exô_vÆue
;

2069 
	}
}

	@/home/terekhov/tmp/fio/fio/blktrace.c

4 
	~<°dio.h
>

5 
	~<°dlib.h
>

6 
	~<sys/°©.h
>

7 
	~<dúít.h
>

9 
	~"Êi°.h
"

10 
	~"fio.h
"

11 
	~"blkåa˚_≠i.h
"

13 
	#TRACE_FIFO_SIZE
 8192

	)

18 
	$ªfûl_fifo
(
thªad_d©a
 *
td
, 
fifo
 *fifo, 
fd
)

20 
buf
[
TRACE_FIFO_SIZE
];

21 
tŸÆ
;

22 
ªt
;

24 
tŸÆ
 = (
buf
);

25 i‡(
tŸÆ
 > 
	`fifo_room
(
fifo
))

26 
tŸÆ
 = 
	`fifo_room
(
fifo
);

28 
ªt
 = 
	`ªad
(
fd
, 
buf
, 
tŸÆ
);

29 i‡(
ªt
 < 0) {

30 
	`td_vîr‹
(
td
, 
î∫o
, "read blktrace file");

34 i‡(
ªt
 > 0)

35 
ªt
 = 
	`fifo_put
(
fifo
, 
buf
,Ñet);

37 
	`d¥öt
(
FD_BLKTRACE
, "ªfûl: fûÀd %d byãs\n", 
ªt
);

38  
ªt
;

39 
	}
}

44 
	$åa˚_fifo_gë
(
thªad_d©a
 *
td
, 
fifo
 *fifo, 
fd
,

45 *
buf
, 
Àn
)

47 i‡(
	`fifo_Àn
(
fifo
Ë< 
Àn
) {

48 
ªt
 = 
	`ªfûl_fifo
(
td
, 
fifo
, 
fd
);

50 i‡(
ªt
 < 0)

51  
ªt
;

54  
	`fifo_gë
(
fifo
, 
buf
, 
Àn
);

55 
	}
}

60 
	$disˇrd_pdu
(
thªad_d©a
 *
td
, 
fifo
 *fifo, 
fd
,

61 
blk_io_åa˚
 *
t
)

63 i‡(
t
->
pdu_Àn
 == 0)

66 
	`d¥öt
(
FD_BLKTRACE
, "disˇrdÖduÜí %u\n", 
t
->
pdu_Àn
);

67  
	`åa˚_fifo_gë
(
td
, 
fifo
, 
fd
, 
NULL
, 
t
->
pdu_Àn
);

68 
	}
}

74 
	$is_blkåa˚
(c⁄° *
fûíame
, *
√ed_sw≠
)

76 
blk_io_åa˚
 
t
;

77 
fd
, 
ªt
;

79 
fd
 = 
	`›í
(
fûíame
, 
O_RDONLY
);

80 i‡(
fd
 < 0)

83 
ªt
 = 
	`ªad
(
fd
, &
t
, (t));

84 
	`˛o£
(
fd
);

86 i‡(
ªt
 < 0) {

87 
	`≥º‹
("read blktrace");

89 } i‡(
ªt
 !(
t
)) {

90 
	`log_îr
("fio: shortÑead on blktrace file\n");

94 i‡((
t
.
magic
 & 0xffffff00Ë=
BLK_IO_TRACE_MAGIC
) {

95 *
√ed_sw≠
 = 0;

102 
t
.
magic
 = 
	`fio_sw≠32
(t.magic);

103 i‡((
t
.
magic
 & 0xffffff00Ë=
BLK_IO_TRACE_MAGIC
) {

104 *
√ed_sw≠
 = 1;

109 
	}
}

111 
	$lookup_devi˚
(
thªad_d©a
 *
td
, *
∑th
, 
maj
,

112 
mö
)

114 
dúít
 *
dú
;

115 
°©
 
°
;

116 
found
 = 0;

117 
DIR
 *
D
;

119 
D
 = 
	`›ídú
(
∑th
);

120 i‡(!
D
)

123 (
dú
 = 
	`ªaddú
(
D
)Ë!
NULL
) {

124 
fuŒ_∑th
[256];

126 i‡(!
	`°rcmp
(
dú
->
d_«me
, ".") || !strcmp(dir->d_name, ".."))

129 
	`•rötf
(
fuŒ_∑th
, "%s%s%s", 
∑th
, 
FIO_OS_PATH_SEPARATOR
, 
dú
->
d_«me
);

130 i‡(
	`l°©
(
fuŒ_∑th
, &
°
) == -1) {

131 
	`≥º‹
("lstat");

135 i‡(
	`S_ISDIR
(
°
.
°_mode
)) {

136 
found
 = 
	`lookup_devi˚
(
td
, 
fuŒ_∑th
, 
maj
, 
mö
);

137 i‡(
found
) {

138 
	`°r˝y
(
∑th
, 
fuŒ_∑th
);

143 i‡(!
	`S_ISBLK
(
°
.
°_mode
))

151 i‡(
td
->
o
.
ª∂ay_ªdúe˘
) {

152 
	`d¥öt
(
FD_BLKTRACE
, "deviceÜookup: %d/%d\n overridden"

153 " wôh: %s\n", 
maj
, 
mö
,

154 
td
->
o
.
ª∂ay_ªdúe˘
);

155 
	`°r˝y
(
∑th
, 
td
->
o
.
ª∂ay_ªdúe˘
);

156 
found
 = 1;

160 i‡(
maj
 =
	`maj‹
(
°
.
°_rdev
Ë&& 
mö
 =
	`mö‹
(st.st_rdev)) {

161 
	`d¥öt
(
FD_BLKTRACE
, "devi˚Üookup: %d/%d\n", 
maj
, 
mö
);

162 
	`°r˝y
(
∑th
, 
fuŒ_∑th
);

163 
found
 = 1;

168 
	`˛o£dú
(
D
);

169  
found
;

170 
	}
}

172 
	#FMINORBITS
 20

	)

173 
	#FMINORMASK
 ((1U << 
FMINORBITS
Ë- 1)

	)

174 
	#FMAJOR
(
dev
Ë((Ë((devË>> 
FMINORBITS
))

	)

175 
	#FMINOR
(
dev
Ë((Ë((devË& 
FMINORMASK
))

	)

177 
	$åa˚_add_›í_˛o£_evít
(
thªad_d©a
 *
td
, 
fûío
, 
fûe_log_a˘
 
a˘i⁄
)

179 
io_põ˚
 *
ùo
;

181 
ùo
 = 
	`ˇŒoc
(1, (*ipo));

182 
	`öô_ùo
(
ùo
);

184 
ùo
->
ddú
 = 
DDIR_INVAL
;

185 
ùo
->
fûío
 = fileno;

186 
ùo
->
fûe_a˘i⁄
 = 
a˘i⁄
;

187 
	`Êi°_add_èû
(&
ùo
->
li°
, &
td
->
io_log_li°
);

188 
	}
}

190 
	$åa˚_add_fûe
(
thªad_d©a
 *
td
, 
__u32
 
devi˚
)

192 
œ°_maj
, 
œ°_mö
, 
œ°_fûío
;

193 
maj
 = 
	`FMAJOR
(
devi˚
);

194 
mö
 = 
	`FMINOR
(
devi˚
);

195 
fio_fûe
 *
f
;

196 
dev
[256];

197 
i
;

199 i‡(
œ°_maj
 =
maj
 && 
œ°_mö
 =
mö
)

200  
œ°_fûío
;

202 
œ°_maj
 = 
maj
;

203 
œ°_mö
 = 
mö
;

208 
	`f‹_óch_fûe
(
td
, 
f
, 
i
)

209 i‡(
f
->
maj‹
 =
maj
 && f->
mö‹
 =
mö
) {

210 
œ°_fûío
 = 
f
->
fûío
;

211  
œ°_fûío
;

214 
	`°r˝y
(
dev
, "/dev");

215 i‡(
	`lookup_devi˚
(
td
, 
dev
, 
maj
, 
mö
)) {

216 
fûío
;

218 
	`d¥öt
(
FD_BLKTRACE
, "add devi˚†%s\n", 
dev
);

219 
fûío
 = 
	`add_fûe_ex˛usive
(
td
, 
dev
);

220 
td
->
o
.
›í_fûes
++;

221 
td
->
fûes
[
fûío
]->
maj‹
 = 
maj
;

222 
td
->
fûes
[
fûío
]->
mö‹
 = 
mö
;

223 
	`åa˚_add_›í_˛o£_evít
(
td
, 
fûío
, 
FIO_LOG_OPEN_FILE
);

224 
œ°_fûío
 = 
fûío
;

227  
œ°_fûío
;

228 
	}
}

233 
	$°‹e_ùo
(
thªad_d©a
 *
td
, 
off£t
,

234 
byãs
, 
rw
, 
âime
,

235 
fûío
)

237 
io_põ˚
 *
ùo
 = 
	`mÆloc
((*ipo));

239 
	`öô_ùo
(
ùo
);

244 
ùo
->
off£t
 = offset * 512;

245 
ùo
->
Àn
 = 
byãs
;

246 
ùo
->
dñay
 = 
âime
 / 1000;

247 i‡(
rw
)

248 
ùo
->
ddú
 = 
DDIR_WRITE
;

250 
ùo
->
ddú
 = 
DDIR_READ
;

251 
ùo
->
fûío
 = fileno;

253 
	`d¥öt
(
FD_BLKTRACE
, "store ddir=%d, off=%llu,Üen=%lu, delay=%lu\n",

254 
ùo
->
ddú
, ipo->
off£t
,

255 
ùo
->
Àn
, ipo->
dñay
);

256 
	`queue_io_põ˚
(
td
, 
ùo
);

257 
	}
}

259 
	$h™dÀ_åa˚_nŸify
(
blk_io_åa˚
 *
t
)

261 
t
->
a˘i⁄
) {

262 
BLK_TN_PROCESS
:

263 
	`log_öfo
("blktrace: gotÖrocessÇotify: %x, %d\n",

264 
t
->
a˘i⁄
,Å->
pid
);

266 
BLK_TN_TIMESTAMP
:

267 
	`log_öfo
("blktrace: gotÅimestampÇotify: %x, %d\n",

268 
t
->
a˘i⁄
,Å->
pid
);

270 
BLK_TN_MESSAGE
:

273 
	`d¥öt
(
FD_BLKTRACE
, "unknow¿åa˚á˘ %x\n", 
t
->
a˘i⁄
);

276 
	}
}

278 
	$h™dÀ_åa˚_disˇrd
(
thªad_d©a
 *
td
, 
blk_io_åa˚
 *
t
,

279 
âime
, *
ios
)

281 
io_põ˚
 *
ùo
 = 
	`mÆloc
((*ipo));

282 
fûío
;

284 
	`öô_ùo
(
ùo
);

285 
fûío
 = 
	`åa˚_add_fûe
(
td
, 
t
->
devi˚
);

287 
ios
[
DDIR_WRITE
]++;

288 
td
->
o
.
size
 +
t
->
byãs
;

290 
	`mem£t
(
ùo
, 0, (*ipo));

291 
	`INIT_FLIST_HEAD
(&
ùo
->
li°
);

296 
ùo
->
off£t
 = 
t
->
£˘‹
 * 512;

297 
ùo
->
Àn
 = 
t
->
byãs
;

298 
ùo
->
dñay
 = 
âime
 / 1000;

299 
ùo
->
ddú
 = 
DDIR_TRIM
;

300 
ùo
->
fûío
 = fileno;

302 
	`d¥öt
(
FD_BLKTRACE
, "store discard, off=%llu,Üen=%lu, delay=%lu\n",

303 
ùo
->
off£t
, ipo->
Àn
,

304 
ùo
->
dñay
);

305 
	`queue_io_põ˚
(
td
, 
ùo
);

306 
	}
}

308 
	$h™dÀ_åa˚_fs
(
thªad_d©a
 *
td
, 
blk_io_åa˚
 *
t
,

309 
âime
, *
ios
,

310 *
bs
)

312 
rw
;

313 
fûío
;

315 
fûío
 = 
	`åa˚_add_fûe
(
td
, 
t
->
devi˚
);

317 
rw
 = (
t
->
a˘i⁄
 & 
	`BLK_TC_ACT
(
BLK_TC_WRITE
)) != 0;

319 i‡(
t
->
byãs
 > 
bs
[
rw
])

320 
bs
[
rw
] = 
t
->
byãs
;

322 
ios
[
rw
]++;

323 
td
->
o
.
size
 +
t
->
byãs
;

324 
	`°‹e_ùo
(
td
, 
t
->
£˘‹
,Å->
byãs
, 
rw
, 
âime
, 
fûío
);

325 
	}
}

331 
	$h™dÀ_åa˚
(
thªad_d©a
 *
td
, 
blk_io_åa˚
 *
t
,

332 
âime
, *
ios
,

333 *
bs
)

335 i‡((
t
->
a˘i⁄
 & 0xffffË!
__BLK_TA_QUEUE
)

337 i‡(
t
->
a˘i⁄
 & 
	`BLK_TC_ACT
(
BLK_TC_PC
))

340 i‡(
t
->
a˘i⁄
 & 
	`BLK_TC_ACT
(
BLK_TC_NOTIFY
))

341 
	`h™dÀ_åa˚_nŸify
(
t
);

342 i‡(
t
->
a˘i⁄
 & 
	`BLK_TC_ACT
(
BLK_TC_DISCARD
))

343 
	`h™dÀ_åa˚_disˇrd
(
td
, 
t
, 
âime
, 
ios
);

345 
	`h™dÀ_åa˚_fs
(
td
, 
t
, 
âime
, 
ios
, 
bs
);

346 
	}
}

348 
	$byãsw≠_åa˚
(
blk_io_åa˚
 *
t
)

350 
t
->
magic
 = 
	`fio_sw≠32
(t->magic);

351 
t
->
£quí˚
 = 
	`fio_sw≠32
(t->sequence);

352 
t
->
time
 = 
	`fio_sw≠64
(t->time);

353 
t
->
£˘‹
 = 
	`fio_sw≠64
(t->sector);

354 
t
->
byãs
 = 
	`fio_sw≠32
(t->bytes);

355 
t
->
a˘i⁄
 = 
	`fio_sw≠32
(t->action);

356 
t
->
pid
 = 
	`fio_sw≠32
(t->pid);

357 
t
->
devi˚
 = 
	`fio_sw≠32
(t->device);

358 
t
->
˝u
 = 
	`fio_sw≠32
(t->cpu);

359 
t
->
îr‹
 = 
	`fio_sw≠16
(t->error);

360 
t
->
pdu_Àn
 = 
	`fio_sw≠16
(t->pdu_len);

361 
	}
}

367 
	$lﬂd_blkåa˚
(
thªad_d©a
 *
td
, c⁄° *
fûíame
, 
√ed_sw≠
)

369 
âime
, 
dñay
;

370 
blk_io_åa˚
 
t
;

371 
ios
[2], 
skù≥d_wrôes
;

372 
˝u
;

373 
rw_bs
[2];

374 
fifo
 *fifo;

375 
fd
, 
i
, 
ﬁd_°©e
;

376 
fio_fûe
 *
f
;

377 
this_dïth
, 
dïth
;

379 
fd
 = 
	`›í
(
fûíame
, 
O_RDONLY
);

380 i‡(
fd
 < 0) {

381 
	`td_vîr‹
(
td
, 
î∫o
, "open blktrace file");

385 
fifo
 = 
	`fifo_Æloc
(
TRACE_FIFO_SIZE
);

387 
ﬁd_°©e
 = 
	`td_bump_run°©e
(
td
, 
TD_SETTING_UP
);

389 
td
->
o
.
size
 = 0;

391 
˝u
 = 0;

392 
âime
 = 0;

393 
ios
[0] = ios[1] = 0;

394 
rw_bs
[0] =Ñw_bs[1] = 0;

395 
skù≥d_wrôes
 = 0;

396 
this_dïth
 = 
dïth
 = 0;

398 
ªt
 = 
	`åa˚_fifo_gë
(
td
, 
fifo
, 
fd
, &
t
, (t));

400 i‡(
ªt
 < 0)

401 
îr
;

402 i‡(!
ªt
)

404 i‡(
ªt
 < (Ë(
t
)) {

405 
	`log_îr
("fio: short fifo get\n");

409 i‡(
√ed_sw≠
)

410 
	`byãsw≠_åa˚
(&
t
);

412 i‡((
t
.
magic
 & 0xffffff00Ë!
BLK_IO_TRACE_MAGIC
) {

413 
	`log_îr
("fio: bad magic in blktrace data: %x\n",

414 
t
.
magic
);

415 
îr
;

417 i‡((
t
.
magic
 & 0xffË!
BLK_IO_TRACE_VERSION
) {

418 
	`log_îr
("fio: bad blktrace version %d\n",

419 
t
.
magic
 & 0xff);

420 
îr
;

422 
ªt
 = 
	`disˇrd_pdu
(
td
, 
fifo
, 
fd
, &
t
);

423 i‡(
ªt
 < 0) {

424 
	`td_vîr‹
(
td
, 
ªt
, "blktraceÜseek");

425 
îr
;

426 } i‡(
t
.
pdu_Àn
 !
ªt
) {

427 
	`log_îr
("fio: disˇrded %d o‡%d\n", 
ªt
, 
t
.
pdu_Àn
);

428 
îr
;

430 i‡((
t
.
a˘i⁄
 & 
	`BLK_TC_ACT
(
BLK_TC_NOTIFY
)) == 0) {

431 i‡((
t
.
a˘i⁄
 & 0xffffË=
__BLK_TA_QUEUE
)

432 
this_dïth
++;

433 i‡((
t
.
a˘i⁄
 & 0xffffË=
__BLK_TA_COMPLETE
) {

434 
dïth
 = 
	`max
(dïth, 
this_dïth
);

435 
this_dïth
 = 0;

437 i‡(!
âime
) {

438 
âime
 = 
t
.
time
;

439 
˝u
 = 
t
.cpu;

442 
dñay
 = 0;

443 i‡(
˝u
 =
t
.cpu)

444 
dñay
 = 
t
.
time
 - 
âime
;

445 i‡((
t
.
a˘i⁄
 & 
	`BLK_TC_ACT
(
BLK_TC_WRITE
)Ë&& 
ªad_⁄ly
)

446 
skù≥d_wrôes
++;

452 i‡(
td
->
o
.
no_°Æl
)

453 
dñay
 = 0;

455 
	`h™dÀ_åa˚
(
td
, &
t
, 
dñay
, 
ios
, 
rw_bs
);

458 
âime
 = 
t
.
time
;

459 
˝u
 = 
t
.cpu;

461 
dñay
 = 0;

462 
	`h™dÀ_åa˚
(
td
, &
t
, 
dñay
, 
ios
, 
rw_bs
);

466 
i
 = 0; i < 
td
->
fûes_ödex
; i++) {

467 
f
 = 
td
->
fûes
[
i
];

468 
	`åa˚_add_›í_˛o£_evít
(
td
, 
f
->
fûío
, 
FIO_LOG_CLOSE_FILE
);

471 
	`fifo_‰ì
(
fifo
);

472 
	`˛o£
(
fd
);

474 
	`td_ª°‹e_run°©e
(
td
, 
ﬁd_°©e
);

476 i‡(!
td
->
fûes_ödex
) {

477 
	`log_îr
("fio: didÇot findÑeplay device(s)\n");

485 i‡(!
dïth
 || depth > 1024)

486 
dïth
 = 1024;

488 i‡(
skù≥d_wrôes
)

489 
	`log_îr
("fio: %s skipsÑeplay of %lu writes dueÅoÑead-only\n",

490 
td
->
o
.
«me
, 
skù≥d_wrôes
);

492 i‡(!
ios
[
DDIR_READ
] && !ios[
DDIR_WRITE
]) {

493 
	`log_îr
("fio: foundÇo ios in blktrace data\n");

495 } i‡(
ios
[
DDIR_READ
] && !ios[DDIR_READ]) {

496 
td
->
o
.
td_ddú
 = 
TD_DDIR_READ
;

497 
td
->
o
.
max_bs
[
DDIR_READ
] = 
rw_bs
[DDIR_READ];

498 } i‡(!
ios
[
DDIR_READ
] && ios[
DDIR_WRITE
]) {

499 
td
->
o
.
td_ddú
 = 
TD_DDIR_WRITE
;

500 
td
->
o
.
max_bs
[
DDIR_WRITE
] = 
rw_bs
[DDIR_WRITE];

502 
td
->
o
.
td_ddú
 = 
TD_DDIR_RW
;

503 
td
->
o
.
max_bs
[
DDIR_READ
] = 
rw_bs
[DDIR_READ];

504 
td
->
o
.
max_bs
[
DDIR_WRITE
] = 
rw_bs
[DDIR_WRITE];

511 
td
->
o
.
odúe˘
 = 1;

517 i‡(
td
->
o
.
iodïth
 != 1)

518 
td
->
o
.
iodïth
 = 
dïth
;

521 
îr
:

522 
	`˛o£
(
fd
);

523 
	`fifo_‰ì
(
fifo
);

525 
	}
}

	@/home/terekhov/tmp/fio/fio/blktrace_api.h

1 #i‚de‡
BLKTRACEAPI_H


2 
	#BLKTRACEAPI_H


	)

4 
	~<asm/ty≥s.h
>

10 
	mBLK_TC_READ
 = 1 << 0,

11 
	mBLK_TC_WRITE
 = 1 << 1,

12 
	mBLK_TC_BARRIER
 = 1 << 2,

13 
	mBLK_TC_SYNC
 = 1 << 3,

14 
	mBLK_TC_QUEUE
 = 1 << 4,

15 
	mBLK_TC_REQUEUE
 = 1 << 5,

16 
	mBLK_TC_ISSUE
 = 1 << 6,

17 
	mBLK_TC_COMPLETE
 = 1 << 7,

18 
	mBLK_TC_FS
 = 1 << 8,

19 
	mBLK_TC_PC
 = 1 << 9,

20 
	mBLK_TC_NOTIFY
 = 1 << 10,

21 
	mBLK_TC_AHEAD
 = 1 << 11,

22 
	mBLK_TC_META
 = 1 << 12,

23 
	mBLK_TC_DISCARD
 = 1 << 13,

24 
	mBLK_TC_DRV_DATA
 = 1 << 14,

26 
	mBLK_TC_END
 = 1 << 15,

29 
	#BLK_TC_SHIFT
 (16)

	)

30 
	#BLK_TC_ACT
(
a˘
Ë(◊˘Ë<< 
BLK_TC_SHIFT
)

	)

36 
	m__BLK_TA_QUEUE
 = 1,

37 
	m__BLK_TA_BACKMERGE
,

38 
	m__BLK_TA_FRONTMERGE
,

39 
	m__BLK_TA_GETRQ
,

40 
	m__BLK_TA_SLEEPRQ
,

41 
	m__BLK_TA_REQUEUE
,

42 
	m__BLK_TA_ISSUE
,

43 
	m__BLK_TA_COMPLETE
,

44 
	m__BLK_TA_PLUG
,

45 
	m__BLK_TA_UNPLUG_IO
,

46 
	m__BLK_TA_UNPLUG_TIMER
,

47 
	m__BLK_TA_INSERT
,

48 
	m__BLK_TA_SPLIT
,

49 
	m__BLK_TA_BOUNCE
,

50 
	m__BLK_TA_REMAP
,

51 
	m__BLK_TA_ABORT
,

52 
	m__BLK_TA_DRV_DATA
,

58 
	eblkåa˚_nŸify
 {

59 
	m__BLK_TN_PROCESS
 = 0,

60 
	m__BLK_TN_TIMESTAMP
,

61 
	m__BLK_TN_MESSAGE
,

67 
	#BLK_TA_QUEUE
 (
__BLK_TA_QUEUE
 | 
	`BLK_TC_ACT
(
BLK_TC_QUEUE
))

	)

68 
	#BLK_TA_BACKMERGE
 (
__BLK_TA_BACKMERGE
 | 
	`BLK_TC_ACT
(
BLK_TC_QUEUE
))

	)

69 
	#BLK_TA_FRONTMERGE
 (
__BLK_TA_FRONTMERGE
 | 
	`BLK_TC_ACT
(
BLK_TC_QUEUE
))

	)

70 
	#BLK_TA_GETRQ
 (
__BLK_TA_GETRQ
 | 
	`BLK_TC_ACT
(
BLK_TC_QUEUE
))

	)

71 
	#BLK_TA_SLEEPRQ
 (
__BLK_TA_SLEEPRQ
 | 
	`BLK_TC_ACT
(
BLK_TC_QUEUE
))

	)

72 
	#BLK_TA_REQUEUE
 (
__BLK_TA_REQUEUE
 | 
	`BLK_TC_ACT
(
BLK_TC_REQUEUE
))

	)

73 
	#BLK_TA_ISSUE
 (
__BLK_TA_ISSUE
 | 
	`BLK_TC_ACT
(
BLK_TC_ISSUE
))

	)

74 
	#BLK_TA_COMPLETE
 (
__BLK_TA_COMPLETE
| 
	`BLK_TC_ACT
(
BLK_TC_COMPLETE
))

	)

75 
	#BLK_TA_PLUG
 (
__BLK_TA_PLUG
 | 
	`BLK_TC_ACT
(
BLK_TC_QUEUE
))

	)

76 
	#BLK_TA_UNPLUG_IO
 (
__BLK_TA_UNPLUG_IO
 | 
	`BLK_TC_ACT
(
BLK_TC_QUEUE
))

	)

77 
	#BLK_TA_UNPLUG_TIMER
 (
__BLK_TA_UNPLUG_TIMER
 | 
	`BLK_TC_ACT
(
BLK_TC_QUEUE
))

	)

78 
	#BLK_TA_INSERT
 (
__BLK_TA_INSERT
 | 
	`BLK_TC_ACT
(
BLK_TC_QUEUE
))

	)

79 
	#BLK_TA_SPLIT
 (
__BLK_TA_SPLIT
)

	)

80 
	#BLK_TA_BOUNCE
 (
__BLK_TA_BOUNCE
)

	)

81 
	#BLK_TA_REMAP
 (
__BLK_TA_REMAP
 | 
	`BLK_TC_ACT
(
BLK_TC_QUEUE
))

	)

82 
	#BLK_TA_DRV_DATA
 (
__BLK_TA_DRV_DATA
 | 
	`BLK_TC_ACT
(
BLK_TC_DRV_DATA
))

	)

84 
	#BLK_TN_PROCESS
 (
__BLK_TN_PROCESS
 | 
	`BLK_TC_ACT
(
BLK_TC_NOTIFY
))

	)

85 
	#BLK_TN_TIMESTAMP
 (
__BLK_TN_TIMESTAMP
 | 
	`BLK_TC_ACT
(
BLK_TC_NOTIFY
))

	)

86 
	#BLK_TN_MESSAGE
 (
__BLK_TN_MESSAGE
 | 
	`BLK_TC_ACT
(
BLK_TC_NOTIFY
))

	)

88 
	#BLK_IO_TRACE_MAGIC
 0x65617400

	)

89 
	#BLK_IO_TRACE_VERSION
 0x07

	)

94 
	sblk_io_åa˚
 {

95 
__u32
 
	mmagic
;

96 
__u32
 
	m£quí˚
;

97 
__u64
 
	mtime
;

98 
__u64
 
	m£˘‹
;

99 
__u32
 
	mbyãs
;

100 
__u32
 
	ma˘i⁄
;

101 
__u32
 
	mpid
;

102 
__u32
 
	mdevi˚
;

103 
__u32
 
	m˝u
;

104 
__u16
 
	mîr‹
;

105 
__u16
 
	mpdu_Àn
;

111 
	sblk_io_åa˚_ªm≠
 {

112 
__u32
 
	mdevi˚
;

113 
__u32
 
	mdevi˚_‰om
;

114 
__u64
 
	m£˘‹
;

120 
	sblk_u£r_åa˚_£tup
 {

121 
	m«me
[32];

122 
__u16
 
	ma˘_mask
;

123 
__u32
 
	mbuf_size
;

124 
__u32
 
	mbuf_ƒ
;

125 
__u64
 
	m°¨t_lba
;

126 
__u64
 
	míd_lba
;

127 
__u32
 
	mpid
;

130 
	#BLKTRACESETUP
 
	`_IOWR
(0x12,115,
blk_u£r_åa˚_£tup
)

	)

131 
	#BLKTRACESTART
 
	`_IO
(0x12,116)

	)

132 
	#BLKTRACESTOP
 
	`_IO
(0x12,117)

	)

133 
	#BLKTRACETEARDOWN
 
	`_IO
(0x12,118)

	)

	@/home/terekhov/tmp/fio/fio/cairo_text_helpers.c

1 
	~<ˇúo.h
>

2 
	~<gtk/gtk.h
>

3 
	~<m©h.h
>

5 
	$døw_Æig√d_ãxt
(
ˇúo_t
 *
¸
, c⁄° *
f⁄t
, 
x
, 
y
,

6 
f⁄tsize
, c⁄° *
ãxt
, 
Æignmít
)

8 
	#CENTERED
 0

	)

9 
	#LEFT_JUSTIFIED
 1

	)

10 
	#RIGHT_JUSTIFIED
 2

	)

12 
Á˘‹
, 
dúe˘i⁄
;

13 
ˇúo_ãxt_exã¡s_t
 
exã¡s
;

15 
Æignmít
) {

16 
CENTERED
:

17 
dúe˘i⁄
 = -1.0;

18 
Á˘‹
 = 0.5;

20 
RIGHT_JUSTIFIED
:

21 
dúe˘i⁄
 = -1.0;

22 
Á˘‹
 = 1.0;

24 
LEFT_JUSTIFIED
:

26 
dúe˘i⁄
 = 1.0;

27 
Á˘‹
 = 0.0;

30 
	`ˇúo_£À˘_f⁄t_Á˚
(
¸
, 
f⁄t
, 
CAIRO_FONT_SLANT_NORMAL
, 
CAIRO_FONT_WEIGHT_NORMAL
);

32 
	`ˇúo_£t_f⁄t_size
(
¸
, 
f⁄tsize
);

33 
	`ˇúo_ãxt_exã¡s
(
¸
, 
ãxt
, &
exã¡s
);

34 
x
 = x + 
dúe˘i⁄
 * (
Á˘‹
 * 
exã¡s
.
width
 +Éxã¡s.
x_bórög
);

35 
y
 = y - (
exã¡s
.
height
 / 2 +Éxã¡s.
y_bórög
);

37 
	`ˇúo_move_to
(
¸
, 
x
, 
y
);

38 
	`ˇúo_show_ãxt
(
¸
, 
ãxt
);

39 
	}
}

41 
	$døw_˚¡îed_ãxt
(
ˇúo_t
 *
¸
, c⁄° *
f⁄t
, 
x
, 
y
,

42 
f⁄tsize
, c⁄° *
ãxt
)

44 
	`døw_Æig√d_ãxt
(
¸
, 
f⁄t
, 
x
, 
y
, 
f⁄tsize
, 
ãxt
, 
CENTERED
);

45 
	}
}

47 
	$døw_right_ju°ifõd_ãxt
(
ˇúo_t
 *
¸
, c⁄° *
f⁄t
,

48 
x
, 
y
,

49 
f⁄tsize
, c⁄° *
ãxt
)

51 
	`døw_Æig√d_ãxt
(
¸
, 
f⁄t
, 
x
, 
y
, 
f⁄tsize
, 
ãxt
, 
RIGHT_JUSTIFIED
);

52 
	}
}

54 
	$døw_À·_ju°ifõd_ãxt
(
ˇúo_t
 *
¸
, c⁄° *
f⁄t
,

55 
x
, 
y
,

56 
f⁄tsize
, c⁄° *
ãxt
)

58 
	`døw_Æig√d_ãxt
(
¸
, 
f⁄t
, 
x
, 
y
, 
f⁄tsize
, 
ãxt
, 
LEFT_JUSTIFIED
);

59 
	}
}

61 
	$døw_vîtiˇl_˚¡îed_ãxt
(
ˇúo_t
 *
¸
, c⁄° *
f⁄t
, 
x
,

62 
y
, 
f⁄tsize
,

63 c⁄° *
ãxt
)

65 
sx
, 
sy
;

66 
ˇúo_ãxt_exã¡s_t
 
exã¡s
;

68 
	`ˇúo_£À˘_f⁄t_Á˚
(
¸
, 
f⁄t
, 
CAIRO_FONT_SLANT_NORMAL
, 
CAIRO_FONT_WEIGHT_NORMAL
);

70 
	`ˇúo_£t_f⁄t_size
(
¸
, 
f⁄tsize
);

71 
	`ˇúo_ãxt_exã¡s
(
¸
, 
ãxt
, &
exã¡s
);

72 
sx
 = 
x
;

73 
sy
 = 
y
;

74 
y
 = y + (
exã¡s
.
width
 / 2.0 +Éxã¡s.
x_bórög
);

75 
x
 = x - (
exã¡s
.
height
 / 2.0 +Éxã¡s.
y_bórög
);

77 
	`ˇúo_move_to
(
¸
, 
x
, 
y
);

78 
	`ˇúo_ßve
(
¸
);

79 
	`ˇúo_å™¶©e
(
¸
, -
sx
, -
sy
);

80 
	`ˇúo_rŸ©e
(
¸
, -90.0 * 
M_PI
 / 180.0);

81 
	`ˇúo_å™¶©e
(
¸
, 
sx
, 
sy
);

82 
	`ˇúo_show_ãxt
(
¸
, 
ãxt
);

83 
	`ˇúo_ª°‹e
(
¸
);

84 
	}
}

	@/home/terekhov/tmp/fio/fio/cairo_text_helpers.h

1 #i‚de‡
CAIRO_TEXT_HELPERS_H


2 
	#CAIRO_TEXT_HELPERS_H


	)

4 
døw_˚¡îed_ãxt
(
ˇúo_t
 *
¸
, c⁄° *
f⁄t
, 
x
, 
y
,

5 
f⁄tsize
, c⁄° *
ãxt
);

7 
døw_right_ju°ifõd_ãxt
(
ˇúo_t
 *
¸
, c⁄° *
f⁄t
,

8 
x
, 
y
,

9 
f⁄tsize
, c⁄° *
ãxt
);

11 
døw_À·_ju°ifõd_ãxt
(
ˇúo_t
 *
¸
, c⁄° *
f⁄t
,

12 
x
, 
y
,

13 
f⁄tsize
, c⁄° *
ãxt
);

15 
døw_vîtiˇl_˚¡îed_ãxt
(
ˇúo_t
 *
¸
, c⁄° *
f⁄t
, 
x
,

16 
y
, 
f⁄tsize
,

17 c⁄° *
ãxt
);

	@/home/terekhov/tmp/fio/fio/cconv.c

1 
	~<°rög.h
>

3 
	~"thªad_›ti⁄s.h
"

5 
	$°rög_to_˝u
(**
d°
, c⁄° 
uöt8_t
 *
§c
)

7 c⁄° *
__§c
 = (c⁄° *Ë
§c
;

9 i‡(
	`°æí
(
__§c
))

10 *
d°
 = 
	`°rdup
(
__§c
);

11 
	}
}

13 
	$__°rög_to_√t
(
uöt8_t
 *
d°
, c⁄° *
§c
, 
size_t
 
d°_size
)

15 i‡(
§c
) {

16 
d°
[
d°_size
 - 1] = '\0';

17 
	`°∫˝y
((*Ë
d°
, 
§c
, 
d°_size
 - 1);

19 
d°
[0] = '\0';

20 
	}
}

22 
	#°rög_to_√t
(
d°
, 
§c
Ë
	`__°rög_to_√t
((d°), (§c), (d°))

	)

24 
	$‰ì_thªad_›ti⁄s_to_˝u
(
thªad_›ti⁄s
 *
o
)

26 
	`‰ì
(
o
->
des¸ùti⁄
);

27 
	`‰ì
(
o
->
«me
);

28 
	`‰ì
(
o
->
dúe˘‹y
);

29 
	`‰ì
(
o
->
fûíame
);

30 
	`‰ì
(
o
->
fûíame_f‹m©
);

31 
	`‰ì
(
o
->
›ídú
);

32 
	`‰ì
(
o
->
i€ngöe
);

33 
	`‰ì
(
o
->
mm≠fûe
);

34 
	`‰ì
(
o
->
ªad_iﬁog_fûe
);

35 
	`‰ì
(
o
->
wrôe_iﬁog_fûe
);

36 
	`‰ì
(
o
->
bw_log_fûe
);

37 
	`‰ì
(
o
->
œt_log_fûe
);

38 
	`‰ì
(
o
->
i›s_log_fûe
);

39 
	`‰ì
(
o
->
ª∂ay_ªdúe˘
);

40 
	`‰ì
(
o
->
exec_¥îun
);

41 
	`‰ì
(
o
->
exec_po°run
);

42 
	`‰ì
(
o
->
ioscheduÀr
);

43 
	`‰ì
(
o
->
¥ofûe
);

44 
	`‰ì
(
o
->
cgroup
);

45 
	}
}

47 
	$c⁄vît_thªad_›ti⁄s_to_˝u
(
thªad_›ti⁄s
 *
o
,

48 
thªad_›ti⁄s_∑ck
 *
t›
)

50 
i
, 
j
;

52 
	`°rög_to_˝u
(&
o
->
des¸ùti⁄
, 
t›
->description);

53 
	`°rög_to_˝u
(&
o
->
«me
, 
t›
->name);

54 
	`°rög_to_˝u
(&
o
->
dúe˘‹y
, 
t›
->directory);

55 
	`°rög_to_˝u
(&
o
->
fûíame
, 
t›
->filename);

56 
	`°rög_to_˝u
(&
o
->
fûíame_f‹m©
, 
t›
->filename_format);

57 
	`°rög_to_˝u
(&
o
->
›ídú
, 
t›
->opendir);

58 
	`°rög_to_˝u
(&
o
->
i€ngöe
, 
t›
->ioengine);

59 
	`°rög_to_˝u
(&
o
->
mm≠fûe
, 
t›
->mmapfile);

60 
	`°rög_to_˝u
(&
o
->
ªad_iﬁog_fûe
, 
t›
->read_iolog_file);

61 
	`°rög_to_˝u
(&
o
->
wrôe_iﬁog_fûe
, 
t›
->write_iolog_file);

62 
	`°rög_to_˝u
(&
o
->
bw_log_fûe
, 
t›
->bw_log_file);

63 
	`°rög_to_˝u
(&
o
->
œt_log_fûe
, 
t›
->lat_log_file);

64 
	`°rög_to_˝u
(&
o
->
i›s_log_fûe
, 
t›
->iops_log_file);

65 
	`°rög_to_˝u
(&
o
->
ª∂ay_ªdúe˘
, 
t›
->replay_redirect);

66 
	`°rög_to_˝u
(&
o
->
exec_¥îun
, 
t›
->exec_prerun);

67 
	`°rög_to_˝u
(&
o
->
exec_po°run
, 
t›
->exec_postrun);

68 
	`°rög_to_˝u
(&
o
->
ioscheduÀr
, 
t›
->ioscheduler);

69 
	`°rög_to_˝u
(&
o
->
¥ofûe
, 
t›
->profile);

70 
	`°rög_to_˝u
(&
o
->
cgroup
, 
t›
->cgroup);

72 
o
->
td_ddú
 = 
	`À32_to_˝u
(
t›
->td_ddir);

73 
o
->
rw_£q
 = 
	`À32_to_˝u
(
t›
->rw_seq);

74 
o
->
kb_ba£
 = 
	`À32_to_˝u
(
t›
->kb_base);

75 
o
->
unô_ba£
 = 
	`À32_to_˝u
(
t›
->
kb_ba£
);

76 
o
->
ddú_£q_ƒ
 = 
	`À32_to_˝u
(
t›
->ddir_seq_nr);

77 
o
->
ddú_£q_add
 = 
	`À64_to_˝u
(
t›
->ddir_seq_add);

78 
o
->
iodïth
 = 
	`À32_to_˝u
(
t›
->iodepth);

79 
o
->
iodïth_low
 = 
	`À32_to_˝u
(
t›
->iodepth_low);

80 
o
->
iodïth_b©ch
 = 
	`À32_to_˝u
(
t›
->iodepth_batch);

81 
o
->
iodïth_b©ch_com∂ëe
 = 
	`À32_to_˝u
(
t›
->iodepth_batch_complete);

82 
o
->
size
 = 
	`À64_to_˝u
(
t›
->size);

83 
o
->
io_limô
 = 
	`À64_to_˝u
(
t›
->io_limit);

84 
o
->
size_≥r˚¡
 = 
	`À32_to_˝u
(
t›
->size_percent);

85 
o
->
fûl_devi˚
 = 
	`À32_to_˝u
(
t›
->fill_device);

86 
o
->
fûe_≠≥nd
 = 
	`À32_to_˝u
(
t›
->file_append);

87 
o
->
fûe_size_low
 = 
	`À64_to_˝u
(
t›
->file_size_low);

88 
o
->
fûe_size_high
 = 
	`À64_to_˝u
(
t›
->file_size_high);

89 
o
->
°¨t_off£t
 = 
	`À64_to_˝u
(
t›
->start_offset);

91 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

92 
o
->
bs
[
i
] = 
	`À32_to_˝u
(
t›
->bs[i]);

93 
o
->
ba
[
i
] = 
	`À32_to_˝u
(
t›
->ba[i]);

94 
o
->
mö_bs
[
i
] = 
	`À32_to_˝u
(
t›
->min_bs[i]);

95 
o
->
max_bs
[
i
] = 
	`À32_to_˝u
(
t›
->max_bs[i]);

96 
o
->
bs•lô_ƒ
[
i
] = 
	`À32_to_˝u
(
t›
->bssplit_nr[i]);

98 i‡(
o
->
bs•lô_ƒ
[
i
]) {

99 
o
->
bs•lô
[
i
] = 
	`mÆloc
(o->
bs•lô_ƒ
[i] * (bssplit));

100 
j
 = 0; j < 
o
->
bs•lô_ƒ
[
i
]; j++) {

101 
o
->
bs•lô
[
i
][
j
].
bs
 = 
	`À32_to_˝u
(
t›
->bssplit[i][j].bs);

102 
o
->
bs•lô
[
i
][
j
].
≥rc
 = 
	`À32_to_˝u
(
t›
->bssplit[i][j].perc);

106 
o
->
rwmix
[
i
] = 
	`À32_to_˝u
(
t›
->rwmix[i]);

107 
o
->
øã
[
i
] = 
	`À32_to_˝u
(
t›
->rate[i]);

108 
o
->
øãmö
[
i
] = 
	`À32_to_˝u
(
t›
->ratemin[i]);

109 
o
->
øã_i›s
[
i
] = 
	`À32_to_˝u
(
t›
->rate_iops[i]);

110 
o
->
øã_i›s_mö
[
i
] = 
	`À32_to_˝u
(
t›
->rate_iops_min[i]);

112 
o
->
≥rc_ønd
[
i
] = 
	`À32_to_˝u
(
t›
->perc_rand[i]);

115 
o
->
øãcy˛e
 = 
	`À32_to_˝u
(
t›
->ratecycle);

116 
o
->
ƒ_fûes
 = 
	`À32_to_˝u
(
t›
->nr_files);

117 
o
->
›í_fûes
 = 
	`À32_to_˝u
(
t›
->open_files);

118 
o
->
fûe_lock_mode
 = 
	`À32_to_˝u
(
t›
->file_lock_mode);

119 
o
->
odúe˘
 = 
	`À32_to_˝u
(
t›
->odirect);

120 
o
->
ﬂtomic
 = 
	`À32_to_˝u
(
t›
->oatomic);

121 
o
->
övÆid©e_ˇche
 = 
	`À32_to_˝u
(
t›
->invalidate_cache);

122 
o
->
¸óã_£rülize
 = 
	`À32_to_˝u
(
t›
->create_serialize);

123 
o
->
¸óã_fsync
 = 
	`À32_to_˝u
(
t›
->create_fsync);

124 
o
->
¸óã_⁄_›í
 = 
	`À32_to_˝u
(
t›
->create_on_open);

125 
o
->
¸óã_⁄ly
 = 
	`À32_to_˝u
(
t›
->create_only);

126 
o
->
íd_fsync
 = 
	`À32_to_˝u
(
t›
->end_fsync);

127 
o
->
¥e_ªad
 = 
	`À32_to_˝u
(
t›
->pre_read);

128 
o
->
sync_io
 = 
	`À32_to_˝u
(
t›
->sync_io);

129 
o
->
vîify
 = 
	`À32_to_˝u
(
t›
->verify);

130 
o
->
do_vîify
 = 
	`À32_to_˝u
(
t›
->do_verify);

131 
o
->
vîifys‹t
 = 
	`À32_to_˝u
(
t›
->verifysort);

132 
o
->
vîifys‹t_ƒ
 = 
	`À32_to_˝u
(
t›
->verifysort_nr);

133 
o
->
ex≥rimíèl_vîify
 = 
	`À32_to_˝u
(
t›
->experimental_verify);

134 
o
->
vîify_öãrvÆ
 = 
	`À32_to_˝u
(
t›
->verify_interval);

135 
o
->
vîify_off£t
 = 
	`À32_to_˝u
(
t›
->verify_offset);

137 
	`mem˝y
(
o
->
vîify_∑âîn
, 
t›
->vîify_∑âîn, 
MAX_PATTERN_SIZE
);

138 
	`mem˝y
(
o
->
buf„r_∑âîn
, 
t›
->buf„r_∑âîn, 
MAX_PATTERN_SIZE
);

140 
o
->
vîify_∑âîn_byãs
 = 
	`À32_to_˝u
(
t›
->verify_pattern_bytes);

141 
o
->
vîify_Áèl
 = 
	`À32_to_˝u
(
t›
->verify_fatal);

142 
o
->
vîify_dump
 = 
	`À32_to_˝u
(
t›
->verify_dump);

143 
o
->
vîify_async
 = 
	`À32_to_˝u
(
t›
->verify_async);

144 
o
->
vîify_b©ch
 = 
	`À32_to_˝u
(
t›
->verify_batch);

145 
o
->
u£_thªad
 = 
	`À32_to_˝u
(
t›
->use_thread);

146 
o
->
u∆ök
 = 
	`À32_to_˝u
(
t›
->unlink);

147 
o
->
do_disk_utû
 = 
	`À32_to_˝u
(
t›
->do_disk_util);

148 
o
->
ovîride_sync
 = 
	`À32_to_˝u
(
t›
->override_sync);

149 
o
->
ønd_ª≥©abÀ
 = 
	`À32_to_˝u
(
t›
->rand_repeatable);

150 
o
->
ÆÃ™d_ª≥©abÀ
 = 
	`À32_to_˝u
(
t›
->allrand_repeatable);

151 
o
->
ønd_£ed
 = 
	`À64_to_˝u
(
t›
->rand_seed);

152 
o
->
u£_os_ønd
 = 
	`À32_to_˝u
(
t›
->use_os_rand);

153 
o
->
log_avg_m£c
 = 
	`À32_to_˝u
(
t›
->log_avg_msec);

154 
o
->
n‹™domm≠
 = 
	`À32_to_˝u
(
t›
->norandommap);

155 
o
->
so·øndomm≠
 = 
	`À32_to_˝u
(
t›
->softrandommap);

156 
o
->
bs_u«lig√d
 = 
	`À32_to_˝u
(
t›
->bs_unaligned);

157 
o
->
fsync_⁄_˛o£
 = 
	`À32_to_˝u
(
t›
->fsync_on_close);

158 
o
->
bs_is_£q_ønd
 = 
	`À32_to_˝u
(
t›
->bs_is_seq_rand);

159 
o
->
øndom_di°ributi⁄
 = 
	`À32_to_˝u
(
t›
->random_distribution);

160 
o
->
zùf_thëa
.
u
.
f
 = 
	`fio_uöt64_to_doubÀ
(
	`À64_to_˝u
(
t›
->zùf_thëa.u.
i
));

161 
o
->
∑ªto_h
.
u
.
f
 = 
	`fio_uöt64_to_doubÀ
(
	`À64_to_˝u
(
t›
->∑ªto_h.u.
i
));

162 
o
->
øndom_gíî©‹
 = 
	`À32_to_˝u
(
t›
->random_generator);

163 
o
->
hugïage_size
 = 
	`À32_to_˝u
(
t›
->hugepage_size);

164 
o
->
rw_mö_bs
 = 
	`À32_to_˝u
(
t›
->rw_min_bs);

165 
o
->
thöktime
 = 
	`À32_to_˝u
(
t›
->thinktime);

166 
o
->
thöktime_•ö
 = 
	`À32_to_˝u
(
t›
->thinktime_spin);

167 
o
->
thöktime_blocks
 = 
	`À32_to_˝u
(
t›
->thinktime_blocks);

168 
o
->
fsync_blocks
 = 
	`À32_to_˝u
(
t›
->fsync_blocks);

169 
o
->
fd©async_blocks
 = 
	`À32_to_˝u
(
t›
->fdatasync_blocks);

170 
o
->
b¨rõr_blocks
 = 
	`À32_to_˝u
(
t›
->barrier_blocks);

172 
o
->
vîify_backlog
 = 
	`À64_to_˝u
(
t›
->verify_backlog);

173 
o
->
°¨t_dñay
 = 
	`À64_to_˝u
(
t›
->start_delay);

174 
o
->
°¨t_dñay_high
 = 
	`À64_to_˝u
(
t›
->start_delay_high);

175 
o
->
timeout
 = 
	`À64_to_˝u
(
t›
->timeout);

176 
o
->
ømp_time
 = 
	`À64_to_˝u
(
t›
->ramp_time);

177 
o
->
z⁄e_ønge
 = 
	`À64_to_˝u
(
t›
->zone_range);

178 
o
->
z⁄e_size
 = 
	`À64_to_˝u
(
t›
->zone_size);

179 
o
->
z⁄e_skù
 = 
	`À64_to_˝u
(
t›
->zone_skip);

180 
o
->
lockmem
 = 
	`À64_to_˝u
(
t›
->lockmem);

181 
o
->
off£t_ö¸emít
 = 
	`À64_to_˝u
(
t›
->offset_increment);

182 
o
->
numbî_ios
 = 
	`À64_to_˝u
(
t›
->number_ios);

184 
o
->
ovîwrôe
 = 
	`À32_to_˝u
(
t›
->overwrite);

185 
o
->
bw_avg_time
 = 
	`À32_to_˝u
(
t›
->bw_avg_time);

186 
o
->
i›s_avg_time
 = 
	`À32_to_˝u
(
t›
->iops_avg_time);

187 
o
->
lo›s
 = 
	`À32_to_˝u
(
t›
->loops);

188 
o
->
mem_ty≥
 = 
	`À32_to_˝u
(
t›
->mem_type);

189 
o
->
mem_Æign
 = 
	`À32_to_˝u
(
t›
->mem_align);

190 
o
->
max_œãncy
 = 
	`À32_to_˝u
(
t›
->max_latency);

191 
o
->
°⁄ewÆl
 = 
	`À32_to_˝u
(
t›
->stonewall);

192 
o
->
√w_group
 = 
	`À32_to_˝u
(
t›
->new_group);

193 
o
->
numjobs
 = 
	`À32_to_˝u
(
t›
->numjobs);

194 
o
->
˝umask_£t
 = 
	`À32_to_˝u
(
t›
->cpumask_set);

195 
o
->
vîify_˝umask_£t
 = 
	`À32_to_˝u
(
t›
->verify_cpumask_set);

196 
o
->
˝us_Ælowed_pﬁicy
 = 
	`À32_to_˝u
(
t›
->cpus_allowed_policy);

197 
o
->
iﬁog
 = 
	`À32_to_˝u
(
t›
->iolog);

198 
o
->
rwmixcy˛e
 = 
	`À32_to_˝u
(
t›
->rwmixcycle);

199 
o
->
ni˚
 = 
	`À32_to_˝u
(
t›
->nice);

200 
o
->
i›rio
 = 
	`À32_to_˝u
(
t›
->ioprio);

201 
o
->
i›rio_˛ass
 = 
	`À32_to_˝u
(
t›
->ioprio_class);

202 
o
->
fûe_£rvi˚_ty≥
 = 
	`À32_to_˝u
(
t›
->file_service_type);

203 
o
->
group_ªp‹tög
 = 
	`À32_to_˝u
(
t›
->group_reporting);

204 
o
->
Ádvi£_höt
 = 
	`À32_to_˝u
(
t›
->fadvise_hint);

205 
o
->
ÁŒoˇã_mode
 = 
	`À32_to_˝u
(
t›
->fallocate_mode);

206 
o
->
zîo_buf„rs
 = 
	`À32_to_˝u
(
t›
->zero_buffers);

207 
o
->
ªfûl_buf„rs
 = 
	`À32_to_˝u
(
t›
->refill_buffers);

208 
o
->
s¸ambÀ_buf„rs
 = 
	`À32_to_˝u
(
t›
->scramble_buffers);

209 
o
->
buf„r_∑âîn_byãs
 = 
	`À32_to_˝u
(
t›
->buffer_pattern_bytes);

210 
o
->
time_ba£d
 = 
	`À32_to_˝u
(
t›
->time_based);

211 
o
->
dißbÀ_œt
 = 
	`À32_to_˝u
(
t›
->disable_lat);

212 
o
->
dißbÀ_˛©
 = 
	`À32_to_˝u
(
t›
->disable_clat);

213 
o
->
dißbÀ_¶©
 = 
	`À32_to_˝u
(
t›
->disable_slat);

214 
o
->
dißbÀ_bw
 = 
	`À32_to_˝u
(
t›
->disable_bw);

215 
o
->
unifõd_rw_ªp
 = 
	`À32_to_˝u
(
t›
->unified_rw_rep);

216 
o
->
gtod_ªdu˚
 = 
	`À32_to_˝u
(
t›
->gtod_reduce);

217 
o
->
gtod_˝u
 = 
	`À32_to_˝u
(
t›
->gtod_cpu);

218 
o
->
gtod_ofÊﬂd
 = 
	`À32_to_˝u
(
t›
->gtod_offload);

219 
o
->
˛ocksour˚
 = 
	`À32_to_˝u
(
t›
->clocksource);

220 
o
->
no_°Æl
 = 
	`À32_to_˝u
(
t›
->no_stall);

221 
o
->
åim_≥r˚¡age
 = 
	`À32_to_˝u
(
t›
->trim_percentage);

222 
o
->
åim_b©ch
 = 
	`À32_to_˝u
(
t›
->trim_batch);

223 
o
->
åim_zîo
 = 
	`À32_to_˝u
(
t›
->trim_zero);

224 
o
->
˛©_≥r˚¡ûes
 = 
	`À32_to_˝u
(
t›
->clat_percentiles);

225 
o
->
≥r˚¡ûe_¥ecisi⁄
 = 
	`À32_to_˝u
(
t›
->percentile_precision);

226 
o
->
c⁄töue_⁄_îr‹
 = 
	`À32_to_˝u
(
t›
->continue_on_error);

227 
o
->
cgroup_weight
 = 
	`À32_to_˝u
(
t›
->cgroup_weight);

228 
o
->
cgroup_nodñëe
 = 
	`À32_to_˝u
(
t›
->cgroup_nodelete);

229 
o
->
uid
 = 
	`À32_to_˝u
(
t›
->uid);

230 
o
->
gid
 = 
	`À32_to_˝u
(
t›
->gid);

231 
o
->
Êow_id
 = 
	`__À32_to_˝u
(
t›
->flow_id);

232 
o
->
Êow
 = 
	`__À32_to_˝u
(
t›
->flow);

233 
o
->
Êow_w©îm¨k
 = 
	`__À32_to_˝u
(
t›
->flow_watermark);

234 
o
->
Êow_¶ìp
 = 
	`À32_to_˝u
(
t›
->flow_sleep);

235 
o
->
sync_fûe_ønge
 = 
	`À32_to_˝u
(
t›
->sync_file_range);

236 
o
->
œãncy_èrgë
 = 
	`À64_to_˝u
(
t›
->latency_target);

237 
o
->
œãncy_wödow
 = 
	`À64_to_˝u
(
t›
->latency_window);

238 
o
->
œãncy_≥r˚¡ûe
.
u
.
f
 = 
	`fio_uöt64_to_doubÀ
(
	`À64_to_˝u
(
t›
->œãncy_≥r˚¡ûe.u.
i
));

239 
o
->
com¥ess_≥r˚¡age
 = 
	`À32_to_˝u
(
t›
->compress_percentage);

240 
o
->
com¥ess_chunk
 = 
	`À32_to_˝u
(
t›
->compress_chunk);

242 
o
->
åim_backlog
 = 
	`À64_to_˝u
(
t›
->trim_backlog);

244 
i
 = 0; i < 
FIO_IO_U_LIST_MAX_LEN
; i++)

245 
o
->
≥r˚¡ûe_li°
[
i
].
u
.
f
 = 
	`fio_uöt64_to_doubÀ
(
	`À64_to_˝u
(
t›
->percentile_list[i].u.i));

247 
uöt8_t
 
˝umask
[
FIO_TOP_STR_MAX
];

248 
uöt8_t
 
vîify_˝umask
[
FIO_TOP_STR_MAX
];

250 
	}
}

252 
	$c⁄vît_thªad_›ti⁄s_to_√t
(
thªad_›ti⁄s_∑ck
 *
t›
,

253 
thªad_›ti⁄s
 *
o
)

255 
i
, 
j
;

257 
	`°rög_to_√t
(
t›
->
des¸ùti⁄
, 
o
->description);

258 
	`°rög_to_√t
(
t›
->
«me
, 
o
->name);

259 
	`°rög_to_√t
(
t›
->
dúe˘‹y
, 
o
->directory);

260 
	`°rög_to_√t
(
t›
->
fûíame
, 
o
->filename);

261 
	`°rög_to_√t
(
t›
->
fûíame_f‹m©
, 
o
->filename_format);

262 
	`°rög_to_√t
(
t›
->
›ídú
, 
o
->opendir);

263 
	`°rög_to_√t
(
t›
->
i€ngöe
, 
o
->ioengine);

264 
	`°rög_to_√t
(
t›
->
mm≠fûe
, 
o
->mmapfile);

265 
	`°rög_to_√t
(
t›
->
ªad_iﬁog_fûe
, 
o
->read_iolog_file);

266 
	`°rög_to_√t
(
t›
->
wrôe_iﬁog_fûe
, 
o
->write_iolog_file);

267 
	`°rög_to_√t
(
t›
->
bw_log_fûe
, 
o
->bw_log_file);

268 
	`°rög_to_√t
(
t›
->
œt_log_fûe
, 
o
->lat_log_file);

269 
	`°rög_to_√t
(
t›
->
i›s_log_fûe
, 
o
->iops_log_file);

270 
	`°rög_to_√t
(
t›
->
ª∂ay_ªdúe˘
, 
o
->replay_redirect);

271 
	`°rög_to_√t
(
t›
->
exec_¥îun
, 
o
->exec_prerun);

272 
	`°rög_to_√t
(
t›
->
exec_po°run
, 
o
->exec_postrun);

273 
	`°rög_to_√t
(
t›
->
ioscheduÀr
, 
o
->ioscheduler);

274 
	`°rög_to_√t
(
t›
->
¥ofûe
, 
o
->profile);

275 
	`°rög_to_√t
(
t›
->
cgroup
, 
o
->cgroup);

277 
t›
->
td_ddú
 = 
	`˝u_to_À32
(
o
->td_ddir);

278 
t›
->
rw_£q
 = 
	`˝u_to_À32
(
o
->rw_seq);

279 
t›
->
kb_ba£
 = 
	`˝u_to_À32
(
o
->kb_base);

280 
t›
->
unô_ba£
 = 
	`˝u_to_À32
(
o
->
kb_ba£
);

281 
t›
->
ddú_£q_ƒ
 = 
	`˝u_to_À32
(
o
->ddir_seq_nr);

282 
t›
->
iodïth
 = 
	`˝u_to_À32
(
o
->iodepth);

283 
t›
->
iodïth_low
 = 
	`˝u_to_À32
(
o
->iodepth_low);

284 
t›
->
iodïth_b©ch
 = 
	`˝u_to_À32
(
o
->iodepth_batch);

285 
t›
->
iodïth_b©ch_com∂ëe
 = 
	`˝u_to_À32
(
o
->iodepth_batch_complete);

286 
t›
->
size_≥r˚¡
 = 
	`˝u_to_À32
(
o
->size_percent);

287 
t›
->
fûl_devi˚
 = 
	`˝u_to_À32
(
o
->fill_device);

288 
t›
->
fûe_≠≥nd
 = 
	`˝u_to_À32
(
o
->file_append);

289 
t›
->
øãcy˛e
 = 
	`˝u_to_À32
(
o
->ratecycle);

290 
t›
->
ƒ_fûes
 = 
	`˝u_to_À32
(
o
->nr_files);

291 
t›
->
›í_fûes
 = 
	`˝u_to_À32
(
o
->open_files);

292 
t›
->
fûe_lock_mode
 = 
	`˝u_to_À32
(
o
->file_lock_mode);

293 
t›
->
odúe˘
 = 
	`˝u_to_À32
(
o
->odirect);

294 
t›
->
ﬂtomic
 = 
	`˝u_to_À32
(
o
->oatomic);

295 
t›
->
övÆid©e_ˇche
 = 
	`˝u_to_À32
(
o
->invalidate_cache);

296 
t›
->
¸óã_£rülize
 = 
	`˝u_to_À32
(
o
->create_serialize);

297 
t›
->
¸óã_fsync
 = 
	`˝u_to_À32
(
o
->create_fsync);

298 
t›
->
¸óã_⁄_›í
 = 
	`˝u_to_À32
(
o
->create_on_open);

299 
t›
->
¸óã_⁄ly
 = 
	`˝u_to_À32
(
o
->create_only);

300 
t›
->
íd_fsync
 = 
	`˝u_to_À32
(
o
->end_fsync);

301 
t›
->
¥e_ªad
 = 
	`˝u_to_À32
(
o
->pre_read);

302 
t›
->
sync_io
 = 
	`˝u_to_À32
(
o
->sync_io);

303 
t›
->
vîify
 = 
	`˝u_to_À32
(
o
->verify);

304 
t›
->
do_vîify
 = 
	`˝u_to_À32
(
o
->do_verify);

305 
t›
->
vîifys‹t
 = 
	`˝u_to_À32
(
o
->verifysort);

306 
t›
->
vîifys‹t_ƒ
 = 
	`˝u_to_À32
(
o
->verifysort_nr);

307 
t›
->
ex≥rimíèl_vîify
 = 
	`˝u_to_À32
(
o
->experimental_verify);

308 
t›
->
vîify_öãrvÆ
 = 
	`˝u_to_À32
(
o
->verify_interval);

309 
t›
->
vîify_off£t
 = 
	`˝u_to_À32
(
o
->verify_offset);

310 
t›
->
vîify_∑âîn_byãs
 = 
	`˝u_to_À32
(
o
->verify_pattern_bytes);

311 
t›
->
vîify_Áèl
 = 
	`˝u_to_À32
(
o
->verify_fatal);

312 
t›
->
vîify_dump
 = 
	`˝u_to_À32
(
o
->verify_dump);

313 
t›
->
vîify_async
 = 
	`˝u_to_À32
(
o
->verify_async);

314 
t›
->
vîify_b©ch
 = 
	`˝u_to_À32
(
o
->verify_batch);

315 
t›
->
u£_thªad
 = 
	`˝u_to_À32
(
o
->use_thread);

316 
t›
->
u∆ök
 = 
	`˝u_to_À32
(
o
->unlink);

317 
t›
->
do_disk_utû
 = 
	`˝u_to_À32
(
o
->do_disk_util);

318 
t›
->
ovîride_sync
 = 
	`˝u_to_À32
(
o
->override_sync);

319 
t›
->
ønd_ª≥©abÀ
 = 
	`˝u_to_À32
(
o
->rand_repeatable);

320 
t›
->
ÆÃ™d_ª≥©abÀ
 = 
	`˝u_to_À32
(
o
->allrand_repeatable);

321 
t›
->
ønd_£ed
 = 
	`__˝u_to_À64
(
o
->rand_seed);

322 
t›
->
u£_os_ønd
 = 
	`˝u_to_À32
(
o
->use_os_rand);

323 
t›
->
log_avg_m£c
 = 
	`˝u_to_À32
(
o
->log_avg_msec);

324 
t›
->
n‹™domm≠
 = 
	`˝u_to_À32
(
o
->norandommap);

325 
t›
->
so·øndomm≠
 = 
	`˝u_to_À32
(
o
->softrandommap);

326 
t›
->
bs_u«lig√d
 = 
	`˝u_to_À32
(
o
->bs_unaligned);

327 
t›
->
fsync_⁄_˛o£
 = 
	`˝u_to_À32
(
o
->fsync_on_close);

328 
t›
->
bs_is_£q_ønd
 = 
	`˝u_to_À32
(
o
->bs_is_seq_rand);

329 
t›
->
øndom_di°ributi⁄
 = 
	`˝u_to_À32
(
o
->random_distribution);

330 
t›
->
zùf_thëa
.
u
.
i
 = 
	`__˝u_to_À64
(
	`fio_doubÀ_to_uöt64
(
o
->zùf_thëa.u.
f
));

331 
t›
->
∑ªto_h
.
u
.
i
 = 
	`__˝u_to_À64
(
	`fio_doubÀ_to_uöt64
(
o
->∑ªto_h.u.
f
));

332 
t›
->
øndom_gíî©‹
 = 
	`˝u_to_À32
(
o
->random_generator);

333 
t›
->
hugïage_size
 = 
	`˝u_to_À32
(
o
->hugepage_size);

334 
t›
->
rw_mö_bs
 = 
	`˝u_to_À32
(
o
->rw_min_bs);

335 
t›
->
thöktime
 = 
	`˝u_to_À32
(
o
->thinktime);

336 
t›
->
thöktime_•ö
 = 
	`˝u_to_À32
(
o
->thinktime_spin);

337 
t›
->
thöktime_blocks
 = 
	`˝u_to_À32
(
o
->thinktime_blocks);

338 
t›
->
fsync_blocks
 = 
	`˝u_to_À32
(
o
->fsync_blocks);

339 
t›
->
fd©async_blocks
 = 
	`˝u_to_À32
(
o
->fdatasync_blocks);

340 
t›
->
b¨rõr_blocks
 = 
	`˝u_to_À32
(
o
->barrier_blocks);

341 
t›
->
ovîwrôe
 = 
	`˝u_to_À32
(
o
->overwrite);

342 
t›
->
bw_avg_time
 = 
	`˝u_to_À32
(
o
->bw_avg_time);

343 
t›
->
i›s_avg_time
 = 
	`˝u_to_À32
(
o
->iops_avg_time);

344 
t›
->
lo›s
 = 
	`˝u_to_À32
(
o
->loops);

345 
t›
->
mem_ty≥
 = 
	`˝u_to_À32
(
o
->mem_type);

346 
t›
->
mem_Æign
 = 
	`˝u_to_À32
(
o
->mem_align);

347 
t›
->
max_œãncy
 = 
	`˝u_to_À32
(
o
->max_latency);

348 
t›
->
°⁄ewÆl
 = 
	`˝u_to_À32
(
o
->stonewall);

349 
t›
->
√w_group
 = 
	`˝u_to_À32
(
o
->new_group);

350 
t›
->
numjobs
 = 
	`˝u_to_À32
(
o
->numjobs);

351 
t›
->
˝umask_£t
 = 
	`˝u_to_À32
(
o
->cpumask_set);

352 
t›
->
vîify_˝umask_£t
 = 
	`˝u_to_À32
(
o
->verify_cpumask_set);

353 
t›
->
˝us_Ælowed_pﬁicy
 = 
	`˝u_to_À32
(
o
->cpus_allowed_policy);

354 
t›
->
iﬁog
 = 
	`˝u_to_À32
(
o
->iolog);

355 
t›
->
rwmixcy˛e
 = 
	`˝u_to_À32
(
o
->rwmixcycle);

356 
t›
->
ni˚
 = 
	`˝u_to_À32
(
o
->nice);

357 
t›
->
i›rio
 = 
	`˝u_to_À32
(
o
->ioprio);

358 
t›
->
i›rio_˛ass
 = 
	`˝u_to_À32
(
o
->ioprio_class);

359 
t›
->
fûe_£rvi˚_ty≥
 = 
	`˝u_to_À32
(
o
->file_service_type);

360 
t›
->
group_ªp‹tög
 = 
	`˝u_to_À32
(
o
->group_reporting);

361 
t›
->
Ádvi£_höt
 = 
	`˝u_to_À32
(
o
->fadvise_hint);

362 
t›
->
ÁŒoˇã_mode
 = 
	`˝u_to_À32
(
o
->fallocate_mode);

363 
t›
->
zîo_buf„rs
 = 
	`˝u_to_À32
(
o
->zero_buffers);

364 
t›
->
ªfûl_buf„rs
 = 
	`˝u_to_À32
(
o
->refill_buffers);

365 
t›
->
s¸ambÀ_buf„rs
 = 
	`˝u_to_À32
(
o
->scramble_buffers);

366 
t›
->
buf„r_∑âîn_byãs
 = 
	`˝u_to_À32
(
o
->buffer_pattern_bytes);

367 
t›
->
time_ba£d
 = 
	`˝u_to_À32
(
o
->time_based);

368 
t›
->
dißbÀ_œt
 = 
	`˝u_to_À32
(
o
->disable_lat);

369 
t›
->
dißbÀ_˛©
 = 
	`˝u_to_À32
(
o
->disable_clat);

370 
t›
->
dißbÀ_¶©
 = 
	`˝u_to_À32
(
o
->disable_slat);

371 
t›
->
dißbÀ_bw
 = 
	`˝u_to_À32
(
o
->disable_bw);

372 
t›
->
unifõd_rw_ªp
 = 
	`˝u_to_À32
(
o
->unified_rw_rep);

373 
t›
->
gtod_ªdu˚
 = 
	`˝u_to_À32
(
o
->gtod_reduce);

374 
t›
->
gtod_˝u
 = 
	`˝u_to_À32
(
o
->gtod_cpu);

375 
t›
->
gtod_ofÊﬂd
 = 
	`˝u_to_À32
(
o
->gtod_offload);

376 
t›
->
˛ocksour˚
 = 
	`˝u_to_À32
(
o
->clocksource);

377 
t›
->
no_°Æl
 = 
	`˝u_to_À32
(
o
->no_stall);

378 
t›
->
åim_≥r˚¡age
 = 
	`˝u_to_À32
(
o
->trim_percentage);

379 
t›
->
åim_b©ch
 = 
	`˝u_to_À32
(
o
->trim_batch);

380 
t›
->
åim_zîo
 = 
	`˝u_to_À32
(
o
->trim_zero);

381 
t›
->
˛©_≥r˚¡ûes
 = 
	`˝u_to_À32
(
o
->clat_percentiles);

382 
t›
->
≥r˚¡ûe_¥ecisi⁄
 = 
	`˝u_to_À32
(
o
->percentile_precision);

383 
t›
->
c⁄töue_⁄_îr‹
 = 
	`˝u_to_À32
(
o
->continue_on_error);

384 
t›
->
cgroup_weight
 = 
	`˝u_to_À32
(
o
->cgroup_weight);

385 
t›
->
cgroup_nodñëe
 = 
	`˝u_to_À32
(
o
->cgroup_nodelete);

386 
t›
->
uid
 = 
	`˝u_to_À32
(
o
->uid);

387 
t›
->
gid
 = 
	`˝u_to_À32
(
o
->gid);

388 
t›
->
Êow_id
 = 
	`__˝u_to_À32
(
o
->flow_id);

389 
t›
->
Êow
 = 
	`__˝u_to_À32
(
o
->flow);

390 
t›
->
Êow_w©îm¨k
 = 
	`__˝u_to_À32
(
o
->flow_watermark);

391 
t›
->
Êow_¶ìp
 = 
	`˝u_to_À32
(
o
->flow_sleep);

392 
t›
->
sync_fûe_ønge
 = 
	`˝u_to_À32
(
o
->sync_file_range);

393 
t›
->
œãncy_èrgë
 = 
	`__˝u_to_À64
(
o
->latency_target);

394 
t›
->
œãncy_wödow
 = 
	`__˝u_to_À64
(
o
->latency_window);

395 
t›
->
œãncy_≥r˚¡ûe
.
u
.
i
 = 
	`__˝u_to_À64
(
	`fio_doubÀ_to_uöt64
(
o
->œãncy_≥r˚¡ûe.u.
f
));

396 
t›
->
com¥ess_≥r˚¡age
 = 
	`˝u_to_À32
(
o
->compress_percentage);

397 
t›
->
com¥ess_chunk
 = 
	`˝u_to_À32
(
o
->compress_chunk);

399 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

400 
t›
->
bs
[
i
] = 
	`˝u_to_À32
(
o
->bs[i]);

401 
t›
->
ba
[
i
] = 
	`˝u_to_À32
(
o
->ba[i]);

402 
t›
->
mö_bs
[
i
] = 
	`˝u_to_À32
(
o
->min_bs[i]);

403 
t›
->
max_bs
[
i
] = 
	`˝u_to_À32
(
o
->max_bs[i]);

404 
t›
->
bs•lô_ƒ
[
i
] = 
	`˝u_to_À32
(
o
->bssplit_nr[i]);

406 i‡(
o
->
bs•lô_ƒ
[
i
]) {

407 
bs•lô_ƒ
 = 
o
->bs•lô_ƒ[
i
];

409 i‡(
bs•lô_ƒ
 > 
BSSPLIT_MAX
) {

410 
	`log_îr
("fio: BSSPLIT_MAX isÅoo small\n");

411 
bs•lô_ƒ
 = 
BSSPLIT_MAX
;

413 
j
 = 0; j < 
bs•lô_ƒ
; j++) {

414 
t›
->
bs•lô
[
i
][
j
].
bs
 = 
	`˝u_to_À32
(
o
->bssplit[i][j].bs);

415 
t›
->
bs•lô
[
i
][
j
].
≥rc
 = 
	`˝u_to_À32
(
o
->bssplit[i][j].perc);

419 
t›
->
rwmix
[
i
] = 
	`˝u_to_À32
(
o
->rwmix[i]);

420 
t›
->
øã
[
i
] = 
	`˝u_to_À32
(
o
->rate[i]);

421 
t›
->
øãmö
[
i
] = 
	`˝u_to_À32
(
o
->ratemin[i]);

422 
t›
->
øã_i›s
[
i
] = 
	`˝u_to_À32
(
o
->rate_iops[i]);

423 
t›
->
øã_i›s_mö
[
i
] = 
	`˝u_to_À32
(
o
->rate_iops_min[i]);

425 
t›
->
≥rc_ønd
[
i
] = 
	`˝u_to_À32
(
o
->perc_rand[i]);

428 
	`mem˝y
(
t›
->
vîify_∑âîn
, 
o
->vîify_∑âîn, 
MAX_PATTERN_SIZE
);

429 
	`mem˝y
(
t›
->
buf„r_∑âîn
, 
o
->buf„r_∑âîn, 
MAX_PATTERN_SIZE
);

431 
t›
->
size
 = 
	`__˝u_to_À64
(
o
->size);

432 
t›
->
io_limô
 = 
	`__˝u_to_À64
(
o
->io_limit);

433 
t›
->
vîify_backlog
 = 
	`__˝u_to_À64
(
o
->verify_backlog);

434 
t›
->
°¨t_dñay
 = 
	`__˝u_to_À64
(
o
->start_delay);

435 
t›
->
°¨t_dñay_high
 = 
	`__˝u_to_À64
(
o
->start_delay_high);

436 
t›
->
timeout
 = 
	`__˝u_to_À64
(
o
->timeout);

437 
t›
->
ømp_time
 = 
	`__˝u_to_À64
(
o
->ramp_time);

438 
t›
->
z⁄e_ønge
 = 
	`__˝u_to_À64
(
o
->zone_range);

439 
t›
->
z⁄e_size
 = 
	`__˝u_to_À64
(
o
->zone_size);

440 
t›
->
z⁄e_skù
 = 
	`__˝u_to_À64
(
o
->zone_skip);

441 
t›
->
lockmem
 = 
	`__˝u_to_À64
(
o
->lockmem);

442 
t›
->
ddú_£q_add
 = 
	`__˝u_to_À64
(
o
->ddir_seq_add);

443 
t›
->
fûe_size_low
 = 
	`__˝u_to_À64
(
o
->file_size_low);

444 
t›
->
fûe_size_high
 = 
	`__˝u_to_À64
(
o
->file_size_high);

445 
t›
->
°¨t_off£t
 = 
	`__˝u_to_À64
(
o
->start_offset);

446 
t›
->
åim_backlog
 = 
	`__˝u_to_À64
(
o
->trim_backlog);

447 
t›
->
off£t_ö¸emít
 = 
	`__˝u_to_À64
(
o
->offset_increment);

448 
t›
->
numbî_ios
 = 
	`__˝u_to_À64
(
o
->number_ios);

450 
i
 = 0; i < 
FIO_IO_U_LIST_MAX_LEN
; i++)

451 
t›
->
≥r˚¡ûe_li°
[
i
].
u
.ò
	`__˝u_to_À64
(
	`fio_doubÀ_to_uöt64
(
o
->≥r˚¡ûe_li°[i].u.
f
));

453 
uöt8_t
 
˝umask
[
FIO_TOP_STR_MAX
];

454 
uöt8_t
 
vîify_˝umask
[
FIO_TOP_STR_MAX
];

457 
	}
}

464 
	$fio_ã°_cc⁄v
(
thªad_›ti⁄s
 *
__o
)

466 
thªad_›ti⁄s
 
o
;

467 
thªad_›ti⁄s_∑ck
 
t›1
, 
t›2
;

469 
	`mem£t
(&
t›1
, 0, (top1));

470 
	`mem£t
(&
t›2
, 0, (top2));

472 
	`c⁄vît_thªad_›ti⁄s_to_√t
(&
t›1
, 
__o
);

473 
	`mem£t
(&
o
, 0, (o));

474 
	`c⁄vît_thªad_›ti⁄s_to_˝u
(&
o
, &
t›1
);

475 
	`c⁄vît_thªad_›ti⁄s_to_√t
(&
t›2
, &
o
);

477 
	`‰ì_thªad_›ti⁄s_to_˝u
(&
o
);

479  
	`memcmp
(&
t›1
, &
t›2
, (top1));

480 
	}
}

	@/home/terekhov/tmp/fio/fio/cgroup.c

4 
	~<°dio.h
>

5 
	~<°dlib.h
>

6 
	~<m¡ít.h
>

7 
	~<sys/°©.h
>

8 
	~<sys/ty≥s.h
>

9 
	~"fio.h
"

10 
	~"Êi°.h
"

11 
	~"cgroup.h
"

12 
	~"smÆloc.h
"

14 
fio_muãx
 *
	glock
;

16 
	scgroup_membî
 {

17 
Êi°_hód
 
	mli°
;

18 *
	mroŸ
;

19 
	mcgroup_nodñëe
;

22 *
	$föd_cgroup_m¡
(
thªad_d©a
 *
td
)

24 *
m¡poöt
 = 
NULL
;

25 
m¡ít
 *
m¡
, 
dummy
;

26 
buf
[256] = {0};

27 
FILE
 *
f
;

29 
f
 = 
	`£tm¡ít
("/proc/mounts", "r");

30 i‡(!
f
) {

31 
	`td_vîr‹
(
td
, 
î∫o
, "setmntent /proc/mounts");

32  
NULL
;

35 (
m¡
 = 
	`gëm¡ít_r
(
f
, &
dummy
, 
buf
, (buf))Ë!
NULL
) {

36 i‡(!
	`°rcmp
(
m¡
->
m¡_ty≥
, "cgroup") &&

37 
	`°r°r
(
m¡
->
m¡_›ts
, "blkio"))

41 i‡(
m¡
)

42 
m¡poöt
 = 
	`smÆloc_°rdup
(
m¡
->
m¡_dú
);

44 
	`log_îr
("fio: cgroup blkio doesÇotáppearÅo be mounted\n");

46 
	`ídm¡ít
(
f
);

47  
m¡poöt
;

48 
	}
}

50 
	$add_cgroup
(
thªad_d©a
 *
td
, c⁄° *
«me
,

51 
Êi°_hód
 *
˛i°
)

53 
cgroup_membî
 *
cm
;

55 i‡(!
lock
)

58 
cm
 = 
	`smÆloc
((*cm));

59 i‡(!
cm
) {

60 
îr
:

61 
	`log_îr
("fio: failedÅoállocate cgroup member\n");

65 
	`INIT_FLIST_HEAD
(&
cm
->
li°
);

66 
cm
->
roŸ
 = 
	`smÆloc_°rdup
(
«me
);

67 i‡(!
cm
->
roŸ
) {

68 
	`s‰ì
(
cm
);

69 
îr
;

71 i‡(
td
->
o
.
cgroup_nodñëe
)

72 
cm
->
cgroup_nodñëe
 = 1;

73 
	`fio_muãx_down
(
lock
);

74 
	`Êi°_add_èû
(&
cm
->
li°
, 
˛i°
);

75 
	`fio_muãx_up
(
lock
);

76 
	}
}

78 
	$cgroup_kûl
(
Êi°_hód
 *
˛i°
)

80 
Êi°_hód
 *
n
, *
tmp
;

81 
cgroup_membî
 *
cm
;

83 i‡(!
lock
)

86 
	`fio_muãx_down
(
lock
);

88 
	`Êi°_f‹_óch_ß„
(
n
, 
tmp
, 
˛i°
) {

89 
cm
 = 
	`Êi°_íåy
(
n
, 
cgroup_membî
, 
li°
);

90 i‡(!
cm
->
cgroup_nodñëe
)

91 
	`rmdú
(
cm
->
roŸ
);

92 
	`Êi°_dñ
(&
cm
->
li°
);

93 
	`s‰ì
(
cm
->
roŸ
);

94 
	`s‰ì
(
cm
);

97 
	`fio_muãx_up
(
lock
);

98 
	}
}

100 *
	$gë_cgroup_roŸ
(
thªad_d©a
 *
td
, *
m¡
)

102 *
°r
 = 
	`mÆloc
(64);

104 i‡(
td
->
o
.
cgroup
)

105 
	`•rötf
(
°r
, "%s%s%s", 
m¡
, 
FIO_OS_PATH_SEPARATOR
, 
td
->
o
.
cgroup
);

107 
	`•rötf
(
°r
, "%s%s%s", 
m¡
, 
FIO_OS_PATH_SEPARATOR
, 
td
->
o
.
«me
);

109  
°r
;

110 
	}
}

112 
	$wrôe_öt_to_fûe
(
thªad_d©a
 *
td
, c⁄° *
∑th
,

113 c⁄° *
fûíame
, 
vÆ
,

114 c⁄° *
⁄îr
)

116 
tmp
[256];

117 
FILE
 *
f
;

119 
	`•rötf
(
tmp
, "%s%s%s", 
∑th
, 
FIO_OS_PATH_SEPARATOR
, 
fûíame
);

120 
f
 = 
	`f›í
(
tmp
, "w");

121 i‡(!
f
) {

122 
	`td_vîr‹
(
td
, 
î∫o
, 
⁄îr
);

126 
	`Ârötf
(
f
, "%u", 
vÆ
);

127 
	`f˛o£
(
f
);

130 
	}
}

132 
	$cgroup_wrôe_pid
(
thªad_d©a
 *
td
, c⁄° *
roŸ
)

134 
vÆ
 = 
td
->
pid
;

136  
	`wrôe_öt_to_fûe
(
td
, 
roŸ
, "èsks", 
vÆ
, "cgroup writeÖid");

137 
	}
}

142 
	$cgroup_dñ_pid
(
thªad_d©a
 *
td
, *
m¡
)

144  
	`cgroup_wrôe_pid
(
td
, 
m¡
);

145 
	}
}

147 
	$cgroup_£tup
(
thªad_d©a
 *
td
, 
Êi°_hód
 *
˛i°
, **
m¡
)

149 *
roŸ
;

151 i‡(!*
m¡
) {

152 *
m¡
 = 
	`föd_cgroup_m¡
(
td
);

153 i‡(!*
m¡
)

160 
roŸ
 = 
	`gë_cgroup_roŸ
(
td
, *
m¡
);

161 i‡(
	`mkdú
(
roŸ
, 0755) < 0) {

162 
__e
 = 
î∫o
;

164 i‡(
__e
 !
EEXIST
) {

165 
	`td_vîr‹
(
td
, 
__e
, "cgroup mkdir");

166 
	`log_îr
("fio:Ö©h %s\n", 
roŸ
);

167 
îr
;

170 
	`add_cgroup
(
td
, 
roŸ
, 
˛i°
);

172 i‡(
td
->
o
.
cgroup_weight
) {

173 i‡(
	`wrôe_öt_to_fûe
(
td
, 
roŸ
, "blkio.weight",

174 
td
->
o
.
cgroup_weight
,

176 
îr
;

179 i‡(!
	`cgroup_wrôe_pid
(
td
, 
roŸ
)) {

180 
	`‰ì
(
roŸ
);

184 
îr
:

185 
	`‰ì
(
roŸ
);

187 
	}
}

189 
	$cgroup_shutdown
(
thªad_d©a
 *
td
, **
m¡
)

191 i‡(*
m¡
 =
NULL
)

193 i‡(!
td
->
o
.
cgroup_weight
 && !td->o.
cgroup
)

196 
	`cgroup_dñ_pid
(
td
, *
m¡
);

197 
	}
}

199 
fio_öô
 
	$cgroup_öô
()

201 
lock
 = 
	`fio_muãx_öô
(
FIO_MUTEX_UNLOCKED
);

202 i‡(!
lock
)

203 
	`log_îr
("fio: failedÅoállocate cgroupÜock\n");

204 
	}
}

206 
fio_exô
 
	$cgroup_exô
()

208 
	`fio_muãx_ªmove
(
lock
);

209 
	}
}

	@/home/terekhov/tmp/fio/fio/cgroup.h

1 #i‚de‡
FIO_CGROUP_H


2 
	#FIO_CGROUP_H


	)

4 #ifde‡
FIO_HAVE_CGROUPS


6 
cgroup_£tup
(
thªad_d©a
 *, 
Êi°_hód
 *, **);

7 
cgroup_shutdown
(
thªad_d©a
 *, **);

9 
cgroup_kûl
(
Êi°_hód
 *
li°
);

13 
ölöe
 
	$cgroup_£tup
(
thªad_d©a
 *
td
, 
Êi°_hód
 *
li°
,

14 **
m¡
)

16 
	`td_vîr‹
(
td
, 
EINVAL
, "cgroup_setup");

18 
	}
}

20 
ölöe
 
	$cgroup_shutdown
(
thªad_d©a
 *
td
, **
m¡
)

22 
	}
}

24 
ölöe
 
	$cgroup_kûl
(
Êi°_hód
 *
li°
)

26 
	}
}

	@/home/terekhov/tmp/fio/fio/client.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<uni°d.h
>

4 
	~<limôs.h
>

5 
	~<î∫o.h
>

6 
	~<f˙é.h
>

7 
	~<sys/pﬁl.h
>

8 
	~<sys/ty≥s.h
>

9 
	~<sys/°©.h
>

10 
	~<sys/waô.h
>

11 
	~<sys/sockë.h
>

12 
	~<sys/un.h
>

13 
	~<√töë/ö.h
>

14 
	~<¨∑/öë.h
>

15 
	~<√tdb.h
>

16 
	~<sig«l.h
>

17 #ifde‡
CONFIG_ZLIB


18 
	~<zlib.h
>

21 
	~"fio.h
"

22 
	~"˛õ¡.h
"

23 
	~"£rvî.h
"

24 
	~"Êi°.h
"

25 
	~"hash.h
"

27 
h™dÀ_du
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
);

28 
h™dÀ_ts
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
);

29 
h™dÀ_gs
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
);

30 
h™dÀ_¥obe
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
);

31 
h™dÀ_ãxt
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
);

32 
h™dÀ_°›
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
);

33 
h™dÀ_°¨t
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
);

35 
˛õ¡_›s
 
	gfio_˛õ¡_›s
 = {

36 .
ãxt
 = 
h™dÀ_ãxt
,

37 .
	gdisk_utû
 = 
h™dÀ_du
,

38 .
	gthªad_°©us
 = 
h™dÀ_ts
,

39 .
	ggroup_°©s
 = 
h™dÀ_gs
,

40 .
	g°›
 = 
h™dÀ_°›
,

41 .
	g°¨t
 = 
h™dÀ_°¨t
,

42 .
	gëa
 = 
di•œy_thªad_°©us
,

43 .
	g¥obe
 = 
h™dÀ_¥obe
,

44 .
	gëa_m£c
 = 
FIO_CLIENT_DEF_ETA_MSEC
,

45 .
	g˛õ¡_ty≥
 = 
FIO_CLIENT_TYPE_CLI
,

48 
timevÆ
 
	gëa_tv
;

50 
FLIST_HEAD
(
˛õ¡_li°
);

51 
FLIST_HEAD
(
ëa_li°
);

53 
FLIST_HEAD
(
¨g_li°
);

55 
thªad_°©
 
	g˛õ¡_ts
;

56 
group_run_°©s
 
	g˛õ¡_gs
;

57 
	gsum_°©_˛õ¡s
;

59 
	gsum_°©_ƒ
;

60 
js⁄_obje˘
 *
	groŸ
 = 
NULL
;

61 
js⁄_¨øy
 *
	g˛õ¡s_¨øy
 = 
NULL
;

62 
js⁄_¨øy
 *
	gdu_¨øy
 = 
NULL
;

63 
	gdo_ouçut_Æl_˛õ¡s
;

65 
	#FIO_CLIENT_HASH_BITS
 7

	)

66 
	#FIO_CLIENT_HASH_SZ
 (1 << 
FIO_CLIENT_HASH_BITS
)

	)

67 
	#FIO_CLIENT_HASH_MASK
 (
FIO_CLIENT_HASH_SZ
 - 1)

	)

68 
Êi°_hód
 
	g˛õ¡_hash
[
FIO_CLIENT_HASH_SZ
];

70 
	$fio_˛õ¡_add_hash
(
fio_˛õ¡
 *
˛õ¡
)

72 
buckë
 = 
	`hash_l⁄g
(
˛õ¡
->
fd
, 
FIO_CLIENT_HASH_BITS
);

74 
buckë
 &
FIO_CLIENT_HASH_MASK
;

75 
	`Êi°_add
(&
˛õ¡
->
hash_li°
, &
˛õ¡_hash
[
buckë
]);

76 
	}
}

78 
	$fio_˛õ¡_ªmove_hash
(
fio_˛õ¡
 *
˛õ¡
)

80 i‡(!
	`Êi°_em±y
(&
˛õ¡
->
hash_li°
))

81 
	`Êi°_dñ_öô
(&
˛õ¡
->
hash_li°
);

82 
	}
}

84 
fio_öô
 
	$fio_˛õ¡_hash_öô
()

86 
i
;

88 
i
 = 0; i < 
FIO_CLIENT_HASH_SZ
; i++)

89 
	`INIT_FLIST_HEAD
(&
˛õ¡_hash
[
i
]);

90 
	}
}

92 
	$fio_˛õ¡_js⁄_öô
()

94 i‡(
ouçut_f‹m©
 !
FIO_OUTPUT_JSON
)

96 
roŸ
 = 
	`js⁄_¸óã_obje˘
();

97 
	`js⁄_obje˘_add_vÆue_°rög
(
roŸ
, "fiÿvîsi⁄", 
fio_vîsi⁄_°rög
);

98 
˛õ¡s_¨øy
 = 
	`js⁄_¸óã_¨øy
();

99 
	`js⁄_obje˘_add_vÆue_¨øy
(
roŸ
, "˛õ¡_°©s", 
˛õ¡s_¨øy
);

100 
du_¨øy
 = 
	`js⁄_¸óã_¨øy
();

101 
	`js⁄_obje˘_add_vÆue_¨øy
(
roŸ
, "disk_utû", 
du_¨øy
);

102 
	}
}

104 
	$fio_˛õ¡_js⁄_föi
()

106 i‡(
ouçut_f‹m©
 !
FIO_OUTPUT_JSON
)

108 
	`js⁄_¥öt_obje˘
(
roŸ
);

109 
	`log_öfo
("\n");

110 
	`js⁄_‰ì_obje˘
(
roŸ
);

111 
roŸ
 = 
NULL
;

112 
˛õ¡s_¨øy
 = 
NULL
;

113 
du_¨øy
 = 
NULL
;

114 
	}
}

116 
fio_˛õ¡
 *
	$föd_˛õ¡_by_fd
(
fd
)

118 
buckë
 = 
	`hash_l⁄g
(
fd
, 
FIO_CLIENT_HASH_BITS
Ë& 
FIO_CLIENT_HASH_MASK
;

119 
fio_˛õ¡
 *
˛õ¡
;

120 
Êi°_hód
 *
íåy
;

122 
	`Êi°_f‹_óch
(
íåy
, &
˛õ¡_hash
[
buckë
]) {

123 
˛õ¡
 = 
	`Êi°_íåy
(
íåy
, 
fio_˛õ¡
, 
hash_li°
);

125 i‡(
˛õ¡
->
fd
 == fd) {

126 
˛õ¡
->
ªfs
++;

127  
˛õ¡
;

131  
NULL
;

132 
	}
}

134 
	$fio_put_˛õ¡
(
fio_˛õ¡
 *
˛õ¡
)

136 i‡(--
˛õ¡
->
ªfs
)

139 
	`‰ì
(
˛õ¡
->
ho°«me
);

140 i‡(
˛õ¡
->
¨gv
)

141 
	`‰ì
(
˛õ¡
->
¨gv
);

142 i‡(
˛õ¡
->
«me
)

143 
	`‰ì
(
˛õ¡
->
«me
);

144 
˛õ¡
->
ƒ_öi_fûe
)

145 
	`‰ì
(
˛õ¡
->
öi_fûe
[--˛õ¡->
ƒ_öi_fûe
]);

146 i‡(
˛õ¡
->
öi_fûe
)

147 
	`‰ì
(
˛õ¡
->
öi_fûe
);

149 i‡(!
˛õ¡
->
did_°©
)

150 
sum_°©_˛õ¡s
 -
˛õ¡
->
ƒ_°©
;

152 
	`‰ì
(
˛õ¡
);

153 
	}
}

155 
	$ªmove_˛õ¡
(
fio_˛õ¡
 *
˛õ¡
)

157 
	`as£π
(
˛õ¡
->
ªfs
);

159 
	`d¥öt
(
FD_NET
, "˛õ¡:Ñemoved <%s>\n", 
˛õ¡
->
ho°«me
);

161 i‡(!
	`Êi°_em±y
(&
˛õ¡
->
li°
))

162 
	`Êi°_dñ_öô
(&
˛õ¡
->
li°
);

164 
	`fio_˛õ¡_ªmove_hash
(
˛õ¡
);

166 i‡(!
	`Êi°_em±y
(&
˛õ¡
->
ëa_li°
)) {

167 
	`Êi°_dñ_öô
(&
˛õ¡
->
ëa_li°
);

168 
	`fio_˛õ¡_dec_jobs_ëa
(
˛õ¡
->
ëa_ö_Êight
, clõ¡->
›s
->
ëa
);

171 
	`˛o£
(
˛õ¡
->
fd
);

172 
˛õ¡
->
fd
 = -1;

174 i‡(
˛õ¡
->
›s
->
ªmoved
)

175 
˛õ¡
->
›s
->
	`ªmoved
(client);

177 
ƒ_˛õ¡s
--;

178 
	`fio_put_˛õ¡
(
˛õ¡
);

179 
	}
}

181 
fio_˛õ¡
 *
	$fio_gë_˛õ¡
(
fio_˛õ¡
 *
˛õ¡
)

183 
˛õ¡
->
ªfs
++;

184  
˛õ¡
;

185 
	}
}

187 
	$__fio_˛õ¡_add_cmd_›ti⁄
(
fio_˛õ¡
 *
˛õ¡
,

188 c⁄° *
›t
)

190 
ödex
;

192 
ödex
 = 
˛õ¡
->
¨gc
++;

193 
˛õ¡
->
¨gv
 = 
	`ªÆloc
(˛õ¡->¨gv, (*Ë* clõ¡->
¨gc
);

194 
˛õ¡
->
¨gv
[
ödex
] = 
	`°rdup
(
›t
);

195 
	`d¥öt
(
FD_NET
, "˛õ¡:ádd cmd %d: %s\n", 
ödex
, 
›t
);

196 
	}
}

198 
	$fio_˛õ¡_add_cmd_›ti⁄
(*
cookõ
, c⁄° *
›t
)

200 
fio_˛õ¡
 *
˛õ¡
 = 
cookõ
;

201 
Êi°_hód
 *
íåy
;

203 i‡(!
˛õ¡
 || !
›t
)

206 
	`__fio_˛õ¡_add_cmd_›ti⁄
(
˛õ¡
, 
›t
);

211 
	`Êi°_f‹_óch
(
íåy
, &
¨g_li°
) {

212 
˛õ¡
 = 
	`Êi°_íåy
(
íåy
, 
fio_˛õ¡
, 
¨g_li°
);

214 
	`__fio_˛õ¡_add_cmd_›ti⁄
(
˛õ¡
, 
›t
);

216 
	}
}

218 
fio_˛õ¡
 *
	$fio_˛õ¡_add_ex∂icô
(
˛õ¡_›s
 *
›s
,

219 c⁄° *
ho°«me
, 
ty≥
,

220 
p‹t
)

222 
fio_˛õ¡
 *
˛õ¡
;

224 
˛õ¡
 = 
	`mÆloc
((*client));

225 
	`mem£t
(
˛õ¡
, 0, (*client));

227 
	`INIT_FLIST_HEAD
(&
˛õ¡
->
li°
);

228 
	`INIT_FLIST_HEAD
(&
˛õ¡
->
hash_li°
);

229 
	`INIT_FLIST_HEAD
(&
˛õ¡
->
¨g_li°
);

230 
	`INIT_FLIST_HEAD
(&
˛õ¡
->
ëa_li°
);

231 
	`INIT_FLIST_HEAD
(&
˛õ¡
->
cmd_li°
);

233 
˛õ¡
->
ho°«me
 = 
	`°rdup
(hostname);

235 i‡(
ty≥
 =
Fio_˛õ¡_sockë
)

236 
˛õ¡
->
is_sock
 = 1;

238 
ùv6
;

240 
ùv6
 = 
ty≥
 =
Fio_˛õ¡_ùv6
;

241 i‡(
	`fio_£rvî_∑r£_ho°
(
ho°«me
, 
ùv6
,

242 &
˛õ¡
->
addr
.
sö_addr
,

243 &
˛õ¡
->
addr6
.
sö6_addr
))

244 
îr
;

246 
˛õ¡
->
p‹t
 =Öort;

249 
˛õ¡
->
fd
 = -1;

250 
˛õ¡
->
›s
 = ops;

251 
˛õ¡
->
ªfs
 = 1;

252 
˛õ¡
->
ty≥
 = 
›s
->
˛õ¡_ty≥
;

254 
	`__fio_˛õ¡_add_cmd_›ti⁄
(
˛õ¡
, "fio");

256 
	`Êi°_add
(&
˛õ¡
->
li°
, &
˛õ¡_li°
);

257 
ƒ_˛õ¡s
++;

258 
	`d¥öt
(
FD_NET
, "˛õ¡:ádded <%s>\n", 
˛õ¡
->
ho°«me
);

259  
˛õ¡
;

260 
îr
:

261 
	`‰ì
(
˛õ¡
);

262  
NULL
;

263 
	}
}

265 
	$fio_˛õ¡_add_öi_fûe
(*
cookõ
, c⁄° *
öi_fûe
)

267 
fio_˛õ¡
 *
˛õ¡
 = 
cookõ
;

268 
size_t
 
√w_size
;

270 
	`d¥öt
(
FD_NET
, "˛õ¡ <%s>:ádd inò%s\n", 
˛õ¡
->
ho°«me
, 
öi_fûe
);

272 
√w_size
 = (
˛õ¡
->
ƒ_öi_fûe
 + 1) * (*);

273 
˛õ¡
->
öi_fûe
 = 
	`ªÆloc
(˛õ¡->öi_fûe, 
√w_size
);

274 
˛õ¡
->
öi_fûe
[˛õ¡->
ƒ_öi_fûe
] = 
	`°rdup
(ini_file);

275 
˛õ¡
->
ƒ_öi_fûe
++;

276 
	}
}

278 
	$fio_˛õ¡_add
(
˛õ¡_›s
 *
›s
, c⁄° *
ho°«me
, **
cookõ
)

280 
fio_˛õ¡
 *
exi°ög
 = *
cookõ
;

281 
fio_˛õ¡
 *
˛õ¡
;

283 i‡(
exi°ög
) {

288 i‡(
exi°ög
->
¨gc
 == 1)

289 
	`Êi°_add_èû
(&
exi°ög
->
¨g_li°
, &arg_list);

291 !
	`Êi°_em±y
(&
¨g_li°
))

292 
	`Êi°_dñ_öô
(
¨g_li°
.
√xt
);

296 
˛õ¡
 = 
	`mÆloc
((*client));

297 
	`mem£t
(
˛õ¡
, 0, (*client));

299 
	`INIT_FLIST_HEAD
(&
˛õ¡
->
li°
);

300 
	`INIT_FLIST_HEAD
(&
˛õ¡
->
hash_li°
);

301 
	`INIT_FLIST_HEAD
(&
˛õ¡
->
¨g_li°
);

302 
	`INIT_FLIST_HEAD
(&
˛õ¡
->
ëa_li°
);

303 
	`INIT_FLIST_HEAD
(&
˛õ¡
->
cmd_li°
);

305 i‡(
	`fio_£rvî_∑r£_°rög
(
ho°«me
, &
˛õ¡
->hostname,

306 &
˛õ¡
->
is_sock
, &˛õ¡->
p‹t
,

307 &
˛õ¡
->
addr
.
sö_addr
,

308 &
˛õ¡
->
addr6
.
sö6_addr
,

309 &
˛õ¡
->
ùv6
))

312 
˛õ¡
->
fd
 = -1;

313 
˛õ¡
->
›s
 = ops;

314 
˛õ¡
->
ªfs
 = 1;

315 
˛õ¡
->
ty≥
 = 
›s
->
˛õ¡_ty≥
;

317 
	`__fio_˛õ¡_add_cmd_›ti⁄
(
˛õ¡
, "fio");

319 
	`Êi°_add
(&
˛õ¡
->
li°
, &
˛õ¡_li°
);

320 
ƒ_˛õ¡s
++;

321 
	`d¥öt
(
FD_NET
, "˛õ¡:ádded <%s>\n", 
˛õ¡
->
ho°«me
);

322 *
cookõ
 = 
˛õ¡
;

324 
	}
}

326 
	$¥obe_˛õ¡
(
fio_˛õ¡
 *
˛õ¡
)

328 
cmd_˛õ¡_¥obe_pdu
 
pdu
;

329 
uöt64_t
 
èg
;

331 
	`d¥öt
(
FD_NET
, "client: sendÖrobe\n");

333 #ifde‡
CONFIG_ZLIB


334 
pdu
.
Êags
 = 
	`__À64_to_˝u
(
FIO_PROBE_FLAG_ZLIB
);

336 
pdu
.
Êags
 = 0;

339 
	`fio_√t_£nd_cmd
(
˛õ¡
->
fd
, 
FIO_NET_CMD_PROBE
, &
pdu
, ’du), &
èg
, &˛õ¡->
cmd_li°
);

340 
	}
}

342 
	$fio_˛õ¡_c⁄√˘_ù
(
fio_˛õ¡
 *
˛õ¡
)

344 
sockaddr
 *
addr
;

345 
sockÀn_t
 
sockÀn
;

346 
fd
, 
domaö
;

348 i‡(
˛õ¡
->
ùv6
) {

349 
˛õ¡
->
addr6
.
sö6_Ámûy
 = 
AF_INET6
;

350 
˛õ¡
->
addr6
.
sö6_p‹t
 = 
	`ht⁄s
(˛õ¡->
p‹t
);

351 
domaö
 = 
AF_INET6
;

352 
addr
 = (
sockaddr
 *Ë&
˛õ¡
->
addr6
;

353 
sockÀn
 = (
˛õ¡
->
addr6
);

355 
˛õ¡
->
addr
.
sö_Ámûy
 = 
AF_INET
;

356 
˛õ¡
->
addr
.
sö_p‹t
 = 
	`ht⁄s
(˛õ¡->
p‹t
);

357 
domaö
 = 
AF_INET
;

358 
addr
 = (
sockaddr
 *Ë&
˛õ¡
->addr;

359 
sockÀn
 = (
˛õ¡
->
addr
);

362 
fd
 = 
	`sockë
(
domaö
, 
SOCK_STREAM
, 0);

363 i‡(
fd
 < 0) {

364 
ªt
 = -
î∫o
;

366 
	`log_îr
("fio: sockë: %s\n", 
	`°ªº‹
(
î∫o
));

367  
ªt
;

370 i‡(
	`c⁄√˘
(
fd
, 
addr
, 
sockÀn
) < 0) {

371 
ªt
 = -
î∫o
;

373 
	`log_îr
("fio: c⁄√˘: %s\n", 
	`°ªº‹
(
î∫o
));

374 
	`log_îr
("fio: faûedÅÿc⁄√˘Åÿ%s:%u\n", 
˛õ¡
->
ho°«me
,

375 
˛õ¡
->
p‹t
);

376 
	`˛o£
(
fd
);

377  
ªt
;

380  
fd
;

381 
	}
}

383 
	$fio_˛õ¡_c⁄√˘_sock
(
fio_˛õ¡
 *
˛õ¡
)

385 
sockaddr_un
 *
addr
 = &
˛õ¡
->
addr_un
;

386 
sockÀn_t
 
Àn
;

387 
fd
;

389 
	`mem£t
(
addr
, 0, (*addr));

390 
addr
->
sun_Ámûy
 = 
AF_UNIX
;

391 
	`°∫˝y
(
addr
->
sun_∑th
, 
˛õ¡
->
ho°«me
, (addr->sun_path) - 1);

393 
fd
 = 
	`sockë
(
AF_UNIX
, 
SOCK_STREAM
, 0);

394 i‡(
fd
 < 0) {

395 
ªt
 = -
î∫o
;

397 
	`log_îr
("fio: sockë: %s\n", 
	`°ªº‹
(
î∫o
));

398  
ªt
;

401 
Àn
 = (
addr
->
sun_Ámûy
Ë+ 
	`°æí
◊ddr->
sun_∑th
) + 1;

402 i‡(
	`c⁄√˘
(
fd
, (
sockaddr
 *Ë
addr
, 
Àn
) < 0) {

403 
ªt
 = -
î∫o
;

405 
	`log_îr
("fio: c⁄√˘; %s\n", 
	`°ªº‹
(
î∫o
));

406 
	`˛o£
(
fd
);

407  
ªt
;

410  
fd
;

411 
	}
}

413 
	$fio_˛õ¡_c⁄√˘
(
fio_˛õ¡
 *
˛õ¡
)

415 
fd
;

417 
	`d¥öt
(
FD_NET
, "˛õ¡: c⁄√˘Åÿho° %s\n", 
˛õ¡
->
ho°«me
);

419 i‡(
˛õ¡
->
is_sock
)

420 
fd
 = 
	`fio_˛õ¡_c⁄√˘_sock
(
˛õ¡
);

422 
fd
 = 
	`fio_˛õ¡_c⁄√˘_ù
(
˛õ¡
);

424 
	`d¥öt
(
FD_NET
, "˛õ¡: %†c⁄√˘ed %d\n", 
˛õ¡
->
ho°«me
, 
fd
);

426 i‡(
fd
 < 0)

427  
fd
;

429 
˛õ¡
->
fd
 = fd;

430 
	`fio_˛õ¡_add_hash
(
˛õ¡
);

431 
˛õ¡
->
°©e
 = 
Clõ¡_c⁄√˘ed
;

433 
	`¥obe_˛õ¡
(
˛õ¡
);

435 
	}
}

437 
	$fio_˛õ¡_ãrmö©e
(
fio_˛õ¡
 *
˛õ¡
)

439  
	`fio_√t_£nd_quô
(
˛õ¡
->
fd
);

440 
	}
}

442 
	$fio_˛õ¡s_ãrmö©e
()

444 
Êi°_hód
 *
íåy
;

445 
fio_˛õ¡
 *
˛õ¡
;

447 
	`d¥öt
(
FD_NET
, "client:Åerminate clients\n");

449 
	`Êi°_f‹_óch
(
íåy
, &
˛õ¡_li°
) {

450 
˛õ¡
 = 
	`Êi°_íåy
(
íåy
, 
fio_˛õ¡
, 
li°
);

451 
	`fio_˛õ¡_ãrmö©e
(
˛õ¡
);

453 
	}
}

455 
	$sig_öt
(
sig
)

457 
	`d¥öt
(
FD_NET
, "˛õ¡: gŸ sig«»%d\n", 
sig
);

458 
	`fio_˛õ¡s_ãrmö©e
();

459 
	}
}

461 
	$sig_show_°©us
(
sig
)

463 
	`show_ru¬ög_run_°©s
();

464 
	}
}

466 
	$˛õ¡_sig«l_h™dÀr
()

468 
siga˘i⁄
 
a˘
;

470 
	`mem£t
(&
a˘
, 0, (act));

471 
a˘
.
ß_h™dÀr
 = 
sig_öt
;

472 
a˘
.
ß_Êags
 = 
SA_RESTART
;

473 
	`siga˘i⁄
(
SIGINT
, &
a˘
, 
NULL
);

475 
	`mem£t
(&
a˘
, 0, (act));

476 
a˘
.
ß_h™dÀr
 = 
sig_öt
;

477 
a˘
.
ß_Êags
 = 
SA_RESTART
;

478 
	`siga˘i⁄
(
SIGTERM
, &
a˘
, 
NULL
);

481 #ifde‡
WIN32


482 
	`mem£t
(&
a˘
, 0, (act));

483 
a˘
.
ß_h™dÀr
 = 
sig_öt
;

484 
a˘
.
ß_Êags
 = 
SA_RESTART
;

485 
	`siga˘i⁄
(
SIGBREAK
, &
a˘
, 
NULL
);

488 
	`mem£t
(&
a˘
, 0, (act));

489 
a˘
.
ß_h™dÀr
 = 
sig_show_°©us
;

490 
a˘
.
ß_Êags
 = 
SA_RESTART
;

491 
	`siga˘i⁄
(
SIGUSR1
, &
a˘
, 
NULL
);

492 
	}
}

494 
	$£nd_˛õ¡_cmd_löe
(
fio_˛õ¡
 *
˛õ¡
)

496 
cmd_sögÀ_löe_pdu
 *
c¶p
;

497 
cmd_löe_pdu
 *
˛p
;

498 
off£t
;

499 *
Àns
;

500 *
pdu
;

501 
size_t
 
mem
;

502 
i
, 
ªt
;

504 
	`d¥öt
(
FD_NET
, "˛õ¡: síd cmdlöê%d\n", 
˛õ¡
->
¨gc
);

506 
Àns
 = 
	`mÆloc
(
˛õ¡
->
¨gc
 * ());

511 
i
 = 0, 
mem
 = 0; i < 
˛õ¡
->
¨gc
; i++) {

512 
Àns
[
i
] = 
	`°æí
(
˛õ¡
->
¨gv
[i]) + 1;

513 
mem
 +
Àns
[
i
];

519 
mem
 +(*
˛p
Ë+ (
˛õ¡
->
¨gc
 * (*
c¶p
));

521 
pdu
 = 
	`mÆloc
(
mem
);

522 
˛p
 = 
pdu
;

523 
off£t
 = (*
˛p
);

525 
i
 = 0; i < 
˛õ¡
->
¨gc
; i++) {

526 
uöt16_t
 
¨g_Àn
 = 
Àns
[
i
];

528 
c¶p
 = 
pdu
 + 
off£t
;

529 
	`°r˝y
((*Ë
c¶p
->
ãxt
, 
˛õ¡
->
¨gv
[
i
]);

530 
c¶p
->
Àn
 = 
	`˝u_to_À16
(
¨g_Àn
);

531 
off£t
 +(*
c¶p
Ë+ 
¨g_Àn
;

534 
	`‰ì
(
Àns
);

535 
˛p
->
löes
 = 
	`˝u_to_À16
(
˛õ¡
->
¨gc
);

536 
˛p
->
˛õ¡_ty≥
 = 
	`__˝u_to_À16
(
˛õ¡
->
ty≥
);

537 
ªt
 = 
	`fio_√t_£nd_cmd
(
˛õ¡
->
fd
, 
FIO_NET_CMD_JOBLINE
, 
pdu
, 
mem
, 
NULL
, NULL);

538 
	`‰ì
(
pdu
);

539  
ªt
;

540 
	}
}

542 
	$fio_˛õ¡s_c⁄√˘
()

544 
fio_˛õ¡
 *
˛õ¡
;

545 
Êi°_hód
 *
íåy
, *
tmp
;

546 
ªt
;

548 #ifde‡
WIN32


549 
WSADATA
 
wsd
;

550 
	`WSASèπup
(
	`MAKEWORD
(2, 2), &
wsd
);

553 
	`d¥öt
(
FD_NET
, "client: connectáll\n");

555 
	`˛õ¡_sig«l_h™dÀr
();

557 
	`Êi°_f‹_óch_ß„
(
íåy
, 
tmp
, &
˛õ¡_li°
) {

558 
˛õ¡
 = 
	`Êi°_íåy
(
íåy
, 
fio_˛õ¡
, 
li°
);

560 
ªt
 = 
	`fio_˛õ¡_c⁄√˘
(
˛õ¡
);

561 i‡(
ªt
) {

562 
	`ªmove_˛õ¡
(
˛õ¡
);

566 i‡(
˛õ¡
->
¨gc
 > 1)

567 
	`£nd_˛õ¡_cmd_löe
(
˛õ¡
);

570  !
ƒ_˛õ¡s
;

571 
	}
}

573 
	$fio_°¨t_˛õ¡
(
fio_˛õ¡
 *
˛õ¡
)

575 
	`d¥öt
(
FD_NET
, "˛õ¡: sèπ %s\n", 
˛õ¡
->
ho°«me
);

576  
	`fio_√t_£nd_sim∂e_cmd
(
˛õ¡
->
fd
, 
FIO_NET_CMD_RUN
, 0, 
NULL
);

577 
	}
}

579 
	$fio_°¨t_Æl_˛õ¡s
()

581 
fio_˛õ¡
 *
˛õ¡
;

582 
Êi°_hód
 *
íåy
, *
tmp
;

583 
ªt
;

585 
	`d¥öt
(
FD_NET
, "client: startáll\n");

587 
	`fio_˛õ¡_js⁄_öô
();

589 
	`Êi°_f‹_óch_ß„
(
íåy
, 
tmp
, &
˛õ¡_li°
) {

590 
˛õ¡
 = 
	`Êi°_íåy
(
íåy
, 
fio_˛õ¡
, 
li°
);

592 
ªt
 = 
	`fio_°¨t_˛õ¡
(
˛õ¡
);

593 i‡(
ªt
) {

594 
	`ªmove_˛õ¡
(
˛õ¡
);

599  
	`Êi°_em±y
(&
˛õ¡_li°
);

600 
	}
}

606 
	$__fio_˛õ¡_£nd_öi
(
fio_˛õ¡
 *
˛õ¡
, c⁄° *
fûíame
)

608 
cmd_job_pdu
 *
pdu
;

609 
size_t
 
p_size
;

610 
°©
 
sb
;

611 *
p
;

612 *
buf
;

613 
off_t
 
Àn
;

614 
fd
, 
ªt
;

616 
	`d¥öt
(
FD_NET
, "£nd inò%†tÿ%s\n", 
fûíame
, 
˛õ¡
->
ho°«me
);

618 
fd
 = 
	`›í
(
fûíame
, 
O_RDONLY
);

619 i‡(
fd
 < 0) {

620 
ªt
 = -
î∫o
;

622 
	`log_îr
("fio: job fûê<%s> o≥n: %s\n", 
fûíame
, 
	`°ªº‹
(
î∫o
));

623  
ªt
;

626 i‡(
	`f°©
(
fd
, &
sb
) < 0) {

627 
ªt
 = -
î∫o
;

629 
	`log_îr
("fio: job fûê°©: %s\n", 
	`°ªº‹
(
î∫o
));

630 
	`˛o£
(
fd
);

631  
ªt
;

634 
p_size
 = 
sb
.
°_size
 + (*
pdu
);

635 
pdu
 = 
	`mÆloc
(
p_size
);

636 
buf
 = 
pdu
->buf;

638 
Àn
 = 
sb
.
°_size
;

639 
p
 = 
buf
;

641 
ªt
 = 
	`ªad
(
fd
, 
p
, 
Àn
);

642 i‡(
ªt
 > 0) {

643 
Àn
 -
ªt
;

644 i‡(!
Àn
)

646 
p
 +
ªt
;

648 } i‡(!
ªt
)

650 i‡(
î∫o
 =
EAGAIN
 ||Éºnÿ=
EINTR
)

654 i‡(
Àn
) {

655 
	`log_îr
("fio: faûedÑódög job fûê%s\n", 
fûíame
);

656 
	`˛o£
(
fd
);

657 
	`‰ì
(
pdu
);

661 
pdu
->
buf_Àn
 = 
	`__˝u_to_À32
(
sb
.
°_size
);

662 
pdu
->
˛õ¡_ty≥
 = 
	`˝u_to_À32
(
˛õ¡
->
ty≥
);

664 
˛õ¡
->
£¡_job
 = 1;

665 
ªt
 = 
	`fio_√t_£nd_cmd
(
˛õ¡
->
fd
, 
FIO_NET_CMD_JOB
, 
pdu
, 
p_size
, 
NULL
, NULL);

666 
	`‰ì
(
pdu
);

667 
	`˛o£
(
fd
);

668  
ªt
;

669 
	}
}

671 
	$fio_˛õ¡_£nd_öi
(
fio_˛õ¡
 *
˛õ¡
, c⁄° *
fûíame
)

673 
ªt
;

675 
ªt
 = 
	`__fio_˛õ¡_£nd_öi
(
˛õ¡
, 
fûíame
);

676 i‡(!
ªt
)

677 
˛õ¡
->
£¡_job
 = 1;

679  
ªt
;

680 
	}
}

682 
	$fio_˛õ¡s_£nd_öi
(c⁄° *
fûíame
)

684 
fio_˛õ¡
 *
˛õ¡
;

685 
Êi°_hód
 *
íåy
, *
tmp
;

687 
	`Êi°_f‹_óch_ß„
(
íåy
, 
tmp
, &
˛õ¡_li°
) {

688 
˛õ¡
 = 
	`Êi°_íåy
(
íåy
, 
fio_˛õ¡
, 
li°
);

690 i‡(
˛õ¡
->
ƒ_öi_fûe
) {

691 
i
;

693 
i
 = 0; i < 
˛õ¡
->
ƒ_öi_fûe
; i++) {

694 c⁄° *
öi
 = 
˛õ¡
->
öi_fûe
[
i
];

696 i‡(
	`fio_˛õ¡_£nd_öi
(
˛õ¡
, 
öi
)) {

697 
	`ªmove_˛õ¡
(
˛õ¡
);

701 } i‡(!
fûíame
 || 
	`fio_˛õ¡_£nd_öi
(
˛õ¡
, filename))

702 
	`ªmove_˛õ¡
(
˛õ¡
);

705  !
ƒ_˛õ¡s
;

706 
	}
}

708 
	$fio_˛õ¡_upd©e_›ti⁄s
(
fio_˛õ¡
 *
˛õ¡
,

709 
thªad_›ti⁄s
 *
o
, 
uöt64_t
 *
èg
)

711 
cmd_add_job_pdu
 
pdu
;

713 
pdu
.
thªad_numbî
 = 
	`˝u_to_À32
(
˛õ¡
->thread_number);

714 
pdu
.
groupid
 = 
	`˝u_to_À32
(
˛õ¡
->groupid);

715 
	`c⁄vît_thªad_›ti⁄s_to_√t
(&
pdu
.
t›
, 
o
);

717  
	`fio_√t_£nd_cmd
(
˛õ¡
->
fd
, 
FIO_NET_CMD_UPDATE_JOB
, &
pdu
, ’du), 
èg
, &˛õ¡->
cmd_li°
);

718 
	}
}

720 
	$c⁄vît_io_°©
(
io_°©
 *
d°
, io_°© *
§c
)

722 
d°
->
max_vÆ
 = 
	`À64_to_˝u
(
§c
->max_val);

723 
d°
->
mö_vÆ
 = 
	`À64_to_˝u
(
§c
->min_val);

724 
d°
->
ßm∂es
 = 
	`À64_to_˝u
(
§c
->samples);

729 
d°
->
món
.
u
.
f
 = 
	`fio_uöt64_to_doubÀ
(
	`À64_to_˝u
(d°->món.u.
i
));

730 
d°
->
S
.
u
.
f
 = 
	`fio_uöt64_to_doubÀ
(
	`À64_to_˝u
(d°->S.u.
i
));

731 
	}
}

733 
	$c⁄vît_ts
(
thªad_°©
 *
d°
, thªad_°© *
§c
)

735 
i
, 
j
;

737 
d°
->
îr‹
 = 
	`À32_to_˝u
(
§c
->error);

738 
d°
->
thªad_numbî
 = 
	`À32_to_˝u
(
§c
->thread_number);

739 
d°
->
groupid
 = 
	`À32_to_˝u
(
§c
->groupid);

740 
d°
->
pid
 = 
	`À32_to_˝u
(
§c
->pid);

741 
d°
->
membîs
 = 
	`À32_to_˝u
(
§c
->members);

742 
d°
->
unifõd_rw_ªp
 = 
	`À32_to_˝u
(
§c
->unified_rw_rep);

744 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

745 
	`c⁄vît_io_°©
(&
d°
->
˛©_°©
[
i
], &
§c
->clat_stat[i]);

746 
	`c⁄vît_io_°©
(&
d°
->
¶©_°©
[
i
], &
§c
->slat_stat[i]);

747 
	`c⁄vît_io_°©
(&
d°
->
œt_°©
[
i
], &
§c
->lat_stat[i]);

748 
	`c⁄vît_io_°©
(&
d°
->
bw_°©
[
i
], &
§c
->bw_stat[i]);

751 
d°
->
u§_time
 = 
	`À64_to_˝u
(
§c
->usr_time);

752 
d°
->
sys_time
 = 
	`À64_to_˝u
(
§c
->sys_time);

753 
d°
->
˘x
 = 
	`À64_to_˝u
(
§c
->ctx);

754 
d°
->
möf
 = 
	`À64_to_˝u
(
§c
->minf);

755 
d°
->
majf
 = 
	`À64_to_˝u
(
§c
->majf);

756 
d°
->
˛©_≥r˚¡ûes
 = 
	`À64_to_˝u
(
§c
->clat_percentiles);

758 
i
 = 0; i < 
FIO_IO_U_LIST_MAX_LEN
; i++) {

759 
fio_Â64_t
 *
Âs
 = &
§c
->
≥r˚¡ûe_li°
[
i
];

760 
fio_Â64_t
 *
Âd
 = &
d°
->
≥r˚¡ûe_li°
[
i
];

762 
Âd
->
u
.
f
 = 
	`fio_uöt64_to_doubÀ
(
	`À64_to_˝u
(
Âs
->u.
i
));

765 
i
 = 0; i < 
FIO_IO_U_MAP_NR
; i++) {

766 
d°
->
io_u_m≠
[
i
] = 
	`À32_to_˝u
(
§c
->io_u_map[i]);

767 
d°
->
io_u_submô
[
i
] = 
	`À32_to_˝u
(
§c
->io_u_submit[i]);

768 
d°
->
io_u_com∂ëe
[
i
] = 
	`À32_to_˝u
(
§c
->io_u_complete[i]);

771 
i
 = 0; i < 
FIO_IO_U_LAT_U_NR
; i++) {

772 
d°
->
io_u_œt_u
[
i
] = 
	`À32_to_˝u
(
§c
->io_u_lat_u[i]);

773 
d°
->
io_u_œt_m
[
i
] = 
	`À32_to_˝u
(
§c
->io_u_lat_m[i]);

776 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++)

777 
j
 = 0; j < 
FIO_IO_U_PLAT_NR
; j++)

778 
d°
->
io_u_∂©
[
i
][
j
] = 
	`À32_to_˝u
(
§c
->io_u_plat[i][j]);

780 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

781 
d°
->
tŸÆ_io_u
[
i
] = 
	`À64_to_˝u
(
§c
->total_io_u[i]);

782 
d°
->
sh‹t_io_u
[
i
] = 
	`À64_to_˝u
(
§c
->short_io_u[i]);

785 
d°
->
tŸÆ_submô
 = 
	`À64_to_˝u
(
§c
->total_submit);

786 
d°
->
tŸÆ_com∂ëe
 = 
	`À64_to_˝u
(
§c
->total_complete);

788 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

789 
d°
->
io_byãs
[
i
] = 
	`À64_to_˝u
(
§c
->io_bytes[i]);

790 
d°
->
ru¡ime
[
i
] = 
	`À64_to_˝u
(
§c
->runtime[i]);

793 
d°
->
tŸÆ_run_time
 = 
	`À64_to_˝u
(
§c
->total_run_time);

794 
d°
->
c⁄töue_⁄_îr‹
 = 
	`À16_to_˝u
(
§c
->continue_on_error);

795 
d°
->
tŸÆ_îr_cou¡
 = 
	`À64_to_˝u
(
§c
->total_err_count);

796 
d°
->
fú°_îr‹
 = 
	`À32_to_˝u
(
§c
->first_error);

797 
d°
->
kb_ba£
 = 
	`À32_to_˝u
(
§c
->kb_base);

798 
d°
->
unô_ba£
 = 
	`À32_to_˝u
(
§c
->unit_base);

800 
d°
->
œãncy_dïth
 = 
	`À32_to_˝u
(
§c
->latency_depth);

801 
d°
->
œãncy_èrgë
 = 
	`À64_to_˝u
(
§c
->latency_target);

802 
d°
->
œãncy_wödow
 = 
	`À64_to_˝u
(
§c
->latency_window);

803 
d°
->
œãncy_≥r˚¡ûe
.
u
.
f
 = 
	`fio_uöt64_to_doubÀ
(
	`À64_to_˝u
(
§c
->œãncy_≥r˚¡ûe.u.
i
));

804 
	}
}

806 
	$c⁄vît_gs
(
group_run_°©s
 *
d°
, group_run_°©†*
§c
)

808 
i
;

810 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

811 
d°
->
max_run
[
i
] = 
	`À64_to_˝u
(
§c
->max_run[i]);

812 
d°
->
mö_run
[
i
] = 
	`À64_to_˝u
(
§c
->min_run[i]);

813 
d°
->
max_bw
[
i
] = 
	`À64_to_˝u
(
§c
->max_bw[i]);

814 
d°
->
mö_bw
[
i
] = 
	`À64_to_˝u
(
§c
->min_bw[i]);

815 
d°
->
io_kb
[
i
] = 
	`À64_to_˝u
(
§c
->io_kb[i]);

816 
d°
->
agg
[
i
] = 
	`À64_to_˝u
(
§c
->agg[i]);

819 
d°
->
kb_ba£
 = 
	`À32_to_˝u
(
§c
->kb_base);

820 
d°
->
unô_ba£
 = 
	`À32_to_˝u
(
§c
->unit_base);

821 
d°
->
groupid
 = 
	`À32_to_˝u
(
§c
->groupid);

822 
d°
->
unifõd_rw_ªp
 = 
	`À32_to_˝u
(
§c
->unified_rw_rep);

823 
	}
}

825 
	$js⁄_obje˘_add_˛õ¡_öfo
(
js⁄_obje˘
 *
obj
,

826 
fio_˛õ¡
 *
˛õ¡
)

828 
	`js⁄_obje˘_add_vÆue_°rög
(
obj
, "ho°«me", 
˛õ¡
->
ho°«me
);

829 
	`js⁄_obje˘_add_vÆue_öt
(
obj
, "p‹t", 
˛õ¡
->
p‹t
);

830 
	}
}

832 
	$h™dÀ_ts
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
)

834 
cmd_ts_pdu
 *
p
 = (cmd_ts_pdu *Ë
cmd
->
∑ylﬂd
;

835 
js⁄_obje˘
 *
tsobj
;

837 
tsobj
 = 
	`show_thªad_°©us
(&
p
->
ts
, &p->
rs
);

838 
˛õ¡
->
did_°©
 = 1;

839 i‡(
tsobj
) {

840 
	`js⁄_obje˘_add_˛õ¡_öfo
(
tsobj
, 
˛õ¡
);

841 
	`js⁄_¨øy_add_vÆue_obje˘
(
˛õ¡s_¨øy
, 
tsobj
);

844 i‡(!
do_ouçut_Æl_˛õ¡s
)

847 
	`sum_thªad_°©s
(&
˛õ¡_ts
, &
p
->
ts
, 
sum_°©_ƒ
);

848 
	`sum_group_°©s
(&
˛õ¡_gs
, &
p
->
rs
);

850 
˛õ¡_ts
.
membîs
++;

851 
˛õ¡_ts
.
thªad_numbî
 = 
p
->
ts
.thread_number;

852 
˛õ¡_ts
.
groupid
 = 
p
->
ts
.groupid;

853 
˛õ¡_ts
.
unifõd_rw_ªp
 = 
p
->
ts
.unified_rw_rep;

855 i‡(++
sum_°©_ƒ
 =
sum_°©_˛õ¡s
) {

856 
	`°r˝y
(
˛õ¡_ts
.
«me
, "All clients");

857 
tsobj
 = 
	`show_thªad_°©us
(&
˛õ¡_ts
, &
˛õ¡_gs
);

858 i‡(
tsobj
) {

859 
	`js⁄_obje˘_add_˛õ¡_öfo
(
tsobj
, 
˛õ¡
);

860 
	`js⁄_¨øy_add_vÆue_obje˘
(
˛õ¡s_¨øy
, 
tsobj
);

863 
	}
}

865 
	$h™dÀ_gs
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
)

867 
group_run_°©s
 *
gs
 = (group_run_°©†*Ë
cmd
->
∑ylﬂd
;

869 
	`show_group_°©s
(
gs
);

870 
	}
}

872 
	$h™dÀ_ãxt
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
)

874 
cmd_ãxt_pdu
 *
pdu
 = (cmd_ãxt_pdu *Ë
cmd
->
∑ylﬂd
;

875 c⁄° *
buf
 = (c⁄° *Ë
pdu
->buf;

876 c⁄° *
«me
;

877 
fio_unu£d
 
ªt
;

879 
«me
 = 
˛õ¡
->«mê? clõ¡->«mê: clõ¡->
ho°«me
;

881 i‡(!
˛õ¡
->
skù_√wlöe
)

882 
	`Ârötf
(
f_out
, "<%s> ", 
«me
);

883 
ªt
 = 
	`fwrôe
(
buf
, 
pdu
->
buf_Àn
, 1, 
f_out
);

884 
	`fÊush
(
f_out
);

885 
˛õ¡
->
skù_√wlöe
 = 
	`°rchr
(
buf
, '\n'Ë=
NULL
;

886 
	}
}

888 
	$c⁄vît_agg
(
disk_utû_agg
 *
agg
)

890 
i
;

892 
i
 = 0; i < 2; i++) {

893 
agg
->
ios
[
i
] = 
	`À32_to_˝u
(agg->ios[i]);

894 
agg
->
mîges
[
i
] = 
	`À32_to_˝u
(agg->merges[i]);

895 
agg
->
£˘‹s
[
i
] = 
	`À64_to_˝u
(agg->sectors[i]);

896 
agg
->
ticks
[
i
] = 
	`À32_to_˝u
(agg->ticks[i]);

899 
agg
->
io_ticks
 = 
	`À32_to_˝u
(agg->io_ticks);

900 
agg
->
time_ö_queue
 = 
	`À32_to_˝u
(agg->time_in_queue);

901 
agg
->
¶avecou¡
 = 
	`À32_to_˝u
(agg->slavecount);

902 
agg
->
max_utû
.
u
.
f
 = 
	`fio_uöt64_to_doubÀ
(
	`__À64_to_˝u
◊gg->max_utû.u.
i
));

903 
	}
}

905 
	$c⁄vît_dus
(
disk_utû_°©
 *
dus
)

907 
i
;

909 
i
 = 0; i < 2; i++) {

910 
dus
->
s
.
ios
[
i
] = 
	`À32_to_˝u
(dus->s.ios[i]);

911 
dus
->
s
.
mîges
[
i
] = 
	`À32_to_˝u
(dus->s.merges[i]);

912 
dus
->
s
.
£˘‹s
[
i
] = 
	`À64_to_˝u
(dus->s.sectors[i]);

913 
dus
->
s
.
ticks
[
i
] = 
	`À32_to_˝u
(dus->s.ticks[i]);

916 
dus
->
s
.
io_ticks
 = 
	`À32_to_˝u
(dus->s.io_ticks);

917 
dus
->
s
.
time_ö_queue
 = 
	`À32_to_˝u
(dus->s.time_in_queue);

918 
dus
->
s
.
m£c
 = 
	`À64_to_˝u
(dus->s.msec);

919 
	}
}

921 
	$h™dÀ_du
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
)

923 
cmd_du_pdu
 *
du
 = (cmd_du_pdu *Ë
cmd
->
∑ylﬂd
;

925 i‡(!
˛õ¡
->
disk_°©s_shown
) {

926 
˛õ¡
->
disk_°©s_shown
 = 1;

927 
	`log_öfo
("\nDisk stats (read/write):\n");

930 i‡(
ouçut_f‹m©
 =
FIO_OUTPUT_JSON
) {

931 
js⁄_obje˘
 *
duobj
;

932 
	`js⁄_¨øy_add_disk_utû
(&
du
->
dus
, &du->
agg
, 
du_¨øy
);

933 
duobj
 = 
	`js⁄_¨øy_œ°_vÆue_obje˘
(
du_¨øy
);

934 
	`js⁄_obje˘_add_˛õ¡_öfo
(
duobj
, 
˛õ¡
);

936 
	`¥öt_disk_utû
(&
du
->
dus
, &du->
agg
, 
ouçut_f‹m©
 =
FIO_OUTPUT_TERSE
);

937 
	}
}

939 
	$c⁄vît_jobs_ëa
(
jobs_ëa
 *
je
)

941 
i
;

943 
je
->
ƒ_ru¬ög
 = 
	`À32_to_˝u
(je->nr_running);

944 
je
->
ƒ_ømp
 = 
	`À32_to_˝u
(je->nr_ramp);

945 
je
->
ƒ_≥ndög
 = 
	`À32_to_˝u
(je->nr_pending);

946 
je
->
ƒ_£âög_up
 = 
	`À32_to_˝u
(je->nr_setting_up);

947 
je
->
fûes_›í
 = 
	`À32_to_˝u
(je->files_open);

949 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

950 
je
->
m_øã
[
i
] = 
	`À32_to_˝u
(je->m_rate[i]);

951 
je
->
t_øã
[
i
] = 
	`À32_to_˝u
(je->t_rate[i]);

952 
je
->
m_i›s
[
i
] = 
	`À32_to_˝u
(je->m_iops[i]);

953 
je
->
t_i›s
[
i
] = 
	`À32_to_˝u
(je->t_iops[i]);

954 
je
->
øã
[
i
] = 
	`À32_to_˝u
(je->rate[i]);

955 
je
->
i›s
[
i
] = 
	`À32_to_˝u
(je->iops[i]);

958 
je
->
ñ≠£d_£c
 = 
	`À64_to_˝u
(je->elapsed_sec);

959 
je
->
ëa_£c
 = 
	`À64_to_˝u
(je->eta_sec);

960 
je
->
ƒ_thªads
 = 
	`À32_to_˝u
(je->nr_threads);

961 
je
->
is_pow2
 = 
	`À32_to_˝u
(je->is_pow2);

962 
je
->
unô_ba£
 = 
	`À32_to_˝u
(je->unit_base);

963 
	}
}

965 
	$fio_˛õ¡_sum_jobs_ëa
(
jobs_ëa
 *
d°
, jobs_ë®*
je
)

967 
i
;

969 
d°
->
ƒ_ru¬ög
 +
je
->nr_running;

970 
d°
->
ƒ_ømp
 +
je
->nr_ramp;

971 
d°
->
ƒ_≥ndög
 +
je
->nr_pending;

972 
d°
->
ƒ_£âög_up
 +
je
->nr_setting_up;

973 
d°
->
fûes_›í
 +
je
->files_open;

975 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

976 
d°
->
m_øã
[
i
] +
je
->m_rate[i];

977 
d°
->
t_øã
[
i
] +
je
->t_rate[i];

978 
d°
->
m_i›s
[
i
] +
je
->m_iops[i];

979 
d°
->
t_i›s
[
i
] +
je
->t_iops[i];

980 
d°
->
øã
[
i
] +
je
->rate[i];

981 
d°
->
i›s
[
i
] +
je
->iops[i];

984 
d°
->
ñ≠£d_£c
 +
je
->elapsed_sec;

986 i‡(
je
->
ëa_£c
 > 
d°
->eta_sec)

987 
d°
->
ëa_£c
 = 
je
->eta_sec;

989 
d°
->
ƒ_thªads
 +
je
->nr_threads;

991 
	}
}

993 
	$fio_˛õ¡_dec_jobs_ëa
(
˛õ¡_ëa
 *
ëa
, 
˛õ¡_ëa_›
 
ëa_‚
)

995 i‡(!--
ëa
->
≥ndög
) {

996 
	`ëa_‚
(&
ëa
->eta);

997 
	`‰ì
(
ëa
);

999 
	}
}

1001 
	$ªmove_ª∂y_cmd
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
)

1003 
fio_√t_cmd_ª∂y
 *
ª∂y
 = 
NULL
;

1004 
Êi°_hód
 *
íåy
;

1006 
	`Êi°_f‹_óch
(
íåy
, &
˛õ¡
->
cmd_li°
) {

1007 
ª∂y
 = 
	`Êi°_íåy
(
íåy
, 
fio_√t_cmd_ª∂y
, 
li°
);

1009 i‡(
cmd
->
èg
 =(
uöçå_t
Ë
ª∂y
)

1012 
ª∂y
 = 
NULL
;

1015 i‡(!
ª∂y
) {

1016 
	`log_îr
("fio: clõ¡: u«bÀÅÿföd m©chögÅag (%Œx)\n", (Ë
cmd
->
èg
);

1020 
	`Êi°_dñ
(&
ª∂y
->
li°
);

1021 
cmd
->
èg
 = 
ª∂y
->
ßved_èg
;

1022 
	`‰ì
(
ª∂y
);

1023 
	}
}

1025 
	$fio_˛õ¡_waô_f‹_ª∂y
(
fio_˛õ¡
 *
˛õ¡
, 
uöt64_t
 
èg
)

1028 
fio_√t_cmd_ª∂y
 *
ª∂y
 = 
NULL
;

1029 
Êi°_hód
 *
íåy
;

1031 
	`Êi°_f‹_óch
(
íåy
, &
˛õ¡
->
cmd_li°
) {

1032 
ª∂y
 = 
	`Êi°_íåy
(
íåy
, 
fio_√t_cmd_ª∂y
, 
li°
);

1034 i‡(
èg
 =(
uöçå_t
Ë
ª∂y
)

1037 
ª∂y
 = 
NULL
;

1040 i‡(!
ª∂y
)

1043 
	`u¶ìp
(1000);

1047 
	}
}

1049 
	$h™dÀ_ëa
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
)

1051 
jobs_ëa
 *
je
 = (jobs_ë®*Ë
cmd
->
∑ylﬂd
;

1052 
˛õ¡_ëa
 *
ëa
 = (˛õ¡_ë®*Ë(
uöçå_t
Ë
cmd
->
èg
;

1054 
	`d¥öt
(
FD_NET
, "˛õ¡: gŸÉèÅag %p, %d\n", 
ëa
,Éè->
≥ndög
);

1056 
	`as£π
(
˛õ¡
->
ëa_ö_Êight
 =
ëa
);

1058 
˛õ¡
->
ëa_ö_Êight
 = 
NULL
;

1059 
	`Êi°_dñ_öô
(&
˛õ¡
->
ëa_li°
);

1061 i‡(
˛õ¡
->
›s
->
jobs_ëa
)

1062 
˛õ¡
->
›s
->
	`jobs_ëa
(˛õ¡, 
je
);

1064 
	`fio_˛õ¡_sum_jobs_ëa
(&
ëa
->ëa, 
je
);

1065 
	`fio_˛õ¡_dec_jobs_ëa
(
ëa
, 
˛õ¡
->
›s
->eta);

1066 
	}
}

1068 
	$h™dÀ_¥obe
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
)

1070 
cmd_¥obe_ª∂y_pdu
 *
¥obe
 = (cmd_¥obe_ª∂y_pdu *Ë
cmd
->
∑ylﬂd
;

1071 c⁄° *
os
, *
¨ch
;

1072 
bô
[16];

1074 
os
 = 
	`fio_gë_os_°rög
(
¥obe
->os);

1075 i‡(!
os
)

1076 
os
 = "unknown";

1078 
¨ch
 = 
	`fio_gë_¨ch_°rög
(
¥obe
->arch);

1079 i‡(!
¨ch
)

1080 
os
 = "unknown";

1082 
	`•rötf
(
bô
, "%d-bô", 
¥obe
->
bµ
 * 8);

1083 
¥obe
->
Êags
 = 
	`À64_to_˝u
(probe->flags);

1085 
	`log_öfo
("hostname=%s, be=%u, %s, os=%s,árch=%s, fio=%s, flags=%lx\n",

1086 
¥obe
->
ho°«me
,Örobe->
bigídün
, 
bô
, 
os
, 
¨ch
,

1087 
¥obe
->
fio_vîsi⁄
, (Ë¥obe->
Êags
);

1089 i‡(!
˛õ¡
->
«me
)

1090 
˛õ¡
->
«me
 = 
	`°rdup
((*Ë
¥obe
->
ho°«me
);

1091 
	}
}

1093 
	$h™dÀ_°¨t
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
)

1095 
cmd_°¨t_pdu
 *
pdu
 = (cmd_°¨t_pdu *Ë
cmd
->
∑ylﬂd
;

1097 
˛õ¡
->
°©e
 = 
Clõ¡_°¨ãd
;

1098 
˛õ¡
->
jobs
 = 
	`À32_to_˝u
(
pdu
->jobs);

1099 
˛õ¡
->
ƒ_°©
 = 
	`À32_to_˝u
(
pdu
->
°©_ouçuts
);

1101 i‡(
sum_°©_˛õ¡s
 > 1)

1102 
do_ouçut_Æl_˛õ¡s
 = 1;

1104 
sum_°©_˛õ¡s
 +
˛õ¡
->
ƒ_°©
;

1105 
	}
}

1107 
	$h™dÀ_°›
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
)

1109 i‡(
˛õ¡
->
îr‹
)

1110 
	`log_öfo
("˛õ¡ <%s>:Éxôed wôhÉº‹ %d\n", 
˛õ¡
->
ho°«me
, clõ¡->
îr‹
);

1111 
	}
}

1113 
	$c⁄vît_°›
(
fio_√t_cmd
 *
cmd
)

1115 
cmd_íd_pdu
 *
pdu
 = (cmd_íd_pdu *Ë
cmd
->
∑ylﬂd
;

1117 
pdu
->
îr‹
 = 
	`À32_to_˝u
(pdu->error);

1118 
	}
}

1120 
	$c⁄vît_ãxt
(
fio_√t_cmd
 *
cmd
)

1122 
cmd_ãxt_pdu
 *
pdu
 = (cmd_ãxt_pdu *Ë
cmd
->
∑ylﬂd
;

1124 
pdu
->
Àvñ
 = 
	`À32_to_˝u
(pdu->level);

1125 
pdu
->
buf_Àn
 = 
	`À32_to_˝u
(pdu->buf_len);

1126 
pdu
->
log_£c
 = 
	`À64_to_˝u
(pdu->log_sec);

1127 
pdu
->
log_u£c
 = 
	`À64_to_˝u
(pdu->log_usec);

1128 
	}
}

1130 
cmd_iﬁog_pdu
 *
	$c⁄vît_iﬁog_gz
(
fio_√t_cmd
 *
cmd
,

1131 
cmd_iﬁog_pdu
 *
pdu
)

1133 #ifde‡
CONFIG_ZLIB


1134 
cmd_iﬁog_pdu
 *
ªt
;

1135 
z_°ªam
 
°ªam
;

1136 
uöt32_t
 
ƒ_ßm∂es
;

1137 
size_t
 
tŸÆ
;

1138 *
p
;

1140 
°ªam
.
zÆloc
 = 
Z_NULL
;

1141 
°ªam
.
z‰ì
 = 
Z_NULL
;

1142 
°ªam
.
›aque
 = 
Z_NULL
;

1143 
°ªam
.
avaû_ö
 = 0;

1144 
°ªam
.
√xt_ö
 = 
Z_NULL
;

1146 i‡(
	`öÊ©eInô
(&
°ªam
Ë!
Z_OK
)

1147  
NULL
;

1152 
ƒ_ßm∂es
 = 
	`À32_to_˝u
(
pdu
->nr_samples);

1154 
tŸÆ
 = 
ƒ_ßm∂es
 * (
io_ßm∂e
);

1155 
ªt
 = 
	`mÆloc
(
tŸÆ
 + (*
pdu
));

1156 
ªt
->
ƒ_ßm∂es
 =Çr_samples;

1158 
	`mem˝y
(
ªt
, 
pdu
, (*pdu));

1160 
p
 = (*Ë
ªt
 + (*
pdu
);

1162 
°ªam
.
avaû_ö
 = 
cmd
->
pdu_Àn
 - (*
pdu
);

1163 
°ªam
.
√xt_ö
 = (*Ë
pdu
 + (*pdu);

1164 
°ªam
.
avaû_ö
) {

1165 
this_chunk
 = 65536;

1166 
this_Àn
;

1167 
îr
;

1169 i‡(
this_chunk
 > 
tŸÆ
)

1170 
this_chunk
 = 
tŸÆ
;

1172 
°ªam
.
avaû_out
 = 
this_chunk
;

1173 
°ªam
.
√xt_out
 = 
p
;

1174 
îr
 = 
	`öÊ©e
(&
°ªam
, 
Z_NO_FLUSH
);

1176 i‡(
îr
 < 0) {

1177 
	`log_îr
("fio: inÊ©êîr‹ %d\n", 
îr
);

1178 
	`‰ì
(
ªt
);

1179 
ªt
 = 
NULL
;

1180 
îr
;

1183 
this_Àn
 = 
this_chunk
 - 
°ªam
.
avaû_out
;

1184 
p
 +
this_Àn
;

1185 
tŸÆ
 -
this_Àn
;

1188 
îr
:

1189 
	`öÊ©eEnd
(&
°ªam
);

1190  
ªt
;

1192  
NULL
;

1194 
	}
}

1200 
cmd_iﬁog_pdu
 *
	$c⁄vît_iﬁog
(
fio_√t_cmd
 *
cmd
)

1202 
cmd_iﬁog_pdu
 *
pdu
 = (cmd_iﬁog_pdu *Ë
cmd
->
∑ylﬂd
;

1203 
cmd_iﬁog_pdu
 *
ªt
;

1204 
i
;

1210 i‡(
	`À32_to_˝u
(
pdu
->
com¥es£d
)) {

1211 #i‚de‡
CONFIG_ZLIB


1212 
	`log_îr
("fio: server sent compressed data by mistake\n");

1213  
NULL
;

1215 
ªt
 = 
	`c⁄vît_iﬁog_gz
(
cmd
, 
pdu
);

1216 i‡(!
ªt
) {

1217 
	`log_îr
("fio: failed decompressingÜog\n");

1218  
NULL
;

1221 
ªt
 = 
pdu
;

1223 
ªt
->
thªad_numbî
 = 
	`À32_to_˝u
(ret->thread_number);

1224 
ªt
->
ƒ_ßm∂es
 = 
	`À32_to_˝u
(ret->nr_samples);

1225 
ªt
->
log_ty≥
 = 
	`À32_to_˝u
(ret->log_type);

1226 
ªt
->
com¥es£d
 = 
	`À32_to_˝u
(ret->compressed);

1228 
i
 = 0; i < 
ªt
->
ƒ_ßm∂es
; i++) {

1229 
io_ßm∂e
 *
s
 = &
ªt
->
ßm∂es
[
i
];

1231 
s
->
time
 = 
	`À64_to_˝u
(s->time);

1232 
s
->
vÆ
 = 
	`À64_to_˝u
(s->val);

1233 
s
->
ddú
 = 
	`À32_to_˝u
(s->ddir);

1234 
s
->
bs
 = 
	`À32_to_˝u
(s->bs);

1237  
ªt
;

1238 
	}
}

1240 
	$fio_h™dÀ_˛õ¡
(
fio_˛õ¡
 *
˛õ¡
)

1242 
˛õ¡_›s
 *
›s
 = 
˛õ¡
->ops;

1243 
fio_√t_cmd
 *
cmd
;

1245 
	`d¥öt
(
FD_NET
, "˛õ¡: h™dÀ %s\n", 
˛õ¡
->
ho°«me
);

1247 
cmd
 = 
	`fio_√t_ªcv_cmd
(
˛õ¡
->
fd
);

1248 i‡(!
cmd
)

1251 
	`d¥öt
(
FD_NET
, "client: got cmd op %s from %s (pdu=%u)\n",

1252 
	`fio_£rvî_›
(
cmd
->
›code
), 
˛õ¡
->
ho°«me
, cmd->
pdu_Àn
);

1254 
cmd
->
›code
) {

1255 
FIO_NET_CMD_QUIT
:

1256 i‡(
›s
->
quô
)

1257 
›s
->
	`quô
(
˛õ¡
, 
cmd
);

1258 
	`ªmove_˛õ¡
(
˛õ¡
);

1259 
	`‰ì
(
cmd
);

1261 
FIO_NET_CMD_TEXT
:

1262 
	`c⁄vît_ãxt
(
cmd
);

1263 
›s
->
	`ãxt
(
˛õ¡
, 
cmd
);

1264 
	`‰ì
(
cmd
);

1266 
FIO_NET_CMD_DU
: {

1267 
cmd_du_pdu
 *
du
 = (cmd_du_pdu *Ë
cmd
->
∑ylﬂd
;

1269 
	`c⁄vît_dus
(&
du
->
dus
);

1270 
	`c⁄vît_agg
(&
du
->
agg
);

1272 
›s
->
	`disk_utû
(
˛õ¡
, 
cmd
);

1273 
	`‰ì
(
cmd
);

1276 
FIO_NET_CMD_TS
: {

1277 
cmd_ts_pdu
 *
p
 = (cmd_ts_pdu *Ë
cmd
->
∑ylﬂd
;

1279 
	`c⁄vît_ts
(&
p
->
ts
, &p->ts);

1280 
	`c⁄vît_gs
(&
p
->
rs
, &p->rs);

1282 
›s
->
	`thªad_°©us
(
˛õ¡
, 
cmd
);

1283 
	`‰ì
(
cmd
);

1286 
FIO_NET_CMD_GS
: {

1287 
group_run_°©s
 *
gs
 = (group_run_°©†*Ë
cmd
->
∑ylﬂd
;

1289 
	`c⁄vît_gs
(
gs
, gs);

1291 
›s
->
	`group_°©s
(
˛õ¡
, 
cmd
);

1292 
	`‰ì
(
cmd
);

1295 
FIO_NET_CMD_ETA
: {

1296 
jobs_ëa
 *
je
 = (jobs_ë®*Ë
cmd
->
∑ylﬂd
;

1298 
	`ªmove_ª∂y_cmd
(
˛õ¡
, 
cmd
);

1299 
	`c⁄vît_jobs_ëa
(
je
);

1300 
	`h™dÀ_ëa
(
˛õ¡
, 
cmd
);

1301 
	`‰ì
(
cmd
);

1304 
FIO_NET_CMD_PROBE
:

1305 
	`ªmove_ª∂y_cmd
(
˛õ¡
, 
cmd
);

1306 
›s
->
	`¥obe
(
˛õ¡
, 
cmd
);

1307 
	`‰ì
(
cmd
);

1309 
FIO_NET_CMD_SERVER_START
:

1310 
˛õ¡
->
°©e
 = 
Clõ¡_ru¬ög
;

1311 i‡(
›s
->
job_°¨t
)

1312 
›s
->
	`job_°¨t
(
˛õ¡
, 
cmd
);

1313 
	`‰ì
(
cmd
);

1315 
FIO_NET_CMD_START
: {

1316 
cmd_°¨t_pdu
 *
pdu
 = (cmd_°¨t_pdu *Ë
cmd
->
∑ylﬂd
;

1318 
pdu
->
jobs
 = 
	`À32_to_˝u
(pdu->jobs);

1319 
›s
->
	`°¨t
(
˛õ¡
, 
cmd
);

1320 
	`‰ì
(
cmd
);

1323 
FIO_NET_CMD_STOP
: {

1324 
cmd_íd_pdu
 *
pdu
 = (cmd_íd_pdu *Ë
cmd
->
∑ylﬂd
;

1326 
	`c⁄vît_°›
(
cmd
);

1327 
˛õ¡
->
°©e
 = 
Clõ¡_°›≥d
;

1328 
˛õ¡
->
îr‹
 = 
	`À32_to_˝u
(
pdu
->error);

1329 
˛õ¡
->
sig«l
 = 
	`À32_to_˝u
(
pdu
->signal);

1330 
›s
->
	`°›
(
˛õ¡
, 
cmd
);

1331 
	`‰ì
(
cmd
);

1334 
FIO_NET_CMD_ADD_JOB
: {

1335 
cmd_add_job_pdu
 *
pdu
 = (cmd_add_job_pdu *Ë
cmd
->
∑ylﬂd
;

1337 
˛õ¡
->
thªad_numbî
 = 
	`À32_to_˝u
(
pdu
->thread_number);

1338 
˛õ¡
->
groupid
 = 
	`À32_to_˝u
(
pdu
->groupid);

1340 i‡(
›s
->
add_job
)

1341 
›s
->
	`add_job
(
˛õ¡
, 
cmd
);

1342 
	`‰ì
(
cmd
);

1345 
FIO_NET_CMD_IOLOG
:

1346 i‡(
›s
->
iﬁog
) {

1347 
cmd_iﬁog_pdu
 *
pdu
;

1349 
pdu
 = 
	`c⁄vît_iﬁog
(
cmd
);

1350 
›s
->
	`iﬁog
(
˛õ¡
, 
pdu
);

1352 
	`‰ì
(
cmd
);

1354 
FIO_NET_CMD_UPDATE_JOB
:

1355 
›s
->
	`upd©e_job
(
˛õ¡
, 
cmd
);

1356 
	`ªmove_ª∂y_cmd
(
˛õ¡
, 
cmd
);

1357 
	`‰ì
(
cmd
);

1360 
	`log_îr
("fio: unknow¿˛õ¡ op: %s\n", 
	`fio_£rvî_›
(
cmd
->
›code
));

1361 
	`‰ì
(
cmd
);

1366 
	}
}

1368 
	$ªque°_˛õ¡_ëas
(
˛õ¡_›s
 *
›s
)

1370 
fio_˛õ¡
 *
˛õ¡
;

1371 
Êi°_hód
 *
íåy
;

1372 
˛õ¡_ëa
 *
ëa
;

1373 
skù≥d
 = 0;

1375 
	`d¥öt
(
FD_NET
, "˛õ¡:Ñeque°Éè (%d)\n", 
ƒ_˛õ¡s
);

1377 
ëa
 = 
	`mÆloc
((*eta));

1378 
	`mem£t
(&
ëa
->eta, 0, (eta->eta));

1379 
ëa
->
≥ndög
 = 
ƒ_˛õ¡s
;

1381 
	`Êi°_f‹_óch
(
íåy
, &
˛õ¡_li°
) {

1382 
˛õ¡
 = 
	`Êi°_íåy
(
íåy
, 
fio_˛õ¡
, 
li°
);

1384 i‡(!
	`Êi°_em±y
(&
˛õ¡
->
ëa_li°
)) {

1385 
skù≥d
++;

1388 i‡(
˛õ¡
->
°©e
 !
Clõ¡_ru¬ög
)

1391 
	`as£π
(!
˛õ¡
->
ëa_ö_Êight
);

1392 
	`Êi°_add_èû
(&
˛õ¡
->
ëa_li°
, &eta_list);

1393 
˛õ¡
->
ëa_ö_Êight
 = 
ëa
;

1394 
	`fio_√t_£nd_sim∂e_cmd
(
˛õ¡
->
fd
, 
FIO_NET_CMD_SEND_ETA
,

1395 (
uöçå_t
Ë
ëa
, &
˛õ¡
->
cmd_li°
);

1398 
skù≥d
--)

1399 
	`fio_˛õ¡_dec_jobs_ëa
(
ëa
, 
›s
->eta);

1401 
	`d¥öt
(
FD_NET
, "˛õ¡:Ñeque°edÉèÅag %p\n", 
ëa
);

1402 
	}
}

1404 
	$˛õ¡_check_cmd_timeout
(
fio_˛õ¡
 *
˛õ¡
,

1405 
timevÆ
 *
now
)

1407 
fio_√t_cmd_ª∂y
 *
ª∂y
;

1408 
Êi°_hód
 *
íåy
, *
tmp
;

1409 
ªt
 = 0;

1411 
	`Êi°_f‹_óch_ß„
(
íåy
, 
tmp
, &
˛õ¡
->
cmd_li°
) {

1412 
ª∂y
 = 
	`Êi°_íåy
(
íåy
, 
fio_√t_cmd_ª∂y
, 
li°
);

1414 i‡(
	`mtime_sö˚
(&
ª∂y
->
tv
, 
now
Ë< 
FIO_NET_CLIENT_TIMEOUT
)

1417 
	`log_îr
("fio: clõ¡ %s,Åimeouà⁄ cmd %s\n", 
˛õ¡
->
ho°«me
,

1418 
	`fio_£rvî_›
(
ª∂y
->
›code
));

1419 
	`Êi°_dñ
(&
ª∂y
->
li°
);

1420 
	`‰ì
(
ª∂y
);

1421 
ªt
 = 1;

1424  
	`Êi°_em±y
(&
˛õ¡
->
cmd_li°
Ë&& 
ªt
;

1425 
	}
}

1427 
	$fio_check_˛õ¡s_timed_out
()

1429 
fio_˛õ¡
 *
˛õ¡
;

1430 
Êi°_hód
 *
íåy
, *
tmp
;

1431 
timevÆ
 
tv
;

1432 
ªt
 = 0;

1434 
	`fio_gëtime
(&
tv
, 
NULL
);

1436 
	`Êi°_f‹_óch_ß„
(
íåy
, 
tmp
, &
˛õ¡_li°
) {

1437 
˛õ¡
 = 
	`Êi°_íåy
(
íåy
, 
fio_˛õ¡
, 
li°
);

1439 i‡(
	`Êi°_em±y
(&
˛õ¡
->
cmd_li°
))

1442 i‡(!
	`˛õ¡_check_cmd_timeout
(
˛õ¡
, &
tv
))

1445 i‡(
˛õ¡
->
›s
->
timed_out
)

1446 
˛õ¡
->
›s
->
	`timed_out
(client);

1448 
	`log_îr
("fio: clõ¡ %†timed out\n", 
˛õ¡
->
ho°«me
);

1450 
	`ªmove_˛õ¡
(
˛õ¡
);

1451 
ªt
 = 1;

1454  
ªt
;

1455 
	}
}

1457 
	$fio_h™dÀ_˛õ¡s
(
˛õ¡_›s
 *
›s
)

1459 
pﬁlfd
 *
pfds
;

1460 
i
, 
ªt
 = 0, 
ªtvÆ
 = 0;

1462 
	`fio_gëtime
(&
ëa_tv
, 
NULL
);

1464 
pfds
 = 
	`mÆloc
(
ƒ_˛õ¡s
 * (
pﬁlfd
));

1466 
	`öô_thªad_°©
(&
˛õ¡_ts
);

1467 
	`öô_group_run_°©
(&
˛õ¡_gs
);

1469 !
exô_backíd
 && 
ƒ_˛õ¡s
) {

1470 
Êi°_hód
 *
íåy
, *
tmp
;

1471 
fio_˛õ¡
 *
˛õ¡
;

1473 
i
 = 0;

1474 
	`Êi°_f‹_óch_ß„
(
íåy
, 
tmp
, &
˛õ¡_li°
) {

1475 
˛õ¡
 = 
	`Êi°_íåy
(
íåy
, 
fio_˛õ¡
, 
li°
);

1477 i‡(!
˛õ¡
->
£¡_job
 && !˛õ¡->
›s
->
°ay_c⁄√˘ed
 &&

1478 
	`Êi°_em±y
(&
˛õ¡
->
cmd_li°
)) {

1479 
	`ªmove_˛õ¡
(
˛õ¡
);

1483 
pfds
[
i
].
fd
 = 
˛õ¡
->fd;

1484 
pfds
[
i
].
evíts
 = 
POLLIN
;

1485 
i
++;

1488 i‡(!
ƒ_˛õ¡s
)

1491 
	`as£π
(
i
 =
ƒ_˛õ¡s
);

1494 
timevÆ
 
tv
;

1496 
	`fio_gëtime
(&
tv
, 
NULL
);

1497 i‡(
	`mtime_sö˚
(&
ëa_tv
, &
tv
) >= 900) {

1498 
	`ªque°_˛õ¡_ëas
(
›s
);

1499 
	`mem˝y
(&
ëa_tv
, &
tv
, (tv));

1501 i‡(
	`fio_check_˛õ¡s_timed_out
())

1505 
ªt
 = 
	`pﬁl
(
pfds
, 
ƒ_˛õ¡s
, 
›s
->
ëa_m£c
);

1506 i‡(
ªt
 < 0) {

1507 i‡(
î∫o
 =
EINTR
)

1509 
	`log_îr
("fio:Öﬁ»˛õ¡s: %s\n", 
	`°ªº‹
(
î∫o
));

1511 } i‡(!
ªt
)

1513 } 
ªt
 <= 0);

1515 
i
 = 0; i < 
ƒ_˛õ¡s
; i++) {

1516 i‡(!(
pfds
[
i
].
ªvíts
 & 
POLLIN
))

1519 
˛õ¡
 = 
	`föd_˛õ¡_by_fd
(
pfds
[
i
].
fd
);

1520 i‡(!
˛õ¡
) {

1521 
	`log_îr
("fio: unknow¿˛õ¡ fd %ld\n", (Ë
pfds
[
i
].
fd
);

1524 i‡(!
	`fio_h™dÀ_˛õ¡
(
˛õ¡
)) {

1525 
	`log_öfo
("client: host=%s disconnected\n",

1526 
˛õ¡
->
ho°«me
);

1527 
	`ªmove_˛õ¡
(
˛õ¡
);

1528 
ªtvÆ
 = 1;

1529 } i‡(
˛õ¡
->
îr‹
)

1530 
ªtvÆ
 = 1;

1531 
	`fio_put_˛õ¡
(
˛õ¡
);

1535 
	`fio_˛õ¡_js⁄_föi
();

1537 
	`‰ì
(
pfds
);

1538  
ªtvÆ
;

1539 
	}
}

	@/home/terekhov/tmp/fio/fio/client.h

1 #i‚de‡
CLIENT_H


2 
	#CLIENT_H


	)

4 
	~<sys/sockë.h
>

5 
	~<sys/un.h
>

6 
	~<√töë/ö.h
>

7 
	~<¨∑/öë.h
>

9 
	~"°©.h
"

11 
	gfio_√t_cmd
;

12 
	g˛õ¡_›s
;

15 
	mClõ¡_¸óãd
 = 0,

16 
	mClõ¡_c⁄√˘ed
 = 1,

17 
	mClõ¡_°¨ãd
 = 2,

18 
	mClõ¡_ru¬ög
 = 3,

19 
	mClõ¡_°›≥d
 = 4,

20 
	mClõ¡_exôed
 = 5,

23 
	sfio_˛õ¡
 {

24 
Êi°_hód
 
	mli°
;

25 
Êi°_hód
 
	mhash_li°
;

26 
Êi°_hód
 
	m¨g_li°
;

28 
sockaddr_ö
 
	maddr
;

29 
sockaddr_ö6
 
	maddr6
;

30 
sockaddr_un
 
	maddr_un
;

32 *
	mho°«me
;

33 
	mp‹t
;

34 
	mfd
;

35 
	mªfs
;

37 *
	m«me
;

39 
	m°©e
;

41 
	mskù_√wlöe
;

42 
	mis_sock
;

43 
	mdisk_°©s_shown
;

44 
	mjobs
;

45 
	mƒ_°©
;

46 
	mîr‹
;

47 
	msig«l
;

48 
	mùv6
;

49 
	m£¡_job
;

50 
	mdid_°©
;

51 
uöt32_t
 
	mty≥
;

53 
uöt32_t
 
	mthªad_numbî
;

54 
uöt32_t
 
	mgroupid
;

56 
Êi°_hód
 
	mëa_li°
;

57 
˛õ¡_ëa
 *
	mëa_ö_Êight
;

59 
Êi°_hód
 
	mcmd_li°
;

61 
uöt16_t
 
	m¨gc
;

62 **
	m¨gv
;

64 
˛õ¡_›s
 *
	m›s
;

65 *
	m˛õ¡_d©a
;

67 **
	möi_fûe
;

68 
	mƒ_öi_fûe
;

71 
	gcmd_iﬁog_pdu
;

72 (
	t˛õ¡_cmd_›
)(
	tfio_˛õ¡
 *, 
	tfio_√t_cmd
 *);

73 (
	t˛õ¡_ëa_›
)(
	tjobs_ëa
 *
	tje
);

74 (
	t˛õ¡_timed_out_›
)(
	tfio_˛õ¡
 *);

75 (
	t˛õ¡_jobs_ëa_›
)(
	tfio_˛õ¡
 *
	t˛õ¡
, 
	tjobs_ëa
 *
	tje
);

76 (
	t˛õ¡_iﬁog_›
)(
	tfio_˛õ¡
 *
	t˛õ¡
, 
	tcmd_iﬁog_pdu
 *);

78 
	s˛õ¡_›s
 {

79 
˛õ¡_cmd_›
 *
ãxt
;

80 
˛õ¡_cmd_›
 *
disk_utû
;

81 
˛õ¡_cmd_›
 *
thªad_°©us
;

82 
˛õ¡_cmd_›
 *
group_°©s
;

83 
˛õ¡_jobs_ëa_›
 *
jobs_ëa
;

84 
˛õ¡_ëa_›
 *
ëa
;

85 
˛õ¡_cmd_›
 *
¥obe
;

86 
˛õ¡_cmd_›
 *
quô
;

87 
˛õ¡_cmd_›
 *
add_job
;

88 
˛õ¡_cmd_›
 *
upd©e_job
;

89 
˛õ¡_timed_out_›
 *
timed_out
;

90 
˛õ¡_cmd_›
 *
°›
;

91 
˛õ¡_cmd_›
 *
°¨t
;

92 
˛õ¡_cmd_›
 *
job_°¨t
;

93 
˛õ¡_iﬁog_›
 *
iﬁog
;

94 
˛õ¡_timed_out_›
 *
ªmoved
;

96 
ëa_m£c
;

97 
°ay_c⁄√˘ed
;

98 
uöt32_t
 
˛õ¡_ty≥
;

101 
˛õ¡_›s
 
fio_˛õ¡_›s
;

103 
	s˛õ¡_ëa
 {

104 
≥ndög
;

105 
jobs_ëa
 
ëa
;

108 
	`fio_h™dÀ_˛õ¡
(
fio_˛õ¡
 *);

109 
	`fio_˛õ¡_dec_jobs_ëa
(
˛õ¡_ëa
 *
ëa
, 
˛õ¡_ëa_›
 
‚
);

110 
	`fio_˛õ¡_sum_jobs_ëa
(
jobs_ëa
 *
d°
, jobs_ë®*
je
);

113 
Fio_˛õ¡_ùv4
 = 1,

114 
Fio_˛õ¡_ùv6
,

115 
Fio_˛õ¡_sockë
,

118 
	`fio_˛õ¡_c⁄√˘
(
fio_˛õ¡
 *);

119 
	`fio_˛õ¡s_c⁄√˘
();

120 
	`fio_°¨t_˛õ¡
(
fio_˛õ¡
 *);

121 
	`fio_°¨t_Æl_˛õ¡s
();

122 
	`fio_˛õ¡_£nd_öi
(
fio_˛õ¡
 *, const *);

123 
	`fio_˛õ¡s_£nd_öi
(const *);

124 
	`fio_h™dÀ_˛õ¡s
(
˛õ¡_›s
 *);

125 
	`fio_˛õ¡_add
(
˛õ¡_›s
 *, const *, **);

126 
fio_˛õ¡
 *
	`fio_˛õ¡_add_ex∂icô
(
˛õ¡_›s
 *, const *, , );

127 
	`fio_˛õ¡_add_cmd_›ti⁄
(*, const *);

128 
	`fio_˛õ¡_add_öi_fûe
(*, const *);

129 
	`fio_˛õ¡_ãrmö©e
(
fio_˛õ¡
 *);

130 
	`fio_˛õ¡s_ãrmö©e
();

131 
fio_˛õ¡
 *
	`fio_gë_˛õ¡
(fio_client *);

132 
	`fio_put_˛õ¡
(
fio_˛õ¡
 *);

133 
	`fio_˛õ¡_upd©e_›ti⁄s
(
fio_˛õ¡
 *, 
thªad_›ti⁄s
 *, 
uöt64_t
 *);

134 
	`fio_˛õ¡_waô_f‹_ª∂y
(
fio_˛õ¡
 *, 
uöt64_t
);

136 
	#FIO_CLIENT_DEF_ETA_MSEC
 900

	)

139 
FIO_CLIENT_TYPE_CLI
 = 1,

140 
FIO_CLIENT_TYPE_GUI
 = 2,

	@/home/terekhov/tmp/fio/fio/compiler/compiler-gcc3.h

1 #i‚de‡
FIO_COMPILER_GCC3_H


2 
	#FIO_COMPILER_GCC3_H


	)

4 #i‡
__GNUC_MINOR__
 >= 4

5 #i‚de‡
__mu°_check


6 
	#__mu°_check
 
	`__©åibuã__
((
w¨n_unu£d_ªsu…
))

	)

	@/home/terekhov/tmp/fio/fio/compiler/compiler-gcc4.h

1 #i‚de‡
FIO_COMPILER_GCC4_H


2 
	#FIO_COMPILER_GCC4_H


	)

4 #i‚de‡
__mu°_check


5 
	#__mu°_check
 
	`__©åibuã__
((
w¨n_unu£d_ªsu…
))

	)

	@/home/terekhov/tmp/fio/fio/compiler/compiler.h

1 #i‚de‡
FIO_COMPILER_H


2 
	#FIO_COMPILER_H


	)

4 #i‡
__GNUC__
 >= 4

5 
	~"compûî-gcc4.h
"

6 #ñi‡
__GNUC__
 == 3

7 
	~"compûî-gcc3.h
"

9 #îr‹ 
Compûî
 
too
 
ﬁd
, 
√ed
 
gcc
 
©
 
Àa°
 gcc 3.x

12 #i‚de‡
__mu°_check


13 
	#__mu°_check


	)

19 
	#fio_unu£d
 
	`__©åibuã__
((
__unu£d__
))

	)

20 
	#fio_öô
 
	`__©åibuã__
((
c⁄°ru˘‹
))

	)

21 
	#fio_exô
 
	`__©åibuã__
((
de°ru˘‹
))

	)

23 
	#fio_u∆ikñy
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 0)

	)

	@/home/terekhov/tmp/fio/fio/crc/crc16.c

8 
	~"¸c16.h
"

11 c⁄° 
	g¸c16_èbÀ
[256] = {

46 
	$fio_¸c16
(c⁄° *
buf„r
, 
Àn
)

48 c⁄° *
˝
 = (c⁄° *Ë
buf„r
;

49 
¸c
 = 0;

51 
Àn
--)

52 
¸c
 = 
	`¸c16_byã
(¸c, *
˝
++);

53  
¸c
;

54 
	}
}

	@/home/terekhov/tmp/fio/fio/crc/crc16.h

15 #i‚de‡
__CRC16_H


16 
	#__CRC16_H


	)

18 c⁄° 
¸c16_èbÀ
[256];

20 
fio_¸c16
(c⁄° *
buf„r
, 
Àn
);

22 
ölöe
 
	$¸c16_byã
(
¸c
,

23 c⁄° 
d©a
)

25  (
¸c
 >> 8Ë^ 
¸c16_èbÀ
[(¸¯^ 
d©a
) & 0xff];

26 
	}
}

	@/home/terekhov/tmp/fio/fio/crc/crc32.c

18 
	~<öây≥s.h
>

19 
	~"¸c32.h
"

21 c⁄° 
uöt32_t
 
	g¸˘ab
[256] = {

76 
uöt32_t
 
	$fio_¸c32
(c⁄° *
buf„r
, 
Àngth
)

78 c⁄° *
˝
 = (c⁄° *Ë
buf„r
;

79 
uöt32_t
 
¸c
 = 0;

81 
Àngth
--)

82 
¸c
 = (¸¯<< 8Ë^ 
¸˘ab
[((¸¯>> 24Ë^ *(
˝
++)) & 0xFF];

84  
¸c
;

85 
	}
}

	@/home/terekhov/tmp/fio/fio/crc/crc32.h

18 #i‚de‡
CRC32_H


19 
	#CRC32_H


	)

21 
uöt32_t
 
fio_¸c32
(const * const, );

	@/home/terekhov/tmp/fio/fio/crc/crc32c-intel.c

1 
	~<öây≥s.h
>

2 
	~<°rög.h
>

3 
	~<uni°d.h
>

4 
	~<°dlib.h
>

5 
	~<sig«l.h
>

6 
	~<sys/ty≥s.h
>

7 
	~<sys/waô.h
>

8 
	~"¸c32c.h
"

21 
	g¸c32c_öãl_avaûabÀ
 = 0;

23 #ifde‡
ARCH_HAVE_SSE4_2


25 #i‡
BITS_PER_LONG
 == 64

26 
	#REX_PRE
 "0x48, "

	)

27 
	#SCALE_F
 8

	)

29 
	#REX_PRE


	)

30 
	#SCALE_F
 4

	)

33 
	g¸c32c_¥obed
;

35 
uöt32_t
 
	$¸c32c_öãl_À_hw_byã
(
uöt32_t
 
¸c
, c⁄° *
d©a
,

36 
Àngth
)

38 
Àngth
--) {

39 
__asm__
 
	`__vﬁ©ûe__
(

41 :"=S"(
¸c
)

42 :"0"(
¸c
), "c"(*
d©a
)

44 
d©a
++;

47  
¸c
;

48 
	}
}

54 
uöt32_t
 
	$¸c32c_öãl
(c⁄° *
d©a
, 
Àngth
)

56 
iquŸõ¡
 = 
Àngth
 / 
SCALE_F
;

57 
úemaödî
 = 
Àngth
 % 
SCALE_F
;

58 #i‡
BITS_PER_LONG
 == 64

59 
uöt64_t
 *
±mp
 = (uöt64_à*Ë
d©a
;

61 
uöt32_t
 *
±mp
 = (uöt32_à*Ë
d©a
;

63 
uöt32_t
 
¸c
 = ~0;

65 
iquŸõ¡
--) {

66 
__asm__
 
	`__vﬁ©ûe__
(

67 ".byã 0xf2, " 
REX_PRE
 "0xf, 0x38, 0xf1, 0xf1;"

68 :"=S"(
¸c
)

69 :"0"(
¸c
), "c"(*
±mp
)

71 
±mp
++;

74 i‡(
úemaödî
)

75 
¸c
 = 
	`¸c32c_öãl_À_hw_byã
(¸c, (*)
±mp
,

76 
úemaödî
);

78  
¸c
;

79 
	}
}

81 
	$¸c32c_öãl_¥obe
()

83 i‡(!
¸c32c_¥obed
) {

84 
óx
, 
ebx
, 
ecx
 = 0, 
edx
;

86 
óx
 = 1;

88 
	`do_˝uid
(&
óx
, &
ebx
, &
ecx
, &
edx
);

89 
¸c32c_öãl_avaûabÀ
 = (
ecx
 & (1 << 20)) != 0;

90 
¸c32c_¥obed
 = 1;

92 
	}
}

	@/home/terekhov/tmp/fio/fio/crc/crc32c.c

33 
	~<öây≥s.h
>

35 
	~"¸c32c.h
"

46 c⁄° 
uöt32_t
 
	g¸c32c_èbÀ
[256] = {

118 
uöt32_t
 
	$¸c32c_sw
(c⁄° *
d©a
, 
Àngth
)

120 
uöt32_t
 
¸c
 = ~0;

122 
Àngth
--)

123 
¸c
 = 
¸c32c_èbÀ
[(¸¯^ *
d©a
++) & 0xFFL] ^ (crc >> 8);

125  
¸c
;

126 
	}
}

	@/home/terekhov/tmp/fio/fio/crc/crc32c.h

18 #i‚de‡
CRC32C_H


19 
	#CRC32C_H


	)

21 
	~"../¨ch/¨ch.h
"

23 
uöt32_t
 
¸c32c_sw
(const *, );

24 
¸c32c_öãl_avaûabÀ
;

26 #ifde‡
ARCH_HAVE_SSE4_2


27 
uöt32_t
 
¸c32c_öãl
(const *, );

28 
¸c32c_öãl_¥obe
();

30 
	#¸c32c_öãl
 
¸c32c_sw


	)

31 
ölöe
 
	$¸c32c_öãl_¥obe
()

33 
	}
}

36 
ölöe
 
uöt32_t
 
	$fio_¸c32c
(c⁄° *
buf
, 
Àn
)

38 i‡(
¸c32c_öãl_avaûabÀ
)

39  
	`¸c32c_öãl
(
buf
, 
Àn
);

41  
	`¸c32c_sw
(
buf
, 
Àn
);

42 
	}
}

	@/home/terekhov/tmp/fio/fio/crc/crc64.c

1 
	~"¸c64.h
"

6 c⁄° 
	g¸˘ab64
[256] = {

95 
	$fio_¸c64
(c⁄° *
buf„r
, 
Àngth
)

97 
¸c
 = 0;

99 
Àngth
--)

100 
¸c
 = 
¸˘ab64
[(¸¯^ *(
buf„r
++)) & 0xff] ^ (crc >> 8);

102  
¸c
;

103 
	}
}

	@/home/terekhov/tmp/fio/fio/crc/crc64.h

1 #i‚de‡
CRC64_H


2 
	#CRC64_H


	)

4 
fio_¸c64
(const *, );

	@/home/terekhov/tmp/fio/fio/crc/crc7.c

8 
	~"¸c7.h
"

11 c⁄° 
	g¸c7_syndrome_èbÀ
[256] = {

46 
	$fio_¸c7
(c⁄° *
buf„r
, 
Àn
)

48 
¸c
 = 0;

50 
Àn
--)

51 
¸c
 = 
	`¸c7_byã
(¸c, *
buf„r
++);

52  
¸c
;

53 
	}
}

	@/home/terekhov/tmp/fio/fio/crc/crc7.h

1 #i‚de‡
CRC7_H


2 
	#CRC7_H


	)

4 c⁄° 
¸c7_syndrome_èbÀ
[256];

6 
ölöe
 
	$¸c7_byã
(
¸c
, 
d©a
)

8  
¸c7_syndrome_èbÀ
[(
¸c
 << 1Ë^ 
d©a
];

9 
	}
}

11 
fio_¸c7
(c⁄° *
buf„r
, 
Àn
);

	@/home/terekhov/tmp/fio/fio/crc/md5.c

4 
	~<°rög.h
>

5 
	~<°döt.h
>

6 
	~"md5.h
"

8 
	$md5_å™sf‹m
(
uöt32_t
 *
hash
, uöt32_àc⁄° *
ö
)

10 
uöt32_t
 
a
, 
b
, 
c
, 
d
;

12 
a
 = 
hash
[0];

13 
b
 = 
hash
[1];

14 
c
 = 
hash
[2];

15 
d
 = 
hash
[3];

17 
	`MD5STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
ö
[0] + 0xd76aa478, 7);

18 
	`MD5STEP
(
F1
, 
d
, 
a
, 
b
, 
c
, 
ö
[1] + 0xe8c7b756, 12);

19 
	`MD5STEP
(
F1
, 
c
, 
d
, 
a
, 
b
, 
ö
[2] + 0x242070db, 17);

20 
	`MD5STEP
(
F1
, 
b
, 
c
, 
d
, 
a
, 
ö
[3] + 0xc1bdceee, 22);

21 
	`MD5STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
ö
[4] + 0xf57c0faf, 7);

22 
	`MD5STEP
(
F1
, 
d
, 
a
, 
b
, 
c
, 
ö
[5] + 0x4787c62a, 12);

23 
	`MD5STEP
(
F1
, 
c
, 
d
, 
a
, 
b
, 
ö
[6] + 0xa8304613, 17);

24 
	`MD5STEP
(
F1
, 
b
, 
c
, 
d
, 
a
, 
ö
[7] + 0xfd469501, 22);

25 
	`MD5STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
ö
[8] + 0x698098d8, 7);

26 
	`MD5STEP
(
F1
, 
d
, 
a
, 
b
, 
c
, 
ö
[9] + 0x8b44f7af, 12);

27 
	`MD5STEP
(
F1
, 
c
, 
d
, 
a
, 
b
, 
ö
[10] + 0xffff5bb1, 17);

28 
	`MD5STEP
(
F1
, 
b
, 
c
, 
d
, 
a
, 
ö
[11] + 0x895cd7be, 22);

29 
	`MD5STEP
(
F1
, 
a
, 
b
, 
c
, 
d
, 
ö
[12] + 0x6b901122, 7);

30 
	`MD5STEP
(
F1
, 
d
, 
a
, 
b
, 
c
, 
ö
[13] + 0xfd987193, 12);

31 
	`MD5STEP
(
F1
, 
c
, 
d
, 
a
, 
b
, 
ö
[14] + 0xa679438e, 17);

32 
	`MD5STEP
(
F1
, 
b
, 
c
, 
d
, 
a
, 
ö
[15] + 0x49b40821, 22);

34 
	`MD5STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
ö
[1] + 0xf61e2562, 5);

35 
	`MD5STEP
(
F2
, 
d
, 
a
, 
b
, 
c
, 
ö
[6] + 0xc040b340, 9);

36 
	`MD5STEP
(
F2
, 
c
, 
d
, 
a
, 
b
, 
ö
[11] + 0x265e5a51, 14);

37 
	`MD5STEP
(
F2
, 
b
, 
c
, 
d
, 
a
, 
ö
[0] + 0xe9b6c7aa, 20);

38 
	`MD5STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
ö
[5] + 0xd62f105d, 5);

39 
	`MD5STEP
(
F2
, 
d
, 
a
, 
b
, 
c
, 
ö
[10] + 0x02441453, 9);

40 
	`MD5STEP
(
F2
, 
c
, 
d
, 
a
, 
b
, 
ö
[15] + 0xd8a1e681, 14);

41 
	`MD5STEP
(
F2
, 
b
, 
c
, 
d
, 
a
, 
ö
[4] + 0xe7d3fbc8, 20);

42 
	`MD5STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
ö
[9] + 0x21e1cde6, 5);

43 
	`MD5STEP
(
F2
, 
d
, 
a
, 
b
, 
c
, 
ö
[14] + 0xc33707d6, 9);

44 
	`MD5STEP
(
F2
, 
c
, 
d
, 
a
, 
b
, 
ö
[3] + 0xf4d50d87, 14);

45 
	`MD5STEP
(
F2
, 
b
, 
c
, 
d
, 
a
, 
ö
[8] + 0x455a14ed, 20);

46 
	`MD5STEP
(
F2
, 
a
, 
b
, 
c
, 
d
, 
ö
[13] + 0xa9e3e905, 5);

47 
	`MD5STEP
(
F2
, 
d
, 
a
, 
b
, 
c
, 
ö
[2] + 0xfcefa3f8, 9);

48 
	`MD5STEP
(
F2
, 
c
, 
d
, 
a
, 
b
, 
ö
[7] + 0x676f02d9, 14);

49 
	`MD5STEP
(
F2
, 
b
, 
c
, 
d
, 
a
, 
ö
[12] + 0x8d2a4c8a, 20);

51 
	`MD5STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
ö
[5] + 0xfffa3942, 4);

52 
	`MD5STEP
(
F3
, 
d
, 
a
, 
b
, 
c
, 
ö
[8] + 0x8771f681, 11);

53 
	`MD5STEP
(
F3
, 
c
, 
d
, 
a
, 
b
, 
ö
[11] + 0x6d9d6122, 16);

54 
	`MD5STEP
(
F3
, 
b
, 
c
, 
d
, 
a
, 
ö
[14] + 0xfde5380c, 23);

55 
	`MD5STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
ö
[1] + 0xa4beea44, 4);

56 
	`MD5STEP
(
F3
, 
d
, 
a
, 
b
, 
c
, 
ö
[4] + 0x4bdecfa9, 11);

57 
	`MD5STEP
(
F3
, 
c
, 
d
, 
a
, 
b
, 
ö
[7] + 0xf6bb4b60, 16);

58 
	`MD5STEP
(
F3
, 
b
, 
c
, 
d
, 
a
, 
ö
[10] + 0xbebfbc70, 23);

59 
	`MD5STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
ö
[13] + 0x289b7ec6, 4);

60 
	`MD5STEP
(
F3
, 
d
, 
a
, 
b
, 
c
, 
ö
[0] + 0xeaa127fa, 11);

61 
	`MD5STEP
(
F3
, 
c
, 
d
, 
a
, 
b
, 
ö
[3] + 0xd4ef3085, 16);

62 
	`MD5STEP
(
F3
, 
b
, 
c
, 
d
, 
a
, 
ö
[6] + 0x04881d05, 23);

63 
	`MD5STEP
(
F3
, 
a
, 
b
, 
c
, 
d
, 
ö
[9] + 0xd9d4d039, 4);

64 
	`MD5STEP
(
F3
, 
d
, 
a
, 
b
, 
c
, 
ö
[12] + 0xe6db99e5, 11);

65 
	`MD5STEP
(
F3
, 
c
, 
d
, 
a
, 
b
, 
ö
[15] + 0x1fa27cf8, 16);

66 
	`MD5STEP
(
F3
, 
b
, 
c
, 
d
, 
a
, 
ö
[2] + 0xc4ac5665, 23);

68 
	`MD5STEP
(
F4
, 
a
, 
b
, 
c
, 
d
, 
ö
[0] + 0xf4292244, 6);

69 
	`MD5STEP
(
F4
, 
d
, 
a
, 
b
, 
c
, 
ö
[7] + 0x432aff97, 10);

70 
	`MD5STEP
(
F4
, 
c
, 
d
, 
a
, 
b
, 
ö
[14] + 0xab9423a7, 15);

71 
	`MD5STEP
(
F4
, 
b
, 
c
, 
d
, 
a
, 
ö
[5] + 0xfc93a039, 21);

72 
	`MD5STEP
(
F4
, 
a
, 
b
, 
c
, 
d
, 
ö
[12] + 0x655b59c3, 6);

73 
	`MD5STEP
(
F4
, 
d
, 
a
, 
b
, 
c
, 
ö
[3] + 0x8f0ccc92, 10);

74 
	`MD5STEP
(
F4
, 
c
, 
d
, 
a
, 
b
, 
ö
[10] + 0xffeff47d, 15);

75 
	`MD5STEP
(
F4
, 
b
, 
c
, 
d
, 
a
, 
ö
[1] + 0x85845dd1, 21);

76 
	`MD5STEP
(
F4
, 
a
, 
b
, 
c
, 
d
, 
ö
[8] + 0x6fa87e4f, 6);

77 
	`MD5STEP
(
F4
, 
d
, 
a
, 
b
, 
c
, 
ö
[15] + 0xfe2ce6e0, 10);

78 
	`MD5STEP
(
F4
, 
c
, 
d
, 
a
, 
b
, 
ö
[6] + 0xa3014314, 15);

79 
	`MD5STEP
(
F4
, 
b
, 
c
, 
d
, 
a
, 
ö
[13] + 0x4e0811a1, 21);

80 
	`MD5STEP
(
F4
, 
a
, 
b
, 
c
, 
d
, 
ö
[4] + 0xf7537e82, 6);

81 
	`MD5STEP
(
F4
, 
d
, 
a
, 
b
, 
c
, 
ö
[11] + 0xbd3af235, 10);

82 
	`MD5STEP
(
F4
, 
c
, 
d
, 
a
, 
b
, 
ö
[2] + 0x2ad7d2bb, 15);

83 
	`MD5STEP
(
F4
, 
b
, 
c
, 
d
, 
a
, 
ö
[9] + 0xeb86d391, 21);

85 
hash
[0] +
a
;

86 
hash
[1] +
b
;

87 
hash
[2] +
c
;

88 
hash
[3] +
d
;

89 
	}
}

91 
	$fio_md5_öô
(
fio_md5_˘x
 *
m˘x
)

93 
m˘x
->
hash
[0] = 0x67452301;

94 
m˘x
->
hash
[1] = 0xefcdab89;

95 
m˘x
->
hash
[2] = 0x98badcfe;

96 
m˘x
->
hash
[3] = 0x10325476;

97 
	}
}

99 
	$fio_md5_upd©e
(
fio_md5_˘x
 *
m˘x
, c⁄° 
uöt8_t
 *
d©a
,

100 
Àn
)

102 c⁄° 
uöt32_t
 
avaû
 = (
m˘x
->
block
Ë- (m˘x->
byã_cou¡
 & 0x3f);

104 
m˘x
->
byã_cou¡
 +
Àn
;

106 i‡(
avaû
 > 
Àn
) {

107 
	`mem˝y
((*)
m˘x
->
block
 + ((m˘x->blockË- 
avaû
),

108 
d©a
, 
Àn
);

112 
	`mem˝y
((*)
m˘x
->
block
 + ((m˘x->blockË- 
avaû
),

113 
d©a
, 
avaû
);

115 
	`md5_å™sf‹m
(
m˘x
->
hash
, m˘x->
block
);

116 
d©a
 +
avaû
;

117 
Àn
 -
avaû
;

119 
Àn
 >(
m˘x
->
block
)) {

120 
	`mem˝y
(
m˘x
->
block
, 
d©a
, (mctx->block));

121 
	`md5_å™sf‹m
(
m˘x
->
hash
, m˘x->
block
);

122 
d©a
 +(
m˘x
->
block
);

123 
Àn
 -(
m˘x
->
block
);

126 
	`mem˝y
(
m˘x
->
block
, 
d©a
, 
Àn
);

127 
	}
}

	@/home/terekhov/tmp/fio/fio/crc/md5.h

1 #i‚de‡
MD5_H


2 
	#MD5_H


	)

4 
	~<°döt.h
>

6 
	#MD5_DIGEST_SIZE
 16

	)

7 
	#MD5_HMAC_BLOCK_SIZE
 64

	)

8 
	#MD5_BLOCK_WORDS
 16

	)

9 
	#MD5_HASH_WORDS
 4

	)

11 
	#F1
(
x
, 
y
, 
z
Ë(z ^ (x & (y ^ z)))

	)

12 
	#F2
(
x
, 
y
, 
z
Ë
	`F1
(z, x, y)

	)

13 
	#F3
(
x
, 
y
, 
z
Ë(x ^ y ^ z)

	)

14 
	#F4
(
x
, 
y
, 
z
Ë(y ^ (x | ~z))

	)

16 
	#MD5STEP
(
f
, 
w
, 
x
, 
y
, 
z
, 
ö
, 
s
) \

17 (
w
 +
	`f
(
x
, 
y
, 
z
Ë+ 
ö
, w = (w<<
s
 | w>>(32-s)Ë+ x)

	)

19 
	sfio_md5_˘x
 {

20 
uöt32_t
 *
	mhash
;

21 
uöt32_t
 
	mblock
[
MD5_BLOCK_WORDS
];

22 
uöt64_t
 
	mbyã_cou¡
;

25 
fio_md5_upd©e
(
fio_md5_˘x
 *, c⁄° 
uöt8_t
 *, );

26 
fio_md5_öô
(
fio_md5_˘x
 *);

	@/home/terekhov/tmp/fio/fio/crc/sha1.c

7 
	~<°rög.h
>

8 
	~<¨∑/öë.h
>

10 
	~"sha1.h
"

13 
blk_SHA1Block
(
fio_sha1_˘x
 *
˘x
, c⁄° *
d©a
);

15 
	$fio_sha1_öô
(
fio_sha1_˘x
 *
˘x
)

17 
˘x
->
size
 = 0;

21 
˘x
->
H
[0] = 0x67452301;

22 
˘x
->
H
[1] = 0xefcdab89;

23 
˘x
->
H
[2] = 0x98badcfe;

24 
˘x
->
H
[3] = 0x10325476;

25 
˘x
->
H
[4] = 0xc3d2e1f0;

26 
	}
}

28 
	$fio_sha1_upd©e
(
fio_sha1_˘x
 *
˘x
, c⁄° *
d©a
,

29 
Àn
)

31 
ÀnW
 = 
˘x
->
size
 & 63;

33 
˘x
->
size
 +
Àn
;

37 i‡(
ÀnW
) {

38 
À·
 = 64 - 
ÀnW
;

39 i‡(
Àn
 < 
À·
)

40 
À·
 = 
Àn
;

41 
	`mem˝y
(
ÀnW
 + (*)
˘x
->
W
, 
d©a
, 
À·
);

42 
ÀnW
 = (ÀnW + 
À·
) & 63;

43 
Àn
 -
À·
;

44 
d©a
 +
À·
;

45 i‡(
ÀnW
)

47 
	`blk_SHA1Block
(
˘x
, ctx->
W
);

49 
Àn
 >= 64) {

50 
	`blk_SHA1Block
(
˘x
, 
d©a
);

51 
d©a
 += 64;

52 
Àn
 -= 64;

54 i‡(
Àn
)

55 
	`mem˝y
(
˘x
->
W
, 
d©a
, 
Àn
);

56 
	}
}

58 
	$fio_sha1_föÆ
(
hashout
[20], 
fio_sha1_˘x
 *
˘x
)

60 c⁄° 
∑d
[64] = { 0x80 };

61 
∑dÀn
[2];

62 
i
;

66 
∑dÀn
[0] = 
	`ht⁄l
(
˘x
->
size
 >> 29);

67 
∑dÀn
[1] = 
	`ht⁄l
(
˘x
->
size
 << 3);

69 
i
 = 
˘x
->
size
 & 63;

70 
	`fio_sha1_upd©e
(
˘x
, 
∑d
, 1+ (63 & (55 - 
i
)));

71 
	`fio_sha1_upd©e
(
˘x
, 
∑dÀn
, 8);

75 
i
 = 0; i < 5; i++)

76 ((*)
hashout
)[
i
] = 
	`ht⁄l
(
˘x
->
H
[i]);

77 
	}
}

79 #i‡
deföed
(
__i386__
Ë|| deföed(
__x86_64__
)

81 
	#SHA_ASM
(
›
, 
x
, 
n
Ë({ 
__ªs
; 
	`__asm__
(› " %1,%0":"Ù" (__ªs):"i" (n), "0" (x)); __ªs; })

	)

82 
	#SHA_ROL
(
x
,
n
Ë
	`SHA_ASM
("rﬁ", x,Ç)

	)

83 
	#SHA_ROR
(
x
,
n
Ë
	`SHA_ASM
("r‹", x,Ç)

	)

87 
	#SHA_ROT
(
X
,
l
,
r
Ë(((XË<< (l)Ë| ((XË>> (r)))

	)

88 
	#SHA_ROL
(
X
,
n
Ë
	`SHA_ROT
(X,n,32-“))

	)

89 
	#SHA_ROR
(
X
,
n
Ë
	`SHA_ROT
(X,32-“),n)

	)

94 
	#W
(
x
Ë(
¨øy
[(x)&15])

	)

95 
	#£tW
(
x
, 
vÆ
Ë(*(vﬁ©ûê*)&
	`W
(xË(vÆ))

	)

101 
	#SHA_SRC
(
t
Ë
	`ht⁄l
(
d©a
[t])

	)

102 
	#SHA_MIX
(
t
Ë
	`SHA_ROL
(
	`W
—+13Ë^ W—+8Ë^ W—+2Ë^ W—), 1)

	)

104 
	#SHA_ROUND
(
t
, 
öput
, 
‚
, 
c⁄°™t
, 
A
, 
B
, 
C
, 
D
, 
E
) do { \

105 
TEMP
 = 
	`öput
(
t
); 
	`£tW
(t, TEMP); \

106 
E
 +
TEMP
 + 
	`SHA_ROL
(
A
,5Ë+ (
‚
Ë+ (
c⁄°™t
); \

107 
B
 = 
	`SHA_ROR
(B, 2); } 0)

	)

109 
	#T_0_15
(
t
, 
A
, 
B
, 
C
, 
D
, 
E
Ë
	`SHA_ROUND
—, 
SHA_SRC
, (((C^D)&B)^DË, 0x5a827999, A, B, C, D, E )

	)

110 
	#T_16_19
(
t
, 
A
, 
B
, 
C
, 
D
, 
E
Ë
	`SHA_ROUND
—, 
SHA_MIX
, (((C^D)&B)^DË, 0x5a827999, A, B, C, D, E )

	)

111 
	#T_20_39
(
t
, 
A
, 
B
, 
C
, 
D
, 
E
Ë
	`SHA_ROUND
—, 
SHA_MIX
, (B^C^DË, 0x6ed9eba1, A, B, C, D, E )

	)

112 
	#T_40_59
(
t
, 
A
, 
B
, 
C
, 
D
, 
E
Ë
	`SHA_ROUND
—, 
SHA_MIX
, ((B&C)+(D&(B^C))Ë, 0x8f1bbcdc, A, B, C, D, E )

	)

113 
	#T_60_79
(
t
, 
A
, 
B
, 
C
, 
D
, 
E
Ë
	`SHA_ROUND
—, 
SHA_MIX
, (B^C^DË, 0xˇ62c1d6, A, B, C, D, E )

	)

115 
	$blk_SHA1Block
(
fio_sha1_˘x
 *
˘x
, c⁄° *
d©a
)

117 
A
,
B
,
C
,
D
,
E
;

118 
¨øy
[16];

120 
A
 = 
˘x
->
H
[0];

121 
B
 = 
˘x
->
H
[1];

122 
C
 = 
˘x
->
H
[2];

123 
D
 = 
˘x
->
H
[3];

124 
E
 = 
˘x
->
H
[4];

127 
	`T_0_15
–0, 
A
, 
B
, 
C
, 
D
, 
E
);

128 
	`T_0_15
–1, 
E
, 
A
, 
B
, 
C
, 
D
);

129 
	`T_0_15
–2, 
D
, 
E
, 
A
, 
B
, 
C
);

130 
	`T_0_15
–3, 
C
, 
D
, 
E
, 
A
, 
B
);

131 
	`T_0_15
–4, 
B
, 
C
, 
D
, 
E
, 
A
);

132 
	`T_0_15
–5, 
A
, 
B
, 
C
, 
D
, 
E
);

133 
	`T_0_15
–6, 
E
, 
A
, 
B
, 
C
, 
D
);

134 
	`T_0_15
–7, 
D
, 
E
, 
A
, 
B
, 
C
);

135 
	`T_0_15
–8, 
C
, 
D
, 
E
, 
A
, 
B
);

136 
	`T_0_15
–9, 
B
, 
C
, 
D
, 
E
, 
A
);

137 
	`T_0_15
(10, 
A
, 
B
, 
C
, 
D
, 
E
);

138 
	`T_0_15
(11, 
E
, 
A
, 
B
, 
C
, 
D
);

139 
	`T_0_15
(12, 
D
, 
E
, 
A
, 
B
, 
C
);

140 
	`T_0_15
(13, 
C
, 
D
, 
E
, 
A
, 
B
);

141 
	`T_0_15
(14, 
B
, 
C
, 
D
, 
E
, 
A
);

142 
	`T_0_15
(15, 
A
, 
B
, 
C
, 
D
, 
E
);

145 
	`T_16_19
(16, 
E
, 
A
, 
B
, 
C
, 
D
);

146 
	`T_16_19
(17, 
D
, 
E
, 
A
, 
B
, 
C
);

147 
	`T_16_19
(18, 
C
, 
D
, 
E
, 
A
, 
B
);

148 
	`T_16_19
(19, 
B
, 
C
, 
D
, 
E
, 
A
);

151 
	`T_20_39
(20, 
A
, 
B
, 
C
, 
D
, 
E
);

152 
	`T_20_39
(21, 
E
, 
A
, 
B
, 
C
, 
D
);

153 
	`T_20_39
(22, 
D
, 
E
, 
A
, 
B
, 
C
);

154 
	`T_20_39
(23, 
C
, 
D
, 
E
, 
A
, 
B
);

155 
	`T_20_39
(24, 
B
, 
C
, 
D
, 
E
, 
A
);

156 
	`T_20_39
(25, 
A
, 
B
, 
C
, 
D
, 
E
);

157 
	`T_20_39
(26, 
E
, 
A
, 
B
, 
C
, 
D
);

158 
	`T_20_39
(27, 
D
, 
E
, 
A
, 
B
, 
C
);

159 
	`T_20_39
(28, 
C
, 
D
, 
E
, 
A
, 
B
);

160 
	`T_20_39
(29, 
B
, 
C
, 
D
, 
E
, 
A
);

161 
	`T_20_39
(30, 
A
, 
B
, 
C
, 
D
, 
E
);

162 
	`T_20_39
(31, 
E
, 
A
, 
B
, 
C
, 
D
);

163 
	`T_20_39
(32, 
D
, 
E
, 
A
, 
B
, 
C
);

164 
	`T_20_39
(33, 
C
, 
D
, 
E
, 
A
, 
B
);

165 
	`T_20_39
(34, 
B
, 
C
, 
D
, 
E
, 
A
);

166 
	`T_20_39
(35, 
A
, 
B
, 
C
, 
D
, 
E
);

167 
	`T_20_39
(36, 
E
, 
A
, 
B
, 
C
, 
D
);

168 
	`T_20_39
(37, 
D
, 
E
, 
A
, 
B
, 
C
);

169 
	`T_20_39
(38, 
C
, 
D
, 
E
, 
A
, 
B
);

170 
	`T_20_39
(39, 
B
, 
C
, 
D
, 
E
, 
A
);

173 
	`T_40_59
(40, 
A
, 
B
, 
C
, 
D
, 
E
);

174 
	`T_40_59
(41, 
E
, 
A
, 
B
, 
C
, 
D
);

175 
	`T_40_59
(42, 
D
, 
E
, 
A
, 
B
, 
C
);

176 
	`T_40_59
(43, 
C
, 
D
, 
E
, 
A
, 
B
);

177 
	`T_40_59
(44, 
B
, 
C
, 
D
, 
E
, 
A
);

178 
	`T_40_59
(45, 
A
, 
B
, 
C
, 
D
, 
E
);

179 
	`T_40_59
(46, 
E
, 
A
, 
B
, 
C
, 
D
);

180 
	`T_40_59
(47, 
D
, 
E
, 
A
, 
B
, 
C
);

181 
	`T_40_59
(48, 
C
, 
D
, 
E
, 
A
, 
B
);

182 
	`T_40_59
(49, 
B
, 
C
, 
D
, 
E
, 
A
);

183 
	`T_40_59
(50, 
A
, 
B
, 
C
, 
D
, 
E
);

184 
	`T_40_59
(51, 
E
, 
A
, 
B
, 
C
, 
D
);

185 
	`T_40_59
(52, 
D
, 
E
, 
A
, 
B
, 
C
);

186 
	`T_40_59
(53, 
C
, 
D
, 
E
, 
A
, 
B
);

187 
	`T_40_59
(54, 
B
, 
C
, 
D
, 
E
, 
A
);

188 
	`T_40_59
(55, 
A
, 
B
, 
C
, 
D
, 
E
);

189 
	`T_40_59
(56, 
E
, 
A
, 
B
, 
C
, 
D
);

190 
	`T_40_59
(57, 
D
, 
E
, 
A
, 
B
, 
C
);

191 
	`T_40_59
(58, 
C
, 
D
, 
E
, 
A
, 
B
);

192 
	`T_40_59
(59, 
B
, 
C
, 
D
, 
E
, 
A
);

195 
	`T_60_79
(60, 
A
, 
B
, 
C
, 
D
, 
E
);

196 
	`T_60_79
(61, 
E
, 
A
, 
B
, 
C
, 
D
);

197 
	`T_60_79
(62, 
D
, 
E
, 
A
, 
B
, 
C
);

198 
	`T_60_79
(63, 
C
, 
D
, 
E
, 
A
, 
B
);

199 
	`T_60_79
(64, 
B
, 
C
, 
D
, 
E
, 
A
);

200 
	`T_60_79
(65, 
A
, 
B
, 
C
, 
D
, 
E
);

201 
	`T_60_79
(66, 
E
, 
A
, 
B
, 
C
, 
D
);

202 
	`T_60_79
(67, 
D
, 
E
, 
A
, 
B
, 
C
);

203 
	`T_60_79
(68, 
C
, 
D
, 
E
, 
A
, 
B
);

204 
	`T_60_79
(69, 
B
, 
C
, 
D
, 
E
, 
A
);

205 
	`T_60_79
(70, 
A
, 
B
, 
C
, 
D
, 
E
);

206 
	`T_60_79
(71, 
E
, 
A
, 
B
, 
C
, 
D
);

207 
	`T_60_79
(72, 
D
, 
E
, 
A
, 
B
, 
C
);

208 
	`T_60_79
(73, 
C
, 
D
, 
E
, 
A
, 
B
);

209 
	`T_60_79
(74, 
B
, 
C
, 
D
, 
E
, 
A
);

210 
	`T_60_79
(75, 
A
, 
B
, 
C
, 
D
, 
E
);

211 
	`T_60_79
(76, 
E
, 
A
, 
B
, 
C
, 
D
);

212 
	`T_60_79
(77, 
D
, 
E
, 
A
, 
B
, 
C
);

213 
	`T_60_79
(78, 
C
, 
D
, 
E
, 
A
, 
B
);

214 
	`T_60_79
(79, 
B
, 
C
, 
D
, 
E
, 
A
);

216 
˘x
->
H
[0] +
A
;

217 
˘x
->
H
[1] +
B
;

218 
˘x
->
H
[2] +
C
;

219 
˘x
->
H
[3] +
D
;

220 
˘x
->
H
[4] +
E
;

221 
	}
}

	@/home/terekhov/tmp/fio/fio/crc/sha1.h

1 #i‚de‡
FIO_SHA1


2 
	#FIO_SHA1


	)

10 
	sfio_sha1_˘x
 {

11 
uöt32_t
 *
	mH
;

12 
	mW
[16];

13 
	msize
;

16 
fio_sha1_öô
(
fio_sha1_˘x
 *);

17 
fio_sha1_upd©e
(
fio_sha1_˘x
 *, c⁄° *
d©aIn
, 
Àn
);

18 
fio_sha1_föÆ
(
hashout
[20], 
fio_sha1_˘x
 *);

	@/home/terekhov/tmp/fio/fio/crc/sha256.c

19 
	~<°rög.h
>

20 
	~<öây≥s.h
>

22 
	~"../lib/bsw≠.h
"

23 
	~"sha256.h
"

25 
	#SHA256_DIGEST_SIZE
 32

	)

26 
	#SHA256_HMAC_BLOCK_SIZE
 64

	)

28 
ölöe
 
uöt32_t
 
	$Ch
(
uöt32_t
 
x
, uöt32_à
y
, uöt32_à
z
)

30  
z
 ^ (
x
 & (
y
 ^ z));

31 
	}
}

33 
ölöe
 
uöt32_t
 
	$Maj
(
uöt32_t
 
x
, uöt32_à
y
, uöt32_à
z
)

35  (
x
 & 
y
Ë| (
z
 & (x | y));

36 
	}
}

38 
	#e0
(
x
Ë(
	`r‹32
(x, 2Ë^Ñ‹32(x,13Ë^Ñ‹32(x,22))

	)

39 
	#e1
(
x
Ë(
	`r‹32
(x, 6Ë^Ñ‹32(x,11Ë^Ñ‹32(x,25))

	)

40 
	#s0
(
x
Ë(
	`r‹32
(x, 7Ë^Ñ‹32(x,18Ë^ (x >> 3))

	)

41 
	#s1
(
x
Ë(
	`r‹32
(x,17Ë^Ñ‹32(x,19Ë^ (x >> 10))

	)

43 
	#H0
 0x6a09e667

	)

44 
	#H1
 0xbb67´85

	)

45 
	#H2
 0x3c6ef372

	)

46 
	#H3
 0xa54ff53a

	)

47 
	#H4
 0x510e527f

	)

48 
	#H5
 0x9b05688c

	)

49 
	#H6
 0x1f83d9ab

	)

50 
	#H7
 0x5be0cd19

	)

52 
ölöe
 
uöt32_t
 
	$r‹32
(
uöt32_t
 
w‹d
, 
shi·
)

54  (
w‹d
 >> 
shi·
) | (word << (32 - shift));

55 
	}
}

57 
ölöe
 
	$LOAD_OP
(
I
, 
uöt32_t
 *
W
, c⁄° 
uöt8_t
 *
öput
)

59 
W
[
I
] = 
	`__be32_to_˝u
(((
uöt32_t
 *)(
öput
))[I]);

60 
	}
}

62 
ölöe
 
	$BLEND_OP
(
I
, 
uöt32_t
 *
W
)

64 
W
[
I
] = 
	`s1
(W[I-2]Ë+ W[I-7] + 
	`s0
(W[I-15]) + W[I-16];

65 
	}
}

67 
	$sha256_å™sf‹m
(
uöt32_t
 *
°©e
, c⁄° 
uöt8_t
 *
öput
)

69 
uöt32_t
 
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
, 
h
, 
t1
, 
t2
;

70 
uöt32_t
 
W
[64];

71 
i
;

74 
i
 = 0; i < 16; i++)

75 
	`LOAD_OP
(
i
, 
W
, 
öput
);

78 
i
 = 16; i < 64; i++)

79 
	`BLEND_OP
(
i
, 
W
);

82 
a
=
°©e
[0]; 
b
=°©e[1]; 
c
=°©e[2]; 
d
=state[3];

83 
e
=
°©e
[4]; 
f
=°©e[5]; 
g
=°©e[6]; 
h
=state[7];

86 
t1
 = 
h
 + 
	`e1
(
e
Ë+ 
	`Ch
”,
f
,
g
Ë+ 0x428a2f98 + 
W
[ 0];

87 
t2
 = 
	`e0
(
a
Ë+ 
	`Maj
◊,
b
,
c
); 
d
+=
t1
; 
h
=t1+t2;

88 
t1
 = 
g
 + 
	`e1
(
d
Ë+ 
	`Ch
(d,
e
,
f
Ë+ 0x71374491 + 
W
[ 1];

89 
t2
 = 
	`e0
(
h
Ë+ 
	`Maj
(h,
a
,
b
); 
c
+=
t1
; 
g
=t1+t2;

90 
t1
 = 
f
 + 
	`e1
(
c
Ë+ 
	`Ch
(c,
d
,
e
Ë+ 0xb5c0fbc‡+ 
W
[ 2];

91 
t2
 = 
	`e0
(
g
Ë+ 
	`Maj
(g,
h
,
a
); 
b
+=
t1
; 
f
=t1+t2;

92 
t1
 = 
e
 + 
	`e1
(
b
Ë+ 
	`Ch
(b,
c
,
d
Ë+ 0xe9b5dba5 + 
W
[ 3];

93 
t2
 = 
	`e0
(
f
Ë+ 
	`Maj
(f,
g
,
h
); 
a
+=
t1
; 
e
=t1+t2;

94 
t1
 = 
d
 + 
	`e1
(
a
Ë+ 
	`Ch
◊,
b
,
c
Ë+ 0x3956c25b + 
W
[ 4];

95 
t2
 = 
	`e0
(
e
Ë+ 
	`Maj
”,
f
,
g
); 
h
+=
t1
; 
d
=t1+t2;

96 
t1
 = 
c
 + 
	`e1
(
h
Ë+ 
	`Ch
(h,
a
,
b
Ë+ 0x59f111f1 + 
W
[ 5];

97 
t2
 = 
	`e0
(
d
Ë+ 
	`Maj
(d,
e
,
f
); 
g
+=
t1
; 
c
=t1+t2;

98 
t1
 = 
b
 + 
	`e1
(
g
Ë+ 
	`Ch
(g,
h
,
a
Ë+ 0x923f82a4 + 
W
[ 6];

99 
t2
 = 
	`e0
(
c
Ë+ 
	`Maj
(c,
d
,
e
); 
f
+=
t1
; 
b
=t1+t2;

100 
t1
 = 
a
 + 
	`e1
(
f
Ë+ 
	`Ch
(f,
g
,
h
Ë+ 0xab1c5ed5 + 
W
[ 7];

101 
t2
 = 
	`e0
(
b
Ë+ 
	`Maj
(b,
c
,
d
); 
e
+=
t1
; 
a
=t1+t2;

103 
t1
 = 
h
 + 
	`e1
(
e
Ë+ 
	`Ch
”,
f
,
g
Ë+ 0xd807Ø98 + 
W
[ 8];

104 
t2
 = 
	`e0
(
a
Ë+ 
	`Maj
◊,
b
,
c
); 
d
+=
t1
; 
h
=t1+t2;

105 
t1
 = 
g
 + 
	`e1
(
d
Ë+ 
	`Ch
(d,
e
,
f
Ë+ 0x12835b01 + 
W
[ 9];

106 
t2
 = 
	`e0
(
h
Ë+ 
	`Maj
(h,
a
,
b
); 
c
+=
t1
; 
g
=t1+t2;

107 
t1
 = 
f
 + 
	`e1
(
c
Ë+ 
	`Ch
(c,
d
,
e
Ë+ 0x243185bê+ 
W
[10];

108 
t2
 = 
	`e0
(
g
Ë+ 
	`Maj
(g,
h
,
a
); 
b
+=
t1
; 
f
=t1+t2;

109 
t1
 = 
e
 + 
	`e1
(
b
Ë+ 
	`Ch
(b,
c
,
d
Ë+ 0x550c7dc3 + 
W
[11];

110 
t2
 = 
	`e0
(
f
Ë+ 
	`Maj
(f,
g
,
h
); 
a
+=
t1
; 
e
=t1+t2;

111 
t1
 = 
d
 + 
	`e1
(
a
Ë+ 
	`Ch
◊,
b
,
c
Ë+ 0x72be5d74 + 
W
[12];

112 
t2
 = 
	`e0
(
e
Ë+ 
	`Maj
”,
f
,
g
); 
h
+=
t1
; 
d
=t1+t2;

113 
t1
 = 
c
 + 
	`e1
(
h
Ë+ 
	`Ch
(h,
a
,
b
Ë+ 0x80deb1„ + 
W
[13];

114 
t2
 = 
	`e0
(
d
Ë+ 
	`Maj
(d,
e
,
f
); 
g
+=
t1
; 
c
=t1+t2;

115 
t1
 = 
b
 + 
	`e1
(
g
Ë+ 
	`Ch
(g,
h
,
a
Ë+ 0x9bdc06a7 + 
W
[14];

116 
t2
 = 
	`e0
(
c
Ë+ 
	`Maj
(c,
d
,
e
); 
f
+=
t1
; 
b
=t1+t2;

117 
t1
 = 
a
 + 
	`e1
(
f
Ë+ 
	`Ch
(f,
g
,
h
Ë+ 0xc19bf174 + 
W
[15];

118 
t2
 = 
	`e0
(
b
Ë+ 
	`Maj
(b,
c
,
d
); 
e
+=
t1
; 
a
=t1+t2;

120 
t1
 = 
h
 + 
	`e1
(
e
Ë+ 
	`Ch
”,
f
,
g
Ë+ 0xe49b69c1 + 
W
[16];

121 
t2
 = 
	`e0
(
a
Ë+ 
	`Maj
◊,
b
,
c
); 
d
+=
t1
; 
h
=t1+t2;

122 
t1
 = 
g
 + 
	`e1
(
d
Ë+ 
	`Ch
(d,
e
,
f
Ë+ 0xefbe4786 + 
W
[17];

123 
t2
 = 
	`e0
(
h
Ë+ 
	`Maj
(h,
a
,
b
); 
c
+=
t1
; 
g
=t1+t2;

124 
t1
 = 
f
 + 
	`e1
(
c
Ë+ 
	`Ch
(c,
d
,
e
Ë+ 0x0fc19dc6 + 
W
[18];

125 
t2
 = 
	`e0
(
g
Ë+ 
	`Maj
(g,
h
,
a
); 
b
+=
t1
; 
f
=t1+t2;

126 
t1
 = 
e
 + 
	`e1
(
b
Ë+ 
	`Ch
(b,
c
,
d
Ë+ 0x240ˇ1c¯+ 
W
[19];

127 
t2
 = 
	`e0
(
f
Ë+ 
	`Maj
(f,
g
,
h
); 
a
+=
t1
; 
e
=t1+t2;

128 
t1
 = 
d
 + 
	`e1
(
a
Ë+ 
	`Ch
◊,
b
,
c
Ë+ 0x2de92c6‡+ 
W
[20];

129 
t2
 = 
	`e0
(
e
Ë+ 
	`Maj
”,
f
,
g
); 
h
+=
t1
; 
d
=t1+t2;

130 
t1
 = 
c
 + 
	`e1
(
h
Ë+ 
	`Ch
(h,
a
,
b
Ë+ 0x4a7484Ø + 
W
[21];

131 
t2
 = 
	`e0
(
d
Ë+ 
	`Maj
(d,
e
,
f
); 
g
+=
t1
; 
c
=t1+t2;

132 
t1
 = 
b
 + 
	`e1
(
g
Ë+ 
	`Ch
(g,
h
,
a
Ë+ 0x5cb0a9d¯+ 
W
[22];

133 
t2
 = 
	`e0
(
c
Ë+ 
	`Maj
(c,
d
,
e
); 
f
+=
t1
; 
b
=t1+t2;

134 
t1
 = 
a
 + 
	`e1
(
f
Ë+ 
	`Ch
(f,
g
,
h
Ë+ 0x76f988d®+ 
W
[23];

135 
t2
 = 
	`e0
(
b
Ë+ 
	`Maj
(b,
c
,
d
); 
e
+=
t1
; 
a
=t1+t2;

137 
t1
 = 
h
 + 
	`e1
(
e
Ë+ 
	`Ch
”,
f
,
g
Ë+ 0x983e5152 + 
W
[24];

138 
t2
 = 
	`e0
(
a
Ë+ 
	`Maj
◊,
b
,
c
); 
d
+=
t1
; 
h
=t1+t2;

139 
t1
 = 
g
 + 
	`e1
(
d
Ë+ 
	`Ch
(d,
e
,
f
Ë+ 0xa831c66d + 
W
[25];

140 
t2
 = 
	`e0
(
h
Ë+ 
	`Maj
(h,
a
,
b
); 
c
+=
t1
; 
g
=t1+t2;

141 
t1
 = 
f
 + 
	`e1
(
c
Ë+ 
	`Ch
(c,
d
,
e
Ë+ 0xb00327c8 + 
W
[26];

142 
t2
 = 
	`e0
(
g
Ë+ 
	`Maj
(g,
h
,
a
); 
b
+=
t1
; 
f
=t1+t2;

143 
t1
 = 
e
 + 
	`e1
(
b
Ë+ 
	`Ch
(b,
c
,
d
Ë+ 0xbf597fc7 + 
W
[27];

144 
t2
 = 
	`e0
(
f
Ë+ 
	`Maj
(f,
g
,
h
); 
a
+=
t1
; 
e
=t1+t2;

145 
t1
 = 
d
 + 
	`e1
(
a
Ë+ 
	`Ch
◊,
b
,
c
Ë+ 0xc6e00bf3 + 
W
[28];

146 
t2
 = 
	`e0
(
e
Ë+ 
	`Maj
”,
f
,
g
); 
h
+=
t1
; 
d
=t1+t2;

147 
t1
 = 
c
 + 
	`e1
(
h
Ë+ 
	`Ch
(h,
a
,
b
Ë+ 0xd5a79147 + 
W
[29];

148 
t2
 = 
	`e0
(
d
Ë+ 
	`Maj
(d,
e
,
f
); 
g
+=
t1
; 
c
=t1+t2;

149 
t1
 = 
b
 + 
	`e1
(
g
Ë+ 
	`Ch
(g,
h
,
a
Ë+ 0x06ˇ6351 + 
W
[30];

150 
t2
 = 
	`e0
(
c
Ë+ 
	`Maj
(c,
d
,
e
); 
f
+=
t1
; 
b
=t1+t2;

151 
t1
 = 
a
 + 
	`e1
(
f
Ë+ 
	`Ch
(f,
g
,
h
Ë+ 0x14292967 + 
W
[31];

152 
t2
 = 
	`e0
(
b
Ë+ 
	`Maj
(b,
c
,
d
); 
e
+=
t1
; 
a
=t1+t2;

154 
t1
 = 
h
 + 
	`e1
(
e
Ë+ 
	`Ch
”,
f
,
g
Ë+ 0x27b70a85 + 
W
[32];

155 
t2
 = 
	`e0
(
a
Ë+ 
	`Maj
◊,
b
,
c
); 
d
+=
t1
; 
h
=t1+t2;

156 
t1
 = 
g
 + 
	`e1
(
d
Ë+ 
	`Ch
(d,
e
,
f
Ë+ 0x2e1b2138 + 
W
[33];

157 
t2
 = 
	`e0
(
h
Ë+ 
	`Maj
(h,
a
,
b
); 
c
+=
t1
; 
g
=t1+t2;

158 
t1
 = 
f
 + 
	`e1
(
c
Ë+ 
	`Ch
(c,
d
,
e
Ë+ 0x4d2c6df¯+ 
W
[34];

159 
t2
 = 
	`e0
(
g
Ë+ 
	`Maj
(g,
h
,
a
); 
b
+=
t1
; 
f
=t1+t2;

160 
t1
 = 
e
 + 
	`e1
(
b
Ë+ 
	`Ch
(b,
c
,
d
Ë+ 0x53380d13 + 
W
[35];

161 
t2
 = 
	`e0
(
f
Ë+ 
	`Maj
(f,
g
,
h
); 
a
+=
t1
; 
e
=t1+t2;

162 
t1
 = 
d
 + 
	`e1
(
a
Ë+ 
	`Ch
◊,
b
,
c
Ë+ 0x650a7354 + 
W
[36];

163 
t2
 = 
	`e0
(
e
Ë+ 
	`Maj
”,
f
,
g
); 
h
+=
t1
; 
d
=t1+t2;

164 
t1
 = 
c
 + 
	`e1
(
h
Ë+ 
	`Ch
(h,
a
,
b
Ë+ 0x766a0abb + 
W
[37];

165 
t2
 = 
	`e0
(
d
Ë+ 
	`Maj
(d,
e
,
f
); 
g
+=
t1
; 
c
=t1+t2;

166 
t1
 = 
b
 + 
	`e1
(
g
Ë+ 
	`Ch
(g,
h
,
a
Ë+ 0x81c2c92ê+ 
W
[38];

167 
t2
 = 
	`e0
(
c
Ë+ 
	`Maj
(c,
d
,
e
); 
f
+=
t1
; 
b
=t1+t2;

168 
t1
 = 
a
 + 
	`e1
(
f
Ë+ 
	`Ch
(f,
g
,
h
Ë+ 0x92722c85 + 
W
[39];

169 
t2
 = 
	`e0
(
b
Ë+ 
	`Maj
(b,
c
,
d
); 
e
+=
t1
; 
a
=t1+t2;

171 
t1
 = 
h
 + 
	`e1
(
e
Ë+ 
	`Ch
”,
f
,
g
Ë+ 0xa2b„8a1 + 
W
[40];

172 
t2
 = 
	`e0
(
a
Ë+ 
	`Maj
◊,
b
,
c
); 
d
+=
t1
; 
h
=t1+t2;

173 
t1
 = 
g
 + 
	`e1
(
d
Ë+ 
	`Ch
(d,
e
,
f
Ë+ 0xa81a664b + 
W
[41];

174 
t2
 = 
	`e0
(
h
Ë+ 
	`Maj
(h,
a
,
b
); 
c
+=
t1
; 
g
=t1+t2;

175 
t1
 = 
f
 + 
	`e1
(
c
Ë+ 
	`Ch
(c,
d
,
e
Ë+ 0xc24b8b70 + 
W
[42];

176 
t2
 = 
	`e0
(
g
Ë+ 
	`Maj
(g,
h
,
a
); 
b
+=
t1
; 
f
=t1+t2;

177 
t1
 = 
e
 + 
	`e1
(
b
Ë+ 
	`Ch
(b,
c
,
d
Ë+ 0xc76c51a3 + 
W
[43];

178 
t2
 = 
	`e0
(
f
Ë+ 
	`Maj
(f,
g
,
h
); 
a
+=
t1
; 
e
=t1+t2;

179 
t1
 = 
d
 + 
	`e1
(
a
Ë+ 
	`Ch
◊,
b
,
c
Ë+ 0xd192e819 + 
W
[44];

180 
t2
 = 
	`e0
(
e
Ë+ 
	`Maj
”,
f
,
g
); 
h
+=
t1
; 
d
=t1+t2;

181 
t1
 = 
c
 + 
	`e1
(
h
Ë+ 
	`Ch
(h,
a
,
b
Ë+ 0xd6990624 + 
W
[45];

182 
t2
 = 
	`e0
(
d
Ë+ 
	`Maj
(d,
e
,
f
); 
g
+=
t1
; 
c
=t1+t2;

183 
t1
 = 
b
 + 
	`e1
(
g
Ë+ 
	`Ch
(g,
h
,
a
Ë+ 0xf40e3585 + 
W
[46];

184 
t2
 = 
	`e0
(
c
Ë+ 
	`Maj
(c,
d
,
e
); 
f
+=
t1
; 
b
=t1+t2;

185 
t1
 = 
a
 + 
	`e1
(
f
Ë+ 
	`Ch
(f,
g
,
h
Ë+ 0x106Ø070 + 
W
[47];

186 
t2
 = 
	`e0
(
b
Ë+ 
	`Maj
(b,
c
,
d
); 
e
+=
t1
; 
a
=t1+t2;

188 
t1
 = 
h
 + 
	`e1
(
e
Ë+ 
	`Ch
”,
f
,
g
Ë+ 0x19a4c116 + 
W
[48];

189 
t2
 = 
	`e0
(
a
Ë+ 
	`Maj
◊,
b
,
c
); 
d
+=
t1
; 
h
=t1+t2;

190 
t1
 = 
g
 + 
	`e1
(
d
Ë+ 
	`Ch
(d,
e
,
f
Ë+ 0x1e376c08 + 
W
[49];

191 
t2
 = 
	`e0
(
h
Ë+ 
	`Maj
(h,
a
,
b
); 
c
+=
t1
; 
g
=t1+t2;

192 
t1
 = 
f
 + 
	`e1
(
c
Ë+ 
	`Ch
(c,
d
,
e
Ë+ 0x2748774¯+ 
W
[50];

193 
t2
 = 
	`e0
(
g
Ë+ 
	`Maj
(g,
h
,
a
); 
b
+=
t1
; 
f
=t1+t2;

194 
t1
 = 
e
 + 
	`e1
(
b
Ë+ 
	`Ch
(b,
c
,
d
Ë+ 0x34b0bcb5 + 
W
[51];

195 
t2
 = 
	`e0
(
f
Ë+ 
	`Maj
(f,
g
,
h
); 
a
+=
t1
; 
e
=t1+t2;

196 
t1
 = 
d
 + 
	`e1
(
a
Ë+ 
	`Ch
◊,
b
,
c
Ë+ 0x391c0cb3 + 
W
[52];

197 
t2
 = 
	`e0
(
e
Ë+ 
	`Maj
”,
f
,
g
); 
h
+=
t1
; 
d
=t1+t2;

198 
t1
 = 
c
 + 
	`e1
(
h
Ë+ 
	`Ch
(h,
a
,
b
Ë+ 0x4ed8Ø4®+ 
W
[53];

199 
t2
 = 
	`e0
(
d
Ë+ 
	`Maj
(d,
e
,
f
); 
g
+=
t1
; 
c
=t1+t2;

200 
t1
 = 
b
 + 
	`e1
(
g
Ë+ 
	`Ch
(g,
h
,
a
Ë+ 0x5b9cˇ4‡+ 
W
[54];

201 
t2
 = 
	`e0
(
c
Ë+ 
	`Maj
(c,
d
,
e
); 
f
+=
t1
; 
b
=t1+t2;

202 
t1
 = 
a
 + 
	`e1
(
f
Ë+ 
	`Ch
(f,
g
,
h
Ë+ 0x682e6ff3 + 
W
[55];

203 
t2
 = 
	`e0
(
b
Ë+ 
	`Maj
(b,
c
,
d
); 
e
+=
t1
; 
a
=t1+t2;

205 
t1
 = 
h
 + 
	`e1
(
e
Ë+ 
	`Ch
”,
f
,
g
Ë+ 0x748f82ì + 
W
[56];

206 
t2
 = 
	`e0
(
a
Ë+ 
	`Maj
◊,
b
,
c
); 
d
+=
t1
; 
h
=t1+t2;

207 
t1
 = 
g
 + 
	`e1
(
d
Ë+ 
	`Ch
(d,
e
,
f
Ë+ 0x78a5636‡+ 
W
[57];

208 
t2
 = 
	`e0
(
h
Ë+ 
	`Maj
(h,
a
,
b
); 
c
+=
t1
; 
g
=t1+t2;

209 
t1
 = 
f
 + 
	`e1
(
c
Ë+ 
	`Ch
(c,
d
,
e
Ë+ 0x84c87814 + 
W
[58];

210 
t2
 = 
	`e0
(
g
Ë+ 
	`Maj
(g,
h
,
a
); 
b
+=
t1
; 
f
=t1+t2;

211 
t1
 = 
e
 + 
	`e1
(
b
Ë+ 
	`Ch
(b,
c
,
d
Ë+ 0x8cc70208 + 
W
[59];

212 
t2
 = 
	`e0
(
f
Ë+ 
	`Maj
(f,
g
,
h
); 
a
+=
t1
; 
e
=t1+t2;

213 
t1
 = 
d
 + 
	`e1
(
a
Ë+ 
	`Ch
◊,
b
,
c
Ë+ 0x90beffÁ + 
W
[60];

214 
t2
 = 
	`e0
(
e
Ë+ 
	`Maj
”,
f
,
g
); 
h
+=
t1
; 
d
=t1+t2;

215 
t1
 = 
c
 + 
	`e1
(
h
Ë+ 
	`Ch
(h,
a
,
b
Ë+ 0xa4506˚b + 
W
[61];

216 
t2
 = 
	`e0
(
d
Ë+ 
	`Maj
(d,
e
,
f
); 
g
+=
t1
; 
c
=t1+t2;

217 
t1
 = 
b
 + 
	`e1
(
g
Ë+ 
	`Ch
(g,
h
,
a
Ë+ 0xbef9a3f7 + 
W
[62];

218 
t2
 = 
	`e0
(
c
Ë+ 
	`Maj
(c,
d
,
e
); 
f
+=
t1
; 
b
=t1+t2;

219 
t1
 = 
a
 + 
	`e1
(
f
Ë+ 
	`Ch
(f,
g
,
h
Ë+ 0xc67178f2 + 
W
[63];

220 
t2
 = 
	`e0
(
b
Ë+ 
	`Maj
(b,
c
,
d
); 
e
+=
t1
; 
a
=t1+t2;

222 
°©e
[0] +
a
; sèã[1] +
b
; sèã[2] +
c
; sèã[3] +
d
;

223 
°©e
[4] +
e
; sèã[5] +
f
; sèã[6] +
g
; sèã[7] +
h
;

226 
a
 = 
b
 = 
c
 = 
d
 = 
e
 = 
f
 = 
g
 = 
h
 = 
t1
 = 
t2
 = 0;

227 
	`mem£t
(
W
, 0, 64 * (
uöt32_t
));

228 
	}
}

230 
	$fio_sha256_öô
(
fio_sha256_˘x
 *
s˘x
)

232 
s˘x
->
°©e
[0] = 
H0
;

233 
s˘x
->
°©e
[1] = 
H1
;

234 
s˘x
->
°©e
[2] = 
H2
;

235 
s˘x
->
°©e
[3] = 
H3
;

236 
s˘x
->
°©e
[4] = 
H4
;

237 
s˘x
->
°©e
[5] = 
H5
;

238 
s˘x
->
°©e
[6] = 
H6
;

239 
s˘x
->
°©e
[7] = 
H7
;

240 
s˘x
->
cou¡
[0] = sctx->count[1] = 0;

241 
	}
}

243 
	$fio_sha256_upd©e
(
fio_sha256_˘x
 *
s˘x
, c⁄° 
uöt8_t
 *
d©a
,

244 
Àn
)

246 
i
, 
idx
, 
∑π_Àn
;

249 
idx
 = ()((
s˘x
->
cou¡
[0] >> 3) & 0x3f);

252 i‡((
s˘x
->
cou¡
[0] +(
Àn
 << 3)) < (len << 3)) {

253 
s˘x
->
cou¡
[1]++;

254 
s˘x
->
cou¡
[1] +(
Àn
 >> 29);

257 
∑π_Àn
 = 64 - 
idx
;

260 i‡(
Àn
 >
∑π_Àn
) {

261 
	`mem˝y
(&
s˘x
->
buf
[
idx
], 
d©a
, 
∑π_Àn
);

262 
	`sha256_å™sf‹m
(
s˘x
->
°©e
, s˘x->
buf
);

264 
i
 = 
∑π_Àn
; i + 63 < 
Àn
; i += 64)

265 
	`sha256_å™sf‹m
(
s˘x
->
°©e
, &
d©a
[
i
]);

266 
idx
 = 0;

268 
i
 = 0;

272 
	`mem˝y
(&
s˘x
->
buf
[
idx
], &
d©a
[
i
], 
Àn
-i);

273 
	}
}

	@/home/terekhov/tmp/fio/fio/crc/sha256.h

1 #i‚de‡
FIO_SHA256_H


2 
	#FIO_SHA256_H


	)

4 
	sfio_sha256_˘x
 {

5 
uöt32_t
 
	mcou¡
[2];

6 
uöt32_t
 
	m°©e
[8];

7 
uöt8_t
 *
	mbuf
;

10 
fio_sha256_öô
(
fio_sha256_˘x
 *);

11 
fio_sha256_upd©e
(
fio_sha256_˘x
 *, c⁄° 
uöt8_t
 *, );

	@/home/terekhov/tmp/fio/fio/crc/sha512.c

14 
	~<°rög.h
>

15 
	~<öây≥s.h
>

17 
	~"../lib/bsw≠.h
"

18 
	~"sha512.h
"

20 
	#SHA384_DIGEST_SIZE
 48

	)

21 
	#SHA512_DIGEST_SIZE
 64

	)

22 
	#SHA384_HMAC_BLOCK_SIZE
 128

	)

23 
	#SHA512_HMAC_BLOCK_SIZE
 128

	)

25 
ölöe
 
uöt64_t
 
	$Ch
(
uöt64_t
 
x
, uöt64_à
y
, uöt64_à
z
)

27  
z
 ^ (
x
 & (
y
 ^ z));

28 
	}
}

30 
ölöe
 
uöt64_t
 
	$Maj
(
uöt64_t
 
x
, uöt64_à
y
, uöt64_à
z
)

32  (
x
 & 
y
Ë| (
z
 & (x | y));

33 
	}
}

35 
ölöe
 
uöt64_t
 
	$RORuöt64_t
(
uöt64_t
 
x
, uöt64_à
y
)

37  (
x
 >> 
y
) | (x << (64 - y));

38 
	}
}

40 c⁄° 
uöt64_t
 
	gsha512_K
[80] = {

70 
	#e0
(
x
Ë(
	`RORuöt64_t
(x,28Ë^ RORuöt64_t(x,34Ë^ RORuöt64_t(x,39))

	)

71 
	#e1
(
x
Ë(
	`RORuöt64_t
(x,14Ë^ RORuöt64_t(x,18Ë^ RORuöt64_t(x,41))

	)

72 
	#s0
(
x
Ë(
	`RORuöt64_t
(x, 1Ë^ RORuöt64_t(x, 8Ë^ (x >> 7))

	)

73 
	#s1
(
x
Ë(
	`RORuöt64_t
(x,19Ë^ RORuöt64_t(x,61Ë^ (x >> 6))

	)

76 
	#H0
 0x6a09e667f3bcc908ULL

	)

77 
	#H1
 0xbb67´8584ˇa73bULL

	)

78 
	#H2
 0x3c6ef372„94f82bULL

	)

79 
	#H3
 0xa54ff53a5f1d36f1ULL

	)

80 
	#H4
 0x510e527Áde682d1ULL

	)

81 
	#H5
 0x9b05688c2b3e6c1fULL

	)

82 
	#H6
 0x1f83d9abfb41bd6bULL

	)

83 
	#H7
 0x5be0cd19137e2179ULL

	)

86 
	#HP0
 0xcbbb9d5dc1059ed8ULL

	)

87 
	#HP1
 0x629a292a367cd507ULL

	)

88 
	#HP2
 0x9159015a3070dd17ULL

	)

89 
	#HP3
 0x152„cd8f70e5939ULL

	)

90 
	#HP4
 0x67332667ffc00b31ULL

	)

91 
	#HP5
 0x8eb44a8768581511ULL

	)

92 
	#HP6
 0xdb0c2e0d64f98Á7ULL

	)

93 
	#HP7
 0x47b5481dbeÁ4Á4ULL

	)

95 
ölöe
 
	$LOAD_OP
(
I
, 
uöt64_t
 *
W
, c⁄° 
uöt8_t
 *
öput
)

97 
W
[
I
] = 
	`__be64_to_˝u
–((
uöt64_t
 *)(
öput
))[I] );

98 
	}
}

100 
ölöe
 
	$BLEND_OP
(
I
, 
uöt64_t
 *
W
)

102 
W
[
I
] = 
	`s1
(W[I-2]Ë+ W[I-7] + 
	`s0
(W[I-15]) + W[I-16];

103 
	}
}

105 
	$sha512_å™sf‹m
(
uöt64_t
 *
°©e
, uöt64_à*
W
, c⁄° 
uöt8_t
 *
öput
)

107 
uöt64_t
 
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
, 
h
, 
t1
, 
t2
;

109 
i
;

112 
i
 = 0; i < 16; i++)

113 
	`LOAD_OP
(
i
, 
W
, 
öput
);

115 
i
 = 16; i < 80; i++)

116 
	`BLEND_OP
(
i
, 
W
);

119 
a
=
°©e
[0]; 
b
=°©e[1]; 
c
=°©e[2]; 
d
=state[3];

120 
e
=
°©e
[4]; 
f
=°©e[5]; 
g
=°©e[6]; 
h
=state[7];

123 
i
=0; i<80; i+=8) {

124 
t1
 = 
h
 + 
	`e1
(
e
Ë+ 
	`Ch
”,
f
,
g
Ë+ 
sha512_K
[
i
 ] + 
W
[i ];

125 
t2
 = 
	`e0
(
a
Ë+ 
	`Maj
◊,
b
,
c
); 
d
+=
t1
; 
h
=t1+t2;

126 
t1
 = 
g
 + 
	`e1
(
d
Ë+ 
	`Ch
(d,
e
,
f
Ë+ 
sha512_K
[
i
+1] + 
W
[i+1];

127 
t2
 = 
	`e0
(
h
Ë+ 
	`Maj
(h,
a
,
b
); 
c
+=
t1
; 
g
=t1+t2;

128 
t1
 = 
f
 + 
	`e1
(
c
Ë+ 
	`Ch
(c,
d
,
e
Ë+ 
sha512_K
[
i
+2] + 
W
[i+2];

129 
t2
 = 
	`e0
(
g
Ë+ 
	`Maj
(g,
h
,
a
); 
b
+=
t1
; 
f
=t1+t2;

130 
t1
 = 
e
 + 
	`e1
(
b
Ë+ 
	`Ch
(b,
c
,
d
Ë+ 
sha512_K
[
i
+3] + 
W
[i+3];

131 
t2
 = 
	`e0
(
f
Ë+ 
	`Maj
(f,
g
,
h
); 
a
+=
t1
; 
e
=t1+t2;

132 
t1
 = 
d
 + 
	`e1
(
a
Ë+ 
	`Ch
◊,
b
,
c
Ë+ 
sha512_K
[
i
+4] + 
W
[i+4];

133 
t2
 = 
	`e0
(
e
Ë+ 
	`Maj
”,
f
,
g
); 
h
+=
t1
; 
d
=t1+t2;

134 
t1
 = 
c
 + 
	`e1
(
h
Ë+ 
	`Ch
(h,
a
,
b
Ë+ 
sha512_K
[
i
+5] + 
W
[i+5];

135 
t2
 = 
	`e0
(
d
Ë+ 
	`Maj
(d,
e
,
f
); 
g
+=
t1
; 
c
=t1+t2;

136 
t1
 = 
b
 + 
	`e1
(
g
Ë+ 
	`Ch
(g,
h
,
a
Ë+ 
sha512_K
[
i
+6] + 
W
[i+6];

137 
t2
 = 
	`e0
(
c
Ë+ 
	`Maj
(c,
d
,
e
); 
f
+=
t1
; 
b
=t1+t2;

138 
t1
 = 
a
 + 
	`e1
(
f
Ë+ 
	`Ch
(f,
g
,
h
Ë+ 
sha512_K
[
i
+7] + 
W
[i+7];

139 
t2
 = 
	`e0
(
b
Ë+ 
	`Maj
(b,
c
,
d
); 
e
+=
t1
; 
a
=t1+t2;

142 
°©e
[0] +
a
; sèã[1] +
b
; sèã[2] +
c
; sèã[3] +
d
;

143 
°©e
[4] +
e
; sèã[5] +
f
; sèã[6] +
g
; sèã[7] +
h
;

146 
a
 = 
b
 = 
c
 = 
d
 = 
e
 = 
f
 = 
g
 = 
h
 = 
t1
 = 
t2
 = 0;

147 
	}
}

149 
	$fio_sha512_öô
(
fio_sha512_˘x
 *
s˘x
)

151 
s˘x
->
°©e
[0] = 
H0
;

152 
s˘x
->
°©e
[1] = 
H1
;

153 
s˘x
->
°©e
[2] = 
H2
;

154 
s˘x
->
°©e
[3] = 
H3
;

155 
s˘x
->
°©e
[4] = 
H4
;

156 
s˘x
->
°©e
[5] = 
H5
;

157 
s˘x
->
°©e
[6] = 
H6
;

158 
s˘x
->
°©e
[7] = 
H7
;

159 
s˘x
->
cou¡
[0] = sctx->count[1] = sctx->count[2] = sctx->count[3] = 0;

160 
	}
}

162 
	$fio_sha512_upd©e
(
fio_sha512_˘x
 *
s˘x
, c⁄° 
uöt8_t
 *
d©a
,

163 
Àn
)

165 
i
, 
idx
, 
∑π_Àn
;

168 
idx
 = ()((
s˘x
->
cou¡
[0] >> 3) & 0x7F);

171 i‡((
s˘x
->
cou¡
[0] +(
Àn
 << 3)) < (len << 3)) {

172 i‡((
s˘x
->
cou¡
[1] += 1) < 1)

173 i‡((
s˘x
->
cou¡
[2] += 1) < 1)

174 
s˘x
->
cou¡
[3]++;

175 
s˘x
->
cou¡
[1] +(
Àn
 >> 29);

178 
∑π_Àn
 = 128 - 
idx
;

181 i‡(
Àn
 >
∑π_Àn
) {

182 
	`mem˝y
(&
s˘x
->
buf
[
idx
], 
d©a
, 
∑π_Àn
);

183 
	`sha512_å™sf‹m
(
s˘x
->
°©e
, s˘x->
W
, s˘x->
buf
);

185 
i
 = 
∑π_Àn
; i + 127 < 
Àn
; i+=128)

186 
	`sha512_å™sf‹m
(
s˘x
->
°©e
, s˘x->
W
, &
d©a
[
i
]);

188 
idx
 = 0;

190 
i
 = 0;

194 
	`mem˝y
(&
s˘x
->
buf
[
idx
], &
d©a
[
i
], 
Àn
 - i);

197 
	`mem£t
(
s˘x
->
W
, 0, (sctx->W));

198 
	}
}

	@/home/terekhov/tmp/fio/fio/crc/sha512.h

1 #i‚de‡
FIO_SHA512_H


2 
	#FIO_SHA512_H


	)

4 
	sfio_sha512_˘x
 {

5 
uöt64_t
 
	m°©e
[8];

6 
uöt32_t
 
	mcou¡
[4];

7 
uöt8_t
 *
	mbuf
;

8 
uöt64_t
 
	mW
[80];

11 
fio_sha512_öô
(
fio_sha512_˘x
 *);

12 
fio_sha512_upd©e
(
fio_sha512_˘x
 *, c⁄° 
uöt8_t
 *, );

	@/home/terekhov/tmp/fio/fio/crc/test.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

5 
	~"../fio.h
"

6 
	~"../gëtime.h
"

7 
	~"../fio_time.h
"

8 
	~"../vîify.h
"

10 
	~"../¸c/md5.h
"

11 
	~"../¸c/¸c64.h
"

12 
	~"../¸c/¸c32.h
"

13 
	~"../¸c/¸c32c.h
"

14 
	~"../¸c/¸c16.h
"

15 
	~"../¸c/¸c7.h
"

16 
	~"../¸c/sha1.h
"

17 
	~"../¸c/sha256.h
"

18 
	~"../¸c/sha512.h
"

19 
	~"../¸c/xxhash.h
"

21 
	~"ã°.h
"

23 
	#CHUNK
 131072U

	)

24 
	#NR_CHUNKS
 2048U

	)

26 
	sã°_ty≥
 {

27 c⁄° *
	m«me
;

28 
	mmask
;

29 
uöt64_t
 (*
‚
)();

33 
	mT_MD5
 = 1U << 0,

34 
	mT_CRC64
 = 1U << 1,

35 
	mT_CRC32
 = 1U << 2,

36 
	mT_CRC32C
 = 1U << 3,

37 
	mT_CRC16
 = 1U << 4,

38 
	mT_CRC7
 = 1U << 5,

39 
	mT_SHA1
 = 1U << 6,

40 
	mT_SHA256
 = 1U << 7,

41 
	mT_SHA512
 = 1U << 8,

42 
	mT_XXHASH
 = 1U << 9,

45 
	$øndomize_buf
(*
buf
, 
size
, 
£ed
)

47 
‰™d_°©e
 
°©e
;

49 
	`öô_ønd_£ed
(&
°©e
, 
£ed
);

50 
	`fûl_øndom_buf
(&
°©e
, 
buf
, 
size
);

51 
	}
}

53 
uöt64_t
 
	$t_md5
()

55 
uöt32_t
 
dige°
[4];

56 
fio_md5_˘x
 
˘x
 = { .
hash
 = 
dige°
 };

57 
timevÆ
 
s
;

58 
uöt64_t
 
ªt
;

59 *
buf
;

60 
i
;

62 
	`fio_md5_öô
(&
˘x
);

64 
buf
 = 
	`mÆloc
(
CHUNK
);

65 
	`øndomize_buf
(
buf
, 
CHUNK
, 0x8989);

67 
	`fio_gëtime
(&
s
, 
NULL
);

68 
i
 = 0; i < 
NR_CHUNKS
; i++)

69 
	`fio_md5_upd©e
(&
˘x
, 
buf
, 
CHUNK
);

71 
ªt
 = 
	`utime_sö˚_now
(&
s
);

72 
	`‰ì
(
buf
);

73  
ªt
;

74 
	}
}

76 
uöt64_t
 
	$t_¸c64
()

78 
timevÆ
 
s
;

79 
uöt64_t
 
ªt
;

80 *
buf
;

81 
i
;

83 
buf
 = 
	`mÆloc
(
CHUNK
);

84 
	`øndomize_buf
(
buf
, 
CHUNK
, 0x8989);

86 
	`fio_gëtime
(&
s
, 
NULL
);

87 
i
 = 0; i < 
NR_CHUNKS
; i++)

88 
	`fio_¸c64
(
buf
, 
CHUNK
);

90 
ªt
 = 
	`utime_sö˚_now
(&
s
);

91 
	`‰ì
(
buf
);

92  
ªt
;

93 
	}
}

95 
uöt64_t
 
	$t_¸c32
()

97 
timevÆ
 
s
;

98 
uöt64_t
 
ªt
;

99 *
buf
;

100 
i
;

102 
buf
 = 
	`mÆloc
(
CHUNK
);

103 
	`øndomize_buf
(
buf
, 
CHUNK
, 0x8989);

105 
	`fio_gëtime
(&
s
, 
NULL
);

106 
i
 = 0; i < 
NR_CHUNKS
; i++)

107 
	`fio_¸c32
(
buf
, 
CHUNK
);

109 
ªt
 = 
	`utime_sö˚_now
(&
s
);

110 
	`‰ì
(
buf
);

111  
ªt
;

112 
	}
}

114 
uöt64_t
 
	$t_¸c32c
()

116 
timevÆ
 
s
;

117 
uöt64_t
 
ªt
;

118 *
buf
;

119 
i
;

121 
buf
 = 
	`mÆloc
(
CHUNK
);

122 
	`øndomize_buf
(
buf
, 
CHUNK
, 0x8989);

124 
	`fio_gëtime
(&
s
, 
NULL
);

125 
i
 = 0; i < 
NR_CHUNKS
; i++)

126 
	`fio_¸c32c
(
buf
, 
CHUNK
);

128 
ªt
 = 
	`utime_sö˚_now
(&
s
);

129 
	`‰ì
(
buf
);

130  
ªt
;

131 
	}
}

133 
uöt64_t
 
	$t_¸c16
()

135 
timevÆ
 
s
;

136 
uöt64_t
 
ªt
;

137 *
buf
;

138 
i
;

140 
buf
 = 
	`mÆloc
(
CHUNK
);

141 
	`øndomize_buf
(
buf
, 
CHUNK
, 0x8989);

143 
	`fio_gëtime
(&
s
, 
NULL
);

144 
i
 = 0; i < 
NR_CHUNKS
; i++)

145 
	`fio_¸c16
(
buf
, 
CHUNK
);

147 
ªt
 = 
	`utime_sö˚_now
(&
s
);

148 
	`‰ì
(
buf
);

149  
ªt
;

150 
	}
}

152 
uöt64_t
 
	$t_¸c7
()

154 
timevÆ
 
s
;

155 
uöt64_t
 
ªt
;

156 *
buf
;

157 
i
;

159 
buf
 = 
	`mÆloc
(
CHUNK
);

160 
	`øndomize_buf
(
buf
, 
CHUNK
, 0x8989);

162 
	`fio_gëtime
(&
s
, 
NULL
);

163 
i
 = 0; i < 
NR_CHUNKS
; i++)

164 
	`fio_¸c7
(
buf
, 
CHUNK
);

166 
ªt
 = 
	`utime_sö˚_now
(&
s
);

167 
	`‰ì
(
buf
);

168  
ªt
;

169 
	}
}

171 
uöt64_t
 
	$t_sha1
()

173 
uöt32_t
 
sha
[5];

174 
fio_sha1_˘x
 
˘x
 = { .
H
 = 
sha
 };

175 
timevÆ
 
s
;

176 
uöt64_t
 
ªt
;

177 *
buf
;

178 
i
;

180 
	`fio_sha1_öô
(&
˘x
);

182 
buf
 = 
	`mÆloc
(
CHUNK
);

183 
	`øndomize_buf
(
buf
, 
CHUNK
, 0x8989);

185 
	`fio_gëtime
(&
s
, 
NULL
);

186 
i
 = 0; i < 
NR_CHUNKS
; i++)

187 
	`fio_sha1_upd©e
(&
˘x
, 
buf
, 
CHUNK
);

189 
ªt
 = 
	`utime_sö˚_now
(&
s
);

190 
	`‰ì
(
buf
);

191  
ªt
;

192 
	}
}

194 
uöt64_t
 
	$t_sha256
()

196 
uöt8_t
 
sha
[64];

197 
fio_sha256_˘x
 
˘x
 = { .
buf
 = 
sha
 };

198 
timevÆ
 
s
;

199 
uöt64_t
 
ªt
;

200 *
buf
;

201 
i
;

203 
	`fio_sha256_öô
(&
˘x
);

205 
buf
 = 
	`mÆloc
(
CHUNK
);

206 
	`øndomize_buf
(
buf
, 
CHUNK
, 0x8989);

208 
	`fio_gëtime
(&
s
, 
NULL
);

209 
i
 = 0; i < 
NR_CHUNKS
; i++)

210 
	`fio_sha256_upd©e
(&
˘x
, 
buf
, 
CHUNK
);

212 
ªt
 = 
	`utime_sö˚_now
(&
s
);

213 
	`‰ì
(
buf
);

214  
ªt
;

215 
	}
}

217 
uöt64_t
 
	$t_sha512
()

219 
uöt8_t
 
sha
[128];

220 
fio_sha512_˘x
 
˘x
 = { .
buf
 = 
sha
 };

221 
timevÆ
 
s
;

222 
uöt64_t
 
ªt
;

223 *
buf
;

224 
i
;

226 
	`fio_sha512_öô
(&
˘x
);

228 
buf
 = 
	`mÆloc
(
CHUNK
);

229 
	`øndomize_buf
(
buf
, 
CHUNK
, 0x8989);

231 
	`fio_gëtime
(&
s
, 
NULL
);

232 
i
 = 0; i < 
NR_CHUNKS
; i++)

233 
	`fio_sha512_upd©e
(&
˘x
, 
buf
, 
CHUNK
);

235 
ªt
 = 
	`utime_sö˚_now
(&
s
);

236 
	`‰ì
(
buf
);

237  
ªt
;

238 
	}
}

240 
uöt64_t
 
	$t_xxhash
()

242 *
°©e
;

243 
timevÆ
 
s
;

244 
uöt64_t
 
ªt
;

245 *
buf
;

246 
i
;

248 
°©e
 = 
	`XXH32_öô
(0x8989);

250 
buf
 = 
	`mÆloc
(
CHUNK
);

251 
	`øndomize_buf
(
buf
, 
CHUNK
, 0x8989);

253 
	`fio_gëtime
(&
s
, 
NULL
);

254 
i
 = 0; i < 
NR_CHUNKS
; i++)

255 
	`XXH32_upd©e
(
°©e
, 
buf
, 
CHUNK
);

257 
	`XXH32_dige°
(
°©e
);

258 
ªt
 = 
	`utime_sö˚_now
(&
s
);

259 
	`‰ì
(
buf
);

260  
ªt
;

261 
	}
}

263 
ã°_ty≥
 
	gt
[] = {

265 .
«me
 = "md5",

266 .
	gmask
 = 
T_MD5
,

267 .
	g‚
 = 
t_md5
,

270 .
	g«me
 = "crc64",

271 .
	gmask
 = 
T_CRC64
,

272 .
	g‚
 = 
t_¸c64
,

275 .
	g«me
 = "crc32",

276 .
	gmask
 = 
T_CRC32
,

277 .
	g‚
 = 
t_¸c32
,

280 .
	g«me
 = "crc32c",

281 .
	gmask
 = 
T_CRC32C
,

282 .
	g‚
 = 
t_¸c32c
,

285 .
	g«me
 = "crc16",

286 .
	gmask
 = 
T_CRC16
,

287 .
	g‚
 = 
t_¸c16
,

290 .
	g«me
 = "crc7",

291 .
	gmask
 = 
T_CRC7
,

292 .
	g‚
 = 
t_¸c7
,

295 .
	g«me
 = "sha1",

296 .
	gmask
 = 
T_SHA1
,

297 .
	g‚
 = 
t_sha1
,

300 .
	g«me
 = "sha256",

301 .
	gmask
 = 
T_SHA256
,

302 .
	g‚
 = 
t_sha256
,

305 .
	g«me
 = "sha512",

306 .
	gmask
 = 
T_SHA512
,

307 .
	g‚
 = 
t_sha512
,

310 .
	g«me
 = "xxhash",

311 .
	gmask
 = 
T_XXHASH
,

312 .
	g‚
 = 
t_xxhash
,

315 .
	g«me
 = 
NULL
,

319 
	$gë_ã°_mask
(c⁄° *
ty≥
)

321 *
o°r
, *
°r
 = 
	`°rdup
(
ty≥
);

322 
mask
;

323 *
«me
;

324 
i
;

326 
o°r
 = 
°r
;

327 
mask
 = 0;

328 (
«me
 = 
	`°r£p
(&
°r
, ",")Ë!
NULL
) {

329 
i
 = 0; 
t
[i].
«me
; i++) {

330 i‡(!
	`°rcmp
(
t
[
i
].
«me
,Çame)) {

331 
mask
 |
t
[
i
].mask;

337 
	`‰ì
(
o°r
);

338  
mask
;

339 
	}
}

341 
	$li°_ty≥s
()

343 
i
;

345 
i
 = 0; 
t
[i].
«me
; i++)

346 
	`¥ötf
("%s\n", 
t
[
i
].
«me
);

349 
	}
}

351 
	$fio_¸˘e°
(c⁄° *
ty≥
)

353 
ã°_mask
 = 0;

354 
uöt64_t
 
mb
 = 
CHUNK
 * 
NR_CHUNKS
;

355 
i
;

357 
	`¸c32c_öãl_¥obe
();

359 i‡(!
ty≥
)

360 
ã°_mask
 = ~0U;

361 i‡(!
	`°rcmp
(
ty≥
, "help") || !strcmp(type, "list"))

362  
	`li°_ty≥s
();

364 
ã°_mask
 = 
	`gë_ã°_mask
(
ty≥
);

366 
i
 = 0; 
t
[i].
«me
; i++) {

367 
mb_£c
;

368 
uöt64_t
 
u£c
;

370 i‡(!(
t
[
i
].
mask
 & 
ã°_mask
))

373 
u£c
 = 
t
[
i
].
	`‚
();

374 
mb_£c
 = (Ë
mb
 / (Ë
u£c
;

375 
mb_£c
 /= (1.024 * 1.024);

376 
	`¥ötf
("%s:\t%.2‡MB/£c\n", 
t
[
i
].
«me
, 
mb_£c
);

380 
	}
}

	@/home/terekhov/tmp/fio/fio/crc/test.h

1 #i‚de‡
FIO_CRC_TEST_H


2 
	#FIO_CRC_TEST_H


	)

4 
fio_¸˘e°
(c⁄° *
ty≥
);

	@/home/terekhov/tmp/fio/fio/crc/xxhash.c

41 #i‡
deföed
(
__ARM_FEATURE_UNALIGNED
Ë|| deföed(
__i386
Ë|| deföed(
_M_IX86
Ë|| deföed(
__x86_64__
Ë|| deföed(
_M_X64
)

42 
	#XXH_USE_UNALIGNED_ACCESS
 1

	)

59 
	#XXH_FORCE_NATIVE_FORMAT
 0

	)

65 
	~"xxhash.h
"

66 
	~<°dlib.h
>

67 
	~<°rög.h
>

70 #i‡
deföed
(
__GNUC__
Ë&& !deföed(
XXH_USE_UNALIGNED_ACCESS
)

71 
	#_PACKED
 
	`__©åibuã__
 ((
∑cked
))

	)

73 
	#_PACKED


	)

76 #i‡!
deföed
(
XXH_USE_UNALIGNED_ACCESS
Ë&& !deföed(
__GNUC__
)

77 #ifde‡
__IBMC__


78 #¥agm®
∑ck
(1)

80 #¥agm®
∑ck
(
push
, 1)

84 
	s_uöt32_t_S
 { 
uöt32_t
 
	mv
; } 
	t_PACKED
 
	tuöt32_t_S
;

86 #i‡!
deföed
(
XXH_USE_UNALIGNED_ACCESS
Ë&& !deföed(
__GNUC__
)

87 #¥agm®
∑ck
(
p›
)

90 
	#A32
(
x
Ë(((
uöt32_t_S
 *)(x))->
v
)

	)

96 
	#GCC_VERSION
 (
__GNUC__
 * 100 + 
__GNUC_MINOR__
)

	)

99 #i‡
deföed
(
_MSC_VER
)

100 
	#XXH_rŸl32
(
x
,
r
Ë
	`_rŸl
(x,r)

	)

102 
	#XXH_rŸl32
(
x
,
r
Ë((x <<ÑË| (x >> (32 -Ñ)))

	)

105 #i‡
deföed
(
_MSC_VER
)

106 
	#XXH_sw≠32
 
_byãsw≠_ul⁄g


	)

107 #ñi‡
GCC_VERSION
 >= 403

108 
	#XXH_sw≠32
 
__buûtö_bsw≠32


	)

110 
ölöe
 
uöt32_t
 
	$XXH_sw≠32
 (
uöt32_t
 
x
)

112  ((
x
 << 24) & 0xff000000 ) |

113 ((
x
 << 8) & 0x00ff0000 ) |

114 ((
x
 >> 8) & 0x0000ff00 ) |

115 ((
x
 >> 24) & 0x000000ff );

116 
	}
}

123 
	#PRIME32_1
 2654435761U

	)

124 
	#PRIME32_2
 2246822519U

	)

125 
	#PRIME32_3
 3266489917U

	)

126 
	#PRIME32_4
 668265263U

	)

127 
	#PRIME32_5
 374761393U

	)

133 íum { 
	mXXH_bigEndün
=0, 
	mXXH_lôéeEndün
=1 } 
	tXXH_ídü√ss
;

134 #i‚de‡
XXH_CPU_LITTLE_ENDIAN


135 c⁄° 
	g⁄e
 = 1;

136 
	#XXH_CPU_LITTLE_ENDIAN
 (*(*)(&
⁄e
))

	)

143 
	#XXH_STATIC_ASSERT
(
c
Ë{Énum { 
XXH_°©ic_as£π
 = 1/(!!(c)) }; }

144 

	)

149 íum { 
	mXXH_Æig√d
, 
	mXXH_u«lig√d
 } 
	tXXH_Æignmít
;

151 
uöt32_t
 
	$XXH_ªadLE32_Æign
(c⁄° 
uöt32_t
* 
±r
, 
XXH_ídü√ss
 
ídün
, 
XXH_Æignmít
 
Æign
)

153 i‡(
Æign
==
XXH_u«lig√d
)

154  
ídün
==
XXH_lôéeEndün
 ? 
	`A32
(
±r
Ë: 
	`XXH_sw≠32
(A32(ptr));

156  
ídün
==
XXH_lôéeEndün
 ? *
±r
 : 
	`XXH_sw≠32
(*ptr);

157 
	}
}

159 
uöt32_t
 
	$XXH_ªadLE32
(c⁄° 
uöt32_t
* 
±r
, 
XXH_ídü√ss
 
ídün
Ë{  
	`XXH_ªadLE32_Æign
’å,Éndün, 
XXH_u«lig√d
); 
	}
}

165 
uöt32_t
 
	$XXH32_ídün_Æign
(c⁄° * 
öput
, 
Àn
, 
uöt32_t
 
£ed
, 
XXH_ídü√ss
 
ídün
, 
XXH_Æignmít
 
Æign
)

167 c⁄° 
uöt8_t
 *
p
 = (c⁄° uöt8_à*)
öput
;

168 c⁄° 
uöt8_t
 * c⁄° 
bEnd
 = 
p
 + 
Àn
;

169 
uöt32_t
 
h32
;

171 #ifde‡
XXH_ACCEPT_NULL_INPUT_POINTER


172 i‡(
p
==
NULL
Ë{ 
Àn
=0;Ö=(c⁄° 
uöt8_t
 *)(
size_t
)16; }

175 i‡(
Àn
>=16)

177 c⁄° 
uöt8_t
 * c⁄° 
limô
 = 
bEnd
 - 16;

178 
uöt32_t
 
v1
 = 
£ed
 + 
PRIME32_1
 + 
PRIME32_2
;

179 
uöt32_t
 
v2
 = 
£ed
 + 
PRIME32_2
;

180 
uöt32_t
 
v3
 = 
£ed
 + 0;

181 
uöt32_t
 
v4
 = 
£ed
 - 
PRIME32_1
;

185 
v1
 +
	`XXH_ªadLE32_Æign
((c⁄° 
uöt32_t
*)
p
, 
ídün
, 
Æign
Ë* 
PRIME32_2
; v1 = 
	`XXH_rŸl32
(v1, 13); v1 *
PRIME32_1
;Ö+=4;

186 
v2
 +
	`XXH_ªadLE32_Æign
((c⁄° 
uöt32_t
*)
p
, 
ídün
, 
Æign
Ë* 
PRIME32_2
; v2 = 
	`XXH_rŸl32
(v2, 13); v2 *
PRIME32_1
;Ö+=4;

187 
v3
 +
	`XXH_ªadLE32_Æign
((c⁄° 
uöt32_t
*)
p
, 
ídün
, 
Æign
Ë* 
PRIME32_2
; v3 = 
	`XXH_rŸl32
(v3, 13); v3 *
PRIME32_1
;Ö+=4;

188 
v4
 +
	`XXH_ªadLE32_Æign
((c⁄° 
uöt32_t
*)
p
, 
ídün
, 
Æign
Ë* 
PRIME32_2
; v4 = 
	`XXH_rŸl32
(v4, 13); v4 *
PRIME32_1
;Ö+=4;

189 } 
p
<=
limô
);

191 
h32
 = 
	`XXH_rŸl32
(
v1
, 1Ë+ XXH_rŸl32(
v2
, 7Ë+ XXH_rŸl32(
v3
, 12Ë+ XXH_rŸl32(
v4
, 18);

195 
h32
 = 
£ed
 + 
PRIME32_5
;

198 
h32
 +(
uöt32_t
Ë
Àn
;

200 
p
<=
bEnd
-4)

202 
h32
 +
	`XXH_ªadLE32_Æign
((c⁄° 
uöt32_t
*)
p
, 
ídün
, 
Æign
Ë* 
PRIME32_3
;

203 
h32
 = 
	`XXH_rŸl32
(h32, 17Ë* 
PRIME32_4
 ;

204 
p
+=4;

207 
p
<
bEnd
)

209 
h32
 +(*
p
Ë* 
PRIME32_5
;

210 
h32
 = 
	`XXH_rŸl32
(h32, 11Ë* 
PRIME32_1
 ;

211 
p
++;

214 
h32
 ^= h32 >> 15;

215 
h32
 *
PRIME32_2
;

216 
h32
 ^= h32 >> 13;

217 
h32
 *
PRIME32_3
;

218 
h32
 ^= h32 >> 16;

220  
h32
;

221 
	}
}

224 
uöt32_t
 
	$XXH32
(c⁄° * 
öput
, 
Àn
, 
uöt32_t
 
£ed
)

228 * 
°©e
 = 
	`XXH32_öô
(
£ed
);

229 
	`XXH32_upd©e
(
°©e
, 
öput
, 
Àn
);

230  
	`XXH32_dige°
(
°©e
);

232 
XXH_ídü√ss
 
ídün_dëe˘ed
 = (XXH_ídü√ss)
XXH_CPU_LITTLE_ENDIAN
;

234 #i‡!
	`deföed
(
XXH_USE_UNALIGNED_ACCESS
)

235 i‡((((
size_t
)
öput
) & 3))

237 i‡((
ídün_dëe˘ed
==
XXH_lôéeEndün
Ë|| 
XXH_FORCE_NATIVE_FORMAT
)

238  
	`XXH32_ídün_Æign
(
öput
, 
Àn
, 
£ed
, 
XXH_lôéeEndün
, 
XXH_Æig√d
);

240  
	`XXH32_ídün_Æign
(
öput
, 
Àn
, 
£ed
, 
XXH_bigEndün
, 
XXH_Æig√d
);

244 i‡((
ídün_dëe˘ed
==
XXH_lôéeEndün
Ë|| 
XXH_FORCE_NATIVE_FORMAT
)

245  
	`XXH32_ídün_Æign
(
öput
, 
Àn
, 
£ed
, 
XXH_lôéeEndün
, 
XXH_u«lig√d
);

247  
	`XXH32_ídün_Æign
(
öput
, 
Àn
, 
£ed
, 
XXH_bigEndün
, 
XXH_u«lig√d
);

249 
	}
}

256 
	$XXH32_sizeofSèã
()

258 
	`XXH_STATIC_ASSERT
(
XXH32_SIZEOFSTATE
 >(
XXH_°©e32_t
));

259  (
XXH_°©e32_t
);

260 
	}
}

263 
XXH_îr‹code
 
	$XXH32_ª£tSèã
(* 
°©e_ö
, 
uöt32_t
 
£ed
)

265 
XXH_°©e32_t
 * 
°©e
 = (XXH_°©e32_à*Ë
°©e_ö
;

266 
°©e
->
£ed
 = seed;

267 
°©e
->
v1
 = 
£ed
 + 
PRIME32_1
 + 
PRIME32_2
;

268 
°©e
->
v2
 = 
£ed
 + 
PRIME32_2
;

269 
°©e
->
v3
 = 
£ed
 + 0;

270 
°©e
->
v4
 = 
£ed
 - 
PRIME32_1
;

271 
°©e
->
tŸÆ_Àn
 = 0;

272 
°©e
->
memsize
 = 0;

273  
XXH_OK
;

274 
	}
}

277 * 
	$XXH32_öô
 (
uöt32_t
 
£ed
)

279 *
°©e
 = 
	`mÆloc
 ((
XXH_°©e32_t
));

280 
	`XXH32_ª£tSèã
(
°©e
, 
£ed
);

281  
°©e
;

282 
	}
}

285 
XXH_îr‹code
 
	$XXH32_upd©e_ídün
 (* 
°©e_ö
, c⁄° * 
öput
, 
Àn
, 
XXH_ídü√ss
 
ídün
)

287 
XXH_°©e32_t
 * 
°©e
 = (XXH_°©e32_à*Ë
°©e_ö
;

288 c⁄° 
uöt8_t
 *
p
 = (c⁄° uöt8_à*)
öput
;

289 c⁄° 
uöt8_t
 * c⁄° 
bEnd
 = 
p
 + 
Àn
;

291 #ifde‡
XXH_ACCEPT_NULL_INPUT_POINTER


292 i‡(
öput
==
NULL
Ë 
XXH_ERROR
;

295 
°©e
->
tŸÆ_Àn
 +
Àn
;

297 i‡(
°©e
->
memsize
 + 
Àn
 < 16)

299 
	`mem˝y
(
°©e
->
mem‹y
 + sèã->
memsize
, 
öput
, 
Àn
);

300 
°©e
->
memsize
 +
Àn
;

301  
XXH_OK
;

304 i‡(
°©e
->
memsize
)

306 
	`mem˝y
(
°©e
->
mem‹y
 + sèã->
memsize
, 
öput
, 16-state->memsize);

308 c⁄° 
uöt32_t
* 
p32
 = (c⁄° uöt32_t*)
°©e
->
mem‹y
;

309 
°©e
->
v1
 +
	`XXH_ªadLE32
(
p32
, 
ídün
Ë* 
PRIME32_2
; sèã->v1 = 
	`XXH_rŸl32
(°©e->v1, 13); sèã->v1 *
PRIME32_1
;Ö32++;

310 
°©e
->
v2
 +
	`XXH_ªadLE32
(
p32
, 
ídün
Ë* 
PRIME32_2
; sèã->v2 = 
	`XXH_rŸl32
(°©e->v2, 13); sèã->v2 *
PRIME32_1
;Ö32++;

311 
°©e
->
v3
 +
	`XXH_ªadLE32
(
p32
, 
ídün
Ë* 
PRIME32_2
; sèã->v3 = 
	`XXH_rŸl32
(°©e->v3, 13); sèã->v3 *
PRIME32_1
;Ö32++;

312 
°©e
->
v4
 +
	`XXH_ªadLE32
(
p32
, 
ídün
Ë* 
PRIME32_2
; sèã->v4 = 
	`XXH_rŸl32
(°©e->v4, 13); sèã->v4 *
PRIME32_1
;Ö32++;

314 
p
 +16-
°©e
->
memsize
;

315 
°©e
->
memsize
 = 0;

318 i‡(
p
 <
bEnd
-16)

320 c⁄° 
uöt8_t
 * c⁄° 
limô
 = 
bEnd
 - 16;

321 
uöt32_t
 
v1
 = 
°©e
->v1;

322 
uöt32_t
 
v2
 = 
°©e
->v2;

323 
uöt32_t
 
v3
 = 
°©e
->v3;

324 
uöt32_t
 
v4
 = 
°©e
->v4;

328 
v1
 +
	`XXH_ªadLE32
((c⁄° 
uöt32_t
*)
p
, 
ídün
Ë* 
PRIME32_2
; v1 = 
	`XXH_rŸl32
(v1, 13); v1 *
PRIME32_1
;Ö+=4;

329 
v2
 +
	`XXH_ªadLE32
((c⁄° 
uöt32_t
*)
p
, 
ídün
Ë* 
PRIME32_2
; v2 = 
	`XXH_rŸl32
(v2, 13); v2 *
PRIME32_1
;Ö+=4;

330 
v3
 +
	`XXH_ªadLE32
((c⁄° 
uöt32_t
*)
p
, 
ídün
Ë* 
PRIME32_2
; v3 = 
	`XXH_rŸl32
(v3, 13); v3 *
PRIME32_1
;Ö+=4;

331 
v4
 +
	`XXH_ªadLE32
((c⁄° 
uöt32_t
*)
p
, 
ídün
Ë* 
PRIME32_2
; v4 = 
	`XXH_rŸl32
(v4, 13); v4 *
PRIME32_1
;Ö+=4;

332 } 
p
<=
limô
);

334 
°©e
->
v1
 = v1;

335 
°©e
->
v2
 = v2;

336 
°©e
->
v3
 = v3;

337 
°©e
->
v4
 = v4;

340 i‡(
p
 < 
bEnd
)

342 
	`mem˝y
(
°©e
->
mem‹y
, 
p
, 
bEnd
-p);

343 
°©e
->
memsize
 = ()(
bEnd
-
p
);

346  
XXH_OK
;

347 
	}
}

349 
XXH_îr‹code
 
	$XXH32_upd©e
 (* 
°©e_ö
, c⁄° * 
öput
, 
Àn
)

351 
XXH_ídü√ss
 
ídün_dëe˘ed
 = (XXH_ídü√ss)
XXH_CPU_LITTLE_ENDIAN
;

353 i‡((
ídün_dëe˘ed
==
XXH_lôéeEndün
Ë|| 
XXH_FORCE_NATIVE_FORMAT
)

354  
	`XXH32_upd©e_ídün
(
°©e_ö
, 
öput
, 
Àn
, 
XXH_lôéeEndün
);

356  
	`XXH32_upd©e_ídün
(
°©e_ö
, 
öput
, 
Àn
, 
XXH_bigEndün
);

357 
	}
}

361 
uöt32_t
 
	$XXH32_öãrmedüãDige°_ídün
 (* 
°©e_ö
, 
XXH_ídü√ss
 
ídün
)

363 
XXH_°©e32_t
 * 
°©e
 = (XXH_°©e32_à*Ë
°©e_ö
;

364 c⁄° 
uöt8_t
 *
p
 = (c⁄° uöt8_à*)
°©e
->
mem‹y
;

365 
uöt8_t
 * 
bEnd
 = (uöt8_à*)
°©e
->
mem‹y
 + sèã->
memsize
;

366 
uöt32_t
 
h32
;

368 i‡(
°©e
->
tŸÆ_Àn
 >= 16)

370 
h32
 = 
	`XXH_rŸl32
(
°©e
->
v1
, 1Ë+ XXH_rŸl32(°©e->
v2
, 7Ë+ XXH_rŸl32(°©e->
v3
, 12Ë+ XXH_rŸl32(°©e->
v4
, 18);

374 
h32
 = 
°©e
->
£ed
 + 
PRIME32_5
;

377 
h32
 +(
uöt32_t
Ë
°©e
->
tŸÆ_Àn
;

379 
p
<=
bEnd
-4)

381 
h32
 +
	`XXH_ªadLE32
((c⁄° 
uöt32_t
*)
p
, 
ídün
Ë* 
PRIME32_3
;

382 
h32
 = 
	`XXH_rŸl32
(h32, 17Ë* 
PRIME32_4
;

383 
p
+=4;

386 
p
<
bEnd
)

388 
h32
 +(*
p
Ë* 
PRIME32_5
;

389 
h32
 = 
	`XXH_rŸl32
(h32, 11Ë* 
PRIME32_1
;

390 
p
++;

393 
h32
 ^= h32 >> 15;

394 
h32
 *
PRIME32_2
;

395 
h32
 ^= h32 >> 13;

396 
h32
 *
PRIME32_3
;

397 
h32
 ^= h32 >> 16;

399  
h32
;

400 
	}
}

403 
uöt32_t
 
	$XXH32_öãrmedüãDige°
 (* 
°©e_ö
)

405 
XXH_ídü√ss
 
ídün_dëe˘ed
 = (XXH_ídü√ss)
XXH_CPU_LITTLE_ENDIAN
;

407 i‡((
ídün_dëe˘ed
==
XXH_lôéeEndün
Ë|| 
XXH_FORCE_NATIVE_FORMAT
)

408  
	`XXH32_öãrmedüãDige°_ídün
(
°©e_ö
, 
XXH_lôéeEndün
);

410  
	`XXH32_öãrmedüãDige°_ídün
(
°©e_ö
, 
XXH_bigEndün
);

411 
	}
}

414 
uöt32_t
 
	$XXH32_dige°
 (* 
°©e_ö
)

416 
uöt32_t
 
h32
 = 
	`XXH32_öãrmedüãDige°
(
°©e_ö
);

418 
	`‰ì
(
°©e_ö
);

420  
h32
;

421 
	}
}

	@/home/terekhov/tmp/fio/fio/crc/xxhash.h

60 #¥agm®
⁄˚


62 #i‡
deföed
 (
__˝lu•lus
)

66 
	~<öây≥s.h
>

68 
	sXXH_°©e32_t


70 
uöt64_t
 
tŸÆ_Àn
;

71 
uöt32_t
 
£ed
;

72 
uöt32_t
 
v1
;

73 
uöt32_t
 
v2
;

74 
uöt32_t
 
v3
;

75 
uöt32_t
 
v4
;

76 
memsize
;

77 
mem‹y
[16];

83 íum { 
XXH_OK
=0, 
XXH_ERROR
 } 
	tXXH_îr‹code
;

91 
XXH32
 (c⁄° * 
öput
, 
Àn
, 
£ed
);

110 * 
XXH32_öô
 (
£ed
);

111 
XXH_îr‹code
 
XXH32_upd©e
 (* 
°©e
, c⁄° * 
öput
, 
Àn
);

112 
XXH32_dige°
 (* 
°©e
);

137 
XXH32_sizeofSèã
();

138 
XXH_îr‹code
 
XXH32_ª£tSèã
(* 
°©e
, 
£ed
);

140 
	#XXH32_SIZEOFSTATE
 48

	)

141 °ru˘ { 
Œ
[(
XXH32_SIZEOFSTATE
+(()-1))/()]; } 
	tXXH32_°©eS∑˚_t
;

154 
XXH32_öãrmedüãDige°
 (* 
°©e
);

169 
	#XXH32_„ed
 
XXH32_upd©e


	)

170 
	#XXH32_ªsu…
 
XXH32_dige°


	)

171 
	#XXH32_gëI¡îmedüãResu…
 
XXH32_öãrmedüãDige°


	)

175 #i‡
deföed
 (
__˝lu•lus
)

	@/home/terekhov/tmp/fio/fio/debug.c

1 
	~<°d¨g.h
>

2 
	~<sys/ty≥s.h
>

3 
	~<uni°d.h
>

4 
	~"debug.h
"

6 #ifde‡
FIO_INC_DEBUG


7 
	$__d¥öt
(
ty≥
, c⁄° *
°r
, ...)

9 
va_li°
 
¨gs
;

10 
pid_t
 
pid
;

12 
	`as£π
(
ty≥
 < 
FD_DEBUG_MAX
);

14 
pid
 = 
	`gëpid
();

15 i‡(
fio_debug_jobp
 && *fio_debug_jobp != -1U

16 && 
pid
 !*
fio_debug_jobp
)

19 
	`log_öfo
("%-8†", 
debug_Àvñs
[
ty≥
].
«me
);

20 
	`log_öfo
("%-5u ", (Ë
pid
);

22 
	`va_°¨t
(
¨gs
, 
°r
);

23 
	`log_vÆi°
(
°r
, 
¨gs
);

24 
	`va_íd
(
¨gs
);

25 
	}
}

	@/home/terekhov/tmp/fio/fio/debug.h

1 #i‚de‡
FIO_DEBUG_H


2 
	#FIO_DEBUG_H


	)

4 
	~<as£π.h
>

5 
	~"log.h
"

8 
	mFD_PROCESS
 = 0,

9 
	mFD_FILE
,

10 
	mFD_IO
,

11 
	mFD_MEM
,

12 
	mFD_BLKTRACE
,

13 
	mFD_VERIFY
,

14 
	mFD_RANDOM
,

15 
	mFD_PARSE
,

16 
	mFD_DISKUTIL
,

17 
	mFD_JOB
,

18 
	mFD_MUTEX
,

19 
	mFD_PROFILE
,

20 
	mFD_TIME
,

21 
	mFD_NET
,

22 
	mFD_RATE
,

23 
	mFD_DEBUG_MAX
,

26 
fio_debug_jobno
, *
fio_debug_jobp
;

28 #ifde‡
FIO_INC_DEBUG


29 
	sdebug_Àvñ
 {

30 c⁄° *
	m«me
;

31 c⁄° *
	mhñp
;

32 
	mshi·
;

33 
	mjobno
;

35 
debug_Àvñ
 
debug_Àvñs
[];

37 
fio_debug
;

39 
	$__d¥öt
(
ty≥
, c⁄° *
°r
, ...Ë
	`__©åibuã__
((
	`f‹m©
 (
¥ötf
, 2, 3)));

41 
	#d¥öt
(
ty≥
, 
°r
, 
¨gs
...) \

43 i‡((((1 << 
ty≥
)Ë& 
fio_debug
) == 0) \

45 
	`__d¥öt
((
ty≥
), (
°r
), ##
¨gs
); \

46 
	}
} 0) \

47 

	)

50 
ölöe
 
	$d¥öt
(
ty≥
, c⁄° *
°r
, ...)

52 
	}
}

	@/home/terekhov/tmp/fio/fio/diskutil.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~<sys/time.h
>

4 
	~<sys/ty≥s.h
>

5 
	~<sys/°©.h
>

6 
	~<dúít.h
>

7 
	~<libgí.h
>

8 
	~<m©h.h
>

9 
	~<as£π.h
>

11 
	~"fio.h
"

12 
	~"smÆloc.h
"

13 
	~"diskutû.h
"

15 
	gœ°_majdev
, 
	gœ°_mödev
;

16 
disk_utû
 *
	gœ°_du
;

18 
fio_muãx
 *
	gdisk_utû_muãx
;

20 
FLIST_HEAD
(
disk_li°
);

22 
disk_utû
 *
__öô_≥r_fûe_disk_utû
(
thªad_d©a
 *
td
,

23 
majdev
, 
mödev
, *
∑th
);

25 
	$disk_utû_‰ì
(
disk_utû
 *
du
)

27 i‡(
du
 =
œ°_du
)

28 
œ°_du
 = 
NULL
;

30 !
	`Êi°_em±y
(&
du
->
¶aves
)) {

31 
disk_utû
 *
¶ave
;

33 
¶ave
 = 
	`Êi°_íåy
(
du
->
¶aves
.
√xt
, 
disk_utû
, 
¶avñi°
);

34 
	`Êi°_dñ
(&
¶ave
->
¶avñi°
);

35 
¶ave
->
u£rs
--;

38 
	`fio_muãx_ªmove
(
du
->
lock
);

39 
	`s‰ì
(
du
);

40 
	}
}

42 
	$gë_io_ticks
(
disk_utû
 *
du
, 
disk_utû_°©
 *
dus
)

44 
ö_Êight
;

45 
£˘‹s
[2];

46 
löe
[256];

47 
FILE
 *
f
;

48 *
p
;

49 
ªt
;

51 
	`d¥öt
(
FD_DISKUTIL
, "›í sèàfûe: %s\n", 
du
->
∑th
);

53 
f
 = 
	`f›í
(
du
->
∑th
, "r");

54 i‡(!
f
)

57 
p
 = 
	`fgës
(
löe
, ÷öe), 
f
);

58 i‡(!
p
) {

59 
	`f˛o£
(
f
);

63 
	`d¥öt
(
FD_DISKUTIL
, "%s: %s", 
du
->
∑th
, 
p
);

65 
ªt
 = 
	`ssˇnf
(
p
, "%u %u %llu %u %u %u %llu %u %u %u %u\n",

66 &
dus
->
s
.
ios
[0],

67 &
dus
->
s
.
mîges
[0], &
£˘‹s
[0],

68 &
dus
->
s
.
ticks
[0], &dus->s.
ios
[1],

69 &
dus
->
s
.
mîges
[1], &
£˘‹s
[1],

70 &
dus
->
s
.
ticks
[1], &
ö_Êight
,

71 &
dus
->
s
.
io_ticks
,

72 &
dus
->
s
.
time_ö_queue
);

73 
	`f˛o£
(
f
);

74 
	`d¥öt
(
FD_DISKUTIL
, "%s: sèàªad ok? %d\n", 
du
->
∑th
, 
ªt
 == 1);

75 
dus
->
s
.
£˘‹s
[0] = sectors[0];

76 
dus
->
s
.
£˘‹s
[1] = sectors[1];

77  
ªt
 != 11;

78 
	}
}

80 
	$upd©e_io_tick_disk
(
disk_utû
 *
du
)

82 
disk_utû_°©
 
__dus
, *
dus
, *
ldus
;

83 
timevÆ
 
t
;

85 i‡(!
du
->
u£rs
)

87 i‡(
	`gë_io_ticks
(
du
, &
__dus
))

90 
dus
 = &
du
->dus;

91 
ldus
 = &
du
->
œ°_dus
;

93 
dus
->
s
.
£˘‹s
[0] +(
__dus
.s.£˘‹s[0] - 
ldus
->s.sectors[0]);

94 
dus
->
s
.
£˘‹s
[1] +(
__dus
.s.£˘‹s[1] - 
ldus
->s.sectors[1]);

95 
dus
->
s
.
ios
[0] +(
__dus
.s.ios[0] - 
ldus
->s.ios[0]);

96 
dus
->
s
.
ios
[1] +(
__dus
.s.ios[1] - 
ldus
->s.ios[1]);

97 
dus
->
s
.
mîges
[0] +(
__dus
.s.mîges[0] - 
ldus
->s.merges[0]);

98 
dus
->
s
.
mîges
[1] +(
__dus
.s.mîges[1] - 
ldus
->s.merges[1]);

99 
dus
->
s
.
ticks
[0] +(
__dus
.s.ticks[0] - 
ldus
->s.ticks[0]);

100 
dus
->
s
.
ticks
[1] +(
__dus
.s.ticks[1] - 
ldus
->s.ticks[1]);

101 
dus
->
s
.
io_ticks
 +(
__dus
.s.io_tick†- 
ldus
->s.io_ticks);

102 
dus
->
s
.
time_ö_queue
 +(
__dus
.s.time_ö_queuê- 
ldus
->s.time_in_queue);

104 
	`fio_gëtime
(&
t
, 
NULL
);

105 
dus
->
s
.
m£c
 +
	`mtime_sö˚
(&
du
->
time
, &
t
);

106 
	`mem˝y
(&
du
->
time
, &
t
, (t));

107 
	`mem˝y
(&
ldus
->
s
, &
__dus
.s, (__dus.s));

108 
	}
}

110 
	$upd©e_io_ticks
()

112 
Êi°_hód
 *
íåy
;

113 
disk_utû
 *
du
;

114 
ªt
 = 0;

116 
	`d¥öt
(
FD_DISKUTIL
, "update ioÅicks\n");

118 
	`fio_muãx_down
(
disk_utû_muãx
);

120 i‡(!
disk_utû_exô
) {

121 
	`Êi°_f‹_óch
(
íåy
, &
disk_li°
) {

122 
du
 = 
	`Êi°_íåy
(
íåy
, 
disk_utû
, 
li°
);

123 
	`upd©e_io_tick_disk
(
du
);

126 
ªt
 = 1;

128 
	`fio_muãx_up
(
disk_utû_muãx
);

129  
ªt
;

130 
	}
}

132 
disk_utû
 *
	$disk_utû_exi°s
(
maj‹
, 
mö‹
)

134 
Êi°_hód
 *
íåy
;

135 
disk_utû
 *
du
;

137 
	`fio_muãx_down
(
disk_utû_muãx
);

139 
	`Êi°_f‹_óch
(
íåy
, &
disk_li°
) {

140 
du
 = 
	`Êi°_íåy
(
íåy
, 
disk_utû
, 
li°
);

142 i‡(
maj‹
 =
du
->maj‹ && 
mö‹
 == du->minor) {

143 
	`fio_muãx_up
(
disk_utû_muãx
);

144  
du
;

148 
	`fio_muãx_up
(
disk_utû_muãx
);

149  
NULL
;

150 
	}
}

152 
	$gë_devi˚_numbîs
(*
fûe_«me
, *
maj
, *
mö
)

154 
°©
 
°
;

155 
majdev
, 
mödev
;

156 
ãm≤ame
[
PATH_MAX
], *
p
;

158 i‡(!
	`l°©
(
fûe_«me
, &
°
)) {

159 i‡(
	`S_ISBLK
(
°
.
°_mode
)) {

160 
majdev
 = 
	`maj‹
(
°
.
°_rdev
);

161 
mödev
 = 
	`mö‹
(
°
.
°_rdev
);

162 } i‡(
	`S_ISCHR
(
°
.
°_mode
)) {

163 
majdev
 = 
	`maj‹
(
°
.
°_rdev
);

164 
mödev
 = 
	`mö‹
(
°
.
°_rdev
);

165 i‡(
	`fio_lookup_øw
(
°
.
°_rdev
, &
majdev
, &
mödev
))

167 } i‡(
	`S_ISFIFO
(
°
.
°_mode
))

170 
majdev
 = 
	`maj‹
(
°
.
°_dev
);

171 
mödev
 = 
	`mö‹
(
°
.
°_dev
);

177 
	`°∫˝y
(
ãm≤ame
, 
fûe_«me
, 
PATH_MAX
 - 1);

178 
p
 = 
	`dú«me
(
ãm≤ame
);

179 i‡(
	`°©
(
p
, &
°
)) {

180 
	`≥º‹
("disk util stat");

184 
majdev
 = 
	`maj‹
(
°
.
°_dev
);

185 
mödev
 = 
	`mö‹
(
°
.
°_dev
);

188 *
mö
 = 
mödev
;

189 *
maj
 = 
majdev
;

192 
	}
}

194 
	$ªad_block_dev_íåy
(*
∑th
, *
maj
, *
mö
)

196 
löe
[256], *
p
;

197 
FILE
 *
f
;

199 
f
 = 
	`f›í
(
∑th
, "r");

200 i‡(!
f
) {

201 
	`≥º‹
("openÖath");

205 
p
 = 
	`fgës
(
löe
, ÷öe), 
f
);

206 
	`f˛o£
(
f
);

208 i‡(!
p
)

211 i‡(
	`ssˇnf
(
p
, "%u:%u", 
maj
, 
mö
) != 2)

215 
	}
}

217 
	$föd_add_disk_¶aves
(
thªad_d©a
 *
td
, *
∑th
,

218 
disk_utû
 *
ma°îdu
)

220 
DIR
 *
dúh™dÀ
 = 
NULL
;

221 
dúít
 *dúíà
NULL
;

222 
¶avesdú
[
PATH_MAX
], 
ãmµ©h
[PATH_MAX], 
¶avï©h
[PATH_MAX];

223 
disk_utû
 *
¶avedu
 = 
NULL
;

224 
majdev
, 
mödev
;

225 
ssize_t
 
lökÀn
;

227 
	`•rötf
(
¶avesdú
, "%s/%s", 
∑th
, "slaves");

228 
dúh™dÀ
 = 
	`›ídú
(
¶avesdú
);

229 i‡(!
dúh™dÀ
)

232 (
dúít
 = 
	`ªaddú
(
dúh™dÀ
)Ë!
NULL
) {

233 i‡(!
	`°rcmp
(
dúít
->
d_«me
, ".") ||

234 !
	`°rcmp
(
dúít
->
d_«me
, ".."))

237 
	`•rötf
(
ãmµ©h
, "%s%s%s", 
¶avesdú
, 
FIO_OS_PATH_SEPARATOR
, 
dúít
->
d_«me
);

242 
lökÀn
 = 
	`ªadlök
(
ãmµ©h
, 
¶avï©h
, 
PATH_MAX
 - 1);

243 i‡(
lökÀn
 < 0) {

244 
	`≥º‹
("readlink() for slave device.");

245 
	`˛o£dú
(
dúh™dÀ
);

248 
¶avï©h
[
lökÀn
] = '\0';

250 
	`•rötf
(
ãmµ©h
, "%s/%s/dev", 
¶avesdú
, 
¶avï©h
);

251 i‡(
	`ªad_block_dev_íåy
(
ãmµ©h
, &
majdev
, &
mödev
)) {

252 
	`≥º‹
("Error getting slave deviceÇumbers.");

253 
	`˛o£dú
(
dúh™dÀ
);

260 
¶avedu
 = 
	`disk_utû_exi°s
(
majdev
, 
mödev
);

261 i‡(
¶avedu
)

264 
	`•rötf
(
ãmµ©h
, "%s%s%s", 
¶avesdú
, 
FIO_OS_PATH_SEPARATOR
, 
¶avï©h
);

265 
	`__öô_≥r_fûe_disk_utû
(
td
, 
majdev
, 
mödev
, 
ãmµ©h
);

266 
¶avedu
 = 
	`disk_utû_exi°s
(
majdev
, 
mödev
);

270 i‡(
¶avedu
) {

271 
¶avedu
->
u£rs
++;

272 
	`Êi°_add_èû
(&
¶avedu
->
¶avñi°
, &
ma°îdu
->
¶aves
);

276 
	`˛o£dú
(
dúh™dÀ
);

277 
	}
}

279 
disk_utû
 *
	$disk_utû_add
(
thªad_d©a
 *
td
, 
majdev
,

280 
mödev
, *
∑th
)

282 
disk_utû
 *
du
, *
__du
;

283 
Êi°_hód
 *
íåy
;

284 
l
;

286 
	`d¥öt
(
FD_DISKUTIL
, "add maj/mö %d/%d: %s\n", 
majdev
, 
mödev
, 
∑th
);

288 
du
 = 
	`smÆloc
((*du));

289 i‡(!
du
) {

290 
	`log_îr
("fio: smalloc()ÖoolÉxhausted\n");

291  
NULL
;

294 
	`mem£t
(
du
, 0, (*du));

295 
	`INIT_FLIST_HEAD
(&
du
->
li°
);

296 
l
 = 
	`¢¥ötf
(
du
->
∑th
, (du->path), "%s/stat",Öath);

297 i‡(
l
 < 0 ||Ü >(
du
->
∑th
)) {

298 
	`log_îr
("constructedÖath \"%.100s[...]/stat\"ÜargerÅhan buffer (%zu bytes)\n",

299 
∑th
, (
du
->path) - 1);

300 
	`s‰ì
(
du
);

301  
NULL
;

303 
	`°∫˝y
((*Ë
du
->
dus
.
«me
, 
	`ba£«me
(
∑th
), 
FIO_DU_NAME_SZ
 - 1);

304 
du
->
sysfs_roŸ
 = 
∑th
;

305 
du
->
maj‹
 = 
majdev
;

306 
du
->
mö‹
 = 
mödev
;

307 
	`INIT_FLIST_HEAD
(&
du
->
¶avñi°
);

308 
	`INIT_FLIST_HEAD
(&
du
->
¶aves
);

309 
du
->
lock
 = 
	`fio_muãx_öô
(
FIO_MUTEX_UNLOCKED
);

310 
du
->
u£rs
 = 0;

312 
	`fio_muãx_down
(
disk_utû_muãx
);

314 
	`Êi°_f‹_óch
(
íåy
, &
disk_li°
) {

315 
__du
 = 
	`Êi°_íåy
(
íåy
, 
disk_utû
, 
li°
);

317 
	`d¥öt
(
FD_DISKUTIL
, "found %†öÜi°\n", 
__du
->
dus
.
«me
);

319 i‡(!
	`°rcmp
((*Ë
du
->
dus
.
«me
, (*Ë
__du
->dus.name)) {

320 
	`disk_utû_‰ì
(
du
);

321 
	`fio_muãx_up
(
disk_utû_muãx
);

322  
__du
;

326 
	`d¥öt
(
FD_DISKUTIL
, "add %†tÿli°\n", 
du
->
dus
.
«me
);

328 
	`fio_gëtime
(&
du
->
time
, 
NULL
);

329 
	`gë_io_ticks
(
du
, &du->
œ°_dus
);

331 
	`Êi°_add_èû
(&
du
->
li°
, &
disk_li°
);

332 
	`fio_muãx_up
(
disk_utû_muãx
);

334 
	`föd_add_disk_¶aves
(
td
, 
∑th
, 
du
);

335  
du
;

336 
	}
}

338 
	$check_dev_m©ch
(
majdev
, 
mödev
, *
∑th
)

340 
maj‹
, 
mö‹
;

342 i‡(
	`ªad_block_dev_íåy
(
∑th
, &
maj‹
, &
mö‹
))

345 i‡(
majdev
 =
maj‹
 && 
mödev
 =
mö‹
)

349 
	}
}

351 
	$föd_block_dú
(
majdev
, 
mödev
, *
∑th
, 
lök_ok
)

353 
dúít
 *
dú
;

354 
°©
 
°
;

355 
found
 = 0;

356 
DIR
 *
D
;

358 
D
 = 
	`›ídú
(
∑th
);

359 i‡(!
D
)

362 (
dú
 = 
	`ªaddú
(
D
)Ë!
NULL
) {

363 
fuŒ_∑th
[256];

365 i‡(!
	`°rcmp
(
dú
->
d_«me
, ".") || !strcmp(dir->d_name, ".."))

368 
	`•rötf
(
fuŒ_∑th
, "%s%s%s", 
∑th
, 
FIO_OS_PATH_SEPARATOR
, 
dú
->
d_«me
);

370 i‡(!
	`°rcmp
(
dú
->
d_«me
, "dev")) {

371 i‡(!
	`check_dev_m©ch
(
majdev
, 
mödev
, 
fuŒ_∑th
)) {

372 
found
 = 1;

377 i‡(
lök_ok
) {

378 i‡(
	`°©
(
fuŒ_∑th
, &
°
) == -1) {

379 
	`≥º‹
("stat");

383 i‡(
	`l°©
(
fuŒ_∑th
, &
°
) == -1) {

384 
	`≥º‹
("stat");

389 i‡(!
	`S_ISDIR
(
°
.
°_mode
Ë|| 
	`S_ISLNK
(st.st_mode))

392 
found
 = 
	`föd_block_dú
(
majdev
, 
mödev
, 
fuŒ_∑th
, 0);

393 i‡(
found
) {

394 
	`°r˝y
(
∑th
, 
fuŒ_∑th
);

399 
	`˛o£dú
(
D
);

400  
found
;

401 
	}
}

403 
disk_utû
 *
	$__öô_≥r_fûe_disk_utû
(
thªad_d©a
 *
td
,

404 
majdev
, 
mödev
,

405 *
∑th
)

407 
°©
 
°
;

408 
tmp
[
PATH_MAX
];

409 *
p
;

416 
	`•rötf
(
tmp
, "%s/../queue", 
∑th
);

417 i‡(!
	`°©
(
tmp
, &
°
)) {

418 
p
 = 
	`dú«me
(
∑th
);

419 
	`•rötf
(
tmp
, "%s/queue", 
p
);

420 i‡(
	`°©
(
tmp
, &
°
)) {

421 
	`log_îr
("unknown sysfsÜayout\n");

422  
NULL
;

424 
	`°∫˝y
(
tmp
, 
p
, 
PATH_MAX
 - 1);

425 
	`•rötf
(
∑th
, "%s", 
tmp
);

428 i‡(
td
->
o
.
ioscheduÀr
 && !td->
sysfs_roŸ
)

429 
td
->
sysfs_roŸ
 = 
	`°rdup
(
∑th
);

431  
	`disk_utû_add
(
td
, 
majdev
, 
mödev
, 
∑th
);

432 
	}
}

434 
disk_utû
 *
	$öô_≥r_fûe_disk_utû
(
thªad_d©a
 *
td
,

435 *
fûíame
)

438 
foo
[
PATH_MAX
];

439 
disk_utû
 *
du
;

440 
mödev
, 
majdev
;

442 i‡(
	`gë_devi˚_numbîs
(
fûíame
, &
majdev
, &
mödev
))

443  
NULL
;

445 
	`d¥öt
(
FD_DISKUTIL
, "%†bñ⁄g†tÿmaj/mö %d/%d\n", 
fûíame
, 
majdev
,

446 
mödev
);

448 
du
 = 
	`disk_utû_exi°s
(
majdev
, 
mödev
);

449 i‡(
du
) {

450 i‡(
td
->
o
.
ioscheduÀr
 && !td->
sysfs_roŸ
)

451 
td
->
sysfs_roŸ
 = 
	`°rdup
(
du
->sysfs_root);

453  
du
;

462 i‡(
mödev
 =
œ°_mödev
 && 
majdev
 =
œ°_majdev
)

463  
œ°_du
;

465 
œ°_mödev
 = 
mödev
;

466 
œ°_majdev
 = 
majdev
;

468 
	`•rötf
(
foo
, "/sys/block");

469 i‡(!
	`föd_block_dú
(
majdev
, 
mödev
, 
foo
, 1))

470  
NULL
;

472  
	`__öô_≥r_fûe_disk_utû
(
td
, 
majdev
, 
mödev
, 
foo
);

473 
	}
}

475 
disk_utû
 *
	$__öô_disk_utû
(
thªad_d©a
 *
td
,

476 
fio_fûe
 *
f
)

478  
	`öô_≥r_fûe_disk_utû
(
td
, 
f
->
fûe_«me
);

479 
	}
}

481 
	$öô_disk_utû
(
thªad_d©a
 *
td
)

483 
fio_fûe
 *
f
;

484 
i
;

486 i‡(!
td
->
o
.
do_disk_utû
 ||

487 (
td
->
io_›s
->
Êags
 & (
FIO_DISKLESSIO
 | 
FIO_NODISKUTIL
)))

490 
	`f‹_óch_fûe
(
td
, 
f
, 
i
)

491 
f
->
du
 = 
	`__öô_disk_utû
(
td
, f);

492 
	}
}

494 
	$show_agg_°©s
(
disk_utû_agg
 *
agg
, 
ãr£
)

496 i‡(!
agg
->
¶avecou¡
)

499 i‡(!
ãr£
) {

500 
	`log_öfo
(",ággrios=%u/%u,ággrmerge=%u/%u,ággrticks=%u/%u,"

502 
agg
->
ios
[0] /ágg->
¶avecou¡
,

503 
agg
->
ios
[1] /ágg->
¶avecou¡
,

504 
agg
->
mîges
[0] /ágg->
¶avecou¡
,

505 
agg
->
mîges
[1] /ágg->
¶avecou¡
,

506 
agg
->
ticks
[0] /ágg->
¶avecou¡
,

507 
agg
->
ticks
[1] /ágg->
¶avecou¡
,

508 
agg
->
time_ö_queue
 /ágg->
¶avecou¡
,

509 
agg
->
max_utû
.
u
.
f
);

511 
	`log_öfo
(";slaves;%u;%u;%u;%u;%u;%u;%u;%3.2f%%",

512 
agg
->
ios
[0] /ágg->
¶avecou¡
,

513 
agg
->
ios
[1] /ágg->
¶avecou¡
,

514 
agg
->
mîges
[0] /ágg->
¶avecou¡
,

515 
agg
->
mîges
[1] /ágg->
¶avecou¡
,

516 
agg
->
ticks
[0] /ágg->
¶avecou¡
,

517 
agg
->
ticks
[1] /ágg->
¶avecou¡
,

518 
agg
->
time_ö_queue
 /ágg->
¶avecou¡
,

519 
agg
->
max_utû
.
u
.
f
);

521 
	}
}

523 
	$aggªg©e_¶aves_°©s
(
disk_utû
 *
ma°îdu
)

525 
disk_utû_agg
 *
agg
 = &
ma°îdu
->agg;

526 
disk_utû_°©
 *
dus
;

527 
Êi°_hód
 *
íåy
;

528 
disk_utû
 *
¶avedu
;

529 
utû
;

531 
	`Êi°_f‹_óch
(
íåy
, &
ma°îdu
->
¶aves
) {

532 
¶avedu
 = 
	`Êi°_íåy
(
íåy
, 
disk_utû
, 
¶avñi°
);

533 
dus
 = &
¶avedu
->dus;

534 
agg
->
ios
[0] +
dus
->
s
.ios[0];

535 
agg
->
ios
[1] +
dus
->
s
.ios[1];

536 
agg
->
mîges
[0] +
dus
->
s
.merges[0];

537 
agg
->
mîges
[1] +
dus
->
s
.merges[1];

538 
agg
->
£˘‹s
[0] +
dus
->
s
.sectors[0];

539 
agg
->
£˘‹s
[1] +
dus
->
s
.sectors[1];

540 
agg
->
ticks
[0] +
dus
->
s
.ticks[0];

541 
agg
->
ticks
[1] +
dus
->
s
.ticks[1];

542 
agg
->
time_ö_queue
 +
dus
->
s
.time_in_queue;

543 
agg
->
¶avecou¡
++;

545 
utû
 = (Ë(100 * 
dus
->
s
.
io_ticks
 / (Ë
¶avedu
->dus.s.
m£c
);

549 i‡(
utû
 > 
agg
->
max_utû
.
u
.
f
)

550 
agg
->
max_utû
.
u
.
f
 = 
utû
;

554 i‡(
agg
->
max_utû
.
u
.
f
 > 100.0)

555 
agg
->
max_utû
.
u
.
f
 = 100.0;

556 
	}
}

558 
	$disk_utû_¥u√_íåõs
()

560 
	`fio_muãx_down
(
disk_utû_muãx
);

562 !
	`Êi°_em±y
(&
disk_li°
)) {

563 
disk_utû
 *
du
;

565 
du
 = 
	`Êi°_íåy
(
disk_li°
.
√xt
, 
disk_utû
, 
li°
);

566 
	`Êi°_dñ
(&
du
->
li°
);

567 
	`disk_utû_‰ì
(
du
);

570 
œ°_majdev
 = 
œ°_mödev
 = -1;

571 
	`fio_muãx_up
(
disk_utû_muãx
);

572 
	`fio_muãx_ªmove
(
disk_utû_muãx
);

573 
	}
}

575 
	$¥öt_disk_utû
(
disk_utû_°©
 *
dus
, 
disk_utû_agg
 *
agg
,

576 
ãr£
)

578 
utû
 = 0;

580 i‡(
dus
->
s
.
m£c
)

581 
utû
 = (Ë100 * 
dus
->
s
.
io_ticks
 / (Ëdus->s.
m£c
;

582 i‡(
utû
 > 100.0)

583 
utû
 = 100.0;

585 i‡(!
ãr£
) {

586 i‡(
agg
->
¶avecou¡
)

587 
	`log_öfo
(" ");

589 
	`log_öfo
(" %s: ios=%u/%u, merge=%u/%u,Åicks=%u/%u, "

590 "ö_queue=%u, utû=%3.2f%%", 
dus
->
«me
,

591 
dus
->
s
.
ios
[0], dus->s.ios[1],

592 
dus
->
s
.
mîges
[0], dus->s.merges[1],

593 
dus
->
s
.
ticks
[0], dus->s.ticks[1],

594 
dus
->
s
.
time_ö_queue
, 
utû
);

596 
	`log_öfo
(";%s;%u;%u;%u;%u;%u;%u;%u;%3.2f%%",

597 
dus
->
«me
, dus->
s
.
ios
[0],

598 
dus
->
s
.
ios
[1], dus->s.
mîges
[0],

599 
dus
->
s
.
mîges
[1], dus->s.
ticks
[0],

600 
dus
->
s
.
ticks
[1],

601 
dus
->
s
.
time_ö_queue
, 
utû
);

608 
	`show_agg_°©s
(
agg
, 
ãr£
);

610 i‡(!
ãr£
)

611 
	`log_öfo
("\n");

612 
	}
}

614 
	$js⁄_¨øy_add_disk_utû
(
disk_utû_°©
 *
dus
,

615 
disk_utû_agg
 *
agg
, 
js⁄_¨øy
 *
¨øy
)

617 
js⁄_obje˘
 *
obj
;

618 
utû
 = 0;

620 i‡(
dus
->
s
.
m£c
)

621 
utû
 = (Ë100 * 
dus
->
s
.
io_ticks
 / (Ëdus->s.
m£c
;

622 i‡(
utû
 > 100.0)

623 
utû
 = 100.0;

625 
obj
 = 
	`js⁄_¸óã_obje˘
();

626 
	`js⁄_¨øy_add_vÆue_obje˘
(
¨øy
, 
obj
);

628 
	`js⁄_obje˘_add_vÆue_°rög
(
obj
, "«me", 
dus
->
«me
);

629 
	`js⁄_obje˘_add_vÆue_öt
(
obj
, "ªad_ios", 
dus
->
s
.
ios
[0]);

630 
	`js⁄_obje˘_add_vÆue_öt
(
obj
, "wrôe_ios", 
dus
->
s
.
ios
[1]);

631 
	`js⁄_obje˘_add_vÆue_öt
(
obj
, "ªad_mîges", 
dus
->
s
.
mîges
[0]);

632 
	`js⁄_obje˘_add_vÆue_öt
(
obj
, "wrôe_mîges", 
dus
->
s
.
mîges
[1]);

633 
	`js⁄_obje˘_add_vÆue_öt
(
obj
, "ªad_ticks", 
dus
->
s
.
ticks
[0]);

634 
	`js⁄_obje˘_add_vÆue_öt
(
obj
, "wrôe_ticks", 
dus
->
s
.
ticks
[1]);

635 
	`js⁄_obje˘_add_vÆue_öt
(
obj
, "ö_queue", 
dus
->
s
.
time_ö_queue
);

636 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
obj
, "utû", 
utû
);

642 i‡(!
agg
->
¶avecou¡
)

644 
	`js⁄_obje˘_add_vÆue_öt
(
obj
, "aggr_read_ios",

645 
agg
->
ios
[0] /ágg->
¶avecou¡
);

646 
	`js⁄_obje˘_add_vÆue_öt
(
obj
, "aggr_write_ios",

647 
agg
->
ios
[1] /ágg->
¶avecou¡
);

648 
	`js⁄_obje˘_add_vÆue_öt
(
obj
, "aggr_read_merges",

649 
agg
->
mîges
[0] /ágg->
¶avecou¡
);

650 
	`js⁄_obje˘_add_vÆue_öt
(
obj
, "aggr_write_merge",

651 
agg
->
mîges
[1] /ágg->
¶avecou¡
);

652 
	`js⁄_obje˘_add_vÆue_öt
(
obj
, "aggr_read_ticks",

653 
agg
->
ticks
[0] /ágg->
¶avecou¡
);

654 
	`js⁄_obje˘_add_vÆue_öt
(
obj
, "aggr_write_ticks",

655 
agg
->
ticks
[1] /ágg->
¶avecou¡
);

656 
	`js⁄_obje˘_add_vÆue_öt
(
obj
, "aggr_in_queue",

657 
agg
->
time_ö_queue
 /ágg->
¶avecou¡
);

658 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
obj
, "aggr_utû", 
agg
->
max_utû
.
u
.
f
);

659 
	}
}

661 
	$js⁄_obje˘_add_disk_utûs
(
js⁄_obje˘
 *
obj
,

662 
Êi°_hód
 *
hód
)

664 
js⁄_¨øy
 *
¨øy
 = 
	`js⁄_¸óã_¨øy
();

665 
Êi°_hód
 *
íåy
;

666 
disk_utû
 *
du
;

668 
	`js⁄_obje˘_add_vÆue_¨øy
(
obj
, "disk_utû", 
¨øy
);

670 
	`Êi°_f‹_óch
(
íåy
, 
hód
) {

671 
du
 = 
	`Êi°_íåy
(
íåy
, 
disk_utû
, 
li°
);

673 
	`aggªg©e_¶aves_°©s
(
du
);

674 
	`js⁄_¨øy_add_disk_utû
(&
du
->
dus
, &du->
agg
, 
¨øy
);

676 
	}
}

678 
	$show_disk_utû
(
ãr£
, 
js⁄_obje˘
 *
∑ª¡
)

680 
Êi°_hód
 *
íåy
;

681 
disk_utû
 *
du
;

683 
	`fio_muãx_down
(
disk_utû_muãx
);

685 i‡(
	`Êi°_em±y
(&
disk_li°
)) {

686 
	`fio_muãx_up
(
disk_utû_muãx
);

690 i‡(
ouçut_f‹m©
 =
FIO_OUTPUT_JSON
)

691 
	`as£π
(
∑ª¡
);

693 i‡(!
ãr£
 && 
ouçut_f‹m©
 !
FIO_OUTPUT_JSON
)

694 
	`log_öfo
("\nDisk stats (read/write):\n");

696 i‡(
ouçut_f‹m©
 =
FIO_OUTPUT_JSON
)

697 
	`js⁄_obje˘_add_disk_utûs
(
∑ª¡
, &
disk_li°
);

699 
	`Êi°_f‹_óch
(
íåy
, &
disk_li°
) {

700 
du
 = 
	`Êi°_íåy
(
íåy
, 
disk_utû
, 
li°
);

702 
	`aggªg©e_¶aves_°©s
(
du
);

703 
	`¥öt_disk_utû
(&
du
->
dus
, &du->
agg
, 
ãr£
);

706 
	`fio_muãx_up
(
disk_utû_muãx
);

707 
	}
}

709 
	$£tup_disk_utû
()

711 
disk_utû_muãx
 = 
	`fio_muãx_öô
(
FIO_MUTEX_UNLOCKED
);

712 
	}
}

	@/home/terekhov/tmp/fio/fio/diskutil.h

1 #i‚de‡
FIO_DISKUTIL_H


2 
	#FIO_DISKUTIL_H


	)

3 
	~"js⁄.h
"

4 
	#FIO_DU_NAME_SZ
 64

	)

6 vﬁ©ûê
disk_utû_exô
;

8 
	sdisk_utû_°©s
 {

9 
uöt32_t
 
	mios
[2];

10 
uöt32_t
 
	mmîges
[2];

11 
uöt64_t
 
	m£˘‹s
[2];

12 
uöt32_t
 
	mticks
[2];

13 
uöt32_t
 
	mio_ticks
;

14 
uöt32_t
 
	mtime_ö_queue
;

15 
uöt64_t
 
	mm£c
;

21 
	sdisk_utû_°©
 {

22 
uöt8_t
 
	m«me
[
FIO_DU_NAME_SZ
];

23 
disk_utû_°©s
 
	ms
;

26 
	sdisk_utû_agg
 {

27 
uöt32_t
 
	mios
[2];

28 
uöt32_t
 
	mmîges
[2];

29 
uöt64_t
 
	m£˘‹s
[2];

30 
uöt32_t
 
	mticks
[2];

31 
uöt32_t
 
	mio_ticks
;

32 
uöt32_t
 
	mtime_ö_queue
;

33 
uöt32_t
 
	m¶avecou¡
;

34 
fio_Â64_t
 
	mmax_utû
;

40 
	sdisk_utû
 {

41 
Êi°_hód
 
	mli°
;

45 
Êi°_hód
 
	m¶avñi°
;

47 *
	m«me
;

48 *
	msysfs_roŸ
;

49 
	m∑th
[
PATH_MAX
];

50 
	mmaj‹
, 
	mmö‹
;

52 
disk_utû_°©
 
	mdus
;

53 
disk_utû_°©
 
	mœ°_dus
;

55 
disk_utû_agg
 
	magg
;

64 
Êi°_hód
 
	m¶aves
;

66 
timevÆ
 
	mtime
;

68 
fio_muãx
 *
	mlock
;

69 
	mu£rs
;

72 
ölöe
 
	$disk_utû_mod
(
disk_utû
 *
du
, 
vÆ
)

74 i‡(
du
) {

75 
Êi°_hód
 *
n
;

77 
	`fio_muãx_down
(
du
->
lock
);

78 
du
->
u£rs
 +
vÆ
;

80 
	`Êi°_f‹_óch
(
n
, &
du
->
¶avñi°
) {

81 
disk_utû
 *
¶ave
;

83 
¶ave
 = 
	`Êi°_íåy
(
n
, 
disk_utû
, 
¶avñi°
);

84 
¶ave
->
u£rs
 +
vÆ
;

86 
	`fio_muãx_up
(
du
->
lock
);

88 
	}
}

89 
ölöe
 
	$disk_utû_öc
(
disk_utû
 *
du
)

91 
	`disk_utû_mod
(
du
, 1);

92 
	}
}

94 
ölöe
 
	$disk_utû_dec
(
disk_utû
 *
du
)

96 
	`disk_utû_mod
(
du
, -1);

97 
	}
}

99 
	#DISK_UTIL_MSEC
 (250)

	)

101 
Êi°_hód
 
disk_li°
;

103 
waô_f‹_disk_thªad_exô
();

108 #ifde‡
FIO_HAVE_DISK_UTIL


109 
¥öt_disk_utû
(
disk_utû_°©
 *, 
disk_utû_agg
 *, 
ãr£
);

110 
show_disk_utû
(
ãr£
, 
js⁄_obje˘
 *
∑ª¡
);

111 
js⁄_¨øy_add_disk_utû
(
disk_utû_°©
 *
dus
,

112 
disk_utû_agg
 *
agg
, 
js⁄_¨øy
 *
∑ª¡
);

113 
öô_disk_utû
(
thªad_d©a
 *);

114 
upd©e_io_ticks
();

115 
£tup_disk_utû
();

116 
disk_utû_¥u√_íåõs
();

118 
ölöe
 
	$¥öt_disk_utû
(
disk_utû_°©
 *
du
,

119 
disk_utû_agg
 *
agg
, 
ãr£
)

121 
	}
}

122 
	#show_disk_utû
(
ãr£
, 
∑ª¡
)

	)

123 
	#disk_utû_¥u√_íåõs
()

	)

124 
	#öô_disk_utû
(
td
)

	)

125 
	#£tup_disk_utû
()

	)

126 
	#js⁄_¨øy_add_disk_utû
(
dus
, 
agg
, 
∑ª¡
)

	)

128 
ölöe
 
	$upd©e_io_ticks
()

130  
disk_utû_exô
;

131 
	}
}

134 
ölöe
 
	$disk_utû_°¨t_exô
()

136 
disk_utû_exô
 = 1;

137 
	}
}

	@/home/terekhov/tmp/fio/fio/engines/binject.c

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<uni°d.h
>

11 
	~<î∫o.h
>

12 
	~<as£π.h
>

13 
	~<°rög.h
>

14 
	~<sys/pﬁl.h
>

15 
	~<sys/ty≥s.h
>

16 
	~<sys/°©.h
>

18 
	~"../fio.h
"

20 #ifde‡
FIO_HAVE_BINJECT


22 
	sböje˘_d©a
 {

23 
b_u£r_cmd
 *
	mcmds
;

24 
io_u
 **
	mevíts
;

25 
pﬁlfd
 *
	mpfds
;

26 *
	mfd_Êags
;

29 
	sböje˘_fûe
 {

30 
	mbs
;

31 
	mmö‹
;

32 
	mfd
;

35 
	$böje˘_buc_öô
(
böje˘_d©a
 *
bd
, 
io_u
 *io_u)

37 
b_u£r_cmd
 *
buc
 = &
io_u
->buc;

39 
	`mem£t
(
buc
, 0, (*buc));

40 
	`böje˘_buc_£t_magic
(
buc
);

42 
buc
->
buf
 = (Ë
io_u
->
x„r_buf
;

43 
buc
->
Àn
 = 
io_u
->
x„r_buÊí
;

44 
buc
->
off£t
 = 
io_u
->offset;

45 
buc
->
u§_±r
 = (Ë
io_u
;

47 
buc
->
Êags
 = 
B_FLAG_NOIDLE
 | 
B_FLAG_UNPLUG
;

48 
	`as£π
(
buc
->
buf
);

49 
	}
}

51 
	$pﬁlö_evíts
(
pﬁlfd
 *
pfds
, 
fds
)

53 
i
;

55 
i
 = 0; i < 
fds
; i++)

56 i‡(
pfds
[
i
].
ªvíts
 & 
POLLIN
)

60 
	}
}

62 
	$böje˘_ªad_comm™ds
(
thªad_d©a
 *
td
, *
p
,

63 
À·
, *
îr
)

65 
böje˘_fûe
 *
bf
;

66 
fio_fûe
 *
f
;

67 
i
, 
ªt
, 
evíts
;

69 
⁄e_m‹e
:

70 
evíts
 = 0;

71 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

72 
bf
 = (
böje˘_fûe
 *Ë(
uöçå_t
Ë
f
->
ígöe_d©a
;

73 
ªt
 = 
	`ªad
(
bf
->
fd
, 
p
, 
À·
 * (
b_u£r_cmd
));

74 i‡(
ªt
 < 0) {

75 i‡(
î∫o
 =
EAGAIN
)

77 *
îr
 = -
î∫o
;

78 
	`td_vîr‹
(
td
, 
î∫o
, "read");

80 } i‡(
ªt
) {

81 
p
 +
ªt
;

82 
evíts
 +
ªt
 / (
b_u£r_cmd
);

86 i‡(*
îr
 || 
evíts
)

87  
evíts
;

89 
	`u¶ìp
(1000);

90 
⁄e_m‹e
;

91 
	}
}

93 
	$fio_böje˘_gëevíts
(
thªad_d©a
 *
td
, 
mö
,

94 
max
, 
time•ec
 
fio_unu£d
 *
t
)

96 
böje˘_d©a
 *
bd
 = 
td
->
io_›s
->
d©a
;

97 
À·
 = 
max
, 
ªt
, 
r
 = 0, 
ev_ödex
 = 0;

98 *
buf
 = 
bd
->
cmds
;

99 
i
, 
evíts
;

100 
fio_fûe
 *
f
;

101 
böje˘_fûe
 *
bf
;

106 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

107 
bf
 = (
böje˘_fûe
 *Ë(
uöçå_t
Ë
f
->
ígöe_d©a
;

112 i‡(!
mö
)

113 
bd
->
fd_Êags
[
i
] = 
	`fio_£t_fd_n⁄blockög
(
bf
->
fd
, "binject");

115 
bd
->
fd_Êags
[
i
] = -1;

117 
bd
->
pfds
[
i
].
fd
 = 
bf
->fd;

118 
bd
->
pfds
[
i
].
evíts
 = 
POLLIN
;

121 
À·
) {

122 !
mö
) {

123 
ªt
 = 
	`pﬁl
(
bd
->
pfds
, 
td
->
o
.
ƒ_fûes
, -1);

124 i‡(
ªt
 < 0) {

125 i‡(!
r
)

126 
r
 = -
î∫o
;

127 
	`td_vîr‹
(
td
, 
î∫o
, "poll");

129 } i‡(!
ªt
)

132 i‡(
	`pﬁlö_evíts
(
bd
->
pfds
, 
td
->
o
.
ƒ_fûes
))

136 i‡(
r
 < 0)

139 
evíts
 = 
	`böje˘_ªad_comm™ds
(
td
, 
buf
, 
À·
, &
r
);

141 i‡(
r
 < 0)

144 
À·
 -
evíts
;

145 
r
 +
evíts
;

147 
i
 = 0; i < 
evíts
; i++) {

148 
b_u£r_cmd
 *
buc
 = (b_u£r_cmd *Ë
buf
 + 
i
;

150 
bd
->
evíts
[
ev_ödex
] = (
io_u
 *Ë(Ë
buc
->
u§_±r
;

151 
ev_ödex
++;

155 i‡(!
mö
) {

156 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

157 
bf
 = (
böje˘_fûe
 *Ë(
uöçå_t
Ë
f
->
ígöe_d©a
;

159 i‡(
bd
->
fd_Êags
[
i
] == -1)

162 i‡(
	`f˙é
(
bf
->
fd
, 
F_SETFL
, 
bd
->
fd_Êags
[
i
]) < 0)

163 
	`log_îr
("fio: böje˘ faûedÅÿª°‹êf˙é fœgs: %s\n", 
	`°ªº‹
(
î∫o
));

167 i‡(
r
 > 0)

168 
	`as£π
(
ev_ödex
 =
r
);

170  
r
;

171 
	}
}

173 
	$fio_böje˘_doio
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

175 
b_u£r_cmd
 *
buc
 = &
io_u
->buc;

176 
böje˘_fûe
 *
bf
 = (böje˘_fûê*Ë(
uöçå_t
Ë
io_u
->
fûe
->
ígöe_d©a
;

177 
ªt
;

179 
ªt
 = 
	`wrôe
(
bf
->
fd
, 
buc
, (*buc));

180 i‡(
ªt
 < 0)

181  
ªt
;

183  
FIO_Q_QUEUED
;

184 
	}
}

186 
	$fio_böje˘_¥ï
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

188 
böje˘_d©a
 *
bd
 = 
td
->
io_›s
->
d©a
;

189 
b_u£r_cmd
 *
buc
 = &
io_u
->buc;

190 
böje˘_fûe
 *
bf
 = (böje˘_fûê*Ë(
uöçå_t
Ë
io_u
->
fûe
->
ígöe_d©a
;

192 i‡(
io_u
->
x„r_buÊí
 & (
bf
->
bs
 - 1)) {

193 
	`log_îr
("read/writeÇot sectoráligned\n");

194  
EINVAL
;

197 i‡(
io_u
->
ddú
 =
DDIR_READ
) {

198 
	`böje˘_buc_öô
(
bd
, 
io_u
);

199 
buc
->
ty≥
 = 
B_TYPE_READ
;

200 } i‡(
io_u
->
ddú
 =
DDIR_WRITE
) {

201 
	`böje˘_buc_öô
(
bd
, 
io_u
);

202 i‡(
io_u
->
Êags
 & 
IO_U_F_BARRIER
)

203 
buc
->
ty≥
 = 
B_TYPE_WRITEBARRIER
;

205 
buc
->
ty≥
 = 
B_TYPE_WRITE
;

206 } i‡(
io_u
->
ddú
 =
DDIR_TRIM
) {

207 
	`böje˘_buc_öô
(
bd
, 
io_u
);

208 
buc
->
ty≥
 = 
B_TYPE_DISCARD
;

210 
	`as£π
(0);

214 
	}
}

216 
	$fio_böje˘_queue
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

218 
ªt
;

220 
	`fio_ro_check
(
td
, 
io_u
);

222 
ªt
 = 
	`fio_böje˘_doio
(
td
, 
io_u
);

224 i‡(
ªt
 < 0)

225 
io_u
->
îr‹
 = 
î∫o
;

227 i‡(
io_u
->
îr‹
) {

228 
	`td_vîr‹
(
td
, 
io_u
->
îr‹
, "xfer");

229  
FIO_Q_COMPLETED
;

232  
ªt
;

233 
	}
}

235 
io_u
 *
	$fio_böje˘_evít
(
thªad_d©a
 *
td
, 
evít
)

237 
böje˘_d©a
 *
bd
 = 
td
->
io_›s
->
d©a
;

239  
bd
->
evíts
[
evít
];

240 
	}
}

242 
	$böje˘_›í_˘l
(
thªad_d©a
 *
td
)

244 
fd
;

246 
fd
 = 
	`›í
("/dev/böje˘-˘l", 
O_RDWR
);

247 i‡(
fd
 < 0)

248 
	`td_vîr‹
(
td
, 
î∫o
, "open binject-ctl");

250  
fd
;

251 
	}
}

253 
	$böje˘_unm≠_dev
(
thªad_d©a
 *
td
, 
böje˘_fûe
 *
bf
)

255 
b_io˘l_cmd
 
bic
;

256 
fdb
;

258 i‡(
bf
->
fd
 >= 0) {

259 
	`˛o£
(
bf
->
fd
);

260 
bf
->
fd
 = -1;

263 
fdb
 = 
	`böje˘_›í_˘l
(
td
);

264 i‡(
fdb
 < 0)

267 
bic
.
mö‹
 = 
bf
->minor;

269 i‡(
	`io˘l
(
fdb
, 
B_IOCTL_DEL
, &
bic
) < 0)

270 
	`td_vîr‹
(
td
, 
î∫o
, "binject dev unmap");

272 
	`˛o£
(
fdb
);

273 
	}
}

275 
	$böje˘_m≠_dev
(
thªad_d©a
 *
td
, 
böje˘_fûe
 *
bf
,

276 
fd
)

278 
b_io˘l_cmd
 
bic
;

279 
«me
[80];

280 
°©
 
sb
;

281 
fdb
, 
dev_thîe
, 
lo›s
;

283 
fdb
 = 
	`böje˘_›í_˘l
(
td
);

284 i‡(
fdb
 < 0)

287 
bic
.
fd
 = fd;

289 i‡(
	`io˘l
(
fdb
, 
B_IOCTL_ADD
, &
bic
) < 0) {

290 
	`td_vîr‹
(
td
, 
î∫o
, "binject dev map");

291 
	`˛o£
(
fdb
);

295 
bf
->
mö‹
 = 
bic
.minor;

297 
	`•rötf
(
«me
, "/dev/böje˘%u", 
bf
->
mö‹
);

302 
dev_thîe
 = 
lo›s
 = 0;

304 i‡(!
	`°©
(
«me
, &
sb
)) {

305 
dev_thîe
 = 1;

309 
	`u¶ìp
(10000);

310 } ++
lo›s
 < 100);

312 
	`˛o£
(
fdb
);

314 i‡(!
dev_thîe
) {

315 
	`log_îr
("fio:Åimed out waiting for binject dev\n");

316 
îr_unm≠
;

319 
bf
->
fd
 = 
	`›í
(
«me
, 
O_RDWR
);

320 i‡(
bf
->
fd
 < 0) {

321 
	`td_vîr‹
(
td
, 
î∫o
, "binject dev open");

322 
îr_unm≠
:

323 
	`böje˘_unm≠_dev
(
td
, 
bf
);

328 
	}
}

330 
	$fio_böje˘_˛o£_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

332 
böje˘_fûe
 *
bf
 = (böje˘_fûê*Ë(
uöçå_t
Ë
f
->
ígöe_d©a
;

334 i‡(
bf
) {

335 
	`böje˘_unm≠_dev
(
td
, 
bf
);

336 
	`‰ì
(
bf
);

337 
f
->
ígöe_d©a
 = 0;

338  
	`gíîic_˛o£_fûe
(
td
, 
f
);

342 
	}
}

344 
	$fio_böje˘_›í_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

346 
böje˘_fûe
 *
bf
;

347 
bs
;

348 
ªt
;

350 
ªt
 = 
	`gíîic_›í_fûe
(
td
, 
f
);

351 i‡(
ªt
)

354 i‡(
f
->
fûëy≥
 !
FIO_TYPE_BD
) {

355 
	`log_îr
("fio: binject only works with block devices\n");

356 
îr_˛o£
;

358 i‡(
	`io˘l
(
f
->
fd
, 
BLKSSZGET
, &
bs
) < 0) {

359 
	`td_vîr‹
(
td
, 
î∫o
, "BLKSSZGET");

360 
îr_˛o£
;

363 
bf
 = 
	`mÆloc
((*bf));

364 
bf
->
bs
 = bs;

365 
bf
->
mö‹
 = bf->
fd
 = -1;

366 
f
->
ígöe_d©a
 = (
uöçå_t
Ë
bf
;

368 i‡(
	`böje˘_m≠_dev
(
td
, 
bf
, 
f
->
fd
)) {

369 
îr_˛o£
:

370 
ªt
 = 
	`gíîic_˛o£_fûe
(
td
, 
f
);

375 
	}
}

377 
	$fio_böje˘_˛ónup
(
thªad_d©a
 *
td
)

379 
böje˘_d©a
 *
bd
 = 
td
->
io_›s
->
d©a
;

381 i‡(
bd
) {

382 
	`‰ì
(
bd
->
evíts
);

383 
	`‰ì
(
bd
->
cmds
);

384 
	`‰ì
(
bd
->
fd_Êags
);

385 
	`‰ì
(
bd
->
pfds
);

386 
	`‰ì
(
bd
);

388 
	}
}

390 
	$fio_böje˘_öô
(
thªad_d©a
 *
td
)

392 
böje˘_d©a
 *
bd
;

394 
bd
 = 
	`mÆloc
((*bd));

395 
	`mem£t
(
bd
, 0, (*bd));

397 
bd
->
cmds
 = 
	`mÆloc
(
td
->
o
.
iodïth
 * (
b_u£r_cmd
));

398 
	`mem£t
(
bd
->
cmds
, 0, 
td
->
o
.
iodïth
 * (
b_u£r_cmd
));

400 
bd
->
evíts
 = 
	`mÆloc
(
td
->
o
.
iodïth
 * (
io_u
 *));

401 
	`mem£t
(
bd
->
evíts
, 0, 
td
->
o
.
iodïth
 * (
io_u
 *));

403 
bd
->
pfds
 = 
	`mÆloc
((
pﬁlfd
Ë* 
td
->
o
.
ƒ_fûes
);

404 
	`mem£t
(
bd
->
pfds
, 0, (
pﬁlfd
Ë* 
td
->
o
.
ƒ_fûes
);

406 
bd
->
fd_Êags
 = 
	`mÆloc
((Ë* 
td
->
o
.
ƒ_fûes
);

407 
	`mem£t
(
bd
->
fd_Êags
, 0, (Ë* 
td
->
o
.
ƒ_fûes
);

409 
td
->
io_›s
->
d©a
 = 
bd
;

411 
	}
}

413 
i€ngöe_›s
 
	gi€ngöe
 = {

414 .
«me
 = "binject",

415 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

416 .
	göô
 = 
fio_böje˘_öô
,

417 .
	g¥ï
 = 
fio_böje˘_¥ï
,

418 .
	gqueue
 = 
fio_böje˘_queue
,

419 .
	ggëevíts
 = 
fio_böje˘_gëevíts
,

420 .
	gevít
 = 
fio_böje˘_evít
,

421 .
	g˛ónup
 = 
fio_böje˘_˛ónup
,

422 .
	g›í_fûe
 = 
fio_böje˘_›í_fûe
,

423 .
	g˛o£_fûe
 = 
fio_böje˘_˛o£_fûe
,

424 .
	ggë_fûe_size
 = 
gíîic_gë_fûe_size
,

425 .
	gÊags
 = 
FIO_RAWIO
 | 
FIO_BARRIER
 | 
FIO_MEMALIGN
,

435 
	$fio_böje˘_öô
(
thªad_d©a
 
fio_unu£d
 *
td
)

437 
	`log_îr
("fio: ioengine binjectÇotávailable\n");

439 
	}
}

441 
i€ngöe_›s
 
	gi€ngöe
 = {

442 .
«me
 = "binject",

443 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

444 .
	göô
 = 
fio_böje˘_öô
,

449 
fio_öô
 
	$fio_böje˘_ªgi°î
()

451 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

452 
	}
}

454 
fio_exô
 
	$fio_böje˘_uƒegi°î
()

456 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

457 
	}
}

	@/home/terekhov/tmp/fio/fio/engines/cpu.c

8 
	~"../fio.h
"

10 
	s˝u_›ti⁄s
 {

11 
thªad_d©a
 *
	mtd
;

12 
	m˝ulﬂd
;

13 
	m˝ucy˛e
;

14 
	mexô_io_d⁄e
;

17 
fio_›ti⁄
 
	g›ti⁄s
[] = {

19 .
«me
 = "cpuload",

20 .
	g ame
 = "CPUÜoad",

21 .
	gty≥
 = 
FIO_OPT_INT
,

22 .
	goff1
 = 
off£tof
(
˝u_›ti⁄s
, 
˝ulﬂd
),

23 .
	ghñp
 = "UseÅhisÖercentage of CPU",

24 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

25 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

28 .
	g«me
 = "cpuchunks",

29 .
	g ame
 = "CPU chunk",

30 .
	gty≥
 = 
FIO_OPT_INT
,

31 .
	goff1
 = 
off£tof
(
˝u_›ti⁄s
, 
˝ucy˛e
),

32 .
	ghñp
 = "Length ofÅhe CPU burn cycles (usecs)",

33 .
	gdef
 = "50000",

34 .
	g∑ª¡
 = "cpuload",

35 .
	ghide
 = 1,

36 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

37 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

40 .
	g«me
 = "exit_on_io_done",

41 .
	g ame
 = "Exit when IOÅhreadsáre done",

42 .
	gty≥
 = 
FIO_OPT_BOOL
,

43 .
	goff1
 = 
off£tof
(
˝u_›ti⁄s
, 
exô_io_d⁄e
),

44 .
	ghñp
 = "Exit when IOÅhreads finish",

45 .
	gdef
 = "0",

46 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

47 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

50 .
	g«me
 = 
NULL
,

55 
	$fio_˝uio_queue
(
thªad_d©a
 *
td
, 
io_u
 
fio_unu£d
 *io_u)

57 
˝u_›ti⁄s
 *
co
 = 
td
->
eo
;

59 i‡(
co
->
exô_io_d⁄e
 && !
	`fio_ru¬ög_‹_≥ndög_io_thªads
()) {

60 
td
->
d⁄e
 = 1;

61  
FIO_Q_BUSY
;

64 
	`u£c_•ö
(
co
->
˝ucy˛e
);

65  
FIO_Q_COMPLETED
;

66 
	}
}

68 
	$fio_˝uio_öô
(
thªad_d©a
 *
td
)

70 
thªad_›ti⁄s
 *
o
 = &
td
->o;

71 
˝u_›ti⁄s
 *
co
 = 
td
->
eo
;

73 i‡(!
co
->
˝ulﬂd
) {

74 
	`td_vmsg
(
td
, 
EINVAL
, "cpuÅhreadÇeedsÑate (cpuload=)","cpuio");

78 i‡(
co
->
˝ulﬂd
 > 100)

79 
co
->
˝ulﬂd
 = 100;

84 
o
->
thöktime_blocks
 = 1;

85 
o
->
thöktime_•ö
 = 0;

86 
o
->
thöktime
 = (
co
->
˝ucy˛e
 * (100 - co->
˝ulﬂd
)) / co->cpuload;

88 
o
->
ƒ_fûes
 = o->
›í_fûes
 = 1;

90 
	`log_öfo
("%s: i€ngöe=˝u, cpulﬂd=%u, cpucy˛e=%u\n", 
td
->
o
.
«me
,

91 
co
->
˝ulﬂd
, co->
˝ucy˛e
);

94 
	}
}

96 
	$fio_˝uio_›í
(
thªad_d©a
 
fio_unu£d
 *
td
,

97 
fio_fûe
 
fio_unu£d
 *
f
)

100 
	}
}

102 
i€ngöe_›s
 
	gi€ngöe
 = {

103 .
«me
 = "cpuio",

104 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

105 .
	gqueue
 = 
fio_˝uio_queue
,

106 .
	göô
 = 
fio_˝uio_öô
,

107 .
	g›í_fûe
 = 
fio_˝uio_›í
,

108 .
	gÊags
 = 
FIO_SYNCIO
 | 
FIO_DISKLESSIO
 | 
FIO_NOIO
,

109 .
	g›ti⁄s
 = 
›ti⁄s
,

110 .
	g›ti⁄_°ru˘_size
 = (
˝u_›ti⁄s
),

113 
fio_öô
 
	$fio_˝uio_ªgi°î
()

115 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

116 
	}
}

118 
fio_exô
 
	$fio_˝uio_uƒegi°î
()

120 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

121 
	}
}

	@/home/terekhov/tmp/fio/fio/engines/e4defrag.c

9 
	~<sys/ty≥s.h
>

10 
	~<sys/°©.h
>

11 
	~<°dio.h
>

12 
	~<°dlib.h
>

13 
	~<uni°d.h
>

14 
	~<sys/uio.h
>

15 
	~<î∫o.h
>

16 
	~<as£π.h
>

17 
	~<f˙é.h
>

19 
	~"../fio.h
"

21 #i‚de‡
EXT4_IOC_MOVE_EXT


22 
	#EXT4_IOC_MOVE_EXT
 
	`_IOWR
('f', 15, 
move_exã¡
)

	)

23 
	smove_exã¡
 {

24 
__u32
 
	mª£rved
;

25 
__u32
 
	md⁄‹_fd
;

26 
__u64
 
	m‹ig_°¨t
;

27 
__u64
 
	md⁄‹_°¨t
;

28 
__u64
 
	mÀn
;

29 
__u64
 
	mmoved_Àn
;

33 
	se4de‰ag_d©a
 {

34 
	md⁄‹_fd
;

35 
	mbsz
;

38 
	se4de‰ag_›ti⁄s
 {

39 
thªad_d©a
 *
	mtd
;

40 
	mö∂a˚
;

41 * 
	md⁄‹_«me
;

44 
fio_›ti⁄
 
	g›ti⁄s
[] = {

46 .
«me
 = "donorname",

47 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

48 .
	goff1
 = 
off£tof
(
e4de‰ag_›ti⁄s
, 
d⁄‹_«me
),

49 .
	ghñp
 = "File usedásá block donor",

50 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

51 .
	ggroup
 = 
FIO_OPT_G_E4DEFRAG
,

54 .
	g«me
 = "inplace",

55 .
	gty≥
 = 
FIO_OPT_INT
,

56 .
	goff1
 = 
off£tof
(
e4de‰ag_›ti⁄s
, 
ö∂a˚
),

57 .
	gmövÆ
 = 0,

58 .
	gmaxvÆ
 = 1,

59 .
	ghñp
 = "Allocánd free space inside defragÉvent",

60 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

61 .
	ggroup
 = 
FIO_OPT_G_E4DEFRAG
,

64 .
	g«me
 = 
NULL
,

68 
	$fio_e4de‰ag_öô
(
thªad_d©a
 *
td
)

70 
r
, 
Àn
 = 0;

71 
e4de‰ag_›ti⁄s
 *
o
 = 
td
->
eo
;

72 
e4de‰ag_d©a
 *
ed
;

73 
°©
 
°ub
;

74 
d⁄‹_«me
[
PATH_MAX
];

76 i‡(!
	`°æí
(
o
->
d⁄‹_«me
)) {

77 
	`log_îr
("'donorname' optionsÑequired\n");

81 
ed
 = 
	`mÆloc
((*ed));

82 i‡(!
ed
) {

83 
	`td_vîr‹
(
td
, 
ENOMEM
, "io_queue_init");

86 
	`mem£t
(
ed
, 0 ,(*ed));

88 i‡(
td
->
o
.
dúe˘‹y
)

89 
Àn
 = 
	`•rötf
(
d⁄‹_«me
, "%s/", 
td
->
o
.
dúe˘‹y
);

90 
	`•rötf
(
d⁄‹_«me
 + 
Àn
, "%s", 
o
->donor_name);

92 
ed
->
d⁄‹_fd
 = 
	`›í
(
d⁄‹_«me
, 
O_CREAT
|
O_WRONLY
, 0644);

93 i‡(
ed
->
d⁄‹_fd
 < 0) {

94 
	`td_vîr‹
(
td
, 
î∫o
, "io_queue_init");

95 
	`log_îr
("C™'à›í d⁄‹ fûê%†îr:%d", 
d⁄‹_«me
, 
ed
->
d⁄‹_fd
);

96 
	`‰ì
(
ed
);

100 i‡(!
o
->
ö∂a˚
) {

101 
Àn
 = 
td
->
o
.
fûe_size_high
 -Åd->o.
°¨t_off£t
;

102 
r
 = 
	`ÁŒoˇã
(
ed
->
d⁄‹_fd
, 0, 
td
->
o
.
°¨t_off£t
, 
Àn
);

103 i‡(
r
)

104 
îr
;

106 
r
 = 
	`f°©
(
ed
->
d⁄‹_fd
, &
°ub
);

107 i‡(
r
)

108 
îr
;

110 
ed
->
bsz
 = 
°ub
.
°_blksize
;

111 
td
->
io_›s
->
d©a
 = 
ed
;

113 
îr
:

114 
	`td_vîr‹
(
td
, 
î∫o
, "io_queue_init");

115 
	`˛o£
(
ed
->
d⁄‹_fd
);

116 
	`‰ì
(
ed
);

118 
	}
}

120 
	$fio_e4de‰ag_˛ónup
(
thªad_d©a
 *
td
)

122 
e4de‰ag_d©a
 *
ed
 = 
td
->
io_›s
->
d©a
;

123 i‡(
ed
) {

124 i‡(
ed
->
d⁄‹_fd
 >= 0)

125 
	`˛o£
(
ed
->
d⁄‹_fd
);

126 
	`‰ì
(
ed
);

128 
	}
}

131 
	$fio_e4de‰ag_queue
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

134 
ªt
;

135 
Àn
;

136 
move_exã¡
 
me
;

137 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

138 
e4de‰ag_d©a
 *
ed
 = 
td
->
io_›s
->
d©a
;

139 
e4de‰ag_›ti⁄s
 *
o
 = 
td
->
eo
;

141 
	`fio_ro_check
(
td
, 
io_u
);

147 i‡(
io_u
->
ddú
 !
DDIR_WRITE
) {

148 
io_u
->
îr‹
 = 
EINVAL
;

149  
FIO_Q_COMPLETED
;

152 i‡(
o
->
ö∂a˚
) {

153 
ªt
 = 
	`ÁŒoˇã
(
ed
->
d⁄‹_fd
, 0, 
io_u
->
off£t
, io_u->
x„r_buÊí
);

154 i‡(
ªt
)

155 
out
;

158 
	`mem£t
(&
me
, 0, (me));

159 
me
.
d⁄‹_fd
 = 
ed
->donor_fd;

160 
me
.
‹ig_°¨t
 = 
io_u
->
off£t
 / 
ed
->
bsz
;

161 
me
.
d⁄‹_°¨t
 = me.
‹ig_°¨t
;

162 
Àn
 = (
io_u
->
off£t
 + io_u->
x„r_buÊí
 + 
ed
->
bsz
 -1);

163 
me
.
Àn
 =Üí / 
ed
->
bsz
 - me.
‹ig_°¨t
;

165 
ªt
 = 
	`io˘l
(
f
->
fd
, 
EXT4_IOC_MOVE_EXT
, &
me
);

166 
Àn
 = 
me
.
moved_Àn
 * 
ed
->
bsz
;

168 i‡(
Àn
 > 
io_u
->
x„r_buÊí
)

169 
Àn
 = 
io_u
->
x„r_buÊí
;

171 i‡(
Àn
 !
io_u
->
x„r_buÊí
) {

172 
io_u
->
ªsid
 = io_u->
x„r_buÊí
 - 
Àn
;

173 
io_u
->
îr‹
 = 0;

175 i‡(
ªt
)

176 
io_u
->
îr‹
 = 
î∫o
;

178 i‡(
o
->
ö∂a˚
)

179 
ªt
 = 
	`·runˇã
(
ed
->
d⁄‹_fd
, 0);

180 
out
:

181 i‡(
ªt
 && !
io_u
->
îr‹
)

182 
io_u
->
îr‹
 = 
î∫o
;

184  
FIO_Q_COMPLETED
;

185 
	}
}

187 
i€ngöe_›s
 
	gi€ngöe
 = {

188 .
«me
 = "e4defrag",

189 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

190 .
	göô
 = 
fio_e4de‰ag_öô
,

191 .
	gqueue
 = 
fio_e4de‰ag_queue
,

192 .
	g›í_fûe
 = 
gíîic_›í_fûe
,

193 .
	g˛o£_fûe
 = 
gíîic_˛o£_fûe
,

194 .
	ggë_fûe_size
 = 
gíîic_gë_fûe_size
,

195 .
	gÊags
 = 
FIO_SYNCIO
,

196 .
	g˛ónup
 = 
fio_e4de‰ag_˛ónup
,

197 .
	g›ti⁄s
 = 
›ti⁄s
,

198 .
	g›ti⁄_°ru˘_size
 = (
e4de‰ag_›ti⁄s
),

202 
fio_öô
 
	$fio_syncio_ªgi°î
()

204 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

205 
	}
}

207 
fio_exô
 
	$fio_syncio_uƒegi°î
()

209 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

210 
	}
}

	@/home/terekhov/tmp/fio/fio/engines/falloc.c

11 
	~<°dio.h
>

12 
	~<°dlib.h
>

13 
	~<uni°d.h
>

14 
	~<sys/uio.h
>

15 
	~<î∫o.h
>

16 
	~<as£π.h
>

17 
	~<f˙é.h
>

19 
	~"../fio.h
"

20 
	~"../fûehash.h
"

26 
	$›í_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

28 
‰om_hash
 = 0;

30 
	`d¥öt
(
FD_FILE
, "fd o≥¿%s\n", 
f
->
fûe_«me
);

32 i‡(
f
->
fûëy≥
 !
FIO_TYPE_FILE
) {

33 
	`log_îr
("fio: only filesáre supported fallocate \n");

36 i‡(!
	`°rcmp
(
f
->
fûe_«me
, "-")) {

37 
	`log_îr
("fio: can'tÑead/writeÅo stdin/out\n");

41 
›í_agaö
:

42 
‰om_hash
 = 
	`fûe_lookup_›í
(
f
, 
O_CREAT
|
O_RDWR
);

44 i‡(
f
->
fd
 == -1) {

45 
buf
[
FIO_VERROR_SIZE
];

46 
e
 = 
î∫o
;

48 
	`¢¥ötf
(
buf
, (buf), "›í(%s)", 
f
->
fûe_«me
);

49 
	`td_vîr‹
(
td
, 
e
, 
buf
);

52 i‡(!
‰om_hash
 && 
f
->
fd
 != -1) {

53 i‡(
	`add_fûe_hash
(
f
)) {

54 
fio_unu£d
 
ªt
;

59 
ªt
 = 
	`gíîic_˛o£_fûe
(
td
, 
f
);

60 
›í_agaö
;

65 
	}
}

67 #i‚de‡
FALLOC_FL_KEEP_SIZE


68 
	#FALLOC_FL_KEEP_SIZE
 0x01

	)

70 #i‚de‡
FALLOC_FL_PUNCH_HOLE


71 
	#FALLOC_FL_PUNCH_HOLE
 0x02

	)

73 
	$fio_ÁŒoˇã_queue
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

75 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

76 
ªt
;

77 
Êags
 = 0;

79 
	`fio_ro_check
(
td
, 
io_u
);

81 i‡(
io_u
->
ddú
 =
DDIR_READ
)

82 
Êags
 = 
FALLOC_FL_KEEP_SIZE
;

83 i‡(
io_u
->
ddú
 =
DDIR_WRITE
)

84 
Êags
 = 0;

85 i‡(
io_u
->
ddú
 =
DDIR_TRIM
)

86 
Êags
 = 
FALLOC_FL_PUNCH_HOLE
 | 
FALLOC_FL_KEEP_SIZE
;

88 
ªt
 = 
	`ÁŒoˇã
(
f
->
fd
, 
Êags
, 
io_u
->
off£t
, io_u->
x„r_buÊí
);

90 i‡(
ªt
)

91 
io_u
->
îr‹
 = 
î∫o
;

93  
FIO_Q_COMPLETED
;

94 
	}
}

96 
i€ngöe_›s
 
	gi€ngöe
 = {

97 .
«me
 = "falloc",

98 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

99 .
	gqueue
 = 
fio_ÁŒoˇã_queue
,

100 .
	g›í_fûe
 = 
›í_fûe
,

101 .
	g˛o£_fûe
 = 
gíîic_˛o£_fûe
,

102 .
	ggë_fûe_size
 = 
gíîic_gë_fûe_size
,

103 .
	gÊags
 = 
FIO_SYNCIO


106 
fio_öô
 
	$fio_syncio_ªgi°î
()

108 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

109 
	}
}

111 
fio_exô
 
	$fio_syncio_uƒegi°î
()

113 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

114 
	}
}

	@/home/terekhov/tmp/fio/fio/engines/fusion-aw.c

20 
	~<°dlib.h
>

21 
	~<°döt.h
>

23 
	~"../fio.h
"

25 
	~<nvm/nvm_¥imôives.h
>

27 
	#NUM_ATOMIC_CAPABILITIES
 (5)

	)

29 
	sÁs_d©a
 {

30 
nvm_h™dÀ_t
 
	mnvm_h™dÀ
;

31 
size_t
 
	mx„r_buf_Æign
;

32 
size_t
 
	mx„r_buÊí_Æign
;

33 
size_t
 
	mx„r_buÊí_max
;

34 
size_t
 
	m£˘‹_size
;

37 
	$queue
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

39 
rc
;

40 
Ás_d©a
 *
d
 = (Ás_d©®*Ë
io_u
->
fûe
->
ígöe_d©a
;

42 i‡(
io_u
->
ddú
 !
DDIR_WRITE
) {

43 
	`td_vmsg
(
td
, 
EINVAL
, "only writes supported", "io_u->ddir");

44 
rc
 = -
EINVAL
;

45 
out
;

48 i‡((
size_t
Ë
io_u
->
x„r_buf
 % 
d
->
x„r_buf_Æign
) {

49 
	`td_vmsg
(
td
, 
EINVAL
, "unaligned data buffer", "io_u->xfer_buf");

50 
rc
 = -
EINVAL
;

51 
out
;

54 i‡(
io_u
->
x„r_buÊí
 % 
d
->
x„r_buÊí_Æign
) {

55 
	`td_vmsg
(
td
, 
EINVAL
, "unaligned data size", "io_u->xfer_buflen");

56 
rc
 = -
EINVAL
;

57 
out
;

60 i‡(
io_u
->
x„r_buÊí
 > 
d
->
x„r_buÊí_max
) {

61 
	`td_vmsg
(
td
, 
EINVAL
, "dataÅoo big", "io_u->xfer_buflen");

62 
rc
 = -
EINVAL
;

63 
out
;

66 
rc
 = 
	`nvm_©omic_wrôe
(
d
->
nvm_h™dÀ
, (
uöt64_t
Ë
io_u
->
x„r_buf
,

67 
io_u
->
x„r_buÊí
, io_u->
off£t
 / 
d
->
£˘‹_size
);

68 i‡(
rc
 == -1) {

69 
	`td_vîr‹
(
td
, 
î∫o
, "nvm_atomic_write");

70 
rc
 = -
î∫o
;

71 
out
;

73 
rc
 = 
FIO_Q_COMPLETED
;

74 
out
:

75 i‡(
rc
 < 0)

76 
io_u
->
îr‹
 = -
rc
;

78  
rc
;

79 
	}
}

81 
	$›í_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

83 
rc
;

84 
fio_unu£d
 
˛o£_fûe_rc
;

85 
Ás_d©a
 *
d
;

86 
nvm_vîsi⁄_t
 
nvm_vîsi⁄
;

87 
nvm_ˇ∑bûôy_t
 
nvm_ˇ∑bûôy
[
NUM_ATOMIC_CAPABILITIES
];

90 
d
 = 
	`mÆloc
((*d));

91 i‡(!
d
) {

92 
	`td_vîr‹
(
td
, 
ENOMEM
, "malloc");

93 
rc
 = 
ENOMEM
;

94 
îr‹
;

96 
d
->
nvm_h™dÀ
 = -1;

97 
f
->
ígöe_d©a
 = (
uöçå_t
Ë
d
;

99 
rc
 = 
	`gíîic_›í_fûe
(
td
, 
f
);

101 i‡(
rc
)

102 
‰ì_ígöe_d©a
;

105 
nvm_vîsi⁄
.
maj‹
 = 
NVM_PRIMITIVES_API_MAJOR
;

106 
nvm_vîsi⁄
.
mö‹
 = 
NVM_PRIMITIVES_API_MINOR
;

107 
nvm_vîsi⁄
.
mi¸o
 = 
NVM_PRIMITIVES_API_MICRO
;

109 
d
->
nvm_h™dÀ
 = 
	`nvm_gë_h™dÀ
(
f
->
fd
, &
nvm_vîsi⁄
);

110 i‡(
d
->
nvm_h™dÀ
 == -1) {

111 
	`td_vmsg
(
td
, 
î∫o
, "nvm_get_handle failed", "nvm_get_handle");

112 
rc
 = 
î∫o
;

113 
˛o£_fûe
;

116 
nvm_ˇ∑bûôy
[0].
ˇp_id
 = 
NVM_CAP_ATOMIC_WRITE_START_ALIGN_ID
;

117 
nvm_ˇ∑bûôy
[1].
ˇp_id
 = 
NVM_CAP_ATOMIC_WRITE_MULTIPLICITY_ID
;

118 
nvm_ˇ∑bûôy
[2].
ˇp_id
 = 
NVM_CAP_ATOMIC_WRITE_MAX_VECTOR_SIZE_ID
;

119 
nvm_ˇ∑bûôy
[3].
ˇp_id
 = 
NVM_CAP_SECTOR_SIZE_ID
;

120 
nvm_ˇ∑bûôy
[4].
ˇp_id
 = 
NVM_CAP_ATOMIC_MAX_IOV_ID
;

121 
rc
 = 
	`nvm_gë_ˇ∑bûôõs
(
d
->
nvm_h™dÀ
, 
nvm_ˇ∑bûôy
,

122 
NUM_ATOMIC_CAPABILITIES
, 
Ál£
);

123 i‡(
rc
 == -1) {

124 
	`td_vmsg
(
td
, 
î∫o
, "error in gettingátomic write capabilities", "nvm_get_capabilities");

125 
rc
 = 
î∫o
;

126 
˛o£_fûe
;

127 } i‡(
rc
 < 
NUM_ATOMIC_CAPABILITIES
) {

128 
	`td_vmsg
(
td
, 
EINVAL
, "couldn't getállÅheátomic write capabilities" , "nvm_get_capabilities");

129 
rc
 = 
ECANCELED
;

130 
˛o£_fûe
;

133 
rc
 = 0;

134 
d
->
x„r_buf_Æign
 = 
nvm_ˇ∑bûôy
[0].
ˇp_vÆue
;

135 
d
->
x„r_buÊí_Æign
 = 
nvm_ˇ∑bûôy
[1].
ˇp_vÆue
;

136 
d
->
x„r_buÊí_max
 = d->
x„r_buÊí_Æign
 * 
nvm_ˇ∑bûôy
[2].
ˇp_vÆue
 *Çvm_capability[4].cap_value;

137 
d
->
£˘‹_size
 = 
nvm_ˇ∑bûôy
[3].
ˇp_vÆue
;

139 
out
:

140  
rc
;

141 
˛o£_fûe
:

142 
˛o£_fûe_rc
 = 
	`gíîic_˛o£_fûe
(
td
, 
f
);

143 
‰ì_ígöe_d©a
:

144 
	`‰ì
(
d
);

145 
îr‹
:

146 
f
->
fd
 = -1;

147 
f
->
ígöe_d©a
 = 0;

148 
out
;

149 
	}
}

151 
	$˛o£_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

153 
Ás_d©a
 *
d
 = (Ás_d©®*Ë
f
->
ígöe_d©a
;

155 i‡(
d
) {

156 i‡(
d
->
nvm_h™dÀ
 != -1)

157 
	`nvm_ªÀa£_h™dÀ
(
d
->
nvm_h™dÀ
);

158 
	`‰ì
(
d
);

159 
f
->
ígöe_d©a
 = 0;

162  
	`gíîic_˛o£_fûe
(
td
, 
f
);

163 
	}
}

165 
i€ngöe_›s
 
	gi€ngöe
 = {

166 .
«me
 = "fusion-aw-sync",

167 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

168 .
	gqueue
 = 
queue
,

169 .
	g›í_fûe
 = 
›í_fûe
,

170 .
	g˛o£_fûe
 = 
˛o£_fûe
,

171 .
	ggë_fûe_size
 = 
gíîic_gë_fûe_size
,

172 .
	gÊags
 = 
FIO_SYNCIO
 | 
FIO_RAWIO
 | 
FIO_MEMALIGN


175 
fio_öô
 
	$fio_fusi⁄_aw_öô
()

177 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

178 
	}
}

180 
fio_exô
 
	$fio_fusi⁄_aw_exô
()

182 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

183 
	}
}

	@/home/terekhov/tmp/fio/fio/engines/guasi.c

11 
	~<°dio.h
>

12 
	~<°dlib.h
>

13 
	~<uni°d.h
>

14 
	~<î∫o.h
>

15 
	~<as£π.h
>

17 
	~"../fio.h
"

19 
	#GFIO_MIN_THREADS
 32

	)

20 #i‚de‡
GFIO_MAX_THREADS


21 
	#GFIO_MAX_THREADS
 2000

	)

24 
	~<guasi.h
>

25 
	~<guasi_sysˇŒs.h
>

27 #ifde‡
GFIO_DEBUG


28 
	#GDBG_PRINT
(
a
Ë
¥ötf
 
	)
a

30 
	#GDBG_PRINT
(
a
Ë(Ë0

	)

33 
	sguasi_d©a
 {

34 
guasi_t
 
	mh˘x
;

35 
	mmax_ªqs
;

36 
guasi_ªq_t
 *
	mªqs
;

37 
io_u
 **
	mio_us
;

38 
	mqueued_ƒ
;

39 
	mªqs_ƒ
;

42 
	$fio_guasi_¥ï
(
thªad_d©a
 
fio_unu£d
 *
td
, 
io_u
 *io_u)

45 
	`GDBG_PRINT
(("fio_guasi_¥ï(%p)\n", 
io_u
));

46 
io_u
->
gªq
 = 
NULL
;

49 
	}
}

51 
io_u
 *
	$fio_guasi_evít
(
thªad_d©a
 *
td
, 
evít
)

53 
guasi_d©a
 *
ld
 = 
td
->
io_›s
->
d©a
;

54 
io_u
 *io_u;

55 
guasi_ªqöfo
 
röf
;

57 
	`GDBG_PRINT
(("fio_guasi_evít(%d)\n", 
evít
));

58 i‡(
	`guasi_ªq_öfo
(
ld
->
ªqs
[
evít
], &
röf
) < 0) {

59 
	`log_îr
("guasi_ªq_öfo(%dËFAILED!\n", 
evít
);

60  
NULL
;

62 
io_u
 = 
röf
.
asid
;

63 
io_u
->
îr‹
 = 
EINPROGRESS
;

64 
	`GDBG_PRINT
(("fio_guasi_evít(%dË-> %p\n", 
evít
, 
io_u
));

65 i‡(
röf
.
°©us
 =
GUASI_STATUS_COMPLETE
) {

66 
io_u
->
îr‹
 = 
röf
.
ªsu…
;

67 i‡(
io_u
->
ddú
 =
DDIR_READ
 ||

68 
io_u
->
ddú
 =
DDIR_WRITE
) {

69 
io_u
->
îr‹
 = 0;

70 i‡(
röf
.
ªsu…
 !(Ë
io_u
->
x„r_buÊí
) {

71 i‡(
röf
.
ªsu…
 >= 0)

72 
io_u
->
ªsid
 = io_u->
x„r_buÊí
 - 
röf
.
ªsu…
;

74 
io_u
->
îr‹
 = 
röf
.error;

79  
io_u
;

80 
	}
}

82 
	$fio_guasi_gëevíts
(
thªad_d©a
 *
td
, 
mö
,

83 
max
, 
time•ec
 *
t
)

85 
guasi_d©a
 *
ld
 = 
td
->
io_›s
->
d©a
;

86 
n
, 
r
;

87 
timeo
 = -1;

89 
	`GDBG_PRINT
(("fio_guasi_gëevíts(%d, %d)\n", 
mö
, 
max
));

90 i‡(
mö
 > 
ld
->
max_ªqs
)

91 
mö
 = 
ld
->
max_ªqs
;

92 i‡(
max
 > 
ld
->
max_ªqs
)

93 
max
 = 
ld
->
max_ªqs
;

94 i‡(
t
)

95 
timeo
 = 
t
->
tv_£c
 * 1000L +Å->
tv_n£c
 / 1000000L;

96 
n
 = 0;Ç < 
ld
->
ªqs_ƒ
;Ç++)

97 
	`guasi_ªq_‰ì
(
ld
->
ªqs
[
n
]);

98 
n
 = 0;

100 
r
 = 
	`guasi_„tch
(
ld
->
h˘x
,Üd->
ªqs
 + 
n
, 
mö
 -Ç,

101 
max
 - 
n
, 
timeo
);

102 i‡(
r
 < 0) {

103 
	`log_îr
("guasi_„tch(ËFAILED! (%d)\n", 
r
);

106 
n
 +
r
;

107 i‡(
n
 >
mö
)

110 
ld
->
ªqs_ƒ
 = 
n
;

111 
	`GDBG_PRINT
(("fio_guasi_gëevíts(Ë-> %d\n", 
n
));

113  
n
;

114 
	}
}

116 
	$fio_guasi_queue
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

118 
guasi_d©a
 *
ld
 = 
td
->
io_›s
->
d©a
;

120 
	`fio_ro_check
(
td
, 
io_u
);

122 
	`GDBG_PRINT
(("fio_guasi_queue(%p)\n", 
io_u
));

123 i‡(
ld
->
queued_ƒ
 =(Ë
td
->
o
.
iodïth
)

124  
FIO_Q_BUSY
;

126 
ld
->
io_us
[ld->
queued_ƒ
] = 
io_u
;

127 
ld
->
queued_ƒ
++;

128  
FIO_Q_QUEUED
;

129 
	}
}

131 
	$fio_guasi_queued
(
thªad_d©a
 *
td
, 
io_u
 **
io_us
, 
ƒ
)

133 
i
;

134 
io_u
 *io_u;

135 
timevÆ
 
now
;

137 i‡(!
	`fio_fûl_issue_time
(
td
))

140 
	`io_u_m¨k_submô
(
td
, 
ƒ
);

141 
	`fio_gëtime
(&
now
, 
NULL
);

142 
i
 = 0; i < 
ƒ
; i++) {

143 
io_u
 = 
io_us
[
i
];

144 
	`mem˝y
(&
io_u
->
issue_time
, &
now
, (now));

145 
	`io_u_queued
(
td
, 
io_u
);

147 
	}
}

149 
	$fio_guasi_commô
(
thªad_d©a
 *
td
)

151 
guasi_d©a
 *
ld
 = 
td
->
io_›s
->
d©a
;

152 
i
;

153 
io_u
 *io_u;

154 
fio_fûe
 *
f
;

156 
	`GDBG_PRINT
(("fio_guasi_commô(%d)\n", 
ld
->
queued_ƒ
));

157 
i
 = 0; i < 
ld
->
queued_ƒ
; i++) {

158 
io_u
 = 
ld
->
io_us
[
i
];

159 
	`GDBG_PRINT
(("fio_guasi_commô(%dË--> %p\n", 
i
, 
io_u
));

160 
f
 = 
io_u
->
fûe
;

161 
io_u
->
gªq
 = 
NULL
;

162 i‡(
io_u
->
ddú
 =
DDIR_READ
)

163 
io_u
->
gªq
 = 
	`guasi__¥ód
(
ld
->
h˘x
,Üd, io_u, 0,

164 
f
->
fd
, 
io_u
->
x„r_buf
, io_u->
x„r_buÊí
,

165 
io_u
->
off£t
);

166 i‡(
io_u
->
ddú
 =
DDIR_WRITE
)

167 
io_u
->
gªq
 = 
	`guasi__pwrôe
(
ld
->
h˘x
,Üd, io_u, 0,

168 
f
->
fd
, 
io_u
->
x„r_buf
, io_u->
x„r_buÊí
,

169 
io_u
->
off£t
);

170 i‡(
	`ddú_sync
(
io_u
->
ddú
))

171 
io_u
->
gªq
 = 
	`guasi__fsync
(
ld
->
h˘x
,Üd, io_u, 0, 
f
->
fd
);

173 
	`log_îr
("fio_guasi_commit() FAILED: unknowÑequest %d\n",

174 
io_u
->
ddú
);

176 i‡(
io_u
->
gªq
 =
NULL
) {

177 
	`log_îr
("fio_guasi_commit() FAILED: submit failed (%s)\n",

178 
	`°ªº‹
(
î∫o
));

182 
	`fio_guasi_queued
(
td
, 
ld
->
io_us
, 
i
);

183 
ld
->
queued_ƒ
 = 0;

184 
	`GDBG_PRINT
(("fio_guasi_commô(Ë-> %d\n", 
i
));

187 
	}
}

189 
	$fio_guasi_ˇn˚l
(
thªad_d©a
 
fio_unu£d
 *
td
,

190 
io_u
 *io_u)

192 
	`GDBG_PRINT
(("fio_guasi_ˇn˚l(%pËªq=%p\n", 
io_u
, io_u->
gªq
));

193 i‡(
io_u
->
gªq
 !
NULL
)

194 
	`guasi_ªq_ˇn˚l
(
io_u
->
gªq
);

197 
	}
}

199 
	$fio_guasi_˛ónup
(
thªad_d©a
 *
td
)

201 
guasi_d©a
 *
ld
 = 
td
->
io_›s
->
d©a
;

202 
n
;

204 
	`GDBG_PRINT
(("fio_guasi_˛ónup(%p)\n", 
ld
));

205 i‡(
ld
) {

206 
n
 = 0;Ç < 
ld
->
ªqs_ƒ
;Ç++)

207 
	`guasi_ªq_‰ì
(
ld
->
ªqs
[
n
]);

208 
	`guasi_‰ì
(
ld
->
h˘x
);

209 
	`‰ì
(
ld
->
ªqs
);

210 
	`‰ì
(
ld
->
io_us
);

211 
	`‰ì
(
ld
);

213 
	`GDBG_PRINT
(("fio_guasi_˛ónup(%pËDONE\n", 
ld
));

214 
	}
}

216 
	$fio_guasi_öô
(
thªad_d©a
 *
td
)

218 
maxthr
;

219 
guasi_d©a
 *
ld
 = 
	`mÆloc
((*ld));

221 
	`GDBG_PRINT
(("fio_guasi_öô(): dïth=%d\n", 
td
->
o
.
iodïth
));

222 
	`mem£t
(
ld
, 0, (*ld));

223 
maxthr
 = 
td
->
o
.
iodïth
 > 
GFIO_MIN_THREADS
 ?Åd->o.iodepth: GFIO_MIN_THREADS;

224 i‡(
maxthr
 > 
GFIO_MAX_THREADS
)

225 
maxthr
 = 
GFIO_MAX_THREADS
;

226 i‡((
ld
->
h˘x
 = 
	`guasi_¸óã
(
GFIO_MIN_THREADS
, 
maxthr
, 1)Ë=
NULL
) {

227 
	`td_vîr‹
(
td
, 
î∫o
, "guasi_create");

228 
	`‰ì
(
ld
);

231 
ld
->
max_ªqs
 = 
td
->
o
.
iodïth
;

232 
ld
->
ªqs
 = 
	`mÆloc
÷d->
max_ªqs
 * (
guasi_ªq_t
));

233 
ld
->
io_us
 = 
	`mÆloc
÷d->
max_ªqs
 * (
io_u
 *));

234 
	`mem£t
(
ld
->
io_us
, 0,Üd->
max_ªqs
 * (
io_u
 *));

235 
ld
->
queued_ƒ
 = 0;

236 
ld
->
ªqs_ƒ
 = 0;

238 
td
->
io_›s
->
d©a
 = 
ld
;

239 
	`GDBG_PRINT
(("fio_guasi_öô(): dïth=%d -> %p\n", 
td
->
o
.
iodïth
, 
ld
));

242 
	}
}

244 
i€ngöe_›s
 
	gi€ngöe
 = {

245 .
«me
 = "guasi",

246 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

247 .
	göô
 = 
fio_guasi_öô
,

248 .
	g¥ï
 = 
fio_guasi_¥ï
,

249 .
	gqueue
 = 
fio_guasi_queue
,

250 .
	gcommô
 = 
fio_guasi_commô
,

251 .
	gˇn˚l
 = 
fio_guasi_ˇn˚l
,

252 .
	ggëevíts
 = 
fio_guasi_gëevíts
,

253 .
	gevít
 = 
fio_guasi_evít
,

254 .
	g˛ónup
 = 
fio_guasi_˛ónup
,

255 .
	g›í_fûe
 = 
gíîic_›í_fûe
,

256 .
	g˛o£_fûe
 = 
gíîic_˛o£_fûe
,

257 .
	ggë_fûe_size
 = 
gíîic_gë_fûe_size
,

260 
fio_öô
 
	$fio_guasi_ªgi°î
()

262 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

263 
	}
}

265 
fio_exô
 
	$fio_guasi_uƒegi°î
()

267 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

268 
	}
}

	@/home/terekhov/tmp/fio/fio/engines/libaio.c

7 
	~<°dio.h
>

8 
	~<°dlib.h
>

9 
	~<uni°d.h
>

10 
	~<î∫o.h
>

11 
	~<as£π.h
>

12 
	~<libaio.h
>

14 
	~"../fio.h
"

16 
	slibaio_d©a
 {

17 
io_c⁄ãxt_t
 
	maio_˘x
;

18 
io_evít
 *
	maio_evíts
;

19 
iocb
 **
	miocbs
;

20 
io_u
 **
	mio_us
;

21 
	miocbs_ƒ
;

24 
	slibaio_›ti⁄s
 {

25 
thªad_d©a
 *
	mtd
;

26 
	mu£r•a˚_ª≠
;

29 
fio_›ti⁄
 
	g›ti⁄s
[] = {

31 .
«me
 = "userspace_reap",

32 .
	g ame
 = "Libaio userspaceÑeaping",

33 .
	gty≥
 = 
FIO_OPT_STR_SET
,

34 .
	goff1
 = 
off£tof
(
libaio_›ti⁄s
, 
u£r•a˚_ª≠
),

35 .
	ghñp
 = "Useálternative user-spaceÑeap implementation",

36 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

37 .
	ggroup
 = 
FIO_OPT_G_LIBAIO
,

40 .
	g«me
 = 
NULL
,

44 
	$fio_libaio_¥ï
(
thªad_d©a
 
fio_unu£d
 *
td
, 
io_u
 *io_u)

46 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

48 i‡(
io_u
->
ddú
 =
DDIR_READ
)

49 
	`io_¥ï_¥ód
(&
io_u
->
iocb
, 
f
->
fd
, io_u->
x„r_buf
, io_u->
x„r_buÊí
, io_u->
off£t
);

50 i‡(
io_u
->
ddú
 =
DDIR_WRITE
)

51 
	`io_¥ï_pwrôe
(&
io_u
->
iocb
, 
f
->
fd
, io_u->
x„r_buf
, io_u->
x„r_buÊí
, io_u->
off£t
);

52 i‡(
	`ddú_sync
(
io_u
->
ddú
))

53 
	`io_¥ï_fsync
(&
io_u
->
iocb
, 
f
->
fd
);

56 
	}
}

58 
io_u
 *
	$fio_libaio_evít
(
thªad_d©a
 *
td
, 
evít
)

60 
libaio_d©a
 *
ld
 = 
td
->
io_›s
->
d©a
;

61 
io_evít
 *
ev
;

62 
io_u
 *io_u;

64 
ev
 = 
ld
->
aio_evíts
 + 
evít
;

65 
io_u
 = 
	`c⁄èöî_of
(
ev
->
obj
, io_u, 
iocb
);

67 i‡(
ev
->
ªs
 !
io_u
->
x„r_buÊí
) {

68 i‡(
ev
->
ªs
 > 
io_u
->
x„r_buÊí
)

69 
io_u
->
îr‹
 = -
ev
->
ªs
;

71 
io_u
->
ªsid
 = io_u->
x„r_buÊí
 - 
ev
->
ªs
;

73 
io_u
->
îr‹
 = 0;

75  
io_u
;

76 
	}
}

78 
	saio_rög
 {

79 
	mid
;

80 
	mƒ
;

81 
	mhód
;

82 
	mèû
;

84 
	mmagic
;

85 
	mcom∑t_„©uªs
;

86 
	möcom∑t_„©uªs
;

87 
	mhódî_Àngth
;

89 
io_evít
 
	mevíts
[0];

92 
	#AIO_RING_MAGIC
 0xa10a10a1

	)

94 
	$u£r_io_gëevíts
(
io_c⁄ãxt_t
 
aio_˘x
, 
max
,

95 
io_evít
 *
evíts
)

97 
i
 = 0;

98 
hód
;

99 
aio_rög
 *
rög
 = (aio_rög*Ë
aio_˘x
;

101 
i
 < 
max
) {

102 
hód
 = 
rög
->head;

104 i‡(
hód
 =
rög
->
èû
) {

109 
evíts
[
i
] = 
rög
->evíts[
hód
];

110 
	`ªad_b¨rõr
();

111 
rög
->
hód
 = (hód + 1Ë%Ñög->
ƒ
;

112 
i
++;

116  
i
;

117 
	}
}

119 
	$fio_libaio_gëevíts
(
thªad_d©a
 *
td
, 
mö
,

120 
max
, 
time•ec
 *
t
)

122 
libaio_d©a
 *
ld
 = 
td
->
io_›s
->
d©a
;

123 
libaio_›ti⁄s
 *
o
 = 
td
->
eo
;

124 
a˘uÆ_mö
 = 
td
->
o
.
iodïth_b©ch_com∂ëe
 =0 ? 0 : 
mö
;

125 
r
, 
evíts
 = 0;

128 i‡(
o
->
u£r•a˚_ª≠
 == 1

129 && 
a˘uÆ_mö
 == 0

130 && ((
aio_rög
 *)(
ld
->
aio_˘x
))->
magic


131 =
AIO_RING_MAGIC
) {

132 
r
 = 
	`u£r_io_gëevíts
(
ld
->
aio_˘x
, 
max
,

133 
ld
->
aio_evíts
 + 
evíts
);

135 
r
 = 
	`io_gëevíts
(
ld
->
aio_˘x
, 
a˘uÆ_mö
,

136 
max
, 
ld
->
aio_evíts
 + 
evíts
, 
t
);

138 i‡(
r
 >= 0)

139 
evíts
 +
r
;

140 i‡(
r
 =-
EAGAIN
)

141 
	`u¶ìp
(100);

142 } 
evíts
 < 
mö
);

144  
r
 < 0 ?Ñ : 
evíts
;

145 
	}
}

147 
	$fio_libaio_queue
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

149 
libaio_d©a
 *
ld
 = 
td
->
io_›s
->
d©a
;

151 
	`fio_ro_check
(
td
, 
io_u
);

153 i‡(
ld
->
iocbs_ƒ
 =(Ë
td
->
o
.
iodïth
)

154  
FIO_Q_BUSY
;

162 i‡(
	`ddú_sync
(
io_u
->
ddú
)) {

163 i‡(
ld
->
iocbs_ƒ
)

164  
FIO_Q_BUSY
;

166 
	`do_io_u_sync
(
td
, 
io_u
);

167  
FIO_Q_COMPLETED
;

170 i‡(
io_u
->
ddú
 =
DDIR_TRIM
) {

171 i‡(
ld
->
iocbs_ƒ
)

172  
FIO_Q_BUSY
;

174 
	`do_io_u_åim
(
td
, 
io_u
);

175  
FIO_Q_COMPLETED
;

178 
ld
->
iocbs
[ld->
iocbs_ƒ
] = &
io_u
->
iocb
;

179 
ld
->
io_us
[ld->
iocbs_ƒ
] = 
io_u
;

180 
ld
->
iocbs_ƒ
++;

181  
FIO_Q_QUEUED
;

182 
	}
}

184 
	$fio_libaio_queued
(
thªad_d©a
 *
td
, 
io_u
 **
io_us
,

185 
ƒ
)

187 
timevÆ
 
now
;

188 
i
;

190 i‡(!
	`fio_fûl_issue_time
(
td
))

193 
	`fio_gëtime
(&
now
, 
NULL
);

195 
i
 = 0; i < 
ƒ
; i++) {

196 
io_u
 *io_u = 
io_us
[
i
];

198 
	`mem˝y
(&
io_u
->
issue_time
, &
now
, (now));

199 
	`io_u_queued
(
td
, 
io_u
);

201 
	}
}

203 
	$fio_libaio_commô
(
thªad_d©a
 *
td
)

205 
libaio_d©a
 *
ld
 = 
td
->
io_›s
->
d©a
;

206 
iocb
 **
iocbs
;

207 
io_u
 **
io_us
;

208 
ªt
;

210 i‡(!
ld
->
iocbs_ƒ
)

213 
io_us
 = 
ld
->io_us;

214 
iocbs
 = 
ld
->iocbs;

216 
ªt
 = 
	`io_submô
(
ld
->
aio_˘x
,Üd->
iocbs_ƒ
, 
iocbs
);

217 i‡(
ªt
 > 0) {

218 
	`fio_libaio_queued
(
td
, 
io_us
, 
ªt
);

219 
	`io_u_m¨k_submô
(
td
, 
ªt
);

220 
ld
->
iocbs_ƒ
 -
ªt
;

221 
io_us
 +
ªt
;

222 
iocbs
 +
ªt
;

223 
ªt
 = 0;

224 } i‡(!
ªt
 ||Ñë =-
EAGAIN
 ||Ñë =-
EINTR
) {

225 i‡(!
ªt
)

226 
	`io_u_m¨k_submô
(
td
, 
ªt
);

230 } 
ld
->
iocbs_ƒ
);

232  
ªt
;

233 
	}
}

235 
	$fio_libaio_ˇn˚l
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

237 
libaio_d©a
 *
ld
 = 
td
->
io_›s
->
d©a
;

239  
	`io_ˇn˚l
(
ld
->
aio_˘x
, &
io_u
->
iocb
,Üd->
aio_evíts
);

240 
	}
}

242 
	$fio_libaio_˛ónup
(
thªad_d©a
 *
td
)

244 
libaio_d©a
 *
ld
 = 
td
->
io_›s
->
d©a
;

246 i‡(
ld
) {

247 
	`io_de°roy
(
ld
->
aio_˘x
);

248 
	`‰ì
(
ld
->
aio_evíts
);

249 
	`‰ì
(
ld
->
iocbs
);

250 
	`‰ì
(
ld
->
io_us
);

251 
	`‰ì
(
ld
);

253 
	}
}

255 
	$fio_libaio_öô
(
thªad_d©a
 *
td
)

257 
libaio_d©a
 *
ld
 = 
	`mÆloc
((*ld));

258 
libaio_›ti⁄s
 *
o
 = 
td
->
eo
;

259 
îr
 = 0;

261 
	`mem£t
(
ld
, 0, (*ld));

268 i‡(!
o
->
u£r•a˚_ª≠
)

269 
îr
 = 
	`io_queue_öô
(
INT_MAX
, &
ld
->
aio_˘x
);

270 i‡(
o
->
u£r•a˚_ª≠
 || 
îr
 =-
EINVAL
)

271 
îr
 = 
	`io_queue_öô
(
td
->
o
.
iodïth
, &
ld
->
aio_˘x
);

272 i‡(
îr
) {

273 
	`td_vîr‹
(
td
, -
îr
, "io_queue_init");

274 
	`log_îr
("fio: check /proc/sys/fs/aio-max-nr\n");

275 
	`‰ì
(
ld
);

279 
ld
->
aio_evíts
 = 
	`mÆloc
(
td
->
o
.
iodïth
 * (
io_evít
));

280 
	`mem£t
(
ld
->
aio_evíts
, 0, 
td
->
o
.
iodïth
 * (
io_evít
));

281 
ld
->
iocbs
 = 
	`mÆloc
(
td
->
o
.
iodïth
 * (
iocb
 *));

282 
	`mem£t
(
ld
->
iocbs
, 0, (
iocb
 *));

283 
ld
->
io_us
 = 
	`mÆloc
(
td
->
o
.
iodïth
 * (
io_u
 *));

284 
	`mem£t
(
ld
->
io_us
, 0, 
td
->
o
.
iodïth
 * (
io_u
 *));

285 
ld
->
iocbs_ƒ
 = 0;

287 
td
->
io_›s
->
d©a
 = 
ld
;

289 
	}
}

291 
i€ngöe_›s
 
	gi€ngöe
 = {

292 .
«me
 = "libaio",

293 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

294 .
	göô
 = 
fio_libaio_öô
,

295 .
	g¥ï
 = 
fio_libaio_¥ï
,

296 .
	gqueue
 = 
fio_libaio_queue
,

297 .
	gcommô
 = 
fio_libaio_commô
,

298 .
	gˇn˚l
 = 
fio_libaio_ˇn˚l
,

299 .
	ggëevíts
 = 
fio_libaio_gëevíts
,

300 .
	gevít
 = 
fio_libaio_evít
,

301 .
	g˛ónup
 = 
fio_libaio_˛ónup
,

302 .
	g›í_fûe
 = 
gíîic_›í_fûe
,

303 .
	g˛o£_fûe
 = 
gíîic_˛o£_fûe
,

304 .
	ggë_fûe_size
 = 
gíîic_gë_fûe_size
,

305 .
	g›ti⁄s
 = 
›ti⁄s
,

306 .
	g›ti⁄_°ru˘_size
 = (
libaio_›ti⁄s
),

309 
fio_öô
 
	$fio_libaio_ªgi°î
()

311 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

312 
	}
}

314 
fio_exô
 
	$fio_libaio_uƒegi°î
()

316 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

317 
	}
}

	@/home/terekhov/tmp/fio/fio/engines/mmap.c

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<uni°d.h
>

11 
	~<î∫o.h
>

12 
	~<sys/mm™.h
>

14 
	~"../fio.h
"

15 
	~"../vîify.h
"

20 
	#MMAP_TOTAL_SZ
 (1 * 1024 * 1024 * 1024UL)

	)

22 
	gmm≠_m≠_size
;

23 
	gmm≠_m≠_mask
;

25 
	$fio_mm≠_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

26 
size_t
 
Àngth
, 
off_t
 
off
)

28 
Êags
 = 0;

30 i‡(
	`td_rw
(
td
))

31 
Êags
 = 
PROT_READ
 | 
PROT_WRITE
;

32 i‡(
	`td_wrôe
(
td
)) {

33 
Êags
 = 
PROT_WRITE
;

35 i‡(
td
->
o
.
vîify
 !
VERIFY_NONE
)

36 
Êags
 |
PROT_READ
;

38 
Êags
 = 
PROT_READ
;

40 
f
->
mm≠_±r
 = 
	`mm≠
(
NULL
, 
Àngth
, 
Êags
, 
MAP_SHARED
, f->
fd
, 
off
);

41 i‡(
f
->
mm≠_±r
 =
MAP_FAILED
) {

42 
f
->
mm≠_±r
 = 
NULL
;

43 
	`td_vîr‹
(
td
, 
î∫o
, "mmap");

44 
îr
;

47 i‡(!
	`td_øndom
(
td
)) {

48 i‡(
	`posix_madvi£
(
f
->
mm≠_±r
, 
Àngth
, 
POSIX_MADV_SEQUENTIAL
) < 0) {

49 
	`td_vîr‹
(
td
, 
î∫o
, "madvise");

50 
îr
;

53 i‡(
	`posix_madvi£
(
f
->
mm≠_±r
, 
Àngth
, 
POSIX_MADV_RANDOM
) < 0) {

54 
	`td_vîr‹
(
td
, 
î∫o
, "madvise");

55 
îr
;

59 
îr
:

60 i‡(
td
->
îr‹
 && 
f
->
mm≠_±r
)

61 
	`munm≠
(
f
->
mm≠_±r
, 
Àngth
);

63  
td
->
îr‹
;

64 
	}
}

69 
	$fio_mm≠io_¥ï_limôed
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

71 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

73 i‡(
io_u
->
buÊí
 > 
mm≠_m≠_size
) {

74 
	`log_îr
("fio: bsÅoo big for mmapÉngine\n");

75  
EIO
;

78 
f
->
mm≠_sz
 = 
mm≠_m≠_size
;

79 i‡(
f
->
mm≠_sz
 > f->
io_size
)

80 
f
->
mm≠_sz
 = f->
io_size
;

82 
f
->
mm≠_off
 = 
io_u
->
off£t
;

84  
	`fio_mm≠_fûe
(
td
, 
f
, f->
mm≠_sz
, f->
mm≠_off
);

85 
	}
}

90 
	$fio_mm≠io_¥ï_fuŒ
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

92 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

93 
ªt
;

95 i‡(
	`fio_fûe_∑πül_mm≠
(
f
))

96  
EINVAL
;

98 
f
->
mm≠_sz
 = f->
io_size
;

99 
f
->
mm≠_off
 = 0;

101 
ªt
 = 
	`fio_mm≠_fûe
(
td
, 
f
, f->
mm≠_sz
, f->
mm≠_off
);

102 i‡(
ªt
)

103 
	`fio_fûe_£t_∑πül_mm≠
(
f
);

105  
ªt
;

106 
	}
}

108 
	$fio_mm≠io_¥ï
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

110 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

111 
ªt
;

116 i‡(
io_u
->
off£t
 >
f
->
mm≠_off
 &&

117 
io_u
->
off£t
 + io_u->
buÊí
 < 
f
->
mm≠_off
 + f->
mm≠_sz
)

118 
d⁄e
;

123 i‡(
f
->
mm≠_±r
) {

124 i‡(
	`munm≠
(
f
->
mm≠_±r
, f->
mm≠_sz
) < 0)

125  
î∫o
;

126 
f
->
mm≠_±r
 = 
NULL
;

129 i‡(
	`fio_mm≠io_¥ï_fuŒ
(
td
, 
io_u
)) {

130 
	`td_˛ór_îr‹
(
td
);

131 
ªt
 = 
	`fio_mm≠io_¥ï_limôed
(
td
, 
io_u
);

132 i‡(
ªt
)

133  
ªt
;

136 
d⁄e
:

137 
io_u
->
mm≠_d©a
 = 
f
->
mm≠_±r
 + io_u->
off£t
 - f->
mm≠_off
 -

138 
f
->
fûe_off£t
;

140 
	}
}

142 
	$fio_mm≠io_queue
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

144 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

146 
	`fio_ro_check
(
td
, 
io_u
);

148 i‡(
io_u
->
ddú
 =
DDIR_READ
)

149 
	`mem˝y
(
io_u
->
x„r_buf
, io_u->
mm≠_d©a
, io_u->
x„r_buÊí
);

150 i‡(
io_u
->
ddú
 =
DDIR_WRITE
)

151 
	`mem˝y
(
io_u
->
mm≠_d©a
, io_u->
x„r_buf
, io_u->
x„r_buÊí
);

152 i‡(
	`ddú_sync
(
io_u
->
ddú
)) {

153 i‡(
	`msync
(
f
->
mm≠_±r
, f->
mm≠_sz
, 
MS_SYNC
)) {

154 
io_u
->
îr‹
 = 
î∫o
;

155 
	`td_vîr‹
(
td
, 
io_u
->
îr‹
, "msync");

157 } i‡(
io_u
->
ddú
 =
DDIR_TRIM
) {

158 
ªt
 = 
	`do_io_u_åim
(
td
, 
io_u
);

160 i‡(!
ªt
)

161 
	`td_vîr‹
(
td
, 
io_u
->
îr‹
, "trim");

168 i‡(
td
->
o
.
odúe˘
 && 
	`ddú_rw
(
io_u
->
ddú
)) {

169 i‡(
	`msync
(
io_u
->
mm≠_d©a
, io_u->
x„r_buÊí
, 
MS_SYNC
) < 0) {

170 
io_u
->
îr‹
 = 
î∫o
;

171 
	`td_vîr‹
(
td
, 
io_u
->
îr‹
, "msync");

173 i‡(
	`posix_madvi£
(
io_u
->
mm≠_d©a
, io_u->
x„r_buÊí
, 
POSIX_MADV_DONTNEED
) < 0) {

174 
io_u
->
îr‹
 = 
î∫o
;

175 
	`td_vîr‹
(
td
, 
io_u
->
îr‹
, "madvise");

179  
FIO_Q_COMPLETED
;

180 
	}
}

182 
	$fio_mm≠io_öô
(
thªad_d©a
 *
td
)

184 
thªad_›ti⁄s
 *
o
 = &
td
->o;

185 
shi·
, 
mask
;

187 i‡((
td
->
o
.
rw_mö_bs
 & 
∑ge_mask
) &&

188 (
o
->
odúe˘
 || o->
fsync_blocks
 || o->
fd©async_blocks
)) {

189 
	`log_îr
("fio: mmap options dictateá minimum block size of "

190 "%Œu byãs\n", (Ë
∑ge_size
);

194 
mm≠_m≠_size
 = 
MMAP_TOTAL_SZ
 / 
td
->
o
.
ƒ_fûes
;

195 
mask
 = 
mm≠_m≠_size
;

196 
shi·
 = 0;

198 
mask
 >>= 1;

199 i‡(!
mask
)

201 
shi·
++;

204 
mm≠_m≠_mask
 = 1UL << 
shi·
;

206 
	}
}

208 
i€ngöe_›s
 
	gi€ngöe
 = {

209 .
«me
 = "mmap",

210 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

211 .
	göô
 = 
fio_mm≠io_öô
,

212 .
	g¥ï
 = 
fio_mm≠io_¥ï
,

213 .
	gqueue
 = 
fio_mm≠io_queue
,

214 .
	g›í_fûe
 = 
gíîic_›í_fûe
,

215 .
	g˛o£_fûe
 = 
gíîic_˛o£_fûe
,

216 .
	ggë_fûe_size
 = 
gíîic_gë_fûe_size
,

217 .
	gÊags
 = 
FIO_SYNCIO
 | 
FIO_NOEXTEND
,

220 
fio_öô
 
	$fio_mm≠io_ªgi°î
()

222 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

223 
	}
}

225 
fio_exô
 
	$fio_mm≠io_uƒegi°î
()

227 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

228 
	}
}

	@/home/terekhov/tmp/fio/fio/engines/net.c

7 
	~<°dio.h
>

8 
	~<°dlib.h
>

9 
	~<uni°d.h
>

10 
	~<sig«l.h
>

11 
	~<î∫o.h
>

12 
	~<as£π.h
>

13 
	~<√töë/ö.h
>

14 
	~<√töë/t˝.h
>

15 
	~<¨∑/öë.h
>

16 
	~<√tdb.h
>

17 
	~<sys/pﬁl.h
>

18 
	~<sys/ty≥s.h
>

19 
	~<sys/°©.h
>

20 
	~<sys/sockë.h
>

21 
	~<sys/un.h
>

23 
	~"../fio.h
"

25 
	s√tio_d©a
 {

26 
	mli°ífd
;

27 
	mu£_•li˚
;

28 
	mpùes
[2];

29 
sockaddr_ö
 
	maddr
;

30 
sockaddr_ö6
 
	maddr6
;

31 
sockaddr_un
 
	maddr_un
;

34 
	s√tio_›ti⁄s
 {

35 
thªad_d©a
 *
	mtd
;

36 
	mp‹t
;

37 
	m¥Ÿo
;

38 
	mli°í
;

39 
	mpögp⁄g
;

40 
	mnodñay
;

41 
	mâl
;

42 *
	mötfc
;

45 
	sudp_˛o£_msg
 {

46 
uöt32_t
 
	mmagic
;

47 
uöt32_t
 
	mcmd
;

51 
	mFIO_LINK_CLOSE
 = 0x89,

52 
	mFIO_LINK_OPEN_CLOSE_MAGIC
 = 0x6c696e6b,

53 
	mFIO_LINK_OPEN
 = 0x98,

55 
	mFIO_TYPE_TCP
 = 1,

56 
	mFIO_TYPE_UDP
 = 2,

57 
	mFIO_TYPE_UNIX
 = 3,

58 
	mFIO_TYPE_TCP_V6
 = 4,

59 
	mFIO_TYPE_UDP_V6
 = 5,

62 
°r_ho°«me_cb
(*
d©a
, c⁄° *
öput
);

63 
fio_›ti⁄
 
	g›ti⁄s
[] = {

65 .
«me
 = "hostname",

66 .
	g ame
 = "netÉngine hostname",

67 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

68 .
	gcb
 = 
°r_ho°«me_cb
,

69 .
	ghñp
 = "Hostname forÇet IOÉngine",

70 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

71 .
	ggroup
 = 
FIO_OPT_G_NETIO
,

74 .
	g«me
 = "port",

75 .
	g ame
 = "netÉngineÖort",

76 .
	gty≥
 = 
FIO_OPT_INT
,

77 .
	goff1
 = 
off£tof
(
√tio_›ti⁄s
, 
p‹t
),

78 .
	gmövÆ
 = 1,

79 .
	gmaxvÆ
 = 65535,

80 .
	ghñp
 = "PortÅo use for TCP or UDPÇet connections",

81 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

82 .
	ggroup
 = 
FIO_OPT_G_NETIO
,

85 .
	g«me
 = "protocol",

86 .
	g ame
 = "netÉngineÖrotocol",

87 .
	gÆüs
 = "proto",

88 .
	gty≥
 = 
FIO_OPT_STR
,

89 .
	goff1
 = 
off£tof
(
√tio_›ti⁄s
, 
¥Ÿo
),

90 .
	ghñp
 = "NetworkÖrotocolÅo use",

91 .
	gdef
 = "tcp",

92 .
	gposvÆ
 = {

93 { .
ivÆ
 = "tcp",

94 .
	govÆ
 = 
FIO_TYPE_TCP
,

95 .
	ghñp
 = "Transmission Control Protocol",

97 #ifde‡
CONFIG_IPV6


98 { .
	givÆ
 = "tcpv6",

99 .
	govÆ
 = 
FIO_TYPE_TCP_V6
,

100 .
	ghñp
 = "Transmission Control Protocol V6",

103 { .
	givÆ
 = "udp",

104 .
	govÆ
 = 
FIO_TYPE_UDP
,

105 .
	ghñp
 = "User Datagram Protocol",

107 #ifde‡
CONFIG_IPV6


108 { .
	givÆ
 = "udpv6",

109 .
	govÆ
 = 
FIO_TYPE_UDP_V6
,

110 .
	ghñp
 = "User Datagram Protocol V6",

113 { .
	givÆ
 = "unix",

114 .
	govÆ
 = 
FIO_TYPE_UNIX
,

115 .
	ghñp
 = "UNIX domain socket",

118 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

119 .
	ggroup
 = 
FIO_OPT_G_NETIO
,

121 #ifde‡
CONFIG_TCP_NODELAY


123 .
	g«me
 = "nodelay",

124 .
	gty≥
 = 
FIO_OPT_BOOL
,

125 .
	goff1
 = 
off£tof
(
√tio_›ti⁄s
, 
nodñay
),

126 .
	ghñp
 = "Use TCP_NODELAY on TCP connections",

127 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

128 .
	ggroup
 = 
FIO_OPT_G_NETIO
,

132 .
	g«me
 = "listen",

133 .
	g ame
 = "netÉngineÜisten",

134 .
	gty≥
 = 
FIO_OPT_STR_SET
,

135 .
	goff1
 = 
off£tof
(
√tio_›ti⁄s
, 
li°í
),

136 .
	ghñp
 = "Listen for incoming TCP connections",

137 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

138 .
	ggroup
 = 
FIO_OPT_G_NETIO
,

141 .
	g«me
 = "pingpong",

142 .
	gty≥
 = 
FIO_OPT_STR_SET
,

143 .
	goff1
 = 
off£tof
(
√tio_›ti⁄s
, 
pögp⁄g
),

144 .
	ghñp
 = "Ping-pong IOÑequests",

145 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

146 .
	ggroup
 = 
FIO_OPT_G_NETIO
,

149 .
	g«me
 = "interface",

150 .
	g ame
 = "netÉngine interface",

151 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

152 .
	goff1
 = 
off£tof
(
√tio_›ti⁄s
, 
ötfc
),

153 .
	ghñp
 = "Network interfaceÅo use",

154 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

155 .
	ggroup
 = 
FIO_OPT_G_NETIO
,

158 .
	g«me
 = "ttl",

159 .
	g ame
 = "netÉngine multicastÅtl",

160 .
	gty≥
 = 
FIO_OPT_INT
,

161 .
	goff1
 = 
off£tof
(
√tio_›ti⁄s
, 
âl
),

162 .
	gdef
 = "1",

163 .
	gmövÆ
 = 0,

164 .
	ghñp
 = "Time-to-live value for outgoing UDP multicastÖackets",

165 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

166 .
	ggroup
 = 
FIO_OPT_G_NETIO
,

169 .
	g«me
 = 
NULL
,

173 
ölöe
 
	$is_udp
(
√tio_›ti⁄s
 *
o
)

175  
o
->
¥Ÿo
 =
FIO_TYPE_UDP
 || o->¥Ÿÿ=
FIO_TYPE_UDP_V6
;

176 
	}
}

178 
ölöe
 
	$is_t˝
(
√tio_›ti⁄s
 *
o
)

180  
o
->
¥Ÿo
 =
FIO_TYPE_TCP
 || o->¥Ÿÿ=
FIO_TYPE_TCP_V6
;

181 
	}
}

183 
ölöe
 
	$is_ùv6
(
√tio_›ti⁄s
 *
o
)

185  
o
->
¥Ÿo
 =
FIO_TYPE_UDP_V6
 || o->¥Ÿÿ=
FIO_TYPE_TCP_V6
;

186 
	}
}

192 
	$pﬁl_waô
(
thªad_d©a
 *
td
, 
fd
, 
evíts
)

194 
pﬁlfd
 
pfd
;

195 
ªt
;

197 !
td
->
ãrmö©e
) {

198 
pfd
.
fd
 = fd;

199 
pfd
.
evíts
 =Évents;

200 
ªt
 = 
	`pﬁl
(&
pfd
, 1, -1);

201 i‡(
ªt
 < 0) {

202 i‡(
î∫o
 =
EINTR
)

205 
	`td_vîr‹
(
td
, 
î∫o
, "poll");

207 } i‡(!
ªt
)

213 i‡(
pfd
.
ªvíts
 & 
evíts
)

217 
	}
}

219 
	$fio_√tio_is_mu…iˇ°
(c⁄° *
mˇddr
)

221 
ö_addr_t
 
addr
 = 
	`öë_√tw‹k
(
mˇddr
);

222 i‡(
addr
 == -1)

225 i‡(
	`öë_√tw‹k
("224.0.0.0"Ë<
addr
 &&

226 
	`öë_√tw‹k
("239.255.255.255"Ë>
addr
)

230 
	}
}

233 
	$fio_√tio_¥ï
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

235 
√tio_›ti⁄s
 *
o
 = 
td
->
eo
;

240 i‡(
	`is_t˝
(
o
))

243 i‡((
o
->
li°í
 && 
io_u
->
ddú
 =
DDIR_WRITE
) ||

244 (!
o
->
li°í
 && 
io_u
->
ddú
 =
DDIR_READ
)) {

245 
	`td_vîr‹
(
td
, 
EINVAL
, "bad direction");

250 
	}
}

252 #ifde‡
CONFIG_LINUX_SPLICE


253 
	$•li˚_io_u
(
fdö
, 
fdout
, 
Àn
)

255 
byãs
 = 0;

257 
Àn
) {

258 
ªt
 = 
	`•li˚
(
fdö
, 
NULL
, 
fdout
, NULL, 
Àn
, 0);

260 i‡(
ªt
 < 0) {

261 i‡(!
byãs
)

262 
byãs
 = 
ªt
;

265 } i‡(!
ªt
)

268 
byãs
 +
ªt
;

269 
Àn
 -
ªt
;

272  
byãs
;

273 
	}
}

278 
	$•li˚_ö
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

280 
√tio_d©a
 *
nd
 = 
td
->
io_›s
->
d©a
;

282  
	`•li˚_io_u
(
io_u
->
fûe
->
fd
, 
nd
->
pùes
[1], io_u->
x„r_buÊí
);

283 
	}
}

288 
	$•li˚_out
(
thªad_d©a
 *
td
, 
io_u
 *io_u,

289 
Àn
)

291 
√tio_d©a
 *
nd
 = 
td
->
io_›s
->
d©a
;

293  
	`•li˚_io_u
(
nd
->
pùes
[0], 
io_u
->
fûe
->
fd
, 
Àn
);

294 
	}
}

296 
	$vm•li˚_io_u
(
io_u
 *io_u, 
fd
, 
Àn
)

298 
iovec
 
iov
 = {

299 .
iov_ba£
 = 
io_u
->
x„r_buf
,

300 .
iov_Àn
 = 
Àn
,

302 
byãs
 = 0;

304 
iov
.
iov_Àn
) {

305 
ªt
 = 
	`vm•li˚
(
fd
, &
iov
, 1, 
SPLICE_F_MOVE
);

307 i‡(
ªt
 < 0) {

308 i‡(!
byãs
)

309 
byãs
 = 
ªt
;

311 } i‡(!
ªt
)

314 
iov
.
iov_Àn
 -
ªt
;

315 
iov
.
iov_ba£
 +
ªt
;

316 
byãs
 +
ªt
;

319  
byãs
;

321 
	}
}

326 
	$vm•li˚_io_u_out
(
thªad_d©a
 *
td
, 
io_u
 *io_u,

327 
Àn
)

329 
√tio_d©a
 *
nd
 = 
td
->
io_›s
->
d©a
;

331  
	`vm•li˚_io_u
(
io_u
, 
nd
->
pùes
[0], 
Àn
);

332 
	}
}

337 
	$vm•li˚_io_u_ö
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

339 
√tio_d©a
 *
nd
 = 
td
->
io_›s
->
d©a
;

341  
	`vm•li˚_io_u
(
io_u
, 
nd
->
pùes
[1], io_u->
x„r_buÊí
);

342 
	}
}

348 
	$fio_√tio_•li˚_ö
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

350 
ªt
;

352 
ªt
 = 
	`•li˚_ö
(
td
, 
io_u
);

353 i‡(
ªt
 > 0)

354  
	`vm•li˚_io_u_out
(
td
, 
io_u
, 
ªt
);

356  
ªt
;

357 
	}
}

363 
	$fio_√tio_•li˚_out
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

365 
ªt
;

367 
ªt
 = 
	`vm•li˚_io_u_ö
(
td
, 
io_u
);

368 i‡(
ªt
 > 0)

369  
	`•li˚_out
(
td
, 
io_u
, 
ªt
);

371  
ªt
;

372 
	}
}

374 
	$fio_√tio_•li˚_ö
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

376 
î∫o
 = 
EOPNOTSUPP
;

378 
	}
}

380 
	$fio_√tio_•li˚_out
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

382 
î∫o
 = 
EOPNOTSUPP
;

384 
	}
}

387 
	$fio_√tio_£nd
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

389 
√tio_d©a
 *
nd
 = 
td
->
io_›s
->
d©a
;

390 
√tio_›ti⁄s
 *
o
 = 
td
->
eo
;

391 
ªt
, 
Êags
 = 0;

394 i‡(
	`is_udp
(
o
)) {

395 c⁄° 
sockaddr
 *
to
;

396 
sockÀn_t
 
Àn
;

398 i‡(
	`is_ùv6
(
o
)) {

399 
to
 = (
sockaddr
 *Ë&
nd
->
addr6
;

400 
Àn
 = (
nd
->
addr6
);

402 
to
 = (
sockaddr
 *Ë&
nd
->
addr
;

403 
Àn
 = (
nd
->
addr
);

406 
ªt
 = 
	`£ndto
(
io_u
->
fûe
->
fd
, io_u->
x„r_buf
,

407 
io_u
->
x„r_buÊí
, 
Êags
, 
to
, 
Àn
);

412 #ifde‡
MSG_MORE


413 i‡((
td
->
this_io_byãs
[
DDIR_WRITE
] + 
io_u
->
x„r_buÊí
 <

414 
td
->
o
.
size
Ë&& !o->
pögp⁄g
)

415 
Êags
 |
MSG_MORE
;

417 
ªt
 = 
	`£nd
(
io_u
->
fûe
->
fd
, io_u->
x„r_buf
,

418 
io_u
->
x„r_buÊí
, 
Êags
);

420 i‡(
ªt
 > 0)

423 
ªt
 = 
	`pﬁl_waô
(
td
, 
io_u
->
fûe
->
fd
, 
POLLOUT
);

424 i‡(
ªt
 <= 0)

428  
ªt
;

429 
	}
}

431 
	$is_udp_˛o£
(
io_u
 *io_u, 
Àn
)

433 
udp_˛o£_msg
 *
msg
;

435 i‡(
Àn
 !(
udp_˛o£_msg
))

438 
msg
 = 
io_u
->
x„r_buf
;

439 i‡(
	`¡ohl
(
msg
->
magic
Ë!
FIO_LINK_OPEN_CLOSE_MAGIC
)

441 i‡(
	`¡ohl
(
msg
->
cmd
Ë!
FIO_LINK_CLOSE
)

445 
	}
}

447 
	$fio_√tio_ªcv
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

449 
√tio_d©a
 *
nd
 = 
td
->
io_›s
->
d©a
;

450 
√tio_›ti⁄s
 *
o
 = 
td
->
eo
;

451 
ªt
, 
Êags
 = 0;

454 i‡(
	`is_udp
(
o
)) {

455 
sockaddr
 *
‰om
;

456 
sockÀn_t
 
l
, *
Àn
 = &l;

458 i‡(
o
->
li°í
) {

459 i‡(!
	`is_ùv6
(
o
)) {

460 
‰om
 = (
sockaddr
 *Ë&
nd
->
addr
;

461 *
Àn
 = (
nd
->
addr
);

463 
‰om
 = (
sockaddr
 *Ë&
nd
->
addr6
;

464 *
Àn
 = (
nd
->
addr6
);

467 
‰om
 = 
NULL
;

468 
Àn
 = 
NULL
;

471 
ªt
 = 
	`ªcv‰om
(
io_u
->
fûe
->
fd
, io_u->
x„r_buf
,

472 
io_u
->
x„r_buÊí
, 
Êags
, 
‰om
, 
Àn
);

473 i‡(
	`is_udp_˛o£
(
io_u
, 
ªt
)) {

474 
td
->
d⁄e
 = 1;

478 
ªt
 = 
	`ªcv
(
io_u
->
fûe
->
fd
, io_u->
x„r_buf
,

479 
io_u
->
x„r_buÊí
, 
Êags
);

481 i‡(
ªt
 > 0)

483 i‡(!
ªt
 && (
Êags
 & 
MSG_WAITALL
))

486 
ªt
 = 
	`pﬁl_waô
(
td
, 
io_u
->
fûe
->
fd
, 
POLLIN
);

487 i‡(
ªt
 <= 0)

489 
Êags
 |
MSG_WAITALL
;

492  
ªt
;

493 
	}
}

495 
	$__fio_√tio_queue
(
thªad_d©a
 *
td
, 
io_u
 *io_u,

496 
fio_ddú
 
ddú
)

498 
√tio_d©a
 *
nd
 = 
td
->
io_›s
->
d©a
;

499 
√tio_›ti⁄s
 *
o
 = 
td
->
eo
;

500 
ªt
;

502 i‡(
ddú
 =
DDIR_WRITE
) {

503 i‡(!
nd
->
u£_•li˚
 || 
	`is_udp
(
o
) ||

504 
o
->
¥Ÿo
 =
FIO_TYPE_UNIX
)

505 
ªt
 = 
	`fio_√tio_£nd
(
td
, 
io_u
);

507 
ªt
 = 
	`fio_√tio_•li˚_out
(
td
, 
io_u
);

508 } i‡(
ddú
 =
DDIR_READ
) {

509 i‡(!
nd
->
u£_•li˚
 || 
	`is_udp
(
o
) ||

510 
o
->
¥Ÿo
 =
FIO_TYPE_UNIX
)

511 
ªt
 = 
	`fio_√tio_ªcv
(
td
, 
io_u
);

513 
ªt
 = 
	`fio_√tio_•li˚_ö
(
td
, 
io_u
);

515 
ªt
 = 0;

517 i‡(
ªt
 !(Ë
io_u
->
x„r_buÊí
) {

518 i‡(
ªt
 >= 0) {

519 
io_u
->
ªsid
 = io_u->
x„r_buÊí
 - 
ªt
;

520 
io_u
->
îr‹
 = 0;

521  
FIO_Q_COMPLETED
;

523 
îr
 = 
î∫o
;

525 i‡(
ddú
 =
DDIR_WRITE
 && 
îr
 =
EMSGSIZE
)

526  
FIO_Q_BUSY
;

528 
io_u
->
îr‹
 = 
îr
;

532 i‡(
io_u
->
îr‹
)

533 
	`td_vîr‹
(
td
, 
io_u
->
îr‹
, "xfer");

535  
FIO_Q_COMPLETED
;

536 
	}
}

538 
	$fio_√tio_queue
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

540 
√tio_›ti⁄s
 *
o
 = 
td
->
eo
;

541 
ªt
;

543 
	`fio_ro_check
(
td
, 
io_u
);

545 
ªt
 = 
	`__fio_√tio_queue
(
td
, 
io_u
, io_u->
ddú
);

546 i‡(!
o
->
pögp⁄g
 || 
ªt
 !
FIO_Q_COMPLETED
)

547  
ªt
;

552 i‡(
	`td_ªad
(
td
Ë&& 
io_u
->
ddú
 =
DDIR_READ
)

553 
ªt
 = 
	`__fio_√tio_queue
(
td
, 
io_u
, 
DDIR_WRITE
);

554 i‡(
	`td_wrôe
(
td
Ë&& 
io_u
->
ddú
 =
DDIR_WRITE
)

555 
ªt
 = 
	`__fio_√tio_queue
(
td
, 
io_u
, 
DDIR_READ
);

557  
ªt
;

558 
	}
}

560 
	$fio_√tio_c⁄√˘
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

562 
√tio_d©a
 *
nd
 = 
td
->
io_›s
->
d©a
;

563 
√tio_›ti⁄s
 *
o
 = 
td
->
eo
;

564 
ty≥
, 
domaö
;

566 i‡(
o
->
¥Ÿo
 =
FIO_TYPE_TCP
) {

567 
domaö
 = 
AF_INET
;

568 
ty≥
 = 
SOCK_STREAM
;

569 } i‡(
o
->
¥Ÿo
 =
FIO_TYPE_TCP_V6
) {

570 
domaö
 = 
AF_INET6
;

571 
ty≥
 = 
SOCK_STREAM
;

572 } i‡(
o
->
¥Ÿo
 =
FIO_TYPE_UDP
) {

573 
domaö
 = 
AF_INET
;

574 
ty≥
 = 
SOCK_DGRAM
;

575 } i‡(
o
->
¥Ÿo
 =
FIO_TYPE_UDP_V6
) {

576 
domaö
 = 
AF_INET6
;

577 
ty≥
 = 
SOCK_DGRAM
;

578 } i‡(
o
->
¥Ÿo
 =
FIO_TYPE_UNIX
) {

579 
domaö
 = 
AF_UNIX
;

580 
ty≥
 = 
SOCK_STREAM
;

582 
	`log_îr
("fio: badÇëw‹kÅy≥ %d\n", 
o
->
¥Ÿo
);

583 
f
->
fd
 = -1;

587 
f
->
fd
 = 
	`sockë
(
domaö
, 
ty≥
, 0);

588 i‡(
f
->
fd
 < 0) {

589 
	`td_vîr‹
(
td
, 
î∫o
, "socket");

593 #ifde‡
CONFIG_TCP_NODELAY


594 i‡(
o
->
nodñay
 && 
	`is_t˝
(o)) {

595 
›tvÆ
 = 1;

597 i‡(
	`£tsock›t
(
f
->
fd
, 
IPPROTO_TCP
, 
TCP_NODELAY
, (*Ë&
›tvÆ
, ()) < 0) {

598 
	`log_îr
("fio: c™nŸ së TCP_NODELAY o±i⁄ o¿sockë (%s), dißbÀ wôh 'nodñay=0'\n", 
	`°ªº‹
(
î∫o
));

604 i‡(
	`is_udp
(
o
)) {

605 i‡(!
	`fio_√tio_is_mu…iˇ°
(
td
->
o
.
fûíame
))

607 i‡(
	`is_ùv6
(
o
)) {

608 
	`log_îr
("fio: multicastÇot supported on IPv6\n");

609 
	`˛o£
(
f
->
fd
);

613 i‡(
o
->
ötfc
) {

614 
ö_addr
 
öãrÁ˚_addr
;

616 i‡(
	`öë_©⁄
(
o
->
ötfc
, &
öãrÁ˚_addr
) == 0) {

617 
	`log_îr
("fio: interfaceÇot valid interface IP\n");

618 
	`˛o£
(
f
->
fd
);

621 i‡(
	`£tsock›t
(
f
->
fd
, 
IPPROTO_IP
, 
IP_MULTICAST_IF
, (c⁄° *)&
öãrÁ˚_addr
, (interface_addr)) < 0) {

622 
	`td_vîr‹
(
td
, 
î∫o
, "setsockopt IP_MULTICAST_IF");

623 
	`˛o£
(
f
->
fd
);

627 i‡(
	`£tsock›t
(
f
->
fd
, 
IPPROTO_IP
, 
IP_MULTICAST_TTL
, (c⁄° *)&
o
->
âl
, (o->ttl)) < 0) {

628 
	`td_vîr‹
(
td
, 
î∫o
, "setsockopt IP_MULTICAST_TTL");

629 
	`˛o£
(
f
->
fd
);

633 } i‡(
o
->
¥Ÿo
 =
FIO_TYPE_TCP
) {

634 
sockÀn_t
 
Àn
 = (
nd
->
addr
);

636 i‡(
	`c⁄√˘
(
f
->
fd
, (
sockaddr
 *Ë&
nd
->
addr
, 
Àn
) < 0) {

637 
	`td_vîr‹
(
td
, 
î∫o
, "connect");

638 
	`˛o£
(
f
->
fd
);

641 } i‡(
o
->
¥Ÿo
 =
FIO_TYPE_TCP_V6
) {

642 
sockÀn_t
 
Àn
 = (
nd
->
addr6
);

644 i‡(
	`c⁄√˘
(
f
->
fd
, (
sockaddr
 *Ë&
nd
->
addr6
, 
Àn
) < 0) {

645 
	`td_vîr‹
(
td
, 
î∫o
, "connect");

646 
	`˛o£
(
f
->
fd
);

651 
sockaddr_un
 *
addr
 = &
nd
->
addr_un
;

652 
sockÀn_t
 
Àn
;

654 
Àn
 = (
addr
->
sun_Ámûy
Ë+ 
	`°æí
◊ddr->
sun_∑th
) + 1;

656 i‡(
	`c⁄√˘
(
f
->
fd
, (
sockaddr
 *Ë
addr
, 
Àn
) < 0) {

657 
	`td_vîr‹
(
td
, 
î∫o
, "connect");

658 
	`˛o£
(
f
->
fd
);

664 
	}
}

666 
	$fio_√tio_ac˚±
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

668 
√tio_d©a
 *
nd
 = 
td
->
io_›s
->
d©a
;

669 
√tio_›ti⁄s
 *
o
 = 
td
->
eo
;

670 
sockÀn_t
 
sockÀn
;

671 
°©e
;

673 i‡(
	`is_udp
(
o
)) {

674 
f
->
fd
 = 
nd
->
li°ífd
;

678 
°©e
 = 
td
->
run°©e
;

679 
	`td_£t_run°©e
(
td
, 
TD_SETTING_UP
);

681 
	`log_öfo
("fio: waiting for connection\n");

683 i‡(
	`pﬁl_waô
(
td
, 
nd
->
li°ífd
, 
POLLIN
) < 0)

684 
îr
;

686 i‡(
o
->
¥Ÿo
 =
FIO_TYPE_TCP
) {

687 
sockÀn
 = (
nd
->
addr
);

688 
f
->
fd
 = 
	`ac˚±
(
nd
->
li°ífd
, (
sockaddr
 *Ë&nd->
addr
, &
sockÀn
);

690 
sockÀn
 = (
nd
->
addr6
);

691 
f
->
fd
 = 
	`ac˚±
(
nd
->
li°ífd
, (
sockaddr
 *Ë&nd->
addr6
, &
sockÀn
);

694 i‡(
f
->
fd
 < 0) {

695 
	`td_vîr‹
(
td
, 
î∫o
, "accept");

696 
îr
;

699 #ifde‡
CONFIG_TCP_NODELAY


700 i‡(
o
->
nodñay
 && 
	`is_t˝
(o)) {

701 
›tvÆ
 = 1;

703 i‡(
	`£tsock›t
(
f
->
fd
, 
IPPROTO_TCP
, 
TCP_NODELAY
, (*Ë&
›tvÆ
, ()) < 0) {

704 
	`log_îr
("fio: c™nŸ së TCP_NODELAY o±i⁄ o¿sockë (%s), dißbÀ wôh 'nodñay=0'\n", 
	`°ªº‹
(
î∫o
));

710 
	`ª£t_Æl_°©s
(
td
);

711 
	`td_£t_run°©e
(
td
, 
°©e
);

713 
îr
:

714 
	`td_£t_run°©e
(
td
, 
°©e
);

716 
	}
}

718 
	$fio_√tio_udp_˛o£
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

720 
√tio_d©a
 *
nd
 = 
td
->
io_›s
->
d©a
;

721 
√tio_›ti⁄s
 *
o
 = 
td
->
eo
;

722 
udp_˛o£_msg
 
msg
;

723 
sockaddr
 *
to
;

724 
sockÀn_t
 
Àn
;

725 
ªt
;

727 i‡(
	`is_ùv6
(
o
)) {

728 
to
 = (
sockaddr
 *Ë&
nd
->
addr6
;

729 
Àn
 = (
nd
->
addr6
);

731 
to
 = (
sockaddr
 *Ë&
nd
->
addr
;

732 
Àn
 = (
nd
->
addr
);

735 
msg
.
magic
 = 
	`ht⁄l
(
FIO_LINK_OPEN_CLOSE_MAGIC
);

736 
msg
.
cmd
 = 
	`ht⁄l
(
FIO_LINK_CLOSE
);

738 
ªt
 = 
	`£ndto
(
f
->
fd
, (*Ë&
msg
, (msg), 
MSG_WAITALL
, 
to
, 
Àn
);

739 i‡(
ªt
 < 0)

740 
	`td_vîr‹
(
td
, 
î∫o
, "sendto udpÜink close");

741 
	}
}

743 
	$fio_√tio_˛o£_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

745 
√tio_›ti⁄s
 *
o
 = 
td
->
eo
;

751 i‡(
	`is_udp
(
o
))

752 
	`fio_√tio_udp_˛o£
(
td
, 
f
);

754  
	`gíîic_˛o£_fûe
(
td
, 
f
);

755 
	}
}

757 
	$fio_√tio_udp_ªcv_›í
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

759 
√tio_d©a
 *
nd
 = 
td
->
io_›s
->
d©a
;

760 
√tio_›ti⁄s
 *
o
 = 
td
->
eo
;

761 
udp_˛o£_msg
 
msg
;

762 
sockaddr
 *
to
;

763 
sockÀn_t
 
Àn
;

764 
ªt
;

766 i‡(
	`is_ùv6
(
o
)) {

767 
Àn
 = (
nd
->
addr6
);

768 
to
 = (
sockaddr
 *Ë&
nd
->
addr6
;

770 
Àn
 = (
nd
->
addr
);

771 
to
 = (
sockaddr
 *Ë&
nd
->
addr
;

774 
ªt
 = 
	`ªcv‰om
(
f
->
fd
, (*Ë&
msg
, (msg), 
MSG_WAITALL
, 
to
, &
Àn
);

775 i‡(
ªt
 < 0) {

776 
	`td_vîr‹
(
td
, 
î∫o
, "recvfrom udpÜink open");

777  
ªt
;

780 i‡(
	`¡ohl
(
msg
.
magic
Ë!
FIO_LINK_OPEN_CLOSE_MAGIC
 ||

781 
	`¡ohl
(
msg
.
cmd
Ë!
FIO_LINK_OPEN
) {

782 
	`log_îr
("fio: bad ud∞›í magi¯%x/%x\n", 
	`¡ohl
(
msg
.
magic
),

783 
	`¡ohl
(
msg
.
cmd
));

788 
	}
}

790 
	$fio_√tio_udp_£nd_›í
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

792 
√tio_d©a
 *
nd
 = 
td
->
io_›s
->
d©a
;

793 
√tio_›ti⁄s
 *
o
 = 
td
->
eo
;

794 
udp_˛o£_msg
 
msg
;

795 
sockaddr
 *
to
;

796 
sockÀn_t
 
Àn
;

797 
ªt
;

799 i‡(
	`is_ùv6
(
o
)) {

800 
Àn
 = (
nd
->
addr6
);

801 
to
 = (
sockaddr
 *Ë&
nd
->
addr6
;

803 
Àn
 = (
nd
->
addr
);

804 
to
 = (
sockaddr
 *Ë&
nd
->
addr
;

807 
msg
.
magic
 = 
	`ht⁄l
(
FIO_LINK_OPEN_CLOSE_MAGIC
);

808 
msg
.
cmd
 = 
	`ht⁄l
(
FIO_LINK_OPEN
);

810 
ªt
 = 
	`£ndto
(
f
->
fd
, (*Ë&
msg
, (msg), 
MSG_WAITALL
, 
to
, 
Àn
);

811 i‡(
ªt
 < 0) {

812 
	`td_vîr‹
(
td
, 
î∫o
, "sendto udpÜink open");

813  
ªt
;

817 
	}
}

819 
	$fio_√tio_›í_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

821 
ªt
;

822 
√tio_›ti⁄s
 *
o
 = 
td
->
eo
;

824 i‡(
o
->
li°í
)

825 
ªt
 = 
	`fio_√tio_ac˚±
(
td
, 
f
);

827 
ªt
 = 
	`fio_√tio_c⁄√˘
(
td
, 
f
);

829 i‡(
ªt
) {

830 
f
->
fd
 = -1;

831  
ªt
;

834 i‡(
	`is_udp
(
o
)) {

835 i‡(
	`td_wrôe
(
td
))

836 
ªt
 = 
	`fio_√tio_udp_£nd_›í
(
td
, 
f
);

838 
°©e
;

840 
°©e
 = 
td
->
run°©e
;

841 
	`td_£t_run°©e
(
td
, 
TD_SETTING_UP
);

842 
ªt
 = 
	`fio_√tio_udp_ªcv_›í
(
td
, 
f
);

843 
	`td_£t_run°©e
(
td
, 
°©e
);

847 i‡(
ªt
)

848 
	`fio_√tio_˛o£_fûe
(
td
, 
f
);

850  
ªt
;

851 
	}
}

853 
	$fio_fûl_addr
(
thªad_d©a
 *
td
, c⁄° *
ho°
, 
af
,

854 *
d°
, 
addröfo
 **
ªs
)

856 
√tio_›ti⁄s
 *
o
 = 
td
->
eo
;

857 
addröfo
 
höts
;

858 
ªt
;

860 i‡(
	`öë_±⁄
(
af
, 
ho°
, 
d°
))

863 
	`mem£t
(&
höts
, 0, (hints));

865 i‡(
	`is_t˝
(
o
))

866 
höts
.
ai_sockty≥
 = 
SOCK_STREAM
;

868 
höts
.
ai_sockty≥
 = 
SOCK_DGRAM
;

870 i‡(
	`is_ùv6
(
o
))

871 
höts
.
ai_Ámûy
 = 
AF_INET6
;

873 
höts
.
ai_Ámûy
 = 
AF_INET
;

875 
ªt
 = 
	`gëaddröfo
(
ho°
, 
NULL
, &
höts
, 
ªs
);

876 i‡(
ªt
) {

877 
e
 = 
EINVAL
;

878 
°r
[128];

880 i‡(
ªt
 =
EAI_SYSTEM
)

881 
e
 = 
î∫o
;

883 
	`¢¥ötf
(
°r
, (°r), "gëaddröfo: %s", 
	`gai_°ªº‹
(
ªt
));

884 
	`td_vîr‹
(
td
, 
e
, 
°r
);

889 
	}
}

891 
	$fio_√tio_£tup_c⁄√˘_öë
(
thªad_d©a
 *
td
,

892 c⁄° *
ho°
, 
p‹t
)

894 
√tio_d©a
 *
nd
 = 
td
->
io_›s
->
d©a
;

895 
√tio_›ti⁄s
 *
o
 = 
td
->
eo
;

896 
addröfo
 *
ªs
 = 
NULL
;

897 *
d°
, *
§c
;

898 
af
, 
Àn
;

900 i‡(!
ho°
) {

901 
	`log_îr
("fio: connect withÇo hostÅo connectÅo.\n");

902 i‡(
	`td_ªad
(
td
))

903 
	`log_îr
("fio: did you forgetÅo set 'listen'?\n");

905 
	`td_vîr‹
(
td
, 
EINVAL
, "no hostname= set");

909 
nd
->
addr
.
sö_Ámûy
 = 
AF_INET
;

910 
nd
->
addr
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

911 
nd
->
addr6
.
sö6_Ámûy
 = 
AF_INET6
;

912 
nd
->
addr6
.
sö6_p‹t
 = 
	`ht⁄s
(
p‹t
);

914 i‡(
	`is_ùv6
(
o
)) {

915 
af
 = 
AF_INET6
;

916 
d°
 = &
nd
->
addr6
.
sö6_addr
;

918 
af
 = 
AF_INET
;

919 
d°
 = &
nd
->
addr
.
sö_addr
;

922 i‡(
	`fio_fûl_addr
(
td
, 
ho°
, 
af
, 
d°
, &
ªs
))

925 i‡(!
ªs
)

928 i‡(
	`is_ùv6
(
o
)) {

929 
Àn
 = (
nd
->
addr6
.
sö6_addr
);

930 
§c
 = &((
sockaddr_ö6
 *Ë
ªs
->
ai_addr
)->
sö6_addr
;

932 
Àn
 = (
nd
->
addr
.
sö_addr
);

933 
§c
 = &((
sockaddr_ö
 *Ë
ªs
->
ai_addr
)->
sö_addr
;

936 
	`mem˝y
(
d°
, 
§c
, 
Àn
);

937 
	`‰ìaddröfo
(
ªs
);

939 
	}
}

941 
	$fio_√tio_£tup_c⁄√˘_unix
(
thªad_d©a
 *
td
,

942 c⁄° *
∑th
)

944 
√tio_d©a
 *
nd
 = 
td
->
io_›s
->
d©a
;

945 
sockaddr_un
 *
soun
 = &
nd
->
addr_un
;

947 
soun
->
sun_Ámûy
 = 
AF_UNIX
;

948 
	`mem£t
(
soun
->
sun_∑th
, 0, (soun->sun_path));

949 
	`°∫˝y
(
soun
->
sun_∑th
, 
∑th
, (soun->sun_path) - 1);

951 
	}
}

953 
	$fio_√tio_£tup_c⁄√˘
(
thªad_d©a
 *
td
)

955 
√tio_›ti⁄s
 *
o
 = 
td
->
eo
;

957 i‡(
	`is_udp
(
o
Ë|| 
	`is_t˝
(o))

958  
	`fio_√tio_£tup_c⁄√˘_öë
(
td
,Åd->
o
.
fûíame
,o->
p‹t
);

960  
	`fio_√tio_£tup_c⁄√˘_unix
(
td
,Åd->
o
.
fûíame
);

961 
	}
}

963 
	$fio_√tio_£tup_li°í_unix
(
thªad_d©a
 *
td
, c⁄° *
∑th
)

965 
√tio_d©a
 *
nd
 = 
td
->
io_›s
->
d©a
;

966 
sockaddr_un
 *
addr
 = &
nd
->
addr_un
;

967 
mode_t
 
mode
;

968 
Àn
, 
fd
;

970 
fd
 = 
	`sockë
(
AF_UNIX
, 
SOCK_STREAM
, 0);

971 i‡(
fd
 < 0) {

972 
	`log_îr
("fio: sockë: %s\n", 
	`°ªº‹
(
î∫o
));

976 
mode
 = 
	`umask
(000);

978 
	`mem£t
(
addr
, 0, (*addr));

979 
addr
->
sun_Ámûy
 = 
AF_UNIX
;

980 
	`°∫˝y
(
addr
->
sun_∑th
, 
∑th
, (addr->sun_path) - 1);

981 
	`u∆ök
(
∑th
);

983 
Àn
 = (
addr
->
sun_Ámûy
Ë+ 
	`°æí
(
∑th
) + 1;

985 i‡(
	`böd
(
fd
, (
sockaddr
 *Ë
addr
, 
Àn
) < 0) {

986 
	`log_îr
("fio: böd: %s\n", 
	`°ªº‹
(
î∫o
));

987 
	`˛o£
(
fd
);

991 
	`umask
(
mode
);

992 
nd
->
li°ífd
 = 
fd
;

994 
	}
}

996 
	$fio_√tio_£tup_li°í_öë
(
thªad_d©a
 *
td
, 
p‹t
)

998 
√tio_d©a
 *
nd
 = 
td
->
io_›s
->
d©a
;

999 
√tio_›ti⁄s
 *
o
 = 
td
->
eo
;

1000 
ù_mªq
 
mr
;

1001 
sockaddr_ö
 
sö
;

1002 
sockaddr
 *
ßddr
;

1003 
fd
, 
›t
, 
ty≥
, 
domaö
;

1004 
sockÀn_t
 
Àn
;

1006 
	`mem£t
(&
sö
, 0, (sin));

1008 i‡(
o
->
¥Ÿo
 =
FIO_TYPE_TCP
) {

1009 
ty≥
 = 
SOCK_STREAM
;

1010 
domaö
 = 
AF_INET
;

1011 } i‡(
o
->
¥Ÿo
 =
FIO_TYPE_TCP_V6
) {

1012 
ty≥
 = 
SOCK_STREAM
;

1013 
domaö
 = 
AF_INET6
;

1014 } i‡(
o
->
¥Ÿo
 =
FIO_TYPE_UDP
) {

1015 
ty≥
 = 
SOCK_DGRAM
;

1016 
domaö
 = 
AF_INET
;

1017 } i‡(
o
->
¥Ÿo
 =
FIO_TYPE_UDP_V6
) {

1018 
ty≥
 = 
SOCK_DGRAM
;

1019 
domaö
 = 
AF_INET6
;

1021 
	`log_îr
("fio: unknow¿¥Ÿÿ%d\n", 
o
->
¥Ÿo
);

1025 
fd
 = 
	`sockë
(
domaö
, 
ty≥
, 0);

1026 i‡(
fd
 < 0) {

1027 
	`td_vîr‹
(
td
, 
î∫o
, "socket");

1031 
›t
 = 1;

1032 i‡(
	`£tsock›t
(
fd
, 
SOL_SOCKET
, 
SO_REUSEADDR
, (*Ë&
›t
, (opt)) < 0) {

1033 
	`td_vîr‹
(
td
, 
î∫o
, "setsockopt");

1034 
	`˛o£
(
fd
);

1037 #ifde‡
SO_REUSEPORT


1038 i‡(
	`£tsock›t
(
fd
, 
SOL_SOCKET
, 
SO_REUSEPORT
, (*Ë&
›t
, (opt)) < 0) {

1039 
	`td_vîr‹
(
td
, 
î∫o
, "setsockopt");

1040 
	`˛o£
(
fd
);

1045 i‡(
td
->
o
.
fûíame
) {

1046 i‡(!
	`is_udp
(
o
Ë|| !
	`fio_√tio_is_mu…iˇ°
(
td
->o.
fûíame
)) {

1047 
	`log_îr
("fio: hostnameÇot valid forÇon-multicast inboundÇetwork IO\n");

1048 
	`˛o£
(
fd
);

1051 i‡(
	`is_ùv6
(
o
)) {

1052 
	`log_îr
("fio: IPv6Çot supported for multicastÇetwork IO");

1053 
	`˛o£
(
fd
);

1057 
	`öë_©⁄
(
td
->
o
.
fûíame
, &
sö
.
sö_addr
);

1059 
mr
.
imr_mu…üddr
 = 
sö
.
sö_addr
;

1060 i‡(
o
->
ötfc
) {

1061 i‡(
	`öë_©⁄
(
o
->
ötfc
, &
mr
.
imr_öãrÁ˚
) == 0) {

1062 
	`log_îr
("fio: interfaceÇot valid interface IP\n");

1063 
	`˛o£
(
fd
);

1067 
mr
.
imr_öãrÁ˚
.
s_addr
 = 
	`ht⁄l
(
INADDR_ANY
);

1070 i‡(
	`£tsock›t
(
fd
, 
IPPROTO_IP
, 
IP_ADD_MEMBERSHIP
, (c⁄° *)&
mr
, (mr)) < 0) {

1071 
	`td_vîr‹
(
td
, 
î∫o
, "setsockopt IP_ADD_MEMBERSHIP");

1072 
	`˛o£
(
fd
);

1077 i‡(!
	`is_ùv6
(
o
)) {

1078 
ßddr
 = (
sockaddr
 *Ë&
nd
->
addr
;

1079 
Àn
 = (
nd
->
addr
);

1081 
nd
->
addr
.
sö_Ámûy
 = 
AF_INET
;

1082 
nd
->
addr
.
sö_addr
.
s_addr
 = 
sö
.sö_addr.s_add∏? sö.sö_addr.s_add∏: 
	`ht⁄l
(
INADDR_ANY
);

1083 
nd
->
addr
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

1085 
ßddr
 = (
sockaddr
 *Ë&
nd
->
addr6
;

1086 
Àn
 = (
nd
->
addr6
);

1088 
nd
->
addr6
.
sö6_Ámûy
 = 
AF_INET6
;

1089 
nd
->
addr6
.
sö6_addr
 = 
ö6addr_™y
;

1090 
nd
->
addr6
.
sö6_p‹t
 = 
	`ht⁄s
(
p‹t
);

1093 i‡(
	`böd
(
fd
, 
ßddr
, 
Àn
) < 0) {

1094 
	`˛o£
(
fd
);

1095 
	`td_vîr‹
(
td
, 
î∫o
, "bind");

1099 
nd
->
li°ífd
 = 
fd
;

1101 
	}
}

1103 
	$fio_√tio_£tup_li°í
(
thªad_d©a
 *
td
)

1105 
√tio_d©a
 *
nd
 = 
td
->
io_›s
->
d©a
;

1106 
√tio_›ti⁄s
 *
o
 = 
td
->
eo
;

1107 
ªt
;

1109 i‡(
	`is_udp
(
o
Ë|| 
	`is_t˝
(o))

1110 
ªt
 = 
	`fio_√tio_£tup_li°í_öë
(
td
, 
o
->
p‹t
);

1112 
ªt
 = 
	`fio_√tio_£tup_li°í_unix
(
td
,Åd->
o
.
fûíame
);

1114 i‡(
ªt
)

1115  
ªt
;

1116 i‡(
	`is_udp
(
o
))

1119 i‡(
	`li°í
(
nd
->
li°ífd
, 10) < 0) {

1120 
	`td_vîr‹
(
td
, 
î∫o
, "listen");

1121 
nd
->
li°ífd
 = -1;

1126 
	}
}

1128 
	$fio_√tio_öô
(
thªad_d©a
 *
td
)

1130 
√tio_›ti⁄s
 *
o
 = 
td
->
eo
;

1131 
ªt
;

1133 #ifde‡
WIN32


1134 
WSADATA
 
wsd
;

1135 
	`WSASèπup
(
	`MAKEWORD
(2,2), &
wsd
);

1138 i‡(
	`td_øndom
(
td
)) {

1139 
	`log_îr
("fio:Çetwork IO can't beÑandom\n");

1143 i‡(
o
->
¥Ÿo
 =
FIO_TYPE_UNIX
 && o->
p‹t
) {

1144 
	`log_îr
("fio:Çetwork IOÖortÇot valid with unix socket\n");

1146 } i‡(
o
->
¥Ÿo
 !
FIO_TYPE_UNIX
 && !o->
p‹t
) {

1147 
	`log_îr
("fio:Çetwork IOÑequiresÖort forÅcp or udp\n");

1151 i‡(!
	`is_t˝
(
o
)) {

1152 i‡(
o
->
li°í
) {

1153 
	`log_îr
("fio:Üisten only valid for TCPÖroto IO\n");

1156 i‡(
	`td_rw
(
td
)) {

1157 
	`log_îr
("fio: datagramÇetwork connections must be"

1161 i‡(
o
->
¥Ÿo
 =
FIO_TYPE_UNIX
 && !
td
->o.
fûíame
) {

1162 
	`log_îr
("fio: UNIX socketsÇeed host/filename\n");

1165 
o
->
li°í
 = 
	`td_ªad
(
td
);

1168 i‡(
o
->
li°í
)

1169 
ªt
 = 
	`fio_√tio_£tup_li°í
(
td
);

1171 
ªt
 = 
	`fio_√tio_£tup_c⁄√˘
(
td
);

1173  
ªt
;

1174 
	}
}

1176 
	$fio_√tio_˛ónup
(
thªad_d©a
 *
td
)

1178 
√tio_d©a
 *
nd
 = 
td
->
io_›s
->
d©a
;

1180 i‡(
nd
) {

1181 i‡(
nd
->
li°ífd
 != -1)

1182 
	`˛o£
(
nd
->
li°ífd
);

1183 i‡(
nd
->
pùes
[0] != -1)

1184 
	`˛o£
(
nd
->
pùes
[0]);

1185 i‡(
nd
->
pùes
[1] != -1)

1186 
	`˛o£
(
nd
->
pùes
[1]);

1188 
	`‰ì
(
nd
);

1190 
	}
}

1192 
	$fio_√tio_£tup
(
thªad_d©a
 *
td
)

1194 
√tio_d©a
 *
nd
;

1196 i‡(!
td
->
fûes_ödex
) {

1197 
	`add_fûe
(
td
,Åd->
o
.
fûíame
 ?: "net", 0, 0);

1198 
td
->
o
.
ƒ_fûes
 =Åd->o.nr_files ?: 1;

1199 
td
->
o
.
›í_fûes
++;

1202 i‡(!
td
->
io_›s
->
d©a
) {

1203 
nd
 = 
	`mÆloc
((*nd));;

1205 
	`mem£t
(
nd
, 0, (*nd));

1206 
nd
->
li°ífd
 = -1;

1207 
nd
->
pùes
[0] =Çd->pipes[1] = -1;

1208 
td
->
io_›s
->
d©a
 = 
nd
;

1212 
	}
}

1214 
	$fio_√tio_ãrmö©e
(
thªad_d©a
 *
td
)

1216 
	`kûl
(
td
->
pid
, 
SIGUSR2
);

1217 
	}
}

1219 #ifde‡
CONFIG_LINUX_SPLICE


1220 
	$fio_√tio_£tup_•li˚
(
thªad_d©a
 *
td
)

1222 
√tio_d©a
 *
nd
;

1224 
	`fio_√tio_£tup
(
td
);

1226 
nd
 = 
td
->
io_›s
->
d©a
;

1227 i‡(
nd
) {

1228 i‡(
	`pùe
(
nd
->
pùes
) < 0)

1231 
nd
->
u£_•li˚
 = 1;

1236 
	}
}

1238 
i€ngöe_›s
 
	gi€ngöe_•li˚
 = {

1239 .
«me
 = "netsplice",

1240 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

1241 .
	g¥ï
 = 
fio_√tio_¥ï
,

1242 .
	gqueue
 = 
fio_√tio_queue
,

1243 .
	g£tup
 = 
fio_√tio_£tup_•li˚
,

1244 .
	göô
 = 
fio_√tio_öô
,

1245 .
	g˛ónup
 = 
fio_√tio_˛ónup
,

1246 .
	g›í_fûe
 = 
fio_√tio_›í_fûe
,

1247 .
	g˛o£_fûe
 = 
fio_√tio_˛o£_fûe
,

1248 .
	gãrmö©e
 = 
fio_√tio_ãrmö©e
,

1249 .
	g›ti⁄s
 = 
›ti⁄s
,

1250 .
	g›ti⁄_°ru˘_size
 = (
√tio_›ti⁄s
),

1251 .
	gÊags
 = 
FIO_SYNCIO
 | 
FIO_DISKLESSIO
 | 
FIO_UNIDIR
 |

1252 
FIO_PIPEIO
,

1256 
i€ngöe_›s
 
	gi€ngöe_rw
 = {

1257 .
«me
 = "net",

1258 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

1259 .
	g¥ï
 = 
fio_√tio_¥ï
,

1260 .
	gqueue
 = 
fio_√tio_queue
,

1261 .
	g£tup
 = 
fio_√tio_£tup
,

1262 .
	göô
 = 
fio_√tio_öô
,

1263 .
	g˛ónup
 = 
fio_√tio_˛ónup
,

1264 .
	g›í_fûe
 = 
fio_√tio_›í_fûe
,

1265 .
	g˛o£_fûe
 = 
fio_√tio_˛o£_fûe
,

1266 .
	gãrmö©e
 = 
fio_√tio_ãrmö©e
,

1267 .
	g›ti⁄s
 = 
›ti⁄s
,

1268 .
	g›ti⁄_°ru˘_size
 = (
√tio_›ti⁄s
),

1269 .
	gÊags
 = 
FIO_SYNCIO
 | 
FIO_DISKLESSIO
 | 
FIO_UNIDIR
 |

1270 
FIO_PIPEIO
 | 
FIO_BIT_BASED
,

1273 
	$°r_ho°«me_cb
(*
d©a
, c⁄° *
öput
)

1275 
√tio_›ti⁄s
 *
o
 = 
d©a
;

1277 i‡(
o
->
td
->o.
fûíame
)

1278 
	`‰ì
(
o
->
td
->o.
fûíame
);

1279 
o
->
td
->o.
fûíame
 = 
	`°rdup
(
öput
);

1281 
	}
}

1283 
fio_öô
 
	$fio_√tio_ªgi°î
()

1285 
	`ªgi°î_i€ngöe
(&
i€ngöe_rw
);

1286 #ifde‡
CONFIG_LINUX_SPLICE


1287 
	`ªgi°î_i€ngöe
(&
i€ngöe_•li˚
);

1289 
	}
}

1291 
fio_exô
 
	$fio_√tio_uƒegi°î
()

1293 
	`uƒegi°î_i€ngöe
(&
i€ngöe_rw
);

1294 #ifde‡
CONFIG_LINUX_SPLICE


1295 
	`uƒegi°î_i€ngöe
(&
i€ngöe_•li˚
);

1297 
	}
}

	@/home/terekhov/tmp/fio/fio/engines/null.c

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<uni°d.h
>

15 
	~<î∫o.h
>

16 
	~<as£π.h
>

18 
	~"../fio.h
"

20 
	snuŒ_d©a
 {

21 
io_u
 **
	mio_us
;

22 
	mqueued
;

23 
	mevíts
;

26 
io_u
 *
	$fio_nuŒ_evít
(
thªad_d©a
 *
td
, 
evít
)

28 
nuŒ_d©a
 *
nd
 = (nuŒ_d©®*Ë
td
->
io_›s
->
d©a
;

30  
nd
->
io_us
[
evít
];

31 
	}
}

33 
	$fio_nuŒ_gëevíts
(
thªad_d©a
 *
td
, 
mö_evíts
,

34 
fio_unu£d
 
max
,

35 
time•ec
 
fio_unu£d
 *
t
)

37 
nuŒ_d©a
 *
nd
 = (nuŒ_d©®*Ë
td
->
io_›s
->
d©a
;

38 
ªt
 = 0;

40 i‡(
mö_evíts
) {

41 
ªt
 = 
nd
->
evíts
;

42 
nd
->
evíts
 = 0;

45  
ªt
;

46 
	}
}

48 
	$fio_nuŒ_commô
(
thªad_d©a
 *
td
)

50 
nuŒ_d©a
 *
nd
 = (nuŒ_d©®*Ë
td
->
io_›s
->
d©a
;

52 i‡(!
nd
->
evíts
) {

53 #i‚de‡
FIO_EXTERNAL_ENGINE


54 
	`io_u_m¨k_submô
(
td
, 
nd
->
queued
);

56 
nd
->
evíts
 =Çd->
queued
;

57 
nd
->
queued
 = 0;

61 
	}
}

63 
	$fio_nuŒ_queue
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

65 
nuŒ_d©a
 *
nd
 = (nuŒ_d©®*Ë
td
->
io_›s
->
d©a
;

67 
	`fio_ro_check
(
td
, 
io_u
);

69 i‡(
td
->
io_›s
->
Êags
 & 
FIO_SYNCIO
)

70  
FIO_Q_COMPLETED
;

71 i‡(
nd
->
evíts
)

72  
FIO_Q_BUSY
;

74 
nd
->
io_us
[nd->
queued
++] = 
io_u
;

75  
FIO_Q_QUEUED
;

76 
	}
}

78 
	$fio_nuŒ_›í
(
thªad_d©a
 
fio_unu£d
 *
td
,

79 
fio_fûe
 
fio_unu£d
 *
f
)

82 
	}
}

84 
	$fio_nuŒ_˛ónup
(
thªad_d©a
 *
td
)

86 
nuŒ_d©a
 *
nd
 = (nuŒ_d©®*Ë
td
->
io_›s
->
d©a
;

88 i‡(
nd
) {

89 i‡(
nd
->
io_us
)

90 
	`‰ì
(
nd
->
io_us
);

91 
	`‰ì
(
nd
);

93 
	}
}

95 
	$fio_nuŒ_öô
(
thªad_d©a
 *
td
)

97 
nuŒ_d©a
 *
nd
 = (nuŒ_d©®*Ë
	`mÆloc
((*nd));

99 
	`mem£t
(
nd
, 0, (*nd));

101 i‡(
td
->
o
.
iodïth
 != 1) {

102 
nd
->
io_us
 = (
io_u
 **Ë
	`mÆloc
(
td
->
o
.
iodïth
 * (io_u *));

103 
	`mem£t
(
nd
->
io_us
, 0, 
td
->
o
.
iodïth
 * (
io_u
 *));

105 
td
->
io_›s
->
Êags
 |
FIO_SYNCIO
;

107 
td
->
io_›s
->
d©a
 = 
nd
;

109 
	}
}

111 #i‚de‡
__˝lu•lus


112 
i€ngöe_›s
 
	gi€ngöe
 = {

113 .
«me
 = "null",

114 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

115 .
	gqueue
 = 
fio_nuŒ_queue
,

116 .
	gcommô
 = 
fio_nuŒ_commô
,

117 .
	ggëevíts
 = 
fio_nuŒ_gëevíts
,

118 .
	gevít
 = 
fio_nuŒ_evít
,

119 .
	göô
 = 
fio_nuŒ_öô
,

120 .
	g˛ónup
 = 
fio_nuŒ_˛ónup
,

121 .
	g›í_fûe
 = 
fio_nuŒ_›í
,

122 .
	gÊags
 = 
FIO_DISKLESSIO
,

125 
fio_öô
 
	$fio_nuŒ_ªgi°î
()

127 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

128 
	}
}

130 
fio_exô
 
	$fio_nuŒ_uƒegi°î
()

132 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

133 
	}
}

137 #ifde‡
FIO_EXTERNAL_ENGINE


139 
gë_i€ngöe
(
i€ngöe_›s
 **
i€ngöe_±r
)

141 
i€ngöe_›s
 *
i€ngöe
;

143 *
i€ngöe_±r
 = (
i€ngöe_›s
 *Ë
mÆloc
((ioengine_ops));

144 
i€ngöe
 = *
i€ngöe_±r
;

146 
°r˝y
(
i€ngöe
->
«me
, "cpp_null");

147 
i€ngöe
->
vîsi⁄
 = 
FIO_IOOPS_VERSION
;

148 
i€ngöe
->
queue
 = 
fio_nuŒ_queue
;

149 
i€ngöe
->
commô
 = 
fio_nuŒ_commô
;

150 
i€ngöe
->
gëevíts
 = 
fio_nuŒ_gëevíts
;

151 
i€ngöe
->
evít
 = 
fio_nuŒ_evít
;

152 
i€ngöe
->
öô
 = 
fio_nuŒ_öô
;

153 
i€ngöe
->
˛ónup
 = 
fio_nuŒ_˛ónup
;

154 
i€ngöe
->
›í_fûe
 = 
fio_nuŒ_›í
;

155 
i€ngöe
->
Êags
 = 
FIO_DISKLESSIO
;

	@/home/terekhov/tmp/fio/fio/engines/posixaio.c

7 
	~<°dio.h
>

8 
	~<°dlib.h
>

9 
	~<uni°d.h
>

10 
	~<î∫o.h
>

11 
	~<f˙é.h
>

13 
	~"../fio.h
"

15 
	sposixaio_d©a
 {

16 
io_u
 **
	maio_evíts
;

17 
	mqueued
;

20 
	$fûl_time•ec
(
time•ec
 *
ts
)

22 #ifde‡
CONFIG_CLOCK_GETTIME


23 #ifde‡
CONFIG_CLOCK_MONOTONIC


24 
˛ockid_t
 
˛k
 = 
CLOCK_MONOTONIC
;

26 
˛ockid_t
 
˛k
 = 
CLOCK_REALTIME
;

28 i‡(!
	`˛ock_gëtime
(
˛k
, 
ts
))

31 
	`≥º‹
("clock_gettime");

34 
timevÆ
 
tv
;

36 
	`gëtimeofday
(&
tv
, 
NULL
);

37 
ts
->
tv_£c
 = 
tv
.tv_sec;

38 
ts
->
tv_n£c
 = 
tv
.
tv_u£c
 * 1000;

41 
	}
}

43 
	$ts_utime_sö˚_now
(
time•ec
 *
t
)

45 
£c
, 
n£c
;

46 
time•ec
 
now
;

48 i‡(
	`fûl_time•ec
(&
now
))

51 
£c
 = 
now
.
tv_£c
 - 
t
->tv_sec;

52 
n£c
 = 
now
.
tv_n£c
 - 
t
->tv_nsec;

53 i‡(
£c
 > 0 && 
n£c
 < 0) {

54 
£c
--;

55 
n£c
 += 1000000000;

58 
£c
 *= 1000000;

59 
n£c
 /= 1000;

60  
£c
 + 
n£c
;

61 
	}
}

63 
	$fio_posixaio_ˇn˚l
(
thªad_d©a
 
fio_unu£d
 *
td
,

64 
io_u
 *io_u)

66 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

67 
r
 = 
	`aio_ˇn˚l
(
f
->
fd
, &
io_u
->
aiocb
);

69 i‡(
r
 =
AIO_ALLDONE
 ||Ñ =
AIO_CANCELED
)

73 
	}
}

75 
	$fio_posixaio_¥ï
(
thªad_d©a
 
fio_unu£d
 *
td
,

76 
io_u
 *io_u)

78 
os_aiocb_t
 *
aiocb
 = &
io_u
->aiocb;

79 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

81 
aiocb
->
aio_fûdes
 = 
f
->
fd
;

82 
aiocb
->
aio_buf
 = 
io_u
->
x„r_buf
;

83 
aiocb
->
aio_nbyãs
 = 
io_u
->
x„r_buÊí
;

84 
aiocb
->
aio_off£t
 = 
io_u
->
off£t
;

85 
aiocb
->
aio_sigevít
.
sigev_nŸify
 = 
SIGEV_NONE
;

87 
io_u
->
£í
 = 0;

89 
	}
}

91 
	#SUSPEND_ENTRIES
 8

	)

93 
	$fio_posixaio_gëevíts
(
thªad_d©a
 *
td
, 
mö
,

94 
max
, 
time•ec
 *
t
)

96 
posixaio_d©a
 *
pd
 = 
td
->
io_›s
->
d©a
;

97 
os_aiocb_t
 *
su•íd_li°
[
SUSPEND_ENTRIES
];

98 
time•ec
 
°¨t
;

99 
have_timeout
 = 0;

100 
su•íd_íåõs
;

101 
io_u
 *io_u;

102 
r
;

103 
i
;

105 i‡(
t
 && !
	`fûl_time•ec
(&
°¨t
))

106 
have_timeout
 = 1;

108 
	`mem£t
(&
°¨t
, 0, (start));

110 
r
 = 0;

111 
ª°¨t
:

112 
	`mem£t
(
su•íd_li°
, 0, (*suspend_list));

113 
su•íd_íåõs
 = 0;

114 
	`io_u_qôî
(&
td
->
io_u_Æl
, 
io_u
, 
i
) {

115 
îr
;

117 i‡(
io_u
->
£í
 || !(io_u->
Êags
 & 
IO_U_F_FLIGHT
))

120 
îr
 = 
	`aio_îr‹
(&
io_u
->
aiocb
);

121 i‡(
îr
 =
EINPROGRESS
) {

122 i‡(
su•íd_íåõs
 < 
SUSPEND_ENTRIES
) {

123 
su•íd_li°
[
su•íd_íåõs
] = &
io_u
->
aiocb
;

124 
su•íd_íåõs
++;

129 
io_u
->
£í
 = 1;

130 
pd
->
queued
--;

131 
pd
->
aio_evíts
[
r
++] = 
io_u
;

133 i‡(
îr
 =
ECANCELED
)

134 
io_u
->
ªsid
 = io_u->
x„r_buÊí
;

135 i‡(!
îr
) {

136 
ssize_t
 
ªtvÆ
 = 
	`aio_ªtu∫
(&
io_u
->
aiocb
);

138 
io_u
->
ªsid
 = io_u->
x„r_buÊí
 - 
ªtvÆ
;

140 
io_u
->
îr‹
 = 
îr
;

143 i‡(
r
 >
mö
)

144  
r
;

146 i‡(
have_timeout
) {

147 
u£c
;

149 
u£c
 = (
t
->
tv_£c
 * 1000000Ë+ (t->
tv_n£c
 / 1000);

150 i‡(
	`ts_utime_sö˚_now
(&
°¨t
Ë> 
u£c
)

151  
r
;

157 
	`aio_su•íd
((c⁄° 
os_aiocb_t
 * c⁄° *)
su•íd_li°
,

158 
su•íd_íåõs
, 
t
);

159 
ª°¨t
;

160 
	}
}

162 
io_u
 *
	$fio_posixaio_evít
(
thªad_d©a
 *
td
, 
evít
)

164 
posixaio_d©a
 *
pd
 = 
td
->
io_›s
->
d©a
;

166  
pd
->
aio_evíts
[
evít
];

167 
	}
}

169 
	$fio_posixaio_queue
(
thªad_d©a
 *
td
,

170 
io_u
 *io_u)

172 
posixaio_d©a
 *
pd
 = 
td
->
io_›s
->
d©a
;

173 
os_aiocb_t
 *
aiocb
 = &
io_u
->aiocb;

174 
ªt
;

176 
	`fio_ro_check
(
td
, 
io_u
);

178 i‡(
io_u
->
ddú
 =
DDIR_READ
)

179 
ªt
 = 
	`aio_ªad
(
aiocb
);

180 i‡(
io_u
->
ddú
 =
DDIR_WRITE
)

181 
ªt
 = 
	`aio_wrôe
(
aiocb
);

182 i‡(
io_u
->
ddú
 =
DDIR_TRIM
) {

183 i‡(
pd
->
queued
)

184  
FIO_Q_BUSY
;

186 
	`do_io_u_åim
(
td
, 
io_u
);

187  
FIO_Q_COMPLETED
;

189 #ifde‡
CONFIG_POSIXAIO_FSYNC


190 
ªt
 = 
	`aio_fsync
(
O_SYNC
, 
aiocb
);

192 i‡(
pd
->
queued
)

193  
FIO_Q_BUSY
;

195 
	`do_io_u_sync
(
td
, 
io_u
);

196  
FIO_Q_COMPLETED
;

200 i‡(
ªt
) {

201 
aio_îr
 = 
	`aio_îr‹
(
aiocb
);

209 i‡(
aio_îr
 =
EAGAIN
)

210  
FIO_Q_BUSY
;

212 
io_u
->
îr‹
 = 
aio_îr
;

213 
	`td_vîr‹
(
td
, 
io_u
->
îr‹
, "xfer");

214  
FIO_Q_COMPLETED
;

217 
pd
->
queued
++;

218  
FIO_Q_QUEUED
;

219 
	}
}

221 
	$fio_posixaio_˛ónup
(
thªad_d©a
 *
td
)

223 
posixaio_d©a
 *
pd
 = 
td
->
io_›s
->
d©a
;

225 i‡(
pd
) {

226 
	`‰ì
(
pd
->
aio_evíts
);

227 
	`‰ì
(
pd
);

229 
	}
}

231 
	$fio_posixaio_öô
(
thªad_d©a
 *
td
)

233 
posixaio_d©a
 *
pd
 = 
	`mÆloc
((*pd));

235 
	`mem£t
(
pd
, 0, (*pd));

236 
pd
->
aio_evíts
 = 
	`mÆloc
(
td
->
o
.
iodïth
 * (
io_u
 *));

237 
	`mem£t
(
pd
->
aio_evíts
, 0, 
td
->
o
.
iodïth
 * (
io_u
 *));

239 
td
->
io_›s
->
d©a
 = 
pd
;

241 
	}
}

243 
i€ngöe_›s
 
	gi€ngöe
 = {

244 .
«me
 = "posixaio",

245 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

246 .
	göô
 = 
fio_posixaio_öô
,

247 .
	g¥ï
 = 
fio_posixaio_¥ï
,

248 .
	gqueue
 = 
fio_posixaio_queue
,

249 .
	gˇn˚l
 = 
fio_posixaio_ˇn˚l
,

250 .
	ggëevíts
 = 
fio_posixaio_gëevíts
,

251 .
	gevít
 = 
fio_posixaio_evít
,

252 .
	g˛ónup
 = 
fio_posixaio_˛ónup
,

253 .
	g›í_fûe
 = 
gíîic_›í_fûe
,

254 .
	g˛o£_fûe
 = 
gíîic_˛o£_fûe
,

255 .
	ggë_fûe_size
 = 
gíîic_gë_fûe_size
,

258 
fio_öô
 
	$fio_posixaio_ªgi°î
()

260 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

261 
	}
}

263 
fio_exô
 
	$fio_posixaio_uƒegi°î
()

265 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

266 
	}
}

	@/home/terekhov/tmp/fio/fio/engines/rbd.c

8 
	~<rbd/librbd.h
>

10 
	~"../fio.h
"

12 
	sfio_rbd_iou
 {

13 
io_u
 *
	mio_u
;

14 
	mio_com∂ëe
;

17 
	srbd_d©a
 {

18 
ødos_t
 
	m˛u°î
;

19 
ødos_io˘x_t
 
	mio_˘x
;

20 
rbd_image_t
 
	mimage
;

21 
io_u
 **
	maio_evíts
;

24 
	srbd_›ti⁄s
 {

25 
thªad_d©a
 *
	mtd
;

26 *
	mrbd_«me
;

27 *
	mpoﬁ_«me
;

28 *
	m˛õ¡_«me
;

31 
fio_›ti⁄
 
	g›ti⁄s
[] = {

33 .
«me
 = "rbdname",

34 .
	g ame
 = "rbdÉngineÑbdname",

35 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

36 .
	ghñp
 = "RBDÇame for RBDÉngine",

37 .
	goff1
 = 
off£tof
(
rbd_›ti⁄s
, 
rbd_«me
),

38 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

39 .
	ggroup
 = 
FIO_OPT_G_RBD
,

42 .
	g«me
 = "pool",

43 .
	g ame
 = "rbdÉngineÖool",

44 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

45 .
	ghñp
 = "Name ofÅheÖool hostingÅhe RBD forÅhe RBDÉngine",

46 .
	goff1
 = 
off£tof
(
rbd_›ti⁄s
, 
poﬁ_«me
),

47 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

48 .
	ggroup
 = 
FIO_OPT_G_RBD
,

51 .
	g«me
 = "clientname",

52 .
	g ame
 = "rbdÉngine clientname",

53 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

54 .
	ghñp
 = "Name ofÅhe ceph clientÅoáccessÅhe RBD forÅhe RBDÉngine",

55 .
	goff1
 = 
off£tof
(
rbd_›ti⁄s
, 
˛õ¡_«me
),

56 .
	gˇãg‹y
 = 
FIO_OPT_C_ENGINE
,

57 .
	ggroup
 = 
FIO_OPT_G_RBD
,

60 .
	g«me
 = 
NULL
,

64 
	$_fio_£tup_rbd_d©a
(
thªad_d©a
 *
td
,

65 
rbd_d©a
 **
rbd_d©a_±r
)

67 
rbd_d©a
 *rbd_data;

69 i‡(
td
->
io_›s
->
d©a
)

72 
rbd_d©a
 = 
	`mÆloc
((rbd_data));

73 i‡(!
rbd_d©a
)

74 
Áûed
;

76 
	`mem£t
(
rbd_d©a
, 0, (rbd_data));

78 
rbd_d©a
->
aio_evíts
 = 
	`mÆloc
(
td
->
o
.
iodïth
 * (
io_u
 *));

79 i‡(!
rbd_d©a
->
aio_evíts
)

80 
Áûed
;

82 
	`mem£t
(
rbd_d©a
->
aio_evíts
, 0, 
td
->
o
.
iodïth
 * (
io_u
 *));

84 *
rbd_d©a_±r
 = 
rbd_d©a
;

88 
Áûed
:

91 
	}
}

93 
	$_fio_rbd_c⁄√˘
(
thªad_d©a
 *
td
)

95 
rbd_d©a
 *rbd_d©®
td
->
io_›s
->
d©a
;

96 
rbd_›ti⁄s
 *
o
 = 
td
->
eo
;

97 
r
;

99 
r
 = 
	`ødos_¸óã
(&(
rbd_d©a
->
˛u°î
), 
o
->
˛õ¡_«me
);

100 i‡(
r
 < 0) {

101 
	`log_îr
("rados_create failed.\n");

102 
Áûed_óæy
;

105 
r
 = 
	`ødos_c⁄f_ªad_fûe
(
rbd_d©a
->
˛u°î
, 
NULL
);

106 i‡(
r
 < 0) {

107 
	`log_îr
("rados_conf_read_file failed.\n");

108 
Áûed_óæy
;

111 
r
 = 
	`ødos_c⁄√˘
(
rbd_d©a
->
˛u°î
);

112 i‡(
r
 < 0) {

113 
	`log_îr
("rados_connect failed.\n");

114 
Áûed_shutdown
;

117 
r
 = 
	`ødos_io˘x_¸óã
(
rbd_d©a
->
˛u°î
, 
o
->
poﬁ_«me
,

118 &(
rbd_d©a
->
io_˘x
));

119 i‡(
r
 < 0) {

120 
	`log_îr
("rados_ioctx_create failed.\n");

121 
Áûed_shutdown
;

124 
r
 = 
	`rbd_›í
(
rbd_d©a
->
io_˘x
, 
o
->
rbd_«me
, &‘bd_d©a->
image
),

125 
NULL
 );

126 i‡(
r
 < 0) {

127 
	`log_îr
("rbd_open failed.\n");

128 
Áûed_›í
;

132 
Áûed_›í
:

133 
	`ødos_io˘x_de°roy
(
rbd_d©a
->
io_˘x
);

134 
Áûed_shutdown
:

135 
	`ødos_shutdown
(
rbd_d©a
->
˛u°î
);

136 
Áûed_óæy
:

138 
	}
}

140 
	$_fio_rbd_disc⁄√˘
(
rbd_d©a
 *rbd_data)

142 i‡(!
rbd_d©a
)

146 i‡(
rbd_d©a
->
image
) {

147 
	`rbd_˛o£
(
rbd_d©a
->
image
);

148 
rbd_d©a
->
image
 = 
NULL
;

151 i‡(
rbd_d©a
->
io_˘x
) {

152 
	`ødos_io˘x_de°roy
(
rbd_d©a
->
io_˘x
);

153 
rbd_d©a
->
io_˘x
 = 
NULL
;

156 i‡(
rbd_d©a
->
˛u°î
) {

157 
	`ødos_shutdown
(
rbd_d©a
->
˛u°î
);

158 
rbd_d©a
->
˛u°î
 = 
NULL
;

160 
	}
}

162 
	$_fio_rbd_föish_wrôe_aiocb
(
rbd_com∂ëi⁄_t
 
comp
, *
d©a
)

164 
io_u
 *io_u = (io_u *)
d©a
;

165 
fio_rbd_iou
 *fio_rbd_iou =

166 (
fio_rbd_iou
 *)
io_u
->
ígöe_d©a
;

168 
fio_rbd_iou
->
io_com∂ëe
 = 1;

173 
	`rbd_aio_ªÀa£
(
comp
);

177 
	}
}

179 
	$_fio_rbd_föish_ªad_aiocb
(
rbd_com∂ëi⁄_t
 
comp
, *
d©a
)

181 
io_u
 *io_u = (io_u *)
d©a
;

182 
fio_rbd_iou
 *fio_rbd_iou =

183 (
fio_rbd_iou
 *)
io_u
->
ígöe_d©a
;

185 
fio_rbd_iou
->
io_com∂ëe
 = 1;

189 
	`rbd_aio_ªÀa£
(
comp
);

194 
	}
}

196 
io_u
 *
	$fio_rbd_evít
(
thªad_d©a
 *
td
, 
evít
)

198 
rbd_d©a
 *rbd_d©®
td
->
io_›s
->
d©a
;

200  
rbd_d©a
->
aio_evíts
[
evít
];

201 
	}
}

203 
	$fio_rbd_gëevíts
(
thªad_d©a
 *
td
, 
mö
,

204 
max
, 
time•ec
 *
t
)

206 
rbd_d©a
 *rbd_d©®
td
->
io_›s
->
d©a
;

207 
evíts
 = 0;

208 
io_u
 *io_u;

209 
i
;

210 
fio_rbd_iou
 *
fov
;

213 
	`io_u_qôî
(&
td
->
io_u_Æl
, 
io_u
, 
i
) {

214 i‡(!(
io_u
->
Êags
 & 
IO_U_F_FLIGHT
))

217 
fov
 = (
fio_rbd_iou
 *)
io_u
->
ígöe_d©a
;

219 i‡(
fov
->
io_com∂ëe
) {

220 
fov
->
io_com∂ëe
 = 0;

221 
rbd_d©a
->
aio_evíts
[
evíts
] = 
io_u
;

222 
evíts
++;

226 i‡(
evíts
 < 
mö
)

227 
	`u¶ìp
(100);

233  
evíts
;

234 
	}
}

236 
	$fio_rbd_queue
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

238 
r
 = -1;

239 
rbd_d©a
 *rbd_d©®
td
->
io_›s
->
d©a
;

240 
rbd_com∂ëi⁄_t
 
comp
;

242 
	`fio_ro_check
(
td
, 
io_u
);

244 i‡(
io_u
->
ddú
 =
DDIR_WRITE
) {

245 
r
 = 
	`rbd_aio_¸óã_com∂ëi⁄
(
io_u
,

246 (
rbd_ˇŒback_t
)

247 
_fio_rbd_föish_wrôe_aiocb
,

248 &
comp
);

249 i‡(
r
 < 0) {

250 
log_îr


252 
Áûed
;

255 
r
 = 
	`rbd_aio_wrôe
(
rbd_d©a
->
image
, 
io_u
->
off£t
,

256 
io_u
->
x„r_buÊí
, io_u->
x„r_buf
, 
comp
);

257 i‡(
r
 < 0) {

258 
	`log_îr
("rbd_aio_write failed.\n");

259 
Áûed
;

262 } i‡(
io_u
->
ddú
 =
DDIR_READ
) {

263 
r
 = 
	`rbd_aio_¸óã_com∂ëi⁄
(
io_u
,

264 (
rbd_ˇŒback_t
)

265 
_fio_rbd_föish_ªad_aiocb
,

266 &
comp
);

267 i‡(
r
 < 0) {

268 
log_îr


270 
Áûed
;

273 
r
 = 
	`rbd_aio_ªad
(
rbd_d©a
->
image
, 
io_u
->
off£t
,

274 
io_u
->
x„r_buÊí
, io_u->
x„r_buf
, 
comp
);

276 i‡(
r
 < 0) {

277 
	`log_îr
("rbd_aio_read failed.\n");

278 
Áûed
;

281 } i‡(
io_u
->
ddú
 =
DDIR_SYNC
) {

282 
r
 = 
	`rbd_Êush
(
rbd_d©a
->
image
);

283 i‡(
r
 < 0) {

284 
	`log_îr
("rbd_flush failed.\n");

285 
Áûed
;

288  
FIO_Q_COMPLETED
;

290 
	`d¥öt
(
FD_IO
, "%s: W¨nög: unh™dÀd ddú: %d\n", 
__func__
,

291 
io_u
->
ddú
);

292  
FIO_Q_COMPLETED
;

295  
FIO_Q_QUEUED
;

297 
Áûed
:

298 
io_u
->
îr‹
 = 
r
;

299 
	`td_vîr‹
(
td
, 
io_u
->
îr‹
, "xfer");

300  
FIO_Q_COMPLETED
;

301 
	}
}

303 
	$fio_rbd_öô
(
thªad_d©a
 *
td
)

305 
r
;

307 
r
 = 
	`_fio_rbd_c⁄√˘
(
td
);

308 i‡(
r
) {

309 
	`log_îr
("fio_rbd_c⁄√˘ faûed,Ñëu∫ code: %d .\n", 
r
);

310 
Áûed
;

315 
Áûed
:

318 
	}
}

320 
	$fio_rbd_˛ónup
(
thªad_d©a
 *
td
)

322 
rbd_d©a
 *rbd_d©®
td
->
io_›s
->
d©a
;

324 i‡(
rbd_d©a
) {

325 
	`_fio_rbd_disc⁄√˘
(
rbd_d©a
);

326 
	`‰ì
(
rbd_d©a
->
aio_evíts
);

327 
	`‰ì
(
rbd_d©a
);

330 
	}
}

332 
	$fio_rbd_£tup
(
thªad_d©a
 *
td
)

334 
r
 = 0;

335 
rbd_image_öfo_t
 
öfo
;

336 
fio_fûe
 *
f
;

337 
rbd_d©a
 *rbd_d©®
NULL
;

338 
maj‹
, 
mö‹
, 
exåa
;

341 
	`rbd_vîsi⁄
(&
maj‹
, &
mö‹
, &
exåa
);

342 
	`log_öfo
("rbdÉngöe: RBD vîsi⁄: %d.%d.%d\n", 
maj‹
, 
mö‹
, 
exåa
);

345 
r
 = 
	`_fio_£tup_rbd_d©a
(
td
, &
rbd_d©a
);

346 i‡(
r
) {

347 
	`log_îr
("fio_setup_rbd_data failed.\n");

348 
˛ónup
;

350 
td
->
io_›s
->
d©a
 = 
rbd_d©a
;

355 
td
->
o
.
u£_thªad
 = 1;

361 
r
 = 
	`_fio_rbd_c⁄√˘
(
td
);

362 i‡(
r
) {

363 
	`log_îr
("fio_rbd_connect failed.\n");

364 
˛ónup
;

368 
r
 = 
	`rbd_°©
(
rbd_d©a
->
image
, &
öfo
, (info));

369 i‡(
r
 < 0) {

370 
	`log_îr
("rbd_status failed.\n");

371 
disc⁄√˘
;

373 
	`d¥öt
(
FD_IO
, "rbd-ígöe: imagêsize: %lu\n", 
öfo
.
size
);

379 i‡(!
td
->
fûes_ödex
) {

380 
	`add_fûe
(
td
,Åd->
o
.
fûíame
 ? : "rbd", 0, 0);

381 
td
->
o
.
ƒ_fûes
 =Åd->o.nr_files ? : 1;

382 
td
->
o
.
›í_fûes
++;

384 
f
 = 
td
->
fûes
[0];

385 
f
->
ªÆ_fûe_size
 = 
öfo
.
size
;

390 
	`_fio_rbd_disc⁄√˘
(
rbd_d©a
);

393 
disc⁄√˘
:

394 
	`_fio_rbd_disc⁄√˘
(
rbd_d©a
);

395 
˛ónup
:

396 
	`fio_rbd_˛ónup
(
td
);

397  
r
;

398 
	}
}

400 
	$fio_rbd_›í
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

403 
	}
}

405 
	$fio_rbd_io_u_‰ì
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

407 
fio_rbd_iou
 *
o
 = 
io_u
->
ígöe_d©a
;

409 i‡(
o
) {

410 
io_u
->
ígöe_d©a
 = 
NULL
;

411 
	`‰ì
(
o
);

413 
	}
}

415 
	$fio_rbd_io_u_öô
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

417 
fio_rbd_iou
 *
o
;

419 
o
 = 
	`mÆloc
((*o));

420 
o
->
io_com∂ëe
 = 0;

421 
o
->
io_u
 = io_u;

422 
io_u
->
ígöe_d©a
 = 
o
;

424 
	}
}

426 
i€ngöe_›s
 
	gi€ngöe
 = {

427 .
«me
 = "rbd",

428 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

429 .
	g£tup
 = 
fio_rbd_£tup
,

430 .
	göô
 = 
fio_rbd_öô
,

431 .
	gqueue
 = 
fio_rbd_queue
,

432 .
	ggëevíts
 = 
fio_rbd_gëevíts
,

433 .
	gevít
 = 
fio_rbd_evít
,

434 .
	g˛ónup
 = 
fio_rbd_˛ónup
,

435 .
	g›í_fûe
 = 
fio_rbd_›í
,

436 .
	g›ti⁄s
 = 
›ti⁄s
,

437 .
	gio_u_öô
 = 
fio_rbd_io_u_öô
,

438 .
	gio_u_‰ì
 = 
fio_rbd_io_u_‰ì
,

439 .
	g›ti⁄_°ru˘_size
 = (
rbd_›ti⁄s
),

442 
fio_öô
 
	$fio_rbd_ªgi°î
()

444 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

445 
	}
}

447 
fio_exô
 
	$fio_rbd_uƒegi°î
()

449 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

450 
	}
}

	@/home/terekhov/tmp/fio/fio/engines/rdma.c

25 
	~<°dio.h
>

26 
	~<°dlib.h
>

27 
	~<uni°d.h
>

28 
	~<î∫o.h
>

29 
	~<as£π.h
>

30 
	~<√töë/ö.h
>

31 
	~<¨∑/öë.h
>

32 
	~<√tdb.h
>

33 
	~<sys/pﬁl.h
>

34 
	~<sys/ty≥s.h
>

35 
	~<sys/sockë.h
>

36 
	~<sys/time.h
>

37 
	~<sys/ªsour˚.h
>

39 
	~<±hªad.h
>

40 
	~<öây≥s.h
>

42 
	~"../fio.h
"

43 
	~"../hash.h
"

45 
	~<rdma/rdma_cma.h
>

46 
	~<öföib™d/¨ch.h
>

48 
	#FIO_RDMA_MAX_IO_DEPTH
 512

	)

50 
	erdma_io_mode
 {

51 
	mFIO_RDMA_UNKNOWN
 = 0,

52 
	mFIO_RDMA_MEM_WRITE
,

53 
	mFIO_RDMA_MEM_READ
,

54 
	mFIO_RDMA_CHA_SEND
,

55 
	mFIO_RDMA_CHA_RECV


58 
	sªmŸe_u
 {

59 
uöt64_t
 
	mbuf
;

60 
uöt32_t
 
	mrkey
;

61 
uöt32_t
 
	msize
;

64 
	srdma_öfo_blk
 {

65 
uöt32_t
 
	mmode
;

66 
uöt32_t
 
	mƒ
;

69 
ªmŸe_u
 
	mrmt_us
[
FIO_RDMA_MAX_IO_DEPTH
];

72 
	srdma_io_u_d©a
 {

73 
uöt64_t
 
	mwr_id
;

74 
ibv_£nd_wr
 
	msq_wr
;

75 
ibv_ªcv_wr
 
	mrq_wr
;

76 
ibv_sge
 
	mrdma_sgl
;

79 
	srdmaio_d©a
 {

80 
	mis_˛õ¡
;

81 
rdma_io_mode
 
	mrdma_¥Ÿocﬁ
;

82 
	mho°
[64];

83 
sockaddr_ö
 
	maddr
;

85 
ibv_ªcv_wr
 
	mrq_wr
;

86 
ibv_sge
 
	mªcv_sgl
;

87 
rdma_öfo_blk
 
	mªcv_buf
;

88 
ibv_mr
 *
	mªcv_mr
;

90 
ibv_£nd_wr
 
	msq_wr
;

91 
ibv_sge
 
	m£nd_sgl
;

92 
rdma_öfo_blk
 
	m£nd_buf
;

93 
ibv_mr
 *
	m£nd_mr
;

95 
ibv_comp_ch™√l
 *
	mch™√l
;

96 
ibv_cq
 *
	mcq
;

97 
ibv_pd
 *
	mpd
;

98 
ibv_qp
 *
	mqp
;

100 
±hªad_t
 
	mcmthªad
;

101 
rdma_evít_ch™√l
 *
	mcm_ch™√l
;

102 
rdma_cm_id
 *
	mcm_id
;

103 
rdma_cm_id
 *
	mchûd_cm_id
;

105 
	mcq_evít_num
;

107 
ªmŸe_u
 *
	mrmt_us
;

108 
	mrmt_ƒ
;

109 
io_u
 **
	mio_us_queued
;

110 
	mio_u_queued_ƒ
;

111 
io_u
 **
	mio_us_Êight
;

112 
	mio_u_Êight_ƒ
;

113 
io_u
 **
	mio_us_com∂ëed
;

114 
	mio_u_com∂ëed_ƒ
;

116 
‰™d_°©e
 
	mønd_°©e
;

119 
	$˛õ¡_ªcv
(
thªad_d©a
 *
td
, 
ibv_wc
 *
wc
)

121 
rdmaio_d©a
 *
rd
 = 
td
->
io_›s
->
d©a
;

123 i‡(
wc
->
byã_Àn
 !(
rd
->
ªcv_buf
)) {

124 
	`log_îr
("Re˚ived bogu†d©a, sizê%d\n", 
wc
->
byã_Àn
);

129 i‡((
rd
->
rdma_¥Ÿocﬁ
 =
FIO_RDMA_MEM_WRITE
) ||

130 (
rd
->
rdma_¥Ÿocﬁ
 =
FIO_RDMA_MEM_READ
)) {

132 
i
 = 0;

134 
rd
->
rmt_ƒ
 = 
	`¡ohl
‘d->
ªcv_buf
.
ƒ
);

136 
i
 = 0; i < 
rd
->
rmt_ƒ
; i++) {

137 
rd
->
rmt_us
[
i
].
buf
 = 
	`¡ohŒ
‘d->
ªcv_buf
.rmt_us[i].buf);

138 
rd
->
rmt_us
[
i
].
rkey
 = 
	`¡ohl
‘d->
ªcv_buf
.rmt_us[i].rkey);

139 
rd
->
rmt_us
[
i
].
size
 = 
	`¡ohl
‘d->
ªcv_buf
.rmt_us[i].size);

141 
	`d¥öt
(
FD_IO
,

142 "fio: Re˚ivedÑkey %xádd∏%" 
PRIx64


143 "Üí %d fromÖìr\n", 
rd
->
rmt_us
[
i
].
rkey
,

144 
rd
->
rmt_us
[
i
].
buf
,Ñd->rmt_us[i].
size
);

149 
	}
}

151 
	$£rvî_ªcv
(
thªad_d©a
 *
td
, 
ibv_wc
 *
wc
)

153 
rdmaio_d©a
 *
rd
 = 
td
->
io_›s
->
d©a
;

155 i‡(
wc
->
wr_id
 =
FIO_RDMA_MAX_IO_DEPTH
) {

156 
rd
->
rdma_¥Ÿocﬁ
 = 
	`¡ohl
‘d->
ªcv_buf
.
mode
);

159 i‡(
rd
->
rdma_¥Ÿocﬁ
 =
FIO_RDMA_CHA_SEND
)

160 
rd
->
rdma_¥Ÿocﬁ
 = 
FIO_RDMA_CHA_RECV
;

164 
	}
}

166 
	$cq_evít_h™dÀr
(
thªad_d©a
 *
td
, 
ibv_wc_›code
 
›code
)

168 
rdmaio_d©a
 *
rd
 = 
td
->
io_›s
->
d©a
;

169 
ibv_wc
 
wc
;

170 
rdma_io_u_d©a
 *
r_io_u_d
;

171 
ªt
;

172 
com≥vnum
 = 0;

173 
i
;

175 (
ªt
 = 
	`ibv_pﬁl_cq
(
rd
->
cq
, 1, &
wc
)) == 1) {

176 
ªt
 = 0;

177 
com≥vnum
++;

179 i‡(
wc
.
°©us
) {

180 
	`log_îr
("fio: cq completion status %d(%s)\n",

181 
wc
.
°©us
, 
	`ibv_wc_°©us_°r
(wc.status));

185 
wc
.
›code
) {

187 
IBV_WC_RECV
:

188 i‡(
rd
->
is_˛õ¡
 == 1)

189 
	`˛õ¡_ªcv
(
td
, &
wc
);

191 
	`£rvî_ªcv
(
td
, &
wc
);

193 i‡(
wc
.
wr_id
 =
FIO_RDMA_MAX_IO_DEPTH
)

196 
i
 = 0; i < 
rd
->
io_u_Êight_ƒ
; i++) {

197 
r_io_u_d
 = 
rd
->
io_us_Êight
[
i
]->
ígöe_d©a
;

199 i‡(
wc
.
wr_id
 =
r_io_u_d
->
rq_wr
.wr_id) {

200 
rd
->
io_us_Êight
[
i
]->
ªsid
 =

201 
rd
->
io_us_Êight
[
i
]->
buÊí


202 - 
wc
.
byã_Àn
;

204 
rd
->
io_us_Êight
[
i
]->
îr‹
 = 0;

206 
rd
->
io_us_com∂ëed
[rd->

207 
io_u_com∂ëed_ƒ
]

208 
rd
->
io_us_Êight
[
i
];

209 
rd
->
io_u_com∂ëed_ƒ
++;

213 i‡(
i
 =
rd
->
io_u_Êight_ƒ
)

214 
	`log_îr
("fio:Ñecv w∏%" 
PRId64
 "Çot found\n",

215 
wc
.
wr_id
);

218 
rd
->
io_us_Êight
[
i
] =

219 
rd
->
io_us_Êight
[rd->
io_u_Êight_ƒ
 - 1];

220 
rd
->
io_u_Êight_ƒ
--;

225 
IBV_WC_SEND
:

226 
IBV_WC_RDMA_WRITE
:

227 
IBV_WC_RDMA_READ
:

228 i‡(
wc
.
wr_id
 =
FIO_RDMA_MAX_IO_DEPTH
)

231 
i
 = 0; i < 
rd
->
io_u_Êight_ƒ
; i++) {

232 
r_io_u_d
 = 
rd
->
io_us_Êight
[
i
]->
ígöe_d©a
;

234 i‡(
wc
.
wr_id
 =
r_io_u_d
->
sq_wr
.wr_id) {

235 
rd
->
io_us_com∂ëed
[rd->

236 
io_u_com∂ëed_ƒ
]

237 
rd
->
io_us_Êight
[
i
];

238 
rd
->
io_u_com∂ëed_ƒ
++;

242 i‡(
i
 =
rd
->
io_u_Êight_ƒ
)

243 
	`log_îr
("fio: síd w∏%" 
PRId64
 "Çot found\n",

244 
wc
.
wr_id
);

247 
rd
->
io_us_Êight
[
i
] =

248 
rd
->
io_us_Êight
[rd->
io_u_Êight_ƒ
 - 1];

249 
rd
->
io_u_Êight_ƒ
--;

255 
	`log_öfo
("fio: unknown completionÉvent %d\n",

256 
wc
.
›code
);

259 
rd
->
cq_evít_num
++;

261 i‡(
ªt
) {

262 
	`log_îr
("fio:Öﬁ»îr‹ %d\n", 
ªt
);

266  
com≥vnum
;

267 
	}
}

273 
	$rdma_pﬁl_waô
(
thªad_d©a
 *
td
, 
ibv_wc_›code
 
›code
)

275 
rdmaio_d©a
 *
rd
 = 
td
->
io_›s
->
d©a
;

276 
ibv_cq
 *
ev_cq
;

277 *
ev_˘x
;

278 
ªt
;

280 i‡(
rd
->
cq_evít_num
 > 0) {

281 
rd
->
cq_evít_num
--;

285 
agaö
:

286 i‡(
	`ibv_gë_cq_evít
(
rd
->
ch™√l
, &
ev_cq
, &
ev_˘x
) != 0) {

287 
	`log_îr
("fio: FailedÅo get cqÉvent!\n");

290 i‡(
ev_cq
 !
rd
->
cq
) {

291 
	`log_îr
("fio: Unknown CQ!\n");

294 i‡(
	`ibv_ªq_nŸify_cq
(
rd
->
cq
, 0) != 0) {

295 
	`log_îr
("fio: FailedÅo setÇotify!\n");

299 
ªt
 = 
	`cq_evít_h™dÀr
(
td
, 
›code
);

300 i‡(
ªt
 < 1)

301 
agaö
;

303 
	`ibv_ack_cq_evíts
(
rd
->
cq
, 
ªt
);

305 
rd
->
cq_evít_num
--;

307  
ªt
;

308 
	}
}

310 
	$fio_rdmaio_£tup_qp
(
thªad_d©a
 *
td
)

312 
rdmaio_d©a
 *
rd
 = 
td
->
io_›s
->
d©a
;

313 
ibv_qp_öô_©å
 
öô_©å
;

314 
qp_dïth
 = 
td
->
o
.
iodïth
 * 2;

316 i‡(
rd
->
is_˛õ¡
 == 0)

317 
rd
->
pd
 = 
	`ibv_Æloc_pd
‘d->
chûd_cm_id
->
vîbs
);

319 
rd
->
pd
 = 
	`ibv_Æloc_pd
‘d->
cm_id
->
vîbs
);

321 i‡(
rd
->
pd
 =
NULL
) {

322 
	`log_îr
("fio: ibv_alloc_pd fail\n");

326 i‡(
rd
->
is_˛õ¡
 == 0)

327 
rd
->
ch™√l
 = 
	`ibv_¸óã_comp_ch™√l
‘d->
chûd_cm_id
->
vîbs
);

329 
rd
->
ch™√l
 = 
	`ibv_¸óã_comp_ch™√l
‘d->
cm_id
->
vîbs
);

330 i‡(
rd
->
ch™√l
 =
NULL
) {

331 
	`log_îr
("fio: ibv_create_comp_channel fail\n");

332 
îr1
;

335 i‡(
qp_dïth
 < 16)

336 
qp_dïth
 = 16;

338 i‡(
rd
->
is_˛õ¡
 == 0)

339 
rd
->
cq
 = 
	`ibv_¸óã_cq
‘d->
chûd_cm_id
->
vîbs
,

340 
qp_dïth
, 
rd
,Ñd->
ch™√l
, 0);

342 
rd
->
cq
 = 
	`ibv_¸óã_cq
‘d->
cm_id
->
vîbs
,

343 
qp_dïth
, 
rd
,Ñd->
ch™√l
, 0);

344 i‡(
rd
->
cq
 =
NULL
) {

345 
	`log_îr
("fio: ibv_create_cq failed\n");

346 
îr2
;

349 i‡(
	`ibv_ªq_nŸify_cq
(
rd
->
cq
, 0) != 0) {

350 
	`log_îr
("fio: ibv_create_cq failed\n");

351 
îr3
;

355 
	`mem£t
(&
öô_©å
, 0, (init_attr));

356 
öô_©å
.
ˇp
.
max_£nd_wr
 = 
qp_dïth
;

357 
öô_©å
.
ˇp
.
max_ªcv_wr
 = 
qp_dïth
;

358 
öô_©å
.
ˇp
.
max_ªcv_sge
 = 1;

359 
öô_©å
.
ˇp
.
max_£nd_sge
 = 1;

360 
öô_©å
.
qp_ty≥
 = 
IBV_QPT_RC
;

361 
öô_©å
.
£nd_cq
 = 
rd
->
cq
;

362 
öô_©å
.
ªcv_cq
 = 
rd
->
cq
;

364 i‡(
rd
->
is_˛õ¡
 == 0) {

365 i‡(
	`rdma_¸óã_qp
(
rd
->
chûd_cm_id
,Ñd->
pd
, &
öô_©å
) != 0) {

366 
	`log_îr
("fio:Ñdma_create_qp failed\n");

367 
îr3
;

369 
rd
->
qp
 =Ñd->
chûd_cm_id
->qp;

371 i‡(
	`rdma_¸óã_qp
(
rd
->
cm_id
,Ñd->
pd
, &
öô_©å
) != 0) {

372 
	`log_îr
("fio:Ñdma_create_qp failed\n");

373 
îr3
;

375 
rd
->
qp
 =Ñd->
cm_id
->qp;

380 
îr3
:

381 
	`ibv_de°roy_cq
(
rd
->
cq
);

382 
îr2
:

383 
	`ibv_de°roy_comp_ch™√l
(
rd
->
ch™√l
);

384 
îr1
:

385 
	`ibv_dóŒoc_pd
(
rd
->
pd
);

388 
	}
}

390 
	$fio_rdmaio_£tup_c⁄åﬁ_msg_buf„rs
(
thªad_d©a
 *
td
)

392 
rdmaio_d©a
 *
rd
 = 
td
->
io_›s
->
d©a
;

394 
rd
->
ªcv_mr
 = 
	`ibv_ªg_mr
‘d->
pd
, &rd->
ªcv_buf
, (rd->recv_buf),

395 
IBV_ACCESS_LOCAL_WRITE
);

396 i‡(
rd
->
ªcv_mr
 =
NULL
) {

397 
	`log_îr
("fio:Ñecv_bufÑeg_mr failed\n");

401 
rd
->
£nd_mr
 = 
	`ibv_ªg_mr
‘d->
pd
, &rd->
£nd_buf
, (rd->send_buf),

403 i‡(
rd
->
£nd_mr
 =
NULL
) {

404 
	`log_îr
("fio: send_bufÑeg_mr failed\n");

405 
	`ibv_dîeg_mr
(
rd
->
ªcv_mr
);

411 
rd
->
ªcv_sgl
.
addr
 = (
uöt64_t
Ë()&rd->
ªcv_buf
;

412 
rd
->
ªcv_sgl
.
Àngth
 = ‘d->
ªcv_buf
);

413 
rd
->
ªcv_sgl
.
lkey
 =Ñd->
ªcv_mr
->lkey;

414 
rd
->
rq_wr
.
sg_li°
 = &rd->
ªcv_sgl
;

415 
rd
->
rq_wr
.
num_sge
 = 1;

416 
rd
->
rq_wr
.
wr_id
 = 
FIO_RDMA_MAX_IO_DEPTH
;

419 
rd
->
£nd_sgl
.
addr
 = (
uöt64_t
Ë()&rd->
£nd_buf
;

420 
rd
->
£nd_sgl
.
Àngth
 = ‘d->
£nd_buf
);

421 
rd
->
£nd_sgl
.
lkey
 =Ñd->
£nd_mr
->lkey;

423 
rd
->
sq_wr
.
›code
 = 
IBV_WR_SEND
;

424 
rd
->
sq_wr
.
£nd_Êags
 = 
IBV_SEND_SIGNALED
;

425 
rd
->
sq_wr
.
sg_li°
 = &rd->
£nd_sgl
;

426 
rd
->
sq_wr
.
num_sge
 = 1;

427 
rd
->
sq_wr
.
wr_id
 = 
FIO_RDMA_MAX_IO_DEPTH
;

430 
	}
}

432 
	$gë_√xt_ch™√l_evít
(
thªad_d©a
 *
td
,

433 
rdma_evít_ch™√l
 *
ch™√l
,

434 
rdma_cm_evít_ty≥
 
waô_evít
)

436 
rdmaio_d©a
 *
rd
 = 
td
->
io_›s
->
d©a
;

437 
rdma_cm_evít
 *
evít
;

438 
ªt
;

440 
ªt
 = 
	`rdma_gë_cm_evít
(
ch™√l
, &
evít
);

441 i‡(
ªt
) {

442 
	`log_îr
("fio:Ñdma_gë_cm_evít: %d\n", 
ªt
);

446 i‡(
evít
->evíà!
waô_evít
) {

447 
	`log_îr
("fio:Évent is %s instead of %s\n",

448 
	`rdma_evít_°r
(
evít
->event),

449 
	`rdma_evít_°r
(
waô_evít
));

453 
evít
->event) {

454 
RDMA_CM_EVENT_CONNECT_REQUEST
:

455 
rd
->
chûd_cm_id
 = 
evít
->
id
;

461 
	`rdma_ack_cm_evít
(
evít
);

464 
	}
}

466 
	$fio_rdmaio_¥ï
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

468 
rdmaio_d©a
 *
rd
 = 
td
->
io_›s
->
d©a
;

469 
rdma_io_u_d©a
 *
r_io_u_d
;

471 
r_io_u_d
 = 
io_u
->
ígöe_d©a
;

473 
rd
->
rdma_¥Ÿocﬁ
) {

474 
FIO_RDMA_MEM_WRITE
:

475 
FIO_RDMA_MEM_READ
:

476 
r_io_u_d
->
rdma_sgl
.
addr
 = (
uöt64_t
Ë()
io_u
->
buf
;

477 
r_io_u_d
->
rdma_sgl
.
lkey
 = 
io_u
->
mr
->lkey;

478 
r_io_u_d
->
sq_wr
.
wr_id
 =Ñ_io_u_d->wr_id;

479 
r_io_u_d
->
sq_wr
.
£nd_Êags
 = 
IBV_SEND_SIGNALED
;

480 
r_io_u_d
->
sq_wr
.
sg_li°
 = &r_io_u_d->
rdma_sgl
;

481 
r_io_u_d
->
sq_wr
.
num_sge
 = 1;

483 
FIO_RDMA_CHA_SEND
:

484 
r_io_u_d
->
rdma_sgl
.
addr
 = (
uöt64_t
Ë()
io_u
->
buf
;

485 
r_io_u_d
->
rdma_sgl
.
lkey
 = 
io_u
->
mr
->lkey;

486 
r_io_u_d
->
rdma_sgl
.
Àngth
 = 
io_u
->
buÊí
;

487 
r_io_u_d
->
sq_wr
.
wr_id
 =Ñ_io_u_d->wr_id;

488 
r_io_u_d
->
sq_wr
.
›code
 = 
IBV_WR_SEND
;

489 
r_io_u_d
->
sq_wr
.
£nd_Êags
 = 
IBV_SEND_SIGNALED
;

490 
r_io_u_d
->
sq_wr
.
sg_li°
 = &r_io_u_d->
rdma_sgl
;

491 
r_io_u_d
->
sq_wr
.
num_sge
 = 1;

493 
FIO_RDMA_CHA_RECV
:

494 
r_io_u_d
->
rdma_sgl
.
addr
 = (
uöt64_t
Ë()
io_u
->
buf
;

495 
r_io_u_d
->
rdma_sgl
.
lkey
 = 
io_u
->
mr
->lkey;

496 
r_io_u_d
->
rdma_sgl
.
Àngth
 = 
io_u
->
buÊí
;

497 
r_io_u_d
->
rq_wr
.
wr_id
 =Ñ_io_u_d->wr_id;

498 
r_io_u_d
->
rq_wr
.
sg_li°
 = &r_io_u_d->
rdma_sgl
;

499 
r_io_u_d
->
rq_wr
.
num_sge
 = 1;

502 
	`log_îr
("fio: unknow¿rdm®¥Ÿocﬁ - %d\n", 
rd
->
rdma_¥Ÿocﬁ
);

507 
	}
}

509 
io_u
 *
	$fio_rdmaio_evít
(
thªad_d©a
 *
td
, 
evít
)

511 
rdmaio_d©a
 *
rd
 = 
td
->
io_›s
->
d©a
;

512 
io_u
 *io_u;

513 
i
;

515 
io_u
 = 
rd
->
io_us_com∂ëed
[0];

516 
i
 = 0; i < 
rd
->
io_u_com∂ëed_ƒ
 - 1; i++)

517 
rd
->
io_us_com∂ëed
[
i
] =Ñd->io_us_completed[i + 1];

519 
rd
->
io_u_com∂ëed_ƒ
--;

521 
	`d¥öt_io_u
(
io_u
, "fio_rdmaio_event");

523  
io_u
;

524 
	}
}

526 
	$fio_rdmaio_gëevíts
(
thªad_d©a
 *
td
, 
mö
,

527 
max
, 
time•ec
 *
t
)

529 
rdmaio_d©a
 *
rd
 = 
td
->
io_›s
->
d©a
;

530 
ibv_wc_›code
 
comp_›code
;

531 
ibv_cq
 *
ev_cq
;

532 *
ev_˘x
;

533 
ªt
, 
r
 = 0;

534 
comp_›code
 = 
IBV_WC_RDMA_WRITE
;

536 
rd
->
rdma_¥Ÿocﬁ
) {

537 
FIO_RDMA_MEM_WRITE
:

538 
comp_›code
 = 
IBV_WC_RDMA_WRITE
;

540 
FIO_RDMA_MEM_READ
:

541 
comp_›code
 = 
IBV_WC_RDMA_READ
;

543 
FIO_RDMA_CHA_SEND
:

544 
comp_›code
 = 
IBV_WC_SEND
;

546 
FIO_RDMA_CHA_RECV
:

547 
comp_›code
 = 
IBV_WC_RECV
;

550 
	`log_îr
("fio: unknow¿rdm®¥Ÿocﬁ - %d\n", 
rd
->
rdma_¥Ÿocﬁ
);

554 i‡(
rd
->
cq_evít_num
 > 0) {

555 
rd
->
cq_evít_num
--;

559 
agaö
:

560 i‡(
	`ibv_gë_cq_evít
(
rd
->
ch™√l
, &
ev_cq
, &
ev_˘x
) != 0) {

561 
	`log_îr
("fio: FailedÅo get cqÉvent!\n");

564 i‡(
ev_cq
 !
rd
->
cq
) {

565 
	`log_îr
("fio: Unknown CQ!\n");

568 i‡(
	`ibv_ªq_nŸify_cq
(
rd
->
cq
, 0) != 0) {

569 
	`log_îr
("fio: FailedÅo setÇotify!\n");

573 
ªt
 = 
	`cq_evít_h™dÀr
(
td
, 
comp_›code
);

574 i‡(
ªt
 < 1)

575 
agaö
;

577 
	`ibv_ack_cq_evíts
(
rd
->
cq
, 
ªt
);

579 
r
 +
ªt
;

580 i‡(
r
 < 
mö
)

581 
agaö
;

583 
rd
->
cq_evít_num
 -
r
;

585  
r
;

586 
	}
}

588 
	$fio_rdmaio_£nd
(
thªad_d©a
 *
td
, 
io_u
 **
io_us
,

589 
ƒ
)

591 
rdmaio_d©a
 *
rd
 = 
td
->
io_›s
->
d©a
;

592 
ibv_£nd_wr
 *
bad_wr
;

594 
ibv_wc_›code
 
comp_›code
;

595 
comp_›code
 = 
IBV_WC_RDMA_WRITE
;

597 
i
;

598 
ödex
;

599 
rdma_io_u_d©a
 *
r_io_u_d
;

601 
r_io_u_d
 = 
NULL
;

603 
i
 = 0; i < 
ƒ
; i++) {

605 
rd
->
rdma_¥Ÿocﬁ
) {

606 
FIO_RDMA_MEM_WRITE
:

608 
r_io_u_d
 = 
io_us
[
i
]->
ígöe_d©a
;

609 
ödex
 = 
	`__ønd
(&
rd
->
ønd_°©e
Ë%Ñd->
rmt_ƒ
;

610 
r_io_u_d
->
sq_wr
.
›code
 = 
IBV_WR_RDMA_WRITE
;

611 
r_io_u_d
->
sq_wr
.
wr
.
rdma
.
rkey
 = 
rd
->
rmt_us
[
ödex
].rkey;

612 
r_io_u_d
->
sq_wr
.
wr
.
rdma
.
ªmŸe_addr
 = \

613 
rd
->
rmt_us
[
ödex
].
buf
;

614 
r_io_u_d
->
sq_wr
.
sg_li°
->
Àngth
 = 
io_us
[
i
]->
buÊí
;

616 
FIO_RDMA_MEM_READ
:

618 
r_io_u_d
 = 
io_us
[
i
]->
ígöe_d©a
;

619 
ödex
 = 
	`__ønd
(&
rd
->
ønd_°©e
Ë%Ñd->
rmt_ƒ
;

620 
r_io_u_d
->
sq_wr
.
›code
 = 
IBV_WR_RDMA_READ
;

621 
r_io_u_d
->
sq_wr
.
wr
.
rdma
.
rkey
 = 
rd
->
rmt_us
[
ödex
].rkey;

622 
r_io_u_d
->
sq_wr
.
wr
.
rdma
.
ªmŸe_addr
 = \

623 
rd
->
rmt_us
[
ödex
].
buf
;

624 
r_io_u_d
->
sq_wr
.
sg_li°
->
Àngth
 = 
io_us
[
i
]->
buÊí
;

626 
FIO_RDMA_CHA_SEND
:

627 
r_io_u_d
 = 
io_us
[
i
]->
ígöe_d©a
;

628 
r_io_u_d
->
sq_wr
.
›code
 = 
IBV_WR_SEND
;

629 
r_io_u_d
->
sq_wr
.
£nd_Êags
 = 
IBV_SEND_SIGNALED
;

632 
	`log_îr
("fio: unknownÑdmaÖrotocol - %d\n",

633 
rd
->
rdma_¥Ÿocﬁ
);

637 i‡(
	`ibv_po°_£nd
(
rd
->
qp
, &
r_io_u_d
->
sq_wr
, &
bad_wr
) != 0) {

638 
	`log_îr
("fio: ibv_post_send fail\n");

642 
	`d¥öt_io_u
(
io_us
[
i
], "fio_rdmaio_send");

648  
i
;

649 
	}
}

651 
	$fio_rdmaio_ªcv
(
thªad_d©a
 *
td
, 
io_u
 **
io_us
,

652 
ƒ
)

654 
rdmaio_d©a
 *
rd
 = 
td
->
io_›s
->
d©a
;

655 
ibv_ªcv_wr
 *
bad_wr
;

656 
rdma_io_u_d©a
 *
r_io_u_d
;

657 
i
;

659 
i
 = 0;

660 i‡(
rd
->
rdma_¥Ÿocﬁ
 =
FIO_RDMA_CHA_RECV
) {

662 
i
 = 0; i < 
ƒ
; i++) {

663 
r_io_u_d
 = 
io_us
[
i
]->
ígöe_d©a
;

664 i‡(
	`ibv_po°_ªcv
(
rd
->
qp
, &
r_io_u_d
->
rq_wr
, &
bad_wr
) !=

666 
	`log_îr
("fio: ibv_post_recv fail\n");

670 } i‡((
rd
->
rdma_¥Ÿocﬁ
 =
FIO_RDMA_MEM_READ
)

671 || (
rd
->
rdma_¥Ÿocﬁ
 =
FIO_RDMA_MEM_WRITE
)) {

673 i‡(
	`ibv_po°_ªcv
(
rd
->
qp
, &rd->
rq_wr
, &
bad_wr
) != 0) {

674 
	`log_îr
("fio: ibv_post_recv fail\n");

678 
	`rdma_pﬁl_waô
(
td
, 
IBV_WC_RECV
);

680 
	`d¥öt
(
FD_IO
, "fio:Ñecv FINISH message\n");

681 
td
->
d⁄e
 = 1;

685  
i
;

686 
	}
}

688 
	$fio_rdmaio_queue
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

690 
rdmaio_d©a
 *
rd
 = 
td
->
io_›s
->
d©a
;

692 
	`fio_ro_check
(
td
, 
io_u
);

694 i‡(
rd
->
io_u_queued_ƒ
 =()
td
->
o
.
iodïth
)

695  
FIO_Q_BUSY
;

697 
rd
->
io_us_queued
[rd->
io_u_queued_ƒ
] = 
io_u
;

698 
rd
->
io_u_queued_ƒ
++;

700 
	`d¥öt_io_u
(
io_u
, "fio_rdmaio_queue");

702  
FIO_Q_QUEUED
;

703 
	}
}

705 
	$fio_rdmaio_queued
(
thªad_d©a
 *
td
, 
io_u
 **
io_us
,

706 
ƒ
)

708 
rdmaio_d©a
 *
rd
 = 
td
->
io_›s
->
d©a
;

709 
timevÆ
 
now
;

710 
i
;

712 i‡(!
	`fio_fûl_issue_time
(
td
))

715 
	`fio_gëtime
(&
now
, 
NULL
);

717 
i
 = 0; i < 
ƒ
; i++) {

718 
io_u
 *io_u = 
io_us
[
i
];

721 
rd
->
io_us_Êight
[rd->
io_u_Êight_ƒ
] = 
io_u
;

722 
rd
->
io_u_Êight_ƒ
++;

724 
	`mem˝y
(&
io_u
->
issue_time
, &
now
, (now));

725 
	`io_u_queued
(
td
, 
io_u
);

727 
	}
}

729 
	$fio_rdmaio_commô
(
thªad_d©a
 *
td
)

731 
rdmaio_d©a
 *
rd
 = 
td
->
io_›s
->
d©a
;

732 
io_u
 **
io_us
;

733 
ªt
;

735 i‡(!
rd
->
io_us_queued
)

738 
io_us
 = 
rd
->
io_us_queued
;

741 i‡(
rd
->
is_˛õ¡
)

742 
ªt
 = 
	`fio_rdmaio_£nd
(
td
, 
io_us
, 
rd
->
io_u_queued_ƒ
);

743 i‡(!
rd
->
is_˛õ¡
)

744 
ªt
 = 
	`fio_rdmaio_ªcv
(
td
, 
io_us
, 
rd
->
io_u_queued_ƒ
);

746 
ªt
 = 0;

748 i‡(
ªt
 > 0) {

749 
	`fio_rdmaio_queued
(
td
, 
io_us
, 
ªt
);

750 
	`io_u_m¨k_submô
(
td
, 
ªt
);

751 
rd
->
io_u_queued_ƒ
 -
ªt
;

752 
io_us
 +
ªt
;

753 
ªt
 = 0;

756 } 
rd
->
io_u_queued_ƒ
);

758  
ªt
;

759 
	}
}

761 
	$fio_rdmaio_c⁄√˘
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

763 
rdmaio_d©a
 *
rd
 = 
td
->
io_›s
->
d©a
;

764 
rdma_c⁄n_∑øm
 
c⁄n_∑øm
;

765 
ibv_£nd_wr
 *
bad_wr
;

767 
	`mem£t
(&
c⁄n_∑øm
, 0, (conn_param));

768 
c⁄n_∑øm
.
ª•⁄dî_ªsour˚s
 = 1;

769 
c⁄n_∑øm
.
öôüt‹_dïth
 = 1;

770 
c⁄n_∑øm
.
ªåy_cou¡
 = 10;

772 i‡(
	`rdma_c⁄√˘
(
rd
->
cm_id
, &
c⁄n_∑øm
) != 0) {

773 
	`log_îr
("fio:Ñdma_connect fail\n");

777 i‡(
gë_√xt_ch™√l_evít


778 (
td
, 
rd
->
cm_ch™√l
, 
RDMA_CM_EVENT_ESTABLISHED
) != 0) {

779 
	`log_îr
("fio: wait for RDMA_CM_EVENT_ESTABLISHED\n");

784 
rd
->
£nd_buf
.
mode
 = 
	`ht⁄l
‘d->
rdma_¥Ÿocﬁ
);

785 
rd
->
£nd_buf
.
ƒ
 = 
	`ht⁄l
(
td
->
o
.
iodïth
);

787 i‡(
	`ibv_po°_£nd
(
rd
->
qp
, &rd->
sq_wr
, &
bad_wr
) != 0) {

788 
	`log_îr
("fio: ibv_post_send fail");

792 
	`rdma_pﬁl_waô
(
td
, 
IBV_WC_SEND
);

795 
	`rdma_pﬁl_waô
(
td
, 
IBV_WC_RECV
);

805 
	`u¶ìp
(500000);

808 
	}
}

810 
	$fio_rdmaio_ac˚±
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

812 
rdmaio_d©a
 *
rd
 = 
td
->
io_›s
->
d©a
;

813 
rdma_c⁄n_∑øm
 
c⁄n_∑øm
;

814 
ibv_£nd_wr
 *
bad_wr
;

817 
	`mem£t
(&
c⁄n_∑øm
, 0, (conn_param));

818 
c⁄n_∑øm
.
ª•⁄dî_ªsour˚s
 = 1;

819 
c⁄n_∑øm
.
öôüt‹_dïth
 = 1;

821 i‡(
	`rdma_ac˚±
(
rd
->
chûd_cm_id
, &
c⁄n_∑øm
) != 0) {

822 
	`log_îr
("fio:Ñdma_accept\n");

826 i‡(
gë_√xt_ch™√l_evít


827 (
td
, 
rd
->
cm_ch™√l
, 
RDMA_CM_EVENT_ESTABLISHED
) != 0) {

828 
	`log_îr
("fio: wait for RDMA_CM_EVENT_ESTABLISHED\n");

833 
	`rdma_pﬁl_waô
(
td
, 
IBV_WC_RECV
);

835 i‡(
	`ibv_po°_£nd
(
rd
->
qp
, &rd->
sq_wr
, &
bad_wr
) != 0) {

836 
	`log_îr
("fio: ibv_post_send fail");

840 
	`rdma_pﬁl_waô
(
td
, 
IBV_WC_SEND
);

843 
	}
}

845 
	$fio_rdmaio_›í_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

847 i‡(
	`td_ªad
(
td
))

848  
	`fio_rdmaio_ac˚±
(
td
, 
f
);

850  
	`fio_rdmaio_c⁄√˘
(
td
, 
f
);

851 
	}
}

853 
	$fio_rdmaio_˛o£_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

855 
rdmaio_d©a
 *
rd
 = 
td
->
io_›s
->
d©a
;

856 
ibv_£nd_wr
 *
bad_wr
;

864 i‡((
rd
->
is_˛õ¡
 =1Ë&& (‘d->
rdma_¥Ÿocﬁ
 =
FIO_RDMA_MEM_WRITE
)

865 || (
rd
->
rdma_¥Ÿocﬁ
 ==

866 
FIO_RDMA_MEM_READ
))) {

867 i‡(
	`ibv_po°_£nd
(
rd
->
qp
, &rd->
sq_wr
, &
bad_wr
) != 0) {

868 
	`log_îr
("fio: ibv_post_send fail");

872 
	`d¥öt
(
FD_IO
, "fio: close information sent success\n");

873 
	`rdma_pﬁl_waô
(
td
, 
IBV_WC_SEND
);

876 i‡(
rd
->
is_˛õ¡
 == 1)

877 
	`rdma_disc⁄√˘
(
rd
->
cm_id
);

879 
	`rdma_disc⁄√˘
(
rd
->
chûd_cm_id
);

881 
	`rdma_disc⁄√˘
(
rd
->
cm_id
);

886 i‡(
	`gë_√xt_ch™√l_evít
(
td
, 
rd
->
cm_ch™√l
, 
RDMA_CM_EVENT_DISCONNECTED
) != 0) {

887 
	`log_îr
("fio: wait for RDMA_CM_EVENT_DISCONNECTED\n");

892 
	`ibv_de°roy_cq
(
rd
->
cq
);

893 
	`ibv_de°roy_qp
(
rd
->
qp
);

895 i‡(
rd
->
is_˛õ¡
 == 1)

896 
	`rdma_de°roy_id
(
rd
->
cm_id
);

898 
	`rdma_de°roy_id
(
rd
->
chûd_cm_id
);

899 
	`rdma_de°roy_id
(
rd
->
cm_id
);

902 
	`ibv_de°roy_comp_ch™√l
(
rd
->
ch™√l
);

903 
	`ibv_dóŒoc_pd
(
rd
->
pd
);

906 
	}
}

908 
	$fio_rdmaio_£tup_c⁄√˘
(
thªad_d©a
 *
td
, c⁄° *
ho°
,

909 
p‹t
)

911 
rdmaio_d©a
 *
rd
 = 
td
->
io_›s
->
d©a
;

912 
ibv_ªcv_wr
 *
bad_wr
;

913 
îr
;

915 
rd
->
addr
.
sö_Ámûy
 = 
AF_INET
;

916 
rd
->
addr
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

918 i‡(
	`öë_©⁄
(
ho°
, &
rd
->
addr
.
sö_addr
) != 1) {

919 
ho°ít
 *
hít
;

921 
hít
 = 
	`gëho°by«me
(
ho°
);

922 i‡(!
hít
) {

923 
	`td_vîr‹
(
td
, 
î∫o
, "gethostbyname");

927 
	`mem˝y
(&
rd
->
addr
.
sö_addr
, 
hít
->
h_addr
, 4);

931 
îr
 = 
	`rdma_ªsﬁve_addr
(
rd
->
cm_id
, 
NULL
, (
sockaddr
 *)&rd->
addr
, 2000);

932 i‡(
îr
 != 0) {

933 
	`log_îr
("fio:Ñdma_ªsﬁve_addr: %d\n", 
îr
);

937 
îr
 = 
	`gë_√xt_ch™√l_evít
(
td
, 
rd
->
cm_ch™√l
, 
RDMA_CM_EVENT_ADDR_RESOLVED
);

938 i‡(
îr
 != 0) {

939 
	`log_îr
("fio: gë_√xt_ch™√l_evít: %d\n", 
îr
);

944 
îr
 = 
	`rdma_ªsﬁve_rouã
(
rd
->
cm_id
, 2000);

945 i‡(
îr
 != 0) {

946 
	`log_îr
("fio:Ñdma_ªsﬁve_rouã: %d\n", 
îr
);

950 
îr
 = 
	`gë_√xt_ch™√l_evít
(
td
, 
rd
->
cm_ch™√l
, 
RDMA_CM_EVENT_ROUTE_RESOLVED
);

951 i‡(
îr
 != 0) {

952 
	`log_îr
("fio: gë_√xt_ch™√l_evít: %d\n", 
îr
);

957 i‡(
	`fio_rdmaio_£tup_qp
(
td
) != 0)

960 i‡(
	`fio_rdmaio_£tup_c⁄åﬁ_msg_buf„rs
(
td
) != 0)

964 
îr
 = 
	`ibv_po°_ªcv
(
rd
->
qp
, &rd->
rq_wr
, &
bad_wr
);

965 i‡(
îr
 != 0) {

966 
	`log_îr
("fio: ibv_po°_ªcv faû: %d\n", 
îr
);

971 
	}
}

973 
	$fio_rdmaio_£tup_li°í
(
thªad_d©a
 *
td
, 
p‹t
)

975 
rdmaio_d©a
 *
rd
 = 
td
->
io_›s
->
d©a
;

976 
ibv_ªcv_wr
 *
bad_wr
;

978 
rd
->
addr
.
sö_Ámûy
 = 
AF_INET
;

979 
rd
->
addr
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(
INADDR_ANY
);

980 
rd
->
addr
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

983 i‡(
	`rdma_böd_addr
(
rd
->
cm_id
, (
sockaddr
 *)&rd->
addr
) != 0) {

984 
	`log_îr
("fio:Ñdma_bind_addr fail\n");

988 i‡(
	`rdma_li°í
(
rd
->
cm_id
, 3) != 0) {

989 
	`log_îr
("fio:Ñdma_listen fail\n");

994 i‡(
gë_√xt_ch™√l_evít


995 (
td
, 
rd
->
cm_ch™√l
, 
RDMA_CM_EVENT_CONNECT_REQUEST
) != 0) {

996 
	`log_îr
("fio: wait for RDMA_CM_EVENT_CONNECT_REQUEST\n");

1000 i‡(
	`fio_rdmaio_£tup_qp
(
td
) != 0)

1003 i‡(
	`fio_rdmaio_£tup_c⁄åﬁ_msg_buf„rs
(
td
) != 0)

1007 i‡(
	`ibv_po°_ªcv
(
rd
->
qp
, &rd->
rq_wr
, &
bad_wr
) != 0) {

1008 
	`log_îr
("fio: ibv_post_recv fail\n");

1013 
	}
}

1015 
	$check_£t_æimôs
(
thªad_d©a
 *
td
)

1017 #ifde‡
CONFIG_RLIMIT_MEMLOCK


1018 
æimô
 
æ
;

1021 i‡(
	`gëæimô
(
RLIMIT_MEMLOCK
, &
æ
) != 0) {

1022 
	`log_îr
("fio: getrlimit fail: %d(%s)\n",

1023 
î∫o
, 
	`°ªº‹
(errno));

1028 i‡((
æ
.
æim_cur
 !
RLIM_INFINITY
)

1029 && (
æ
.
æim_cur
 < 
td
->
‹ig_buf„r_size
)) {

1030 
	`log_îr
("fio: so· RLIMIT_MEMLOCK is: %" 
PRId64
 "\n",

1031 
æ
.
æim_cur
);

1032 
	`log_îr
("fio:Åotal block size is: %zd\n",

1033 
td
->
‹ig_buf„r_size
);

1035 
æ
.
æim_cur
 =Ñl.
æim_max
;

1036 i‡(
	`£ålimô
(
RLIMIT_MEMLOCK
, &
æ
) != 0) {

1037 
	`log_îr
("fio: setrlimit fail: %d(%s)\n",

1038 
î∫o
, 
	`°ªº‹
(errno));

1039 
	`log_îr
("fio: you mayÅryÉnlarge MEMLOCK byÑoot\n");

1040 
	`log_îr
("# ulimit -l unlimited\n");

1047 
	}
}

1049 
	$fio_rdmaio_öô
(
thªad_d©a
 *
td
)

1051 
rdmaio_d©a
 *
rd
 = 
td
->
io_›s
->
d©a
;

1052 
max_bs
;

1053 
p‹t
;

1054 
ho°
[64], 
buf
[128];

1055 *
£p
, *
p‹ç
, *
modï
;

1056 
ªt
, 
i
;

1058 i‡(
	`td_rw
(
td
)) {

1059 
	`log_îr
("fio:Ñdma connections must beÑead OR write\n");

1062 i‡(
	`td_øndom
(
td
)) {

1063 
	`log_îr
("fio: RDMAÇetwork IO can't beÑandom\n");

1067 i‡(
	`check_£t_æimôs
(
td
))

1070 
	`°r˝y
(
buf
, 
td
->
o
.
fûíame
);

1072 
£p
 = 
	`°rchr
(
buf
, '/');

1073 i‡(!
£p
)

1074 
bad_ho°
;

1076 *
£p
 = '\0';

1077 
£p
++;

1078 
	`°r˝y
(
ho°
, 
buf
);

1079 i‡(!
	`°æí
(
ho°
))

1080 
bad_ho°
;

1082 
modï
 = 
NULL
;

1083 
p‹ç
 = 
£p
;

1084 
£p
 = 
	`°rchr
(
p‹ç
, '/');

1085 i‡(
£p
) {

1086 *
£p
 = '\0';

1087 
modï
 = 
£p
 + 1;

1090 
p‹t
 = 
	`°πﬁ
(
p‹ç
, 
NULL
, 10);

1091 i‡(!
p‹t
 ||Öort > 65535)

1092 
bad_ho°
;

1094 i‡(
modï
) {

1095 i‡(!
	`°∫cmp
("rdma_wrôe", 
modï
, 
	`°æí
(modep)) ||

1096 !
	`°∫cmp
("RDMA_WRITE", 
modï
, 
	`°æí
(modep)))

1097 
rd
->
rdma_¥Ÿocﬁ
 = 
FIO_RDMA_MEM_WRITE
;

1098 i‡(!
	`°∫cmp
("rdma_ªad", 
modï
, 
	`°æí
(modep)) ||

1099 !
	`°∫cmp
("RDMA_READ", 
modï
, 
	`°æí
(modep)))

1100 
rd
->
rdma_¥Ÿocﬁ
 = 
FIO_RDMA_MEM_READ
;

1101 i‡(!
	`°∫cmp
("£nd", 
modï
, 
	`°æí
(modep)) ||

1102 !
	`°∫cmp
("SEND", 
modï
, 
	`°æí
(modep)))

1103 
rd
->
rdma_¥Ÿocﬁ
 = 
FIO_RDMA_CHA_SEND
;

1105 
bad_ho°
;

1107 
rd
->
rdma_¥Ÿocﬁ
 = 
FIO_RDMA_MEM_WRITE
;

1109 
rd
->
cq_evít_num
 = 0;

1111 
rd
->
cm_ch™√l
 = 
	`rdma_¸óã_evít_ch™√l
();

1112 i‡(!
rd
->
cm_ch™√l
) {

1113 
	`log_îr
("fio:Ñdma_create_event_channel fail\n");

1117 
ªt
 = 
	`rdma_¸óã_id
(
rd
->
cm_ch™√l
, &rd->
cm_id
,Ñd, 
RDMA_PS_TCP
);

1118 i‡(
ªt
) {

1119 
	`log_îr
("fio:Ñdma_create_id fail\n");

1123 i‡((
rd
->
rdma_¥Ÿocﬁ
 =
FIO_RDMA_MEM_WRITE
) ||

1124 (
rd
->
rdma_¥Ÿocﬁ
 =
FIO_RDMA_MEM_READ
)) {

1125 
rd
->
rmt_us
 =

1126 
	`mÆloc
(
FIO_RDMA_MAX_IO_DEPTH
 * (
ªmŸe_u
));

1127 
	`mem£t
(
rd
->
rmt_us
, 0,

1128 
FIO_RDMA_MAX_IO_DEPTH
 * (
ªmŸe_u
));

1129 
rd
->
rmt_ƒ
 = 0;

1132 
rd
->
io_us_queued
 = 
	`mÆloc
(
td
->
o
.
iodïth
 * (
io_u
 *));

1133 
	`mem£t
(
rd
->
io_us_queued
, 0, 
td
->
o
.
iodïth
 * (
io_u
 *));

1134 
rd
->
io_u_queued_ƒ
 = 0;

1136 
rd
->
io_us_Êight
 = 
	`mÆloc
(
td
->
o
.
iodïth
 * (
io_u
 *));

1137 
	`mem£t
(
rd
->
io_us_Êight
, 0, 
td
->
o
.
iodïth
 * (
io_u
 *));

1138 
rd
->
io_u_Êight_ƒ
 = 0;

1140 
rd
->
io_us_com∂ëed
 = 
	`mÆloc
(
td
->
o
.
iodïth
 * (
io_u
 *));

1141 
	`mem£t
(
rd
->
io_us_com∂ëed
, 0, 
td
->
o
.
iodïth
 * (
io_u
 *));

1142 
rd
->
io_u_com∂ëed_ƒ
 = 0;

1144 i‡(
	`td_ªad
(
td
)) {

1145 
rd
->
is_˛õ¡
 = 0;

1147 
ªt
 = 
	`fio_rdmaio_£tup_li°í
(
td
, 
p‹t
);

1149 
rd
->
is_˛õ¡
 = 1;

1150 
ªt
 = 
	`fio_rdmaio_£tup_c⁄√˘
(
td
, 
ho°
, 
p‹t
);

1153 
max_bs
 = 
	`max
(
td
->
o
.max_bs[
DDIR_READ
],Åd->o.max_bs[
DDIR_WRITE
]);

1155 
i
 = 0; i < 
td
->
io_u_‰ìli°
.
ƒ
; i++) {

1156 
io_u
 *io_u = 
td
->
io_u_‰ìli°
.
io_us
[
i
];

1158 
io_u
->
ígöe_d©a
 = 
	`mÆloc
((
rdma_io_u_d©a
));

1159 
	`mem£t
(
io_u
->
ígöe_d©a
, 0, (
rdma_io_u_d©a
));

1160 ((
rdma_io_u_d©a
 *)
io_u
->
ígöe_d©a
)->
wr_id
 = 
i
;

1162 
io_u
->
mr
 = 
	`ibv_ªg_mr
(
rd
->
pd
, io_u->
buf
, 
max_bs
,

1163 
IBV_ACCESS_LOCAL_WRITE
 |

1164 
IBV_ACCESS_REMOTE_READ
 |

1165 
IBV_ACCESS_REMOTE_WRITE
);

1166 i‡(
io_u
->
mr
 =
NULL
) {

1167 
	`log_îr
("fio: ibv_reg_mr io_u failed\n");

1171 
rd
->
£nd_buf
.
rmt_us
[
i
].
buf
 =

1172 
	`ht⁄Œ
((
uöt64_t
Ë()
io_u
->
buf
);

1173 
rd
->
£nd_buf
.
rmt_us
[
i
].
rkey
 = 
	`ht⁄l
(
io_u
->
mr
->rkey);

1174 
rd
->
£nd_buf
.
rmt_us
[
i
].
size
 = 
	`ht⁄l
(
max_bs
);

1177 
	`log_öfo
("fio: SídÑkey %xádd∏%" 
PRIx64
 "Üí %dÅÿ˛õ¡\n", 
io_u
->
mr
->
rkey
, io_u->
buf
, 
max_bs
); */

1181 
rd
->
£nd_buf
.
ƒ
 = 
	`ht⁄l
(
i
);

1183  
ªt
;

1184 
bad_ho°
:

1185 
	`log_îr
("fio: badÑdm®ho°/p‹t/¥Ÿocﬁ: %s\n", 
td
->
o
.
fûíame
);

1187 
	}
}

1189 
	$fio_rdmaio_˛ónup
(
thªad_d©a
 *
td
)

1191 
rdmaio_d©a
 *
rd
 = 
td
->
io_›s
->
d©a
;

1193 i‡(
rd
)

1194 
	`‰ì
(
rd
);

1195 
	}
}

1197 
	$fio_rdmaio_£tup
(
thªad_d©a
 *
td
)

1199 
rdmaio_d©a
 *
rd
;

1201 i‡(!
td
->
io_›s
->
d©a
) {

1202 
rd
 = 
	`mÆloc
((*rd));

1204 
	`mem£t
(
rd
, 0, (*rd));

1205 
	`öô_ønd_£ed
(&
rd
->
ønd_°©e
, (Ë
GOLDEN_RATIO_PRIME
);

1206 
td
->
io_›s
->
d©a
 = 
rd
;

1210 
	}
}

1212 
i€ngöe_›s
 
	gi€ngöe_rw
 = {

1213 .
«me
 = "rdma",

1214 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

1215 .
	g£tup
 = 
fio_rdmaio_£tup
,

1216 .
	göô
 = 
fio_rdmaio_öô
,

1217 .
	g¥ï
 = 
fio_rdmaio_¥ï
,

1218 .
	gqueue
 = 
fio_rdmaio_queue
,

1219 .
	gcommô
 = 
fio_rdmaio_commô
,

1220 .
	ggëevíts
 = 
fio_rdmaio_gëevíts
,

1221 .
	gevít
 = 
fio_rdmaio_evít
,

1222 .
	g˛ónup
 = 
fio_rdmaio_˛ónup
,

1223 .
	g›í_fûe
 = 
fio_rdmaio_›í_fûe
,

1224 .
	g˛o£_fûe
 = 
fio_rdmaio_˛o£_fûe
,

1225 .
	gÊags
 = 
FIO_DISKLESSIO
 | 
FIO_UNIDIR
 | 
FIO_PIPEIO
,

1228 
fio_öô
 
	$fio_rdmaio_ªgi°î
()

1230 
	`ªgi°î_i€ngöe
(&
i€ngöe_rw
);

1231 
	}
}

1233 
fio_exô
 
	$fio_rdmaio_uƒegi°î
()

1235 
	`uƒegi°î_i€ngöe
(&
i€ngöe_rw
);

1236 
	}
}

	@/home/terekhov/tmp/fio/fio/engines/sg.c

7 
	~<°dio.h
>

8 
	~<°dlib.h
>

9 
	~<uni°d.h
>

10 
	~<î∫o.h
>

11 
	~<as£π.h
>

12 
	~<sys/pﬁl.h
>

14 
	~"../fio.h
"

16 #ifde‡
FIO_HAVE_SGIO


18 
	ssgio_cmd
 {

19 
	mcdb
[10];

20 
	mƒ
;

23 
	ssgio_d©a
 {

24 
sgio_cmd
 *
	mcmds
;

25 
io_u
 **
	mevíts
;

26 
pﬁlfd
 *
	mpfds
;

27 *
	mfd_Êags
;

28 *
	msgbuf
;

29 
	mbs
;

30 
	mty≥_checked
;

33 
	$sgio_hdr_öô
(
sgio_d©a
 *
sd
, 
sg_io_hdr
 *
hdr
,

34 
io_u
 *io_u, 
fs
)

36 
sgio_cmd
 *
sc
 = &
sd
->
cmds
[
io_u
->
ödex
];

38 
	`mem£t
(
hdr
, 0, (*hdr));

39 
	`mem£t
(
sc
->
cdb
, 0, (sc->cdb));

41 
hdr
->
öãrÁ˚_id
 = 'S';

42 
hdr
->
cmdp
 = 
sc
->
cdb
;

43 
hdr
->
cmd_Àn
 = (
sc
->
cdb
);

44 
hdr
->
∑ck_id
 = 
io_u
->
ödex
;

45 
hdr
->
u§_±r
 = 
io_u
;

47 i‡(
fs
) {

48 
hdr
->
dx„Ω
 = 
io_u
->
x„r_buf
;

49 
hdr
->
dx„r_Àn
 = 
io_u
->
x„r_buÊí
;

51 
	}
}

53 
	$pﬁlö_evíts
(
pﬁlfd
 *
pfds
, 
fds
)

55 
i
;

57 
i
 = 0; i < 
fds
; i++)

58 i‡(
pfds
[
i
].
ªvíts
 & 
POLLIN
)

62 
	}
}

64 
	$fio_sgio_gëevíts
(
thªad_d©a
 *
td
, 
mö
,

65 
max
, 
time•ec
 
fio_unu£d
 *
t
)

67 
sgio_d©a
 *
sd
 = 
td
->
io_›s
->
d©a
;

68 
À·
 = 
max
, 
ªt
, 
r
 = 0;

69 *
buf
 = 
sd
->
sgbuf
;

70 
i
, 
evíts
;

71 
fio_fûe
 *
f
;

76 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

80 i‡(!
mö
)

81 
sd
->
fd_Êags
[
i
] = 
	`fio_£t_fd_n⁄blockög
(
f
->
fd
, "sg");

83 
sd
->
fd_Êags
[
i
] = -1;

85 
sd
->
pfds
[
i
].
fd
 = 
f
->fd;

86 
sd
->
pfds
[
i
].
evíts
 = 
POLLIN
;

89 
À·
) {

90 *
p
;

93 i‡(!
mö
)

96 
ªt
 = 
	`pﬁl
(
sd
->
pfds
, 
td
->
o
.
ƒ_fûes
, -1);

97 i‡(
ªt
 < 0) {

98 i‡(!
r
)

99 
r
 = -
î∫o
;

100 
	`td_vîr‹
(
td
, 
î∫o
, "poll");

102 } i‡(!
ªt
)

105 i‡(
	`pﬁlö_evíts
(
sd
->
pfds
, 
td
->
o
.
ƒ_fûes
))

109 i‡(
r
 < 0)

112 
ª_ªad
:

113 
p
 = 
buf
;

114 
evíts
 = 0;

115 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

116 
ªt
 = 
	`ªad
(
f
->
fd
, 
p
, 
À·
 * (
sg_io_hdr
));

117 i‡(
ªt
 < 0) {

118 i‡(
î∫o
 =
EAGAIN
)

120 
r
 = -
î∫o
;

121 
	`td_vîr‹
(
td
, 
î∫o
, "read");

123 } i‡(
ªt
) {

124 
p
 +
ªt
;

125 
evíts
 +
ªt
 / (
sg_io_hdr
);

129 i‡(
r
 < 0)

131 i‡(!
evíts
) {

132 
	`u¶ìp
(1000);

133 
ª_ªad
;

136 
À·
 -
evíts
;

137 
r
 +
evíts
;

139 
i
 = 0; i < 
evíts
; i++) {

140 
sg_io_hdr
 *
hdr
 = (sg_io_hd∏*Ë
buf
 + 
i
;

142 
sd
->
evíts
[
i
] = 
hdr
->
u§_±r
;

146 i‡(!
mö
) {

147 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

148 i‡(
sd
->
fd_Êags
[
i
] == -1)

151 i‡(
	`f˙é
(
f
->
fd
, 
F_SETFL
, 
sd
->
fd_Êags
[
i
]) < 0)

152 
	`log_îr
("fio: sg faûedÅÿª°‹êf˙é fœgs: %s\n", 
	`°ªº‹
(
î∫o
));

156  
r
;

157 
	}
}

159 
	$fio_sgio_io˘l_doio
(
thªad_d©a
 *
td
,

160 
fio_fûe
 *
f
, 
io_u
 *io_u)

162 
sgio_d©a
 *
sd
 = 
td
->
io_›s
->
d©a
;

163 
sg_io_hdr
 *
hdr
 = &
io_u
->hdr;

164 
ªt
;

166 
sd
->
evíts
[0] = 
io_u
;

168 
ªt
 = 
	`io˘l
(
f
->
fd
, 
SG_IO
, 
hdr
);

169 i‡(
ªt
 < 0)

170  
ªt
;

172  
FIO_Q_COMPLETED
;

173 
	}
}

175 
	$fio_sgio_rw_doio
(
fio_fûe
 *
f
, 
io_u
 *io_u, 
do_sync
)

177 
sg_io_hdr
 *
hdr
 = &
io_u
->hdr;

178 
ªt
;

180 
ªt
 = 
	`wrôe
(
f
->
fd
, 
hdr
, (*hdr));

181 i‡(
ªt
 < 0)

182  
ªt
;

184 i‡(
do_sync
) {

185 
ªt
 = 
	`ªad
(
f
->
fd
, 
hdr
, (*hdr));

186 i‡(
ªt
 < 0)

187  
ªt
;

188  
FIO_Q_COMPLETED
;

191  
FIO_Q_QUEUED
;

192 
	}
}

194 
	$fio_sgio_doio
(
thªad_d©a
 *
td
, 
io_u
 *io_u, 
do_sync
)

196 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

198 i‡(
f
->
fûëy≥
 =
FIO_TYPE_BD
)

199  
	`fio_sgio_io˘l_doio
(
td
, 
f
, 
io_u
);

201  
	`fio_sgio_rw_doio
(
f
, 
io_u
, 
do_sync
);

202 
	}
}

204 
	$fio_sgio_¥ï
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

206 
sg_io_hdr
 *
hdr
 = &
io_u
->hdr;

207 
sgio_d©a
 *
sd
 = 
td
->
io_›s
->
d©a
;

208 
ƒ_blocks
, 
lba
;

210 i‡(
io_u
->
x„r_buÊí
 & (
sd
->
bs
 - 1)) {

211 
	`log_îr
("read/writeÇot sectoráligned\n");

212  
EINVAL
;

215 i‡(
io_u
->
ddú
 =
DDIR_READ
) {

216 
	`sgio_hdr_öô
(
sd
, 
hdr
, 
io_u
, 1);

218 
hdr
->
dx„r_dúe˘i⁄
 = 
SG_DXFER_FROM_DEV
;

219 
hdr
->
cmdp
[0] = 0x28;

220 } i‡(
io_u
->
ddú
 =
DDIR_WRITE
) {

221 
	`sgio_hdr_öô
(
sd
, 
hdr
, 
io_u
, 1);

223 
hdr
->
dx„r_dúe˘i⁄
 = 
SG_DXFER_TO_DEV
;

224 
hdr
->
cmdp
[0] = 0x2a;

226 
	`sgio_hdr_öô
(
sd
, 
hdr
, 
io_u
, 0);

228 
hdr
->
dx„r_dúe˘i⁄
 = 
SG_DXFER_NONE
;

229 
hdr
->
cmdp
[0] = 0x35;

232 i‡(
hdr
->
dx„r_dúe˘i⁄
 !
SG_DXFER_NONE
) {

233 
ƒ_blocks
 = 
io_u
->
x„r_buÊí
 / 
sd
->
bs
;

234 
lba
 = 
io_u
->
off£t
 / 
sd
->
bs
;

235 
hdr
->
cmdp
[2] = (Ë((
lba
 >> 24) & 0xff);

236 
hdr
->
cmdp
[3] = (Ë((
lba
 >> 16) & 0xff);

237 
hdr
->
cmdp
[4] = (Ë((
lba
 >> 8) & 0xff);

238 
hdr
->
cmdp
[5] = (Ë(
lba
 & 0xff);

239 
hdr
->
cmdp
[7] = (Ë((
ƒ_blocks
 >> 8) & 0xff);

240 
hdr
->
cmdp
[8] = (Ë(
ƒ_blocks
 & 0xff);

244 
	}
}

246 
	$fio_sgio_queue
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

248 
sg_io_hdr
 *
hdr
 = &
io_u
->hdr;

249 
ªt
, 
do_sync
 = 0;

251 
	`fio_ro_check
(
td
, 
io_u
);

253 i‡(
td
->
o
.
sync_io
 ||Åd->o.
odúe˘
 || 
	`ddú_sync
(
io_u
->
ddú
))

254 
do_sync
 = 1;

256 
ªt
 = 
	`fio_sgio_doio
(
td
, 
io_u
, 
do_sync
);

258 i‡(
ªt
 < 0)

259 
io_u
->
îr‹
 = 
î∫o
;

260 i‡(
hdr
->
°©us
) {

261 
io_u
->
ªsid
 = 
hdr
->resid;

262 
io_u
->
îr‹
 = 
EIO
;

265 i‡(
io_u
->
îr‹
) {

266 
	`td_vîr‹
(
td
, 
io_u
->
îr‹
, "xfer");

267  
FIO_Q_COMPLETED
;

270  
ªt
;

271 
	}
}

273 
io_u
 *
	$fio_sgio_evít
(
thªad_d©a
 *
td
, 
evít
)

275 
sgio_d©a
 *
sd
 = 
td
->
io_›s
->
d©a
;

277  
sd
->
evíts
[
evít
];

278 
	}
}

280 
	$fio_sgio_gë_bs
(
thªad_d©a
 *
td
, *
bs
)

282 
sgio_d©a
 *
sd
 = 
td
->
io_›s
->
d©a
;

283 
io_u
 io_u;

284 
sg_io_hdr
 *
hdr
;

285 
buf
[8];

286 
ªt
;

288 
	`mem£t
(&
io_u
, 0, (io_u));

289 
io_u
.
fûe
 = 
td
->
fûes
[0];

291 
hdr
 = &
io_u
.hdr;

292 
	`sgio_hdr_öô
(
sd
, 
hdr
, &
io_u
, 0);

293 
	`mem£t
(
buf
, 0, (buf));

295 
hdr
->
cmdp
[0] = 0x25;

296 
hdr
->
dx„r_dúe˘i⁄
 = 
SG_DXFER_FROM_DEV
;

297 
hdr
->
dx„Ω
 = 
buf
;

298 
hdr
->
dx„r_Àn
 = (
buf
);

300 
ªt
 = 
	`fio_sgio_doio
(
td
, &
io_u
, 1);

301 i‡(
ªt
)

302  
ªt
;

304 *
bs
 = (
buf
[4] << 24) | (buf[5] << 16) | (buf[6] << 8) | buf[7];

306 
	}
}

308 
	$fio_sgio_˛ónup
(
thªad_d©a
 *
td
)

310 
sgio_d©a
 *
sd
 = 
td
->
io_›s
->
d©a
;

312 i‡(
sd
) {

313 
	`‰ì
(
sd
->
evíts
);

314 
	`‰ì
(
sd
->
cmds
);

315 
	`‰ì
(
sd
->
fd_Êags
);

316 
	`‰ì
(
sd
->
pfds
);

317 
	`‰ì
(
sd
->
sgbuf
);

318 
	`‰ì
(
sd
);

320 
	}
}

322 
	$fio_sgio_öô
(
thªad_d©a
 *
td
)

324 
sgio_d©a
 *
sd
;

326 
sd
 = 
	`mÆloc
((*sd));

327 
	`mem£t
(
sd
, 0, (*sd));

328 
sd
->
cmds
 = 
	`mÆloc
(
td
->
o
.
iodïth
 * (
sgio_cmd
));

329 
	`mem£t
(
sd
->
cmds
, 0, 
td
->
o
.
iodïth
 * (
sgio_cmd
));

330 
sd
->
evíts
 = 
	`mÆloc
(
td
->
o
.
iodïth
 * (
io_u
 *));

331 
	`mem£t
(
sd
->
evíts
, 0, 
td
->
o
.
iodïth
 * (
io_u
 *));

332 
sd
->
pfds
 = 
	`mÆloc
((
pﬁlfd
Ë* 
td
->
o
.
ƒ_fûes
);

333 
	`mem£t
(
sd
->
pfds
, 0, (
pﬁlfd
Ë* 
td
->
o
.
ƒ_fûes
);

334 
sd
->
fd_Êags
 = 
	`mÆloc
((Ë* 
td
->
o
.
ƒ_fûes
);

335 
	`mem£t
(
sd
->
fd_Êags
, 0, (Ë* 
td
->
o
.
ƒ_fûes
);

336 
sd
->
sgbuf
 = 
	`mÆloc
((
sg_io_hdr
Ë* 
td
->
o
.
iodïth
);

337 
	`mem£t
(
sd
->
sgbuf
, 0, (
sg_io_hdr
Ë* 
td
->
o
.
iodïth
);

339 
td
->
io_›s
->
d©a
 = 
sd
;

344 
td
->
o
.
ovîride_sync
 = 1;

346 
	}
}

348 
	$fio_sgio_ty≥_check
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

350 
sgio_d©a
 *
sd
 = 
td
->
io_›s
->
d©a
;

351 
bs
;

353 i‡(
f
->
fûëy≥
 =
FIO_TYPE_BD
) {

354 i‡(
	`io˘l
(
f
->
fd
, 
BLKSSZGET
, &
bs
) < 0) {

355 
	`td_vîr‹
(
td
, 
î∫o
, "ioctl");

358 } i‡(
f
->
fûëy≥
 =
FIO_TYPE_CHAR
) {

359 
vîsi⁄
, 
ªt
;

361 i‡(
	`io˘l
(
f
->
fd
, 
SG_GET_VERSION_NUM
, &
vîsi⁄
) < 0) {

362 
	`td_vîr‹
(
td
, 
î∫o
, "ioctl");

366 
ªt
 = 
	`fio_sgio_gë_bs
(
td
, &
bs
);

367 i‡(
ªt
)

370 
	`log_îr
("ioengine sg only works on block devices\n");

374 
sd
->
bs
 = bs;

376 i‡(
f
->
fûëy≥
 =
FIO_TYPE_BD
) {

377 
td
->
io_›s
->
gëevíts
 = 
NULL
;

378 
td
->
io_›s
->
evít
 = 
NULL
;

382 
	}
}

384 
	$fio_sgio_›í
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

386 
sgio_d©a
 *
sd
 = 
td
->
io_›s
->
d©a
;

387 
ªt
;

389 
ªt
 = 
	`gíîic_›í_fûe
(
td
, 
f
);

390 i‡(
ªt
)

391  
ªt
;

393 i‡(
sd
 && !sd->
ty≥_checked
 && 
	`fio_sgio_ty≥_check
(
td
, 
f
)) {

394 
ªt
 = 
	`gíîic_˛o£_fûe
(
td
, 
f
);

399 
	}
}

401 
i€ngöe_›s
 
	gi€ngöe
 = {

402 .
«me
 = "sg",

403 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

404 .
	göô
 = 
fio_sgio_öô
,

405 .
	g¥ï
 = 
fio_sgio_¥ï
,

406 .
	gqueue
 = 
fio_sgio_queue
,

407 .
	ggëevíts
 = 
fio_sgio_gëevíts
,

408 .
	gevít
 = 
fio_sgio_evít
,

409 .
	g˛ónup
 = 
fio_sgio_˛ónup
,

410 .
	g›í_fûe
 = 
fio_sgio_›í
,

411 .
	g˛o£_fûe
 = 
gíîic_˛o£_fûe
,

412 .
	ggë_fûe_size
 = 
gíîic_gë_fûe_size
,

413 .
	gÊags
 = 
FIO_SYNCIO
 | 
FIO_RAWIO
,

423 
	$fio_sgio_öô
(
thªad_d©a
 
fio_unu£d
 *
td
)

425 
	`log_îr
("fio: ioengine sgÇotávailable\n");

427 
	}
}

429 
i€ngöe_›s
 
	gi€ngöe
 = {

430 .
«me
 = "sg",

431 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

432 .
	göô
 = 
fio_sgio_öô
,

437 
fio_öô
 
	$fio_sgio_ªgi°î
()

439 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

440 
	}
}

442 
fio_exô
 
	$fio_sgio_uƒegi°î
()

444 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

445 
	}
}

	@/home/terekhov/tmp/fio/fio/engines/skeleton_external.c

9 
	~<°dio.h
>

10 
	~<°dlib.h
>

11 
	~<uni°d.h
>

12 
	~<î∫o.h
>

13 
	~<as£π.h
>

15 
	~"../fio.h
"

29 
io_u
 *
	$fio_skñë⁄_evít
(
thªad_d©a
 *
td
, 
evít
)

31  
NULL
;

32 
	}
}

40 
	$fio_skñë⁄_gëevíts
(
thªad_d©a
 *
td
, 
mö
,

41 
max
, 
time•ec
 *
t
)

44 
	}
}

50 
	$fio_skñë⁄_ˇn˚l
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

53 
	}
}

65 
	$fio_skñë⁄_queue
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

70 
	`fio_ro_check
(
td
, 
io_u
);

78  
FIO_Q_COMPLETED
;

79 
	}
}

86 
	$fio_skñë⁄_¥ï
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

89 
	}
}

96 
	$fio_skñë⁄_öô
(
thªad_d©a
 *
td
)

99 
	}
}

106 
	$fio_skñë⁄_˛ónup
(
thªad_d©a
 *
td
)

108 
	}
}

114 
	$fio_skñë⁄_›í
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

116  
	`gíîic_fûe_›í
(
td
, 
f
);

117 
	}
}

122 
	$fio_skñë⁄_˛o£
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

124 
	`gíîic_fûe_˛o£
(
td
, 
f
);

125 
	}
}

131 
i€ngöe_›s
 
	gi€ngöe
 = {

132 .
«me
 = "engine_name",

133 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

134 .
	göô
 = 
fio_skñë⁄_öô
,

135 .
	g¥ï
 = 
fio_skñë⁄_¥ï
,

136 .
	gqueue
 = 
fio_skñë⁄_queue
,

137 .
	gˇn˚l
 = 
fio_skñë⁄_ˇn˚l
,

138 .
	ggëevíts
 = 
fio_skñë⁄_gëevíts
,

139 .
	gevít
 = 
fio_skñë⁄_evít
,

140 .
	g˛ónup
 = 
fio_skñë⁄_˛ónup
,

141 .
	g›í_fûe
 = 
fio_skñë⁄_›í
,

142 .
	g˛o£_fûe
 = 
fio_skñë⁄_˛o£
,

	@/home/terekhov/tmp/fio/fio/engines/solarisaio.c

5 
	~<°dio.h
>

6 
	~<°dlib.h
>

7 
	~<uni°d.h
>

8 
	~<sig«l.h
>

9 
	~<î∫o.h
>

11 
	~"../fio.h
"

13 
	~<sys/asynch.h
>

15 
	ssﬁ¨ißio_d©a
 {

16 
io_u
 **
	maio_evíts
;

17 
	maio_≥ndög
;

18 
	mƒ
;

19 
	mmax_dïth
;

22 
	$fio_sﬁ¨ißio_ˇn˚l
(
thªad_d©a
 
fio_unu£d
 *
td
,

23 
io_u
 *io_u)

25  
	`aioˇn˚l
(&
io_u
->
ªsu…p
);

26 
	}
}

28 
	$fio_sﬁ¨ißio_¥ï
(
thªad_d©a
 
fio_unu£d
 *
td
,

29 
io_u
 *io_u)

31 
sﬁ¨ißio_d©a
 *
sd
 = 
td
->
io_›s
->
d©a
;

33 
io_u
->
ªsu…p
.
aio_ªtu∫
 = 
AIO_INPROGRESS
;

34 
io_u
->
ígöe_d©a
 = 
sd
;

36 
	}
}

38 
	$waô_f‹_evít
(
timevÆ
 *
tv
)

40 
sﬁ¨ißio_d©a
 *
sd
;

41 
io_u
 *io_u;

42 
aio_ªsu…_t
 *
ªs
;

44 
ªs
 = 
	`aiowaô
(
tv
);

45 i‡(
ªs
 =(
aio_ªsu…_t
 *) -1) {

46 
îr
 = 
î∫o
;

48 i‡(
îr
 !
EINVAL
) {

49 
	`log_îr
("fio: sﬁ¨ißiÿgŸ %d i¿aiowaô\n", 
îr
);

50 
	`exô
(
îr
);

53 } i‡(!
ªs
)

56 
io_u
 = 
	`c⁄èöî_of
(
ªs
, io_u, 
ªsu…p
);

57 
sd
 = 
io_u
->
ígöe_d©a
;

59 i‡(
io_u
->
ªsu…p
.
aio_ªtu∫
 >= 0) {

60 
io_u
->
ªsid
 = io_u->
x„r_buÊí
 - io_u->
ªsu…p
.
aio_ªtu∫
;

61 
io_u
->
îr‹
 = 0;

63 
io_u
->
îr‹
 = io_u->
ªsu…p
.
aio_î∫o
;

69 
sd
->
aio_evíts
[sd->
aio_≥ndög
] = 
io_u
;

70 
	`wrôe_b¨rõr
();

71 
sd
->
aio_≥ndög
++;

72 
sd
->
ƒ
--;

73 
	}
}

75 
	$fio_sﬁ¨ißio_gëevíts
(
thªad_d©a
 *
td
, 
mö
,

76 
max
, 
time•ec
 *
t
)

78 
sﬁ¨ißio_d©a
 *
sd
 = 
td
->
io_›s
->
d©a
;

79 
timevÆ
 
tv
;

80 
ªt
;

82 i‡(!
mö
 || !
t
) {

83 
tv
.
tv_£c
 = 0;

84 
tv
.
tv_u£c
 = 0;

86 
tv
.
tv_£c
 = 
t
->tv_sec;

87 
tv
.
tv_u£c
 = 
t
->
tv_n£c
 / 1000;

90 
sd
->
aio_≥ndög
 < 
mö
)

91 
	`waô_f‹_evít
(&
tv
);

96 
ªt
 = 
sd
->
aio_≥ndög
;

97 
sd
->
aio_≥ndög
 -
ªt
;

98  
ªt
;

99 
	}
}

101 
io_u
 *
	$fio_sﬁ¨ißio_evít
(
thªad_d©a
 *
td
, 
evít
)

103 
sﬁ¨ißio_d©a
 *
sd
 = 
td
->
io_›s
->
d©a
;

105  
sd
->
aio_evíts
[
evít
];

106 
	}
}

108 
	$fio_sﬁ¨ißio_queue
(
thªad_d©a
 
fio_unu£d
 *
td
,

109 
io_u
 *io_u)

111 
sﬁ¨ißio_d©a
 *
sd
 = 
td
->
io_›s
->
d©a
;

112 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

113 
off_t
 
off
;

114 
ªt
;

116 
	`fio_ro_check
(
td
, 
io_u
);

118 i‡(
io_u
->
ddú
 =
DDIR_SYNC
) {

119 i‡(
sd
->
ƒ
)

120  
FIO_Q_BUSY
;

121 i‡(
	`fsync
(
f
->
fd
) < 0)

122 
io_u
->
îr‹
 = 
î∫o
;

124  
FIO_Q_COMPLETED
;

127 i‡(
io_u
->
ddú
 =
DDIR_DATASYNC
) {

128 i‡(
sd
->
ƒ
)

129  
FIO_Q_BUSY
;

130 i‡(
	`fd©async
(
f
->
fd
) < 0)

131 
io_u
->
îr‹
 = 
î∫o
;

133  
FIO_Q_COMPLETED
;

136 i‡(
sd
->
ƒ
 =sd->
max_dïth
)

137  
FIO_Q_BUSY
;

139 
off
 = 
io_u
->
off£t
;

140 i‡(
io_u
->
ddú
 =
DDIR_READ
)

141 
ªt
 = 
	`ai‹ód
(
f
->
fd
, 
io_u
->
x„r_buf
, io_u->
x„r_buÊí
, 
off
,

142 
SEEK_SET
, &
io_u
->
ªsu…p
);

144 
ªt
 = 
	`aiowrôe
(
f
->
fd
, 
io_u
->
x„r_buf
, io_u->
x„r_buÊí
, 
off
,

145 
SEEK_SET
, &
io_u
->
ªsu…p
);

146 i‡(
ªt
) {

147 
io_u
->
îr‹
 = 
î∫o
;

148 
	`td_vîr‹
(
td
, 
io_u
->
îr‹
, "xfer");

149  
FIO_Q_COMPLETED
;

152 
sd
->
ƒ
++;

153  
FIO_Q_QUEUED
;

154 
	}
}

156 
	$fio_sﬁ¨ißio_˛ónup
(
thªad_d©a
 *
td
)

158 
sﬁ¨ißio_d©a
 *
sd
 = 
td
->
io_›s
->
d©a
;

160 i‡(
sd
) {

161 
	`‰ì
(
sd
->
aio_evíts
);

162 
	`‰ì
(
sd
);

164 
	}
}

169 #ifde‡
USE_SIGNAL_COMPLETIONS


170 
	$fio_sﬁ¨ißio_sigio
(
sig
)

172 
	`waô_f‹_evít
(
NULL
);

173 
	}
}

175 
	$fio_sﬁ¨ißio_öô_sigio
()

177 
siga˘i⁄
 
a˘
;

179 
	`mem£t
(&
a˘
, 0, (act));

180 
a˘
.
ß_h™dÀr
 = 
fio_sﬁ¨ißio_sigio
;

181 
a˘
.
ß_Êags
 = 
SA_RESTART
;

182 
	`siga˘i⁄
(
SIGIO
, &
a˘
, 
NULL
);

183 
	}
}

186 
	$fio_sﬁ¨ißio_öô
(
thªad_d©a
 *
td
)

188 
sﬁ¨ißio_d©a
 *
sd
 = 
	`mÆloc
((*sd));

189 
max_dïth
;

191 
max_dïth
 = 
td
->
o
.
iodïth
;

192 i‡(
max_dïth
 > 
MAXASYNCHIO
) {

193 
max_dïth
 = 
MAXASYNCHIO
;

194 
	`log_öfo
("fio:Üower depthÅo %d dueÅo OS constraints\n",

195 
max_dïth
);

198 
	`mem£t
(
sd
, 0, (*sd));

199 
sd
->
aio_evíts
 = 
	`mÆloc
(
max_dïth
 * (
io_u
 *));

200 
	`mem£t
(
sd
->
aio_evíts
, 0, 
max_dïth
 * (
io_u
 *));

201 
sd
->
max_dïth
 = max_depth;

203 #ifde‡
USE_SIGNAL_COMPLETIONS


204 
	`fio_sﬁ¨ißio_öô_sigio
();

207 
td
->
io_›s
->
d©a
 = 
sd
;

209 
	}
}

211 
i€ngöe_›s
 
	gi€ngöe
 = {

212 .
«me
 = "solarisaio",

213 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

214 .
	göô
 = 
fio_sﬁ¨ißio_öô
,

215 .
	g¥ï
 = 
fio_sﬁ¨ißio_¥ï
,

216 .
	gqueue
 = 
fio_sﬁ¨ißio_queue
,

217 .
	gˇn˚l
 = 
fio_sﬁ¨ißio_ˇn˚l
,

218 .
	ggëevíts
 = 
fio_sﬁ¨ißio_gëevíts
,

219 .
	gevít
 = 
fio_sﬁ¨ißio_evít
,

220 .
	g˛ónup
 = 
fio_sﬁ¨ißio_˛ónup
,

221 .
	g›í_fûe
 = 
gíîic_›í_fûe
,

222 .
	g˛o£_fûe
 = 
gíîic_˛o£_fûe
,

223 .
	ggë_fûe_size
 = 
gíîic_gë_fûe_size
,

226 
fio_öô
 
	$fio_sﬁ¨ißio_ªgi°î
()

228 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

229 
	}
}

231 
fio_exô
 
	$fio_sﬁ¨ißio_uƒegi°î
()

233 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

234 
	}
}

	@/home/terekhov/tmp/fio/fio/engines/splice.c

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<uni°d.h
>

11 
	~<î∫o.h
>

12 
	~<as£π.h
>

13 
	~<sys/pﬁl.h
>

14 
	~<sys/mm™.h
>

16 
	~"../fio.h
"

18 
	s•li˚io_d©a
 {

19 
	mpùe
[2];

20 
	mvm•li˚_to_u£r
;

21 
	mvm•li˚_to_u£r_m≠
;

29 
	$fio_•li˚_ªad_ﬁd
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

31 
•li˚io_d©a
 *
sd
 = 
td
->
io_›s
->
d©a
;

32 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

33 
ªt
, 
ªt2
, 
buÊí
;

34 
off_t
 
off£t
;

35 *
p
;

37 
off£t
 = 
io_u
->offset;

38 
buÊí
 = 
io_u
->
x„r_buÊí
;

39 
p
 = 
io_u
->
x„r_buf
;

40 
buÊí
) {

41 
this_Àn
 = 
buÊí
;

43 i‡(
this_Àn
 > 
SPLICE_DEF_SIZE
)

44 
this_Àn
 = 
SPLICE_DEF_SIZE
;

46 
ªt
 = 
	`•li˚
(
f
->
fd
, &
off£t
, 
sd
->
pùe
[1], 
NULL
, 
this_Àn
, 
SPLICE_F_MORE
);

47 i‡(
ªt
 < 0) {

48 i‡(
î∫o
 =
ENODATA
 ||Éºnÿ=
EAGAIN
)

51  -
î∫o
;

54 
buÊí
 -
ªt
;

56 
ªt
) {

57 
ªt2
 = 
	`ªad
(
sd
->
pùe
[0], 
p
, 
ªt
);

58 i‡(
ªt2
 < 0)

59  -
î∫o
;

61 
ªt
 -
ªt2
;

62 
p
 +
ªt2
;

66  
io_u
->
x„r_buÊí
;

67 
	}
}

73 
	$fio_•li˚_ªad
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

75 
•li˚io_d©a
 *
sd
 = 
td
->
io_›s
->
d©a
;

76 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

77 
iovec
 
iov
;

78 
ªt
 , 
buÊí
, 
mm≠_Àn
;

79 
off_t
 
off£t
;

80 *
p
, *
m≠
;

82 
ªt
 = 0;

83 
off£t
 = 
io_u
->offset;

84 
mm≠_Àn
 = 
buÊí
 = 
io_u
->
x„r_buÊí
;

86 i‡(
sd
->
vm•li˚_to_u£r_m≠
) {

87 
m≠
 = 
	`mm≠
(
io_u
->
x„r_buf
, 
buÊí
, 
PROT_READ
, 
MAP_PRIVATE
|
OS_MAP_ANON
, 0, 0);

88 i‡(
m≠
 =
MAP_FAILED
) {

89 
	`td_vîr‹
(
td
, 
î∫o
, "mmap io_u");

93 
p
 = 
m≠
;

95 
m≠
 = 
NULL
;

96 
p
 = 
io_u
->
x„r_buf
;

99 
buÊí
) {

100 
this_Àn
 = 
buÊí
;

101 
Êags
 = 0;

103 i‡(
this_Àn
 > 
SPLICE_DEF_SIZE
) {

104 
this_Àn
 = 
SPLICE_DEF_SIZE
;

105 
Êags
 = 
SPLICE_F_MORE
;

108 
ªt
 = 
	`•li˚
(
f
->
fd
, &
off£t
, 
sd
->
pùe
[1], 
NULL
, 
this_Àn
,
Êags
);

109 i‡(
ªt
 < 0) {

110 i‡(
î∫o
 =
ENODATA
 ||Éºnÿ=
EAGAIN
)

113 
	`td_vîr‹
(
td
, 
î∫o
, "splice-from-fd");

117 
buÊí
 -
ªt
;

118 
iov
.
iov_ba£
 = 
p
;

119 
iov
.
iov_Àn
 = 
ªt
;

121 
iov
.
iov_Àn
) {

122 
ªt
 = 
	`vm•li˚
(
sd
->
pùe
[0], &
iov
, 1, 
SPLICE_F_MOVE
);

123 i‡(
ªt
 < 0) {

124 i‡(
î∫o
 =
EFAULT
 &&

125 
sd
->
vm•li˚_to_u£r_m≠
) {

126 
sd
->
vm•li˚_to_u£r_m≠
 = 0;

127 
	`munm≠
(
m≠
, 
mm≠_Àn
);

128 
m≠
 = 
NULL
;

129 
p
 = 
io_u
->
x„r_buf
;

130 
iov
.
iov_ba£
 = 
p
;

133 i‡(
î∫o
 =
EBADF
) {

134 
ªt
 = -
EBADF
;

137 
	`td_vîr‹
(
td
, 
î∫o
, "vmsplice");

139 } i‡(!
ªt
) {

140 
	`td_vîr‹
(
td
, 
ENODATA
, "vmsplice");

141 
ªt
 = -1;

145 
iov
.
iov_Àn
 -
ªt
;

146 
iov
.
iov_ba£
 +
ªt
;

147 
p
 +
ªt
;

149 i‡(
ªt
 < 0)

153 i‡(
sd
->
vm•li˚_to_u£r_m≠
 && 
	`munm≠
(
m≠
, 
mm≠_Àn
) < 0) {

154 
	`td_vîr‹
(
td
, 
î∫o
, "munnap io_u");

157 i‡(
ªt
 < 0)

158  
ªt
;

160  
io_u
->
x„r_buÊí
;

161 
	}
}

167 
	$fio_•li˚_wrôe
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

169 
•li˚io_d©a
 *
sd
 = 
td
->
io_›s
->
d©a
;

170 
iovec
 
iov
 = {

171 .
iov_ba£
 = 
io_u
->
x„r_buf
,

172 .
iov_Àn
 = 
io_u
->
x„r_buÊí
,

174 
pﬁlfd
 
pfd
 = { .
fd
 = 
sd
->
pùe
[1], .
evíts
 = 
POLLOUT
, };

175 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

176 
off_t
 
off
 = 
io_u
->
off£t
;

177 
ªt
, 
ªt2
;

179 
iov
.
iov_Àn
) {

180 i‡(
	`pﬁl
(&
pfd
, 1, -1) < 0)

181  
î∫o
;

183 
ªt
 = 
	`vm•li˚
(
sd
->
pùe
[1], &
iov
, 1, 
SPLICE_F_NONBLOCK
);

184 i‡(
ªt
 < 0)

185  -
î∫o
;

187 
iov
.
iov_Àn
 -
ªt
;

188 
iov
.
iov_ba£
 +
ªt
;

190 
ªt
) {

191 
ªt2
 = 
	`•li˚
(
sd
->
pùe
[0], 
NULL
, 
f
->
fd
, &
off
, 
ªt
, 0);

192 i‡(
ªt2
 < 0)

193  -
î∫o
;

195 
ªt
 -
ªt2
;

199  
io_u
->
x„r_buÊí
;

200 
	}
}

202 
	$fio_•li˚io_queue
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

204 
•li˚io_d©a
 *
sd
 = 
td
->
io_›s
->
d©a
;

205 
ªt
 = 0;

207 
	`fio_ro_check
(
td
, 
io_u
);

209 i‡(
io_u
->
ddú
 =
DDIR_READ
) {

210 i‡(
sd
->
vm•li˚_to_u£r
) {

211 
ªt
 = 
	`fio_•li˚_ªad
(
td
, 
io_u
);

217 i‡(
ªt
 =-
EBADF
)

218 
sd
->
vm•li˚_to_u£r
 = 0;

220 i‡(!
sd
->
vm•li˚_to_u£r
)

221 
ªt
 = 
	`fio_•li˚_ªad_ﬁd
(
td
, 
io_u
);

222 } i‡(
io_u
->
ddú
 =
DDIR_WRITE
)

223 
ªt
 = 
	`fio_•li˚_wrôe
(
td
, 
io_u
);

224 i‡(
io_u
->
ddú
 =
DDIR_TRIM
)

225 
ªt
 = 
	`do_io_u_åim
(
td
, 
io_u
);

227 
ªt
 = 
	`do_io_u_sync
(
td
, 
io_u
);

229 i‡(
ªt
 !(Ë
io_u
->
x„r_buÊí
) {

230 i‡(
ªt
 >= 0) {

231 
io_u
->
ªsid
 = io_u->
x„r_buÊí
 - 
ªt
;

232 
io_u
->
îr‹
 = 0;

233  
FIO_Q_COMPLETED
;

235 
io_u
->
îr‹
 = 
î∫o
;

238 i‡(
io_u
->
îr‹
) {

239 
	`td_vîr‹
(
td
, 
io_u
->
îr‹
, "xfer");

240 i‡(
io_u
->
îr‹
 =
EINVAL
)

241 
	`log_îr
("fio:ÜooksÜike splice doesn't work onÅhis"

245  
FIO_Q_COMPLETED
;

246 
	}
}

248 
	$fio_•li˚io_˛ónup
(
thªad_d©a
 *
td
)

250 
•li˚io_d©a
 *
sd
 = 
td
->
io_›s
->
d©a
;

252 i‡(
sd
) {

253 
	`˛o£
(
sd
->
pùe
[0]);

254 
	`˛o£
(
sd
->
pùe
[1]);

255 
	`‰ì
(
sd
);

257 
	}
}

259 
	$fio_•li˚io_öô
(
thªad_d©a
 *
td
)

261 
•li˚io_d©a
 *
sd
 = 
	`mÆloc
((*sd));

263 i‡(
	`pùe
(
sd
->
pùe
) < 0) {

264 
	`td_vîr‹
(
td
, 
î∫o
, "pipe");

265 
	`‰ì
(
sd
);

272 
sd
->
vm•li˚_to_u£r
 = 1;

278 
sd
->
vm•li˚_to_u£r_m≠
 = 1;

284 i‡(
	`td_ªad
(
td
))

285 
td
->
o
.
mem_Æign
 = 1;

287 
td
->
io_›s
->
d©a
 = 
sd
;

289 
	}
}

291 
i€ngöe_›s
 
	gi€ngöe
 = {

292 .
«me
 = "splice",

293 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

294 .
	göô
 = 
fio_•li˚io_öô
,

295 .
	gqueue
 = 
fio_•li˚io_queue
,

296 .
	g˛ónup
 = 
fio_•li˚io_˛ónup
,

297 .
	g›í_fûe
 = 
gíîic_›í_fûe
,

298 .
	g˛o£_fûe
 = 
gíîic_˛o£_fûe
,

299 .
	ggë_fûe_size
 = 
gíîic_gë_fûe_size
,

300 .
	gÊags
 = 
FIO_SYNCIO
 | 
FIO_PIPEIO
,

303 
fio_öô
 
	$fio_•li˚io_ªgi°î
()

305 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

306 
	}
}

308 
fio_exô
 
	$fio_•li˚io_uƒegi°î
()

310 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

311 
	}
}

	@/home/terekhov/tmp/fio/fio/engines/sync.c

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<uni°d.h
>

11 
	~<sys/uio.h
>

12 
	~<î∫o.h
>

13 
	~<as£π.h
>

15 
	~"../fio.h
"

20 
	#LAST_POS
(
f
Ë((f)->
ígöe_d©a
)

	)

22 
	ssyncio_d©a
 {

23 
iovec
 *
	miovecs
;

24 
io_u
 **
	mio_us
;

25 
	mqueued
;

26 
	mevíts
;

27 
	mqueued_byãs
;

29 
	mœ°_off£t
;

30 
fio_fûe
 *
	mœ°_fûe
;

31 
fio_ddú
 
	mœ°_ddú
;

34 
	$fio_syncio_¥ï
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

36 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

38 i‡(!
	`ddú_rw
(
io_u
->
ddú
))

41 i‡(
	`LAST_POS
(
f
Ë!-1ULL && LAST_POS(fË=
io_u
->
off£t
)

44 i‡(
	`l£ek
(
f
->
fd
, 
io_u
->
off£t
, 
SEEK_SET
) == -1) {

45 
	`td_vîr‹
(
td
, 
î∫o
, "lseek");

50 
	}
}

52 
	$fio_io_íd
(
thªad_d©a
 *
td
, 
io_u
 *io_u, 
ªt
)

54 i‡(
io_u
->
fûe
 && 
ªt
 >0 && 
	`ddú_rw
(io_u->
ddú
))

55 
	`LAST_POS
(
io_u
->
fûe
Ëio_u->
off£t
 + 
ªt
;

57 i‡(
ªt
 !(Ë
io_u
->
x„r_buÊí
) {

58 i‡(
ªt
 >= 0) {

59 
io_u
->
ªsid
 = io_u->
x„r_buÊí
 - 
ªt
;

60 
io_u
->
îr‹
 = 0;

61  
FIO_Q_COMPLETED
;

63 
io_u
->
îr‹
 = 
î∫o
;

66 i‡(
io_u
->
îr‹
)

67 
	`td_vîr‹
(
td
, 
io_u
->
îr‹
, "xfer");

69  
FIO_Q_COMPLETED
;

70 
	}
}

72 #ifde‡
CONFIG_PWRITEV


73 
	$fio_pvsyncio_queue
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

75 
syncio_d©a
 *
sd
 = 
td
->
io_›s
->
d©a
;

76 
iovec
 *
iov
 = &
sd
->
iovecs
[0];

77 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

78 
ªt
;

80 
	`fio_ro_check
(
td
, 
io_u
);

82 
iov
->
iov_ba£
 = 
io_u
->
x„r_buf
;

83 
iov
->
iov_Àn
 = 
io_u
->
x„r_buÊí
;

85 i‡(
io_u
->
ddú
 =
DDIR_READ
)

86 
ªt
 = 
	`¥ódv
(
f
->
fd
, 
iov
, 1, 
io_u
->
off£t
);

87 i‡(
io_u
->
ddú
 =
DDIR_WRITE
)

88 
ªt
 = 
	`pwrôev
(
f
->
fd
, 
iov
, 1, 
io_u
->
off£t
);

89 i‡(
io_u
->
ddú
 =
DDIR_TRIM
) {

90 
	`do_io_u_åim
(
td
, 
io_u
);

91  
FIO_Q_COMPLETED
;

93 
ªt
 = 
	`do_io_u_sync
(
td
, 
io_u
);

95  
	`fio_io_íd
(
td
, 
io_u
, 
ªt
);

96 
	}
}

99 
	$fio_psyncio_queue
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

101 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

102 
ªt
;

104 
	`fio_ro_check
(
td
, 
io_u
);

106 i‡(
io_u
->
ddú
 =
DDIR_READ
)

107 
ªt
 = 
	`¥ód
(
f
->
fd
, 
io_u
->
x„r_buf
, io_u->
x„r_buÊí
, io_u->
off£t
);

108 i‡(
io_u
->
ddú
 =
DDIR_WRITE
)

109 
ªt
 = 
	`pwrôe
(
f
->
fd
, 
io_u
->
x„r_buf
, io_u->
x„r_buÊí
, io_u->
off£t
);

110 i‡(
io_u
->
ddú
 =
DDIR_TRIM
) {

111 
	`do_io_u_åim
(
td
, 
io_u
);

112  
FIO_Q_COMPLETED
;

114 
ªt
 = 
	`do_io_u_sync
(
td
, 
io_u
);

116  
	`fio_io_íd
(
td
, 
io_u
, 
ªt
);

117 
	}
}

119 
	$fio_syncio_queue
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

121 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

122 
ªt
;

124 
	`fio_ro_check
(
td
, 
io_u
);

126 i‡(
io_u
->
ddú
 =
DDIR_READ
)

127 
ªt
 = 
	`ªad
(
f
->
fd
, 
io_u
->
x„r_buf
, io_u->
x„r_buÊí
);

128 i‡(
io_u
->
ddú
 =
DDIR_WRITE
)

129 
ªt
 = 
	`wrôe
(
f
->
fd
, 
io_u
->
x„r_buf
, io_u->
x„r_buÊí
);

130 i‡(
io_u
->
ddú
 =
DDIR_TRIM
) {

131 
	`do_io_u_åim
(
td
, 
io_u
);

132  
FIO_Q_COMPLETED
;

134 
ªt
 = 
	`do_io_u_sync
(
td
, 
io_u
);

136  
	`fio_io_íd
(
td
, 
io_u
, 
ªt
);

137 
	}
}

139 
	$fio_vsyncio_gëevíts
(
thªad_d©a
 *
td
, 
mö
,

140 
max
,

141 
time•ec
 
fio_unu£d
 *
t
)

143 
syncio_d©a
 *
sd
 = 
td
->
io_›s
->
d©a
;

144 
ªt
;

146 i‡(
mö
) {

147 
ªt
 = 
sd
->
evíts
;

148 
sd
->
evíts
 = 0;

150 
ªt
 = 0;

152 
	`d¥öt
(
FD_IO
, "vsyncio_gëevíts: mö=%d,max=%d: %d\n", 
mö
, 
max
, 
ªt
);

153  
ªt
;

154 
	}
}

156 
io_u
 *
	$fio_vsyncio_evít
(
thªad_d©a
 *
td
, 
evít
)

158 
syncio_d©a
 *
sd
 = 
td
->
io_›s
->
d©a
;

160  
sd
->
io_us
[
evít
];

161 
	}
}

163 
	$fio_vsyncio_≠≥nd
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

165 
syncio_d©a
 *
sd
 = 
td
->
io_›s
->
d©a
;

167 i‡(
	`ddú_sync
(
io_u
->
ddú
))

170 i‡(
io_u
->
off£t
 =
sd
->
œ°_off£t
 && io_u->
fûe
 =sd->
œ°_fûe
 &&

171 
io_u
->
ddú
 =
sd
->
œ°_ddú
)

175 
	}
}

177 
	$fio_vsyncio_£t_iov
(
syncio_d©a
 *
sd
, 
io_u
 *io_u,

178 
idx
)

180 
sd
->
io_us
[
idx
] = 
io_u
;

181 
sd
->
iovecs
[
idx
].
iov_ba£
 = 
io_u
->
x„r_buf
;

182 
sd
->
iovecs
[
idx
].
iov_Àn
 = 
io_u
->
x„r_buÊí
;

183 
sd
->
œ°_off£t
 = 
io_u
->
off£t
 + io_u->
x„r_buÊí
;

184 
sd
->
œ°_fûe
 = 
io_u
->
fûe
;

185 
sd
->
œ°_ddú
 = 
io_u
->
ddú
;

186 
sd
->
queued_byãs
 +
io_u
->
x„r_buÊí
;

187 
sd
->
queued
++;

188 
	}
}

190 
	$fio_vsyncio_queue
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

192 
syncio_d©a
 *
sd
 = 
td
->
io_›s
->
d©a
;

194 
	`fio_ro_check
(
td
, 
io_u
);

196 i‡(!
	`fio_vsyncio_≠≥nd
(
td
, 
io_u
)) {

197 
	`d¥öt
(
FD_IO
, "vsyncio_queue:Çÿ≠≥nd (%d)\n", 
sd
->
queued
);

202 i‡(
sd
->
queued
)

203  
FIO_Q_BUSY
;

204 i‡(
	`ddú_sync
(
io_u
->
ddú
)) {

205 
ªt
 = 
	`do_io_u_sync
(
td
, 
io_u
);

207  
	`fio_io_íd
(
td
, 
io_u
, 
ªt
);

210 
sd
->
queued
 = 0;

211 
sd
->
queued_byãs
 = 0;

212 
	`fio_vsyncio_£t_iov
(
sd
, 
io_u
, 0);

214 i‡(
sd
->
queued
 =
td
->
o
.
iodïth
) {

215 
	`d¥öt
(
FD_IO
, "vsyncio_queue: max dïth %d\n", 
sd
->
queued
);

216  
FIO_Q_BUSY
;

219 
	`d¥öt
(
FD_IO
, "vsyncio_queue:áppend\n");

220 
	`fio_vsyncio_£t_iov
(
sd
, 
io_u
, sd->
queued
);

223 
	`d¥öt
(
FD_IO
, "vsyncio_queue: dïthÇow %d\n", 
sd
->
queued
);

224  
FIO_Q_QUEUED
;

225 
	}
}

230 
	$fio_vsyncio_íd
(
thªad_d©a
 *
td
, 
ssize_t
 
byãs
)

232 
syncio_d©a
 *
sd
 = 
td
->
io_›s
->
d©a
;

233 
io_u
 *io_u;

234 
i
;

235 
îr
;

240 i‡(
byãs
 =
sd
->
queued_byãs
)

243 
îr
 = 
î∫o
;

244 
i
 = 0; i < 
sd
->
queued
; i++) {

245 
io_u
 = 
sd
->
io_us
[
i
];

247 i‡(
byãs
 == -1) {

248 
io_u
->
îr‹
 = 
îr
;

250 
this_io
;

252 
this_io
 = 
byãs
;

253 i‡(
this_io
 > 
io_u
->
x„r_buÊí
)

254 
this_io
 = 
io_u
->
x„r_buÊí
;

256 
io_u
->
ªsid
 = io_u->
x„r_buÊí
 - 
this_io
;

257 
io_u
->
îr‹
 = 0;

258 
byãs
 -
this_io
;

262 i‡(
byãs
 == -1) {

263 
	`td_vîr‹
(
td
, 
îr
, "xfer vsync");

264  -
îr
;

268 
	}
}

270 
	$fio_vsyncio_commô
(
thªad_d©a
 *
td
)

272 
syncio_d©a
 *
sd
 = 
td
->
io_›s
->
d©a
;

273 
fio_fûe
 *
f
;

274 
ssize_t
 
ªt
;

276 i‡(!
sd
->
queued
)

279 
	`io_u_m¨k_submô
(
td
, 
sd
->
queued
);

280 
f
 = 
sd
->
œ°_fûe
;

282 i‡(
	`l£ek
(
f
->
fd
, 
sd
->
io_us
[0]->
off£t
, 
SEEK_SET
) == -1) {

283 
îr
 = -
î∫o
;

285 
	`td_vîr‹
(
td
, 
î∫o
, "lseek");

286  
îr
;

289 i‡(
sd
->
œ°_ddú
 =
DDIR_READ
)

290 
ªt
 = 
	`ªadv
(
f
->
fd
, 
sd
->
iovecs
, sd->
queued
);

292 
ªt
 = 
	`wrôev
(
f
->
fd
, 
sd
->
iovecs
, sd->
queued
);

294 
	`d¥öt
(
FD_IO
, "vsyncio_commô: %d\n", (Ë
ªt
);

295 
sd
->
evíts
 = sd->
queued
;

296 
sd
->
queued
 = 0;

297  
	`fio_vsyncio_íd
(
td
, 
ªt
);

298 
	}
}

300 
	$fio_vsyncio_öô
(
thªad_d©a
 *
td
)

302 
syncio_d©a
 *
sd
;

304 
sd
 = 
	`mÆloc
((*sd));

305 
	`mem£t
(
sd
, 0, (*sd));

306 
sd
->
œ°_off£t
 = -1ULL;

307 
sd
->
iovecs
 = 
	`mÆloc
(
td
->
o
.
iodïth
 * (
iovec
));

308 
sd
->
io_us
 = 
	`mÆloc
(
td
->
o
.
iodïth
 * (
io_u
 *));

310 
td
->
io_›s
->
d©a
 = 
sd
;

312 
	}
}

314 
	$fio_vsyncio_˛ónup
(
thªad_d©a
 *
td
)

316 
syncio_d©a
 *
sd
 = 
td
->
io_›s
->
d©a
;

318 
	`‰ì
(
sd
->
iovecs
);

319 
	`‰ì
(
sd
->
io_us
);

320 
	`‰ì
(
sd
);

321 
	}
}

323 
i€ngöe_›s
 
	gi€ngöe_rw
 = {

324 .
«me
 = "sync",

325 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

326 .
	g¥ï
 = 
fio_syncio_¥ï
,

327 .
	gqueue
 = 
fio_syncio_queue
,

328 .
	g›í_fûe
 = 
gíîic_›í_fûe
,

329 .
	g˛o£_fûe
 = 
gíîic_˛o£_fûe
,

330 .
	ggë_fûe_size
 = 
gíîic_gë_fûe_size
,

331 .
	gÊags
 = 
FIO_SYNCIO
,

334 
i€ngöe_›s
 
	gi€ngöe_¥w
 = {

335 .
«me
 = "psync",

336 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

337 .
	gqueue
 = 
fio_psyncio_queue
,

338 .
	g›í_fûe
 = 
gíîic_›í_fûe
,

339 .
	g˛o£_fûe
 = 
gíîic_˛o£_fûe
,

340 .
	ggë_fûe_size
 = 
gíîic_gë_fûe_size
,

341 .
	gÊags
 = 
FIO_SYNCIO
,

344 
i€ngöe_›s
 
	gi€ngöe_vrw
 = {

345 .
«me
 = "vsync",

346 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

347 .
	göô
 = 
fio_vsyncio_öô
,

348 .
	g˛ónup
 = 
fio_vsyncio_˛ónup
,

349 .
	gqueue
 = 
fio_vsyncio_queue
,

350 .
	gcommô
 = 
fio_vsyncio_commô
,

351 .
	gevít
 = 
fio_vsyncio_evít
,

352 .
	ggëevíts
 = 
fio_vsyncio_gëevíts
,

353 .
	g›í_fûe
 = 
gíîic_›í_fûe
,

354 .
	g˛o£_fûe
 = 
gíîic_˛o£_fûe
,

355 .
	ggë_fûe_size
 = 
gíîic_gë_fûe_size
,

356 .
	gÊags
 = 
FIO_SYNCIO
,

359 #ifde‡
CONFIG_PWRITEV


360 
i€ngöe_›s
 
	gi€ngöe_pvrw
 = {

361 .
«me
 = "pvsync",

362 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

363 .
	göô
 = 
fio_vsyncio_öô
,

364 .
	g˛ónup
 = 
fio_vsyncio_˛ónup
,

365 .
	gqueue
 = 
fio_pvsyncio_queue
,

366 .
	g›í_fûe
 = 
gíîic_›í_fûe
,

367 .
	g˛o£_fûe
 = 
gíîic_˛o£_fûe
,

368 .
	ggë_fûe_size
 = 
gíîic_gë_fûe_size
,

369 .
	gÊags
 = 
FIO_SYNCIO
,

373 
fio_öô
 
	$fio_syncio_ªgi°î
()

375 
	`ªgi°î_i€ngöe
(&
i€ngöe_rw
);

376 
	`ªgi°î_i€ngöe
(&
i€ngöe_¥w
);

377 
	`ªgi°î_i€ngöe
(&
i€ngöe_vrw
);

378 #ifde‡
CONFIG_PWRITEV


379 
	`ªgi°î_i€ngöe
(&
i€ngöe_pvrw
);

381 
	}
}

383 
fio_exô
 
	$fio_syncio_uƒegi°î
()

385 
	`uƒegi°î_i€ngöe
(&
i€ngöe_rw
);

386 
	`uƒegi°î_i€ngöe
(&
i€ngöe_¥w
);

387 
	`uƒegi°î_i€ngöe
(&
i€ngöe_vrw
);

388 #ifde‡
CONFIG_PWRITEV


389 
	`uƒegi°î_i€ngöe
(&
i€ngöe_pvrw
);

391 
	}
}

	@/home/terekhov/tmp/fio/fio/engines/windowsaio.c

7 
	~<°dio.h
>

8 
	~<°dlib.h
>

9 
	~<uni°d.h
>

10 
	~<sig«l.h
>

11 
	~<î∫o.h
>

13 
	~"../fio.h
"

15 
	$BOOL
 (
	tWINAPI
 *
	tCANCELIOEX
)(
	tHANDLE
 
	thFûe
, 
	tLPOVERLAPPED
 
	tÕOvîœµed
);

17 
	`gëî∫o_‰om_wö_îr‹
 (
DWORD
 
code
, 
de„ºno
);

19 
	sfio_ovîœµed
 {

20 
OVERLAPPED
 
o
;

21 
io_u
 *io_u;

22 
BOOL
 
io_com∂ëe
;

25 
	swödowßio_d©a
 {

26 
io_u
 **
aio_evíts
;

27 
HANDLE
 
io˝
;

28 
HANDLE
 
iŸhªad
;

29 
HANDLE
 
iocom∂ëe_evít
;

30 
BOOL
 
iŸhªad_ru¬ög
;

33 
	sthªad_˘x
 {

34 
HANDLE
 
io˝
;

35 
wödowßio_d©a
 *
wd
;

38 
BOOL
 
	`timeout_expúed
(
DWORD
 
°¨t_cou¡
, DWORD 
íd_cou¡
);

39 
	`fio_wödowßio_gëevíts
(
thªad_d©a
 *
td
, 
mö
,

40 
max
, 
time•ec
 *
t
);

41 
io_u
 *
	`fio_wödowßio_evít
(
thªad_d©a
 *
td
, 
evít
);

42 
	`fio_wödowßio_queue
(
thªad_d©a
 *
td
,

43 
io_u
 *io_u);

44 
	`fio_wödowßio_˛ónup
(
thªad_d©a
 *
td
);

45 
DWORD
 
WINAPI
 
	`IoCom∂ëi⁄Routöe
(
LPVOID
 
ÕP¨amëî
);

46 
	`fio_wödowßio_öô
(
thªad_d©a
 *
td
);

47 
	`fio_wödowßio_›í_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
);

48 
	`fio_wödowßio_˛o£_fûe
(
thªad_d©a
 
fio_unu£d
 *
td
, 
fio_fûe
 *
f
);

50 
	$fio_wödowßio_öô
(
thªad_d©a
 *
td
)

52 
wödowßio_d©a
 *
wd
;

53 
rc
 = 0;

55 
wd
 = 
	`ˇŒoc
(1, (
wödowßio_d©a
));

56 i‡(
wd
 =
NULL
) {

57 
	`log_îr
("windowsaio: failedÅoállocate memory forÉngine data\n");

58 
rc
 = 1;

61 i‡(!
rc
) {

62 
wd
->
aio_evíts
 = 
	`mÆloc
(
td
->
o
.
iodïth
 * (
io_u
*));

63 i‡(
wd
->
aio_evíts
 =
NULL
) {

64 
	`log_îr
("windowsaio: failedÅoállocate memory foráioÉventsÜist\n");

65 
rc
 = 1;

69 i‡(!
rc
) {

71 
wd
->
iocom∂ëe_evít
 = 
	`Cª©eEvít
(
NULL
, 
FALSE
, FALSE, NULL);

72 i‡(
wd
->
iocom∂ëe_evít
 =
NULL
) {

73 
	`log_îr
("windowsaio: failedÅo create io completeÉvent handle\n");

74 
rc
 = 1;

78 i‡(
rc
) {

79 i‡(
wd
 !
NULL
) {

80 i‡(
wd
->
aio_evíts
 !
NULL
)

81 
	`‰ì
(
wd
->
aio_evíts
);

83 
	`‰ì
(
wd
);

87 
td
->
io_›s
->
d©a
 = 
wd
;

89 i‡(!
rc
) {

90 
thªad_˘x
 *
˘x
;

91 
wödowßio_d©a
 *
wd
;

92 
HANDLE
 
hFûe
;

94 
hFûe
 = 
	`Cª©eIoCom∂ëi⁄P‹t
(
INVALID_HANDLE_VALUE
, 
NULL
, 0, 0);

95 i‡(
hFûe
 =
INVALID_HANDLE_VALUE
) {

96 
	`log_îr
("windowsaio: failedÅo create io completionÖort\n");

97 
rc
 = 1;

100 
wd
 = 
td
->
io_›s
->
d©a
;

101 
wd
->
iŸhªad_ru¬ög
 = 
TRUE
;

102 
wd
->
io˝
 = 
hFûe
;

104 i‡(!
rc
)

105 
˘x
 = 
	`mÆloc
((
thªad_˘x
));

107 i‡(!
rc
 && 
˘x
 =
NULL
)

109 
	`log_îr
("windowsaio: failedÅoállocate memory forÅhread context structure\n");

110 
	`Clo£H™dÀ
(
hFûe
);

111 
rc
 = 1;

114 i‡(!
rc
)

116 
˘x
->
io˝
 = 
hFûe
;

117 
˘x
->
wd
 = wd;

118 
wd
->
iŸhªad
 = 
	`Cª©eThªad
(
NULL
, 0, 
IoCom∂ëi⁄Routöe
, 
˘x
, 0, NULL);

119 i‡(
wd
->
iŸhªad
 =
NULL
)

120 
	`log_îr
("windowsaio: failedÅo create io completionÅhread\n");

123 i‡(
rc
 || 
wd
->
iŸhªad
 =
NULL
)

124 
rc
 = 1;

127  
rc
;

128 
	}
}

130 
	$fio_wödowßio_˛ónup
(
thªad_d©a
 *
td
)

132 
wödowßio_d©a
 *
wd
;

134 
wd
 = 
td
->
io_›s
->
d©a
;

136 i‡(
wd
 !
NULL
) {

137 
wd
->
iŸhªad_ru¬ög
 = 
FALSE
;

138 
	`WaôF‹SögÀObje˘
(
wd
->
iŸhªad
, 
INFINITE
);

140 
	`Clo£H™dÀ
(
wd
->
iŸhªad
);

141 
	`Clo£H™dÀ
(
wd
->
iocom∂ëe_evít
);

143 
	`‰ì
(
wd
->
aio_evíts
);

144 
	`‰ì
(
wd
);

146 
td
->
io_›s
->
d©a
 = 
NULL
;

148 
	}
}

151 
	$fio_wödowßio_›í_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

153 
rc
 = 0;

154 
DWORD
 
Êags
 = 
FILE_FLAG_POSIX_SEMANTICS
 | 
FILE_FLAG_OVERLAPPED
;

155 
DWORD
 
sh¨emode
 = 
FILE_SHARE_READ
 | 
FILE_SHARE_WRITE
;

156 
DWORD
 
›ímode
 = 
OPEN_ALWAYS
;

157 
DWORD
 
ac˚ss
;

159 
	`d¥öt
(
FD_FILE
, "fd o≥¿%s\n", 
f
->
fûe_«me
);

161 i‡(
f
->
fûëy≥
 =
FIO_TYPE_PIPE
) {

162 
	`log_îr
("windowsaio:ÖipesáreÇot supported\n");

166 i‡(!
	`°rcmp
(
f
->
fûe_«me
, "-")) {

167 
	`log_îr
("windowsaio: can'tÑead/writeÅo stdin/out\n");

171 i‡(
td
->
o
.
odúe˘
)

172 
Êags
 |
FILE_FLAG_NO_BUFFERING
;

173 i‡(
td
->
o
.
sync_io
)

174 
Êags
 |
FILE_FLAG_WRITE_THROUGH
;

180 i‡(
td
->
o
.
td_ddú
 =
TD_DDIR_READ
 ||

181 
td
->
o
.
td_ddú
 =
TD_DDIR_WRITE
)

182 
Êags
 |
FILE_FLAG_SEQUENTIAL_SCAN
;

184 
Êags
 |
FILE_FLAG_RANDOM_ACCESS
;

186 i‡(!
	`td_wrôe
(
td
Ë|| 
ªad_⁄ly
)

187 
ac˚ss
 = 
GENERIC_READ
;

189 
ac˚ss
 = (
GENERIC_READ
 | 
GENERIC_WRITE
);

191 i‡(
td
->
o
.
¸óã_⁄_›í
)

192 
›ímode
 = 
OPEN_ALWAYS
;

194 
›ímode
 = 
OPEN_EXISTING
;

196 
f
->
hFûe
 = 
	`Cª©eFûe
(f->
fûe_«me
, 
ac˚ss
, 
sh¨emode
,

197 
NULL
, 
›ímode
, 
Êags
, NULL);

199 i‡(
f
->
hFûe
 =
INVALID_HANDLE_VALUE
) {

200 
	`log_îr
("wödowßio: faûedÅÿ›í fûê\"%s\"\n", 
f
->
fûe_«me
);

201 
rc
 = 1;

206 i‡(!
rc
 && 
td
->
io_›s
->
d©a
 !
NULL
) {

207 
wödowßio_d©a
 *
wd
;

209 
wd
 = 
td
->
io_›s
->
d©a
;

211 i‡(
	`Cª©eIoCom∂ëi⁄P‹t
(
f
->
hFûe
, 
wd
->
io˝
, 0, 0Ë=
NULL
) {

212 
	`log_îr
("windowsaio: failedÅo create io completionÖort\n");

213 
rc
 = 1;

217  
rc
;

218 
	}
}

220 
	$fio_wödowßio_˛o£_fûe
(
thªad_d©a
 
fio_unu£d
 *
td
, 
fio_fûe
 *
f
)

222 
rc
 = 0;

224 
	`d¥öt
(
FD_FILE
, "fd clo£ %s\n", 
f
->
fûe_«me
);

226 i‡(
f
->
hFûe
 !
INVALID_HANDLE_VALUE
) {

227 i‡(!
	`Clo£H™dÀ
(
f
->
hFûe
)) {

228 
	`log_öfo
("wödowßio: faûedÅÿ˛o£ fûêh™dÀ f‹ \"%s\"\n", 
f
->
fûe_«me
);

229 
rc
 = 1;

233 
f
->
hFûe
 = 
INVALID_HANDLE_VALUE
;

234  
rc
;

235 
	}
}

237 
BOOL
 
	$timeout_expúed
(
DWORD
 
°¨t_cou¡
, DWORD 
íd_cou¡
)

239 
BOOL
 
expúed
 = 
FALSE
;

240 
DWORD
 
cuºít_time
;

242 
cuºít_time
 = 
	`GëTickCou¡
();

244 i‡((
íd_cou¡
 > 
°¨t_cou¡
Ë&& 
cuºít_time
 >=Énd_count)

245 
expúed
 = 
TRUE
;

246 i‡(
cuºít_time
 < 
°¨t_cou¡
 && cuºít_timê> 
íd_cou¡
)

247 
expúed
 = 
TRUE
;

249  
expúed
;

250 
	}
}

252 
io_u
* 
	$fio_wödowßio_evít
(
thªad_d©a
 *
td
, 
evít
)

254 
wödowßio_d©a
 *
wd
 = 
td
->
io_›s
->
d©a
;

255  
wd
->
aio_evíts
[
evít
];

256 
	}
}

258 
	$fio_wödowßio_gëevíts
(
thªad_d©a
 *
td
, 
mö
,

259 
max
, 
time•ec
 *
t
)

261 
wödowßio_d©a
 *
wd
 = 
td
->
io_›s
->
d©a
;

262 
dequeued
 = 0;

263 
io_u
 *io_u;

264 
i
;

265 
fio_ovîœµed
 *
fov
;

266 
DWORD
 
°¨t_cou¡
 = 0;

267 
DWORD
 
íd_cou¡
 = 0;

268 
DWORD
 
°©us
;

269 
DWORD
 
mswaô
 = 250;

271 i‡(
t
 !
NULL
) {

272 
mswaô
 = (
t
->
tv_£c
 * 1000Ë+ (t->
tv_n£c
 / 1000000);

273 
°¨t_cou¡
 = 
	`GëTickCou¡
();

274 
íd_cou¡
 = 
°¨t_cou¡
 + (
t
->
tv_£c
 * 1000Ë+ (t->
tv_n£c
 / 1000000);

278 
	`io_u_qôî
(&
td
->
io_u_Æl
, 
io_u
, 
i
) {

279 i‡(!(
io_u
->
Êags
 & 
IO_U_F_FLIGHT
))

282 
fov
 = (
fio_ovîœµed
*)
io_u
->
ígöe_d©a
;

284 i‡(
fov
->
io_com∂ëe
) {

285 
fov
->
io_com∂ëe
 = 
FALSE
;

286 
	`Re£tEvít
(
fov
->
o
.
hEvít
);

287 
wd
->
aio_evíts
[
dequeued
] = 
io_u
;

288 
dequeued
++;

291 i‡(
dequeued
 >
mö
)

295 i‡(
dequeued
 < 
mö
) {

296 
°©us
 = 
	`WaôF‹SögÀObje˘
(
wd
->
iocom∂ëe_evít
, 
mswaô
);

297 i‡(
°©us
 !
WAIT_OBJECT_0
 && 
dequeued
 >
mö
)

301 i‡(
dequeued
 >
mö
 || (
t
 !
NULL
 && 
	`timeout_expúed
(
°¨t_cou¡
, 
íd_cou¡
)))

305  
dequeued
;

306 
	}
}

308 
	$fio_wödowßio_queue
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

310 
fio_ovîœµed
 *
o
 = 
io_u
->
ígöe_d©a
;

311 
LPOVERLAPPED
 
ÕOvl
 = &
o
->o;

312 
DWORD
 
iobyãs
;

313 
BOOL
 
suc˚ss
 = 
FALSE
;

314 
rc
 = 
FIO_Q_COMPLETED
;

316 
	`fio_ro_check
(
td
, 
io_u
);

318 
ÕOvl
->
I¡î«l
 = 
STATUS_PENDING
;

319 
ÕOvl
->
I¡î«lHigh
 = 0;

320 
ÕOvl
->
Off£t
 = 
io_u
->
off£t
 & 0xFFFFFFFF;

321 
ÕOvl
->
Off£tHigh
 = 
io_u
->
off£t
 >> 32;

323 
io_u
->
ddú
) {

324 
DDIR_WRITE
:

325 
suc˚ss
 = 
	`WrôeFûe
(
io_u
->
fûe
->
hFûe
, io_u->
x„r_buf
, io_u->
x„r_buÊí
, &
iobyãs
, 
ÕOvl
);

327 
DDIR_READ
:

328 
suc˚ss
 = 
	`RódFûe
(
io_u
->
fûe
->
hFûe
, io_u->
x„r_buf
, io_u->
x„r_buÊí
, &
iobyãs
, 
ÕOvl
);

330 
DDIR_SYNC
:

331 
DDIR_DATASYNC
:

332 
DDIR_SYNC_FILE_RANGE
:

333 
suc˚ss
 = 
	`FlushFûeBuf„rs
(
io_u
->
fûe
->
hFûe
);

334 i‡(!
suc˚ss
) {

335 
	`log_îr
("windowsaio: failedÅo flush file buffers\n");

336 
io_u
->
îr‹
 = 
	`wö_to_posix_îr‹
(
	`GëLa°Eº‹
());

339  
FIO_Q_COMPLETED
;

341 
DDIR_TRIM
:

342 
	`log_îr
("windowsaio: manual TRIM isn't supported on Windows\n");

343 
io_u
->
îr‹
 = 1;

344 
io_u
->
ªsid
 = io_u->
x„r_buÊí
;

345  
FIO_Q_COMPLETED
;

348 
	`as£π
(0);

352 i‡(
suc˚ss
 || 
	`GëLa°Eº‹
(Ë=
ERROR_IO_PENDING
)

353 
rc
 = 
FIO_Q_QUEUED
;

355 
io_u
->
îr‹
 = 
	`wö_to_posix_îr‹
(
	`GëLa°Eº‹
());

356 
io_u
->
ªsid
 = io_u->
x„r_buÊí
;

359  
rc
;

360 
	}
}

363 
DWORD
 
WINAPI
 
	$IoCom∂ëi⁄Routöe
(
LPVOID
 
ÕP¨amëî
)

365 
OVERLAPPED
 *
ovl
;

366 
fio_ovîœµed
 *
fov
;

367 
io_u
 *io_u;

368 
wödowßio_d©a
 *
wd
;

369 
thªad_˘x
 *
˘x
;

370 
ULONG_PTR
 
ulKey
 = 0;

371 
DWORD
 
byãs
;

373 
˘x
 = (
thªad_˘x
*)
ÕP¨amëî
;

374 
wd
 = 
˘x
->wd;

377 i‡(!
	`GëQueuedCom∂ëi⁄Sètus
(
˘x
->
io˝
, &
byãs
, &
ulKey
, &
ovl
, 250Ë&& ov»=
NULL
)

380 
fov
 = 
	`CONTAINING_RECORD
(
ovl
, 
fio_ovîœµed
, 
o
);

381 
io_u
 = 
fov
->io_u;

383 i‡(
ovl
->
I¡î«l
 =
ERROR_SUCCESS
) {

384 
io_u
->
ªsid
 = io_u->
x„r_buÊí
 - 
ovl
->
I¡î«lHigh
;

385 
io_u
->
îr‹
 = 0;

387 
io_u
->
ªsid
 = io_u->
x„r_buÊí
;

388 
io_u
->
îr‹
 = 
	`wö_to_posix_îr‹
(
	`GëLa°Eº‹
());

391 
fov
->
io_com∂ëe
 = 
TRUE
;

392 
	`SëEvít
(
wd
->
iocom∂ëe_evít
);

393 } 
˘x
->
wd
->
iŸhªad_ru¬ög
);

395 
	`Clo£H™dÀ
(
˘x
->
io˝
);

396 
	`‰ì
(
˘x
);

398 
	}
}

400 
	$fio_wödowßio_io_u_‰ì
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

402 
fio_ovîœµed
 *
o
 = 
io_u
->
ígöe_d©a
;

404 i‡(
o
) {

405 
	`Clo£H™dÀ
(
o
->o.
hEvít
);

406 
io_u
->
ígöe_d©a
 = 
NULL
;

407 
	`‰ì
(
o
);

409 
	}
}

411 
	$fio_wödowßio_io_u_öô
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

413 
fio_ovîœµed
 *
o
;

415 
o
 = 
	`mÆloc
((*o));

416 
o
->
io_com∂ëe
 = 
FALSE
;

417 
o
->
io_u
 = io_u;

418 
o
->o.
hEvít
 = 
	`Cª©eEvít
(
NULL
, 
TRUE
, 
FALSE
, NULL);

419 i‡(
o
->o.
hEvít
 =
NULL
) {

420 
	`log_îr
("windowsaio: failedÅo createÉvent handle\n");

421 
	`‰ì
(
o
);

425 
io_u
->
ígöe_d©a
 = 
o
;

427 
	}
}

429 
i€ngöe_›s
 
	gi€ngöe
 = {

430 .
«me
 = "windowsaio",

431 .
	gvîsi⁄
 = 
FIO_IOOPS_VERSION
,

432 .
	göô
 = 
fio_wödowßio_öô
,

433 .
	gqueue
 = 
fio_wödowßio_queue
,

434 .
	ggëevíts
 = 
fio_wödowßio_gëevíts
,

435 .
	gevít
 = 
fio_wödowßio_evít
,

436 .
	g˛ónup
 = 
fio_wödowßio_˛ónup
,

437 .
	g›í_fûe
 = 
fio_wödowßio_›í_fûe
,

438 .
	g˛o£_fûe
 = 
fio_wödowßio_˛o£_fûe
,

439 .
	ggë_fûe_size
 = 
gíîic_gë_fûe_size
,

440 .
	gio_u_öô
 = 
fio_wödowßio_io_u_öô
,

441 .
	gio_u_‰ì
 = 
fio_wödowßio_io_u_‰ì
,

444 
fio_öô
 
	$fio_wödowßio_ªgi°î
()

446 
	`ªgi°î_i€ngöe
(&
i€ngöe
);

447 
	}
}

449 
fio_exô
 
	$fio_wödowßio_uƒegi°î
()

451 
	`uƒegi°î_i€ngöe
(&
i€ngöe
);

452 
	}
}

	@/home/terekhov/tmp/fio/fio/err.h

1 #i‚de‡
FIO_ERR_H


2 
	#FIO_ERR_H


	)

12 
	#MAX_ERRNO
 4095

	)

14 
	#IS_ERR_VALUE
(
x
Ë((xË>(
uöçå_t
)-
MAX_ERRNO
)

	)

16 
ölöe
 *
	$ERR_PTR
(
uöçå_t
 
îr‹
)

18  (*Ë
îr‹
;

19 
	}
}

21 
ölöe
 
uöçå_t
 
	$PTR_ERR
(c⁄° *
±r
)

23  (
uöçå_t
Ë
±r
;

24 
	}
}

26 
ölöe
 
uöçå_t
 
	$IS_ERR
(c⁄° *
±r
)

28  
	`IS_ERR_VALUE
((
uöçå_t
)
±r
);

29 
	}
}

31 
ölöe
 
uöçå_t
 
	$IS_ERR_OR_NULL
(c⁄° *
±r
)

33  !
±r
 || 
	`IS_ERR_VALUE
((
uöçå_t
)ptr);

34 
	}
}

36 
ölöe
 
	$PTR_ERR_OR_ZERO
(c⁄° *
±r
)

38 i‡(
	`IS_ERR
(
±r
))

39  
	`PTR_ERR
(
±r
);

42 
	}
}

	@/home/terekhov/tmp/fio/fio/eta.c

4 
	~<uni°d.h
>

5 
	~<f˙é.h
>

6 
	~<°rög.h
>

8 
	~"fio.h
"

10 
	grun_°r
[
REAL_MAX_JOBS
 + 1];

15 
	$check_°r_upd©e
(
thªad_d©a
 *
td
)

17 
c
 = 
run_°r
[
td
->
thªad_numbî
 - 1];

19 
td
->
run°©e
) {

20 
TD_REAPED
:

21 i‡(
td
->
îr‹
)

22 
c
 = 'X';

23 i‡(
td
->
sig
)

24 
c
 = 'K';

26 
c
 = '_';

28 
TD_EXITED
:

29 
c
 = 'E';

31 
TD_RAMP
:

32 
c
 = '/';

34 
TD_RUNNING
:

35 i‡(
	`td_rw
(
td
)) {

36 i‡(
	`td_øndom
(
td
)) {

37 i‡(
td
->
o
.
rwmix
[
DDIR_READ
] == 100)

38 
c
 = 'r';

39 i‡(
td
->
o
.
rwmix
[
DDIR_WRITE
] == 100)

40 
c
 = 'w';

42 
c
 = 'm';

44 i‡(
td
->
o
.
rwmix
[
DDIR_READ
] == 100)

45 
c
 = 'R';

46 i‡(
td
->
o
.
rwmix
[
DDIR_WRITE
] == 100)

47 
c
 = 'W';

49 
c
 = 'M';

51 } i‡(
	`td_ªad
(
td
)) {

52 i‡(
	`td_øndom
(
td
))

53 
c
 = 'r';

55 
c
 = 'R';

56 } i‡(
	`td_wrôe
(
td
)) {

57 i‡(
	`td_øndom
(
td
))

58 
c
 = 'w';

60 
c
 = 'W';

62 i‡(
	`td_øndom
(
td
))

63 
c
 = 'd';

65 
c
 = 'D';

68 
TD_PRE_READING
:

69 
c
 = 'p';

71 
TD_VERIFYING
:

72 
c
 = 'V';

74 
TD_FSYNCING
:

75 
c
 = 'F';

77 
TD_FINISHING
:

78 
c
 = 'f';

80 
TD_CREATED
:

81 
c
 = 'C';

83 
TD_INITIALIZED
:

84 
TD_SETTING_UP
:

85 
c
 = 'I';

87 
TD_NOT_CREATED
:

88 
c
 = 'P';

91 
	`log_îr
("°©ê%d\n", 
td
->
run°©e
);

94 
run_°r
[
td
->
thªad_numbî
 - 1] = 
c
;

95 
	}
}

100 
	$ëa_to_°r
(*
°r
, 
ëa_£c
)

102 
d
, 
h
, 
m
, 
s
;

103 
di•_hour
 = 0;

105 
s
 = 
ëa_£c
 % 60;

106 
ëa_£c
 /= 60;

107 
m
 = 
ëa_£c
 % 60;

108 
ëa_£c
 /= 60;

109 
h
 = 
ëa_£c
 % 24;

110 
ëa_£c
 /= 24;

111 
d
 = 
ëa_£c
;

113 i‡(
d
) {

114 
di•_hour
 = 1;

115 
°r
 +
	`•rötf
(°r, "%02ud:", 
d
);

118 i‡(
h
 || 
di•_hour
)

119 
°r
 +
	`•rötf
(°r, "%02uh:", 
h
);

121 
°r
 +
	`•rötf
(°r, "%02um:", 
m
);

122 
°r
 +
	`•rötf
(°r, "%02us", 
s
);

123 
	}
}

128 
	$thªad_ëa
(
thªad_d©a
 *
td
)

130 
byãs_tŸÆ
, 
byãs_d⁄e
;

131 
ëa_£c
 = 0;

132 
ñ≠£d
;

133 
uöt64_t
 
timeout
;

135 
ñ≠£d
 = (
	`mtime_sö˚_now
(&
td
->
ïoch
) + 999) / 1000;

136 
timeout
 = 
td
->
o
.timeout / 1000000UL;

138 
byãs_tŸÆ
 = 
td
->
tŸÆ_io_size
;

140 i‡(
td
->
o
.
fûl_devi˚
 &&Åd->o.
size
 == -1ULL) {

141 i‡(!
td
->
fûl_devi˚_size
 ||Åd->fill_device_size == -1ULL)

144 
byãs_tŸÆ
 = 
td
->
fûl_devi˚_size
;

147 i‡(
td
->
o
.
z⁄e_size
 &&Åd->o.
z⁄e_skù
 && 
byãs_tŸÆ
) {

148 
ƒ_z⁄es
;

149 
uöt64_t
 
z⁄e_byãs
;

151 
z⁄e_byãs
 = 
byãs_tŸÆ
 + 
td
->
o
.
z⁄e_size
 +Åd->o.
z⁄e_skù
;

152 
ƒ_z⁄es
 = (
z⁄e_byãs
 - 1Ë/ (
td
->
o
.
z⁄e_size
 +Åd->o.
z⁄e_skù
);

153 
byãs_tŸÆ
 -
ƒ_z⁄es
 * 
td
->
o
.
z⁄e_skù
;

161 i‡(
td
->
o
.
do_vîify
 &&Åd->o.
vîify
 && 
	`td_wrôe
(td)) {

162 i‡(
	`td_rw
(
td
)) {

163 
≥rc
 = 50;

165 i‡(
td
->
o
.
rwmix
[
DDIR_WRITE
])

166 
≥rc
 = 
td
->
o
.
rwmix
[
DDIR_WRITE
];

168 
byãs_tŸÆ
 +(byãs_tŸÆ * 
≥rc
) / 100;

170 
byãs_tŸÆ
 <<= 1;

173 i‡(
td
->
run°©e
 =
TD_RUNNING
 ||Åd->run°©ê=
TD_VERIFYING
) {

174 
≥rc
, 
≥rc_t
;

176 
byãs_d⁄e
 = 
	`ddú_rw_sum
(
td
->
io_byãs
);

178 i‡(
byãs_tŸÆ
) {

179 
≥rc
 = (Ë
byãs_d⁄e
 / (Ë
byãs_tŸÆ
;

180 i‡(
≥rc
 > 1.0)

181 
≥rc
 = 1.0;

183 
≥rc
 = 0.0;

185 i‡(
td
->
o
.
time_ba£d
) {

186 i‡(
timeout
) {

187 
≥rc_t
 = (Ë
ñ≠£d
 / (Ë
timeout
;

188 i‡(
≥rc_t
 < 
≥rc
)

189 
≥rc
 = 
≥rc_t
;

195 
≥rc
 = 0.0;

199 
ëa_£c
 = (Ë(
ñ≠£d
 * (1.0 / 
≥rc
)) -Élapsed;

201 i‡(
td
->
o
.
timeout
 &&

202 
ëa_£c
 > (
timeout
 + 
d⁄e_£cs
 - 
ñ≠£d
))

203 
ëa_£c
 = 
timeout
 + 
d⁄e_£cs
 - 
ñ≠£d
;

204 } i‡(
td
->
run°©e
 =
TD_NOT_CREATED
 ||Åd->run°©ê=
TD_CREATED


205 || 
td
->
run°©e
 =
TD_INITIALIZED


206 || 
td
->
run°©e
 =
TD_SETTING_UP


207 || 
td
->
run°©e
 =
TD_RAMP


208 || 
td
->
run°©e
 =
TD_PRE_READING
) {

209 
t_ëa
 = 0, 
r_ëa
 = 0;

210 
øã_byãs
;

216 i‡(
td
->
o
.
timeout
) {

217 
uöt64_t
 
timeout
 = 
td
->
o
.timeout;

218 
uöt64_t
 
°¨t_dñay
 = 
td
->
o
.start_delay;

219 
uöt64_t
 
ømp_time
 = 
td
->
o
.ramp_time;

221 
t_ëa
 = 
timeout
 + 
°¨t_dñay
 + 
ømp_time
;

222 
t_ëa
 /= 1000000ULL;

224 i‡(
	`ö_ømp_time
(
td
)) {

225 
ømp_À·
;

227 
ømp_À·
 = 
	`mtime_sö˚_now
(&
td
->
ïoch
);

228 
ømp_À·
 = (ramp_left + 999) / 1000;

229 i‡(
ømp_À·
 <
t_ëa
)

230 
t_ëa
 -
ømp_À·
;

233 
øã_byãs
 = 
	`ddú_rw_sum
(
td
->
o
.
øã
);

234 i‡(
øã_byãs
) {

235 
r_ëa
 = (
byãs_tŸÆ
 / 1024Ë/ 
øã_byãs
;

236 
r_ëa
 +(
td
->
o
.
°¨t_dñay
 / 1000000ULL);

239 i‡(
r_ëa
 && 
t_ëa
)

240 
ëa_£c
 = 
	`mö
(
r_ëa
, 
t_ëa
);

241 i‡(
r_ëa
)

242 
ëa_£c
 = 
r_ëa
;

243 i‡(
t_ëa
)

244 
ëa_£c
 = 
t_ëa
;

246 
ëa_£c
 = 0;

251 
ëa_£c
 = 0;

254  
ëa_£c
;

255 
	}
}

257 
	$ˇlc_øã
(
unifõd_rw_ªp
, 
mtime
,

258 *
io_byãs
,

259 *
¥ev_io_byãs
, *
øã
)

261 
i
;

263 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

264 
diff
;

266 
diff
 = 
io_byãs
[
i
] - 
¥ev_io_byãs
[i];

267 i‡(
unifõd_rw_ªp
) {

268 
øã
[
i
] = 0;

269 
øã
[0] +((1000 * 
diff
Ë/ 
mtime
) / 1024;

271 
øã
[
i
] = ((1000 * 
diff
Ë/ 
mtime
) / 1024;

273 
¥ev_io_byãs
[
i
] = 
io_byãs
[i];

275 
	}
}

277 
	$ˇlc_i›s
(
unifõd_rw_ªp
, 
mtime
,

278 *
io_i›s
,

279 *
¥ev_io_i›s
, *
i›s
)

281 
i
;

283 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

284 
diff
;

286 
diff
 = 
io_i›s
[
i
] - 
¥ev_io_i›s
[i];

287 i‡(
unifõd_rw_ªp
) {

288 
i›s
[
i
] = 0;

289 
i›s
[0] +(
diff
 * 1000Ë/ 
mtime
;

291 
i›s
[
i
] = (
diff
 * 1000Ë/ 
mtime
;

293 
¥ev_io_i›s
[
i
] = 
io_i›s
[i];

295 
	}
}

301 
	$ˇlc_thªad_°©us
(
jobs_ëa
 *
je
, 
f‹˚
)

303 
thªad_d©a
 *
td
;

304 
i
, 
unifõd_rw_ªp
;

305 
øã_time
, 
di•_time
, 
bw_avg_time
, *
ëa_£cs
;

306 
io_byãs
[
DDIR_RWDIR_CNT
];

307 
io_i›s
[
DDIR_RWDIR_CNT
];

308 
timevÆ
 
now
;

310 
øã_io_byãs
[
DDIR_RWDIR_CNT
];

311 
di•_io_byãs
[
DDIR_RWDIR_CNT
];

312 
di•_io_i›s
[
DDIR_RWDIR_CNT
];

313 
timevÆ
 
øã_¥ev_time
, 
di•_¥ev_time
;

315 i‡(!
f‹˚
) {

316 i‡(
ouçut_f‹m©
 !
FIO_OUTPUT_NORMAL
 &&

317 
f_out
 =
°dout
)

319 i‡(
ãmp_°Æl_ts
 || 
ëa_¥öt
 =
FIO_ETA_NEVER
)

322 i‡(!
	`ißây
(
STDOUT_FILENO
Ë&& (
ëa_¥öt
 !
FIO_ETA_ALWAYS
))

326 i‡(!
	`ddú_rw_sum
(
øã_io_byãs
))

327 
	`fûl_°¨t_time
(&
øã_¥ev_time
);

328 i‡(!
	`ddú_rw_sum
(
di•_io_byãs
))

329 
	`fûl_°¨t_time
(&
di•_¥ev_time
);

331 
ëa_£cs
 = 
	`mÆloc
(
thªad_numbî
 * ());

332 
	`mem£t
(
ëa_£cs
, 0, 
thªad_numbî
 * ());

334 
je
->
ñ≠£d_£c
 = (
	`mtime_sö˚_gíesis
() + 999) / 1000;

336 
io_byãs
[
DDIR_READ
] = io_byãs[
DDIR_WRITE
] = io_byãs[
DDIR_TRIM
] = 0;

337 
io_i›s
[
DDIR_READ
] = io_i›s[
DDIR_WRITE
] = io_i›s[
DDIR_TRIM
] = 0;

338 
bw_avg_time
 = 
ULONG_MAX
;

339 
unifõd_rw_ªp
 = 0;

340 
	`f‹_óch_td
(
td
, 
i
) {

341 
unifõd_rw_ªp
 +
td
->
o
.unified_rw_rep;

342 i‡(
	`is_powî_of_2
(
td
->
o
.
kb_ba£
))

343 
je
->
is_pow2
 = 1;

344 
je
->
unô_ba£
 = 
td
->
o
.unit_base;

345 i‡(
td
->
o
.
bw_avg_time
 < bw_avg_time)

346 
bw_avg_time
 = 
td
->
o
.bw_avg_time;

347 i‡(
td
->
run°©e
 =
TD_RUNNING
 ||Åd->run°©ê=
TD_VERIFYING


348 || 
td
->
run°©e
 =
TD_FSYNCING


349 || 
td
->
run°©e
 =
TD_PRE_READING


350 || 
td
->
run°©e
 =
TD_FINISHING
) {

351 
je
->
ƒ_ru¬ög
++;

352 i‡(
	`td_ªad
(
td
)) {

353 
je
->
t_øã
[0] +
td
->
o
.
øã
[
DDIR_READ
];

354 
je
->
t_i›s
[0] +
td
->
o
.
øã_i›s
[
DDIR_READ
];

355 
je
->
m_øã
[0] +
td
->
o
.
øãmö
[
DDIR_READ
];

356 
je
->
m_i›s
[0] +
td
->
o
.
øã_i›s_mö
[
DDIR_READ
];

358 i‡(
	`td_wrôe
(
td
)) {

359 
je
->
t_øã
[1] +
td
->
o
.
øã
[
DDIR_WRITE
];

360 
je
->
t_i›s
[1] +
td
->
o
.
øã_i›s
[
DDIR_WRITE
];

361 
je
->
m_øã
[1] +
td
->
o
.
øãmö
[
DDIR_WRITE
];

362 
je
->
m_i›s
[1] +
td
->
o
.
øã_i›s_mö
[
DDIR_WRITE
];

364 i‡(
	`td_åim
(
td
)) {

365 
je
->
t_øã
[2] +
td
->
o
.
øã
[
DDIR_TRIM
];

366 
je
->
t_i›s
[2] +
td
->
o
.
øã_i›s
[
DDIR_TRIM
];

367 
je
->
m_øã
[2] +
td
->
o
.
øãmö
[
DDIR_TRIM
];

368 
je
->
m_i›s
[2] +
td
->
o
.
øã_i›s_mö
[
DDIR_TRIM
];

371 
je
->
fûes_›í
 +
td
->
ƒ_›í_fûes
;

372 } i‡(
td
->
run°©e
 =
TD_RAMP
) {

373 
je
->
ƒ_ru¬ög
++;

374 
je
->
ƒ_ømp
++;

375 } i‡(
td
->
run°©e
 =
TD_SETTING_UP
) {

376 
je
->
ƒ_ru¬ög
++;

377 
je
->
ƒ_£âög_up
++;

378 } i‡(
td
->
run°©e
 < 
TD_RUNNING
)

379 
je
->
ƒ_≥ndög
++;

381 i‡(
je
->
ñ≠£d_£c
 >= 3)

382 
ëa_£cs
[
i
] = 
	`thªad_ëa
(
td
);

384 
ëa_£cs
[
i
] = 
INT_MAX
;

386 
	`check_°r_upd©e
(
td
);

388 i‡(
td
->
run°©e
 > 
TD_SETTING_UP
) {

389 
ddú
;

391 
ddú
 = 
DDIR_READ
; ddú < 
DDIR_RWDIR_CNT
; ddir++) {

392 i‡(
unifõd_rw_ªp
) {

393 
io_byãs
[0] +
td
->io_byãs[
ddú
];

394 
io_i›s
[0] +
td
->
io_blocks
[
ddú
];

396 
io_byãs
[
ddú
] +
td
->io_bytes[ddir];

397 
io_i›s
[
ddú
] +
td
->
io_blocks
[ddir];

403 i‡(
exôÆl_⁄_ãrmö©e
)

404 
je
->
ëa_£c
 = 
INT_MAX
;

406 
je
->
ëa_£c
 = 0;

408 
	`f‹_óch_td
(
td
, 
i
) {

409 i‡(
exôÆl_⁄_ãrmö©e
) {

410 i‡(
ëa_£cs
[
i
] < 
je
->
ëa_£c
)

411 
je
->
ëa_£c
 = 
ëa_£cs
[
i
];

413 i‡(
ëa_£cs
[
i
] > 
je
->
ëa_£c
)

414 
je
->
ëa_£c
 = 
ëa_£cs
[
i
];

418 
	`‰ì
(
ëa_£cs
);

420 
	`fio_gëtime
(&
now
, 
NULL
);

421 
øã_time
 = 
	`mtime_sö˚
(&
øã_¥ev_time
, &
now
);

423 i‡(
wrôe_bw_log
 && 
øã_time
 > 
bw_avg_time
 && !
	`ö_ømp_time
(
td
)) {

424 
	`ˇlc_øã
(
unifõd_rw_ªp
, 
øã_time
, 
io_byãs
, 
øã_io_byãs
,

425 
je
->
øã
);

426 
	`mem˝y
(&
øã_¥ev_time
, &
now
, (now));

427 
	`add_agg_ßm∂e
(
je
->
øã
[
DDIR_READ
], DDIR_READ, 0);

428 
	`add_agg_ßm∂e
(
je
->
øã
[
DDIR_WRITE
], DDIR_WRITE, 0);

429 
	`add_agg_ßm∂e
(
je
->
øã
[
DDIR_TRIM
], DDIR_TRIM, 0);

432 
di•_time
 = 
	`mtime_sö˚
(&
di•_¥ev_time
, &
now
);

437 i‡(!
f‹˚
 && 
di•_time
 < 900)

440 
	`ˇlc_øã
(
unifõd_rw_ªp
, 
di•_time
, 
io_byãs
, 
di•_io_byãs
, 
je
->
øã
);

441 
	`ˇlc_i›s
(
unifõd_rw_ªp
, 
di•_time
, 
io_i›s
, 
di•_io_i›s
, 
je
->
i›s
);

443 
	`mem˝y
(&
di•_¥ev_time
, &
now
, (now));

445 i‡(!
f‹˚
 && !
je
->
ƒ_ru¬ög
 && !je->
ƒ_≥ndög
)

448 
je
->
ƒ_thªads
 = 
thªad_numbî
;

449 
	`mem˝y
(
je
->
run_°r
,Ñun_°r, 
thªad_numbî
 * ());

451 
	}
}

453 
	$di•œy_thªad_°©us
(
jobs_ëa
 *
je
)

455 
timevÆ
 
di•_ëa_√w_löe
;

456 
ëa_√w_löe_öô
, 
ëa_√w_löe_≥ndög
;

457 
löñí_œ°
;

458 
ëa_good
;

459 
ouçut
[
REAL_MAX_JOBS
 + 512], *
p
 = output;

460 
ëa_°r
[128];

461 
≥rc
 = 0.0;

463 i‡(
je
->
ëa_£c
 !
INT_MAX
 && je->
ñ≠£d_£c
) {

464 
≥rc
 = (Ë
je
->
ñ≠£d_£c
 / (Ë(je->ñ≠£d_£¯+ je->
ëa_£c
);

465 
	`ëa_to_°r
(
ëa_°r
, 
je
->
ëa_£c
);

468 i‡(
ëa_√w_löe_≥ndög
) {

469 
ëa_√w_löe_≥ndög
 = 0;

470 
p
 +
	`•rötf
(p, "\n");

473 
p
 +
	`•rötf
’, "Jobs: %d (f=%d)", 
je
->
ƒ_ru¬ög
, je->
fûes_›í
);

474 i‡(
je
->
m_øã
[0] || je->m_øã[1] || je->
t_øã
[0] || je->t_rate[1]) {

475 *
å
, *
mr
;

477 
mr
 = 
	`num2°r
(
je
->
m_øã
[0] + je->m_øã[1], 4, 0, je->
is_pow2
, 8);

478 
å
 = 
	`num2°r
(
je
->
t_øã
[0] + je->t_øã[1], 4, 0, je->
is_pow2
, 8);

479 
p
 +
	`•rötf
’, ", CR=%s/%†KB/s", 
å
, 
mr
);

480 
	`‰ì
(
å
);

481 
	`‰ì
(
mr
);

482 } i‡(
je
->
m_i›s
[0] || je->m_i›s[1] || je->
t_i›s
[0] || je->t_iops[1]) {

483 
p
 +
	`•rötf
(p, ", CR=%d/%d IOPS",

484 
je
->
t_i›s
[0] + je->t_iops[1],

485 
je
->
m_i›s
[0] + je->m_iops[1]);

487 i‡(
je
->
ëa_£c
 !
INT_MAX
 && je->
ƒ_ru¬ög
) {

488 
≥rc_°r
[32];

489 *
i›s_°r
[
DDIR_RWDIR_CNT
];

490 *
øã_°r
[
DDIR_RWDIR_CNT
];

491 
size_t
 
À·
;

492 
l
;

493 
ddú
;

495 i‡((!
je
->
ëa_£c
 && !
ëa_good
Ë|| je->
ƒ_ømp
 =je->
ƒ_ru¬ög
)

496 
	`°r˝y
(
≥rc_°r
, "-.-% done");

498 
mu…
 = 100.0;

500 i‡(
je
->
ƒ_£âög_up
 && je->
ƒ_ru¬ög
)

501 
mu…
 *(1.0 - (Ë
je
->
ƒ_£âög_up
 / (Ëje->
ƒ_ru¬ög
);

503 
ëa_good
 = 1;

504 
≥rc
 *
mu…
;

505 
	`•rötf
(
≥rc_°r
, "%3.1f%% d⁄e", 
≥rc
);

508 
ddú
 = 
DDIR_READ
; ddú < 
DDIR_RWDIR_CNT
; ddir++) {

509 
øã_°r
[
ddú
] = 
	`num2°r
(
je
->
øã
[ddir], 5,

510 1024, 
je
->
is_pow2
, je->
unô_ba£
);

511 
i›s_°r
[
ddú
] = 
	`num2°r
(
je
->
i›s
[ddir], 4, 1, 0, 0);

514 
À·
 = (
ouçut
Ë- (
p
 - output) - 1;

516 
l
 = 
	`¢¥ötf
(
p
, 
À·
, ": [%s] [%s] [%s/%s/%s /s] [%s/%s/%s iops] [eta %s]",

517 
je
->
run_°r
, 
≥rc_°r
, 
øã_°r
[
DDIR_READ
],

518 
øã_°r
[
DDIR_WRITE
],Ñ©e_°r[
DDIR_TRIM
],

519 
i›s_°r
[
DDIR_READ
], i›s_°r[
DDIR_WRITE
],

520 
i›s_°r
[
DDIR_TRIM
], 
ëa_°r
);

521 
p
 +
l
;

522 i‡(
l
 >0 &&Ü < 
löñí_œ°
)

523 
p
 +
	`•rötf
’, "%*s", 
löñí_œ°
 - 
l
, "");

524 
löñí_œ°
 = 
l
;

526 
ddú
 = 
DDIR_READ
; ddú < 
DDIR_RWDIR_CNT
; ddir++) {

527 
	`‰ì
(
øã_°r
[
ddú
]);

528 
	`‰ì
(
i›s_°r
[
ddú
]);

531 
p
 +
	`•rötf
(p, "\r");

533 
	`¥ötf
("%s", 
ouçut
);

535 i‡(!
ëa_√w_löe_öô
) {

536 
	`fio_gëtime
(&
di•_ëa_√w_löe
, 
NULL
);

537 
ëa_√w_löe_öô
 = 1;

538 } i‡(
ëa_√w_löe
 &&

539 
	`mtime_sö˚_now
(&
di•_ëa_√w_löe
Ë> 
ëa_√w_löe
 * 1000) {

540 
	`fio_gëtime
(&
di•_ëa_√w_löe
, 
NULL
);

541 
ëa_√w_löe_≥ndög
 = 1;

544 
	`fÊush
(
°dout
);

545 
	}
}

547 
	$¥öt_thªad_°©us
()

549 
jobs_ëa
 *
je
;

550 
size_t
 
size
;

552 i‡(!
thªad_numbî
)

555 
size
 = (*
je
Ë+ 
thªad_numbî
 * () + 1;

556 
je
 = 
	`mÆloc
(
size
);

557 
	`mem£t
(
je
, 0, 
size
);

559 i‡(
	`ˇlc_thªad_°©us
(
je
, 0))

560 
	`di•œy_thªad_°©us
(
je
);

562 
	`‰ì
(
je
);

563 
	}
}

565 
	$¥öt_°©us_öô
(
thr_numbî
)

567 
run_°r
[
thr_numbî
] = 'P';

568 
	}
}

	@/home/terekhov/tmp/fio/fio/fifo.c

22 
	~<°dio.h
>

23 
	~<°dlib.h
>

24 
	~<°rög.h
>

26 
	~"fifo.h
"

28 
fifo
 *
	$fifo_Æloc
(
size
)

30 
fifo
 *fifo;

32 
fifo
 = 
	`mÆloc
((fifo));

33 i‡(!
fifo
)

34  
NULL
;

36 
fifo
->
buf„r
 = 
	`mÆloc
(
size
);

37 
fifo
->
size
 = size;

38 
fifo
->
ö
 = fifo->
out
 = 0;

40  
fifo
;

41 
	}
}

43 
	$fifo_‰ì
(
fifo
 *fifo)

45 
	`‰ì
(
fifo
->
buf„r
);

46 
	`‰ì
(
fifo
);

47 
	}
}

49 
	$fifo_put
(
fifo
 *fifo, *
buf„r
, 
Àn
)

51 
l
;

53 
Àn
 = 
	`mö
÷í, 
	`fifo_room
(
fifo
));

56 
l
 = 
	`mö
(
Àn
, 
fifo
->
size
 - (fifo->
ö
 & (fifo->size - 1)));

57 
	`mem˝y
(
fifo
->
buf„r
 + (fifo->
ö
 & (fifo->
size
 - 1)), buf„r, 
l
);

60 
	`mem˝y
(
fifo
->
buf„r
, buf„∏+ 
l
, 
Àn
 -Ü);

67 
fifo
->
ö
 +
Àn
;

69  
Àn
;

70 
	}
}

72 
	$fifo_gë
(
fifo
 *fifo, *
buf
, 
Àn
)

74 
Àn
 = 
	`mö
÷í, 
fifo
->
ö
 - fifo->
out
);

76 i‡(
buf
) {

77 
l
;

82 
l
 = 
	`mö
(
Àn
, 
fifo
->
size
 - (fifo->
out
 & (fifo->size - 1)));

83 
	`mem˝y
(
buf
, 
fifo
->
buf„r
 + (fifo->
out
 & (fifo->
size
 - 1)), 
l
);

88 
	`mem˝y
(
buf
 + 
l
, 
fifo
->
buf„r
, 
Àn
 -Ü);

91 
fifo
->
out
 +
Àn
;

93 i‡(
fifo
->
ö
 =fifo->
out
)

94 
fifo
->
ö
 = fifo->
out
 = 0;

96  
Àn
;

97 
	}
}

	@/home/terekhov/tmp/fio/fio/fifo.h

21 
	sfifo
 {

22 *
	mbuf„r
;

23 
	msize
;

24 
	mö
;

25 
	mout
;

28 
fifo
 *
fifo_Æloc
();

29 
fifo_put
(
fifo
 *, *, );

30 
fifo_gë
(
fifo
 *, *, );

31 
fifo_‰ì
(
fifo
 *);

33 
ölöe
 
	$fifo_Àn
(
fifo
 *fifo)

35  
fifo
->
ö
 - fifo->
out
;

36 
	}
}

38 
ölöe
 
	$fifo_room
(
fifo
 *fifo)

40  
fifo
->
size
 - fifo->
ö
 + fifo->
out
;

41 
	}
}

43 #i‚de‡
mö


44 
	#mö
(
x
,
y
) ({ \

45 
	`ty≥of
(
x
Ë
_x
 = (x); \

46 
	`ty≥of
(
y
Ë
_y
 = (y); \

47 (Ë(&
_x
 =&
_y
); \

48 
_x
 < 
_y
 ? _x : _y; })

	)

51 #i‚de‡
max


52 
	#max
(
x
,
y
) ({ \

53 
	`ty≥of
(
x
Ë
_x
 = (x); \

54 
	`ty≥of
(
y
Ë
_y
 = (y); \

55 (Ë(&
_x
 =&
_y
); \

56 
_x
 > 
_y
 ? _x : _y; })

	)

	@/home/terekhov/tmp/fio/fio/file.h

1 #i‚de‡
FIO_FILE_H


2 
	#FIO_FILE_H


	)

4 
	~<°rög.h
>

5 
	~"compûî/compûî.h
"

6 
	~"io_ddú.h
"

7 
	~"Êi°.h
"

8 
	~"lib/zùf.h
"

9 
	~"lib/axm≠.h
"

10 
	~"lib/lf§.h
"

15 
	efio_fûëy≥
 {

16 
	mFIO_TYPE_FILE
 = 1,

17 
	mFIO_TYPE_BD
,

18 
	mFIO_TYPE_CHAR
,

19 
	mFIO_TYPE_PIPE
,

22 
	efio_fûe_Êags
 {

23 
	mFIO_FILE_›í
 = 1 << 0,

24 
	mFIO_FILE_˛osög
 = 1 << 1,

25 
	mFIO_FILE_exãnd
 = 1 << 2,

26 
	mFIO_FILE_d⁄e
 = 1 << 3,

27 
	mFIO_FILE_size_known
 = 1 << 4,

28 
	mFIO_FILE_hashed
 = 1 << 5,

29 
	mFIO_FILE_∑πül_mm≠
 = 1 << 6,

32 
	efûe_lock_mode
 {

33 
	mFILE_LOCK_NONE
,

34 
	mFILE_LOCK_EXCLUSIVE
,

35 
	mFILE_LOCK_READWRITE
,

43 
	mFIO_FSERVICE_RANDOM
 = 1,

44 
	mFIO_FSERVICE_RR
 = 2,

45 
	mFIO_FSERVICE_SEQ
 = 3,

52 
	efio_ÁŒoˇã_mode
 {

53 
	mFIO_FALLOCATE_NONE
 = 1,

54 
	mFIO_FALLOCATE_POSIX
 = 2,

55 
	mFIO_FALLOCATE_KEEP_SIZE
 = 3,

62 
	sfio_fûe
 {

63 
Êi°_hód
 
	mhash_li°
;

64 
fio_fûëy≥
 
	mfûëy≥
;

66 
	mfd
;

67 
	mshadow_fd
;

68 #ifde‡
WIN32


69 
HANDLE
 
	mhFûe
;

70 
HANDLE
 
	mioCP
;

76 *
	mfûe_«me
;

77 
	mmaj‹
, 
	mmö‹
;

78 
	mfûío
;

80 *
	mmm≠_±r
;

81 
size_t
 
	mmm≠_sz
;

82 
off_t
 
	mmm≠_off
;

87 
uöt64_t
 
	mªÆ_fûe_size
;

88 
uöt64_t
 
	mfûe_off£t
;

89 
uöt64_t
 
	mio_size
;

91 
uöt64_t
 
	mœ°_pos
;

92 
uöt64_t
 
	mœ°_°¨t
;

94 
uöt64_t
 
	mfú°_wrôe
;

95 
uöt64_t
 
	mœ°_wrôe
;

100 
uöt64_t
 
	mígöe_d©a
;

106 
fio_muãx
 *
	mlock
;

107 
fio_rwlock
 *
	mrwlock
;

113 
axm≠
 *
	mio_axm≠
;

115 
fio_lf§
 
	mlf§
;

120 
zùf_°©e
 
	mzùf
;

122 
	mª„ªn˚s
;

123 
fio_fûe_Êags
 
	mÊags
;

125 
disk_utû
 *
	mdu
;

128 
	sfûe_«me
 {

129 
Êi°_hód
 
	mli°
;

130 *
	mfûíame
;

133 
	#FILE_FLAG_FNS
(
«me
) \

134 
ölöe
 
fio_fûe_£t_
##
	`«me
(
fio_fûe
 *
f
) \

136 (
f
)->
Êags
 = (
fio_fûe_Êags
Ë((f)->Êag†| 
FIO_FILE_
##
«me
); \

138 
ölöe
 
fio_fûe_˛ór_
##
	`«me
(
fio_fûe
 *
f
) \

140 (
f
)->
Êags
 = (
fio_fûe_Êags
Ë((f)->Êag†& ~
FIO_FILE_
##
«me
); \

142 
ölöe
 
fio_fûe_
##
	`«me
(
fio_fûe
 *
f
) \

144  ((
f
)->
Êags
 & 
FIO_FILE_
##
«me
) != 0; \

145 }

	)

147 
FILE_FLAG_FNS
(
›í
);

148 
FILE_FLAG_FNS
(
˛osög
);

149 
FILE_FLAG_FNS
(
exãnd
);

150 
FILE_FLAG_FNS
(
d⁄e
);

151 
FILE_FLAG_FNS
(
size_known
);

152 
FILE_FLAG_FNS
(
hashed
);

153 
FILE_FLAG_FNS
(
∑πül_mm≠
);

154 #unde‡
FILE_FLAG_FNS


159 
	gthªad_d©a
;

160 
˛o£_fûes
(
thªad_d©a
 *);

161 
˛o£_™d_‰ì_fûes
(
thªad_d©a
 *);

162 
uöt64_t
 
gë_°¨t_off£t
(
thªad_d©a
 *, 
fio_fûe
 *);

163 
__mu°_check
 
£tup_fûes
(
thªad_d©a
 *);

164 
__mu°_check
 
fûe_övÆid©e_ˇche
(
thªad_d©a
 *, 
fio_fûe
 *);

165 
__mu°_check
 
gíîic_›í_fûe
(
thªad_d©a
 *, 
fio_fûe
 *);

166 
__mu°_check
 
gíîic_˛o£_fûe
(
thªad_d©a
 *, 
fio_fûe
 *);

167 
__mu°_check
 
gíîic_gë_fûe_size
(
thªad_d©a
 *, 
fio_fûe
 *);

168 
__mu°_check
 
fûe_lookup_›í
(
fio_fûe
 *
f
, 
Êags
);

169 
__mu°_check
 
¥e_ªad_fûes
(
thªad_d©a
 *);

170 
add_fûe
(
thªad_d©a
 *, const *, , );

171 
add_fûe_ex˛usive
(
thªad_d©a
 *, const *);

172 
gë_fûe
(
fio_fûe
 *);

173 
__mu°_check
 
put_fûe
(
thªad_d©a
 *, 
fio_fûe
 *);

174 
put_fûe_log
(
thªad_d©a
 *, 
fio_fûe
 *);

175 
lock_fûe
(
thªad_d©a
 *, 
fio_fûe
 *, 
fio_ddú
);

176 
u∆ock_fûe
(
thªad_d©a
 *, 
fio_fûe
 *);

177 
u∆ock_fûe_Æl
(
thªad_d©a
 *, 
fio_fûe
 *);

178 
add_dú_fûes
(
thªad_d©a
 *, const *);

179 
öô_øndom_m≠
(
thªad_d©a
 *);

180 
dup_fûes
(
thªad_d©a
 *, thread_data *);

181 
gë_fûío
(
thªad_d©a
 *, const *);

182 
‰ì_ªÀa£_fûes
(
thªad_d©a
 *);

183 
fûe£tup_mem_‰ì
();

184 
fio_fûe_ª£t
(
thªad_d©a
 *, 
fio_fûe
 *);

185 
fio_fûes_d⁄e
(
thªad_d©a
 *);

	@/home/terekhov/tmp/fio/fio/filehash.c

1 
	~<°dlib.h
>

2 
	~<as£π.h
>

4 
	~"fio.h
"

5 
	~"Êi°.h
"

6 
	~"hash.h
"

7 
	~"fûehash.h
"

9 
	#HASH_BUCKETS
 512

	)

10 
	#HASH_MASK
 (
HASH_BUCKETS
 - 1)

	)

12 
	gfûe_hash_size
 = 
HASH_BUCKETS
 * (
Êi°_hód
);

14 
Êi°_hód
 *
	gfûe_hash
;

15 
fio_muãx
 *
	ghash_lock
;

17 
	$hash
(c⁄° *
«me
)

19  
	`jhash
(
«me
, 
	`°æí
“ame), 0Ë& 
HASH_MASK
;

20 
	}
}

22 
	$fio_fûe_hash_lock
()

24 i‡(
hash_lock
)

25 
	`fio_muãx_down
(
hash_lock
);

26 
	}
}

28 
	$fio_fûe_hash_u∆ock
()

30 i‡(
hash_lock
)

31 
	`fio_muãx_up
(
hash_lock
);

32 
	}
}

34 
	$ªmove_fûe_hash
(
fio_fûe
 *
f
)

36 
	`fio_muãx_down
(
hash_lock
);

38 i‡(
	`fio_fûe_hashed
(
f
)) {

39 
	`as£π
(!
	`Êi°_em±y
(&
f
->
hash_li°
));

40 
	`Êi°_dñ_öô
(&
f
->
hash_li°
);

41 
	`fio_fûe_˛ór_hashed
(
f
);

44 
	`fio_muãx_up
(
hash_lock
);

45 
	}
}

47 
fio_fûe
 *
	$__lookup_fûe_hash
(c⁄° *
«me
)

49 
Êi°_hód
 *
buckë
 = &
fûe_hash
[
	`hash
(
«me
)];

50 
Êi°_hód
 *
n
;

52 
	`Êi°_f‹_óch
(
n
, 
buckë
) {

53 
fio_fûe
 *
f
 = 
	`Êi°_íåy
(
n
, fio_fûe, 
hash_li°
);

55 i‡(!
f
->
fûe_«me
)

58 i‡(!
	`°rcmp
(
f
->
fûe_«me
, 
«me
)) {

59 
	`as£π
(
f
->
fd
 != -1);

60  
f
;

64  
NULL
;

65 
	}
}

67 
fio_fûe
 *
	$lookup_fûe_hash
(c⁄° *
«me
)

69 
fio_fûe
 *
f
;

71 
	`fio_muãx_down
(
hash_lock
);

72 
f
 = 
	`__lookup_fûe_hash
(
«me
);

73 
	`fio_muãx_up
(
hash_lock
);

74  
f
;

75 
	}
}

77 
fio_fûe
 *
	$add_fûe_hash
(
fio_fûe
 *
f
)

79 
fio_fûe
 *
Æüs
;

81 i‡(
	`fio_fûe_hashed
(
f
))

82  
NULL
;

84 
	`INIT_FLIST_HEAD
(&
f
->
hash_li°
);

86 
	`fio_muãx_down
(
hash_lock
);

88 
Æüs
 = 
	`__lookup_fûe_hash
(
f
->
fûe_«me
);

89 i‡(!
Æüs
) {

90 
	`fio_fûe_£t_hashed
(
f
);

91 
	`Êi°_add_èû
(&
f
->
hash_li°
, &
fûe_hash
[
	`hash
(f->
fûe_«me
)]);

94 
	`fio_muãx_up
(
hash_lock
);

95  
Æüs
;

96 
	}
}

98 
	$fûe_hash_exô
()

100 
i
, 
has_íåõs
 = 0;

102 
	`fio_muãx_down
(
hash_lock
);

103 
i
 = 0; i < 
HASH_BUCKETS
; i++)

104 
has_íåõs
 +!
	`Êi°_em±y
(&
fûe_hash
[
i
]);

105 
	`fio_muãx_up
(
hash_lock
);

107 i‡(
has_íåõs
)

108 
	`log_îr
("fio: file hashÇotÉmpty onÉxit\n");

110 
fûe_hash
 = 
NULL
;

111 
	`fio_muãx_ªmove
(
hash_lock
);

112 
hash_lock
 = 
NULL
;

113 
	}
}

115 
	$fûe_hash_öô
(*
±r
)

117 
i
;

119 
fûe_hash
 = 
±r
;

120 
i
 = 0; i < 
HASH_BUCKETS
; i++)

121 
	`INIT_FLIST_HEAD
(&
fûe_hash
[
i
]);

123 
hash_lock
 = 
	`fio_muãx_öô
(
FIO_MUTEX_UNLOCKED
);

124 
	}
}

	@/home/terekhov/tmp/fio/fio/filehash.h

1 #i‚de‡
FIO_FILE_HASH_H


2 
	#FIO_FILE_HASH_H


	)

4 
fûe_hash_size
;

6 
fûe_hash_öô
(*);

7 
fûe_hash_exô
();

8 
fio_fûe
 *
lookup_fûe_hash
(const *);

9 
fio_fûe
 *
add_fûe_hash
(fio_file *);

10 
ªmove_fûe_hash
(
fio_fûe
 *);

11 
fio_fûe_hash_lock
();

12 
fio_fûe_hash_u∆ock
();

	@/home/terekhov/tmp/fio/fio/filelock.c

6 
	~<öây≥s.h
>

7 
	~<°rög.h
>

8 
	~<as£π.h
>

10 
	~"Êi°.h
"

11 
	~"fûñock.h
"

12 
	~"smÆloc.h
"

13 
	~"muãx.h
"

14 
	~"hash.h
"

15 
	~"log.h
"

17 
	sfio_fûñock
 {

18 
uöt32_t
 
	mhash
;

19 
fio_muãx
 
	mlock
;

20 
Êi°_hód
 
	mli°
;

21 
	mª„ªn˚s
;

24 
Êi°_hód
 *
	gfûñock_li°
;

25 
fio_muãx
 *
	gfûñock_lock
;

27 
	$fio_fûñock_öô
()

29 
fûñock_li°
 = 
	`smÆloc
((*filelock_list));

30 i‡(!
fûñock_li°
)

33 
	`INIT_FLIST_HEAD
(
fûñock_li°
);

34 
fûñock_lock
 = 
	`fio_muãx_öô
(
FIO_MUTEX_UNLOCKED
);

35 i‡(!
fûñock_lock
) {

36 
	`s‰ì
(
fûñock_li°
);

41 
	}
}

43 
	$fio_fûñock_exô
()

45 i‡(!
fûñock_li°
)

48 
	`as£π
(
	`Êi°_em±y
(
fûñock_li°
));

49 
	`s‰ì
(
fûñock_li°
);

50 
fûñock_li°
 = 
NULL
;

51 
	`fio_muãx_ªmove
(
fûñock_lock
);

52 
fûñock_lock
 = 
NULL
;

53 
	}
}

55 
fio_fûñock
 *
	$fio_hash_föd
(
uöt32_t
 
hash
)

57 
Êi°_hód
 *
íåy
;

58 
fio_fûñock
 *
ff
;

60 
	`Êi°_f‹_óch
(
íåy
, 
fûñock_li°
) {

61 
ff
 = 
	`Êi°_íåy
(
íåy
, 
fio_fûñock
, 
li°
);

62 i‡(
ff
->
hash
 == hash)

63  
ff
;

66  
NULL
;

67 
	}
}

69 
fio_fûñock
 *
	$fio_hash_gë
(
uöt32_t
 
hash
)

71 
fio_fûñock
 *
ff
;

73 
ff
 = 
	`fio_hash_föd
(
hash
);

74 i‡(!
ff
) {

75 
ff
 = 
	`smÆloc
((*ff));

76 
ff
->
hash
 = hash;

77 
	`__fio_muãx_öô
(&
ff
->
lock
, 
FIO_MUTEX_UNLOCKED
);

78 
ff
->
ª„ªn˚s
 = 0;

79 
	`Êi°_add
(&
ff
->
li°
, 
fûñock_li°
);

82  
ff
;

83 
	}
}

85 
	$fio_åylock_fûe
(c⁄° *
‚ame
)

87 
fio_fûñock
 *
ff
;

88 
uöt32_t
 
hash
;

90 
hash
 = 
	`jhash
(
‚ame
, 
	`°æí
(fname), 0);

92 
	`fio_muãx_down
(
fûñock_lock
);

93 
ff
 = 
	`fio_hash_gë
(
hash
);

94 
ff
->
ª„ªn˚s
++;

95 
	`fio_muãx_up
(
fûñock_lock
);

97 i‡(!
	`fio_muãx_down_åylock
(&
ff
->
lock
))

100 
	`fio_muãx_down
(
fûñock_lock
);

106 i‡(
ff
->
ª„ªn˚s
 != 1) {

107 
ff
->
ª„ªn˚s
--;

108 
ff
 = 
NULL
;

111 
	`fio_muãx_up
(
fûñock_lock
);

113 i‡(
ff
) {

114 
	`fio_muãx_down
(&
ff
->
lock
);

119 
	}
}

121 
	$fio_lock_fûe
(c⁄° *
‚ame
)

123 
fio_fûñock
 *
ff
;

124 
uöt32_t
 
hash
;

126 
hash
 = 
	`jhash
(
‚ame
, 
	`°æí
(fname), 0);

128 
	`fio_muãx_down
(
fûñock_lock
);

129 
ff
 = 
	`fio_hash_gë
(
hash
);

130 
ff
->
ª„ªn˚s
++;

131 
	`fio_muãx_up
(
fûñock_lock
);

133 
	`fio_muãx_down
(&
ff
->
lock
);

134 
	}
}

136 
	$fio_u∆ock_fûe
(c⁄° *
‚ame
)

138 
fio_fûñock
 *
ff
;

139 
uöt32_t
 
hash
;

141 
hash
 = 
	`jhash
(
‚ame
, 
	`°æí
(fname), 0);

143 
	`fio_muãx_down
(
fûñock_lock
);

145 
ff
 = 
	`fio_hash_föd
(
hash
);

146 i‡(
ff
) {

147 
ff
->
ª„ªn˚s
--;

148 
	`fio_muãx_up
(&
ff
->
lock
);

149 i‡(!
ff
->
ª„ªn˚s
) {

150 
	`Êi°_dñ
(&
ff
->
li°
);

151 
	`s‰ì
(
ff
);

154 
	`log_îr
("fio: fileÇot found for unlocking\n");

156 
	`fio_muãx_up
(
fûñock_lock
);

157 
	}
}

	@/home/terekhov/tmp/fio/fio/filelock.h

1 #i‚de‡
FIO_LOCK_FILE_H


2 
	#FIO_LOCK_FILE_H


	)

4 
fio_lock_fûe
(const *);

5 
fio_åylock_fûe
(const *);

6 
fio_u∆ock_fûe
(const *);

8 
fio_fûñock_öô
();

9 
fio_fûñock_exô
();

	@/home/terekhov/tmp/fio/fio/filesetup.c

1 
	~<uni°d.h
>

2 
	~<f˙é.h
>

3 
	~<°rög.h
>

4 
	~<as£π.h
>

5 
	~<dúít.h
>

6 
	~<libgí.h
>

7 
	~<sys/°©.h
>

8 
	~<sys/mm™.h
>

9 
	~<sys/ty≥s.h
>

11 
	~"fio.h
"

12 
	~"smÆloc.h
"

13 
	~"fûehash.h
"

14 
	~"›ti⁄s.h
"

15 
	~"os/os.h
"

16 
	~"hash.h
"

17 
	~"lib/axm≠.h
"

19 #ifde‡
CONFIG_LINUX_FALLOCATE


20 
	~<löux/ÁŒoc.h
>

23 
	groŸ_w¨n
;

25 
FLIST_HEAD
(
fûíame_li°
);

27 
ölöe
 
	$˛ór_îr‹
(
thªad_d©a
 *
td
)

29 
td
->
îr‹
 = 0;

30 
td
->
vîr‹
[0] = '\0';

31 
	}
}

36 
	$exãnd_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

38 
r
, 
√w_œyout
 = 0, 
u∆ök_fûe
 = 0, 
Êags
;

39 
À·
;

40 
bs
;

41 *
b
 = 
NULL
;

43 i‡(
ªad_⁄ly
) {

44 
	`log_îr
("fio:ÑefusingÉxtend of file dueÅoÑead-only\n");

53 i‡(
	`td_ªad
(
td
) ||

54 (
	`td_wrôe
(
td
Ë&&Åd->
o
.
ovîwrôe
 && !td->o.
fûe_≠≥nd
) ||

55 (
	`td_wrôe
(
td
Ë&&Åd->
io_›s
->
Êags
 & 
FIO_NOEXTEND
))

56 
√w_œyout
 = 1;

57 i‡(
	`td_wrôe
(
td
Ë&& !td->
o
.
ovîwrôe
 && !td->o.
fûe_≠≥nd
)

58 
u∆ök_fûe
 = 1;

60 i‡(
u∆ök_fûe
 || 
√w_œyout
) {

61 
	`d¥öt
(
FD_FILE
, "œyouàu∆ök %s\n", 
f
->
fûe_«me
);

62 i‡((
	`u∆ök
(
f
->
fûe_«me
Ë< 0Ë&& (
î∫o
 !
ENOENT
)) {

63 
	`td_vîr‹
(
td
, 
î∫o
, "unlink");

68 
Êags
 = 
O_WRONLY
 | 
O_CREAT
;

69 i‡(
√w_œyout
)

70 
Êags
 |
O_TRUNC
;

72 #ifde‡
WIN32


73 
Êags
 |
_O_BINARY
;

76 
	`d¥öt
(
FD_FILE
, "›í fûê%s, fœg†%x\n", 
f
->
fûe_«me
, 
Êags
);

77 
f
->
fd
 = 
	`›í
(f->
fûe_«me
, 
Êags
, 0644);

78 i‡(
f
->
fd
 < 0) {

79 
	`td_vîr‹
(
td
, 
î∫o
, "open");

83 #ifde‡
CONFIG_POSIX_FALLOCATE


84 i‡(!
td
->
o
.
fûl_devi˚
) {

85 
td
->
o
.
ÁŒoˇã_mode
) {

86 
FIO_FALLOCATE_NONE
:

88 
FIO_FALLOCATE_POSIX
:

89 
	`d¥öt
(
FD_FILE
, "posix_fallocate file %s size %llu\n",

90 
f
->
fûe_«me
,

91 (Ë
f
->
ªÆ_fûe_size
);

93 
r
 = 
	`posix_ÁŒoˇã
(
f
->
fd
, 0, f->
ªÆ_fûe_size
);

94 i‡(
r
 > 0) {

95 
	`log_îr
("fio:Öosix_fallocate fails: %s\n",

96 
	`°ªº‹
(
r
));

99 #ifde‡
CONFIG_LINUX_FALLOCATE


100 
FIO_FALLOCATE_KEEP_SIZE
:

101 
	`d¥öt
(
FD_FILE
,

103 "fûê%†sizê%Œu\n", 
f
->
fûe_«me
,

104 (Ë
f
->
ªÆ_fûe_size
);

106 
r
 = 
	`ÁŒoˇã
(
f
->
fd
, 
FALLOC_FL_KEEP_SIZE
, 0,

107 
f
->
ªÆ_fûe_size
);

108 i‡(
r
 != 0)

109 
	`td_vîr‹
(
td
, 
î∫o
, "fallocate");

114 
	`log_îr
("fio: unknown fallocate mode: %d\n",

115 
td
->
o
.
ÁŒoˇã_mode
);

116 
	`as£π
(0);

121 i‡(!
√w_œyout
)

122 
d⁄e
;

128 i‡(!
td
->
o
.
fûl_devi˚
) {

129 
	`d¥öt
(
FD_FILE
, "åunˇã fûê%s, sizê%Œu\n", 
f
->
fûe_«me
,

130 (Ë
f
->
ªÆ_fûe_size
);

131 i‡(
	`·runˇã
(
f
->
fd
, f->
ªÆ_fûe_size
) == -1) {

132 i‡(
î∫o
 !
EFBIG
) {

133 
	`td_vîr‹
(
td
, 
î∫o
, "ftruncate");

134 
îr
;

139 
b
 = 
	`mÆloc
(
td
->
o
.
max_bs
[
DDIR_WRITE
]);

141 
À·
 = 
f
->
ªÆ_fûe_size
;

142 
À·
 && !
td
->
ãrmö©e
) {

143 
bs
 = 
td
->
o
.
max_bs
[
DDIR_WRITE
];

144 i‡(
bs
 > 
À·
)

145 
bs
 = 
À·
;

147 
	`fûl_io_buf„r
(
td
, 
b
, 
bs
, bs);

149 
r
 = 
	`wrôe
(
f
->
fd
, 
b
, 
bs
);

151 i‡(
r
 > 0) {

152 
À·
 -
r
;

155 i‡(
r
 < 0) {

156 
__e
 = 
î∫o
;

158 i‡(
__e
 =
ENOSPC
) {

159 i‡(
td
->
o
.
fûl_devi˚
)

161 
	`log_öfo
("fio: ENOSPC onÜaying out "

165 
	`td_vîr‹
(
td
, 
î∫o
, "write");

167 
	`td_vîr‹
(
td
, 
EIO
, "write");

173 i‡(
td
->
ãrmö©e
) {

174 
	`d¥öt
(
FD_FILE
, "ãrmö©êu∆ök %s\n", 
f
->
fûe_«me
);

175 
	`u∆ök
(
f
->
fûe_«me
);

176 } i‡(
td
->
o
.
¸óã_fsync
) {

177 i‡(
	`fsync
(
f
->
fd
) < 0) {

178 
	`td_vîr‹
(
td
, 
î∫o
, "fsync");

179 
îr
;

182 i‡(
td
->
o
.
fûl_devi˚
 && !
	`td_wrôe
(td)) {

183 
	`fio_fûe_˛ór_size_known
(
f
);

184 i‡(
	`td_io_gë_fûe_size
(
td
, 
f
))

185 
îr
;

186 i‡(
f
->
io_size
 > f->
ªÆ_fûe_size
)

187 
f
->
io_size
 = f->
ªÆ_fûe_size
;

190 
	`‰ì
(
b
);

191 
d⁄e
:

193 
îr
:

194 
	`˛o£
(
f
->
fd
);

195 
f
->
fd
 = -1;

196 i‡(
b
)

197 
	`‰ì
(
b
);

199 
	}
}

201 
	$¥e_ªad_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

203 
ªt
 = 0, 
r
, 
did_›í
 = 0, 
ﬁd_run°©e
;

204 
À·
;

205 
bs
;

206 *
b
;

208 i‡(
td
->
io_›s
->
Êags
 & 
FIO_PIPEIO
)

211 i‡(!
	`fio_fûe_›í
(
f
)) {

212 i‡(
td
->
io_›s
->
	`›í_fûe
—d, 
f
)) {

213 
	`log_îr
("fio: cannotÖre-read, failedÅo open file\n");

216 
did_›í
 = 1;

219 
ﬁd_run°©e
 = 
	`td_bump_run°©e
(
td
, 
TD_PRE_READING
);

221 
bs
 = 
td
->
o
.
max_bs
[
DDIR_READ
];

222 
b
 = 
	`mÆloc
(
bs
);

223 
	`mem£t
(
b
, 0, 
bs
);

225 i‡(
	`l£ek
(
f
->
fd
, f->
fûe_off£t
, 
SEEK_SET
) < 0) {

226 
	`td_vîr‹
(
td
, 
î∫o
, "lseek");

227 
	`log_îr
("fio: failedÅoÜseekÖre-read file\n");

228 
ªt
 = 1;

229 
îr‹
;

232 
À·
 = 
f
->
io_size
;

234 
À·
 && !
td
->
ãrmö©e
) {

235 i‡(
bs
 > 
À·
)

236 
bs
 = 
À·
;

238 
r
 = 
	`ªad
(
f
->
fd
, 
b
, 
bs
);

240 i‡(
r
 =(Ë
bs
) {

241 
À·
 -
bs
;

244 
	`td_vîr‹
(
td
, 
EIO
, "pre_read");

249 
îr‹
:

250 
	`td_ª°‹e_run°©e
(
td
, 
ﬁd_run°©e
);

252 i‡(
did_›í
)

253 
td
->
io_›s
->
	`˛o£_fûe
—d, 
f
);

255 
	`‰ì
(
b
);

256  
ªt
;

257 
	}
}

259 
	$gë_ønd_fûe_size
(
thªad_d©a
 *
td
)

261 
ªt
, 
sized
;

262 
r
;

264 i‡(
td
->
o
.
u£_os_ønd
) {

265 
r
 = 
	`os_øndom_l⁄g
(&
td
->
fûe_size_°©e
);

266 
sized
 = 
td
->
o
.
fûe_size_high
 -Åd->o.
fûe_size_low
;

267 
ªt
 = (Ë((Ë
sized
 * (
r
 / (
OS_RAND_MAX
 + 1.0)));

269 
r
 = 
	`__ønd
(&
td
->
__fûe_size_°©e
);

270 
sized
 = 
td
->
o
.
fûe_size_high
 -Åd->o.
fûe_size_low
;

271 
ªt
 = (Ë((Ë
sized
 * (
r
 / (
FRAND_MAX
 + 1.0)));

274 
ªt
 +
td
->
o
.
fûe_size_low
;

275 
ªt
 -‘ë % 
td
->
o
.
rw_mö_bs
);

276  
ªt
;

277 
	}
}

279 
	$fûe_size
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

281 
°©
 
°
;

283 i‡(
	`°©
(
f
->
fûe_«me
, &
°
) == -1) {

284 
	`td_vîr‹
(
td
, 
î∫o
, "fstat");

288 
f
->
ªÆ_fûe_size
 = 
°
.
°_size
;

290 
	}
}

292 
	$bdev_size
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

294 
byãs
 = 0;

295 
r
;

297 i‡(
td
->
io_›s
->
	`›í_fûe
—d, 
f
)) {

298 
	`log_îr
("fio: failed opening blockdev %s for size check\n",

299 
f
->
fûe_«me
);

303 
r
 = 
	`blockdev_size
(
f
, &
byãs
);

304 i‡(
r
) {

305 
	`td_vîr‹
(
td
, 
r
, "blockdev_size");

306 
îr
;

309 i‡(!
byãs
) {

310 
	`log_îr
("%s: zîÿsized block devi˚?\n", 
f
->
fûe_«me
);

311 
îr
;

314 
f
->
ªÆ_fûe_size
 = 
byãs
;

315 
td
->
io_›s
->
	`˛o£_fûe
—d, 
f
);

317 
îr
:

318 
td
->
io_›s
->
	`˛o£_fûe
—d, 
f
);

320 
	}
}

322 
	$ch¨_size
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

324 #ifde‡
FIO_HAVE_CHARDEV_SIZE


325 
byãs
 = 0;

326 
r
;

328 i‡(
td
->
io_›s
->
	`›í_fûe
—d, 
f
)) {

329 
	`log_îr
("fio: failed opening blockdev %s for size check\n",

330 
f
->
fûe_«me
);

334 
r
 = 
	`ch¨dev_size
(
f
, &
byãs
);

335 i‡(
r
) {

336 
	`td_vîr‹
(
td
, 
r
, "chardev_size");

337 
îr
;

340 i‡(!
byãs
) {

341 
	`log_îr
("%s: zîÿsized ch¨ devi˚?\n", 
f
->
fûe_«me
);

342 
îr
;

345 
f
->
ªÆ_fûe_size
 = 
byãs
;

346 
td
->
io_›s
->
	`˛o£_fûe
—d, 
f
);

348 
îr
:

349 
td
->
io_›s
->
	`˛o£_fûe
—d, 
f
);

352 
f
->
ªÆ_fûe_size
 = -1ULL;

355 
	}
}

357 
	$gë_fûe_size
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

359 
ªt
 = 0;

361 i‡(
	`fio_fûe_size_known
(
f
))

364 i‡(
f
->
fûëy≥
 =
FIO_TYPE_FILE
)

365 
ªt
 = 
	`fûe_size
(
td
, 
f
);

366 i‡(
f
->
fûëy≥
 =
FIO_TYPE_BD
)

367 
ªt
 = 
	`bdev_size
(
td
, 
f
);

368 i‡(
f
->
fûëy≥
 =
FIO_TYPE_CHAR
)

369 
ªt
 = 
	`ch¨_size
(
td
, 
f
);

371 
f
->
ªÆ_fûe_size
 = -1;

373 i‡(
ªt
)

374  
ªt
;

376 i‡(
f
->
fûe_off£t
 > f->
ªÆ_fûe_size
) {

377 
	`log_îr
("%s: off£àexãnd†íd (%Œu > %Œu)\n", 
td
->
o
.
«me
,

378 (Ë
f
->
fûe_off£t
,

379 (Ë
f
->
ªÆ_fûe_size
);

383 
	`fio_fûe_£t_size_known
(
f
);

385 
	}
}

387 
	$__fûe_övÆid©e_ˇche
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

388 
off
,

389 
Àn
)

391 
ªt
 = 0;

393 i‡(
Àn
 == -1ULL)

394 
Àn
 = 
f
->
io_size
;

395 i‡(
off
 == -1ULL)

396 
off
 = 
f
->
fûe_off£t
;

398 i‡(
Àn
 =-1ULL || 
off
 == -1ULL)

401 
	`d¥öt
(
FD_IO
, "övÆid©êˇchê%s: %Œu/%Œu\n", 
f
->
fûe_«me
, 
off
,

402 
Àn
);

404 i‡(
f
->
mm≠_±r
) {

405 
ªt
 = 
	`posix_madvi£
(
f
->
mm≠_±r
, f->
mm≠_sz
, 
POSIX_MADV_DONTNEED
);

406 #ifde‡
FIO_MADV_FREE


407 i‡(
f
->
fûëy≥
 =
FIO_TYPE_BD
)

408 (Ë
	`posix_madvi£
(
f
->
mm≠_±r
, f->
mm≠_sz
, 
FIO_MADV_FREE
);

410 } i‡(
f
->
fûëy≥
 =
FIO_TYPE_FILE
) {

411 
ªt
 = 
	`posix_Ádvi£
(
f
->
fd
, 
off
, 
Àn
, 
POSIX_FADV_DONTNEED
);

412 } i‡(
f
->
fûëy≥
 =
FIO_TYPE_BD
) {

413 
ªt
 = 
	`blockdev_övÆid©e_ˇche
(
f
);

414 i‡(
ªt
 < 0 && 
î∫o
 =
EACCES
 && 
	`gëeuid
()) {

415 i‡(!
roŸ_w¨n
) {

416 
	`log_îr
("fio: onlyÑoot may flush block "

418 
roŸ_w¨n
 = 1;

420 
ªt
 = 0;

422 } i‡(
f
->
fûëy≥
 =
FIO_TYPE_CHAR
 || f->fûëy≥ =
FIO_TYPE_PIPE
)

423 
ªt
 = 0;

431 i‡(
ªt
) {

432 
	`log_öfo
("fio: cachêövÆid©i⁄ o‡%†Áûed: %s\n", 
f
->
fûe_«me
, 
	`°ªº‹
(
î∫o
));

433 
ªt
 = 0;

438 
	}
}

440 
	$fûe_övÆid©e_ˇche
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

442 i‡(!
	`fio_fûe_›í
(
f
))

445  
	`__fûe_övÆid©e_ˇche
(
td
, 
f
, -1ULL, -1ULL);

446 
	}
}

448 
	$gíîic_˛o£_fûe
(
thªad_d©a
 
fio_unu£d
 *
td
, 
fio_fûe
 *
f
)

450 
ªt
 = 0;

452 
	`d¥öt
(
FD_FILE
, "fd clo£ %s\n", 
f
->
fûe_«me
);

454 
	`ªmove_fûe_hash
(
f
);

456 i‡(
	`˛o£
(
f
->
fd
) < 0)

457 
ªt
 = 
î∫o
;

459 
f
->
fd
 = -1;

461 i‡(
f
->
shadow_fd
 != -1) {

462 
	`˛o£
(
f
->
shadow_fd
);

463 
f
->
shadow_fd
 = -1;

466 
f
->
ígöe_d©a
 = 0;

467  
ªt
;

468 
	}
}

470 
	$fûe_lookup_›í
(
fio_fûe
 *
f
, 
Êags
)

472 
fio_fûe
 *
__f
;

473 
‰om_hash
;

475 
__f
 = 
	`lookup_fûe_hash
(
f
->
fûe_«me
);

476 i‡(
__f
) {

477 
	`d¥öt
(
FD_FILE
, "found fûêö hash %s\n", 
f
->
fûe_«me
);

481 
f
->
lock
 = 
__f
->lock;

482 
‰om_hash
 = 1;

484 
	`d¥öt
(
FD_FILE
, "fûênŸ found i¿hash %s\n", 
f
->
fûe_«me
);

485 
‰om_hash
 = 0;

488 #ifde‡
WIN32


489 
Êags
 |
_O_BINARY
;

492 
f
->
fd
 = 
	`›í
(f->
fûe_«me
, 
Êags
, 0600);

493  
‰om_hash
;

494 
	}
}

496 
	$fûe_˛o£_shadow_fds
(
thªad_d©a
 *
td
)

498 
fio_fûe
 *
f
;

499 
num_˛o£d
 = 0;

500 
i
;

502 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

503 i‡(
f
->
shadow_fd
 == -1)

506 
	`˛o£
(
f
->
shadow_fd
);

507 
f
->
shadow_fd
 = -1;

508 
num_˛o£d
++;

511  
num_˛o£d
;

512 
	}
}

514 
	$gíîic_›í_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

516 
is_°d
 = 0;

517 
Êags
 = 0;

518 
‰om_hash
 = 0;

520 
	`d¥öt
(
FD_FILE
, "fd o≥¿%s\n", 
f
->
fûe_«me
);

522 i‡(
	`td_åim
(
td
Ë&& 
f
->
fûëy≥
 !
FIO_TYPE_BD
) {

523 
	`log_îr
("fio:Årim onlyáppliesÅo block device\n");

527 i‡(!
	`°rcmp
(
f
->
fûe_«me
, "-")) {

528 i‡(
	`td_rw
(
td
)) {

529 
	`log_îr
("fio: can'tÑead/writeÅo stdin/out\n");

532 
is_°d
 = 1;

537 i‡(
	`td_wrôe
(
td
))

538 
f_out
 = 
°dîr
;

541 i‡(
	`td_åim
(
td
))

542 
skù_Êags
;

543 i‡(
td
->
o
.
odúe˘
)

544 
Êags
 |
OS_O_DIRECT
;

545 i‡(
td
->
o
.
ﬂtomic
) {

546 i‡(!
FIO_O_ATOMIC
) {

547 
	`td_vîr‹
(
td
, 
EINVAL
, "OS doesÇot supportátomic IO");

550 
Êags
 |
OS_O_DIRECT
 | 
FIO_O_ATOMIC
;

552 i‡(
td
->
o
.
sync_io
)

553 
Êags
 |
O_SYNC
;

554 i‡(
td
->
o
.
¸óã_⁄_›í
)

555 
Êags
 |
O_CREAT
;

556 
skù_Êags
:

557 i‡(
f
->
fûëy≥
 !
FIO_TYPE_FILE
)

558 
Êags
 |
FIO_O_NOATIME
;

560 
›í_agaö
:

561 i‡(
	`td_wrôe
(
td
)) {

562 i‡(!
ªad_⁄ly
)

563 
Êags
 |
O_RDWR
;

565 i‡(
f
->
fûëy≥
 =
FIO_TYPE_FILE
)

566 
Êags
 |
O_CREAT
;

568 i‡(
is_°d
)

569 
f
->
fd
 = 
	`dup
(
STDOUT_FILENO
);

571 
‰om_hash
 = 
	`fûe_lookup_›í
(
f
, 
Êags
);

572 } i‡(
	`td_ªad
(
td
)) {

573 i‡(
f
->
fûëy≥
 =
FIO_TYPE_CHAR
 && !
ªad_⁄ly
)

574 
Êags
 |
O_RDWR
;

576 
Êags
 |
O_RDONLY
;

578 i‡(
is_°d
)

579 
f
->
fd
 = 
	`dup
(
STDIN_FILENO
);

581 
‰om_hash
 = 
	`fûe_lookup_›í
(
f
, 
Êags
);

583 
Êags
 |
O_RDWR
;

584 
‰om_hash
 = 
	`fûe_lookup_›í
(
f
, 
Êags
);

587 i‡(
f
->
fd
 == -1) {

588 
buf
[
FIO_VERROR_SIZE
];

589 
__e
 = 
î∫o
;

591 i‡(
__e
 =
EPERM
 && (
Êags
 & 
FIO_O_NOATIME
)) {

592 
Êags
 &~
FIO_O_NOATIME
;

593 
›í_agaö
;

595 i‡(
__e
 =
EMFILE
 && 
	`fûe_˛o£_shadow_fds
(
td
))

596 
›í_agaö
;

598 
	`¢¥ötf
(
buf
, (buf), "›í(%s)", 
f
->
fûe_«me
);

600 i‡(
__e
 =
EINVAL
 && (
Êags
 & 
OS_O_DIRECT
)) {

601 
	`log_îr
("fio:ÜooksÜike your file system doesÇot " \

605 
	`td_vîr‹
(
td
, 
__e
, 
buf
);

608 i‡(!
‰om_hash
 && 
f
->
fd
 != -1) {

609 i‡(
	`add_fûe_hash
(
f
)) {

610 
fio_unu£d
 
ªt
;

620 i‡(
f
->
shadow_fd
 == -1)

621 
f
->
shadow_fd
 = f->
fd
;

627 
ªt
 = 
	`gíîic_˛o£_fûe
(
td
, 
f
);

629 
›í_agaö
;

634 
	}
}

636 
	$gíîic_gë_fûe_size
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

638  
	`gë_fûe_size
(
td
, 
f
);

639 
	}
}

644 
	$gë_fûe_sizes
(
thªad_d©a
 *
td
)

646 
fio_fûe
 *
f
;

647 
i
;

648 
îr
 = 0;

650 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

651 
	`d¥öt
(
FD_FILE
, "gë fûêsizêf‹ %p/%d/%p\n", 
f
, 
i
,

652 
f
->
fûe_«me
);

654 i‡(
	`td_io_gë_fûe_size
(
td
, 
f
)) {

655 i‡(
td
->
îr‹
 !
ENOENT
) {

656 
	`log_îr
("%s\n", 
td
->
vîr‹
);

657 
îr
 = 1;

659 
	`˛ór_îr‹
(
td
);

662 i‡(
f
->
ªÆ_fûe_size
 =-1ULL && 
td
->
o
.
size
)

663 
f
->
ªÆ_fûe_size
 = 
td
->
o
.
size
 /Åd->o.
ƒ_fûes
;

666  
îr
;

667 
	}
}

669 
	sfio_mou¡
 {

670 
Êi°_hód
 
	mli°
;

671 c⁄° *
	mba£
;

672 
	m__ba£
[256];

673 
	mkey
;

679 
	$gë_fs_‰ì_cou¡s
(
thªad_d©a
 *
td
)

681 
Êi°_hód
 *
n
, *
tmp
;

682 
ªt
 = 0;

683 
fio_mou¡
 *
fm
;

684 
	`FLIST_HEAD
(
li°
);

685 
fio_fûe
 *
f
;

686 
i
;

688 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

689 
°©
 
sb
;

690 
buf
[256];

692 i‡(
f
->
fûëy≥
 =
FIO_TYPE_BD
 || f->fûëy≥ =
FIO_TYPE_CHAR
) {

693 i‡(
f
->
ªÆ_fûe_size
 != -1ULL)

694 
ªt
 +
f
->
ªÆ_fûe_size
;

696 } i‡(
f
->
fûëy≥
 !
FIO_TYPE_FILE
)

699 
buf
[255] = '\0';

700 
	`°∫˝y
(
buf
, 
f
->
fûe_«me
, 255);

702 i‡(
	`°©
(
buf
, &
sb
) < 0) {

703 i‡(
î∫o
 !
ENOENT
)

705 
	`°r˝y
(
buf
, ".");

706 i‡(
	`°©
(
buf
, &
sb
) < 0)

710 
fm
 = 
NULL
;

711 
	`Êi°_f‹_óch
(
n
, &
li°
) {

712 
fm
 = 
	`Êi°_íåy
(
n
, 
fio_mou¡
, 
li°
);

713 i‡(
fm
->
key
 =
sb
.
°_dev
)

716 
fm
 = 
NULL
;

719 i‡(
fm
)

722 
fm
 = 
	`ˇŒoc
(1, (*fm));

723 
	`°∫˝y
(
fm
->
__ba£
, 
buf
, (fm->__base) - 1);

724 
fm
->
ba£
 = 
	`ba£«me
(fm->
__ba£
);

725 
fm
->
key
 = 
sb
.
°_dev
;

726 
	`Êi°_add
(&
fm
->
li°
, &list);

729 
	`Êi°_f‹_óch_ß„
(
n
, 
tmp
, &
li°
) {

730 
sz
;

732 
fm
 = 
	`Êi°_íåy
(
n
, 
fio_mou¡
, 
li°
);

733 
	`Êi°_dñ
(&
fm
->
li°
);

735 
sz
 = 
	`gë_fs_size
(
fm
->
ba£
);

736 i‡(
sz
 && sz != -1ULL)

737 
ªt
 +
sz
;

739 
	`‰ì
(
fm
);

742  
ªt
;

743 
	}
}

745 
uöt64_t
 
	$gë_°¨t_off£t
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

747 
thªad_›ti⁄s
 *
o
 = &
td
->o;

749 i‡(
o
->
fûe_≠≥nd
 && 
f
->
fûëy≥
 =
FIO_TYPE_FILE
)

750  
f
->
ªÆ_fûe_size
;

752  
td
->
o
.
°¨t_off£t
 +

753 (
td
->
thªad_numbî
 - 1Ë*Åd->
o
.
off£t_ö¸emít
;

754 
	}
}

759 
	$£tup_fûes
(
thªad_d©a
 *
td
)

761 
tŸÆ_size
, 
exãnd_size
;

762 
thªad_›ti⁄s
 *
o
 = &
td
->o;

763 
fio_fûe
 *
f
;

764 
i
, 
ƒ_fs_exåa
 = 0;

765 
îr
 = 0, 
√ed_exãnd
;

766 
ﬁd_°©e
;

767 c⁄° 
bs
 = 
	`td_mö_bs
(
td
);

768 
uöt64_t
 
fs
 = 0;

770 
	`d¥öt
(
FD_FILE
, "setup files\n");

772 
ﬁd_°©e
 = 
	`td_bump_run°©e
(
td
, 
TD_SETTING_UP
);

774 i‡(
o
->
ªad_iﬁog_fûe
)

775 
d⁄e
;

782 i‡(
td
->
io_›s
->
£tup
)

783 
îr
 = 
td
->
io_›s
->
	`£tup
(td);

785 
îr
 = 
	`gë_fûe_sizes
(
td
);

787 i‡(
îr
)

788 
îr_out
;

794 
tŸÆ_size
 = 0;

795 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

796 i‡(
f
->
ªÆ_fûe_size
 == -1ULL)

797 
tŸÆ_size
 = -1ULL;

799 
tŸÆ_size
 +
f
->
ªÆ_fûe_size
;

802 i‡(
o
->
fûl_devi˚
)

803 
td
->
fûl_devi˚_size
 = 
	`gë_fs_‰ì_cou¡s
(td);

808 i‡((!
tŸÆ_size
 ||ÅŸÆ_sizê=-1ULLË&& !
o
->
size
 &&

809 !(
td
->
io_›s
->
Êags
 & 
FIO_NOIO
Ë&& !
o
->
fûl_devi˚
 &&

810 !(
o
->
ƒ_fûes
 && (o->
fûe_size_low
 || o->
fûe_size_high
))) {

811 
	`log_îr
("%s: youÇìdÅÿ•ecify size=\n", 
o
->
«me
);

812 
	`td_vîr‹
(
td
, 
EINVAL
, "total_file_size");

813 
îr_out
;

820 i‡(!
o
->
fûe_size_low
 && o->
ƒ_fûes
) {

821 
uöt64_t
 
Æl_fs
;

823 
fs
 = 
o
->
size
 / o->
ƒ_fûes
;

824 
Æl_fs
 = 
fs
 * 
o
->
ƒ_fûes
;

826 i‡(
Æl_fs
 < 
o
->
size
)

827 
ƒ_fs_exåa
 = (
o
->
size
 - 
Æl_fs
Ë/ 
bs
;

835 
exãnd_size
 = 
tŸÆ_size
 = 0;

836 
√ed_exãnd
 = 0;

837 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

838 
f
->
fûe_off£t
 = 
	`gë_°¨t_off£t
(
td
, f);

840 i‡(!
o
->
fûe_size_low
) {

848 
f
->
io_size
 = 
fs
;

849 i‡(
ƒ_fs_exåa
) {

850 
ƒ_fs_exåa
--;

851 
f
->
io_size
 +
bs
;

854 i‡(!
f
->
io_size
)

855 
f
->
io_size
 = f->
ªÆ_fûe_size
 - f->
fûe_off£t
;

856 } i‡(
f
->
ªÆ_fûe_size
 < 
o
->
fûe_size_low
 ||

857 
f
->
ªÆ_fûe_size
 > 
o
->
fûe_size_high
) {

858 i‡(
f
->
fûe_off£t
 > 
o
->
fûe_size_low
)

859 
îr_off£t
;

864 i‡(
o
->
fûe_size_low
 =o->
fûe_size_high
)

865 
f
->
io_size
 = 
o
->
fûe_size_low
 - f->
fûe_off£t
;

867 
f
->
io_size
 = 
	`gë_ønd_fûe_size
(
td
)

868 - 
f
->
fûe_off£t
;

871 
f
->
io_size
 = f->
ªÆ_fûe_size
 - f->
fûe_off£t
;

873 i‡(
f
->
io_size
 == -1ULL)

874 
tŸÆ_size
 = -1ULL;

876 i‡(
o
->
size_≥r˚¡
)

877 
f
->
io_size
 = (f->io_sizê* 
o
->
size_≥r˚¡
) / 100;

878 
tŸÆ_size
 +
f
->
io_size
;

881 i‡(
f
->
fûëy≥
 =
FIO_TYPE_FILE
 &&

882 (
f
->
io_size
 + f->
fûe_off£t
Ë> f->
ªÆ_fûe_size
 &&

883 !(
td
->
io_›s
->
Êags
 & 
FIO_DISKLESSIO
)) {

884 i‡(!
o
->
¸óã_⁄_›í
) {

885 
√ed_exãnd
++;

886 
exãnd_size
 +(
f
->
io_size
 + f->
fûe_off£t
);

888 
f
->
ªÆ_fûe_size
 = f->
io_size
 + f->
fûe_off£t
;

889 
	`fio_fûe_£t_exãnd
(
f
);

893 i‡(!
o
->
size
 || o->sizê> 
tŸÆ_size
)

894 
o
->
size
 = 
tŸÆ_size
;

896 i‡(
o
->
size
 < 
	`td_mö_bs
(
td
)) {

897 
	`log_îr
("fio: blocksizeÅooÜarge for data set\n");

898 
îr_out
;

904 i‡(
√ed_exãnd
) {

905 
ãmp_°Æl_ts
 = 1;

906 i‡(
ouçut_f‹m©
 =
FIO_OUTPUT_NORMAL
)

907 
	`log_öfo
("%s: Laying out IO file(s) (%u file(s) /"

908 " %ŒuMB)\n", 
o
->
«me
, 
√ed_exãnd
,

909 
exãnd_size
 >> 20);

911 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

912 
ﬁd_Àn
 = -1ULL, 
exãnd_Àn
 = -1ULL;

914 i‡(!
	`fio_fûe_exãnd
(
f
))

917 
	`as£π
(
f
->
fûëy≥
 =
FIO_TYPE_FILE
);

918 
	`fio_fûe_˛ór_exãnd
(
f
);

919 i‡(!
o
->
fûl_devi˚
) {

920 
ﬁd_Àn
 = 
f
->
ªÆ_fûe_size
;

921 
exãnd_Àn
 = 
f
->
io_size
 + f->
fûe_off£t
 -

922 
ﬁd_Àn
;

924 
f
->
ªÆ_fûe_size
 = (f->
io_size
 + f->
fûe_off£t
);

925 
îr
 = 
	`exãnd_fûe
(
td
, 
f
);

926 i‡(
îr
)

929 
îr
 = 
	`__fûe_övÆid©e_ˇche
(
td
, 
f
, 
ﬁd_Àn
,

930 
exãnd_Àn
);

935 i‡(
f
->
fd
 != -1)

936 
	`˛o£
(
f
->
fd
);

938 
f
->
fd
 = -1;

939 i‡(
îr
)

942 
ãmp_°Æl_ts
 = 0;

945 i‡(
îr
)

946 
îr_out
;

948 i‡(!
o
->
z⁄e_size
)

949 
o
->
z⁄e_size
 = o->
size
;

955 i‡(!
o
->
ªad_iﬁog_fûe
) {

956 i‡(
o
->
io_limô
)

957 
td
->
tŸÆ_io_size
 = 
o
->
io_limô
 * o->
lo›s
;

959 
td
->
tŸÆ_io_size
 = 
o
->
size
 * o->
lo›s
;

962 
d⁄e
:

963 i‡(
o
->
¸óã_⁄ly
)

964 
td
->
d⁄e
 = 1;

966 
	`td_ª°‹e_run°©e
(
td
, 
ﬁd_°©e
);

968 
îr_off£t
:

969 
	`log_îr
("%s: youÇìdÅÿ•ecify vÆid off£t=\n", 
o
->
«me
);

970 
îr_out
:

971 
	`td_ª°‹e_run°©e
(
td
, 
ﬁd_°©e
);

973 
	}
}

975 
	$¥e_ªad_fûes
(
thªad_d©a
 *
td
)

977 
fio_fûe
 *
f
;

978 
i
;

980 
	`d¥öt
(
FD_FILE
, "pre_read files\n");

982 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

983 
	`¥e_ªad_fûe
(
td
, 
f
);

987 
	}
}

989 
	$__öô_ønd_di°ributi⁄
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

991 
ønge_size
, 
£ed
;

992 
ƒ™ges
;

993 
uöt64_t
 
fûe_size
;

995 
ønge_size
 = 
	`mö
(
td
->
o
.
mö_bs
[
DDIR_READ
],Åd->o.mö_bs[
DDIR_WRITE
]);

996 
fûe_size
 = 
	`mö
(
f
->
ªÆ_fûe_size
, f->
io_size
);

998 
ƒ™ges
 = (
fûe_size
 + 
ønge_size
 - 1) /Ñange_size;

1000 
£ed
 = 
	`jhash
(
f
->
fûe_«me
, 
	`°æí
(f->fûe_«me), 0Ë* 
td
->
thªad_numbî
;

1001 i‡(!
td
->
o
.
ønd_ª≥©abÀ
)

1002 
£ed
 = 
td
->
ønd_£eds
[4];

1004 i‡(
td
->
o
.
øndom_di°ributi⁄
 =
FIO_RAND_DIST_ZIPF
)

1005 
	`zùf_öô
(&
f
->
zùf
, 
ƒ™ges
, 
td
->
o
.
zùf_thëa
.
u
.f, 
£ed
);

1007 
	`∑ªto_öô
(&
f
->
zùf
, 
ƒ™ges
, 
td
->
o
.
∑ªto_h
.
u
.f, 
£ed
);

1010 
	}
}

1012 
	$öô_ønd_di°ributi⁄
(
thªad_d©a
 *
td
)

1014 
fio_fûe
 *
f
;

1015 
i
;

1016 
°©e
;

1018 i‡(
td
->
o
.
øndom_di°ributi⁄
 =
FIO_RAND_DIST_RANDOM
)

1021 
°©e
 = 
	`td_bump_run°©e
(
td
, 
TD_SETTING_UP
);

1023 
	`f‹_óch_fûe
(
td
, 
f
, 
i
)

1024 
	`__öô_ønd_di°ributi⁄
(
td
, 
f
);

1026 
	`td_ª°‹e_run°©e
(
td
, 
°©e
);

1029 
	}
}

1031 
	$öô_øndom_m≠
(
thªad_d©a
 *
td
)

1033 
blocks
;

1034 
fio_fûe
 *
f
;

1035 
i
;

1037 i‡(
	`öô_ønd_di°ributi⁄
(
td
))

1039 i‡(!
	`td_øndom
(
td
))

1042 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

1043 
uöt64_t
 
fûe_size
 = 
	`mö
(
f
->
ªÆ_fûe_size
, f->
io_size
);

1045 
blocks
 = 
fûe_size
 / (Ë
td
->
o
.
rw_mö_bs
;

1047 i‡(
td
->
o
.
øndom_gíî©‹
 =
FIO_RAND_GEN_LFSR
) {

1048 
£ed
;

1050 
£ed
 = 
td
->
ønd_£eds
[
FIO_RAND_BLOCK_OFF
];

1052 i‡(!
	`lf§_öô
(&
f
->
lf§
, 
blocks
, 
£ed
, 0))

1054 } i‡(!
td
->
o
.
n‹™domm≠
) {

1055 
f
->
io_axm≠
 = 
	`axm≠_√w
(
blocks
);

1056 i‡(
f
->
io_axm≠
)

1058 } i‡(
td
->
o
.
n‹™domm≠
)

1061 i‡(!
td
->
o
.
so·øndomm≠
) {

1062 
	`log_îr
("fio: failedállocatingÑandom map. IfÑunning"

1069 
	`log_öfo
("fio: file %s failedállocatingÑandom map. Running "

1070 "job wôhout.\n", 
f
->
fûe_«me
);

1074 
	}
}

1076 
	$˛o£_fûes
(
thªad_d©a
 *
td
)

1078 
fio_fûe
 *
f
;

1079 
i
;

1081 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

1082 i‡(
	`fio_fûe_›í
(
f
))

1083 
	`td_io_˛o£_fûe
(
td
, 
f
);

1085 
	}
}

1087 
	$˛o£_™d_‰ì_fûes
(
thªad_d©a
 *
td
)

1089 
fio_fûe
 *
f
;

1090 
i
;

1092 
	`d¥öt
(
FD_FILE
, "close files\n");

1094 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

1095 i‡(
	`fio_fûe_›í
(
f
))

1096 
	`td_io_˛o£_fûe
(
td
, 
f
);

1098 
	`ªmove_fûe_hash
(
f
);

1100 i‡(
td
->
o
.
u∆ök
 && 
f
->
fûëy≥
 =
FIO_TYPE_FILE
) {

1101 
	`d¥öt
(
FD_FILE
, "‰ì u∆ök %s\n", 
f
->
fûe_«me
);

1102 
	`u∆ök
(
f
->
fûe_«me
);

1105 
	`s‰ì
(
f
->
fûe_«me
);

1106 
f
->
fûe_«me
 = 
NULL
;

1107 
	`axm≠_‰ì
(
f
->
io_axm≠
);

1108 
f
->
io_axm≠
 = 
NULL
;

1109 
	`s‰ì
(
f
);

1112 
td
->
o
.
fûíame
 = 
NULL
;

1113 
	`‰ì
(
td
->
fûes
);

1114 
	`‰ì
(
td
->
fûe_locks
);

1115 
td
->
fûes_ödex
 = 0;

1116 
td
->
fûes
 = 
NULL
;

1117 
td
->
fûe_locks
 = 
NULL
;

1118 
td
->
o
.
fûe_lock_mode
 = 
FILE_LOCK_NONE
;

1119 
td
->
o
.
ƒ_fûes
 = 0;

1120 
	}
}

1122 
	$gë_fûe_ty≥
(
fio_fûe
 *
f
)

1124 
°©
 
sb
;

1126 i‡(!
	`°rcmp
(
f
->
fûe_«me
, "-"))

1127 
f
->
fûëy≥
 = 
FIO_TYPE_PIPE
;

1129 
f
->
fûëy≥
 = 
FIO_TYPE_FILE
;

1133 i‡(
	`°∫cmp
(
f
->
fûe_«me
, "\\\\.\\", 4) == 0)

1134 
f
->
fûëy≥
 = 
FIO_TYPE_BD
;

1136 i‡(!
	`°©
(
f
->
fûe_«me
, &
sb
)) {

1137 i‡(
	`S_ISBLK
(
sb
.
°_mode
))

1138 
f
->
fûëy≥
 = 
FIO_TYPE_BD
;

1139 i‡(
	`S_ISCHR
(
sb
.
°_mode
))

1140 
f
->
fûëy≥
 = 
FIO_TYPE_CHAR
;

1141 i‡(
	`S_ISFIFO
(
sb
.
°_mode
))

1142 
f
->
fûëy≥
 = 
FIO_TYPE_PIPE
;

1144 
	}
}

1146 
	$__is_Æªady_Æloˇãd
(c⁄° *
‚ame
)

1148 
Êi°_hód
 *
íåy
;

1149 *
fûíame
;

1151 i‡(
	`Êi°_em±y
(&
fûíame_li°
))

1154 
	`Êi°_f‹_óch
(
íåy
, &
fûíame_li°
) {

1155 
fûíame
 = 
	`Êi°_íåy
(
íåy
, 
fûe_«me
, 
li°
)->filename;

1157 i‡(
	`°rcmp
(
fûíame
, 
‚ame
) == 0)

1162 
	}
}

1164 
	$is_Æªady_Æloˇãd
(c⁄° *
‚ame
)

1166 
ªt
;

1168 
	`fio_fûe_hash_lock
();

1169 
ªt
 = 
	`__is_Æªady_Æloˇãd
(
‚ame
);

1170 
	`fio_fûe_hash_u∆ock
();

1171  
ªt
;

1172 
	}
}

1174 
	$£t_Æªady_Æloˇãd
(c⁄° *
‚ame
)

1176 
fûe_«me
 *
‚
;

1178 
‚
 = 
	`mÆloc
((
fûe_«me
));

1179 
‚
->
fûíame
 = 
	`°rdup
(
‚ame
);

1181 
	`fio_fûe_hash_lock
();

1182 i‡(!
	`__is_Æªady_Æloˇãd
(
‚ame
)) {

1183 
	`Êi°_add_èû
(&
‚
->
li°
, &
fûíame_li°
);

1184 
‚
 = 
NULL
;

1186 
	`fio_fûe_hash_u∆ock
();

1188 i‡(
‚
) {

1189 
	`‰ì
(
‚
->
fûíame
);

1190 
	`‰ì
(
‚
);

1192 
	}
}

1195 
	$‰ì_Æªady_Æloˇãd
()

1197 
Êi°_hód
 *
íåy
, *
tmp
;

1198 
fûe_«me
 *
‚
;

1200 i‡(
	`Êi°_em±y
(&
fûíame_li°
))

1203 
	`fio_fûe_hash_lock
();

1204 
	`Êi°_f‹_óch_ß„
(
íåy
, 
tmp
, &
fûíame_li°
) {

1205 
‚
 = 
	`Êi°_íåy
(
íåy
, 
fûe_«me
, 
li°
);

1206 
	`‰ì
(
‚
->
fûíame
);

1207 
	`Êi°_dñ
(&
‚
->
li°
);

1208 
	`‰ì
(
‚
);

1211 
	`fio_fûe_hash_u∆ock
();

1212 
	}
}

1214 
fio_fûe
 *
	$Æloc_√w_fûe
(
thªad_d©a
 *
td
)

1216 
fio_fûe
 *
f
;

1218 
f
 = 
	`smÆloc
((*f));

1219 i‡(!
f
) {

1220 
	`log_îr
("fio: smalloc OOM\n");

1221 
	`as£π
(0);

1222  
NULL
;

1225 
f
->
fd
 = -1;

1226 
f
->
shadow_fd
 = -1;

1227 
	`fio_fûe_ª£t
(
td
, 
f
);

1228  
f
;

1229 
	}
}

1231 
	$add_fûe
(
thªad_d©a
 *
td
, c⁄° *
‚ame
, 
numjob
, 
öc
)

1233 
cur_fûes
 = 
td
->
fûes_ödex
;

1234 
fûe_«me
[
PATH_MAX
];

1235 
fio_fûe
 *
f
;

1236 
Àn
 = 0;

1238 
	`d¥öt
(
FD_FILE
, "add fûê%s\n", 
‚ame
);

1240 i‡(
td
->
o
.
dúe˘‹y
)

1241 
Àn
 = 
	`£t_«me_idx
(
fûe_«me
, 
td
->
o
.
dúe˘‹y
, 
numjob
);

1243 
	`•rötf
(
fûe_«me
 + 
Àn
, "%s", 
‚ame
);

1246 i‡(
numjob
 && 
	`is_Æªady_Æloˇãd
(
fûe_«me
))

1249 
f
 = 
	`Æloc_√w_fûe
(
td
);

1251 i‡(
td
->
fûes_size
 <td->
fûes_ödex
) {

1252 
√w_size
 = 
td
->
o
.
ƒ_fûes
 + 1;

1254 
	`d¥öt
(
FD_FILE
, "ªsizêfûê¨øyÅÿ%d fûes\n", 
√w_size
);

1256 
td
->
fûes
 = 
	`ªÆloc
—d->fûes, 
√w_size
 * (
f
));

1257 i‡(
td
->
fûes
 =
NULL
) {

1258 
	`log_îr
("fio:Ñealloc OOM\n");

1259 
	`as£π
(0);

1261 i‡(
td
->
o
.
fûe_lock_mode
 !
FILE_LOCK_NONE
) {

1262 
td
->
fûe_locks
 = 
	`ªÆloc
—d->fûe_locks, 
√w_size
);

1263 i‡(!
td
->
fûe_locks
) {

1264 
	`log_îr
("fio:Ñealloc OOM\n");

1265 
	`as£π
(0);

1267 
td
->
fûe_locks
[
cur_fûes
] = 
FILE_LOCK_NONE
;

1269 
td
->
fûes_size
 = 
√w_size
;

1271 
td
->
fûes
[
cur_fûes
] = 
f
;

1272 
f
->
fûío
 = 
cur_fûes
;

1277 i‡(
td
->
io_›s
 && (td->io_›s->
Êags
 & 
FIO_DISKLESSIO
))

1278 
f
->
ªÆ_fûe_size
 = -1ULL;

1280 
f
->
fûe_«me
 = 
	`smÆloc_°rdup
(file_name);

1281 i‡(!
f
->
fûe_«me
) {

1282 
	`log_îr
("fio: smalloc OOM\n");

1283 
	`as£π
(0);

1286 
	`gë_fûe_ty≥
(
f
);

1288 
td
->
o
.
fûe_lock_mode
) {

1289 
FILE_LOCK_NONE
:

1291 
FILE_LOCK_READWRITE
:

1292 
f
->
rwlock
 = 
	`fio_rwlock_öô
();

1294 
FILE_LOCK_EXCLUSIVE
:

1295 
f
->
lock
 = 
	`fio_muãx_öô
(
FIO_MUTEX_UNLOCKED
);

1298 
	`log_îr
("fio: unknow¿lock mode: %d\n", 
td
->
o
.
fûe_lock_mode
);

1299 
	`as£π
(0);

1302 
td
->
fûes_ödex
++;

1303 i‡(
f
->
fûëy≥
 =
FIO_TYPE_FILE
)

1304 
td
->
ƒ_n‹mÆ_fûes
++;

1306 
	`£t_Æªady_Æloˇãd
(
fûe_«me
);

1308 i‡(
öc
)

1309 
td
->
o
.
ƒ_fûes
++;

1311 
	`d¥öt
(
FD_FILE
, "fûê%∞\"%s\"áddedáà%d\n", 
f
, f->
fûe_«me
,

1312 
cur_fûes
);

1314  
cur_fûes
;

1315 
	}
}

1317 
	$add_fûe_ex˛usive
(
thªad_d©a
 *
td
, c⁄° *
‚ame
)

1319 
fio_fûe
 *
f
;

1320 
i
;

1322 
	`f‹_óch_fûe
(
td
, 
f
, 
i
) {

1323 i‡(!
	`°rcmp
(
f
->
fûe_«me
, 
‚ame
))

1324  
i
;

1327  
	`add_fûe
(
td
, 
‚ame
, 0, 1);

1328 
	}
}

1330 
	$gë_fûe
(
fio_fûe
 *
f
)

1332 
	`d¥öt
(
FD_FILE
, "gë fûê%s,Ñef=%d\n", 
f
->
fûe_«me
, f->
ª„ªn˚s
);

1333 
	`as£π
(
	`fio_fûe_›í
(
f
));

1334 
f
->
ª„ªn˚s
++;

1335 
	}
}

1337 
	$put_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

1339 
f_ªt
 = 0, 
ªt
 = 0;

1341 
	`d¥öt
(
FD_FILE
, "puàfûê%s,Ñef=%d\n", 
f
->
fûe_«me
, f->
ª„ªn˚s
);

1343 i‡(!
	`fio_fûe_›í
(
f
)) {

1344 
	`as£π
(
f
->
fd
 == -1);

1348 
	`as£π
(
f
->
ª„ªn˚s
);

1349 i‡(--
f
->
ª„ªn˚s
)

1352 i‡(
	`should_fsync
(
td
Ë&&Åd->
o
.
fsync_⁄_˛o£
) {

1353 
f_ªt
 = 
	`fsync
(
f
->
fd
);

1354 i‡(
f_ªt
 < 0)

1355 
f_ªt
 = 
î∫o
;

1358 i‡(
td
->
io_›s
->
˛o£_fûe
)

1359 
ªt
 = 
td
->
io_›s
->
	`˛o£_fûe
—d, 
f
);

1361 i‡(!
ªt
)

1362 
ªt
 = 
f_ªt
;

1364 
td
->
ƒ_›í_fûes
--;

1365 
	`fio_fûe_˛ór_›í
(
f
);

1366 
	`as£π
(
f
->
fd
 == -1);

1367  
ªt
;

1368 
	}
}

1370 
	$lock_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
, 
fio_ddú
 
ddú
)

1372 i‡(!
f
->
lock
 || 
td
->
o
.
fûe_lock_mode
 =
FILE_LOCK_NONE
)

1375 i‡(
td
->
o
.
fûe_lock_mode
 =
FILE_LOCK_READWRITE
) {

1376 i‡(
ddú
 =
DDIR_READ
)

1377 
	`fio_rwlock_ªad
(
f
->
rwlock
);

1379 
	`fio_rwlock_wrôe
(
f
->
rwlock
);

1380 } i‡(
td
->
o
.
fûe_lock_mode
 =
FILE_LOCK_EXCLUSIVE
)

1381 
	`fio_muãx_down
(
f
->
lock
);

1383 
td
->
fûe_locks
[
f
->
fûío
] =Åd->
o
.
fûe_lock_mode
;

1384 
	}
}

1386 
	$u∆ock_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

1388 i‡(!
f
->
lock
 || 
td
->
o
.
fûe_lock_mode
 =
FILE_LOCK_NONE
)

1391 i‡(
td
->
o
.
fûe_lock_mode
 =
FILE_LOCK_READWRITE
)

1392 
	`fio_rwlock_u∆ock
(
f
->
rwlock
);

1393 i‡(
td
->
o
.
fûe_lock_mode
 =
FILE_LOCK_EXCLUSIVE
)

1394 
	`fio_muãx_up
(
f
->
lock
);

1396 
td
->
fûe_locks
[
f
->
fûío
] = 
FILE_LOCK_NONE
;

1397 
	}
}

1399 
	$u∆ock_fûe_Æl
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

1401 i‡(
td
->
o
.
fûe_lock_mode
 =
FILE_LOCK_NONE
 || !td->
fûe_locks
)

1403 i‡(
td
->
fûe_locks
[
f
->
fûío
] !
FILE_LOCK_NONE
)

1404 
	`u∆ock_fûe
(
td
, 
f
);

1405 
	}
}

1407 
	$ªcur£_dú
(
thªad_d©a
 *
td
, c⁄° *
dú«me
)

1409 
dúít
 *
dú
;

1410 
ªt
 = 0;

1411 
DIR
 *
D
;

1413 
D
 = 
	`›ídú
(
dú«me
);

1414 i‡(!
D
) {

1415 
buf
[
FIO_VERROR_SIZE
];

1417 
	`¢¥ötf
(
buf
, 
FIO_VERROR_SIZE
, "›ídú(%s)", 
dú«me
);

1418 
	`td_vîr‹
(
td
, 
î∫o
, 
buf
);

1422 (
dú
 = 
	`ªaddú
(
D
)Ë!
NULL
) {

1423 
fuŒ_∑th
[
PATH_MAX
];

1424 
°©
 
sb
;

1426 i‡(!
	`°rcmp
(
dú
->
d_«me
, ".") || !strcmp(dir->d_name, ".."))

1429 
	`•rötf
(
fuŒ_∑th
, "%s%s%s", 
dú«me
, 
FIO_OS_PATH_SEPARATOR
, 
dú
->
d_«me
);

1431 i‡(
	`l°©
(
fuŒ_∑th
, &
sb
) == -1) {

1432 i‡(
î∫o
 !
ENOENT
) {

1433 
	`td_vîr‹
(
td
, 
î∫o
, "stat");

1434 
ªt
 = 1;

1439 i‡(
	`S_ISREG
(
sb
.
°_mode
)) {

1440 
	`add_fûe
(
td
, 
fuŒ_∑th
, 0, 1);

1443 i‡(!
	`S_ISDIR
(
sb
.
°_mode
))

1446 
ªt
 = 
	`ªcur£_dú
(
td
, 
fuŒ_∑th
);

1447 i‡(
ªt
)

1451 
	`˛o£dú
(
D
);

1452  
ªt
;

1453 
	}
}

1455 
	$add_dú_fûes
(
thªad_d©a
 *
td
, c⁄° *
∑th
)

1457 
ªt
 = 
	`ªcur£_dú
(
td
, 
∑th
);

1459 i‡(!
ªt
)

1460 
	`log_öfo
("fio: o≥ndúádded %d fûes\n", 
td
->
o
.
ƒ_fûes
);

1462  
ªt
;

1463 
	}
}

1465 
	$dup_fûes
(
thªad_d©a
 *
td
, thªad_d©®*
‹g
)

1467 
fio_fûe
 *
f
;

1468 
i
;

1470 
	`d¥öt
(
FD_FILE
, "du∞fûes: %d\n", 
‹g
->
fûes_ödex
);

1472 i‡(!
‹g
->
fûes
)

1475 
td
->
fûes
 = 
	`mÆloc
(
‹g
->
fûes_ödex
 * (
f
));

1477 i‡(
td
->
o
.
fûe_lock_mode
 !
FILE_LOCK_NONE
)

1478 
td
->
fûe_locks
 = 
	`mÆloc
(
‹g
->
fûes_ödex
);

1480 
	`f‹_óch_fûe
(
‹g
, 
f
, 
i
) {

1481 
fio_fûe
 *
__f
;

1483 
__f
 = 
	`Æloc_√w_fûe
(
td
);

1485 i‡(
f
->
fûe_«me
) {

1486 
__f
->
fûe_«me
 = 
	`smÆloc_°rdup
(
f
->file_name);

1487 i‡(!
__f
->
fûe_«me
) {

1488 
	`log_îr
("fio: smalloc OOM\n");

1489 
	`as£π
(0);

1492 
__f
->
fûëy≥
 = 
f
->filetype;

1495 i‡(
td
->
o
.
fûe_lock_mode
 =
FILE_LOCK_EXCLUSIVE
)

1496 
__f
->
lock
 = 
f
->lock;

1497 i‡(
td
->
o
.
fûe_lock_mode
 =
FILE_LOCK_READWRITE
)

1498 
__f
->
rwlock
 = 
f
->rwlock;

1500 
td
->
fûes
[
i
] = 
__f
;

1502 
	}
}

1507 
	$gë_fûío
(
thªad_d©a
 *
td
, c⁄° *
‚ame
)

1509 
fio_fûe
 *
f
;

1510 
i
;

1512 
	`f‹_óch_fûe
(
td
, 
f
, 
i
)

1513 i‡(!
	`°rcmp
(
f
->
fûe_«me
, 
‚ame
))

1514  
i
;

1517 
	}
}

1522 
	$‰ì_ªÀa£_fûes
(
thªad_d©a
 *
td
)

1524 
	`˛o£_fûes
(
td
);

1525 
td
->
fûes_ödex
 = 0;

1526 
td
->
ƒ_n‹mÆ_fûes
 = 0;

1527 
	}
}

1529 
	$fio_fûe_ª£t
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

1531 
f
->
œ°_pos
 = f->
fûe_off£t
;

1532 
f
->
œ°_°¨t
 = -1ULL;

1533 i‡(
f
->
io_axm≠
)

1534 
	`axm≠_ª£t
(
f
->
io_axm≠
);

1535 i‡(
td
->
o
.
øndom_gíî©‹
 =
FIO_RAND_GEN_LFSR
)

1536 
	`lf§_ª£t
(&
f
->
lf§
, 
td
->
ønd_£eds
[
FIO_RAND_BLOCK_OFF
]);

1537 
	}
}

1539 
	$fio_fûes_d⁄e
(
thªad_d©a
 *
td
)

1541 
fio_fûe
 *
f
;

1542 
i
;

1544 
	`f‹_óch_fûe
(
td
, 
f
, 
i
)

1545 i‡(!
	`fio_fûe_d⁄e
(
f
))

1549 
	}
}

1552 
	$fûe£tup_mem_‰ì
()

1554 
	`‰ì_Æªady_Æloˇãd
();

1555 
	}
}

	@/home/terekhov/tmp/fio/fio/fio.c

24 
	~<uni°d.h
>

25 
	~<loˇÀ.h
>

26 
	~<time.h
>

28 
	~"fio.h
"

29 
	~"smÆloc.h
"

31 
	$maö
(
¨gc
, *
¨gv
[], *
ívp
[])

33 i‡(
	`öôülize_fio
(
ívp
))

36 #i‡!
	`deföed
(
CONFIG_GETTIMEOFDAY
Ë&& !deföed(
CONFIG_CLOCK_GETTIME
)

40 i‡(
	`∑r£_›ti⁄s
(
¨gc
, 
¨gv
))

43 
	`fio_time_öô
();

45 i‡(
ƒ_˛õ¡s
) {

46 i‡(
	`fio_°¨t_Æl_˛õ¡s
())

48  
	`fio_h™dÀ_˛õ¡s
(&
fio_˛õ¡_›s
);

50  
	`fio_backíd
();

51 
	}
}

	@/home/terekhov/tmp/fio/fio/fio.h

1 #i‚de‡
FIO_H


2 
	#FIO_H


	)

4 
	~<sched.h
>

5 
	~<limôs.h
>

6 
	~<±hªad.h
>

7 
	~<sys/time.h
>

8 
	~<sys/ªsour˚.h
>

9 
	~<î∫o.h
>

10 
	~<°dlib.h
>

11 
	~<°dio.h
>

12 
	~<uni°d.h
>

13 
	~<°rög.h
>

14 
	~<öây≥s.h
>

15 
	~<as£π.h
>

17 
	~"compûî/compûî.h
"

18 
	~"thªad_›ti⁄s.h
"

19 
	~"Êi°.h
"

20 
	~"fifo.h
"

21 
	~"¨ch/¨ch.h
"

22 
	~"os/os.h
"

23 
	~"muãx.h
"

24 
	~"log.h
"

25 
	~"debug.h
"

26 
	~"fûe.h
"

27 
	~"io_ddú.h
"

28 
	~"i€ngöe.h
"

29 
	~"iﬁog.h
"

30 
	~"hñ≥rs.h
"

31 
	~"›ti⁄s.h
"

32 
	~"¥ofûe.h
"

33 
	~"fio_time.h
"

34 
	~"gëtime.h
"

35 
	~"lib/gë›t.h
"

36 
	~"lib/ønd.h
"

37 
	~"lib/rbåì.h
"

38 
	~"˛õ¡.h
"

39 
	~"£rvî.h
"

40 
	~"°©.h
"

41 
	~"Êow.h
"

42 
	~"io_u_queue.h
"

44 #ifde‡
CONFIG_SOLARISAIO


45 
	~<sys/asynch.h
>

48 #ifde‡
CONFIG_LIBNUMA


49 
	~<löux/mempﬁicy.h
>

50 
	~<numa.h
>

55 
	#MPOL_LOCAL
 
MPOL_MAX


	)

62 
	mRW_SEQ_SEQ
 = 0,

63 
	mRW_SEQ_IDENT
,

67 
	mTD_F_VER_BACKLOG
 = 1,

68 
	mTD_F_TRIM_BACKLOG
 = 2,

69 
	mTD_F_READ_IOLOG
 = 4,

70 
	mTD_F_REFILL_BUFFERS
 = 8,

71 
	mTD_F_SCRAMBLE_BUFFERS
 = 16,

72 
	mTD_F_VER_NONE
 = 32,

73 
	mTD_F_PROFILE_OPS
 = 64,

74 
	mTD_F_COMPRESS
 = 128,

75 
	mTD_F_NOIO
 = 256,

79 
	mFIO_RAND_BS_OFF
 = 0,

80 
	mFIO_RAND_VER_OFF
,

81 
	mFIO_RAND_MIX_OFF
,

82 
	mFIO_RAND_FILE_OFF
,

83 
	mFIO_RAND_BLOCK_OFF
,

84 
	mFIO_RAND_FILE_SIZE_OFF
,

85 
	mFIO_RAND_TRIM_OFF
,

86 
	mFIO_RAND_BUF_OFF
,

87 
	mFIO_RAND_SEQ_RAND_READ_OFF
,

88 
	mFIO_RAND_SEQ_RAND_WRITE_OFF
,

89 
	mFIO_RAND_SEQ_RAND_TRIM_OFF
,

90 
	mFIO_RAND_START_DELAY
,

91 
	mFIO_RAND_NR_OFFS
,

97 
	sthªad_d©a
 {

98 
thªad_›ti⁄s
 
	mo
;

99 
	mÊags
;

100 *
	meo
;

101 
	mvîr‹
[
FIO_VERROR_SIZE
];

102 
±hªad_t
 
	mthªad
;

103 
	mthªad_numbî
;

104 
	mgroupid
;

105 
thªad_°©
 
	mts
;

107 
	m˛õ¡_ty≥
;

109 
io_log
 *
	m¶©_log
;

110 
io_log
 *
	m˛©_log
;

111 
io_log
 *
	mœt_log
;

112 
io_log
 *
	mbw_log
;

113 
io_log
 *
	mi›s_log
;

115 
uöt64_t
 
	m°©_io_byãs
[
DDIR_RWDIR_CNT
];

116 
timevÆ
 
	mbw_ßm∂e_time
;

118 
uöt64_t
 
	m°©_io_blocks
[
DDIR_RWDIR_CNT
];

119 
timevÆ
 
	mi›s_ßm∂e_time
;

121 vﬁ©ûê
	mupd©e_rußge
;

122 
fio_muãx
 *
	mrußge_£m
;

123 
rußge
 
	mru_°¨t
;

124 
rußge
 
	mru_íd
;

126 
fio_fûe
 **
	mfûes
;

127 *
	mfûe_locks
;

128 
	mfûes_size
;

129 
	mfûes_ödex
;

130 
	mƒ_›í_fûes
;

131 
	mƒ_d⁄e_fûes
;

132 
	mƒ_n‹mÆ_fûes
;

134 
	m√xt_fûe
;

135 
os_øndom_°©e_t
 
	m√xt_fûe_°©e
;

136 
‰™d_°©e
 
	m__√xt_fûe_°©e
;

138 
	mîr‹
;

139 
	msig
;

140 
	md⁄e
;

141 
pid_t
 
	mpid
;

142 *
	m‹ig_buf„r
;

143 
size_t
 
	m‹ig_buf„r_size
;

144 vﬁ©ûê
	mãrmö©e
;

145 vﬁ©ûê
	mrun°©e
;

146 
	mœ°_was_sync
;

147 
fio_ddú
 
	mœ°_ddú
;

149 
	mmm≠fd
;

151 *
	miﬁog_buf
;

152 
FILE
 *
	miﬁog_f
;

154 *
	msysfs_roŸ
;

156 
	mønd_£eds
[
FIO_RAND_NR_OFFS
];

159 
os_øndom_°©e_t
 
	mb§™ge_°©e
;

160 
‰™d_°©e
 
	m__b§™ge_°©e
;

163 
os_øndom_°©e_t
 
	mvîify_°©e
;

164 
‰™d_°©e
 
	m__vîify_°©e
;

167 
os_øndom_°©e_t
 
	måim_°©e
;

168 
‰™d_°©e
 
	m__åim_°©e
;

171 
os_øndom_°©e_t
 
	mdñay_°©e
;

172 
‰™d_°©e
 
	m__dñay_°©e
;

175 
‰™d_°©e
 
	mbuf_°©e
;

177 
	mvîify_b©ch
;

178 
	måim_b©ch
;

180 
	mshm_id
;

186 
i€ngöe_›s
 *
	mio_›s
;

191 
	mcur_dïth
;

196 
	mio_u_queued
;

201 
	mio_u_ö_Êight
;

206 
io_u_rög
 
	mio_u_ªqueues
;

207 
io_u_queue
 
	mio_u_‰ìli°
;

208 
io_u_queue
 
	mio_u_Æl
;

209 
±hªad_muãx_t
 
	mio_u_lock
;

210 
±hªad_c⁄d_t
 
	m‰ì_c⁄d
;

215 
Êi°_hód
 
	mvîify_li°
;

216 
±hªad_t
 *
	mvîify_thªads
;

217 
	mƒ_vîify_thªads
;

218 
±hªad_c⁄d_t
 
	mvîify_c⁄d
;

219 
	mvîify_thªad_exô
;

224 
uöt64_t
 
	møã_bps
[
DDIR_RWDIR_CNT
];

225 
	møã_≥ndög_u¶ìp
[
DDIR_RWDIR_CNT
];

226 
	møã_byãs
[
DDIR_RWDIR_CNT
];

227 
	møã_blocks
[
DDIR_RWDIR_CNT
];

228 
timevÆ
 
	mœ°øã
[
DDIR_RWDIR_CNT
];

230 
uöt64_t
 
	mtŸÆ_io_size
;

231 
uöt64_t
 
	mfûl_devi˚_size
;

233 
	mio_issues
[
DDIR_RWDIR_CNT
];

234 
uöt64_t
 
	mio_blocks
[
DDIR_RWDIR_CNT
];

235 
uöt64_t
 
	mthis_io_blocks
[
DDIR_RWDIR_CNT
];

236 
uöt64_t
 
	mio_byãs
[
DDIR_RWDIR_CNT
];

237 
uöt64_t
 
	mio_skù_byãs
;

238 
uöt64_t
 
	mthis_io_byãs
[
DDIR_RWDIR_CNT
];

239 
uöt64_t
 
	mz⁄e_byãs
;

240 
fio_muãx
 *
	mmuãx
;

246 
os_øndom_°©e_t
 
	møndom_°©e
;

247 
‰™d_°©e
 
	m__øndom_°©e
;

250 
timevÆ
 
	m°¨t
;

251 
timevÆ
 
	mïoch
;

252 
timevÆ
 
	mœ°_issue
;

253 
timevÆ
 
	mtv_ˇche
;

254 
	mtv_ˇche_ƒ
;

255 
	mtv_ˇche_mask
;

256 
	mømp_time_ovî
;

261 
timevÆ
 
	mœãncy_ts
;

262 
	mœãncy_qd
;

263 
	mœãncy_qd_high
;

264 
	mœãncy_qd_low
;

265 
	mœãncy_Áûed
;

266 
uöt64_t
 
	mœãncy_ios
;

267 
	mœãncy_íd_run
;

273 
os_øndom_°©e_t
 
	mrwmix_°©e
;

274 
‰™d_°©e
 
	m__rwmix_°©e
;

276 
	mrwmix_issues
;

277 
fio_ddú
 
	mrwmix_ddú
;

278 
	mddú_£q_ƒ
;

284 
os_øndom_°©e_t
 
	m£q_ønd_°©e
[
DDIR_RWDIR_CNT
];

285 
‰™d_°©e
 
	m__£q_ønd_°©e
[
DDIR_RWDIR_CNT
];

292 
rb_roŸ
 
	mio_hi°_åì
;

293 
Êi°_hód
 
	mio_hi°_li°
;

294 
	mio_hi°_Àn
;

299 
Êi°_hód
 
	mio_log_li°
;

304 
Êi°_hód
 
	måim_li°
;

305 
	måim_íåõs
;

307 
Êi°_hód
 
	m√xt_ønd_li°
;

312 
	mfûe_£rvi˚_ƒ
;

313 
	mfûe_£rvi˚_À·
;

314 
fio_fûe
 *
	mfûe_£rvi˚_fûe
;

316 
	msync_fûe_ønge_ƒ
;

322 
os_øndom_°©e_t
 
	mfûe_size_°©e
;

323 
‰™d_°©e
 
	m__fûe_size_°©e
;

329 
	mtŸÆ_îr_cou¡
;

330 
	mfú°_îr‹
;

332 
fio_Êow
 *
	mÊow
;

337 
¥of_io_›s
 
	m¥of_io_›s
;

338 *
	m¥of_d©a
;

340 *
	mpö√d_mem
;

347 
	mFIO_ETA_AUTO
,

348 
	mFIO_ETA_ALWAYS
,

349 
	mFIO_ETA_NEVER
,

352 
	#__td_vîr‹
(
td
, 
îr
, 
msg
, 
func
) \

354 
____e
 = (
îr
); \

355 i‡((
td
)->
îr‹
) \

357 (
td
)->
îr‹
 = 
____e
; \

358 i‡(!(
td
)->
fú°_îr‹
) \

359 
	`¢¥ötf
(
td
->
vîr‹
, —d->vîr‹), "fûe:%s:%d, func=%s,Éº‹=%s", 
__FILE__
, 
__LINE__
, (
func
), (
msg
)); \

360 } 0)

	)

363 
	#td_˛ór_îr‹
(
td
) \

364 (
td
)->
îr‹
 = 0;

	)

365 
	#td_vîr‹
(
td
, 
îr
, 
func
) \

366 
	`__td_vîr‹
((
td
), (
îr
), 
	`°ªº‹
(”º)), (
func
))

	)

367 
	#td_vmsg
(
td
, 
îr
, 
msg
, 
func
) \

368 
	`__td_vîr‹
((
td
), (
îr
), (
msg
), (
func
))

	)

370 
	#__fio_°rögify_1
(
x
Ë#x

	)

371 
	#__fio_°rögify
(
x
Ë
	`__fio_°rögify_1
(x)

	)

373 
exôÆl_⁄_ãrmö©e
;

374 
thªad_numbî
;

375 
°©_numbî
;

376 
shm_id
;

377 
groupid
;

378 
ouçut_f‹m©
;

379 
≠≥nd_ãr£_ouçut
;

380 
ãmp_°Æl_ts
;

381 
uöçå_t
 
∑ge_mask
, 
∑ge_size
;

382 
ªad_⁄ly
;

383 
ëa_¥öt
;

384 
ëa_√w_löe
;

385 
d⁄e_£cs
;

386 *
job_£˘i⁄
;

387 
fio_gtod_ofÊﬂd
;

388 
fio_gtod_˝u
;

389 
fio_cs
 
fio_˛ock_sour˚
;

390 
fio_˛ock_sour˚_£t
;

391 
w¨nögs_Áèl
;

392 
ãr£_vîsi⁄
;

393 
is_backíd
;

394 
ƒ_˛õ¡s
;

395 
log_sy¶og
;

396 
°©us_öãrvÆ
;

397 c⁄° 
fio_vîsi⁄_°rög
[];

399 
thªad_d©a
 *
thªads
;

401 
ölöe
 
	$fio_ro_check
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

403 
	`as£π
(!(
io_u
->
ddú
 =
DDIR_WRITE
 && !
	`td_wrôe
(
td
)));

404 
	}
}

406 
	#REAL_MAX_JOBS
 2048

	)

408 
ölöe
 
	$should_fsync
(
thªad_d©a
 *
td
)

410 i‡(
td
->
œ°_was_sync
)

412 i‡(
	`td_wrôe
(
td
Ë|| 
	`td_rw
—dË||Åd->
o
.
ovîride_sync
)

416 
	}
}

421 
__mu°_check
 
fio_öô_›ti⁄s
();

422 
__mu°_check
 
∑r£_›ti⁄s
(, **);

423 
∑r£_jobs_öi
(*, , , );

424 
∑r£_cmd_löe
(, **, );

425 
fio_backíd
();

426 
ª£t_fio_°©e
();

427 
˛ór_io_°©e
(
thªad_d©a
 *);

428 
fio_›ti⁄s_∑r£
(
thªad_d©a
 *, **, , );

429 
fio_keyw‹ds_öô
();

430 
fio_cmd_›ti⁄_∑r£
(
thªad_d©a
 *, const *, *);

431 
fio_cmd_i€ngöe_›ti⁄_∑r£
(
thªad_d©a
 *, const *, *);

432 
fio_fûl_deÁu…_›ti⁄s
(
thªad_d©a
 *);

433 
fio_show_›ti⁄_hñp
(const *);

434 
fio_›ti⁄s_£t_i€ngöe_›ts
(
›ti⁄
 *
l⁄g_›ti⁄s
, 
thªad_d©a
 *
td
);

435 
fio_›ti⁄s_dup_™d_öô
(
›ti⁄
 *);

436 
fio_›ti⁄s_mem_du≥
(
thªad_d©a
 *);

437 
›ti⁄s_mem_du≥
(*
d©a
, 
fio_›ti⁄
 *
›ti⁄s
);

438 
td_fûl_ønd_£eds
(
thªad_d©a
 *);

439 
add_job_›ts
(const **, );

440 *
num2°r
(, , , , );

441 
i€ngöe_lﬂd
(
thªad_d©a
 *);

442 
∑r£_dryrun
();

443 
fio_ru¬ög_‹_≥ndög_io_thªads
();

444 
fio_£t_fd_n⁄blockög
(, const *);

446 
uöçå_t
 
∑ge_mask
;

447 
uöçå_t
 
∑ge_size
;

448 
öôülize_fio
(*
ívp
[]);

450 
	#FIO_GETOPT_JOB
 0x89000000

	)

451 
	#FIO_GETOPT_IOENGINE
 0x98000000

	)

452 
	#FIO_NR_OPTIONS
 (
FIO_MAX_OPTS
 + 128)

	)

457 
¥öt_thªad_°©us
();

458 
¥öt_°©us_öô
();

459 *
fio_uöt_to_kmg
(
vÆ
);

468 
	mTD_NOT_CREATED
 = 0,

469 
	mTD_CREATED
,

470 
	mTD_INITIALIZED
,

471 
	mTD_RAMP
,

472 
	mTD_SETTING_UP
,

473 
	mTD_RUNNING
,

474 
	mTD_PRE_READING
,

475 
	mTD_VERIFYING
,

476 
	mTD_FSYNCING
,

477 
	mTD_FINISHING
,

478 
	mTD_EXITED
,

479 
	mTD_REAPED
,

482 
td_£t_run°©e
(
thªad_d©a
 *, );

483 
td_bump_run°©e
(
thªad_d©a
 *, );

484 
td_ª°‹e_run°©e
(
thªad_d©a
 *, );

486 
	#TERMINATE_ALL
 (-1)

	)

487 
fio_ãrmö©e_thªads
();

492 
__mu°_check
 
fio_pö_mem‹y
(
thªad_d©a
 *);

493 
fio_u≈ö_mem‹y
(
thªad_d©a
 *);

494 
__mu°_check
 
Æloˇã_io_mem
(
thªad_d©a
 *);

495 
‰ì_io_mem
(
thªad_d©a
 *);

496 
‰ì_thªads_shm
();

501 
ª£t_Æl_°©s
(
thªad_d©a
 *);

506 #ifde‡
FIO_HAVE_BLKTRACE


507 
is_blkåa˚
(const *, *);

508 
lﬂd_blkåa˚
(
thªad_d©a
 *, const *, );

514 
œt_èrgë_check
(
thªad_d©a
 *);

515 
œt_èrgë_öô
(
thªad_d©a
 *);

516 
œt_èrgë_ª£t
(
thªad_d©a
 *);

518 
	#f‹_óch_td
(
td
, 
i
) \

519 (
i
Ë0, (
td
Ë&
thªads
[0]; (iË< (Ë
thªad_numbî
; (i)++, (td)++)

	)

520 
	#f‹_óch_fûe
(
td
, 
f
, 
i
) \

521 i‡((
td
)->
fûes_ödex
) \

522 (
i
Ë0, (
f
Ë(
td
)->
fûes
[0]; \

523 (
i
Ë< (
td
)->
o
.
ƒ_fûes
 && ((
f
Ë—d)->
fûes
[i]Ë!
NULL
; \

524 (
i
)++)

	)

526 
	#fio_as£π
(
td
, 
c⁄d
) do { \

527 i‡(!(
c⁄d
)) { \

528 *
__foo
 = 
NULL
; \

529 
	`Ârötf
(
°dîr
, "fûe:%s:%d,ás£π %†Áûed\n", 
__FILE__
, 
__LINE__
, #cond); \

530 
	`td_£t_run°©e
((
td
), 
TD_EXITED
); \

531 (
td
)->
îr‹
 = 
EFAULT
; \

532 *
__foo
 = 0; \

534 } 0)

	)

536 
ölöe
 
	$fio_fûl_issue_time
(
thªad_d©a
 *
td
)

538 i‡(
td
->
o
.
ªad_iﬁog_fûe
 ||

539 !
td
->
o
.
dißbÀ_˛©
 || !td->o.
dißbÀ_¶©
 || !td->o.
dißbÀ_bw
)

543 
	}
}

545 
ölöe
 
	$__should_check_øã
(
thªad_d©a
 *
td
,

546 
fio_ddú
 
ddú
)

548 
thªad_›ti⁄s
 *
o
 = &
td
->o;

553 i‡(
o
->
øã
[
ddú
] || o->
øãmö
[ddú] || o->
øã_i›s
[ddir] ||

554 
o
->
øã_i›s_mö
[
ddú
])

558 
	}
}

560 
ölöe
 
	$should_check_øã
(
thªad_d©a
 *
td
,

561 
uöt64_t
 *
byãs_d⁄e
)

563 
ªt
 = 0;

565 i‡(
byãs_d⁄e
[
DDIR_READ
])

566 
ªt
 |
	`__should_check_øã
(
td
, 
DDIR_READ
);

567 i‡(
byãs_d⁄e
[
DDIR_WRITE
])

568 
ªt
 |
	`__should_check_øã
(
td
, 
DDIR_WRITE
);

569 i‡(
byãs_d⁄e
[
DDIR_TRIM
])

570 
ªt
 |
	`__should_check_øã
(
td
, 
DDIR_TRIM
);

572  
ªt
;

573 
	}
}

575 
ölöe
 
	$td_max_bs
(
thªad_d©a
 *
td
)

577 
max_bs
;

579 
max_bs
 = 
	`max
(
td
->
o
.max_bs[
DDIR_READ
],Åd->o.max_bs[
DDIR_WRITE
]);

580  
	`max
(
td
->
o
.
max_bs
[
DDIR_TRIM
], max_bs);

581 
	}
}

583 
ölöe
 
	$td_mö_bs
(
thªad_d©a
 *
td
)

585 
mö_bs
;

587 
mö_bs
 = 
	`mö
(
td
->
o
.mö_bs[
DDIR_READ
],Åd->o.mö_bs[
DDIR_WRITE
]);

588  
	`mö
(
td
->
o
.
mö_bs
[
DDIR_TRIM
], min_bs);

589 
	}
}

591 
ölöe
 
	$is_powî_of_2
(
vÆ
)

593  (
vÆ
 != 0 && ((val & (val - 1)) == 0));

594 
	}
}

600 
ölöe
 
	$td_io_u_lock
(
thªad_d©a
 *
td
)

602 i‡(
td
->
o
.
vîify_async
)

603 
	`±hªad_muãx_lock
(&
td
->
io_u_lock
);

604 
	}
}

606 
ölöe
 
	$td_io_u_u∆ock
(
thªad_d©a
 *
td
)

608 i‡(
td
->
o
.
vîify_async
)

609 
	`±hªad_muãx_u∆ock
(&
td
->
io_u_lock
);

610 
	}
}

612 
ölöe
 
	$td_io_u_‰ì_nŸify
(
thªad_d©a
 *
td
)

614 i‡(
td
->
o
.
vîify_async
)

615 
	`±hªad_c⁄d_sig«l
(&
td
->
‰ì_c⁄d
);

616 
	}
}

618 c⁄° *
fio_gë_¨ch_°rög
();

619 c⁄° *
fio_gë_os_°rög
();

621 #ifde‡
FIO_INTERNAL


622 
	#ARRAY_SIZE
(
x
Ë(((x)Ë/ (((x)[0])))

	)

626 
	mFIO_OUTPUT_TERSE
 = 0,

627 
	mFIO_OUTPUT_JSON
,

628 
	mFIO_OUTPUT_NORMAL
,

632 
	mFIO_RAND_DIST_RANDOM
 = 0,

633 
	mFIO_RAND_DIST_ZIPF
,

634 
	mFIO_RAND_DIST_PARETO
,

638 
	mFIO_RAND_GEN_TAUSWORTHE
 = 0,

639 
	mFIO_RAND_GEN_LFSR
,

643 
	mFIO_CPUS_SHARED
 = 0,

644 
	mFIO_CPUS_SPLIT
,

	@/home/terekhov/tmp/fio/fio/fio_time.h

1 #i‚de‡
FIO_TIME_H


2 
	#FIO_TIME_H


	)

4 
uöt64_t
 
utime_sö˚
(
timevÆ
 *, timeval *);

5 
uöt64_t
 
utime_sö˚_now
(
timevÆ
 *);

6 
uöt64_t
 
mtime_sö˚
(
timevÆ
 *, timeval *);

7 
uöt64_t
 
mtime_sö˚_now
(
timevÆ
 *);

8 
uöt64_t
 
time_sö˚_now
(
timevÆ
 *);

9 
uöt64_t
 
mtime_sö˚_gíesis
();

10 
uöt64_t
 
utime_sö˚_gíesis
();

11 
u£c_•ö
();

12 
u£c_¶ìp
(
thªad_d©a
 *, );

13 
fûl_°¨t_time
(
timevÆ
 *);

14 
£t_gíesis_time
();

15 
ømp_time_ovî
(
thªad_d©a
 *);

16 
ö_ømp_time
(
thªad_d©a
 *);

17 
fio_time_öô
();

	@/home/terekhov/tmp/fio/fio/flist.h

1 #i‚de‡
_LINUX_FLIST_H


2 
	#_LINUX_FLIST_H


	)

4 
	~<°dlib.h
>

6 #unde‡
off£tof


7 #ifde‡
__compûî_off£tof


8 
	#off£tof
(
TYPE
,
MEMBER
Ë
	`__compûî_off£tof
(TYPE,MEMBER)

	)

10 
	#off£tof
(
TYPE
, 
MEMBER
Ë((
size_t
Ë&((TYPE *)0)->MEMBER)

	)

13 
	#c⁄èöî_of
(
±r
, 
ty≥
, 
membî
) ({ \

14 c⁄° 
	`ty≥of
–((
ty≥
 *)0)->
membî
 ) *
__m±r
 = (
±r
); \

15 (
ty≥
 *)–(*)
__m±r
 - 
	`off£tof
—y≥,
membî
Ë);})

	)

27 
	sÊi°_hód
 {

28 
Êi°_hód
 *
	m√xt
, *
	m¥ev
;

31 
	#FLIST_HEAD_INIT
(
«me
Ë{ &“ame), &“ameË}

	)

33 
	#FLIST_HEAD
(
«me
) \

34 
Êi°_hód
 
«me
 = 
	`FLIST_HEAD_INIT
“ame)

	)

36 
	#INIT_FLIST_HEAD
(
±r
) do { \

37 (
±r
)->
√xt
 = (±r); (±r)->
¥ev
 = (ptr); \

38 } 0)

	)

46 
ölöe
 
	$__Êi°_add
(
Êi°_hód
 *
√w_íåy
,

47 
Êi°_hód
 *
¥ev
,

48 
Êi°_hód
 *
√xt
)

50 
√xt
->
¥ev
 = 
√w_íåy
;

51 
√w_íåy
->
√xt
 =Çext;

52 
√w_íåy
->
¥ev
 =Örev;

53 
¥ev
->
√xt
 = 
√w_íåy
;

54 
	}
}

64 
ölöe
 
	$Êi°_add
(
Êi°_hód
 *
√w_íåy
,

65 
Êi°_hód
 *
hód
)

67 
	`__Êi°_add
(
√w_íåy
, 
hód
, hód->
√xt
);

68 
	}
}

70 
ölöe
 
	$Êi°_add_èû
(
Êi°_hód
 *
√w_íåy
,

71 
Êi°_hód
 *
hód
)

73 
	`__Êi°_add
(
√w_íåy
, 
hód
->
¥ev
, head);

74 
	}
}

83 
ölöe
 
	$__Êi°_dñ
(
Êi°_hód
 *
¥ev
,

84 
Êi°_hód
 * 
√xt
)

86 
√xt
->
¥ev
 =Örev;

87 
¥ev
->
√xt
 =Çext;

88 
	}
}

96 
ölöe
 
	$Êi°_dñ
(
Êi°_hód
 *
íåy
)

98 
	`__Êi°_dñ
(
íåy
->
¥ev
,É¡ry->
√xt
);

99 
íåy
->
√xt
 = 
NULL
;

100 
íåy
->
¥ev
 = 
NULL
;

101 
	}
}

107 
ölöe
 
	$Êi°_dñ_öô
(
Êi°_hód
 *
íåy
)

109 
	`__Êi°_dñ
(
íåy
->
¥ev
,É¡ry->
√xt
);

110 
	`INIT_FLIST_HEAD
(
íåy
);

111 
	}
}

117 
ölöe
 
	$Êi°_em±y
(c⁄° 
Êi°_hód
 *
hód
)

119  
hód
->
√xt
 == head;

120 
	}
}

122 
ölöe
 
	$__Êi°_•li˚
(c⁄° 
Êi°_hód
 *
li°
,

123 
Êi°_hód
 *
¥ev
,

124 
Êi°_hód
 *
√xt
)

126 
Êi°_hód
 *
fú°
 = 
li°
->
√xt
;

127 
Êi°_hód
 *
œ°
 = 
li°
->
¥ev
;

129 
fú°
->
¥ev
 =Örev;

130 
¥ev
->
√xt
 = 
fú°
;

132 
œ°
->
√xt
 =Çext;

133 
√xt
->
¥ev
 = 
œ°
;

134 
	}
}

136 
ölöe
 
	$Êi°_•li˚
(c⁄° 
Êi°_hód
 *
li°
,

137 
Êi°_hód
 *
hód
)

139 i‡(!
	`Êi°_em±y
(
li°
))

140 
	`__Êi°_•li˚
(
li°
, 
hód
, hód->
√xt
);

141 
	}
}

143 
ölöe
 
	$Êi°_•li˚_öô
(
Êi°_hód
 *
li°
,

144 
Êi°_hód
 *
hód
)

146 i‡(!
	`Êi°_em±y
(
li°
)) {

147 
	`__Êi°_•li˚
(
li°
, 
hód
, hód->
√xt
);

148 
	`INIT_FLIST_HEAD
(
li°
);

150 
	}
}

158 
	#Êi°_íåy
(
±r
, 
ty≥
, 
membî
) \

159 
	`c⁄èöî_of
(
±r
, 
ty≥
, 
membî
)

	)

166 
	#Êi°_f‹_óch
(
pos
, 
hód
) \

167 
pos
 = (
hód
)->
√xt
;Öo†!(hód);Öo†pos->√xt)

	)

175 
	#Êi°_f‹_óch_ß„
(
pos
, 
n
, 
hód
) \

176 
pos
 = (
hód
)->
√xt
, 
n
 =Öos->next;Öos != (head); \

177 
pos
 = 
n
,Ç =Öos->
√xt
)

	)

179 
Êi°_s‹t
(*
¥iv
, 
Êi°_hód
 *
hód
,

180 (*
cmp
)(*
¥iv
, 
Êi°_hód
 *
a
, Êi°_hód *
b
));

	@/home/terekhov/tmp/fio/fio/flow.c

1 
	~"fio.h
"

2 
	~"muãx.h
"

3 
	~"smÆloc.h
"

4 
	~"Êi°.h
"

6 
	sfio_Êow
 {

7 
	mªfs
;

8 
Êi°_hód
 
	mli°
;

9 
	mid
;

10 
	mÊow_cou¡î
;

13 
Êi°_hód
 *
	gÊow_li°
;

14 
fio_muãx
 *
	gÊow_lock
;

16 
	$Êow_thªshﬁd_ex˚eded
(
thªad_d©a
 *
td
)

18 
fio_Êow
 *
Êow
 = 
td
->flow;

19 
sign
;

21 i‡(!
Êow
)

24 
sign
 = 
td
->
o
.
Êow
 > 0 ? 1 : -1;

25 i‡(
sign
 * 
Êow
->
Êow_cou¡î
 > 
td
->
o
.
Êow_w©îm¨k
) {

26 i‡(
td
->
o
.
Êow_¶ìp
) {

27 
	`io_u_quõs˚
(
td
);

28 
	`u¶ìp
(
td
->
o
.
Êow_¶ìp
);

36 
Êow
->
Êow_cou¡î
 +
td
->
o
.flow;

38 
	}
}

40 
fio_Êow
 *
	$Êow_gë
(
id
)

42 
fio_Êow
 *
Êow
 = 
NULL
;

43 
Êi°_hód
 *
n
;

45 i‡(!
Êow_lock
)

46  
NULL
;

48 
	`fio_muãx_down
(
Êow_lock
);

50 
	`Êi°_f‹_óch
(
n
, 
Êow_li°
) {

51 
Êow
 = 
	`Êi°_íåy
(
n
, 
fio_Êow
, 
li°
);

52 i‡(
Êow
->
id
 == id)

55 
Êow
 = 
NULL
;

58 i‡(!
Êow
) {

59 
Êow
 = 
	`smÆloc
((*flow));

60 i‡(!
Êow
) {

61 
	`log_îr
("fio: smallocÖoolÉxhausted\n");

62  
NULL
;

64 
Êow
->
ªfs
 = 0;

65 
	`INIT_FLIST_HEAD
(&
Êow
->
li°
);

66 
Êow
->
id
 = id;

67 
Êow
->
Êow_cou¡î
 = 0;

69 
	`Êi°_add_èû
(&
Êow
->
li°
, 
Êow_li°
);

72 
Êow
->
ªfs
++;

73 
	`fio_muãx_up
(
Êow_lock
);

74  
Êow
;

75 
	}
}

77 
	$Êow_put
(
fio_Êow
 *
Êow
)

79 i‡(!
Êow_lock
)

82 
	`fio_muãx_down
(
Êow_lock
);

84 i‡(!--
Êow
->
ªfs
) {

85 
	`Êi°_dñ
(&
Êow
->
li°
);

86 
	`s‰ì
(
Êow
);

89 
	`fio_muãx_up
(
Êow_lock
);

90 
	}
}

92 
	$Êow_öô_job
(
thªad_d©a
 *
td
)

94 i‡(
td
->
o
.
Êow
)

95 
td
->
Êow
 = 
	`Êow_gë
—d->
o
.
Êow_id
);

96 
	}
}

98 
	$Êow_exô_job
(
thªad_d©a
 *
td
)

100 i‡(
td
->
Êow
) {

101 
	`Êow_put
(
td
->
Êow
);

102 
td
->
Êow
 = 
NULL
;

104 
	}
}

106 
	$Êow_öô
()

108 
Êow_li°
 = 
	`smÆloc
((*flow_list));

109 i‡(!
Êow_li°
) {

110 
	`log_îr
("fio: smallocÖoolÉxhausted\n");

114 
Êow_lock
 = 
	`fio_muãx_öô
(
FIO_MUTEX_UNLOCKED
);

115 i‡(!
Êow_lock
) {

116 
	`log_îr
("fio: failedÅoállocate flowÜock\n");

117 
	`s‰ì
(
Êow_li°
);

121 
	`INIT_FLIST_HEAD
(
Êow_li°
);

122 
	}
}

124 
	$Êow_exô
()

126 i‡(
Êow_lock
)

127 
	`fio_muãx_ªmove
(
Êow_lock
);

128 i‡(
Êow_li°
)

129 
	`s‰ì
(
Êow_li°
);

130 
	}
}

	@/home/terekhov/tmp/fio/fio/flow.h

1 #i‚de‡
FIO_FLOW_H


2 
	#FIO_FLOW_H


	)

4 
Êow_thªshﬁd_ex˚eded
(
thªad_d©a
 *
td
);

5 
Êow_öô_job
(
thªad_d©a
 *
td
);

6 
Êow_exô_job
(
thªad_d©a
 *
td
);

8 
Êow_exô
();

9 
Êow_öô
();

	@/home/terekhov/tmp/fio/fio/gclient.c

1 
	~<mÆloc.h
>

2 
	~<°rög.h
>

4 
	~<glib.h
>

5 
	~<ˇúo.h
>

6 
	~<gtk/gtk.h
>

8 
	~"fio.h
"

9 
	~"gfio.h
"

10 
	~"ghñ≥rs.h
"

11 
	~"g›ti⁄s.h
"

12 
	~"gîr‹.h
"

13 
	~"gøph.h
"

14 
	~"g˛õ¡.h
"

15 
	~"¥ötög.h
"

17 
gfio_di•œy_ts
(
fio_˛õ¡
 *
˛õ¡
, 
thªad_°©
 *
ts
,

18 
group_run_°©s
 *
rs
);

20 
gboﬁón
 
	$ªsu…s_wödow_dñëe
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

22 
gui_íåy
 *
ge
 = (gui_íåy *Ë
d©a
;

24 
	`gtk_widgë_de°roy
(
w
);

25 
ge
->
ªsu…s_wödow
 = 
NULL
;

26 
ge
->
ªsu…s_nŸebook
 = 
NULL
;

27  
TRUE
;

28 
	}
}

30 
	$ªsu…s_˛o£
(
GtkWidgë
 *
w
, 
gpoöãr
 *
d©a
)

32 
gui_íåy
 *
ge
 = (gui_íåy *Ë
d©a
;

34 
	`gtk_widgë_de°roy
(
ge
->
ªsu…s_wödow
);

35 
	}
}

37 
	$ªsu…s_¥öt
(
GtkWidgë
 *
w
, 
gpoöãr
 *
d©a
)

39 
gui_íåy
 *
ge
 = (gui_íåy *Ë
d©a
;

41 
	`gfio_¥öt_ªsu…s
(
ge
);

42 
	}
}

44 
GtkA˘i⁄E¡ry
 
	gªsu…s_míu_ôems
[] = {

45 { "FûeMíuA˘i⁄", 
GTK_STOCK_FILE
, "Fûe", 
NULL
, NULL, NULL},

46 { "GøphMíuA˘i⁄", 
GTK_STOCK_FILE
, "Gøph", 
NULL
, NULL, NULL},

47 { "PrötFûe", 
GTK_STOCK_PRINT
, "Pröt", "<C⁄åﬁ>P", 
NULL
, 
G_CALLBACK
(
ªsu…s_¥öt
) },

48 { "Clo£Fûe", 
GTK_STOCK_CLOSE
, "Clo£", "<C⁄åﬁ>W", 
NULL
, 
G_CALLBACK
(
ªsu…s_˛o£
) },

50 
göt
 
	gªsu…s_nmíu_ôems
 = (
ªsu…s_míu_ôems
) / (results_menu_items[0]);

52 c⁄° 
gch¨
 *
	gªsu…s_ui_°rög
 = " \
<ui> \
<menubarÇame=\"MainMenu\"> \
<menuÇame=\"FileMenu\"áction=\"FileMenuAction\"> \
<menuitemÇame=\"Print\"áction=\"PrintFile\" /> \
<menuitemÇame=\"Close\"áction=\"CloseFile\" /> \
</menu> \
<menuÇame=\"GraphMenu\"áction=\"GraphMenuAction\"> \
</menu>\
</menubar> \
</ui> \
";

65 
GtkWidgë
 *
	$gë_ªsu…s_míub¨
(
GtkWidgë
 *
wödow
, 
gui_íåy
 *
ge
)

67 
GtkA˘i⁄Group
 *
a˘i⁄_group
;

68 
GtkWidgë
 *
widgë
;

69 
GEº‹
 *
îr‹
 = 0;

71 
ge
->
ªsu…s_uim™agî
 = 
	`gtk_ui_m™agî_√w
();

73 
a˘i⁄_group
 = 
	`gtk_a˘i⁄_group_√w
("ResultsMenu");

74 
	`gtk_a˘i⁄_group_add_a˘i⁄s
(
a˘i⁄_group
, 
ªsu…s_míu_ôems
, 
ªsu…s_nmíu_ôems
, 
ge
);

76 
	`gtk_ui_m™agî_ö£π_a˘i⁄_group
(
ge
->
ªsu…s_uim™agî
, 
a˘i⁄_group
, 0);

77 
	`gtk_ui_m™agî_add_ui_‰om_°rög
(
	`GTK_UI_MANAGER
(
ge
->
ªsu…s_uim™agî
), 
ªsu…s_ui_°rög
, -1, &
îr‹
);

79 
	`gtk_wödow_add_ac˚l_group
(
	`GTK_WINDOW
(
wödow
), 
	`gtk_ui_m™agî_gë_ac˚l_group
(
ge
->
ªsu…s_uim™agî
));

81 
widgë
 = 
	`gtk_ui_m™agî_gë_widgë
(
ge
->
ªsu…s_uim™agî
, "/MainMenu");

82  
widgë
;

83 
	}
}

85 
GtkWidgë
 *
	$gë_ªsu…s_wödow
(
gui_íåy
 *
ge
)

87 
GtkWidgë
 *
wö
, *
nŸebook
, *
vbox
;

89 i‡(
ge
->
ªsu…s_wödow
)

90  
ge
->
ªsu…s_nŸebook
;

92 
wö
 = 
	`gtk_wödow_√w
(
GTK_WINDOW_TOPLEVEL
);

93 
	`gtk_wödow_£t_tôÀ
(
	`GTK_WINDOW
(
wö
), "Results");

94 
	`gtk_wödow_£t_deÁu…_size
(
	`GTK_WINDOW
(
wö
), 1024, 768);

95 
	`g_sig«l_c⁄√˘
(
wö
, "dñëe-evít", 
	`G_CALLBACK
(
ªsu…s_wödow_dñëe
), 
ge
);

96 
	`g_sig«l_c⁄√˘
(
wö
, "de°roy", 
	`G_CALLBACK
(
ªsu…s_wödow_dñëe
), 
ge
);

98 
vbox
 = 
	`gtk_vbox_√w
(
FALSE
, 0);

99 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
wö
), 
vbox
);

101 
ge
->
ªsu…s_míu
 = 
	`gë_ªsu…s_míub¨
(
wö
, ge);

102 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
ge
->
ªsu…s_míu
, 
FALSE
, FALSE, 0);

104 
nŸebook
 = 
	`gtk_nŸebook_√w
();

105 
	`gtk_nŸebook_£t_s¸ﬁœbÀ
(
	`GTK_NOTEBOOK
(
nŸebook
), 1);

106 
	`gtk_nŸebook_p›up_íabÀ
(
	`GTK_NOTEBOOK
(
nŸebook
));

107 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
vbox
), 
nŸebook
);

109 
ge
->
ªsu…s_wödow
 = 
wö
;

110 
ge
->
ªsu…s_nŸebook
 = 
nŸebook
;

111  
ge
->
ªsu…s_nŸebook
;

112 
	}
}

114 
	$gfio_ãxt_›
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
)

116 
cmd_ãxt_pdu
 *
p
 = (cmd_ãxt_pdu *Ë
cmd
->
∑ylﬂd
;

117 
gfio_˛õ¡
 *
gc
 = 
˛õ¡
->
˛õ¡_d©a
;

118 
gui_íåy
 *
ge
 = 
gc
->ge;

119 
gui
 *
ui
 = 
ge
->ui;

120 
GtkTªeIãr
 
ôî
;

121 
tm
 *tm;

122 
time_t
 
£c
;

123 
tmp
[64], 
timebuf
[80];

125 
£c
 = 
p
->
log_£c
;

126 
tm
 = 
	`loˇ…ime
(&
£c
);

127 
	`°r·ime
(
tmp
, —mp), "%Y-%m-%d %H:%M:%S", 
tm
);

128 
	`•rötf
(
timebuf
, "%s.%03ld", 
tmp
, (Ë
p
->
log_u£c
 / 1000);

130 
	`gdk_thªads_íãr
();

132 
	`gtk_li°_°‹e_≠≥nd
(
ui
->
log_modñ
, &
ôî
);

133 
	`gtk_li°_°‹e_£t
(
ui
->
log_modñ
, &
ôî
, 0, 
timebuf
, -1);

134 
	`gtk_li°_°‹e_£t
(
ui
->
log_modñ
, &
ôî
, 1, 
˛õ¡
->
ho°«me
, -1);

135 
	`gtk_li°_°‹e_£t
(
ui
->
log_modñ
, &
ôî
, 2, 
	`log_gë_Àvñ
(
p
->
Àvñ
), -1);

136 
	`gtk_li°_°‹e_£t
(
ui
->
log_modñ
, &
ôî
, 3, 
p
->
buf
, -1);

138 i‡(
p
->
Àvñ
 =
FIO_LOG_ERR
)

139 
	`gfio_võw_log
(
ui
);

141 
	`gdk_thªads_Àave
();

142 
	}
}

144 
	$disk_utû_de°roy
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

146 
gui_íåy
 *
ge
 = (gui_íåy *Ë
d©a
;

148 
ge
->
disk_utû_vbox
 = 
NULL
;

149 
	`gtk_widgë_de°roy
(
w
);

150 
	}
}

152 
GtkWidgë
 *
	$gfio_disk_utû_gë_vbox
(
gui_íåy
 *
ge
)

154 
GtkWidgë
 *
vbox
, *
box
, *
s¸ﬁl
, *
ªs_nŸebook
;

156 i‡(
ge
->
disk_utû_vbox
)

157  
ge
->
disk_utû_vbox
;

159 
s¸ﬁl
 = 
	`gë_s¸ﬁÀd_wödow
(5);

160 
vbox
 = 
	`gtk_vbox_√w
(
FALSE
, 3);

161 
box
 = 
	`gtk_hbox_√w
(
FALSE
, 0);

162 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
box
, 
FALSE
, FALSE, 5);

164 
	`gtk_s¸ﬁÀd_wödow_add_wôh_võwp‹t
(
	`GTK_SCROLLED_WINDOW
(
s¸ﬁl
), 
vbox
);

165 
ªs_nŸebook
 = 
	`gë_ªsu…s_wödow
(
ge
);

167 
	`gtk_nŸebook_≠≥nd_∑ge
(
	`GTK_NOTEBOOK
(
ªs_nŸebook
), 
s¸ﬁl
, 
	`gtk_œbñ_√w
("Disk utilization"));

168 
ge
->
disk_utû_vbox
 = 
box
;

169 
	`g_sig«l_c⁄√˘
(
vbox
, "de°roy", 
	`G_CALLBACK
(
disk_utû_de°roy
), 
ge
);

171  
ge
->
disk_utû_vbox
;

172 
	}
}

174 
	$__gfio_disk_utû_show
(
GtkWidgë
 *
ªs_nŸebook
,

175 
gfio_˛õ¡
 *
gc
, 
cmd_du_pdu
 *
p
)

177 
GtkWidgë
 *
box
, *
‰ame
, *
íåy
, *
vbox
, *
utû_vbox
;

178 
gui_íåy
 *
ge
 = 
gc
->ge;

179 
utû
;

180 
tmp
[16];

182 
utû_vbox
 = 
	`gfio_disk_utû_gë_vbox
(
ge
);

184 
vbox
 = 
	`gtk_vbox_√w
(
FALSE
, 3);

185 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
utû_vbox
), 
vbox
);

187 
‰ame
 = 
	`gtk_‰ame_√w
((*Ë
p
->
dus
.
«me
);

188 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
‰ame
, 
FALSE
, FALSE, 2);

190 
box
 = 
	`gtk_vbox_√w
(
FALSE
, 3);

191 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
box
);

193 
‰ame
 = 
	`gtk_‰ame_√w
("Read");

194 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
box
), 
‰ame
, 
FALSE
, FALSE, 2);

195 
vbox
 = 
	`gtk_hbox_√w
(
TRUE
, 3);

196 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
vbox
);

197 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
vbox
, "IOs");

198 
	`íåy_£t_öt_vÆue
(
íåy
, 
p
->
dus
.
s
.
ios
[0]);

199 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
vbox
, "Merges");

200 
	`íåy_£t_öt_vÆue
(
íåy
, 
p
->
dus
.
s
.
mîges
[0]);

201 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
vbox
, "Sectors");

202 
	`íåy_£t_öt_vÆue
(
íåy
, 
p
->
dus
.
s
.
£˘‹s
[0]);

203 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
vbox
, "Ticks");

204 
	`íåy_£t_öt_vÆue
(
íåy
, 
p
->
dus
.
s
.
ticks
[0]);

206 
‰ame
 = 
	`gtk_‰ame_√w
("Write");

207 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
box
), 
‰ame
, 
FALSE
, FALSE, 2);

208 
vbox
 = 
	`gtk_hbox_√w
(
TRUE
, 3);

209 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
vbox
);

210 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
vbox
, "IOs");

211 
	`íåy_£t_öt_vÆue
(
íåy
, 
p
->
dus
.
s
.
ios
[1]);

212 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
vbox
, "Merges");

213 
	`íåy_£t_öt_vÆue
(
íåy
, 
p
->
dus
.
s
.
mîges
[1]);

214 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
vbox
, "Sectors");

215 
	`íåy_£t_öt_vÆue
(
íåy
, 
p
->
dus
.
s
.
£˘‹s
[1]);

216 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
vbox
, "Ticks");

217 
	`íåy_£t_öt_vÆue
(
íåy
, 
p
->
dus
.
s
.
ticks
[1]);

219 
‰ame
 = 
	`gtk_‰ame_√w
("Shared");

220 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
box
), 
‰ame
, 
FALSE
, FALSE, 2);

221 
vbox
 = 
	`gtk_hbox_√w
(
TRUE
, 3);

222 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
vbox
);

223 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
vbox
, "IOÅicks");

224 
	`íåy_£t_öt_vÆue
(
íåy
, 
p
->
dus
.
s
.
io_ticks
);

225 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
vbox
, "Time in queue");

226 
	`íåy_£t_öt_vÆue
(
íåy
, 
p
->
dus
.
s
.
time_ö_queue
);

228 
utû
 = 0.0;

229 i‡(
p
->
dus
.
s
.
m£c
)

230 
utû
 = (Ë100 * 
p
->
dus
.
s
.
io_ticks
 / (Ëp->dus.s.
m£c
;

231 i‡(
utû
 > 100.0)

232 
utû
 = 100.0;

234 
	`•rötf
(
tmp
, "%3.2f%%", 
utû
);

235 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
vbox
, "Disk utilization");

236 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
íåy
), 
tmp
);

238 
	`gtk_widgë_show_Æl
(
ge
->
ªsu…s_wödow
);

240 
	}
}

242 
	$gfio_disk_utû_show
(
gfio_˛õ¡
 *
gc
)

244 
gui_íåy
 *
ge
 = 
gc
->ge;

245 
GtkWidgë
 *
ªs_nŸebook
;

246 
i
;

248 i‡(!
gc
->
ƒ_du
)

251 
ªs_nŸebook
 = 
	`gë_ªsu…s_wödow
(
ge
);

253 
i
 = 0; i < 
gc
->
ƒ_du
; i++) {

254 
cmd_du_pdu
 *
p
 = &
gc
->
du
[
i
];

256 
	`__gfio_disk_utû_show
(
ªs_nŸebook
, 
gc
, 
p
);

259 
	`gtk_widgë_show_Æl
(
ge
->
ªsu…s_wödow
);

261 
	}
}

263 
	$gfio_disk_utû_›
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
)

265 
cmd_du_pdu
 *
p
 = (cmd_du_pdu *Ë
cmd
->
∑ylﬂd
;

266 
gfio_˛õ¡
 *
gc
 = 
˛õ¡
->
˛õ¡_d©a
;

267 
gui_íåy
 *
ge
 = 
gc
->ge;

268 
ƒ
 = 
gc
->
ƒ_du
;

270 
gc
->
du
 = 
	`ªÆloc
(gc->du, (
ƒ
 + 1Ë* (
cmd_du_pdu
));

271 
	`mem˝y
(&
gc
->
du
[
ƒ
], 
p
, (*p));

272 
gc
->
ƒ_du
++;

274 
	`gdk_thªads_íãr
();

275 i‡(
ge
->
ªsu…s_wödow
)

276 
	`__gfio_disk_utû_show
(
ge
->
ªsu…s_nŸebook
, 
gc
, 
p
);

278 
	`gfio_disk_utû_show
(
gc
);

279 
	`gdk_thªads_Àave
();

280 
	}
}

282 
sum_°©_˛õ¡s
;

283 
thªad_°©
 
˛õ¡_ts
;

284 
group_run_°©s
 
˛õ¡_gs
;

286 
	gsum_°©_ƒ
;

288 
	$gfio_thªad_°©us_›
(
fio_˛õ¡
 *
˛õ¡
,

289 
fio_√t_cmd
 *
cmd
)

291 
cmd_ts_pdu
 *
p
 = (cmd_ts_pdu *Ë
cmd
->
∑ylﬂd
;

293 
	`gfio_di•œy_ts
(
˛õ¡
, &
p
->
ts
, &p->
rs
);

295 i‡(
sum_°©_˛õ¡s
 == 1)

298 
	`sum_thªad_°©s
(&
˛õ¡_ts
, &
p
->
ts
, 
sum_°©_ƒ
);

299 
	`sum_group_°©s
(&
˛õ¡_gs
, &
p
->
rs
);

301 
˛õ¡_ts
.
membîs
++;

302 
˛õ¡_ts
.
thªad_numbî
 = 
p
->
ts
.thread_number;

303 
˛õ¡_ts
.
groupid
 = 
p
->
ts
.groupid;

305 i‡(++
sum_°©_ƒ
 =
sum_°©_˛õ¡s
) {

306 
	`°r˝y
(
˛õ¡_ts
.
«me
, "All clients");

307 
	`gfio_di•œy_ts
(
˛õ¡
, &
˛õ¡_ts
, &
˛õ¡_gs
);

309 
	}
}

311 
	$gfio_group_°©s_›
(
fio_˛õ¡
 *
˛õ¡
,

312 
fio_√t_cmd
 *
cmd
)

315 
	}
}

317 
	$gfio_upd©e_thªad_°©us
(
gui_íåy
 *
ge
,

318 *
°©us_mesßge
, 
≥rc
)

320 
mesßge
[100];

321 c⁄° *
m
 = 
mesßge
;

323 
	`°∫˝y
(
mesßge
, 
°©us_mesßge
, (message) - 1);

324 
	`gtk_¥ogªss_b¨_£t_ãxt
(
	`GTK_PROGRESS_BAR
(
ge
->
thªad_°©us_pb
), 
m
);

325 
	`gtk_¥ogªss_b¨_£t_‰a˘i⁄
(
	`GTK_PROGRESS_BAR
(
ge
->
thªad_°©us_pb
), 
≥rc
 / 100.0);

326 
	`gtk_widgë_queue_døw
(
ge
->
ui
->
wödow
);

327 
	}
}

329 
	$gfio_upd©e_thªad_°©us_Æl
(
gui
 *
ui
, *
°©us_mesßge
,

330 
≥rc
)

332 
mesßge
[100];

333 c⁄° *
m
 = 
mesßge
;

335 
	`°∫˝y
(
mesßge
, 
°©us_mesßge
, (message) - 1);

336 
	`gtk_¥ogªss_b¨_£t_ãxt
(
	`GTK_PROGRESS_BAR
(
ui
->
thªad_°©us_pb
), 
m
);

337 
	`gtk_¥ogªss_b¨_£t_‰a˘i⁄
(
	`GTK_PROGRESS_BAR
(
ui
->
thªad_°©us_pb
), 
≥rc
 / 100.0);

338 
	`gtk_widgë_queue_døw
(
ui
->
wödow
);

339 
	}
}

344 
	$gfio_upd©e_˛õ¡_ëa
(
fio_˛õ¡
 *
˛õ¡
, 
jobs_ëa
 *
je
)

346 
gfio_˛õ¡
 *
gc
 = 
˛õ¡
->
˛õ¡_d©a
;

347 
gui_íåy
 *
ge
 = 
gc
->ge;

348 
ëa_good
;

349 
ëa_°r
[128];

350 
ouçut
[256];

351 
tmp
[32];

352 
≥rc
 = 0.0;

353 
i2p
 = 0;

355 
	`gdk_thªads_íãr
();

357 
ëa_°r
[0] = '\0';

358 
ouçut
[0] = '\0';

360 i‡(
je
->
ëa_£c
 !
INT_MAX
 && je->
ñ≠£d_£c
) {

361 
≥rc
 = (Ë
je
->
ñ≠£d_£c
 / (Ë(je->ñ≠£d_£¯+ je->
ëa_£c
);

362 
	`ëa_to_°r
(
ëa_°r
, 
je
->
ëa_£c
);

365 
	`•rötf
(
tmp
, "%u", 
je
->
ƒ_ru¬ög
);

366 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ge
->
ëa
.
jobs
), 
tmp
);

367 
	`•rötf
(
tmp
, "%u", 
je
->
fûes_›í
);

368 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ge
->
ëa
.
fûes
), 
tmp
);

371 i‡(
je
->
m_øã
[0] || je->m_øã[1] || je->
t_øã
[0] || je->t_rate[1]) {

372 i‡(
je
->
m_øã
 || je->
t_øã
) {

373 *
å
, *
mr
;

375 
mr
 = 
	`num2°r
(
je
->
m_øã
, 4, 0, 
i2p
);

376 
å
 = 
	`num2°r
(
je
->
t_øã
, 4, 0, 
i2p
);

377 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ge
->
ëa
);

378 
p
 +
	`•rötf
’, ", CR=%s/%†KB/s", 
å
, 
mr
);

379 
	`‰ì
(
å
);

380 
	`‰ì
(
mr
);

381 } i‡(
je
->
m_i›s
 || je->
t_i›s
)

382 
p
 +
	`•rötf
’, ", CR=%d/%d IOPS", 
je
->
t_i›s
, je->
m_i›s
);

384 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ge
->
ëa
.
¸_bw
), "---");

385 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ge
->
ëa
.
¸_i›s
), "---");

386 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ge
->
ëa
.
cw_bw
), "---");

387 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ge
->
ëa
.
cw_i›s
), "---");

390 i‡(
je
->
ëa_£c
 !
INT_MAX
 && je->
ƒ_ru¬ög
) {

391 *
i›s_°r
[
DDIR_RWDIR_CNT
];

392 *
øã_°r
[
DDIR_RWDIR_CNT
];

393 
i
;

395 i‡((!
je
->
ëa_£c
 && !
ëa_good
Ë|| je->
ƒ_ømp
 =je->
ƒ_ru¬ög
)

396 
	`°r˝y
(
ouçut
, "-.-% done");

398 
ëa_good
 = 1;

399 
≥rc
 *= 100.0;

400 
	`•rötf
(
ouçut
, "%3.1f%% d⁄e", 
≥rc
);

403 
øã_°r
[0] = 
	`num2°r
(
je
->
øã
[0], 5, 10, 
i2p
, 0);

404 
øã_°r
[1] = 
	`num2°r
(
je
->
øã
[1], 5, 10, 
i2p
, 0);

405 
øã_°r
[2] = 
	`num2°r
(
je
->
øã
[2], 5, 10, 
i2p
, 0);

407 
i›s_°r
[0] = 
	`num2°r
(
je
->
i›s
[0], 4, 1, 0, 0);

408 
i›s_°r
[1] = 
	`num2°r
(
je
->
i›s
[1], 4, 1, 0, 0);

409 
i›s_°r
[2] = 
	`num2°r
(
je
->
i›s
[2], 4, 1, 0, 0);

411 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ge
->
ëa
.
ªad_bw
), 
øã_°r
[0]);

412 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ge
->
ëa
.
ªad_i›s
), 
i›s_°r
[0]);

413 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ge
->
ëa
.
wrôe_bw
), 
øã_°r
[1]);

414 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ge
->
ëa
.
wrôe_i›s
), 
i›s_°r
[1]);

415 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ge
->
ëa
.
åim_bw
), 
øã_°r
[2]);

416 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ge
->
ëa
.
åim_i›s
), 
i›s_°r
[2]);

418 
	`gøph_add_xy_d©a
(
ge
->
gøphs
.
i›s_gøph
, ge->gøphs.
ªad_i›s
, 
je
->
ñ≠£d_£c
, je->
i›s
[0], 
i›s_°r
[0]);

419 
	`gøph_add_xy_d©a
(
ge
->
gøphs
.
i›s_gøph
, ge->gøphs.
wrôe_i›s
, 
je
->
ñ≠£d_£c
, je->
i›s
[1], 
i›s_°r
[1]);

420 
	`gøph_add_xy_d©a
(
ge
->
gøphs
.
i›s_gøph
, ge->gøphs.
åim_i›s
, 
je
->
ñ≠£d_£c
, je->
i›s
[2], 
i›s_°r
[2]);

421 
	`gøph_add_xy_d©a
(
ge
->
gøphs
.
b™dwidth_gøph
, ge->gøphs.
ªad_bw
, 
je
->
ñ≠£d_£c
, je->
øã
[0], 
øã_°r
[0]);

422 
	`gøph_add_xy_d©a
(
ge
->
gøphs
.
b™dwidth_gøph
, ge->gøphs.
wrôe_bw
, 
je
->
ñ≠£d_£c
, je->
øã
[1], 
øã_°r
[1]);

423 
	`gøph_add_xy_d©a
(
ge
->
gøphs
.
b™dwidth_gøph
, ge->gøphs.
åim_bw
, 
je
->
ñ≠£d_£c
, je->
øã
[2], 
øã_°r
[2]);

425 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

426 
	`‰ì
(
øã_°r
[
i
]);

427 
	`‰ì
(
i›s_°r
[
i
]);

431 i‡(
ëa_°r
[0]) {

432 *
d°
 = 
ouçut
 + 
	`°æí
(output);

434 
	`•rötf
(
d°
, " - %s", 
ëa_°r
);

437 
	`gfio_upd©e_thªad_°©us
(
ge
, 
ouçut
, 
≥rc
);

438 
	`gdk_thªads_Àave
();

444 
	`gfio_upd©e_Æl_ëa
(
jobs_ëa
 *
je
)

446 
gui
 *
ui
 = &
maö_ui
;

447 
ëa_good
;

448 
ëa_°r
[128];

449 
ouçut
[256];

450 
≥rc
 = 0.0;

451 
i
, 
i2p
 = 0;

453 
	`gdk_thªads_íãr
();

455 
ëa_°r
[0] = '\0';

456 
ouçut
[0] = '\0';

458 i‡(
je
->
ëa_£c
 !
INT_MAX
 && je->
ñ≠£d_£c
) {

459 
≥rc
 = (Ë
je
->
ñ≠£d_£c
 / (Ë(je->ñ≠£d_£¯+ je->
ëa_£c
);

460 
	`ëa_to_°r
(
ëa_°r
, 
je
->
ëa_£c
);

464 i‡(
je
->
m_øã
[0] || je->m_øã[1] || je->
t_øã
[0] || je->t_rate[1]) {

465 i‡(
je
->
m_øã
 || je->
t_øã
) {

466 *
å
, *
mr
;

468 
mr
 = 
	`num2°r
(
je
->
m_øã
, 4, 0, 
i2p
);

469 
å
 = 
	`num2°r
(
je
->
t_øã
, 4, 0, 
i2p
);

470 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ui
->
ëa
);

471 
p
 +
	`•rötf
’, ", CR=%s/%†KB/s", 
å
, 
mr
);

472 
	`‰ì
(
å
);

473 
	`‰ì
(
mr
);

474 } i‡(
je
->
m_i›s
 || je->
t_i›s
)

475 
p
 +
	`•rötf
’, ", CR=%d/%d IOPS", 
je
->
t_i›s
, je->
m_i›s
);

477 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ui
->
ëa
.
¸_bw
), "---");

478 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ui
->
ëa
.
¸_i›s
), "---");

479 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ui
->
ëa
.
cw_bw
), "---");

480 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ui
->
ëa
.
cw_i›s
), "---");

483 
	`íåy_£t_öt_vÆue
(
ui
->
ëa
.
jobs
, 
je
->
ƒ_ru¬ög
);

485 i‡(
je
->
ëa_£c
 !
INT_MAX
 && je->
ƒ_ru¬ög
) {

486 *
i›s_°r
[3];

487 *
øã_°r
[3];

489 i‡((!
je
->
ëa_£c
 && !
ëa_good
Ë|| je->
ƒ_ømp
 =je->
ƒ_ru¬ög
)

490 
	`°r˝y
(
ouçut
, "-.-% done");

492 
ëa_good
 = 1;

493 
≥rc
 *= 100.0;

494 
	`•rötf
(
ouçut
, "%3.1f%% d⁄e", 
≥rc
);

497 
øã_°r
[0] = 
	`num2°r
(
je
->
øã
[0], 5, 10, 
i2p
, 0);

498 
øã_°r
[1] = 
	`num2°r
(
je
->
øã
[1], 5, 10, 
i2p
, 0);

499 
øã_°r
[2] = 
	`num2°r
(
je
->
øã
[2], 5, 10, 
i2p
, 0);

501 
i›s_°r
[0] = 
	`num2°r
(
je
->
i›s
[0], 4, 1, 0, 0);

502 
i›s_°r
[1] = 
	`num2°r
(
je
->
i›s
[1], 4, 1, 0, 0);

503 
i›s_°r
[2] = 
	`num2°r
(
je
->
i›s
[2], 4, 1, 0, 0);

505 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ui
->
ëa
.
ªad_bw
), 
øã_°r
[0]);

506 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ui
->
ëa
.
ªad_i›s
), 
i›s_°r
[0]);

507 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ui
->
ëa
.
wrôe_bw
), 
øã_°r
[1]);

508 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ui
->
ëa
.
wrôe_i›s
), 
i›s_°r
[1]);

509 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ui
->
ëa
.
åim_bw
), 
øã_°r
[2]);

510 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ui
->
ëa
.
åim_i›s
), 
i›s_°r
[2]);

512 
	`gøph_add_xy_d©a
(
ui
->
gøphs
.
i›s_gøph
, ui->gøphs.
ªad_i›s
, 
je
->
ñ≠£d_£c
, je->
i›s
[0], 
i›s_°r
[0]);

513 
	`gøph_add_xy_d©a
(
ui
->
gøphs
.
i›s_gøph
, ui->gøphs.
wrôe_i›s
, 
je
->
ñ≠£d_£c
, je->
i›s
[1], 
i›s_°r
[1]);

514 
	`gøph_add_xy_d©a
(
ui
->
gøphs
.
i›s_gøph
, ui->gøphs.
åim_i›s
, 
je
->
ñ≠£d_£c
, je->
i›s
[2], 
i›s_°r
[2]);

515 
	`gøph_add_xy_d©a
(
ui
->
gøphs
.
b™dwidth_gøph
, ui->gøphs.
ªad_bw
, 
je
->
ñ≠£d_£c
, je->
øã
[0], 
øã_°r
[0]);

516 
	`gøph_add_xy_d©a
(
ui
->
gøphs
.
b™dwidth_gøph
, ui->gøphs.
wrôe_bw
, 
je
->
ñ≠£d_£c
, je->
øã
[1], 
øã_°r
[1]);

517 
	`gøph_add_xy_d©a
(
ui
->
gøphs
.
b™dwidth_gøph
, ui->gøphs.
åim_bw
, 
je
->
ñ≠£d_£c
, je->
øã
[2], 
øã_°r
[2]);

519 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

520 
	`‰ì
(
øã_°r
[
i
]);

521 
	`‰ì
(
i›s_°r
[
i
]);

525 i‡(
ëa_°r
[0]) {

526 *
d°
 = 
ouçut
 + 
	`°æí
(output);

528 
	`•rötf
(
d°
, " - %s", 
ëa_°r
);

531 
	`gfio_upd©e_thªad_°©us_Æl
(
ui
, 
ouçut
, 
≥rc
);

532 
	`gdk_thªads_Àave
();

535 
	`gfio_¥obe_›
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
)

537 
cmd_¥obe_ª∂y_pdu
 *
¥obe
 = (cmd_¥obe_ª∂y_pdu *Ë
cmd
->
∑ylﬂd
;

538 
gfio_˛õ¡
 *
gc
 = 
˛õ¡
->
˛õ¡_d©a
;

539 
gui_íåy
 *
ge
 = 
gc
->ge;

540 c⁄° *
os
, *
¨ch
;

542 
os
 = 
	`fio_gë_os_°rög
(
¥obe
->os);

543 i‡(!
os
)

544 
os
 = "unknown";

546 
¨ch
 = 
	`fio_gë_¨ch_°rög
(
¥obe
->arch);

547 i‡(!
¨ch
)

548 
os
 = "unknown";

550 i‡(!
˛õ¡
->
«me
)

551 
˛õ¡
->
«me
 = 
	`°rdup
((*Ë
¥obe
->
ho°«me
);

553 
gc
->
˛õ¡_˝us
 = 
	`À32_to_˝u
(
¥obe
->
˝us
);

554 
gc
->
˛õ¡_Êags
 = 
	`À64_to_˝u
(
¥obe
->
Êags
);

556 
	`gdk_thªads_íãr
();

558 
	`gtk_œbñ_£t_ãxt
(
	`GTK_LABEL
(
ge
->
¥obe
.
ho°«me
), (*)Örobe->hostname);

559 
	`gtk_œbñ_£t_ãxt
(
	`GTK_LABEL
(
ge
->
¥obe
.
os
), os);

560 
	`gtk_œbñ_£t_ãxt
(
	`GTK_LABEL
(
ge
->
¥obe
.
¨ch
),árch);

561 
	`gtk_œbñ_£t_ãxt
(
	`GTK_LABEL
(
ge
->
¥obe
.
fio_vî
), (*Ë¥obe->
fio_vîsi⁄
);

563 
	`gfio_£t_°©e
(
ge
, 
GE_STATE_CONNECTED
);

565 
	`gdk_thªads_Àave
();

568 
	`gfio_quô_›
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
)

570 
gfio_˛õ¡
 *
gc
 = 
˛õ¡
->
˛õ¡_d©a
;

572 
	`gdk_thªads_íãr
();

573 
	`gfio_£t_°©e
(
gc
->
ge
, 
GE_STATE_NEW
);

574 
	`gdk_thªads_Àave
();

577 
thªad_›ti⁄s
 *
	`gfio_˛õ¡_add_job
(
gfio_˛õ¡
 *
gc
,

578 
thªad_›ti⁄s_∑ck
 *
t›
)

580 
gfio_˛õ¡_›ti⁄s
 *
gco
;

582 
gco
 = 
	`ˇŒoc
(1, (*gco));

583 
	`c⁄vît_thªad_›ti⁄s_to_˝u
(&
gco
->
o
, 
t›
);

584 
	`INIT_FLIST_HEAD
(&
gco
->
li°
);

585 
	`Êi°_add_èû
(&
gco
->
li°
, &
gc
->
o_li°
);

586 
gc
->
o_li°_ƒ
 = 1;

587  &
gco
->
o
;

590 
	`gfio_add_job_›
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
)

592 
cmd_add_job_pdu
 *
p
 = (cmd_add_job_pdu *Ë
cmd
->
∑ylﬂd
;

593 
gfio_˛õ¡
 *
gc
 = 
˛õ¡
->
˛õ¡_d©a
;

594 
gui_íåy
 *
ge
 = 
gc
->ge;

595 
thªad_›ti⁄s
 *
o
;

596 *
c1
, *
c2
, *
c3
, *
c4
;

597 
tmp
[80];

599 
p
->
thªad_numbî
 = 
	`À32_to_˝u
(p->thread_number);

600 
p
->
groupid
 = 
	`À32_to_˝u
(p->groupid);

601 
o
 = 
	`gfio_˛õ¡_add_job
(
gc
, &
p
->
t›
);

603 
	`gdk_thªads_íãr
();

605 
	`gtk_combo_box_ãxt_≠≥nd_ãxt
(
	`GTK_COMBO_BOX_TEXT
(
ge
->
ëa
.
«mes
), (
gch¨
 *Ë
o
->
«me
);

606 
	`gtk_combo_box_£t_a˘ive
(
	`GTK_COMBO_BOX
(
ge
->
ëa
.
«mes
), 0);

608 
	`•rötf
(
tmp
, "%†%s", 
o
->
odúe˘
 ? "dúe˘" : "buf„ªd", 
	`ddú_°r
(o->
td_ddú
));

609 
	`mu…ôext_add_íåy
(&
ge
->
ëa
.
iŸy≥
, 
tmp
);

611 
c1
 = 
	`fio_uöt_to_kmg
(
o
->
mö_bs
[
DDIR_READ
]);

612 
c2
 = 
	`fio_uöt_to_kmg
(
o
->
max_bs
[
DDIR_WRITE
]);

613 
c3
 = 
	`fio_uöt_to_kmg
(
o
->
mö_bs
[
DDIR_READ
]);

614 
c4
 = 
	`fio_uöt_to_kmg
(
o
->
max_bs
[
DDIR_WRITE
]);

615 
	`•rötf
(
tmp
, "%s-%s/%s-%s", 
c1
, 
c2
, 
c3
, 
c4
);

616 
	`‰ì
(
c1
);

617 
	`‰ì
(
c2
);

618 
	`‰ì
(
c3
);

619 
	`‰ì
(
c4
);

620 
	`mu…ôext_add_íåy
(&
ge
->
ëa
.
bs
, 
tmp
);

622 
	`mu…ôext_add_íåy
(&
ge
->
ëa
.
i€ngöe
, (c⁄° *Ë
o
->ioengine);

624 
	`•rötf
(
tmp
, "%u", 
o
->
iodïth
);

625 
	`mu…ôext_add_íåy
(&
ge
->
ëa
.
iodïth
, 
tmp
);

627 
	`mu…ôext_£t_íåy
(&
ge
->
ëa
.
iŸy≥
, 0);

628 
	`mu…ôext_£t_íåy
(&
ge
->
ëa
.
bs
, 0);

629 
	`mu…ôext_£t_íåy
(&
ge
->
ëa
.
i€ngöe
, 0);

630 
	`mu…ôext_£t_íåy
(&
ge
->
ëa
.
iodïth
, 0);

632 
	`gfio_£t_°©e
(
ge
, 
GE_STATE_JOB_SENT
);

634 
	`gdk_thªads_Àave
();

637 
	`gfio_upd©e_job_›
(
fio_˛õ¡
 *
˛õ¡
,

638 
fio_√t_cmd
 *
cmd
)

640 
uöt32_t
 *
pdu_îr‹
 = (uöt32_à*Ë
cmd
->
∑ylﬂd
;

641 
gfio_˛õ¡
 *
gc
 = 
˛õ¡
->
˛õ¡_d©a
;

643 
gc
->
upd©e_job_°©us
 = 
	`À32_to_˝u
(*
pdu_îr‹
);

644 
gc
->
upd©e_job_d⁄e
 = 1;

647 
	`gfio_˛õ¡_timed_out
(
fio_˛õ¡
 *
˛õ¡
)

649 
gfio_˛õ¡
 *
gc
 = 
˛õ¡
->
˛õ¡_d©a
;

650 
buf
[256];

652 
	`gdk_thªads_íãr
();

654 
	`gfio_£t_°©e
(
gc
->
ge
, 
GE_STATE_NEW
);

655 
	`˛ór_ge_ui_öfo
(
gc
->
ge
);

657 
	`•rötf
(
buf
, "Clõ¡ %s:ÅimeouàèlkögÅÿ£rvî.\n", 
˛õ¡
->
ho°«me
);

658 
	`gfio_ªp‹t_öfo
(
gc
->
ge
->
ui
, "Nëw‹kÅimeout", 
buf
);

660 
	`gdk_thªads_Àave
();

663 
	`gfio_˛õ¡_°›
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
)

665 
gfio_˛õ¡
 *
gc
 = 
˛õ¡
->
˛õ¡_d©a
;

667 
	`gdk_thªads_íãr
();

669 
	`gfio_£t_°©e
(
gc
->
ge
, 
GE_STATE_JOB_DONE
);

671 i‡(
gc
->
îr_íåy
)

672 
	`íåy_£t_öt_vÆue
(
gc
->
îr_íåy
, 
˛õ¡
->
îr‹
);

674 
	`gdk_thªads_Àave
();

677 
	`gfio_˛õ¡_°¨t
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
)

679 
gfio_˛õ¡
 *
gc
 = 
˛õ¡
->
˛õ¡_d©a
;

681 
	`gdk_thªads_íãr
();

682 
	`gfio_£t_°©e
(
gc
->
ge
, 
GE_STATE_JOB_STARTED
);

683 
	`gdk_thªads_Àave
();

686 
	`gfio_˛õ¡_job_°¨t
(
fio_˛õ¡
 *
˛õ¡
, 
fio_√t_cmd
 *
cmd
)

688 
gfio_˛õ¡
 *
gc
 = 
˛õ¡
->
˛õ¡_d©a
;

690 
	`gdk_thªads_íãr
();

691 
	`gfio_£t_°©e
(
gc
->
ge
, 
GE_STATE_JOB_RUNNING
);

692 
	`gdk_thªads_Àave
();

695 
	`gfio_˛õ¡_iﬁog
(
fio_˛õ¡
 *
˛õ¡
, 
cmd_iﬁog_pdu
 *
pdu
)

697 
	`¥ötf
("gŸ iﬁog:Çame=%s,Åy≥=%u,É¡rõs=%u\n", 
pdu
->
«me
,Ödu->
log_ty≥
,Ödu->
ƒ_ßm∂es
);

698 
	`‰ì
(
pdu
);

701 
	`gfio_add_tŸÆ_dïths_åì
(
GtkLi°St‹e
 *
modñ
,

702 
thªad_°©
 *
ts
, 
Àn
)

704 
io_u_di°
[
FIO_IO_U_MAP_NR
];

705 
GtkTªeIãr
 
ôî
;

707 c⁄° 
add_mask
 = 0x17e;

708 
i
, 
j
;

710 
	`°©_ˇlc_di°
(
ts
->
io_u_m≠
, 
	`ddú_rw_sum
—s->
tŸÆ_io_u
), 
io_u_di°
);

712 
	`gtk_li°_°‹e_≠≥nd
(
modñ
, &
ôî
);

714 
	`gtk_li°_°‹e_£t
(
modñ
, &
ôî
, 0, "Total", -1);

716 
i
 = 1, 
j
 = 0; i < 
Àn
; i++) {

717 
fbuf
[32];

719 i‡(!(
add_mask
 & (1UL << (
i
 - 1))))

720 
	`•rötf
(
fbuf
, "0.0%%");

722 
	`•rötf
(
fbuf
, "%3.1f%%", 
io_u_di°
[
j
]);

723 
j
++;

726 
	`gtk_li°_°‹e_£t
(
modñ
, &
ôî
, 
i
, 
fbuf
, -1);

731 
	`gfio_add_íd_ªsu…s
(
gfio_˛õ¡
 *
gc
, 
thªad_°©
 *
ts
,

732 
group_run_°©s
 *
rs
)

734 
ƒ
 = 
gc
->
ƒ_ªsu…s
;

736 
gc
->
ªsu…s
 = 
	`ªÆloc
(gc->ªsu…s, (
ƒ
 + 1Ë* (
íd_ªsu…s
));

737 
	`mem˝y
(&
gc
->
ªsu…s
[
ƒ
].
ts
,Ås, (*ts));

738 
	`mem˝y
(&
gc
->
ªsu…s
[
ƒ
].
gs
, 
rs
, (*rs));

739 
gc
->
ƒ_ªsu…s
++;

742 
	`gfio_add_sc_dïths_åì
(
GtkLi°St‹e
 *
modñ
,

743 
thªad_°©
 *
ts
, 
Àn
,

744 
submô
)

746 
io_u_di°
[
FIO_IO_U_MAP_NR
];

747 
GtkTªeIãr
 
ôî
;

749 c⁄° 
add_mask
 = 0x1f9;

750 
i
, 
j
;

752 i‡(
submô
)

753 
	`°©_ˇlc_di°
(
ts
->
io_u_submô
,Ås->
tŸÆ_submô
, 
io_u_di°
);

755 
	`°©_ˇlc_di°
(
ts
->
io_u_com∂ëe
,Ås->
tŸÆ_com∂ëe
, 
io_u_di°
);

757 
	`gtk_li°_°‹e_≠≥nd
(
modñ
, &
ôî
);

759 
	`gtk_li°_°‹e_£t
(
modñ
, &
ôî
, 0, 
submô
 ? "Submit" : "Complete", -1);

761 
i
 = 1, 
j
 = 0; i < 
Àn
; i++) {

762 
fbuf
[32];

764 i‡(!(
add_mask
 & (1UL << (
i
 - 1))))

765 
	`•rötf
(
fbuf
, "0.0%%");

767 
	`•rötf
(
fbuf
, "%3.1f%%", 
io_u_di°
[
j
]);

768 
j
++;

771 
	`gtk_li°_°‹e_£t
(
modñ
, &
ôî
, 
i
, 
fbuf
, -1);

776 
	`gfio_show_io_dïths
(
GtkWidgë
 *
vbox
, 
thªad_°©
 *
ts
)

778 
GtkWidgë
 *
‰ame
, *
box
, *
åì_võw
 = 
NULL
;

779 
GtkTªeSñe˘i⁄
 *
£À˘i⁄
;

780 
GtkLi°St‹e
 *
modñ
;

781 
i
;

782 c⁄° *
œbñs
[] = { "Depth", "0", "1", "2", "4", "8", "16", "32", "64", ">= 64" };

783 c⁄° 
ƒ_œbñs
 = 
	`ARRAY_SIZE
(
œbñs
);

784 
GTy≥
 
ty≥s
[
ƒ_œbñs
];

786 
‰ame
 = 
	`gtk_‰ame_√w
("IO depths");

787 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
‰ame
, 
FALSE
, FALSE, 5);

789 
box
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

790 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
box
);

792 
i
 = 0; i < 
ƒ_œbñs
; i++)

793 
ty≥s
[
i
] = 
G_TYPE_STRING
;

795 
modñ
 = 
	`gtk_li°_°‹e_√wv
(
ƒ_œbñs
, 
ty≥s
);

797 
åì_võw
 = 
	`gtk_åì_võw_√w_wôh_modñ
(
	`GTK_TREE_MODEL
(
modñ
));

798 
	`gtk_widgë_£t_ˇn_focus
(
åì_võw
, 
FALSE
);

800 
	`g_obje˘_£t
(
	`G_OBJECT
(
åì_võw
), "hódîs-visibÀ", 
TRUE
,

801 "íabÀ-grid-löes", 
GTK_TREE_VIEW_GRID_LINES_BOTH
, 
NULL
);

803 
£À˘i⁄
 = 
	`gtk_åì_võw_gë_£À˘i⁄
(
	`GTK_TREE_VIEW
(
åì_võw
));

804 
	`gtk_åì_£À˘i⁄_£t_mode
(
	`GTK_TREE_SELECTION
(
£À˘i⁄
), 
GTK_SELECTION_BROWSE
);

806 
i
 = 0; i < 
ƒ_œbñs
; i++)

807 
	`åì_võw_cﬁumn
(
åì_võw
, 
i
, 
œbñs
[i], 
ALIGN_RIGHT
 | 
UNSORTABLE
);

809 
	`gfio_add_tŸÆ_dïths_åì
(
modñ
, 
ts
, 
ƒ_œbñs
);

810 
	`gfio_add_sc_dïths_åì
(
modñ
, 
ts
, 
ƒ_œbñs
, 1);

811 
	`gfio_add_sc_dïths_åì
(
modñ
, 
ts
, 
ƒ_œbñs
, 0);

813 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
box
), 
åì_võw
, 
TRUE
, TRUE, 3);

816 
	`gfio_show_˝u_ußge
(
GtkWidgë
 *
vbox
, 
thªad_°©
 *
ts
)

818 
GtkWidgë
 *
box
, *
‰ame
, *
íåy
;

819 
u§_˝u
, 
sys_˝u
;

820 
ru¡ime
;

821 
tmp
[32];

823 
ru¡ime
 = 
ts
->
tŸÆ_run_time
;

824 i‡(
ru¡ime
) {

825 
ru¡
 = (Ë
ru¡ime
;

827 
u§_˝u
 = (Ë
ts
->
u§_time
 * 100 / 
ru¡
;

828 
sys_˝u
 = (Ë
ts
->
sys_time
 * 100 / 
ru¡
;

830 
u§_˝u
 = 0;

831 
sys_˝u
 = 0;

834 
‰ame
 = 
	`gtk_‰ame_√w
("OSÑesources");

835 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
‰ame
, 
FALSE
, FALSE, 5);

837 
box
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

838 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
box
);

840 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
box
, "User CPU");

841 
	`•rötf
(
tmp
, "%3.2f%%", 
u§_˝u
);

842 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
íåy
), 
tmp
);

843 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
box
, "System CPU");

844 
	`•rötf
(
tmp
, "%3.2f%%", 
sys_˝u
);

845 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
íåy
), 
tmp
);

846 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
box
, "Context switches");

847 
	`íåy_£t_öt_vÆue
(
íåy
, 
ts
->
˘x
);

848 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
box
, "Major faults");

849 
	`íåy_£t_öt_vÆue
(
íåy
, 
ts
->
majf
);

850 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
box
, "Minor faults");

851 
	`íåy_£t_öt_vÆue
(
íåy
, 
ts
->
möf
);

854 
GtkWidgë
 *
	`gfio_ouçut_œt_buckës
(*
œt
, c⁄° **
œbñs
,

855 
num
)

857 
GtkWidgë
 *
åì_võw
;

858 
GtkTªeSñe˘i⁄
 *
£À˘i⁄
;

859 
GtkLi°St‹e
 *
modñ
;

860 
GtkTªeIãr
 
ôî
;

861 
GTy≥
 *
ty≥s
;

862 
i
;

864 
ty≥s
 = 
	`mÆloc
(
num
 * (
GTy≥
));

866 
i
 = 0; i < 
num
; i++)

867 
ty≥s
[
i
] = 
G_TYPE_STRING
;

869 
modñ
 = 
	`gtk_li°_°‹e_√wv
(
num
, 
ty≥s
);

870 
	`‰ì
(
ty≥s
);

871 
ty≥s
 = 
NULL
;

873 
åì_võw
 = 
	`gtk_åì_võw_√w_wôh_modñ
(
	`GTK_TREE_MODEL
(
modñ
));

874 
	`gtk_widgë_£t_ˇn_focus
(
åì_võw
, 
FALSE
);

876 
	`g_obje˘_£t
(
	`G_OBJECT
(
åì_võw
), "hódîs-visibÀ", 
TRUE
,

877 "íabÀ-grid-löes", 
GTK_TREE_VIEW_GRID_LINES_BOTH
, 
NULL
);

879 
£À˘i⁄
 = 
	`gtk_åì_võw_gë_£À˘i⁄
(
	`GTK_TREE_VIEW
(
åì_võw
));

880 
	`gtk_åì_£À˘i⁄_£t_mode
(
	`GTK_TREE_SELECTION
(
£À˘i⁄
), 
GTK_SELECTION_BROWSE
);

882 
i
 = 0; i < 
num
; i++)

883 
	`åì_võw_cﬁumn
(
åì_võw
, 
i
, 
œbñs
[i], 
ALIGN_RIGHT
 | 
UNSORTABLE
);

885 
	`gtk_li°_°‹e_≠≥nd
(
modñ
, &
ôî
);

887 
i
 = 0; i < 
num
; i++) {

888 
fbuf
[32];

890 i‡(
œt
[
i
] <= 0.0)

891 
	`•rötf
(
fbuf
, "0.00");

893 
	`•rötf
(
fbuf
, "%3.2f%%", 
œt
[
i
]);

895 
	`gtk_li°_°‹e_£t
(
modñ
, &
ôî
, 
i
, 
fbuf
, -1);

898  
åì_võw
;

901 
gøph
 *
	`£tup_œt_buckë_gøph
(c⁄° *
tôÀ
, *
œt
,

902 c⁄° **
œbñs
,

903 
Àn
,

904 
xdim
, 
ydim
)

906 
gøph
 *
g
;

907 
i
;

909 
g
 = 
	`gøph_√w
(
xdim
, 
ydim
, 
gfio_gøph_f⁄t
);

910 
	`gøph_tôÀ
(
g
, 
tôÀ
);

911 
	`gøph_x_tôÀ
(
g
, "Buckets");

912 
	`gøph_y_tôÀ
(
g
, "Percent");

914 
i
 = 0; i < 
Àn
; i++) {

915 
gøph_œbñ_t
 
l
;

917 
l
 = 
	`gøph_add_œbñ
(
g
, 
œbñs
[
i
]);

918 
	`gøph_add_d©a
(
g
, 
l
, 
œt
[
i
]);

921  
g
;

924 
	`⁄_expo£_œt_døwög_¨ó
(
GtkWidgë
 *
w
, 
GdkEvít
 *
evít
, 
gpoöãr
 
p
)

926 
gøph
 *
g
 = 
p
;

927 
ˇúo_t
 *
¸
;

929 
¸
 = 
	`gdk_ˇúo_¸óã
(
	`gtk_widgë_gë_wödow
(
w
));

931 i‡(
	`gøph_has_toﬁtùs
(
g
)) {

932 
	`g_obje˘_£t
(
w
, "has-toﬁtù", 
TRUE
, 
NULL
);

933 
	`g_sig«l_c⁄√˘
(
w
, "quîy-toﬁtù", 
	`G_CALLBACK
(
˛©_gøph_toﬁtù
), 
g
);

936 
	`ˇúo_£t_sour˚_rgb
(
¸
, 0, 0, 0);

937 
	`b¨_gøph_døw
(
g
, 
¸
);

938 
	`ˇúo_de°roy
(
¸
);

940  
FALSE
;

943 
göt
 
	`⁄_c⁄fig_œt_døwög_¨ó
(
GtkWidgë
 *
w
, 
GdkEvítC⁄figuª
 *
evít
,

944 
gpoöãr
 
d©a
)

946 
guöt
 
width
 = 
	`gtk_widgë_gë_Æloˇãd_width
(
w
);

947 
guöt
 
height
 = 
	`gtk_widgë_gë_Æloˇãd_height
(
w
);

948 
gøph
 *
g
 = 
d©a
;

950 
	`gøph_£t_size
(
g
, 
width
, 
height
);

951 
	`gøph_£t_size
(
g
, 
width
, 
height
);

952 
	`gøph_£t_posôi⁄
(
g
, 0, 0);

953  
TRUE
;

956 
	`gfio_show_œãncy_buckës
(
gfio_˛õ¡
 *
gc
, 
GtkWidgë
 *
vbox
,

957 
thªad_°©
 *
ts
)

959 
io_u_œt
[
FIO_IO_U_LAT_U_NR
 + 
FIO_IO_U_LAT_M_NR
];

960 c⁄° *
ønges
[] = { "2u", "4u", "10u", "20u", "50u", "100u",

964 
°¨t
, 
íd
, 
i
;

965 c⁄° 
tŸÆ
 = 
FIO_IO_U_LAT_U_NR
 + 
FIO_IO_U_LAT_M_NR
;

966 
GtkWidgë
 *
‰ame
, *
åì_võw
, *
hbox
, *
com∂ëi⁄_vbox
, *
døwög_¨ó
;

967 
gui_íåy
 *
ge
 = 
gc
->ge;

969 
	`°©_ˇlc_œt_u
(
ts
, 
io_u_œt
);

970 
	`°©_ˇlc_œt_m
(
ts
, &
io_u_œt
[
FIO_IO_U_LAT_U_NR
]);

975 
°¨t
 = 
íd
 = -1U;

976 
i
 = 0; i < 
tŸÆ
; i++) {

977 i‡(
io_u_œt
[
i
] == 0.00)

980 i‡(
°¨t
 == -1U)

981 
°¨t
 = 
i
;

982 
íd
 = 
i
;

988 i‡(
°¨t
 == -1U)

991 
åì_võw
 = 
	`gfio_ouçut_œt_buckës
(&
io_u_œt
[
°¨t
], &
ønges
[°¨t], 
íd
 - start + 1);

992 
ge
->
œt_buckë_gøph
 = 
	`£tup_œt_buckë_gøph
("L©ícy Buckës", &
io_u_œt
[
°¨t
], &
ønges
[°¨t], 
íd
 - start + 1, 700.0, 300.0);

994 
‰ame
 = 
	`gtk_‰ame_√w
("Latency buckets");

995 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
‰ame
, 
FALSE
, FALSE, 5);

997 
com∂ëi⁄_vbox
 = 
	`gtk_vbox_√w
(
FALSE
, 3);

998 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
com∂ëi⁄_vbox
);

999 
hbox
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

1000 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
com∂ëi⁄_vbox
), 
hbox
);

1002 
døwög_¨ó
 = 
	`gtk_døwög_¨ó_√w
();

1003 
	`gtk_widgë_£t_size_ªque°
(
	`GTK_WIDGET
(
døwög_¨ó
), 700, 300);

1004 
	`gtk_widgë_modify_bg
(
døwög_¨ó
, 
GTK_STATE_NORMAL
, &
gfio_cﬁ‹_whôe
);

1005 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
com∂ëi⁄_vbox
), 
døwög_¨ó
);

1006 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
døwög_¨ó
), 
GFIO_DRAW_EVENT
, 
	`G_CALLBACK
(
⁄_expo£_œt_døwög_¨ó
), 
ge
->
œt_buckë_gøph
);

1007 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
døwög_¨ó
), "c⁄figuª_evít", 
	`G_CALLBACK
(
⁄_c⁄fig_œt_døwög_¨ó
), 
ge
->
œt_buckë_gøph
);

1009 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
hbox
), 
åì_võw
, 
TRUE
, TRUE, 3);

1012 
	`gfio_show_œt
(
GtkWidgë
 *
vbox
, c⁄° *
«me
, 
mö
,

1013 
max
, 
món
, 
dev
)

1015 c⁄° *
ba£
 = "(usec)";

1016 
GtkWidgë
 *
hbox
, *
œbñ
, *
‰ame
;

1017 *
möp
, *
maxp
;

1018 
tmp
[64];

1020 i‡(!
	`u£c_to_m£c
(&
mö
, &
max
, &
món
, &
dev
))

1021 
ba£
 = "(msec)";

1023 
möp
 = 
	`num2°r
(
mö
, 6, 1, 0, 0);

1024 
maxp
 = 
	`num2°r
(
max
, 6, 1, 0, 0);

1026 
	`•rötf
(
tmp
, "%†%s", 
«me
, 
ba£
);

1027 
‰ame
 = 
	`gtk_‰ame_√w
(
tmp
);

1028 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
‰ame
, 
FALSE
, FALSE, 5);

1030 
hbox
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

1031 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
hbox
);

1033 
œbñ
 = 
	`√w_öfo_œbñ_ö_‰ame
(
hbox
, "Minimum");

1034 
	`gtk_œbñ_£t_ãxt
(
	`GTK_LABEL
(
œbñ
), 
möp
);

1035 
œbñ
 = 
	`√w_öfo_œbñ_ö_‰ame
(
hbox
, "Maximum");

1036 
	`gtk_œbñ_£t_ãxt
(
	`GTK_LABEL
(
œbñ
), 
maxp
);

1037 
œbñ
 = 
	`√w_öfo_œbñ_ö_‰ame
(
hbox
, "Average");

1038 
	`•rötf
(
tmp
, "%5.02f", 
món
);

1039 
	`gtk_œbñ_£t_ãxt
(
	`GTK_LABEL
(
œbñ
), 
tmp
);

1040 
œbñ
 = 
	`√w_öfo_œbñ_ö_‰ame
(
hbox
, "Standard deviation");

1041 
	`•rötf
(
tmp
, "%5.02f", 
dev
);

1042 
	`gtk_œbñ_£t_ãxt
(
	`GTK_LABEL
(
œbñ
), 
tmp
);

1044 
	`‰ì
(
möp
);

1045 
	`‰ì
(
maxp
);

1048 
GtkWidgë
 *
	`gfio_ouçut_˛©_≥r˚¡ûes
(*
ovÆs
,

1049 
fio_Â64_t
 *
∂i°
,

1050 
Àn
,

1051 c⁄° *
ba£
,

1052 
sˇÀ
)

1054 
GTy≥
 
ty≥s
[
FIO_IO_U_LIST_MAX_LEN
];

1055 
GtkWidgë
 *
åì_võw
;

1056 
GtkTªeSñe˘i⁄
 *
£À˘i⁄
;

1057 
GtkLi°St‹e
 *
modñ
;

1058 
GtkTªeIãr
 
ôî
;

1059 
i
;

1061 
i
 = 0; i < 
Àn
; i++)

1062 
ty≥s
[
i
] = 
G_TYPE_INT
;

1064 
modñ
 = 
	`gtk_li°_°‹e_√wv
(
Àn
, 
ty≥s
);

1066 
åì_võw
 = 
	`gtk_åì_võw_√w_wôh_modñ
(
	`GTK_TREE_MODEL
(
modñ
));

1067 
	`gtk_widgë_£t_ˇn_focus
(
åì_võw
, 
FALSE
);

1069 
	`g_obje˘_£t
(
	`G_OBJECT
(
åì_võw
), "hódîs-visibÀ", 
TRUE
,

1070 "íabÀ-grid-löes", 
GTK_TREE_VIEW_GRID_LINES_BOTH
, 
NULL
);

1072 
£À˘i⁄
 = 
	`gtk_åì_võw_gë_£À˘i⁄
(
	`GTK_TREE_VIEW
(
åì_võw
));

1073 
	`gtk_åì_£À˘i⁄_£t_mode
(
	`GTK_TREE_SELECTION
(
£À˘i⁄
), 
GTK_SELECTION_BROWSE
);

1075 
i
 = 0; i < 
Àn
; i++) {

1076 
fbuf
[8];

1078 
	`•rötf
(
fbuf
, "%2.2f%%", 
∂i°
[
i
].
u
.
f
);

1079 
	`åì_võw_cﬁumn
(
åì_võw
, 
i
, 
fbuf
, 
ALIGN_RIGHT
 | 
UNSORTABLE
);

1082 
	`gtk_li°_°‹e_≠≥nd
(
modñ
, &
ôî
);

1084 
i
 = 0; i < 
Àn
; i++) {

1085 i‡(
sˇÀ
)

1086 
ovÆs
[
i
] = (ovals[i] + 999) / 1000;

1087 
	`gtk_li°_°‹e_£t
(
modñ
, &
ôî
, 
i
, 
ovÆs
[i], -1);

1090  
åì_võw
;

1093 
gøph
 *
	`£tup_˛©_gøph
(*
tôÀ
, *
ovÆs
,

1094 
fio_Â64_t
 *
∂i°
,

1095 
Àn
,

1096 
xdim
, 
ydim
)

1098 
gøph
 *
g
;

1099 
i
;

1101 
g
 = 
	`gøph_√w
(
xdim
, 
ydim
, 
gfio_gøph_f⁄t
);

1102 
	`gøph_tôÀ
(
g
, 
tôÀ
);

1103 
	`gøph_x_tôÀ
(
g
, "Percentile");

1104 
	`gøph_y_tôÀ
(
g
, "Time");

1106 
i
 = 0; i < 
Àn
; i++) {

1107 
gøph_œbñ_t
 
l
;

1108 
fbuf
[8];

1110 
	`•rötf
(
fbuf
, "%2.2f%%", 
∂i°
[
i
].
u
.
f
);

1111 
l
 = 
	`gøph_add_œbñ
(
g
, 
fbuf
);

1112 
	`gøph_add_d©a
(
g
, 
l
, (Ë
ovÆs
[
i
]);

1115  
g
;

1118 
	`gfio_show_˛©_≥r˚¡ûes
(
gfio_˛õ¡
 *
gc
,

1119 
GtkWidgë
 *
vbox
, 
thªad_°©
 *
ts
,

1120 
ddú
)

1122 *
io_u_∂©
 = 
ts
->io_u_∂©[
ddú
];

1123 
ƒ
 = 
ts
->
˛©_°©
[
ddú
].
ßm∂es
;

1124 
fio_Â64_t
 *
∂i°
 = 
ts
->
≥r˚¡ûe_li°
;

1125 *
ovÆs
, 
Àn
, 
möv
, 
maxv
, 
sˇÀ_down
;

1126 c⁄° *
ba£
;

1127 
GtkWidgë
 *
åì_võw
, *
‰ame
, *
hbox
, *
døwög_¨ó
, *
com∂ëi⁄_vbox
;

1128 
gui_íåy
 *
ge
 = 
gc
->ge;

1129 
tmp
[64];

1131 
Àn
 = 
	`ˇlc_˛©_≥r˚¡ûes
(
io_u_∂©
, 
ƒ
, 
∂i°
, &
ovÆs
, &
maxv
, &
möv
);

1132 i‡(!
Àn
)

1133 
out
;

1139 i‡(
möv
 > 2000 && 
maxv
 > 99999) {

1140 
sˇÀ_down
 = 1;

1141 
ba£
 = "msec";

1143 
sˇÀ_down
 = 0;

1144 
ba£
 = "usec";

1147 
	`•rötf
(
tmp
, "Com∂ëi⁄Öî˚¡ûe†(%s)", 
ba£
);

1148 
åì_võw
 = 
	`gfio_ouçut_˛©_≥r˚¡ûes
(
ovÆs
, 
∂i°
, 
Àn
, 
ba£
, 
sˇÀ_down
);

1149 
ge
->
˛©_gøph
 = 
	`£tup_˛©_gøph
(
tmp
, 
ovÆs
, 
∂i°
, 
Àn
, 700.0, 300.0);

1151 
‰ame
 = 
	`gtk_‰ame_√w
(
tmp
);

1152 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
‰ame
, 
FALSE
, FALSE, 5);

1154 
com∂ëi⁄_vbox
 = 
	`gtk_vbox_√w
(
FALSE
, 3);

1155 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
com∂ëi⁄_vbox
);

1156 
hbox
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

1157 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
com∂ëi⁄_vbox
), 
hbox
);

1158 
døwög_¨ó
 = 
	`gtk_døwög_¨ó_√w
();

1159 
	`gtk_widgë_£t_size_ªque°
(
	`GTK_WIDGET
(
døwög_¨ó
), 700, 300);

1160 
	`gtk_widgë_modify_bg
(
døwög_¨ó
, 
GTK_STATE_NORMAL
, &
gfio_cﬁ‹_whôe
);

1161 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
com∂ëi⁄_vbox
), 
døwög_¨ó
);

1162 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
døwög_¨ó
), 
GFIO_DRAW_EVENT
, 
	`G_CALLBACK
(
⁄_expo£_œt_døwög_¨ó
), 
ge
->
˛©_gøph
);

1163 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
døwög_¨ó
), "c⁄figuª_evít", 
	`G_CALLBACK
(
⁄_c⁄fig_œt_døwög_¨ó
), 
ge
->
˛©_gøph
);

1165 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
hbox
), 
åì_võw
, 
TRUE
, TRUE, 3);

1166 
out
:

1167 i‡(
ovÆs
)

1168 
	`‰ì
(
ovÆs
);

1171 
	#GFIO_CLAT
 1

	)

1172 
	#GFIO_SLAT
 2

	)

1173 
	#GFIO_LAT
 4

	)

1175 
	`gfio_show_ddú_°©us
(
gfio_˛õ¡
 *
gc
, 
GtkWidgë
 *
mbox
,

1176 
group_run_°©s
 *
rs
,

1177 
thªad_°©
 *
ts
, 
ddú
)

1179 c⁄° *
ddú_œbñ
[3] = { "Read", "Write", "Trim" };

1180 
GtkWidgë
 *
‰ame
, *
œbñ
, *
box
, *
vbox
, *
maö_vbox
;

1181 
mö
[3], 
max
[3], 
ru¡
;

1182 
bw
, 
i›s
;

1183 
Êags
 = 0;

1184 
món
[3], 
dev
[3];

1185 *
io_p
, *
bw_p
, *
i›s_p
;

1186 
i2p
;

1188 i‡(!
ts
->
ru¡ime
[
ddú
])

1191 
i2p
 = 
	`is_powî_of_2
(
rs
->
kb_ba£
);

1192 
ru¡
 = 
ts
->
ru¡ime
[
ddú
];

1194 
bw
 = (1000 * 
ts
->
io_byãs
[
ddú
]Ë/ 
ru¡
;

1195 
io_p
 = 
	`num2°r
(
ts
->
io_byãs
[
ddú
], 6, 1, 
i2p
, 8);

1196 
bw_p
 = 
	`num2°r
(
bw
, 6, 1, 
i2p
, 
ts
->
unô_ba£
);

1198 
i›s
 = (1000 * (
uöt64_t
)
ts
->
tŸÆ_io_u
[
ddú
]Ë/ 
ru¡
;

1199 
i›s_p
 = 
	`num2°r
(
i›s
, 6, 1, 0, 0);

1201 
box
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

1202 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
mbox
), 
box
, 
TRUE
, 
FALSE
, 3);

1204 
‰ame
 = 
	`gtk_‰ame_√w
(
ddú_œbñ
[
ddú
]);

1205 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
box
), 
‰ame
, 
TRUE
, TRUE, 5);

1207 
maö_vbox
 = 
	`gtk_vbox_√w
(
FALSE
, 3);

1208 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
maö_vbox
);

1210 
box
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

1211 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
maö_vbox
), 
box
, 
TRUE
, 
FALSE
, 3);

1213 
œbñ
 = 
	`√w_öfo_œbñ_ö_‰ame
(
box
, "IO");

1214 
	`gtk_œbñ_£t_ãxt
(
	`GTK_LABEL
(
œbñ
), 
io_p
);

1215 
œbñ
 = 
	`√w_öfo_œbñ_ö_‰ame
(
box
, "Bandwidth");

1216 
	`gtk_œbñ_£t_ãxt
(
	`GTK_LABEL
(
œbñ
), 
bw_p
);

1217 
œbñ
 = 
	`√w_öfo_œbñ_ö_‰ame
(
box
, "IOPS");

1218 
	`gtk_œbñ_£t_ãxt
(
	`GTK_LABEL
(
œbñ
), 
i›s_p
);

1219 
œbñ
 = 
	`√w_öfo_œbñ_ö_‰ame
(
box
, "Runtime (msec)");

1220 
	`œbñ_£t_öt_vÆue
(
œbñ
, 
ts
->
ru¡ime
[
ddú
]);

1222 i‡(
	`ˇlc_œt
(&
ts
->
bw_°©
[
ddú
], &
mö
[0], &
max
[0], &
món
[0], &
dev
[0])) {

1223 
p_of_agg
 = 100.0;

1224 c⁄° *
bw_°r
 = "KB";

1225 
tmp
[32];

1227 i‡(
rs
->
agg
[
ddú
]) {

1228 
p_of_agg
 = 
món
[0] * 100 / (Ë
rs
->
agg
[
ddú
];

1229 i‡(
p_of_agg
 > 100.0)

1230 
p_of_agg
 = 100.0;

1233 i‡(
món
[0] > 999999.9) {

1234 
mö
[0] /= 1000.0;

1235 
max
[0] /= 1000.0;

1236 
món
[0] /= 1000.0;

1237 
dev
[0] /= 1000.0;

1238 
bw_°r
 = "MB";

1241 
	`•rötf
(
tmp
, "B™dwidth (%s)", 
bw_°r
);

1242 
‰ame
 = 
	`gtk_‰ame_√w
(
tmp
);

1243 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
maö_vbox
), 
‰ame
, 
FALSE
, FALSE, 5);

1245 
box
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

1246 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
box
);

1248 
œbñ
 = 
	`√w_öfo_œbñ_ö_‰ame
(
box
, "Minimum");

1249 
	`œbñ_£t_öt_vÆue
(
œbñ
, 
mö
[0]);

1250 
œbñ
 = 
	`√w_öfo_œbñ_ö_‰ame
(
box
, "Maximum");

1251 
	`œbñ_£t_öt_vÆue
(
œbñ
, 
max
[0]);

1252 
œbñ
 = 
	`√w_öfo_œbñ_ö_‰ame
(
box
, "Percentage of jobs");

1253 
	`•rötf
(
tmp
, "%3.2f%%", 
p_of_agg
);

1254 
	`gtk_œbñ_£t_ãxt
(
	`GTK_LABEL
(
œbñ
), 
tmp
);

1255 
œbñ
 = 
	`√w_öfo_œbñ_ö_‰ame
(
box
, "Average");

1256 
	`•rötf
(
tmp
, "%5.02f", 
món
[0]);

1257 
	`gtk_œbñ_£t_ãxt
(
	`GTK_LABEL
(
œbñ
), 
tmp
);

1258 
œbñ
 = 
	`√w_öfo_œbñ_ö_‰ame
(
box
, "Standard deviation");

1259 
	`•rötf
(
tmp
, "%5.02f", 
dev
[0]);

1260 
	`gtk_œbñ_£t_ãxt
(
	`GTK_LABEL
(
œbñ
), 
tmp
);

1263 i‡(
	`ˇlc_œt
(&
ts
->
¶©_°©
[
ddú
], &
mö
[0], &
max
[0], &
món
[0], &
dev
[0]))

1264 
Êags
 |
GFIO_SLAT
;

1265 i‡(
	`ˇlc_œt
(&
ts
->
˛©_°©
[
ddú
], &
mö
[1], &
max
[1], &
món
[1], &
dev
[1]))

1266 
Êags
 |
GFIO_CLAT
;

1267 i‡(
	`ˇlc_œt
(&
ts
->
œt_°©
[
ddú
], &
mö
[2], &
max
[2], &
món
[2], &
dev
[2]))

1268 
Êags
 |
GFIO_LAT
;

1270 i‡(
Êags
) {

1271 
‰ame
 = 
	`gtk_‰ame_√w
("Latency");

1272 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
maö_vbox
), 
‰ame
, 
FALSE
, FALSE, 5);

1274 
vbox
 = 
	`gtk_vbox_√w
(
FALSE
, 3);

1275 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
vbox
);

1277 i‡(
Êags
 & 
GFIO_SLAT
)

1278 
	`gfio_show_œt
(
vbox
, "Submissi⁄Ü©ícy", 
mö
[0], 
max
[0], 
món
[0], 
dev
[0]);

1279 i‡(
Êags
 & 
GFIO_CLAT
)

1280 
	`gfio_show_œt
(
vbox
, "Com∂ëi⁄Ü©ícy", 
mö
[1], 
max
[1], 
món
[1], 
dev
[1]);

1281 i‡(
Êags
 & 
GFIO_LAT
)

1282 
	`gfio_show_œt
(
vbox
, "TŸÆÜ©ícy", 
mö
[2], 
max
[2], 
món
[2], 
dev
[2]);

1285 i‡(
ts
->
˛©_≥r˚¡ûes
)

1286 
	`gfio_show_˛©_≥r˚¡ûes
(
gc
, 
maö_vbox
, 
ts
, 
ddú
);

1288 
	`‰ì
(
io_p
);

1289 
	`‰ì
(
bw_p
);

1290 
	`‰ì
(
i›s_p
);

1293 
	`__gfio_di•œy_íd_ªsu…s
(
GtkWidgë
 *
wö
, 
gfio_˛õ¡
 *
gc
,

1294 
thªad_°©
 *
ts
,

1295 
group_run_°©s
 *
rs
)

1297 
GtkWidgë
 *
box
, *
vbox
, *
íåy
, *
s¸ﬁl
;

1298 
i
;

1300 
s¸ﬁl
 = 
	`gtk_s¸ﬁÀd_wödow_√w
(
NULL
, NULL);

1301 
	`gtk_c⁄èöî_£t_b‹dî_width
(
	`GTK_CONTAINER
(
s¸ﬁl
), 5);

1302 
	`gtk_s¸ﬁÀd_wödow_£t_pﬁicy
(
	`GTK_SCROLLED_WINDOW
(
s¸ﬁl
), 
GTK_POLICY_AUTOMATIC
, GTK_POLICY_AUTOMATIC);

1304 
vbox
 = 
	`gtk_vbox_√w
(
FALSE
, 3);

1306 
box
 = 
	`gtk_hbox_√w
(
FALSE
, 0);

1307 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
box
, 
TRUE
, 
FALSE
, 5);

1309 
	`gtk_s¸ﬁÀd_wödow_add_wôh_võwp‹t
(
	`GTK_SCROLLED_WINDOW
(
s¸ﬁl
), 
vbox
);

1311 
	`gtk_nŸebook_≠≥nd_∑ge
(
	`GTK_NOTEBOOK
(
wö
), 
s¸ﬁl
, 
	`gtk_œbñ_√w
(
ts
->
«me
));

1313 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
box
, "Name");

1314 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
íåy
), 
ts
->
«me
);

1315 i‡(
	`°æí
(
ts
->
des¸ùti⁄
)) {

1316 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
box
, "Description");

1317 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
íåy
), 
ts
->
des¸ùti⁄
);

1319 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
box
, "Group ID");

1320 
	`íåy_£t_öt_vÆue
(
íåy
, 
ts
->
groupid
);

1321 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
box
, "Jobs");

1322 
	`íåy_£t_öt_vÆue
(
íåy
, 
ts
->
membîs
);

1323 
gc
->
îr_íåy
 = 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
box
, "Error");

1324 
	`íåy_£t_öt_vÆue
(
íåy
, 
ts
->
îr‹
);

1325 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
box
, "PID");

1326 
	`íåy_£t_öt_vÆue
(
íåy
, 
ts
->
pid
);

1328 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

1329 i‡(
ts
->
io_byãs
[
i
])

1330 
	`gfio_show_ddú_°©us
(
gc
, 
vbox
, 
rs
, 
ts
, 
i
);

1333 
	`gfio_show_œãncy_buckës
(
gc
, 
vbox
, 
ts
);

1334 
	`gfio_show_˝u_ußge
(
vbox
, 
ts
);

1335 
	`gfio_show_io_dïths
(
vbox
, 
ts
);

1338 
	`gfio_di•œy_íd_ªsu…s
(
gfio_˛õ¡
 *
gc
)

1340 
gui_íåy
 *
ge
 = 
gc
->ge;

1341 
GtkWidgë
 *
ªs_nŸebook
;

1342 
i
;

1344 
ªs_nŸebook
 = 
	`gë_ªsu…s_wödow
(
ge
);

1346 
i
 = 0; i < 
gc
->
ƒ_ªsu…s
; i++) {

1347 
íd_ªsu…s
 *
e
 = &
gc
->
ªsu…s
[
i
];

1349 
	`__gfio_di•œy_íd_ªsu…s
(
ªs_nŸebook
, 
gc
, &
e
->
ts
, &e->
gs
);

1352 i‡(
	`gfio_disk_utû_show
(
gc
))

1353 
	`gtk_widgë_show_Æl
(
ge
->
ªsu…s_wödow
);

1356 
	`gfio_di•œy_ts
(
fio_˛õ¡
 *
˛õ¡
, 
thªad_°©
 *
ts
,

1357 
group_run_°©s
 *
rs
)

1359 
gfio_˛õ¡
 *
gc
 = 
˛õ¡
->
˛õ¡_d©a
;

1360 
gui_íåy
 *
ge
 = 
gc
->ge;

1362 
	`gfio_add_íd_ªsu…s
(
gc
, 
ts
, 
rs
);

1364 
	`gdk_thªads_íãr
();

1365 i‡(
ge
->
ªsu…s_wödow
)

1366 
	`__gfio_di•œy_íd_ªsu…s
(
ge
->
ªsu…s_nŸebook
, 
gc
, 
ts
, 
rs
);

1368 
	`gfio_di•œy_íd_ªsu…s
(
gc
);

1369 
	`gdk_thªads_Àave
();

1372 
	`gfio_˛õ¡_ªmoved
(
fio_˛õ¡
 *
˛õ¡
)

1374 
gfio_˛õ¡
 *
gc
 = 
˛õ¡
->
˛õ¡_d©a
;

1376 
	`as£π
(
gc
->
˛õ¡
 == client);

1377 
	`fio_put_˛õ¡
(
gc
->
˛õ¡
);

1378 
gc
->
˛õ¡
 = 
NULL
;

1381 
˛õ¡_›s
 
gfio_˛õ¡_›s
 = {

1382 .
ãxt
 = 
gfio_ãxt_›
,

1383 .
disk_utû
 = 
gfio_disk_utû_›
,

1384 .
thªad_°©us
 = 
gfio_thªad_°©us_›
,

1385 .
group_°©s
 = 
gfio_group_°©s_›
,

1386 .
jobs_ëa
 = 
gfio_upd©e_˛õ¡_ëa
,

1387 .
ëa
 = 
gfio_upd©e_Æl_ëa
,

1388 .
¥obe
 = 
gfio_¥obe_›
,

1389 .
quô
 = 
gfio_quô_›
,

1390 .
add_job
 = 
gfio_add_job_›
,

1391 .
upd©e_job
 = 
gfio_upd©e_job_›
,

1392 .
timed_out
 = 
gfio_˛õ¡_timed_out
,

1393 .
°›
 = 
gfio_˛õ¡_°›
,

1394 .
°¨t
 = 
gfio_˛õ¡_°¨t
,

1395 .
job_°¨t
 = 
gfio_˛õ¡_job_°¨t
,

1396 .
iﬁog
 = 
gfio_˛õ¡_iﬁog
,

1397 .
ªmoved
 = 
gfio_˛õ¡_ªmoved
,

1398 .
ëa_m£c
 = 
FIO_CLIENT_DEF_ETA_MSEC
,

1399 .
°ay_c⁄√˘ed
 = 1,

1400 .
˛õ¡_ty≥
 = 
FIO_CLIENT_TYPE_GUI
,

	@/home/terekhov/tmp/fio/fio/gclient.h

1 #i‚de‡
GFIO_CLIENT_H


2 
	#GFIO_CLIENT_H


	)

4 
˛õ¡_›s
 
gfio_˛õ¡_›s
;

6 
gfio_di•œy_íd_ªsu…s
(
gfio_˛õ¡
 *);

8 
	#GFIO_READ_R
 0.13

	)

9 
	#GFIO_READ_G
 0.54

	)

10 
	#GFIO_READ_B
 0.13

	)

11 
	#GFIO_WRITE_R
 1.00

	)

12 
	#GFIO_WRITE_G
 0.00

	)

13 
	#GFIO_WRITE_B
 0.00

	)

14 
	#GFIO_TRIM_R
 0.24

	)

15 
	#GFIO_TRIM_G
 0.18

	)

16 
	#GFIO_TRIM_B
 0.52

	)

	@/home/terekhov/tmp/fio/fio/gcompat.c

1 
	~<gtk/gtk.h
>

3 
	~"gcom∑t.h
"

5 #i‡
GTK_MAJOR_VERSION
 <2 && 
GTK_MINOR_VERSION
 < 24

7 
GtkWidgë
 *
	$gtk_combo_box_ãxt_√w
()

9  
	`gtk_combo_box_√w
();

10 
	}
}

12 
	$gtk_combo_box_ãxt_≠≥nd_ãxt
(
GtkComboBoxText
 *
combo_box
,

13 c⁄° 
gch¨
 *
ãxt
)

15 
	`gtk_combo_box_≠≥nd_ãxt
(
	`GTK_COMBO_BOX
(
combo_box
), 
ãxt
);

16 
	}
}

18 
	$gtk_combo_box_ãxt_ö£π_ãxt
(
GtkComboBoxText
 *
combo_box
, 
göt
 
posôi⁄
,

19 c⁄° 
gch¨
 *
ãxt
)

21 
	`gtk_combo_box_ö£π_ãxt
(
	`GTK_COMBO_BOX
(
combo_box
), 
posôi⁄
, 
ãxt
);

22 
	}
}

24 
	$gtk_combo_box_ãxt_¥ïíd_ãxt
(
GtkComboBoxText
 *
combo_box
,

25 c⁄° 
gch¨
 *
ãxt
)

27 
	`gtk_combo_box_¥ïíd_ãxt
(
	`GTK_COMBO_BOX
(
combo_box
), 
ãxt
);

28 
	}
}

30 
gch¨
 *
	$gtk_combo_box_ãxt_gë_a˘ive_ãxt
(
GtkComboBoxText
 *
combo_box
)

32  
	`gtk_combo_box_gë_a˘ive_ãxt
(
	`GTK_COMBO_BOX
(
combo_box
));

33 
	}
}

37 #i‡
GTK_MAJOR_VERSION
 < 3

39 
guöt
 
	$gtk_widgë_gë_Æloˇãd_width
(
GtkWidgë
 *
w
)

41  
w
->
Æloˇti⁄
.
width
;

42 
	}
}

44 
guöt
 
	$gtk_widgë_gë_Æloˇãd_height
(
GtkWidgë
 *
w
)

46  
w
->
Æloˇti⁄
.
height
;

47 
	}
}

51 #i‡
GTK_MAJOR_VERSION
 <2 && 
GTK_MINOR_VERSION
 < 18

52 
	$gtk_widgë_£t_ˇn_focus
(
GtkWidgë
 *
widgë
, 
gboﬁón
 
ˇn_focus
)

54 i‡(
ˇn_focus
)

55 
	`GTK_WIDGET_SET_FLAGS
(
widgë
, 
GTK_CAN_FOCUS
);

57 
	`GTK_WIDGET_UNSET_FLAGS
(
widgë
, 
GTK_CAN_FOCUS
);

58 
	}
}

	@/home/terekhov/tmp/fio/fio/gcompat.h

1 #i‚de‡
GFIO_GTK_COMPAT


2 
	#GFIO_GTK_COMPAT


	)

4 
	~<gtk/gtk.h
>

6 #i‡
GTK_MAJOR_VERSION
 <2 && 
GTK_MINOR_VERSION
 < 24

7 
	gGtkComboBoxText
;

8 
GtkComboBox
 
	tGtkComboBoxText
;

9 
GtkWidgë
 *
gtk_combo_box_ãxt_√w
();

10 
GtkWidgë
 *
gtk_combo_box_ãxt_√w_wôh_íåy
();

11 
gtk_combo_box_ãxt_≠≥nd_ãxt
(
GtkComboBoxText
 *
combo_box
, c⁄° 
gch¨
 *
ãxt
);

12 
gtk_combo_box_ãxt_ö£π_ãxt
(
GtkComboBoxText
 *
combo_box
, 
göt
 
posôi⁄
, c⁄° 
gch¨
 *
ãxt
);

13 
gtk_combo_box_ãxt_¥ïíd_ãxt
(
GtkComboBoxText
 *
combo_box
, c⁄° 
gch¨
 *
ãxt
);

14 
gtk_combo_box_ãxt_ªmove
(
GtkComboBoxText
 *
combo_box
, 
göt
 
posôi⁄
);

15 
gch¨
 *
gtk_combo_box_ãxt_gë_a˘ive_ãxt
(
GtkComboBoxText
 *
combo_box
);

17 
	#GTK_COMBO_BOX_TEXT
 
GTK_COMBO_BOX


	)

20 #i‡
GTK_MAJOR_VERSION
 <2 && 
GTK_MINOR_VERSION
 < 14

21 
ölöe
 
GtkWidgë
 *
	$gtk_dülog_gë_c⁄ã¡_¨ó
(
GtkDülog
 *
dülog
)

23  
dülog
->
vbox
;

24 
	}
}

25 
ölöe
 
GdkWödow
 *
	$gtk_widgë_gë_wödow
(
GtkWidgë
 *
w
)

27  
w
->
wödow
;

28 
	}
}

31 #i‡
GTK_MAJOR_VERSION
 < 3

32 
guöt
 
gtk_widgë_gë_Æloˇãd_width
(
GtkWidgë
 *
w
);

33 
guöt
 
gtk_widgë_gë_Æloˇãd_height
(
GtkWidgë
 *
w
);

36 #i‡
GTK_MAJOR_VERSION
 == 3

37 
	#GFIO_DRAW_EVENT
 "døw"

	)

38 #ñi‡
GTK_MAJOR_VERSION
 == 2

39 
	#GFIO_DRAW_EVENT
 "expo£_evít"

	)

42 #i‡
GTK_MAJOR_VERSION
 <2 && 
GTK_MINOR_VERSION
 < 18

43 
gtk_widgë_£t_ˇn_focus
(
GtkWidgë
 *
widgë
, 
gboﬁón
 
ˇn_focus
);

	@/home/terekhov/tmp/fio/fio/gerror.c

1 
	~<loˇÀ.h
>

2 
	~<mÆloc.h
>

3 
	~<°rög.h
>

4 
	~<°d¨g.h
>

6 
	~<gtk/gtk.h
>

8 
	~"gfio.h
"

9 
	~"gîr‹.h
"

11 
	$⁄_öfo_b¨_ª•⁄£
(
GtkWidgë
 *
widgë
, 
göt
 
ª•⁄£
,

12 
gpoöãr
 
d©a
)

14 
gui
 *
ui
 = (guò*Ë
d©a
;

16 i‡(
ª•⁄£
 =
GTK_RESPONSE_OK
) {

17 
	`gtk_widgë_de°roy
(
widgë
);

18 
ui
->
îr‹_öfo_b¨
 = 
NULL
;

20 
	}
}

22 
	$ªp‹t_îr‹
(
gui_íåy
 *
ge
, 
GEº‹
 *
îr‹
)

24 
gui
 *
ui
 = 
ge
->ui;

26 i‡(
ui
->
îr‹_öfo_b¨
 =
NULL
) {

27 
GtkWidgë
 *
c⁄èöî
;

29 
ui
->
îr‹_öfo_b¨
 = 
	`gtk_öfo_b¨_√w_wôh_buâ⁄s
(
GTK_STOCK_OK
,

30 
GTK_RESPONSE_OK
, 
NULL
);

31 
	`g_sig«l_c⁄√˘
(
ui
->
îr‹_öfo_b¨
, "ª•⁄£", 
	`G_CALLBACK
(
⁄_öfo_b¨_ª•⁄£
), ui);

32 
	`gtk_öfo_b¨_£t_mesßge_ty≥
(
	`GTK_INFO_BAR
(
ui
->
îr‹_öfo_b¨
),

33 
GTK_MESSAGE_ERROR
);

35 
ui
->
îr‹_œbñ
 = 
	`gtk_œbñ_√w
(
îr‹
->
mesßge
);

36 
c⁄èöî
 = 
	`gtk_öfo_b¨_gë_c⁄ã¡_¨ó
(
	`GTK_INFO_BAR
(
ui
->
îr‹_öfo_b¨
));

37 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
c⁄èöî
), 
ui
->
îr‹_œbñ
);

39 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
ui
->
vbox
), ui->
îr‹_öfo_b¨
, 
FALSE
, FALSE, 0);

40 
	`gtk_widgë_show_Æl
(
ui
->
vbox
);

42 
buf„r
[256];

43 
	`¢¥ötf
(
buf„r
, (buffer), "FailedÅo open file.");

44 
	`gtk_œbñ_£t_ãxt
(
	`GTK_LABEL
(
ui
->
îr‹_œbñ
), 
buf„r
);

46 
	}
}

48 
	$gfio_ªp‹t_îr‹
(
gui_íåy
 *
ge
, c⁄° *
f‹m©
, ...)

50 
va_li°
 
¨gs
;

51 
GEº‹
 *
îr‹
;

53 
	`va_°¨t
(
¨gs
, 
f‹m©
);

54 
îr‹
 = 
	`g_îr‹_√w_vÆi°
(
	`g_qu¨k_‰om_°rög
("fio"), 1, 
f‹m©
, 
¨gs
);

55 
	`va_íd
(
¨gs
);

57 
	`ªp‹t_îr‹
(
ge
, 
îr‹
);

58 
	`g_îr‹_‰ì
(
îr‹
);

59 
	}
}

61 
	$gfio_ªp‹t_öfo
(
gui
 *
ui
, c⁄° *
tôÀ
, c⁄° *
mesßge
)

63 
GtkWidgë
 *
dülog
, *
c⁄ã¡
, *
œbñ
;

65 
dülog
 = 
	`gtk_dülog_√w_wôh_buâ⁄s
(
tôÀ
, 
	`GTK_WINDOW
(
ui
->
wödow
),

66 
GTK_DIALOG_MODAL
 | 
GTK_DIALOG_DESTROY_WITH_PARENT
,

67 
GTK_STOCK_OK
, 
GTK_RESPONSE_OK
, 
NULL
);

69 
c⁄ã¡
 = 
	`gtk_dülog_gë_c⁄ã¡_¨ó
(
	`GTK_DIALOG
(
dülog
));

70 
œbñ
 = 
	`gtk_œbñ_√w
(
mesßge
);

71 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
c⁄ã¡
), 
œbñ
);

72 
	`gtk_widgë_show_Æl
(
dülog
);

73 
	`gtk_dülog_£t_deÁu…_ª•⁄£
(
	`GTK_DIALOG
(
dülog
), 
GTK_RESPONSE_ACCEPT
);

74 
	`gtk_dülog_run
(
	`GTK_DIALOG
(
dülog
));

75 
	`gtk_widgë_de°roy
(
dülog
);

76 
	}
}

	@/home/terekhov/tmp/fio/fio/gerror.h

1 #i‚de‡
GFIO_ERROR_H


2 
	#GFIO_ERROR_H


	)

4 
gfio_ªp‹t_îr‹
(
gui_íåy
 *
ge
, c⁄° *
f‹m©
, ...);

5 
gfio_ªp‹t_öfo
(
gui
 *
ui
, c⁄° *
tôÀ
, c⁄° *
mesßge
);

	@/home/terekhov/tmp/fio/fio/gettime-thread.c

1 
	~<uni°d.h
>

2 
	~<m©h.h
>

3 
	~<sys/time.h
>

4 
	~<time.h
>

6 
	~"fio.h
"

7 
	~"smÆloc.h
"

9 
timevÆ
 *
	gfio_tv
 = 
NULL
;

10 
	gfio_gtod_ofÊﬂd
 = 0;

11 
	gfio_gtod_˝u
 = -1;

12 
±hªad_t
 
	ggtod_thªad
;

14 
	$fio_gtod_öô
()

16 
fio_tv
 = 
	`smÆloc
((
timevÆ
));

17 i‡(!
fio_tv
)

18 
	`log_îr
("fio: smallocÖoolÉxhausted\n");

19 
	}
}

21 
	$fio_gtod_upd©e
()

23 i‡(
fio_tv
)

24 
	`gëtimeofday
(
fio_tv
, 
NULL
);

25 
	}
}

27 *
	$gtod_thªad_maö
(*
d©a
)

29 
fio_muãx
 *
muãx
 = 
d©a
;

31 
	`fio_muãx_up
(
muãx
);

39 
thªads
) {

40 
	`fio_gtod_upd©e
();

41 
n›
;

44  
NULL
;

45 
	}
}

47 
	$fio_°¨t_gtod_thªad
()

49 
fio_muãx
 *
muãx
;

50 
±hªad_©å_t
 
©å
;

51 
ªt
;

53 
muãx
 = 
	`fio_muãx_öô
(
FIO_MUTEX_LOCKED
);

54 i‡(!
muãx
)

57 
	`±hªad_©å_öô
(&
©å
);

58 
	`±hªad_©å_£t°acksize
(&
©å
, 
PTHREAD_STACK_MIN
);

59 
ªt
 = 
	`±hªad_¸óã
(&
gtod_thªad
, &
©å
, 
gtod_thªad_maö
, 
NULL
);

60 
	`±hªad_©å_de°roy
(&
©å
);

61 i‡(
ªt
) {

62 
	`log_îr
("C™'à¸óã gtodÅhªad: %s\n", 
	`°ªº‹
(
ªt
));

63 
îr
;

66 
ªt
 = 
	`±hªad_dëach
(
gtod_thªad
);

67 i‡(
ªt
) {

68 
	`log_îr
("C™'àdë©ch gtodÅhªad: %s\n", 
	`°ªº‹
(
ªt
));

69 
îr
;

72 
	`d¥öt
(
FD_MUTEX
, "wait on startup_mutex\n");

73 
	`fio_muãx_down
(
muãx
);

74 
	`d¥öt
(
FD_MUTEX
, "done waiting on startup_mutex\n");

75 
îr
:

76 
	`fio_muãx_ªmove
(
muãx
);

77  
ªt
;

78 
	}
}

	@/home/terekhov/tmp/fio/fio/gettime.c

5 
	~<uni°d.h
>

6 
	~<m©h.h
>

7 
	~<sys/time.h
>

8 
	~<time.h
>

10 
	~"fio.h
"

11 
	~"smÆloc.h
"

13 
	~"hash.h
"

14 
	~"os/os.h
"

16 #i‡
deföed
(
ARCH_HAVE_CPU_CLOCK
Ë&& !deföed(
ARCH_CPU_CLOCK_CYCLES_PER_USEC
)

17 
	gcy˛es_≥r_u£c
;

18 
	göv_cy˛es_≥r_u£c
;

20 
	gtsc_ªlübÀ
 = 0;

22 
	stv_vÆid
 {

23 
timevÆ
 
	mœ°_tv
;

24 
uöt64_t
 
	mœ°_cy˛es
;

25 
	mœ°_tv_vÆid
;

27 #ifde‡
CONFIG_TLS_THREAD


28 
__thªad
 
tv_vÆid
 
	g°©ic_tv_vÆid
;

30 
±hªad_key_t
 
	gtv_és_key
;

33 
fio_cs
 
	gfio_˛ock_sour˚
 = 
FIO_PREFERRED_CLOCK_SOURCE
;

34 
	gfio_˛ock_sour˚_£t
 = 0;

35 
fio_cs
 
	gfio_˛ock_sour˚_öôed
 = 
CS_INVAL
;

37 #ifde‡
FIO_DEBUG_TIME


39 
	#HASH_BITS
 8

	)

40 
	#HASH_SIZE
 (1 << 
HASH_BITS
)

	)

42 
Êi°_hód
 
	ghash
[
HASH_SIZE
];

43 
	ggtod_öôed
;

45 
	sgtod_log
 {

46 
Êi°_hód
 
	mli°
;

47 *
	mˇŒî
;

48 
	mˇŒs
;

51 
gtod_log
 *
	$föd_hash
(*
ˇŒî
)

53 
h
 = 
	`hash_±r
(
ˇŒî
, 
HASH_BITS
);

54 
Êi°_hód
 *
íåy
;

56 
	`Êi°_f‹_óch
(
íåy
, &
hash
[
h
]) {

57 
gtod_log
 *
log
 = 
	`Êi°_íåy
(
íåy
, gtod_log,

58 
li°
);

60 i‡(
log
->
ˇŒî
 == caller)

61  
log
;

64  
NULL
;

65 
	}
}

67 
gtod_log
 *
	$föd_log
(*
ˇŒî
)

69 
gtod_log
 *
log
 = 
	`föd_hash
(
ˇŒî
);

71 i‡(!
log
) {

72 
h
;

74 
log
 = 
	`mÆloc
((*log));

75 
	`INIT_FLIST_HEAD
(&
log
->
li°
);

76 
log
->
ˇŒî
 = caller;

77 
log
->
ˇŒs
 = 0;

79 
h
 = 
	`hash_±r
(
ˇŒî
, 
HASH_BITS
);

80 
	`Êi°_add_èû
(&
log
->
li°
, &
hash
[
h
]);

83  
log
;

84 
	}
}

86 
	$gtod_log_ˇŒî
(*
ˇŒî
)

88 i‡(
gtod_öôed
) {

89 
gtod_log
 *
log
 = 
	`föd_log
(
ˇŒî
);

91 
log
->
ˇŒs
++;

93 
	}
}

95 
fio_exô
 
	$fio_dump_gtod
()

97 
tŸÆ_ˇŒs
 = 0;

98 
i
;

100 
i
 = 0; i < 
HASH_SIZE
; i++) {

101 
Êi°_hód
 *
íåy
;

102 
gtod_log
 *
log
;

104 
	`Êi°_f‹_óch
(
íåy
, &
hash
[
i
]) {

105 
log
 = 
	`Êi°_íåy
(
íåy
, 
gtod_log
, 
li°
);

107 
	`¥ötf
("fun˘i⁄ %p, cÆl†%lu\n", 
log
->
ˇŒî
,

108 
log
->
ˇŒs
);

109 
tŸÆ_ˇŒs
 +
log
->
ˇŒs
;

113 
	`¥ötf
("TŸÆ %lu gëtimeofday\n", 
tŸÆ_ˇŒs
);

114 
	}
}

116 
fio_öô
 
	$gtod_öô
()

118 
i
;

120 
i
 = 0; i < 
HASH_SIZE
; i++)

121 
	`INIT_FLIST_HEAD
(&
hash
[
i
]);

123 
gtod_öôed
 = 1;

124 
	}
}

128 #ifde‡
CONFIG_CLOCK_GETTIME


129 
	$fûl_˛ock_gëtime
(
time•ec
 *
ts
)

131 #ifde‡
CONFIG_CLOCK_MONOTONIC


132  
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, 
ts
);

134  
	`˛ock_gëtime
(
CLOCK_REALTIME
, 
ts
);

136 
	}
}

139 *
	$__fio_gëtime
(
timevÆ
 *
ç
)

141 
tv_vÆid
 *
tv
;

143 #ifde‡
CONFIG_TLS_THREAD


144 
tv
 = &
°©ic_tv_vÆid
;

146 
tv
 = 
	`±hªad_gë•ecific
(
tv_és_key
);

149 
fio_˛ock_sour˚
) {

150 #ifde‡
CONFIG_GETTIMEOFDAY


151 
CS_GTOD
:

152 
	`gëtimeofday
(
ç
, 
NULL
);

155 #ifde‡
CONFIG_CLOCK_GETTIME


156 
CS_CGETTIME
: {

157 
time•ec
 
ts
;

159 i‡(
	`fûl_˛ock_gëtime
(&
ts
) < 0) {

160 
	`log_îr
("fio: clock_gettime fails\n");

161 
	`as£π
(0);

164 
ç
->
tv_£c
 = 
ts
.tv_sec;

165 
ç
->
tv_u£c
 = 
ts
.
tv_n£c
 / 1000;

169 #ifde‡
ARCH_HAVE_CPU_CLOCK


170 
CS_CPUCLOCK
: {

171 
uöt64_t
 
u£cs
, 
t
;

173 
t
 = 
	`gë_˝u_˛ock
();

174 i‡(
tv
 && 
t
 <Åv->
œ°_cy˛es
) {

175 
	`d¥öt
(
FD_TIME
, "CPU clock going back inÅime\n");

176 
t
 = 
tv
->
œ°_cy˛es
;

177 } i‡(
tv
)

178 
tv
->
œ°_cy˛es
 = 
t
;

180 #ifde‡
ARCH_CPU_CLOCK_CYCLES_PER_USEC


181 
u£cs
 = 
t
 / 
ARCH_CPU_CLOCK_CYCLES_PER_USEC
;

183 
u£cs
 = (
t
 * 
öv_cy˛es_≥r_u£c
) / 16777216UL;

185 
ç
->
tv_£c
 = 
u£cs
 / 1000000;

186 
ç
->
tv_u£c
 = 
u£cs
 % 1000000;

191 
	`log_îr
("fio: invÆid clock sour˚ %d\n", 
fio_˛ock_sour˚
);

195  
tv
;

196 
	}
}

198 #ifde‡
FIO_DEBUG_TIME


199 
	$fio_gëtime
(
timevÆ
 *
ç
, *
ˇŒî
)

201 
	$fio_gëtime
(
timevÆ
 *
ç
, 
fio_unu£d
 *
ˇŒî
)

204 
tv_vÆid
 *
tv
;

206 #ifde‡
FIO_DEBUG_TIME


207 i‡(!
ˇŒî
)

208 
ˇŒî
 = 
	`__buûtö_ªtu∫_addªss
(0);

210 
	`gtod_log_ˇŒî
(
ˇŒî
);

212 i‡(
	`fio_u∆ikñy
(
fio_tv
)) {

213 
	`mem˝y
(
ç
, 
fio_tv
, (*tp));

217 
tv
 = 
	`__fio_gëtime
(
ç
);

223 i‡(
tv
) {

224 i‡(
tv
->
œ°_tv_vÆid
) {

225 i‡(
ç
->
tv_£c
 < 
tv
->
œ°_tv
.tv_sec)

226 
ç
->
tv_£c
 = 
tv
->
œ°_tv
.tv_sec;

227 i‡(
tv
->
œ°_tv
.
tv_£c
 =
ç
->tv_sec &&

228 
ç
->
tv_u£c
 < 
tv
->
œ°_tv
.tv_usec)

229 
ç
->
tv_u£c
 = 
tv
->
œ°_tv
.tv_usec;

231 
tv
->
œ°_tv_vÆid
 = 1;

232 
	`mem˝y
(&
tv
->
œ°_tv
, 
ç
, (*tp));

234 
	}
}

236 #i‡
deföed
(
ARCH_HAVE_CPU_CLOCK
Ë&& !deföed(
ARCH_CPU_CLOCK_CYCLES_PER_USEC
)

237 
	$gë_cy˛es_≥r_u£c
()

239 
timevÆ
 
s
, 
e
;

240 
uöt64_t
 
c_s
, 
c_e
;

241 
fio_cs
 
ﬁd_cs
 = 
fio_˛ock_sour˚
;

243 #ifde‡
CONFIG_CLOCK_GETTIME


244 
fio_˛ock_sour˚
 = 
CS_CGETTIME
;

246 
fio_˛ock_sour˚
 = 
CS_GTOD
;

248 
	`__fio_gëtime
(&
s
);

250 
c_s
 = 
	`gë_˝u_˛ock
();

252 
uöt64_t
 
ñ≠£d
;

254 
	`__fio_gëtime
(&
e
);

256 
ñ≠£d
 = 
	`utime_sö˚
(&
s
, &
e
);

257 i‡(
ñ≠£d
 >= 1280) {

258 
c_e
 = 
	`gë_˝u_˛ock
();

263 
fio_˛ock_sour˚
 = 
ﬁd_cs
;

264  (
c_e
 - 
c_s
 + 127) >> 7;

265 
	}
}

267 
	#NR_TIME_ITERS
 50

	)

269 
	$ˇlibøã_˝u_˛ock
()

271 
dñè
, 
món
, 
S
;

272 
uöt64_t
 
avg
, 
cy˛es
[
NR_TIME_ITERS
];

273 
i
, 
ßm∂es
;

275 
cy˛es
[0] = 
	`gë_cy˛es_≥r_u£c
();

276 
S
 = 
dñè
 = 
món
 = 0.0;

277 
i
 = 0; i < 
NR_TIME_ITERS
; i++) {

278 
cy˛es
[
i
] = 
	`gë_cy˛es_≥r_u£c
();

279 
dñè
 = 
cy˛es
[
i
] - 
món
;

280 i‡(
dñè
) {

281 
món
 +
dñè
 / (
i
 + 1.0);

282 
S
 +
dñè
 * (
cy˛es
[
i
] - 
món
);

290 i‡(!
cy˛es
[0] && !cy˛es[
NR_TIME_ITERS
 - 1])

293 
S
 = 
	`sqπ
(S / (
NR_TIME_ITERS
 - 1.0));

295 
ßm∂es
 = 
avg
 = 0;

296 
i
 = 0; i < 
NR_TIME_ITERS
; i++) {

297 
this
 = 
cy˛es
[
i
];

299 i‡((
	`fmax
(
this
, 
món
Ë- 
	`fmö
—his, món)Ë> 
S
)

301 
ßm∂es
++;

302 
avg
 +
this
;

305 
S
 /(Ë
NR_TIME_ITERS
;

306 
món
 /= 10.0;

308 
i
 = 0; i < 
NR_TIME_ITERS
; i++)

309 
	`d¥öt
(
FD_TIME
, "cy˛es[%d]=%Œu\n", 
i
,

310 (Ë
cy˛es
[
i
] / 10);

312 
avg
 /
ßm∂es
;

313 
avg
 = (avg + 5) / 10;

314 
	`d¥öt
(
FD_TIME
, "avg: %Œu\n", (Ë
avg
);

315 
	`d¥öt
(
FD_TIME
, "món=%f, S=%f\n", 
món
, 
S
);

317 
cy˛es_≥r_u£c
 = 
avg
;

318 
öv_cy˛es_≥r_u£c
 = 16777216UL / 
cy˛es_≥r_u£c
;

319 
	`d¥öt
(
FD_TIME
, "öv_cy˛es_≥r_u£c=%lu\n", 
öv_cy˛es_≥r_u£c
);

321 
	}
}

323 
	$ˇlibøã_˝u_˛ock
()

325 #ifde‡
ARCH_CPU_CLOCK_CYCLES_PER_USEC


330 
	}
}

333 #i‚de‡
CONFIG_TLS_THREAD


334 
	$fio_loˇl_˛ock_öô
(
is_thªad
)

336 
tv_vÆid
 *
t
;

338 
t
 = 
	`ˇŒoc
(1, (*t));

339 i‡(
	`±hªad_£t•ecific
(
tv_és_key
, 
t
))

340 
	`log_îr
("fio: can't set TLS key\n");

341 
	}
}

343 
	$kûl_tv_és_key
(*
d©a
)

345 
	`‰ì
(
d©a
);

346 
	}
}

348 
	$fio_loˇl_˛ock_öô
(
is_thªad
)

350 
	}
}

353 
	$fio_˛ock_öô
()

355 i‡(
fio_˛ock_sour˚
 =
fio_˛ock_sour˚_öôed
)

358 #i‚de‡
CONFIG_TLS_THREAD


359 i‡(
	`±hªad_key_¸óã
(&
tv_és_key
, 
kûl_tv_és_key
))

360 
	`log_îr
("fio: can't create TLS key\n");

363 
fio_˛ock_sour˚_öôed
 = 
fio_˛ock_sour˚
;

365 i‡(
	`ˇlibøã_˝u_˛ock
())

366 
tsc_ªlübÀ
 = 0;

373 i‡(
tsc_ªlübÀ
) {

374 i‡(!
fio_˛ock_sour˚_£t
)

375 
fio_˛ock_sour˚
 = 
CS_CPUCLOCK
;

376 } i‡(
fio_˛ock_sour˚
 =
CS_CPUCLOCK
)

377 
	`log_öfo
("fio: clocksource=cpu mayÇot beÑeliable\n");

378 
	}
}

380 
uöt64_t
 
	$utime_sö˚
(
timevÆ
 *
s
, timevÆ *
e
)

382 
£c
, 
u£c
;

383 
uöt64_t
 
ªt
;

385 
£c
 = 
e
->
tv_£c
 - 
s
->tv_sec;

386 
u£c
 = 
e
->
tv_u£c
 - 
s
->tv_usec;

387 i‡(
£c
 > 0 && 
u£c
 < 0) {

388 
£c
--;

389 
u£c
 += 1000000;

395 i‡(
£c
 < 0 || (£¯=0 && 
u£c
 < 0))

398 
ªt
 = 
£c
 * 1000000ULL + 
u£c
;

400  
ªt
;

401 
	}
}

403 
uöt64_t
 
	$utime_sö˚_now
(
timevÆ
 *
s
)

405 
timevÆ
 
t
;

407 
	`fio_gëtime
(&
t
, 
NULL
);

408  
	`utime_sö˚
(
s
, &
t
);

409 
	}
}

411 
uöt64_t
 
	$mtime_sö˚
(
timevÆ
 *
s
, timevÆ *
e
)

413 
£c
, 
u£c
, 
ªt
;

415 
£c
 = 
e
->
tv_£c
 - 
s
->tv_sec;

416 
u£c
 = 
e
->
tv_u£c
 - 
s
->tv_usec;

417 i‡(
£c
 > 0 && 
u£c
 < 0) {

418 
£c
--;

419 
u£c
 += 1000000;

422 i‡(
£c
 < 0 || (£¯=0 && 
u£c
 < 0))

425 
£c
 *= 1000UL;

426 
u£c
 /= 1000UL;

427 
ªt
 = 
£c
 + 
u£c
;

429  
ªt
;

430 
	}
}

432 
uöt64_t
 
	$mtime_sö˚_now
(
timevÆ
 *
s
)

434 
timevÆ
 
t
;

435 *
p
 = 
	`__buûtö_ªtu∫_addªss
(0);

437 
	`fio_gëtime
(&
t
, 
p
);

438  
	`mtime_sö˚
(
s
, &
t
);

439 
	}
}

441 
uöt64_t
 
	$time_sö˚_now
(
timevÆ
 *
s
)

443  
	`mtime_sö˚_now
(
s
) / 1000;

444 
	}
}

446 #i‡
deföed
(
FIO_HAVE_CPU_AFFINITY
Ë&& deföed(
ARCH_HAVE_CPU_CLOCK
) && \

447 
	$deföed
(
CONFIG_SFAA
)

449 
	#CLOCK_ENTRIES
 100000

	)

451 
	s˛ock_íåy
 {

452 
uöt32_t
 
£q
;

453 
uöt32_t
 
˝u
;

454 
uöt64_t
 
tsc
;

457 
	s˛ock_thªad
 {

458 
±hªad_t
 
thªad
;

459 
˝u
;

460 
±hªad_muãx_t
 
lock
;

461 
±hªad_muãx_t
 
°¨ãd
;

462 
uöt32_t
 *
£q
;

463 
˛ock_íåy
 *
íåõs
;

466 
ölöe
 
uöt32_t
 
	$©omic32_öc_ªtu∫
(
uöt32_t
 *
£q
)

468  1 + 
	`__sync_„tch_™d_add
(
£q
, 1);

469 
	}
}

471 *
	$˛ock_thªad_‚
(*
d©a
)

473 
˛ock_thªad
 *
t
 = 
d©a
;

474 
˛ock_íåy
 *
c
;

475 
os_˝u_mask_t
 
˝u_mask
;

476 
uöt32_t
 
œ°_£q
;

477 
i
;

479 
	`mem£t
(&
˝u_mask
, 0, (cpu_mask));

480 
	`fio_˝u_£t
(&
˝u_mask
, 
t
->
˝u
);

482 i‡(
	`fio_£èfföôy
(
	`gëtid
(), 
˝u_mask
) == -1) {

483 
	`log_îr
("clock setaffinity failed\n");

487 
	`±hªad_muãx_lock
(&
t
->
lock
);

488 
	`±hªad_muãx_u∆ock
(&
t
->
°¨ãd
);

490 
œ°_£q
 = 0;

491 
c
 = &
t
->
íåõs
[0];

492 
i
 = 0; i < 
CLOCK_ENTRIES
; i++, 
c
++) {

493 
uöt32_t
 
£q
;

494 
uöt64_t
 
tsc
;

496 
c
->
˝u
 = 
t
->cpu;

498 
£q
 = 
	`©omic32_öc_ªtu∫
(
t
->seq);

499 i‡(
£q
 < 
œ°_£q
)

501 
tsc
 = 
	`gë_˝u_˛ock
();

502 } 
£q
 !*
t
->seq);

504 
c
->
£q
 = seq;

505 
c
->
tsc
 =Åsc;

508 
	`log_öfo
("cs: cpu%3d: %Œu clock†£í\n", 
t
->
˝u
,

509 (Ë
t
->
íåõs
[
i
 - 1].
tsc
 -Å->entries[0].tsc);

515 i‡(!
t
->
íåõs
[
i
 - 1].
tsc
 && !t->entries[0].tsc)

518  
NULL
;

519 
	}
}

521 
	$˛ock_cmp
(c⁄° *
p1
, c⁄° *
p2
)

523 c⁄° 
˛ock_íåy
 *
c1
 = 
p1
;

524 c⁄° 
˛ock_íåy
 *
c2
 = 
p2
;

526 i‡(
c1
->
£q
 =
c2
->seq)

527 
	`log_îr
("cs: bug inátomic sequence!\n");

529  
c1
->
£q
 - 
c2
->seq;

530 
	}
}

532 
	$fio_m⁄Ÿ⁄ic_˛ockã°
()

534 
˛ock_thªad
 *
thªads
;

535 
ƒ_˝us
 = 
	`˝us_⁄löe
();

536 
˛ock_íåy
 *
íåõs
;

537 
ã¡rõs
, 
Áûed
 = 0;

538 
˛ock_íåy
 *
¥ev
, *
this
;

539 
uöt32_t
 
£q
 = 0;

540 
i
;

542 
	`log_öfo
("cs:ÑñübÀ_tsc: %s\n", 
tsc_ªlübÀ
 ? "yes" : "no");

544 
fio_debug
 |1U << 
FD_TIME
;

545 
	`ˇlibøã_˝u_˛ock
();

546 
fio_debug
 &~(1U << 
FD_TIME
);

548 
thªads
 = 
	`mÆloc
(
ƒ_˝us
 * (
˛ock_thªad
));

549 
ã¡rõs
 = 
CLOCK_ENTRIES
 * 
ƒ_˝us
;

550 
íåõs
 = 
	`mÆloc
(
ã¡rõs
 * (
˛ock_íåy
));

552 
	`log_öfo
("cs: Te°ög %u CPUs\n", 
ƒ_˝us
);

554 
i
 = 0; i < 
ƒ_˝us
; i++) {

555 
˛ock_thªad
 *
t
 = &
thªads
[
i
];

557 
t
->
˝u
 = 
i
;

558 
t
->
£q
 = &seq;

559 
t
->
íåõs
 = &íåõs[
i
 * 
CLOCK_ENTRIES
];

560 
	`±hªad_muãx_öô
(&
t
->
lock
, 
NULL
);

561 
	`±hªad_muãx_öô
(&
t
->
°¨ãd
, 
NULL
);

562 
	`±hªad_muãx_lock
(&
t
->
lock
);

563 i‡(
	`±hªad_¸óã
(&
t
->
thªad
, 
NULL
, 
˛ock_thªad_‚
,Å)) {

564 
Áûed
++;

565 
ƒ_˝us
 = 
i
;

570 
i
 = 0; i < 
ƒ_˝us
; i++) {

571 
˛ock_thªad
 *
t
 = &
thªads
[
i
];

573 
	`±hªad_muãx_lock
(&
t
->
°¨ãd
);

576 
i
 = 0; i < 
ƒ_˝us
; i++) {

577 
˛ock_thªad
 *
t
 = &
thªads
[
i
];

579 
	`±hªad_muãx_u∆ock
(&
t
->
lock
);

582 
i
 = 0; i < 
ƒ_˝us
; i++) {

583 
˛ock_thªad
 *
t
 = &
thªads
[
i
];

584 *
ªt
;

586 
	`±hªad_joö
(
t
->
thªad
, &
ªt
);

587 i‡(
ªt
)

588 
Áûed
++;

590 
	`‰ì
(
thªads
);

592 i‡(
Áûed
) {

593 
	`log_îr
("Clocksour˚Åe°: %luÅhªad†Áûed\n", 
Áûed
);

594 
îr
;

597 
	`qs‹t
(
íåõs
, 
ã¡rõs
, (
˛ock_íåy
), 
˛ock_cmp
);

599 
Áûed
 = 
i
 = 0; i < 
ã¡rõs
; i++) {

600 
this
 = &
íåõs
[
i
];

602 i‡(!
i
) {

603 
¥ev
 = 
this
;

607 i‡(
¥ev
->
tsc
 > 
this
->tsc) {

608 
uöt64_t
 
diff
 = 
¥ev
->
tsc
 - 
this
->tsc;

610 
	`log_öfo
("cs: CPU clock mismatch (diff=%llu):\n",

611 (Ë
diff
);

612 
	`log_öfo
("\àCPU%3u: TSC=%Œu, SEQ=%u\n", 
¥ev
->
˝u
, (Ë¥ev->
tsc
,Öªv->
£q
);

613 
	`log_öfo
("\àCPU%3u: TSC=%Œu, SEQ=%u\n", 
this
->
˝u
, (Ëthis->
tsc
,Åhis->
£q
);

614 
Áûed
++;

617 
¥ev
 = 
this
;

620 i‡(
Áûed
)

621 
	`log_öfo
("cs: Faûed: %lu\n", 
Áûed
);

623 
	`log_öfo
("cs: Pass!\n");

625 
îr
:

626 
	`‰ì
(
íåõs
);

627  !!
Áûed
;

628 
	}
}

632 
	$fio_m⁄Ÿ⁄ic_˛ockã°
()

634 
	`log_öfo
("cs: currentÖlatform doesÇot support CPU clocks\n");

636 
	}
}

	@/home/terekhov/tmp/fio/fio/gettime.h

1 #i‚de‡
FIO_GETTIME_H


2 
	#FIO_GETTIME_H


	)

7 
	efio_cs
 {

8 
	mCS_GTOD
 = 1,

9 
	mCS_CGETTIME
,

10 
	mCS_CPUCLOCK
,

11 
	mCS_INVAL
,

14 
fio_gëtime
(
timevÆ
 *, *);

15 
fio_gtod_öô
();

16 
fio_˛ock_öô
();

17 
fio_°¨t_gtod_thªad
();

18 
fio_m⁄Ÿ⁄ic_˛ockã°
();

19 
fio_loˇl_˛ock_öô
();

21 
timevÆ
 *
fio_tv
;

	@/home/terekhov/tmp/fio/fio/gfio.c

24 
	~<loˇÀ.h
>

25 
	~<mÆloc.h
>

26 
	~<°rög.h
>

28 
	~<glib.h
>

29 
	~<ˇúo.h
>

30 
	~<gtk/gtk.h
>

32 
	~"fio.h
"

33 
	~"gfio.h
"

34 
	~"ghñ≥rs.h
"

35 
	~"g›ti⁄s.h
"

36 
	~"gîr‹.h
"

37 
	~"g˛õ¡.h
"

38 
	~"gøph.h
"

40 
	ggfio_£rvî_ru¬ög
;

41 
	ggfio_gøph_limô
 = 100;

43 
GdkCﬁ‹
 
	ggfio_cﬁ‹_whôe
;

44 
GdkCﬁ‹
 
	ggfio_cﬁ‹_lightyñlow
;

45 c⁄° *
	ggfio_gøph_f⁄t
 = 
GRAPH_DEFAULT_FONT
;

47 (*
	t˛ickfun˘i⁄
)(
	tGtkWidgë
 *
	twidgë
, 
	tgpoöãr
 
	td©a
);

49 
	`c⁄√˘_˛icked
(
GtkWidgë
 *
widgë
, 
gpoöãr
 
d©a
);

50 
	`°¨t_job_˛icked
(
GtkWidgë
 *
widgë
, 
gpoöãr
 
d©a
);

51 
	`£nd_˛icked
(
GtkWidgë
 *
widgë
, 
gpoöãr
 
d©a
);

53 
	sbuâ⁄_•ec
 {

54 c⁄° *
buâ⁄ãxt
;

55 
˛ickfun˘i⁄
 
f
;

56 c⁄° *
toﬁtùãxt
[2];

57 c⁄° 
°¨t_£nsôive
;

58 } 
buâ⁄•e˛i°
[] = {

60 .
buâ⁄ãxt
 = "Connect",

61 .
f
 = 
c⁄√˘_˛icked
,

62 .
toﬁtùãxt
 = { "Disconnect from host", "ConnectÅo host" },

63 .
°¨t_£nsôive
 = 1,

66 .
buâ⁄ãxt
 = "Send",

67 .
f
 = 
£nd_˛icked
,

68 .
toﬁtùãxt
 = { "Síd job des¸ùti⁄Åÿho°", 
NULL
 },

69 .
°¨t_£nsôive
 = 0,

72 .
buâ⁄ãxt
 = "Start Job",

73 .
f
 = 
°¨t_job_˛icked
,

74 .
toﬁtùãxt
 = { "SèπÅhêcuºíàjob o¿thê£rvî", 
NULL
 },

75 .
°¨t_£nsôive
 = 0,

77 
	}
};

79 
	$£tup_i›s_gøph
(
gfio_gøphs
 *
gg
)

81 
gøph
 *
g
;

83 
g
 = 
	`gøph_√w
(
DRAWING_AREA_XDIM
 / 2.0, 
DRAWING_AREA_YDIM
, 
gfio_gøph_f⁄t
);

84 
	`gøph_tôÀ
(
g
, "IOPS (IOs/sec)");

85 
	`gøph_x_tôÀ
(
g
, "Time (secs)");

86 
gg
->
ªad_i›s
 = 
	`gøph_add_œbñ
(
g
, "Read IOPS");

87 
gg
->
wrôe_i›s
 = 
	`gøph_add_œbñ
(
g
, "Write IOPS");

88 
gg
->
åim_i›s
 = 
	`gøph_add_œbñ
(
g
, "Trim IOPS");

89 
	`gøph_£t_cﬁ‹
(
g
, 
gg
->
ªad_i›s
, 
GFIO_READ_R
, 
GFIO_READ_G
, 
GFIO_READ_B
);

90 
	`gøph_£t_cﬁ‹
(
g
, 
gg
->
wrôe_i›s
, 
GFIO_WRITE_R
, 
GFIO_WRITE_G
, 
GFIO_WRITE_B
);

91 
	`gøph_£t_cﬁ‹
(
g
, 
gg
->
åim_i›s
, 
GFIO_TRIM_R
, 
GFIO_TRIM_G
, 
GFIO_TRIM_B
);

92 
	`löe_gøph_£t_d©a_cou¡_limô
(
g
, 
gfio_gøph_limô
);

93 
	`gøph_add_exåa_•a˚
(
g
, 0.0, 0.0, 0.0, 0.0);

94 
	`gøph_£t_gøph_Æl_zî€s
(
g
, 0);

95 
gg
->
i›s_gøph
 = 
g
;

96 
	}
}

98 
	$£tup_b™dwidth_gøph
(
gfio_gøphs
 *
gg
)

100 
gøph
 *
g
;

102 
g
 = 
	`gøph_√w
(
DRAWING_AREA_XDIM
 / 2.0, 
DRAWING_AREA_YDIM
, 
gfio_gøph_f⁄t
);

103 
	`gøph_tôÀ
(
g
, "Bandwidth (bytes/sec)");

104 
	`gøph_x_tôÀ
(
g
, "Time (secs)");

105 
gg
->
ªad_bw
 = 
	`gøph_add_œbñ
(
g
, "Read Bandwidth");

106 
gg
->
wrôe_bw
 = 
	`gøph_add_œbñ
(
g
, "Write Bandwidth");

107 
gg
->
åim_bw
 = 
	`gøph_add_œbñ
(
g
, "Trim Bandwidth");

108 
	`gøph_£t_cﬁ‹
(
g
, 
gg
->
ªad_bw
, 
GFIO_READ_R
, 
GFIO_READ_G
, 
GFIO_READ_B
);

109 
	`gøph_£t_cﬁ‹
(
g
, 
gg
->
wrôe_bw
, 
GFIO_WRITE_R
, 
GFIO_WRITE_G
, 
GFIO_WRITE_B
);

110 
	`gøph_£t_cﬁ‹
(
g
, 
gg
->
åim_bw
, 
GFIO_TRIM_R
, 
GFIO_TRIM_G
, 
GFIO_TRIM_B
);

111 
	`gøph_£t_ba£_off£t
(
g
, 1);

112 
	`löe_gøph_£t_d©a_cou¡_limô
(
g
, 100);

113 
	`gøph_add_exåa_•a˚
(
g
, 0.0, 0.0, 0.0, 0.0);

114 
	`gøph_£t_gøph_Æl_zî€s
(
g
, 0);

115 
gg
->
b™dwidth_gøph
 = 
g
;

116 
	}
}

118 
	$£tup_gøphs
(
gfio_gøphs
 *
g
)

120 
	`£tup_i›s_gøph
(
g
);

121 
	`£tup_b™dwidth_gøph
(
g
);

122 
	}
}

124 
	$˛ór_ge_ui_öfo
(
gui_íåy
 *
ge
)

126 
	`gtk_œbñ_£t_ãxt
(
	`GTK_LABEL
(
ge
->
¥obe
.
ho°«me
), "");

127 
	`gtk_œbñ_£t_ãxt
(
	`GTK_LABEL
(
ge
->
¥obe
.
os
), "");

128 
	`gtk_œbñ_£t_ãxt
(
	`GTK_LABEL
(
ge
->
¥obe
.
¨ch
), "");

129 
	`gtk_œbñ_£t_ãxt
(
	`GTK_LABEL
(
ge
->
¥obe
.
fio_vî
), "");

132 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ge
->
ëa
.
«me
), "");

134 
	`mu…ôext_upd©e_íåy
(&
ge
->
ëa
.
iŸy≥
, 0, "");

135 
	`mu…ôext_upd©e_íåy
(&
ge
->
ëa
.
bs
, 0, "");

136 
	`mu…ôext_upd©e_íåy
(&
ge
->
ëa
.
i€ngöe
, 0, "");

137 
	`mu…ôext_upd©e_íåy
(&
ge
->
ëa
.
iodïth
, 0, "");

138 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ge
->
ëa
.
jobs
), "");

139 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ge
->
ëa
.
fûes
), "");

140 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ge
->
ëa
.
ªad_bw
), "");

141 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ge
->
ëa
.
ªad_i›s
), "");

142 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ge
->
ëa
.
wrôe_bw
), "");

143 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
ge
->
ëa
.
wrôe_i›s
), "");

144 
	}
}

146 
	$£t_míu_íåy_ãxt
(
gui
 *
ui
, c⁄° *
∑th
,

147 c⁄° *
ãxt
)

149 
GtkWidgë
 *
w
;

151 
w
 = 
	`gtk_ui_m™agî_gë_widgë
(
ui
->
uim™agî
, 
∑th
);

152 i‡(
w
)

153 
	`gtk_míu_ôem_£t_œbñ
(
	`GTK_MENU_ITEM
(
w
), 
ãxt
);

155 
	`Ârötf
(
°dîr
, "gfio: c™'àfödÖ©h %s\n", 
∑th
);

156 
	}
}

159 
	$£t_míu_íåy_visibÀ
(
gui
 *
ui
, c⁄° *
∑th
, 
show
)

161 
GtkWidgë
 *
w
;

163 
w
 = 
	`gtk_ui_m™agî_gë_widgë
(
ui
->
uim™agî
, 
∑th
);

164 i‡(
w
)

165 
	`gtk_widgë_£t_£nsôive
(
w
, 
show
);

167 
	`Ârötf
(
°dîr
, "gfio: c™'àfödÖ©h %s\n", 
∑th
);

168 
	}
}

170 
	$£t_job_míu_visibÀ
(
gui
 *
ui
, 
visibÀ
)

172 
	`£t_míu_íåy_visibÀ
(
ui
, "/MaöMíu/JobMíu", 
visibÀ
);

173 
	}
}

175 
	$£t_võw_ªsu…s_visibÀ
(
gui
 *
ui
, 
visibÀ
)

177 
	`£t_míu_íåy_visibÀ
(
ui
, "/MaöMíu/VõwMíu/Resu…s", 
visibÀ
);

178 
	}
}

180 c⁄° *
	$gë_buâ⁄_toﬁtù
(
buâ⁄_•ec
 *
s
, 
£nsôive
)

182 i‡(
s
->
toﬁtùãxt
[
£nsôive
])

183  
s
->
toﬁtùãxt
[
£nsôive
];

185  
s
->
toﬁtùãxt
[0];

186 
	}
}

188 
GtkWidgë
 *
	$add_buâ⁄
(
GtkWidgë
 *
buâ⁄box
,

189 
buâ⁄_•ec
 *
buâ⁄•ec
, 
gpoöãr
 
d©a
)

191 
GtkWidgë
 *
buâ⁄
 = 
	`gtk_buâ⁄_√w_wôh_œbñ
(
buâ⁄•ec
->
buâ⁄ãxt
);

192 
gboﬁón
 
£ns
 = 
buâ⁄•ec
->
°¨t_£nsôive
;

194 
	`g_sig«l_c⁄√˘
(
buâ⁄
, "˛icked", 
	`G_CALLBACK
(
buâ⁄•ec
->
f
), 
d©a
);

195 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
buâ⁄box
), 
buâ⁄
, 
FALSE
, FALSE, 3);

197 
£ns
 = 
buâ⁄•ec
->
°¨t_£nsôive
;

198 
	`gtk_widgë_£t_toﬁtù_ãxt
(
buâ⁄
, 
	`gë_buâ⁄_toﬁtù
(
buâ⁄•ec
, 
£ns
));

199 
	`gtk_widgë_£t_£nsôive
(
buâ⁄
, 
£ns
);

201  
buâ⁄
;

202 
	}
}

204 
	$add_buâ⁄s
(
gui_íåy
 *
ge
, 
buâ⁄_•ec
 *
buâ⁄li°
,

205 
nbuâ⁄s
)

207 
i
;

209 
i
 = 0; i < 
nbuâ⁄s
; i++)

210 
ge
->
buâ⁄
[
i
] = 
	`add_buâ⁄
(ge->
buâ⁄box
, &
buâ⁄li°
[i], ge);

211 
	}
}

217 
	$upd©e_buâ⁄_°©es
(
gui
 *
ui
, 
gui_íåy
 *
ge
)

219 
c⁄√˘_°©e
, 
£nd_°©e
, 
°¨t_°©e
, 
edô_°©e
;

220 c⁄° *
c⁄√˘_°r
 = 
NULL
;

222 
ge
->
°©e
) {

224 
	`gfio_ªp‹t_îr‹
(
ge
, "Bad clõ¡ sèã: %u\n", ge->
°©e
);

226 
GE_STATE_NEW
:

227 
c⁄√˘_°©e
 = 1;

228 
edô_°©e
 = 1;

229 
c⁄√˘_°r
 = "Connect";

230 
£nd_°©e
 = 0;

231 
°¨t_°©e
 = 0;

233 
GE_STATE_CONNECTED
:

234 
c⁄√˘_°©e
 = 1;

235 
edô_°©e
 = 1;

236 
c⁄√˘_°r
 = "Disconnect";

237 
£nd_°©e
 = 1;

238 
°¨t_°©e
 = 0;

240 
GE_STATE_JOB_SENT
:

241 
c⁄√˘_°©e
 = 1;

242 
edô_°©e
 = 1;

243 
c⁄√˘_°r
 = "Disconnect";

244 
£nd_°©e
 = 0;

245 
°¨t_°©e
 = 1;

247 
GE_STATE_JOB_STARTED
:

248 
c⁄√˘_°©e
 = 1;

249 
edô_°©e
 = 1;

250 
c⁄√˘_°r
 = "Disconnect";

251 
£nd_°©e
 = 0;

252 
°¨t_°©e
 = 1;

254 
GE_STATE_JOB_RUNNING
:

255 
c⁄√˘_°©e
 = 1;

256 
edô_°©e
 = 0;

257 
c⁄√˘_°r
 = "Disconnect";

258 
£nd_°©e
 = 0;

259 
°¨t_°©e
 = 0;

261 
GE_STATE_JOB_DONE
:

262 
c⁄√˘_°©e
 = 1;

263 
edô_°©e
 = 0;

264 
c⁄√˘_°r
 = "Connect";

265 
£nd_°©e
 = 0;

266 
°¨t_°©e
 = 0;

270 
	`gtk_widgë_£t_£nsôive
(
ge
->
buâ⁄
[
GFIO_BUTTON_CONNECT
], 
c⁄√˘_°©e
);

271 
	`gtk_widgë_£t_£nsôive
(
ge
->
buâ⁄
[
GFIO_BUTTON_SEND
], 
£nd_°©e
);

272 
	`gtk_widgë_£t_£nsôive
(
ge
->
buâ⁄
[
GFIO_BUTTON_START
], 
°¨t_°©e
);

273 
	`gtk_buâ⁄_£t_œbñ
(
	`GTK_BUTTON
(
ge
->
buâ⁄
[
GFIO_BUTTON_CONNECT
]), 
c⁄√˘_°r
);

274 
	`gtk_widgë_£t_toﬁtù_ãxt
(
ge
->
buâ⁄
[
GFIO_BUTTON_CONNECT
], 
	`gë_buâ⁄_toﬁtù
(&
buâ⁄•e˛i°
[GFIO_BUTTON_CONNECT], 
c⁄√˘_°©e
));

276 
	`£t_míu_íåy_visibÀ
(
ui
, "/MaöMíu/JobMíu/C⁄√˘", 
c⁄√˘_°©e
);

277 
	`£t_míu_íåy_ãxt
(
ui
, "/MaöMíu/JobMíu/C⁄√˘", 
c⁄√˘_°r
);

279 
	`£t_míu_íåy_visibÀ
(
ui
, "/MaöMíu/JobMíu/Edô job", 
edô_°©e
);

280 
	`£t_míu_íåy_visibÀ
(
ui
, "/MaöMíu/JobMíu/Síd job", 
£nd_°©e
);

281 
	`£t_míu_íåy_visibÀ
(
ui
, "/MaöMíu/JobMíu/Sèπ job", 
°¨t_°©e
);

283 i‡(
ge
->
˛õ¡
 && ge->˛õ¡->
ƒ_ªsu…s
)

284 
	`£t_võw_ªsu…s_visibÀ
(
ui
, 1);

286 
	`£t_võw_ªsu…s_visibÀ
(
ui
, 0);

287 
	}
}

289 
	$gfio_£t_°©e
(
gui_íåy
 *
ge
, 
°©e
)

291 
ge
->
°©e
 = state;

292 
	`upd©e_buâ⁄_°©es
(
ge
->
ui
, ge);

293 
	}
}

295 
	$gfio_ui_£tup_log
(
gui
 *
ui
)

297 
GtkTªeSñe˘i⁄
 *
£À˘i⁄
;

298 
GtkLi°St‹e
 *
modñ
;

299 
GtkWidgë
 *
åì_võw
;

301 
modñ
 = 
	`gtk_li°_°‹e_√w
(4, 
G_TYPE_STRING
, G_TYPE_STRING, G_TYPE_STRING, G_TYPE_STRING);

303 
åì_võw
 = 
	`gtk_åì_võw_√w_wôh_modñ
(
	`GTK_TREE_MODEL
(
modñ
));

304 
	`gtk_widgë_£t_ˇn_focus
(
åì_võw
, 
FALSE
);

306 
£À˘i⁄
 = 
	`gtk_åì_võw_gë_£À˘i⁄
(
	`GTK_TREE_VIEW
(
åì_võw
));

307 
	`gtk_åì_£À˘i⁄_£t_mode
(
	`GTK_TREE_SELECTION
(
£À˘i⁄
), 
GTK_SELECTION_BROWSE
);

308 
	`g_obje˘_£t
(
	`G_OBJECT
(
åì_võw
), "hódîs-visibÀ", 
TRUE
,

309 "íabÀ-grid-löes", 
GTK_TREE_VIEW_GRID_LINES_BOTH
, 
NULL
);

311 
	`åì_võw_cﬁumn
(
åì_võw
, 0, "Time", 
ALIGN_RIGHT
 | 
UNSORTABLE
);

312 
	`åì_võw_cﬁumn
(
åì_võw
, 1, "Ho°", 
ALIGN_RIGHT
 | 
UNSORTABLE
);

313 
	`åì_võw_cﬁumn
(
åì_võw
, 2, "Levñ", 
ALIGN_RIGHT
 | 
UNSORTABLE
);

314 
	`åì_võw_cﬁumn
(
åì_võw
, 3, "Text", 
ALIGN_LEFT
 | 
UNSORTABLE
);

316 
ui
->
log_modñ
 = 
modñ
;

317 
ui
->
log_åì
 = 
åì_võw
;

318 
	}
}

320 
göt
 
	$⁄_c⁄fig_døwög_¨ó
(
GtkWidgë
 *
w
, 
GdkEvítC⁄figuª
 *
evít
,

321 
gpoöãr
 
d©a
)

323 
guöt
 
width
 = 
	`gtk_widgë_gë_Æloˇãd_width
(
w
);

324 
guöt
 
height
 = 
	`gtk_widgë_gë_Æloˇãd_height
(
w
);

325 
gfio_gøphs
 *
g
 = 
d©a
;

327 
	`gøph_£t_size
(
g
->
i›s_gøph
, 
width
 / 2.0, 
height
);

328 
	`gøph_£t_posôi⁄
(
g
->
i›s_gøph
, 
width
 / 2.0, 0.0);

329 
	`gøph_£t_size
(
g
->
b™dwidth_gøph
, 
width
 / 2.0, 
height
);

330 
	`gøph_£t_posôi⁄
(
g
->
b™dwidth_gøph
, 0, 0);

331  
TRUE
;

332 
	}
}

334 
	$døw_gøph
(
gøph
 *
g
, 
ˇúo_t
 *
¸
)

336 
	`löe_gøph_døw
(
g
, 
¸
);

337 
	`ˇúo_°roke
(
¸
);

338 
	}
}

340 
gboﬁón
 
	$gøph_toﬁtù
(
GtkWidgë
 *
w
, 
göt
 
x
, göà
y
,

341 
gboﬁón
 
keybﬂrd_mode
, 
GtkToﬁtù
 *
toﬁtù
,

342 
gpoöãr
 
d©a
)

344 
gfio_gøphs
 *
g
 = 
d©a
;

345 c⁄° *
ãxt
 = 
NULL
;

347 i‡(
	`gøph_c⁄èös_xy
(
g
->
i›s_gøph
, 
x
, 
y
))

348 
ãxt
 = 
	`gøph_föd_toﬁtù
(
g
->
i›s_gøph
, 
x
, 
y
);

349 i‡(
	`gøph_c⁄èös_xy
(
g
->
b™dwidth_gøph
, 
x
, 
y
))

350 
ãxt
 = 
	`gøph_föd_toﬁtù
(
g
->
b™dwidth_gøph
, 
x
, 
y
);

352 i‡(
ãxt
) {

353 
	`gtk_toﬁtù_£t_ãxt
(
toﬁtù
, 
ãxt
);

354  
TRUE
;

357  
FALSE
;

358 
	}
}

360 
	$⁄_expo£_døwög_¨ó
(
GtkWidgë
 *
w
, 
GdkEvít
 *
evít
, 
gpoöãr
 
p
)

362 
gfio_gøphs
 *
g
 = 
p
;

363 
ˇúo_t
 *
¸
;

365 
¸
 = 
	`gdk_ˇúo_¸óã
(
	`gtk_widgë_gë_wödow
(
w
));

367 i‡(
	`gøph_has_toﬁtùs
(
g
->
i›s_gøph
) ||

368 
	`gøph_has_toﬁtùs
(
g
->
b™dwidth_gøph
)) {

369 
	`g_obje˘_£t
(
w
, "has-toﬁtù", 
TRUE
, 
NULL
);

370 
	`g_sig«l_c⁄√˘
(
w
, "quîy-toﬁtù", 
	`G_CALLBACK
(
gøph_toﬁtù
), 
g
);

373 
	`ˇúo_£t_sour˚_rgb
(
¸
, 0, 0, 0);

374 
	`døw_gøph
(
g
->
i›s_gøph
, 
¸
);

375 
	`døw_gøph
(
g
->
b™dwidth_gøph
, 
¸
);

376 
	`ˇúo_de°roy
(
¸
);

378  
FALSE
;

379 
	}
}

384 
	$ge_de°roy
(
gui_íåy
 *
ge
)

386 
gfio_˛õ¡
 *
gc
 = 
ge
->
˛õ¡
;

388 i‡(
gc
) {

389 i‡(
gc
->
˛õ¡
) {

390 i‡(
ge
->
°©e
 >
GE_STATE_CONNECTED
)

391 
	`fio_˛õ¡_ãrmö©e
(
gc
->
˛õ¡
);

393 
	`fio_put_˛õ¡
(
gc
->
˛õ¡
);

395 
	`‰ì
(
gc
);

398 
	`g_hash_èbÀ_ªmove
(
ge
->
ui
->
ge_hash
, &ge->
∑ge_num
);

400 
	`‰ì
(
ge
->
job_fûe
);

401 
	`‰ì
(
ge
->
ho°
);

402 
	`‰ì
(
ge
);

403 
	}
}

405 
	$ge_widgë_de°roy
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

407 
gui_íåy
 *
ge
 = (gui_íåy *Ë
d©a
;

409 
	`ge_de°roy
(
ge
);

410 
	}
}

412 
	$gfio_quô
(
gui
 *
ui
)

414 
	`gtk_maö_quô
();

415 
	}
}

417 
quô_˛icked
(
__©åibuã__
((
unu£d
)Ë
GtkWidgë
 *
widgë
,

418 
gpoöãr
 
d©a
)

420 
gui
 *
	gui
 = (guò*Ë
d©a
;

422 
gfio_quô
(
ui
);

425 *
	$job_thªad
(*
¨g
)

427 
gui
 *
ui
 = 
¨g
;

429 
ui
->
h™dÀr_ru¬ög
 = 1;

430 
	`fio_h™dÀ_˛õ¡s
(&
gfio_˛õ¡_›s
);

431 
ui
->
h™dÀr_ru¬ög
 = 0;

432  
NULL
;

433 
	}
}

435 
	$£nd_job_fûe
(
gui_íåy
 *
ge
)

437 
gfio_˛õ¡
 *
gc
 = 
ge
->
˛õ¡
;

438 
ªt
 = 0;

444 !
	`Êi°_em±y
(&
gc
->
o_li°
)) {

445 
gfio_˛õ¡_›ti⁄s
 *
gco
;

447 
gco
 = 
	`Êi°_íåy
(
gc
->
o_li°
.
√xt
, 
gfio_˛õ¡_›ti⁄s
, 
li°
);

448 
	`Êi°_dñ
(&
gco
->
li°
);

449 
	`‰ì
(
gco
);

452 
ªt
 = 
	`fio_˛õ¡_£nd_öi
(
gc
->
˛õ¡
, 
ge
->
job_fûe
);

453 i‡(!
ªt
)

456 
	`gfio_ªp‹t_îr‹
(
ge
, "FaûedÅÿ£nd fûê%s: %s\n", ge->
job_fûe
, 
	`°ªº‹
(-
ªt
));

458 
	}
}

460 *
	$£rvî_thªad
(*
¨g
)

462 
is_backíd
 = 1;

463 
gfio_£rvî_ru¬ög
 = 1;

464 
	`fio_°¨t_£rvî
(
NULL
);

465 
gfio_£rvî_ru¬ög
 = 0;

466  
NULL
;

467 
	}
}

469 
	$gfio_°¨t_£rvî
(
gui
 *
ui
)

471 i‡(!
gfio_£rvî_ru¬ög
) {

472 
gfio_£rvî_ru¬ög
 = 1;

473 
	`±hªad_¸óã
(&
ui
->
£rvî_t
, 
NULL
, 
£rvî_thªad
, NULL);

474 
	`±hªad_dëach
(
ui
->
£rvî_t
);

476 
	}
}

478 
°¨t_job_˛icked
(
__©åibuã__
((
unu£d
)Ë
GtkWidgë
 *
widgë
,

479 
gpoöãr
 
d©a
)

481 
gui_íåy
 *
	gge
 = 
d©a
;

482 
gfio_˛õ¡
 *
	ggc
 = 
ge
->
˛õ¡
;

484 i‡(
	ggc
)

485 
fio_°¨t_˛õ¡
(
gc
->
˛õ¡
);

488 
fûe_›í
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
);

490 
	sc⁄√˘i⁄_widgës


492 
GtkWidgë
 *
	mhíåy
;

493 
GtkWidgë
 *
	mcombo
;

494 
GtkWidgë
 *
	mbuâ⁄
;

497 
	$ho°«me_cb
(
GtkE¡ry
 *
íåy
, 
gpoöãr
 
d©a
)

499 
c⁄√˘i⁄_widgës
 *
cw
 = 
d©a
;

500 
u£s_√t
 = 0, 
is_loˇlho°
 = 0;

501 c⁄° 
gch¨
 *
ãxt
;

502 
gch¨
 *
˘ext
;

509 
˘ext
 = 
	`gtk_combo_box_ãxt_gë_a˘ive_ãxt
(
	`GTK_COMBO_BOX_TEXT
(
cw
->
combo
));

510 i‡(!
˘ext
 || !
	`°∫cmp
(ctext, "IPv4", 4) || !strncmp(ctext, "IPv6", 4))

511 
u£s_√t
 = 1;

512 
	`g_‰ì
(
˘ext
);

514 i‡(
u£s_√t
) {

515 
ãxt
 = 
	`gtk_íåy_gë_ãxt
(
	`GTK_ENTRY
(
cw
->
híåy
));

516 i‡(!
	`°rcmp
(
ãxt
, "127.0.0.1") || !strcmp(text, "localhost") ||

517 !
	`°rcmp
(
ãxt
, "::1") || !strcmp(text, "ip6-localhost") ||

518 !
	`°rcmp
(
ãxt
, "ip6-loopback"))

519 
is_loˇlho°
 = 1;

522 i‡(!
u£s_√t
 || 
is_loˇlho°
) {

523 
	`gtk_toggÀ_buâ⁄_£t_a˘ive
(
	`GTK_TOGGLE_BUTTON
(
cw
->
buâ⁄
), 1);

524 
	`gtk_widgë_£t_£nsôive
(
cw
->
buâ⁄
, 1);

526 
	`gtk_toggÀ_buâ⁄_£t_a˘ive
(
	`GTK_TOGGLE_BUTTON
(
cw
->
buâ⁄
), 0);

527 
	`gtk_widgë_£t_£nsôive
(
cw
->
buâ⁄
, 0);

529 
	}
}

531 
	$gë_c⁄√˘i⁄_dëaûs
(
gui_íåy
 *
ge
)

533 
GtkWidgë
 *
dülog
, *
box
, *
vbox
, *
hbox
, *
‰ame
, *
≥¡ry
;

534 
c⁄√˘i⁄_widgës
 
cw
;

535 
gui
 *
ui
 = 
ge
->ui;

536 *
ty≥íåy
;

538 i‡(
ge
->
ho°
)

541 
dülog
 = 
	`gtk_dülog_√w_wôh_buâ⁄s
("Connection details",

542 
	`GTK_WINDOW
(
ui
->
wödow
),

543 
GTK_DIALOG_DESTROY_WITH_PARENT
,

544 
GTK_STOCK_OK
, 
GTK_RESPONSE_ACCEPT
,

545 
GTK_STOCK_CANCEL
, 
GTK_RESPONSE_REJECT
, 
NULL
);

547 
‰ame
 = 
	`gtk_‰ame_√w
("Hostname / socketÇame");

548 
vbox
 = 
	`gtk_dülog_gë_c⁄ã¡_¨ó
(
	`GTK_DIALOG
(
dülog
));

549 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
‰ame
, 
FALSE
, FALSE, 5);

551 
box
 = 
	`gtk_vbox_√w
(
FALSE
, 6);

552 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
box
);

554 
hbox
 = 
	`gtk_hbox_√w
(
TRUE
, 10);

555 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
box
), 
hbox
, 
FALSE
, FALSE, 0);

556 
cw
.
híåy
 = 
	`gtk_íåy_√w
();

557 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
cw
.
híåy
), "localhost");

558 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
hbox
), 
cw
.
híåy
, 
TRUE
, TRUE, 0);

560 
‰ame
 = 
	`gtk_‰ame_√w
("Port");

561 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
‰ame
, 
FALSE
, FALSE, 5);

562 
box
 = 
	`gtk_vbox_√w
(
FALSE
, 10);

563 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
box
);

565 
hbox
 = 
	`gtk_hbox_√w
(
TRUE
, 4);

566 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
box
), 
hbox
, 
FALSE
, FALSE, 0);

567 
≥¡ry
 = 
	`¸óã_•öbuâ⁄
(
hbox
, 1, 65535, 
FIO_NET_PORT
);

569 
‰ame
 = 
	`gtk_‰ame_√w
("Type");

570 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
‰ame
, 
FALSE
, FALSE, 5);

571 
box
 = 
	`gtk_vbox_√w
(
FALSE
, 10);

572 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
box
);

574 
hbox
 = 
	`gtk_hbox_√w
(
TRUE
, 4);

575 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
box
), 
hbox
, 
FALSE
, FALSE, 0);

577 
cw
.
combo
 = 
	`gtk_combo_box_ãxt_√w
();

578 
	`gtk_combo_box_ãxt_≠≥nd_ãxt
(
	`GTK_COMBO_BOX_TEXT
(
cw
.
combo
), "IPv4");

579 
	`gtk_combo_box_ãxt_≠≥nd_ãxt
(
	`GTK_COMBO_BOX_TEXT
(
cw
.
combo
), "IPv6");

580 
	`gtk_combo_box_ãxt_≠≥nd_ãxt
(
	`GTK_COMBO_BOX_TEXT
(
cw
.
combo
), "local socket");

581 
	`gtk_combo_box_£t_a˘ive
(
	`GTK_COMBO_BOX
(
cw
.
combo
), 0);

583 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
hbox
), 
cw
.
combo
);

585 
‰ame
 = 
	`gtk_‰ame_√w
("Options");

586 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
‰ame
, 
FALSE
, FALSE, 5);

587 
box
 = 
	`gtk_vbox_√w
(
FALSE
, 10);

588 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
box
);

590 
hbox
 = 
	`gtk_hbox_√w
(
TRUE
, 4);

591 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
box
), 
hbox
, 
FALSE
, FALSE, 0);

593 
cw
.
buâ⁄
 = 
	`gtk_check_buâ⁄_√w_wôh_œbñ
("Auto-spawn fio backend");

594 
	`gtk_toggÀ_buâ⁄_£t_a˘ive
(
	`GTK_TOGGLE_BUTTON
(
cw
.
buâ⁄
), 1);

595 
	`gtk_widgë_£t_toﬁtù_ãxt
(
cw
.
buâ⁄
, "WhenÑunning fioÜocally, it isÇecessaryÅo haveÅhe backendÑunning onÅhe same system. IfÅhis is checked, gfio will startÅhe backendáutomatically for you if it isn'tálreadyÑunning.");

596 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
hbox
), 
cw
.
buâ⁄
, 
FALSE
, FALSE, 6);

601 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
cw
.
híåy
), "ch™ged", 
	`G_CALLBACK
(
ho°«me_cb
), &cw);

602 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
cw
.
combo
), "ch™ged", 
	`G_CALLBACK
(
ho°«me_cb
), &cw);

604 
	`gtk_widgë_show_Æl
(
dülog
);

606 i‡(
	`gtk_dülog_run
(
	`GTK_DIALOG
(
dülog
)Ë!
GTK_RESPONSE_ACCEPT
) {

607 
	`gtk_widgë_de°roy
(
dülog
);

611 
ge
->
ho°
 = 
	`°rdup
(
	`gtk_íåy_gë_ãxt
(
	`GTK_ENTRY
(
cw
.
híåy
)));

612 
ge
->
p‹t
 = 
	`gtk_•ö_buâ⁄_gë_vÆue_as_öt
(
	`GTK_SPIN_BUTTON
(
≥¡ry
));

614 
ty≥íåy
 = 
	`gtk_combo_box_ãxt_gë_a˘ive_ãxt
(
	`GTK_COMBO_BOX_TEXT
(
cw
.
combo
));

615 i‡(!
ty≥íåy
 || !
	`°∫cmp
(typeentry, "IPv4", 4))

616 
ge
->
ty≥
 = 
Fio_˛õ¡_ùv4
;

617 i‡(!
	`°∫cmp
(
ty≥íåy
, "IPv6", 4))

618 
ge
->
ty≥
 = 
Fio_˛õ¡_ùv6
;

620 
ge
->
ty≥
 = 
Fio_˛õ¡_sockë
;

621 
	`g_‰ì
(
ty≥íåy
);

623 
ge
->
£rvî_°¨t
 = 
	`gtk_toggÀ_buâ⁄_gë_a˘ive
(
	`GTK_TOGGLE_BUTTON
(
cw
.
buâ⁄
));

625 
	`gtk_widgë_de°roy
(
dülog
);

627 
	}
}

629 
	$gfio_£t_˛õ¡
(
gfio_˛õ¡
 *
gc
, 
fio_˛õ¡
 *
˛õ¡
)

631 
gc
->
˛õ¡
 = 
	`fio_gë_˛õ¡
(client);

632 
˛õ¡
->
˛õ¡_d©a
 = 
gc
;

633 
	}
}

635 
	$gfio_˛õ¡_added
(
gui_íåy
 *
ge
, 
fio_˛õ¡
 *
˛õ¡
)

637 
gfio_˛õ¡_›ti⁄s
 *
gco
;

638 
gfio_˛õ¡
 *
gc
;

640 
gc
 = 
	`ˇŒoc
(1, (*gc));

641 
	`INIT_FLIST_HEAD
(&
gc
->
o_li°
);

642 
gc
->
ge
 = ge;

643 
ge
->
˛õ¡
 = 
gc
;

644 
	`gfio_£t_˛õ¡
(
gc
, 
˛õ¡
);

650 
gco
 = 
	`ˇŒoc
(1, (*gco));

651 
	`INIT_FLIST_HEAD
(&
gco
->
li°
);

652 
	`›ti⁄s_deÁu…_fûl
(&
gco
->
o
);

653 
	`Êi°_add_èû
(&
gco
->
li°
, &
gc
->
o_li°
);

654 
gc
->
o_li°_ƒ
++;

655 
	}
}

657 
	$gfio_˛ór_gøph_d©a
(
gfio_gøphs
 *
g
)

659 
	`gøph_˛ór_vÆues
(
g
->
i›s_gøph
);

660 
	`gøph_˛ór_vÆues
(
g
->
b™dwidth_gøph
);

661 
	}
}

663 
	$c⁄√˘_˛icked
(
GtkWidgë
 *
widgë
, 
gpoöãr
 
d©a
)

665 
gui_íåy
 *
ge
 = 
d©a
;

666 
gfio_˛õ¡
 *
gc
 = 
ge
->
˛õ¡
;

668 i‡(
ge
->
°©e
 =
GE_STATE_NEW
) {

669 
ªt
;

671 i‡(!
ge
->
job_fûe
)

672 
	`fûe_›í
(
widgë
, 
ge
->
ui
);

673 i‡(!
ge
->
job_fûe
)

676 
gc
 = 
ge
->
˛õ¡
;

678 i‡(!
gc
->
˛õ¡
) {

679 
fio_˛õ¡
 *
˛õ¡
;

681 i‡(
	`gë_c⁄√˘i⁄_dëaûs
(
ge
)) {

682 
	`gfio_ªp‹t_îr‹
(
ge
, "FailedÅo get connection details\n");

686 
˛õ¡
 = 
	`fio_˛õ¡_add_ex∂icô
(&
gfio_˛õ¡_›s
, 
ge
->
ho°
, ge->
ty≥
, ge->
p‹t
);

687 i‡(!
˛õ¡
) {

688 
	`gfio_ªp‹t_îr‹
(
ge
, "FaûedÅÿadd clõ¡ %s\n", ge->
ho°
);

689 
	`‰ì
(
ge
->
ho°
);

690 
ge
->
ho°
 = 
NULL
;

693 
	`gfio_£t_˛õ¡
(
gc
, 
˛õ¡
);

696 
	`gtk_¥ogªss_b¨_£t_ãxt
(
	`GTK_PROGRESS_BAR
(
ge
->
thªad_°©us_pb
), "No jobsÑunning");

697 
	`gtk_¥ogªss_b¨_£t_‰a˘i⁄
(
	`GTK_PROGRESS_BAR
(
ge
->
thªad_°©us_pb
), 0.0);

698 
ªt
 = 
	`fio_˛õ¡_c⁄√˘
(
gc
->
˛õ¡
);

699 i‡(!
ªt
) {

700 i‡(!
ge
->
ui
->
h™dÀr_ru¬ög
)

701 
	`±hªad_¸óã
(&
ge
->
ui
->
t
, 
NULL
, 
job_thªad
, ge->ui);

702 
	`gfio_£t_°©e
(
ge
, 
GE_STATE_CONNECTED
);

703 
	`gfio_˛ór_gøph_d©a
(&
ge
->
gøphs
);

705 
	`gfio_ªp‹t_îr‹
(
ge
, "FaûedÅÿc⁄√˘Åÿ%s: %s\n", ge->
˛õ¡
->˛õ¡->
ho°«me
, 
	`°ªº‹
(-
ªt
));

708 
	`fio_˛õ¡_ãrmö©e
(
gc
->
˛õ¡
);

709 
	`gfio_£t_°©e
(
ge
, 
GE_STATE_NEW
);

710 
	`˛ór_ge_ui_öfo
(
ge
);

712 
	}
}

714 
	$£nd_˛icked
(
GtkWidgë
 *
widgë
, 
gpoöãr
 
d©a
)

716 
gui_íåy
 *
ge
 = 
d©a
;

718 i‡(
	`£nd_job_fûe
(
ge
))

719 
	`gtk_widgë_£t_£nsôive
(
ge
->
buâ⁄
[
GFIO_BUTTON_START
], 1);

720 
	}
}

722 
GtkWidgë
 *
√w_˛õ¡_∑ge
(
gui_íåy
 *
ge
);

724 
gui_íåy
 *
	$Æloc_√w_gui_íåy
(
gui
 *
ui
)

726 
gui_íåy
 *
ge
;

728 
ge
 = 
	`mÆloc
((*ge));

729 
	`mem£t
(
ge
, 0, (*ge));

730 
ge
->
°©e
 = 
GE_STATE_NEW
;

731 
ge
->
ui
 = ui;

732  
ge
;

733 
	}
}

735 
gui_íåy
 *
	$gë_√w_ge_wôh_èb
(
gui
 *
ui
, c⁄° *
«me
)

737 
gui_íåy
 *
ge
;

739 
ge
 = 
	`Æloc_√w_gui_íåy
(
ui
);

741 
ge
->
vbox
 = 
	`√w_˛õ¡_∑ge
(ge);

742 
	`g_sig«l_c⁄√˘
(
ge
->
vbox
, "de°roy", 
	`G_CALLBACK
(
ge_widgë_de°roy
), ge);

744 
ge
->
∑ge_œbñ
 = 
	`gtk_œbñ_√w
(
«me
);

745 
ge
->
∑ge_num
 = 
	`gtk_nŸebook_≠≥nd_∑ge
(
	`GTK_NOTEBOOK
(
ui
->
nŸebook
), ge->
vbox
, ge->
∑ge_œbñ
);

747 
	`g_hash_èbÀ_ö£π
(
ui
->
ge_hash
, &
ge
->
∑ge_num
, ge);

749 
	`gtk_widgë_show_Æl
(
ui
->
wödow
);

750  
ge
;

751 
	}
}

753 
	$fûe_√w
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

755 
gui
 *
ui
 = (guò*Ë
d©a
;

756 
gui_íåy
 *
ge
;

758 
ge
 = 
	`gë_√w_ge_wôh_èb
(
ui
, "Untitled");

759 
	`gtk_nŸebook_£t_cuºít_∑ge
(
	`GTK_NOTEBOOK
(
ui
->
nŸebook
), 
ge
->
∑ge_num
);

760 
	}
}

766 
gui_íåy
 *
	$gë_ge_‰om_∑ge
(
gui
 *
ui
, 
göt
 
cur_∑ge
,

767 *
¸óãd
)

769 i‡(!
cur_∑ge
) {

770 i‡(
¸óãd
)

771 *
¸óãd
 = 1;

772  
	`gë_√w_ge_wôh_èb
(
ui
, "Untitled");

775 i‡(
¸óãd
)

776 *
¸óãd
 = 0;

778  
	`g_hash_èbÀ_lookup
(
ui
->
ge_hash
, &
cur_∑ge
);

779 
	}
}

781 
gui_íåy
 *
	$gë_ge_‰om_cur_èb
(
gui
 *
ui
)

783 
göt
 
cur_∑ge
;

789 
cur_∑ge
 = 
	`gtk_nŸebook_gë_cuºít_∑ge
(
	`GTK_NOTEBOOK
(
ui
->
nŸebook
));

790 i‡(
cur_∑ge
)

791  
	`gë_ge_‰om_∑ge
(
ui
, 
cur_∑ge
, 
NULL
);

793  
NULL
;

794 
	}
}

796 
	$fûe_˛o£
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

798 
gui
 *
ui
 = (guò*Ë
d©a
;

799 
gui_íåy
 *
ge
;

804 
ge
 = 
	`gë_ge_‰om_cur_èb
(
ui
);

805 i‡(
ge
) {

806 
	`gtk_widgë_de°roy
(
ge
->
vbox
);

810 i‡(
	`g_hash_èbÀ_size
(
ui
->
ge_hash
)) {

811 
	`gfio_ªp‹t_öfo
(
ui
, "Error", "The mainÖage view cannot be closed\n");

815 
	`gfio_quô
(
ui
);

816 
	}
}

818 
	$fûe_add_ª˚¡
(
gui
 *
ui
, c⁄° 
gch¨
 *
uri
)

820 
GtkRe˚¡D©a
 
grd
;

822 
	`mem£t
(&
grd
, 0, (grd));

823 
grd
.
di•œy_«me
 = 
	`°rdup
("gfio");

824 
grd
.
des¸ùti⁄
 = 
	`°rdup
("Fio job file");

825 
grd
.
mime_ty≥
 = 
	`°rdup
(
GFIO_MIME
);

826 
grd
.
≠p_«me
 = 
	`°rdup
(
	`g_gë_≠∂iˇti⁄_«me
());

827 
grd
.
≠p_exec
 = 
	`°rdup
("gfio %f/%u");

829 
	`gtk_ª˚¡_m™agî_add_fuŒ
(
ui
->
ª˚¡m™agî
, 
uri
, &
grd
);

830 
	}
}

832 
gch¨
 *
	$gë_fûíame_‰om_uri
(c⁄° 
gch¨
 *
uri
)

834 i‡(
	`°∫cmp
(
uri
, "file://", 7))

835  
	`°rdup
(
uri
);

837  
	`°rdup
(
uri
 + 7);

838 
	}
}

840 
	$do_fûe_›í
(
gui_íåy
 *
ge
, c⁄° 
gch¨
 *
uri
)

842 
fio_˛õ¡
 *
˛õ¡
;

844 
	`as£π
(!
ge
->
job_fûe
);

846 
ge
->
job_fûe
 = 
	`gë_fûíame_‰om_uri
(
uri
);

848 
˛õ¡
 = 
	`fio_˛õ¡_add_ex∂icô
(&
gfio_˛õ¡_›s
, 
ge
->
ho°
, ge->
ty≥
, ge->
p‹t
);

849 i‡(
˛õ¡
) {

850 *
œbñ
 = 
	`°rdup
(
uri
);

852 
	`ba£«me
(
œbñ
);

853 
	`gtk_œbñ_£t_ãxt
(
	`GTK_LABEL
(
ge
->
∑ge_œbñ
), 
	`ba£«me
(
œbñ
));

854 
	`‰ì
(
œbñ
);

856 
	`gfio_˛õ¡_added
(
ge
, 
˛õ¡
);

857 
	`fûe_add_ª˚¡
(
ge
->
ui
, 
uri
);

861 
	`gfio_ªp‹t_îr‹
(
ge
, "FaûedÅÿadd clõ¡ %s\n", ge->
ho°
);

862 
	`‰ì
(
ge
->
ho°
);

863 
ge
->
ho°
 = 
NULL
;

864 
	`‰ì
(
ge
->
job_fûe
);

865 
ge
->
job_fûe
 = 
NULL
;

867 
	}
}

869 
	$do_fûe_›í_wôh_èb
(
gui
 *
ui
, c⁄° 
gch¨
 *
uri
)

871 
gui_íåy
 *
ge
;

872 
göt
 
cur_∑ge
;

873 
ªt
, 
ge_is_√w
 = 0;

879 
cur_∑ge
 = 
	`gtk_nŸebook_gë_cuºít_∑ge
(
	`GTK_NOTEBOOK
(
ui
->
nŸebook
));

880 
ge
 = 
	`gë_ge_‰om_∑ge
(
ui
, 
cur_∑ge
, &
ge_is_√w
);

881 i‡(
ge
->
˛õ¡
) {

882 
ge
 = 
	`gë_√w_ge_wôh_èb
(
ui
, "Untitled");

883 
ge_is_√w
 = 1;

886 
	`gtk_nŸebook_£t_cuºít_∑ge
(
	`GTK_NOTEBOOK
(
ui
->
nŸebook
), 
ge
->
∑ge_num
);

888 i‡(
	`gë_c⁄√˘i⁄_dëaûs
(
ge
)) {

889 i‡(
ge_is_√w
)

890 
	`gtk_widgë_de°roy
(
ge
->
vbox
);

895 
ªt
 = 
	`do_fûe_›í
(
ge
, 
uri
);

897 i‡(!
ªt
) {

898 i‡(
ge
->
£rvî_°¨t
)

899 
	`gfio_°¨t_£rvî
(
ui
);

901 i‡(
ge_is_√w
)

902 
	`gtk_widgë_de°roy
(
ge
->
vbox
);

905  
ªt
;

906 
	}
}

908 
	$ª˚¡_›í
(
GtkA˘i⁄
 *
a˘i⁄
, 
gpoöãr
 
d©a
)

910 
gui
 *
ui
 = (guò*Ë
d©a
;

911 
GtkRe˚¡Info
 *
öfo
;

912 c⁄° 
gch¨
 *
uri
;

914 
öfo
 = 
	`g_obje˘_gë_d©a
(
	`G_OBJECT
(
a˘i⁄
), "gtk-recent-info");

915 
uri
 = 
	`gtk_ª˚¡_öfo_gë_uri
(
öfo
);

917 
	`do_fûe_›í_wôh_èb
(
ui
, 
uri
);

918 
	}
}

920 
	$fûe_›í
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

922 
gui
 *
ui
 = 
d©a
;

923 
GtkWidgë
 *
dülog
;

924 
GtkFûeFûãr
 *
fûãr
;

925 
gch¨
 *
fûíame
;

927 
dülog
 = 
	`gtk_fûe_choo£r_dülog_√w
("Open File",

928 
	`GTK_WINDOW
(
ui
->
wödow
),

929 
GTK_FILE_CHOOSER_ACTION_OPEN
,

930 
GTK_STOCK_CANCEL
, 
GTK_RESPONSE_CANCEL
,

931 
GTK_STOCK_OPEN
, 
GTK_RESPONSE_ACCEPT
,

932 
NULL
);

933 
	`gtk_fûe_choo£r_£t_£À˘_mu…ùÀ
(
	`GTK_FILE_CHOOSER
(
dülog
), 
FALSE
);

935 
fûãr
 = 
	`gtk_fûe_fûãr_√w
();

936 
	`gtk_fûe_fûãr_add_∑âîn
(
fûãr
, "*.fio");

937 
	`gtk_fûe_fûãr_add_∑âîn
(
fûãr
, "*.job");

938 
	`gtk_fûe_fûãr_add_∑âîn
(
fûãr
, "*.ini");

939 
	`gtk_fûe_fûãr_add_mime_ty≥
(
fûãr
, 
GFIO_MIME
);

940 
	`gtk_fûe_fûãr_£t_«me
(
fûãr
, "Fio job file");

941 
	`gtk_fûe_choo£r_£t_fûãr
(
	`GTK_FILE_CHOOSER
(
dülog
), 
fûãr
);

943 i‡(
	`gtk_dülog_run
(
	`GTK_DIALOG
(
dülog
)Ë!
GTK_RESPONSE_ACCEPT
) {

944 
	`gtk_widgë_de°roy
(
dülog
);

948 
fûíame
 = 
	`gtk_fûe_choo£r_gë_fûíame
(
	`GTK_FILE_CHOOSER
(
dülog
));

950 
	`gtk_widgë_de°roy
(
dülog
);

952 
	`do_fûe_›í_wôh_èb
(
ui
, 
fûíame
);

953 
	`g_‰ì
(
fûíame
);

954 
	}
}

956 
	$fûe_ßve
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

958 
gui
 *
ui
 = 
d©a
;

959 
GtkWidgë
 *
dülog
;

961 
dülog
 = 
	`gtk_fûe_choo£r_dülog_√w
("Save File",

962 
	`GTK_WINDOW
(
ui
->
wödow
),

963 
GTK_FILE_CHOOSER_ACTION_SAVE
,

964 
GTK_STOCK_CANCEL
, 
GTK_RESPONSE_CANCEL
,

965 
GTK_STOCK_SAVE
, 
GTK_RESPONSE_ACCEPT
,

966 
NULL
);

968 
	`gtk_fûe_choo£r_£t_do_ovîwrôe_c⁄fúm©i⁄
(
	`GTK_FILE_CHOOSER
(
dülog
), 
TRUE
);

969 
	`gtk_fûe_choo£r_£t_cuºít_«me
(
	`GTK_FILE_CHOOSER
(
dülog
), "Untitled document");

971 i‡(
	`gtk_dülog_run
(
	`GTK_DIALOG
(
dülog
)Ë=
GTK_RESPONSE_ACCEPT
) {

972 *
fûíame
;

974 
fûíame
 = 
	`gtk_fûe_choo£r_gë_fûíame
(
	`GTK_FILE_CHOOSER
(
dülog
));

976 
	`g_‰ì
(
fûíame
);

978 
	`gtk_widgë_de°roy
(
dülog
);

979 
	}
}

981 
	$võw_log_de°roy
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

983 
gui
 *
ui
 = (guò*Ë
d©a
;

985 
	`g_obje˘_ªf
(
	`G_OBJECT
(
ui
->
log_åì
));

986 
	`gtk_c⁄èöî_ªmove
(
	`GTK_CONTAINER
(
w
), 
ui
->
log_åì
);

987 
	`gtk_widgë_de°roy
(
w
);

988 
ui
->
log_võw
 = 
NULL
;

989 
	}
}

991 
	$gfio_võw_log
(
gui
 *
ui
)

993 
GtkWidgë
 *
wö
, *
s¸ﬁl
, *
vbox
, *
box
;

995 i‡(
ui
->
log_võw
)

998 
ui
->
log_võw
 = 
wö
 = 
	`gtk_wödow_√w
(
GTK_WINDOW_TOPLEVEL
);

999 
	`gtk_wödow_£t_tôÀ
(
	`GTK_WINDOW
(
wö
), "Log");

1000 
	`gtk_wödow_£t_deÁu…_size
(
	`GTK_WINDOW
(
wö
), 700, 500);

1002 
s¸ﬁl
 = 
	`gtk_s¸ﬁÀd_wödow_√w
(
NULL
, NULL);

1004 
	`gtk_c⁄èöî_£t_b‹dî_width
(
	`GTK_CONTAINER
(
s¸ﬁl
), 5);

1006 
	`gtk_s¸ﬁÀd_wödow_£t_pﬁicy
(
	`GTK_SCROLLED_WINDOW
(
s¸ﬁl
), 
GTK_POLICY_AUTOMATIC
, GTK_POLICY_AUTOMATIC);

1008 
box
 = 
	`gtk_hbox_√w
(
TRUE
, 0);

1009 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
box
), 
ui
->
log_åì
, 
TRUE
, TRUE, 0);

1010 
	`g_sig«l_c⁄√˘
(
box
, "de°roy", 
	`G_CALLBACK
(
võw_log_de°roy
), 
ui
);

1011 
	`gtk_s¸ﬁÀd_wödow_add_wôh_võwp‹t
(
	`GTK_SCROLLED_WINDOW
(
s¸ﬁl
), 
box
);

1013 
vbox
 = 
	`gtk_vbox_√w
(
TRUE
, 5);

1014 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
s¸ﬁl
, 
TRUE
, TRUE, 0);

1016 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
wö
), 
vbox
);

1017 
	`gtk_widgë_show_Æl
(
wö
);

1018 
	}
}

1020 
	$võw_log
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

1022 
gui
 *
ui
 = (guò*Ë
d©a
;

1024 
	`gfio_võw_log
(
ui
);

1025 
	}
}

1027 
	$c⁄√˘_job_íåy
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

1029 
gui
 *
ui
 = (guò*Ë
d©a
;

1030 
gui_íåy
 *
ge
;

1032 
ge
 = 
	`gë_ge_‰om_cur_èb
(
ui
);

1033 i‡(
ge
)

1034 
	`c⁄√˘_˛icked
(
w
, 
ge
);

1035 
	}
}

1037 
	$£nd_job_íåy
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

1039 
gui
 *
ui
 = (guò*Ë
d©a
;

1040 
gui_íåy
 *
ge
;

1042 
ge
 = 
	`gë_ge_‰om_cur_èb
(
ui
);

1043 i‡(
ge
)

1044 
	`£nd_˛icked
(
w
, 
ge
);

1045 
	}
}

1047 
	$edô_job_íåy
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

1049 
gui
 *
ui
 = (guò*Ë
d©a
;

1050 
gui_íåy
 *
ge
;

1052 
ge
 = 
	`gë_ge_‰om_cur_èb
(
ui
);

1053 i‡(
ge
 && ge->
˛õ¡
)

1054 
	`g›t_gë_›ti⁄s_wödow
(
ui
->
wödow
, 
ge
->
˛õ¡
);

1055 
	}
}

1057 
	$°¨t_job_íåy
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

1059 
gui
 *
ui
 = (guò*Ë
d©a
;

1060 
gui_íåy
 *
ge
;

1062 
ge
 = 
	`gë_ge_‰om_cur_èb
(
ui
);

1063 i‡(
ge
)

1064 
	`°¨t_job_˛icked
(
w
, 
ge
);

1065 
	}
}

1067 
	$võw_ªsu…s
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

1069 
gui
 *
ui
 = (guò*Ë
d©a
;

1070 
gfio_˛õ¡
 *
gc
;

1071 
gui_íåy
 *
ge
;

1073 
ge
 = 
	`gë_ge_‰om_cur_èb
(
ui
);

1074 i‡(!
ge
)

1077 i‡(
ge
->
ªsu…s_wödow
)

1080 
gc
 = 
ge
->
˛õ¡
;

1081 i‡(
gc
 && gc->
ƒ_ªsu…s
)

1082 
	`gfio_di•œy_íd_ªsu…s
(
gc
);

1083 
	}
}

1085 
	$__upd©e_gøph_£âögs
(
gfio_gøphs
 *
g
)

1087 
	`löe_gøph_£t_d©a_cou¡_limô
(
g
->
i›s_gøph
, 
gfio_gøph_limô
);

1088 
	`gøph_£t_f⁄t
(
g
->
i›s_gøph
, 
gfio_gøph_f⁄t
);

1089 
	`löe_gøph_£t_d©a_cou¡_limô
(
g
->
b™dwidth_gøph
, 
gfio_gøph_limô
);

1090 
	`gøph_£t_f⁄t
(
g
->
b™dwidth_gøph
, 
gfio_gøph_f⁄t
);

1091 
	}
}

1093 
	$ge_upd©e_£âögs_‚
(
gpoöãr
 
key
, gpoöã∏
vÆue
, gpoöã∏
d©a
)

1095 
gui_íåy
 *
ge
 = (gui_íåy *Ë
vÆue
;

1096 
GdkEvít
 *
ev
;

1098 
	`__upd©e_gøph_£âögs
(&
ge
->
gøphs
);

1100 
ev
 = 
	`gdk_evít_√w
(
GDK_EXPOSE
);

1101 
	`g_sig«l_emô_by_«me
(
	`G_OBJECT
(
ge
->
gøphs
.
døwög_¨ó
), 
GFIO_DRAW_EVENT
, 
	`GTK_WIDGET
(ge->gøphs.døwög_¨ó), 
ev
, &ge->graphs);

1102 
	`gdk_evít_‰ì
(
ev
);

1103 
	}
}

1105 
	$upd©e_gøph_limôs
()

1107 
gui
 *
ui
 = &
maö_ui
;

1108 
GdkEvít
 *
ev
;

1110 
	`__upd©e_gøph_£âögs
(&
ui
->
gøphs
);

1112 
ev
 = 
	`gdk_evít_√w
(
GDK_EXPOSE
);

1113 
	`g_sig«l_emô_by_«me
(
	`G_OBJECT
(
ui
->
gøphs
.
døwög_¨ó
), 
GFIO_DRAW_EVENT
, 
	`GTK_WIDGET
(ui->gøphs.døwög_¨ó), 
ev
, &ui->graphs);

1114 
	`gdk_evít_‰ì
(
ev
);

1116 
	`g_hash_èbÀ_f‹óch
(
ui
->
ge_hash
, 
ge_upd©e_£âögs_‚
, 
NULL
);

1117 
	}
}

1119 
	$¥e„ªn˚s
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

1121 
GtkWidgë
 *
dülog
, *
‰ame
, *
box
, **
buâ⁄s
, *
vbox
, *
f⁄t
;

1122 
GtkWidgë
 *
hbox
, *
•ö
, *
íåy
, *
•ö_öt
;

1123 
gui
 *
ui
 = (guò*Ë
d©a
;

1124 
i
;

1126 
dülog
 = 
	`gtk_dülog_√w_wôh_buâ⁄s
("Preferences",

1127 
	`GTK_WINDOW
(
ui
->
wödow
),

1128 
GTK_DIALOG_DESTROY_WITH_PARENT
,

1129 
GTK_STOCK_OK
, 
GTK_RESPONSE_ACCEPT
,

1130 
GTK_STOCK_CANCEL
, 
GTK_RESPONSE_REJECT
,

1131 
NULL
);

1133 
‰ame
 = 
	`gtk_‰ame_√w
("Graphing");

1134 
vbox
 = 
	`gtk_dülog_gë_c⁄ã¡_¨ó
(
	`GTK_DIALOG
(
dülog
));

1135 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
‰ame
, 
FALSE
, FALSE, 5);

1136 
vbox
 = 
	`gtk_vbox_√w
(
FALSE
, 6);

1137 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
vbox
);

1139 
hbox
 = 
	`gtk_hbox_√w
(
FALSE
, 5);

1140 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
hbox
, 
FALSE
, FALSE, 5);

1141 
íåy
 = 
	`gtk_œbñ_√w
("Font faceÅo use for graphÜabels");

1142 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
hbox
), 
íåy
, 
TRUE
, TRUE, 5);

1144 
f⁄t
 = 
	`gtk_f⁄t_buâ⁄_√w_wôh_f⁄t
(
gfio_gøph_f⁄t
);

1145 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
hbox
), 
f⁄t
, 
FALSE
, FALSE, 5);

1147 
box
 = 
	`gtk_vbox_√w
(
FALSE
, 6);

1148 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
box
, 
FALSE
, FALSE, 5);

1150 
hbox
 = 
	`gtk_hbox_√w
(
FALSE
, 5);

1151 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
box
), 
hbox
, 
TRUE
, TRUE, 5);

1152 
íåy
 = 
	`gtk_œbñ_√w
("MaximumÇumber of dataÖoints in graph (seconds)");

1153 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
hbox
), 
íåy
, 
FALSE
, FALSE, 5);

1155 
•ö
 = 
	`¸óã_•öbuâ⁄
(
hbox
, 10, 1000000, 
gfio_gøph_limô
);

1157 
box
 = 
	`gtk_vbox_√w
(
FALSE
, 6);

1158 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
box
, 
FALSE
, FALSE, 5);

1160 
hbox
 = 
	`gtk_hbox_√w
(
FALSE
, 5);

1161 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
box
), 
hbox
, 
TRUE
, TRUE, 5);

1162 
íåy
 = 
	`gtk_œbñ_√w
("Client ETAÑequest interval (msec)");

1163 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
hbox
), 
íåy
, 
FALSE
, FALSE, 5);

1165 
•ö_öt
 = 
	`¸óã_•öbuâ⁄
(
hbox
, 100, 100000, 
gfio_˛õ¡_›s
.
ëa_m£c
);

1166 
‰ame
 = 
	`gtk_‰ame_√w
("DebugÜogging");

1167 
vbox
 = 
	`gtk_dülog_gë_c⁄ã¡_¨ó
(
	`GTK_DIALOG
(
dülog
));

1168 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
‰ame
, 
FALSE
, FALSE, 5);

1169 
vbox
 = 
	`gtk_vbox_√w
(
FALSE
, 6);

1170 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
vbox
);

1172 
box
 = 
	`gtk_hbox_√w
(
FALSE
, 6);

1173 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
vbox
), 
box
);

1175 
buâ⁄s
 = 
	`mÆloc
((
GtkWidgë
 *Ë* 
FD_DEBUG_MAX
);

1177 
i
 = 0; i < 
FD_DEBUG_MAX
; i++) {

1178 i‡(
i
 == 7) {

1179 
box
 = 
	`gtk_hbox_√w
(
FALSE
, 6);

1180 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
vbox
), 
box
);

1184 
buâ⁄s
[
i
] = 
	`gtk_check_buâ⁄_√w_wôh_œbñ
(
debug_Àvñs
[i].
«me
);

1185 
	`gtk_widgë_£t_toﬁtù_ãxt
(
buâ⁄s
[
i
], 
debug_Àvñs
[i].
hñp
);

1186 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
box
), 
buâ⁄s
[
i
], 
FALSE
, FALSE, 6);

1189 
	`gtk_widgë_show_Æl
(
dülog
);

1191 i‡(
	`gtk_dülog_run
(
	`GTK_DIALOG
(
dülog
)Ë!
GTK_RESPONSE_ACCEPT
) {

1192 
	`gtk_widgë_de°roy
(
dülog
);

1196 
i
 = 0; i < 
FD_DEBUG_MAX
; i++) {

1197 
£t
;

1199 
£t
 = 
	`gtk_toggÀ_buâ⁄_gë_a˘ive
(
	`GTK_TOGGLE_BUTTON
(
buâ⁄s
[
i
]));

1200 i‡(
£t
)

1201 
fio_debug
 |(1UL << 
i
);

1204 
gfio_gøph_f⁄t
 = 
	`°rdup
(
	`gtk_f⁄t_buâ⁄_gë_f⁄t_«me
(
	`GTK_FONT_BUTTON
(
f⁄t
)));

1205 
gfio_gøph_limô
 = 
	`gtk_•ö_buâ⁄_gë_vÆue_as_öt
(
	`GTK_SPIN_BUTTON
(
•ö
));

1206 
	`upd©e_gøph_limôs
();

1207 
gfio_˛õ¡_›s
.
ëa_m£c
 = 
	`gtk_•ö_buâ⁄_gë_vÆue_as_öt
(
	`GTK_SPIN_BUTTON
(
•ö_öt
));

1209 
	`gtk_widgë_de°roy
(
dülog
);

1210 
	}
}

1212 
	$about_dülog
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

1214 c⁄° *
auth‹s
[] = {

1217 
NULL


1219 c⁄° *
li˚n£
[] = {

1232 *
li˚n£_å™s
;

1234 
li˚n£_å™s
 = 
	`g_°rc⁄ˇt
(
li˚n£
[0], "\n",Üicense[1], "\n",

1235 
li˚n£
[2], "\n", 
NULL
);

1237 
	`gtk_show_about_dülog
(
NULL
,

1240 "li˚n£", 
li˚n£_å™s
,

1242 "auth‹s", 
auth‹s
,

1243 "vîsi⁄", 
fio_vîsi⁄_°rög
,

1247 "wøp-li˚n£", 
TRUE
,

1248 
NULL
);

1250 
	`g_‰ì
(
li˚n£_å™s
);

1251 
	}
}

1253 
GtkA˘i⁄E¡ry
 
	gmíu_ôems
[] = {

1254 { "FûeMíuA˘i⁄", 
GTK_STOCK_FILE
, "Fûe", 
NULL
, NULL, NULL},

1255 { "VõwMíuA˘i⁄", 
GTK_STOCK_FILE
, "Võw", 
NULL
, NULL, NULL},

1256 { "JobMíuA˘i⁄", 
GTK_STOCK_FILE
, "Job", 
NULL
, NULL, NULL},

1257 { "HñpMíuA˘i⁄", 
GTK_STOCK_HELP
, "Hñp", 
NULL
, NULL, NULL},

1258 { "NewFûe", 
GTK_STOCK_NEW
, "New", "<C⁄åﬁ>N", 
NULL
, 
G_CALLBACK
(
fûe_√w
) },

1259 { "Clo£Fûe", 
GTK_STOCK_CLOSE
, "Clo£", "<C⁄åﬁ>W", 
NULL
, 
G_CALLBACK
(
fûe_˛o£
) },

1260 { "O≥nFûe", 
GTK_STOCK_OPEN
, 
NULL
, "<C⁄åﬁ>O", NULL, 
G_CALLBACK
(
fûe_›í
) },

1261 { "SaveFûe", 
GTK_STOCK_SAVE
, 
NULL
, "<C⁄åﬁ>S", NULL, 
G_CALLBACK
(
fûe_ßve
) },

1262 { "Pª„ªn˚s", 
GTK_STOCK_PREFERENCES
, 
NULL
, "<C⁄åﬁ>p", NULL, 
G_CALLBACK
(
¥e„ªn˚s
) },

1263 { "VõwLog", 
NULL
, "Log", "<C⁄åﬁ>l", NULL, 
G_CALLBACK
(
võw_log
) },

1264 { "VõwResu…s", 
NULL
, "Resu…s", "<C⁄åﬁ>R", NULL, 
G_CALLBACK
(
võw_ªsu…s
) },

1265 { "C⁄√˘Job", 
NULL
, "C⁄√˘", "<C⁄åﬁ>D", NULL, 
G_CALLBACK
(
c⁄√˘_job_íåy
) },

1266 { "EdôJob", 
NULL
, "Edô job", "<C⁄åﬁ>E", NULL, 
G_CALLBACK
(
edô_job_íåy
) },

1267 { "SídJob", 
NULL
, "Síd job", "<C⁄åﬁ>X", NULL, 
G_CALLBACK
(
£nd_job_íåy
) },

1268 { "SèπJob", 
NULL
, "Sèπ job", "<C⁄åﬁ>L", NULL, 
G_CALLBACK
(
°¨t_job_íåy
) },

1269 { "Quô", 
GTK_STOCK_QUIT
, 
NULL
, "<C⁄åﬁ>Q", NULL, 
G_CALLBACK
(
quô_˛icked
) },

1270 { "About", 
GTK_STOCK_ABOUT
, 
NULL
, NULL, NULL, 
G_CALLBACK
(
about_dülog
) },

1272 
göt
 
	gnmíu_ôems
 = (
míu_ôems
) / (menu_items[0]);

1274 c⁄° 
gch¨
 *
	gui_°rög
 = " \
<ui> \
<menubarÇame=\"MainMenu\"> \
<menuÇame=\"FileMenu\"áction=\"FileMenuAction\"> \
<menuitemÇame=\"New\"áction=\"NewFile\" /> \
<menuitemÇame=\"Open\"áction=\"OpenFile\" /> \
<menuitemÇame=\"Close\"áction=\"CloseFile\" /> \
<separatorÇame=\"Separator1\"/> \
<menuitemÇame=\"Save\"áction=\"SaveFile\" /> \
<separatorÇame=\"Separator2\"/> \
<menuitemÇame=\"Preferences\"áction=\"Preferences\" /> \
<separatorÇame=\"Separator3\"/> \
<placeholderÇame=\"FileRecentFiles\"/> \
<separatorÇame=\"Separator4\"/> \
<menuitemÇame=\"Quit\"áction=\"Quit\" /> \
</menu> \
<menuÇame=\"JobMenu\"áction=\"JobMenuAction\"> \
<menuitemÇame=\"Connect\"áction=\"ConnectJob\" /> \
<separatorÇame=\"Separator5\"/> \
<menuitemÇame=\"Edit job\"áction=\"EditJob\" /> \
<menuitemÇame=\"Send job\"áction=\"SendJob\" /> \
<separatorÇame=\"Separator6\"/> \
<menuitemÇame=\"Start job\"áction=\"StartJob\" /> \
</menu>\
<menuÇame=\"ViewMenu\"áction=\"ViewMenuAction\"> \
<menuitemÇame=\"Results\"áction=\"ViewResults\" /> \
<separatorÇame=\"Separator7\"/> \
<menuitemÇame=\"Log\"áction=\"ViewLog\" /> \
</menu>\
<menuÇame=\"Help\"áction=\"HelpMenuAction\"> \
<menuitemÇame=\"About\"áction=\"About\" /> \
</menu> \
</menubar> \
</ui> \
";

1310 
GtkWidgë
 *
	$gë_míub¨_míu
(
GtkWidgë
 *
wödow
, 
GtkUIM™agî
 *
ui_m™agî
,

1311 
gui
 *
ui
)

1313 
GtkA˘i⁄Group
 *
a˘i⁄_group
;

1314 
GEº‹
 *
îr‹
 = 0;

1316 
a˘i⁄_group
 = 
	`gtk_a˘i⁄_group_√w
("Menu");

1317 
	`gtk_a˘i⁄_group_add_a˘i⁄s
(
a˘i⁄_group
, 
míu_ôems
, 
nmíu_ôems
, 
ui
);

1319 
	`gtk_ui_m™agî_ö£π_a˘i⁄_group
(
ui_m™agî
, 
a˘i⁄_group
, 0);

1320 
	`gtk_ui_m™agî_add_ui_‰om_°rög
(
	`GTK_UI_MANAGER
(
ui_m™agî
), 
ui_°rög
, -1, &
îr‹
);

1322 
	`gtk_wödow_add_ac˚l_group
(
	`GTK_WINDOW
(
wödow
), 
	`gtk_ui_m™agî_gë_ac˚l_group
(
ui_m™agî
));

1324  
	`gtk_ui_m™agî_gë_widgë
(
ui_m™agî
, "/MainMenu");

1325 
	}
}

1327 
	$gfio_ui_£tup
(
GtkSëtögs
 *
£âögs
, 
GtkWidgë
 *
míub¨
,

1328 
GtkWidgë
 *
vbox
, 
GtkUIM™agî
 *
ui_m™agî
)

1330 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
míub¨
, 
FALSE
, FALSE, 0);

1331 
	}
}

1333 
	$combo_íåy_ch™ged
(
GtkComboBox
 *
box
, 
gpoöãr
 
d©a
)

1335 
gui_íåy
 *
ge
 = (gui_íåy *Ë
d©a
;

1336 
göt
 
ödex
;

1338 
ödex
 = 
	`gtk_combo_box_gë_a˘ive
(
box
);

1340 
	`mu…ôext_£t_íåy
(&
ge
->
ëa
.
iŸy≥
, 
ödex
);

1341 
	`mu…ôext_£t_íåy
(&
ge
->
ëa
.
bs
, 
ödex
);

1342 
	`mu…ôext_£t_íåy
(&
ge
->
ëa
.
i€ngöe
, 
ödex
);

1343 
	`mu…ôext_£t_íåy
(&
ge
->
ëa
.
iodïth
, 
ödex
);

1344 
	}
}

1346 
	$combo_íåy_de°roy
(
GtkWidgë
 *
widgë
, 
gpoöãr
 
d©a
)

1348 
gui_íåy
 *
ge
 = (gui_íåy *Ë
d©a
;

1350 
	`mu…ôext_‰ì
(&
ge
->
ëa
.
iŸy≥
);

1351 
	`mu…ôext_‰ì
(&
ge
->
ëa
.
bs
);

1352 
	`mu…ôext_‰ì
(&
ge
->
ëa
.
i€ngöe
);

1353 
	`mu…ôext_‰ì
(&
ge
->
ëa
.
iodïth
);

1354 
	}
}

1356 
GtkWidgë
 *
	$√w_˛õ¡_∑ge
(
gui_íåy
 *
ge
)

1358 
GtkWidgë
 *
maö_vbox
, *
¥obe
, *
¥obe_‰ame
, *
¥obe_box
;

1359 
GtkWidgë
 *
s¸ﬁÀd_wödow
, *
bŸtom_Æign
, *
t›_Æign
, *
t›_vbox
;

1361 
maö_vbox
 = 
	`gtk_vbox_√w
(
FALSE
, 3);

1363 
t›_Æign
 = 
	`gtk_Æignmít_√w
(0, 0, 1, 0);

1364 
t›_vbox
 = 
	`gtk_vbox_√w
(
FALSE
, 3);

1365 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
t›_Æign
), 
t›_vbox
);

1366 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
maö_vbox
), 
t›_Æign
, 
FALSE
, FALSE, 0);

1368 
¥obe
 = 
	`gtk_‰ame_√w
("Job");

1369 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
maö_vbox
), 
¥obe
, 
FALSE
, FALSE, 3);

1370 
¥obe_‰ame
 = 
	`gtk_vbox_√w
(
FALSE
, 3);

1371 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
¥obe
), 
¥obe_‰ame
);

1373 
¥obe_box
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

1374 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
¥obe_‰ame
), 
¥obe_box
, 
FALSE
, FALSE, 3);

1375 
ge
->
¥obe
.
ho°«me
 = 
	`√w_öfo_œbñ_ö_‰ame
(
¥obe_box
, "Host");

1376 
ge
->
¥obe
.
os
 = 
	`√w_öfo_œbñ_ö_‰ame
(
¥obe_box
, "OS");

1377 
ge
->
¥obe
.
¨ch
 = 
	`√w_öfo_œbñ_ö_‰ame
(
¥obe_box
, "Architecture");

1378 
ge
->
¥obe
.
fio_vî
 = 
	`√w_öfo_œbñ_ö_‰ame
(
¥obe_box
, "Fio version");

1380 
¥obe_box
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

1381 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
¥obe_‰ame
), 
¥obe_box
, 
FALSE
, FALSE, 3);

1383 
ge
->
ëa
.
«mes
 = 
	`√w_combo_íåy_ö_‰ame
(
¥obe_box
, "Jobs");

1384 
	`g_sig«l_c⁄√˘
(
ge
->
ëa
.
«mes
, "ch™ged", 
	`G_CALLBACK
(
combo_íåy_ch™ged
), ge);

1385 
	`g_sig«l_c⁄√˘
(
ge
->
ëa
.
«mes
, "de°roy", 
	`G_CALLBACK
(
combo_íåy_de°roy
), ge);

1386 
ge
->
ëa
.
iŸy≥
.
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
¥obe_box
, "IO");

1387 
ge
->
ëa
.
bs
.
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
¥obe_box
, "Blocksize (Read/Write)");

1388 
ge
->
ëa
.
i€ngöe
.
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
¥obe_box
, "IO Engine");

1389 
ge
->
ëa
.
iodïth
.
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
¥obe_box
, "IO Depth");

1390 
ge
->
ëa
.
jobs
 = 
	`√w_öfo_íåy_ö_‰ame
(
¥obe_box
, "Jobs");

1391 
ge
->
ëa
.
fûes
 = 
	`√w_öfo_íåy_ö_‰ame
(
¥obe_box
, "Open files");

1393 
¥obe_box
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

1394 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
¥obe_‰ame
), 
¥obe_box
, 
FALSE
, FALSE, 3);

1395 
ge
->
ëa
.
ªad_bw
 = 
	`√w_öfo_íåy_ö_‰ame_rgb
(
¥obe_box
, "Ród BW", 
GFIO_READ_R
, 
GFIO_READ_G
, 
GFIO_READ_B
);

1396 
ge
->
ëa
.
ªad_i›s
 = 
	`√w_öfo_íåy_ö_‰ame_rgb
(
¥obe_box
, "IOPS", 
GFIO_READ_R
, 
GFIO_READ_G
, 
GFIO_READ_B
);

1397 
ge
->
ëa
.
wrôe_bw
 = 
	`√w_öfo_íåy_ö_‰ame_rgb
(
¥obe_box
, "WrôêBW", 
GFIO_WRITE_R
, 
GFIO_WRITE_G
, 
GFIO_WRITE_B
);

1398 
ge
->
ëa
.
wrôe_i›s
 = 
	`√w_öfo_íåy_ö_‰ame_rgb
(
¥obe_box
, "IOPS", 
GFIO_WRITE_R
, 
GFIO_WRITE_G
, 
GFIO_WRITE_B
);

1399 
ge
->
ëa
.
åim_bw
 = 
	`√w_öfo_íåy_ö_‰ame_rgb
(
¥obe_box
, "Trim BW", 
GFIO_TRIM_R
, 
GFIO_TRIM_G
, 
GFIO_TRIM_B
);

1400 
ge
->
ëa
.
åim_i›s
 = 
	`√w_öfo_íåy_ö_‰ame_rgb
(
¥obe_box
, "IOPS", 
GFIO_TRIM_R
, 
GFIO_TRIM_G
, 
GFIO_TRIM_B
);

1406 
¥obe_box
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

1407 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
¥obe_‰ame
), 
¥obe_box
, 
TRUE
, 
FALSE
, 3);

1409 
ge
->
ëa
.
¸_bw
 = 
	`√w_öfo_œbñ_ö_‰ame
(
¥obe_box
, "Commit BW");

1410 
ge
->
ëa
.
¸_i›s
 = 
	`√w_öfo_œbñ_ö_‰ame
(
¥obe_box
, "Commit IOPS");

1412 
ge
->
ëa
.
cw_bw
 = 
	`√w_öfo_œbñ_ö_‰ame
(
¥obe_box
, "Commit BW");

1413 
ge
->
ëa
.
cw_i›s
 = 
	`√w_öfo_œbñ_ö_‰ame
(
¥obe_box
, "Commit IOPS");

1419 
ge
->
gøphs
.
døwög_¨ó
 = 
	`gtk_døwög_¨ó_√w
();

1420 
	`gtk_widgë_£t_size_ªque°
(
	`GTK_WIDGET
(
ge
->
gøphs
.
døwög_¨ó
),

1421 
DRAWING_AREA_XDIM
, 
DRAWING_AREA_YDIM
);

1422 
	`gtk_widgë_modify_bg
(
ge
->
gøphs
.
døwög_¨ó
, 
GTK_STATE_NORMAL
, &
gfio_cﬁ‹_lightyñlow
);

1423 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
ge
->
gøphs
.
døwög_¨ó
), 
GFIO_DRAW_EVENT
,

1424 
	`G_CALLBACK
(
⁄_expo£_døwög_¨ó
), &
ge
->
gøphs
);

1425 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
ge
->
gøphs
.
døwög_¨ó
), "configure_event",

1426 
	`G_CALLBACK
(
⁄_c⁄fig_døwög_¨ó
), &
ge
->
gøphs
);

1427 
s¸ﬁÀd_wödow
 = 
	`gtk_s¸ﬁÀd_wödow_√w
(
NULL
, NULL);

1428 
	`gtk_s¸ﬁÀd_wödow_£t_pﬁicy
(
	`GTK_SCROLLED_WINDOW
(
s¸ﬁÀd_wödow
),

1429 
GTK_POLICY_AUTOMATIC
, GTK_POLICY_AUTOMATIC);

1430 
	`gtk_s¸ﬁÀd_wödow_add_wôh_võwp‹t
(
	`GTK_SCROLLED_WINDOW
(
s¸ﬁÀd_wödow
),

1431 
ge
->
gøphs
.
døwög_¨ó
);

1432 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
maö_vbox
), 
s¸ﬁÀd_wödow
, 
TRUE
, TRUE, 0);

1434 
	`£tup_gøphs
(&
ge
->
gøphs
);

1440 
bŸtom_Æign
 = 
	`gtk_Æignmít_√w
(0, 1, 1, 0);

1441 
ge
->
buâ⁄box
 = 
	`gtk_hbox_√w
(
FALSE
, 0);

1442 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
bŸtom_Æign
), 
ge
->
buâ⁄box
);

1443 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
maö_vbox
), 
bŸtom_Æign
, 
FALSE
, FALSE, 0);

1445 
	`add_buâ⁄s
(
ge
, 
buâ⁄•e˛i°
, 
	`ARRAY_SIZE
(buttonspeclist));

1450 
ge
->
thªad_°©us_pb
 = 
	`gtk_¥ogªss_b¨_√w
();

1451 
	`gtk_¥ogªss_b¨_£t_‰a˘i⁄
(
	`GTK_PROGRESS_BAR
(
ge
->
thªad_°©us_pb
), 0.0);

1452 
	`gtk_¥ogªss_b¨_£t_ãxt
(
	`GTK_PROGRESS_BAR
(
ge
->
thªad_°©us_pb
), "No connections");

1453 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
ge
->
buâ⁄box
), ge->
thªad_°©us_pb
);

1456  
maö_vbox
;

1457 
	}
}

1459 
GtkWidgë
 *
	$√w_maö_∑ge
(
gui
 *
ui
)

1461 
GtkWidgë
 *
maö_vbox
, *
¥obe
, *
¥obe_‰ame
, *
¥obe_box
;

1462 
GtkWidgë
 *
s¸ﬁÀd_wödow
, *
bŸtom_Æign
, *
t›_Æign
, *
t›_vbox
;

1464 
maö_vbox
 = 
	`gtk_vbox_√w
(
FALSE
, 3);

1470 
t›_Æign
 = 
	`gtk_Æignmít_√w
(0, 0, 1, 0);

1471 
t›_vbox
 = 
	`gtk_vbox_√w
(
FALSE
, 0);

1472 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
t›_Æign
), 
t›_vbox
);

1473 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
maö_vbox
), 
t›_Æign
, 
FALSE
, FALSE, 0);

1475 
¥obe
 = 
	`gtk_‰ame_√w
("Run statistics");

1476 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
maö_vbox
), 
¥obe
, 
FALSE
, FALSE, 3);

1477 
¥obe_‰ame
 = 
	`gtk_vbox_√w
(
FALSE
, 3);

1478 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
¥obe
), 
¥obe_‰ame
);

1480 
¥obe_box
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

1481 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
¥obe_‰ame
), 
¥obe_box
, 
FALSE
, FALSE, 3);

1482 
ui
->
ëa
.
jobs
 = 
	`√w_öfo_íåy_ö_‰ame
(
¥obe_box
, "Running");

1483 
ui
->
ëa
.
ªad_bw
 = 
	`√w_öfo_íåy_ö_‰ame_rgb
(
¥obe_box
, "Ród BW", 
GFIO_READ_R
, 
GFIO_READ_G
, 
GFIO_READ_B
);

1484 
ui
->
ëa
.
ªad_i›s
 = 
	`√w_öfo_íåy_ö_‰ame_rgb
(
¥obe_box
, "IOPS", 
GFIO_READ_R
, 
GFIO_READ_G
, 
GFIO_READ_B
);

1485 
ui
->
ëa
.
wrôe_bw
 = 
	`√w_öfo_íåy_ö_‰ame_rgb
(
¥obe_box
, "WrôêBW", 
GFIO_WRITE_R
, 
GFIO_WRITE_G
, 
GFIO_WRITE_B
);

1486 
ui
->
ëa
.
wrôe_i›s
 = 
	`√w_öfo_íåy_ö_‰ame_rgb
(
¥obe_box
, "IOPS", 
GFIO_WRITE_R
, 
GFIO_WRITE_G
, 
GFIO_WRITE_B
);

1487 
ui
->
ëa
.
åim_bw
 = 
	`√w_öfo_íåy_ö_‰ame_rgb
(
¥obe_box
, "Trim BW", 
GFIO_TRIM_R
, 
GFIO_TRIM_G
, 
GFIO_TRIM_B
);

1488 
ui
->
ëa
.
åim_i›s
 = 
	`√w_öfo_íåy_ö_‰ame_rgb
(
¥obe_box
, "IOPS", 
GFIO_TRIM_R
, 
GFIO_TRIM_G
, 
GFIO_TRIM_B
);

1494 
¥obe_box
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

1495 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
¥obe_‰ame
), 
¥obe_box
, 
TRUE
, 
FALSE
, 3);

1497 
ui
->
ëa
.
¸_bw
 = 
	`√w_öfo_œbñ_ö_‰ame
(
¥obe_box
, "Commit BW");

1498 
ui
->
ëa
.
¸_i›s
 = 
	`√w_öfo_œbñ_ö_‰ame
(
¥obe_box
, "Commit IOPS");

1500 
ui
->
ëa
.
cw_bw
 = 
	`√w_öfo_œbñ_ö_‰ame
(
¥obe_box
, "Commit BW");

1501 
ui
->
ëa
.
cw_i›s
 = 
	`√w_öfo_œbñ_ö_‰ame
(
¥obe_box
, "Commit IOPS");

1507 
ui
->
gøphs
.
døwög_¨ó
 = 
	`gtk_døwög_¨ó_√w
();

1508 
	`gtk_widgë_£t_size_ªque°
(
	`GTK_WIDGET
(
ui
->
gøphs
.
døwög_¨ó
),

1509 
DRAWING_AREA_XDIM
, 
DRAWING_AREA_YDIM
);

1510 
	`gtk_widgë_modify_bg
(
ui
->
gøphs
.
døwög_¨ó
, 
GTK_STATE_NORMAL
, &
gfio_cﬁ‹_lightyñlow
);

1511 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
ui
->
gøphs
.
døwög_¨ó
), 
GFIO_DRAW_EVENT
,

1512 
	`G_CALLBACK
(
⁄_expo£_døwög_¨ó
), &
ui
->
gøphs
);

1513 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
ui
->
gøphs
.
døwög_¨ó
), "configure_event",

1514 
	`G_CALLBACK
(
⁄_c⁄fig_døwög_¨ó
), &
ui
->
gøphs
);

1515 
s¸ﬁÀd_wödow
 = 
	`gtk_s¸ﬁÀd_wödow_√w
(
NULL
, NULL);

1516 
	`gtk_s¸ﬁÀd_wödow_£t_pﬁicy
(
	`GTK_SCROLLED_WINDOW
(
s¸ﬁÀd_wödow
),

1517 
GTK_POLICY_AUTOMATIC
, GTK_POLICY_AUTOMATIC);

1518 
	`gtk_s¸ﬁÀd_wödow_add_wôh_võwp‹t
(
	`GTK_SCROLLED_WINDOW
(
s¸ﬁÀd_wödow
),

1519 
ui
->
gøphs
.
døwög_¨ó
);

1520 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
maö_vbox
), 
s¸ﬁÀd_wödow
,

1521 
TRUE
, TRUE, 0);

1523 
	`£tup_gøphs
(&
ui
->
gøphs
);

1529 
bŸtom_Æign
 = 
	`gtk_Æignmít_√w
(0, 1, 1, 0);

1530 
ui
->
buâ⁄box
 = 
	`gtk_hbox_√w
(
FALSE
, 0);

1531 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
bŸtom_Æign
), 
ui
->
buâ⁄box
);

1532 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
maö_vbox
), 
bŸtom_Æign
, 
FALSE
, FALSE, 0);

1537 
ui
->
thªad_°©us_pb
 = 
	`gtk_¥ogªss_b¨_√w
();

1538 
	`gtk_¥ogªss_b¨_£t_‰a˘i⁄
(
	`GTK_PROGRESS_BAR
(
ui
->
thªad_°©us_pb
), 0.0);

1539 
	`gtk_¥ogªss_b¨_£t_ãxt
(
	`GTK_PROGRESS_BAR
(
ui
->
thªad_°©us_pb
), "No connections");

1540 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
ui
->
buâ⁄box
), ui->
thªad_°©us_pb
);

1542  
maö_vbox
;

1543 
	}
}

1545 
gboﬁón
 
	$nŸebook_swôch_∑ge
(
GtkNŸebook
 *
nŸebook
, 
GtkWidgë
 *
widgë
,

1546 
guöt
 
∑ge
, 
gpoöãr
 
d©a
)

1549 
gui
 *
ui
 = (guò*Ë
d©a
;

1550 
gui_íåy
 *
ge
;

1552 i‡(!
∑ge
) {

1553 
	`£t_job_míu_visibÀ
(
ui
, 0);

1554 
	`£t_võw_ªsu…s_visibÀ
(
ui
, 0);

1555  
TRUE
;

1558 
	`£t_job_míu_visibÀ
(
ui
, 1);

1559 
ge
 = 
	`gë_ge_‰om_∑ge
(
ui
, 
∑ge
, 
NULL
);

1560 i‡(
ge
)

1561 
	`upd©e_buâ⁄_°©es
(
ui
, 
ge
);

1563  
TRUE
;

1564 
	}
}

1566 
göt
 
	$com∑ª_ª˚¡_ôems
(
GtkRe˚¡Info
 *
a
, GtkRe˚¡Infÿ*
b
)

1568 
time_t
 
time_a
 = 
	`gtk_ª˚¡_öfo_gë_visôed
(
a
);

1569 
time_t
 
time_b
 = 
	`gtk_ª˚¡_öfo_gë_visôed
(
b
);

1571  
time_b
 - 
time_a
;

1572 
	}
}

1574 
	$add_ª˚¡_fûe_ôems
(
gui
 *
ui
)

1576 c⁄° 
gch¨
 *
gfio
 = 
	`g_gë_≠∂iˇti⁄_«me
();

1577 
GLi°
 *
ôems
, *
ôem
;

1578 
i
 = 0;

1580 i‡(
ui
->
ª˚¡_ui_id
) {

1581 
	`gtk_ui_m™agî_ªmove_ui
(
ui
->
uim™agî
, ui->
ª˚¡_ui_id
);

1582 
	`gtk_ui_m™agî_ísuª_upd©e
(
ui
->
uim™agî
);

1584 
ui
->
ª˚¡_ui_id
 = 
	`gtk_ui_m™agî_√w_mîge_id
(ui->
uim™agî
);

1586 i‡(
ui
->
a˘i⁄group
) {

1587 
	`gtk_ui_m™agî_ªmove_a˘i⁄_group
(
ui
->
uim™agî
, ui->
a˘i⁄group
);

1588 
	`g_obje˘_uƒef
(
ui
->
a˘i⁄group
);

1590 
ui
->
a˘i⁄group
 = 
	`gtk_a˘i⁄_group_√w
("RecentFileActions");

1592 
	`gtk_ui_m™agî_ö£π_a˘i⁄_group
(
ui
->
uim™agî
, ui->
a˘i⁄group
, -1);

1594 
ôems
 = 
	`gtk_ª˚¡_m™agî_gë_ôems
(
ui
->
ª˚¡m™agî
);

1595 
ôems
 = 
	`g_li°_s‹t
(ôems, (
GCom∑ªFunc
Ë
com∑ª_ª˚¡_ôems
);

1597 
ôem
 = 
ôems
; iãm && iãm->
d©a
; iãm = 
	`g_li°_√xt
(item)) {

1598 
GtkRe˚¡Info
 *
öfo
 = (GtkRe˚¡Infÿ*Ë
ôem
->
d©a
;

1599 
gch¨
 *
a˘i⁄_«me
;

1600 c⁄° 
gch¨
 *
œbñ
;

1601 
GtkA˘i⁄
 *
a˘i⁄
;

1603 i‡(!
	`gtk_ª˚¡_öfo_has_≠∂iˇti⁄
(
öfo
, 
gfio
))

1609 i‡(!
	`gtk_ª˚¡_öfo_is_loˇl
(
öfo
Ë|| !
	`gtk_ª˚¡_öfo_exi°s
(info))

1612 
a˘i⁄_«me
 = 
	`g_°rdup_¥ötf
("Re˚¡Fûe%u", 
i
++);

1613 
œbñ
 = 
	`gtk_ª˚¡_öfo_gë_di•œy_«me
(
öfo
);

1615 
a˘i⁄
 = 
	`g_obje˘_√w
(
GTK_TYPE_ACTION
,

1616 "«me", 
a˘i⁄_«me
,

1617 "œbñ", 
œbñ
, 
NULL
);

1619 
	`g_obje˘_£t_d©a_fuŒ
(
	`G_OBJECT
(
a˘i⁄
), "gtk-recent-info",

1620 
	`gtk_ª˚¡_öfo_ªf
(
öfo
),

1621 (
GDe°royNŸify
Ë
gtk_ª˚¡_öfo_uƒef
);

1624 
	`g_sig«l_c⁄√˘
(
a˘i⁄
, "a˘iv©e", 
	`G_CALLBACK
(
ª˚¡_›í
), 
ui
);

1626 
	`gtk_a˘i⁄_group_add_a˘i⁄
(
ui
->
a˘i⁄group
, 
a˘i⁄
);

1627 
	`g_obje˘_uƒef
(
a˘i⁄
);

1629 
	`gtk_ui_m™agî_add_ui
(
ui
->
uim™agî
, ui->
ª˚¡_ui_id
,

1631 
œbñ
, 
a˘i⁄_«me
,

1632 
GTK_UI_MANAGER_MENUITEM
, 
FALSE
);

1634 
	`g_‰ì
(
a˘i⁄_«me
);

1636 i‡(
i
 == 8)

1640 
	`g_li°_f‹óch
(
ôems
, (
GFunc
Ë
gtk_ª˚¡_öfo_uƒef
, 
NULL
);

1641 
	`g_li°_‰ì
(
ôems
);

1642 
	}
}

1644 
	$døg_™d_dr›_ª˚ived
(
GtkWidgë
 *
widgë
, 
GdkDøgC⁄ãxt
 *
˘x
,

1645 
göt
 
x
, göà
y
, 
GtkSñe˘i⁄D©a
 *
£ld©a
,

1646 
guöt
 
öfo
, guöà
time
, 
gpoöãr
 *
d©a
)

1648 
gui
 *
ui
 = (guò*Ë
d©a
;

1649 
gch¨
 **
uris
;

1650 
GtkWidgë
 *
sour˚
;

1652 
sour˚
 = 
	`gtk_døg_gë_sour˚_widgë
(
˘x
);

1653 i‡(
sour˚
 && 
widgë
 =
	`gtk_widgë_gë_t›Àvñ
(source)) {

1654 
	`gtk_døg_föish
(
˘x
, 
FALSE
, FALSE, 
time
);

1658 
uris
 = 
	`gtk_£À˘i⁄_d©a_gë_uris
(
£ld©a
);

1659 i‡(!
uris
) {

1660 
	`gtk_døg_föish
(
˘x
, 
FALSE
, FALSE, 
time
);

1664 i‡(
uris
[0])

1665 
	`do_fûe_›í_wôh_èb
(
ui
, 
uris
[0]);

1667 
	`gtk_døg_föish
(
˘x
, 
TRUE
, 
FALSE
, 
time
);

1668 
	`g_°r‰ìv
(
uris
);

1669 
	}
}

1671 
	$öô_ui
(*
¨gc
, **
¨gv
[], 
gui
 *
ui
)

1673 
GtkSëtögs
 *
£âögs
;

1674 
GtkWidgë
 *
vbox
;

1680 #i‡!
	`GTK_CHECK_VERSION
(2, 24, 0)

1681 i‡(!
	`g_thªad_suµ‹ãd
())

1682 
	`g_thªad_öô
(
NULL
);

1685 
	`gdk_thªads_öô
();

1687 
	`gtk_öô
(
¨gc
, 
¨gv
);

1688 
£âögs
 = 
	`gtk_£âögs_gë_deÁu…
();

1689 
	`gtk_£âögs_£t_l⁄g_¥›îty
(
£âögs
, "gtk_tooltip_timeout", 10, "gfio setting");

1690 
	`g_ty≥_öô
();

1691 
	`gdk_cﬁ‹_∑r£
("#fffff4", &
gfio_cﬁ‹_lightyñlow
);

1692 
	`gdk_cﬁ‹_∑r£
("whôe", &
gfio_cﬁ‹_whôe
);

1694 
ui
->
wödow
 = 
	`gtk_wödow_√w
(
GTK_WINDOW_TOPLEVEL
);

1695 
	`gtk_wödow_£t_tôÀ
(
	`GTK_WINDOW
(
ui
->
wödow
), "fio");

1696 
	`gtk_wödow_£t_deÁu…_size
(
	`GTK_WINDOW
(
ui
->
wödow
), 1024, 768);

1698 
	`g_sig«l_c⁄√˘
(
ui
->
wödow
, "dñëe-evít", 
	`G_CALLBACK
(
quô_˛icked
), ui);

1699 
	`g_sig«l_c⁄√˘
(
ui
->
wödow
, "de°roy", 
	`G_CALLBACK
(
quô_˛icked
), ui);

1701 
ui
->
vbox
 = 
	`gtk_vbox_√w
(
FALSE
, 0);

1702 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
ui
->
wödow
), ui->
vbox
);

1704 
ui
->
uim™agî
 = 
	`gtk_ui_m™agî_√w
();

1705 
ui
->
míu
 = 
	`gë_míub¨_míu
(ui->
wödow
, ui->
uim™agî
, ui);

1706 
	`gfio_ui_£tup
(
£âögs
, 
ui
->
míu
, ui->
vbox
, ui->
uim™agî
);

1708 
ui
->
ª˚¡m™agî
 = 
	`gtk_ª˚¡_m™agî_gë_deÁu…
();

1709 
	`add_ª˚¡_fûe_ôems
(
ui
);

1711 
ui
->
nŸebook
 = 
	`gtk_nŸebook_√w
();

1712 
	`g_sig«l_c⁄√˘
(
ui
->
nŸebook
, "swôch-∑ge", 
	`G_CALLBACK
(
nŸebook_swôch_∑ge
), ui);

1713 
	`gtk_nŸebook_£t_s¸ﬁœbÀ
(
	`GTK_NOTEBOOK
(
ui
->
nŸebook
), 1);

1714 
	`gtk_nŸebook_p›up_íabÀ
(
	`GTK_NOTEBOOK
(
ui
->
nŸebook
));

1715 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
ui
->
vbox
), ui->
nŸebook
);

1717 
vbox
 = 
	`√w_maö_∑ge
(
ui
);

1718 
	`gtk_døg_de°_£t
(
	`GTK_WIDGET
(
ui
->
wödow
), 
GTK_DEST_DEFAULT_ALL
, 
NULL
, 1, 
GDK_ACTION_COPY
);

1719 
	`gtk_døg_de°_add_uri_èrgës
(
	`GTK_WIDGET
(
ui
->
wödow
));

1720 
	`g_sig«l_c⁄√˘
(
ui
->
wödow
, "døg-d©a-ª˚ived", 
	`G_CALLBACK
(
døg_™d_dr›_ª˚ived
), ui);

1722 
	`gtk_nŸebook_≠≥nd_∑ge
(
	`GTK_NOTEBOOK
(
ui
->
nŸebook
), 
vbox
, 
	`gtk_œbñ_√w
("Main"));

1724 
	`gfio_ui_£tup_log
(
ui
);

1726 
	`gtk_widgë_show_Æl
(
ui
->
wödow
);

1727 
	}
}

1729 
	$maö
(
¨gc
, *
¨gv
[], *
ívp
[])

1731 i‡(
	`öôülize_fio
(
ívp
))

1733 i‡(
	`fio_öô_›ti⁄s
())

1736 
	`g›t_öô
();

1738 
	`mem£t
(&
maö_ui
, 0, (main_ui));

1739 
maö_ui
.
ge_hash
 = 
	`g_hash_èbÀ_√w
(
g_öt_hash
, 
g_öt_equÆ
);

1741 
	`öô_ui
(&
¨gc
, &
¨gv
, &
maö_ui
);

1743 
	`gdk_thªads_íãr
();

1744 
	`gtk_maö
();

1745 
	`gdk_thªads_Àave
();

1747 
	`g_hash_èbÀ_de°roy
(
maö_ui
.
ge_hash
);

1749 
	`g›t_exô
();

1751 
	}
}

	@/home/terekhov/tmp/fio/fio/gfio.h

1 #i‚de‡
GFIO_H


2 
	#GFIO_H


	)

4 
	~<gtk/gtk.h
>

6 
	~"gcom∑t.h
"

7 
	~"°©.h
"

8 
	~"thªad_›ti⁄s.h
"

9 
	~"ghñ≥rs.h
"

10 
	~"gøph.h
"

12 
	s¥obe_widgë
 {

13 
GtkWidgë
 *
	mho°«me
;

14 
GtkWidgë
 *
	mos
;

15 
GtkWidgë
 *
	m¨ch
;

16 
GtkWidgë
 *
	mfio_vî
;

19 
	sëa_widgë
 {

20 
GtkWidgë
 *
	m«mes
;

21 
mu…ôext_widgë
 
	miŸy≥
;

22 
mu…ôext_widgë
 
	mbs
;

23 
mu…ôext_widgë
 
	mi€ngöe
;

24 
mu…ôext_widgë
 
	miodïth
;

25 
GtkWidgë
 *
	mjobs
;

26 
GtkWidgë
 *
	mfûes
;

27 
GtkWidgë
 *
	mªad_bw
;

28 
GtkWidgë
 *
	mªad_i›s
;

29 
GtkWidgë
 *
	m¸_bw
;

30 
GtkWidgë
 *
	m¸_i›s
;

31 
GtkWidgë
 *
	mwrôe_bw
;

32 
GtkWidgë
 *
	mwrôe_i›s
;

33 
GtkWidgë
 *
	mcw_bw
;

34 
GtkWidgë
 *
	mcw_i›s
;

35 
GtkWidgë
 *
	måim_bw
;

36 
GtkWidgë
 *
	måim_i›s
;

39 
	sgfio_gøphs
 {

40 
	#DRAWING_AREA_XDIM
 1000

	)

41 
	#DRAWING_AREA_YDIM
 400

	)

42 
GtkWidgë
 *
	mdøwög_¨ó
;

43 
gøph
 *
	mi›s_gøph
;

44 
gøph_œbñ_t
 
	mªad_i›s
;

45 
gøph_œbñ_t
 
	mwrôe_i›s
;

46 
gøph_œbñ_t
 
	måim_i›s
;

47 
gøph
 *
	mb™dwidth_gøph
;

48 
gøph_œbñ_t
 
	mªad_bw
;

49 
gøph_œbñ_t
 
	mwrôe_bw
;

50 
gøph_œbñ_t
 
	måim_bw
;

56 
	sgui
 {

57 
GtkUIM™agî
 *
	muim™agî
;

58 
GtkRe˚¡M™agî
 *
	mª˚¡m™agî
;

59 
GtkA˘i⁄Group
 *
	ma˘i⁄group
;

60 
guöt
 
	mª˚¡_ui_id
;

61 
GtkWidgë
 *
	mmíu
;

62 
GtkWidgë
 *
	mwödow
;

63 
GtkWidgë
 *
	mvbox
;

64 
GtkWidgë
 *
	mthªad_°©us_pb
;

65 
GtkWidgë
 *
	mbuâ⁄box
;

66 
GtkWidgë
 *
	mnŸebook
;

67 
GtkWidgë
 *
	mîr‹_öfo_b¨
;

68 
GtkWidgë
 *
	mîr‹_œbñ
;

69 
GtkLi°St‹e
 *
	mlog_modñ
;

70 
GtkWidgë
 *
	mlog_åì
;

71 
GtkWidgë
 *
	mlog_võw
;

72 
gfio_gøphs
 
	mgøphs
;

73 
¥obe_widgë
 
	m¥obe
;

74 
ëa_widgë
 
	mëa
;

75 
±hªad_t
 
	m£rvî_t
;

77 
±hªad_t
 
	mt
;

78 
	mh™dÀr_ru¬ög
;

80 
GHashTabÀ
 *
	mge_hash
;

81 } 
	gmaö_ui
;

84 
	mGE_STATE_NEW
 = 1,

85 
	mGE_STATE_CONNECTED
,

86 
	mGE_STATE_JOB_SENT
,

87 
	mGE_STATE_JOB_STARTED
,

88 
	mGE_STATE_JOB_RUNNING
,

89 
	mGE_STATE_JOB_DONE
,

93 
	mGFIO_BUTTON_CONNECT
 = 0,

94 
	mGFIO_BUTTON_SEND
,

95 
	mGFIO_BUTTON_START
,

96 
	mGFIO_BUTTON_NR
,

102 
	sgui_íåy
 {

103 
gui
 *
	mui
;

105 
GtkWidgë
 *
	mvbox
;

106 
GtkWidgë
 *
	mjob_nŸebook
;

107 
GtkWidgë
 *
	mthªad_°©us_pb
;

108 
GtkWidgë
 *
	mbuâ⁄box
;

109 
GtkWidgë
 *
	mbuâ⁄
[
GFIO_BUTTON_NR
];

110 
GtkWidgë
 *
	mnŸebook
;

111 
GtkWidgë
 *
	mîr‹_öfo_b¨
;

112 
GtkWidgë
 *
	mîr‹_œbñ
;

113 
GtkWidgë
 *
	mªsu…s_wödow
;

114 
GtkWidgë
 *
	mªsu…s_nŸebook
;

115 
GtkUIM™agî
 *
	mªsu…s_uim™agî
;

116 
GtkWidgë
 *
	mªsu…s_míu
;

117 
GtkWidgë
 *
	mdisk_utû_vbox
;

118 
GtkLi°St‹e
 *
	mlog_modñ
;

119 
GtkWidgë
 *
	mlog_åì
;

120 
GtkWidgë
 *
	mlog_võw
;

121 
gfio_gøphs
 
	mgøphs
;

122 
¥obe_widgë
 
	m¥obe
;

123 
ëa_widgë
 
	mëa
;

124 
GtkWidgë
 *
	m∑ge_œbñ
;

125 
göt
 
	m∑ge_num
;

126 
	m°©e
;

128 
gøph
 *
	m˛©_gøph
;

129 
gøph
 *
	mœt_buckë_gøph
;

131 
gfio_˛õ¡
 *
	m˛õ¡
;

132 *
	mjob_fûe
;

133 *
	mho°
;

134 
	mp‹t
;

135 
	mty≥
;

136 
	m£rvî_°¨t
;

139 
	síd_ªsu…s
 {

140 
group_run_°©s
 
	mgs
;

141 
thªad_°©
 
	mts
;

144 
	sgfio_˛õ¡_›ti⁄s
 {

145 
Êi°_hód
 
	mli°
;

146 
thªad_›ti⁄s
 
	mo
;

149 
	sgfio_˛õ¡
 {

150 
gui_íåy
 *
	mge
;

151 
fio_˛õ¡
 *
	m˛õ¡
;

152 
GtkWidgë
 *
	mîr_íåy
;

153 
uöt32_t
 
	m˛õ¡_˝us
;

154 
uöt64_t
 
	m˛õ¡_Êags
;

156 
Êi°_hód
 
	mo_li°
;

157 
	mo_li°_ƒ
;

159 
íd_ªsu…s
 *
	mªsu…s
;

160 
	mƒ_ªsu…s
;

162 
uöt32_t
 
	mupd©e_job_°©us
;

163 vﬁ©ûê
uöt32_t
 
	mupd©e_job_d⁄e
;

165 
cmd_du_pdu
 *
	mdu
;

166 
	mƒ_du
;

169 
	#GFIO_MIME
 "ãxt/fio"

	)

171 
gfio_võw_log
(
gui
 *
ui
);

172 
gfio_£t_°©e
(
gui_íåy
 *
ge
, 
°©e
);

173 
˛ór_ge_ui_öfo
(
gui_íåy
 *
ge
);

175 c⁄° *
gfio_gøph_f⁄t
;

176 
GdkCﬁ‹
 
gfio_cﬁ‹_whôe
;

177 
GdkCﬁ‹
 
gfio_cﬁ‹_lightyñlow
;

	@/home/terekhov/tmp/fio/fio/ghelpers.c

1 
	~<°dlib.h
>

2 
	~<°rög.h
>

3 
	~<gtk/gtk.h
>

5 
	~"gcom∑t.h
"

6 
	~"ghñ≥rs.h
"

8 
GtkWidgë
 *
	$√w_combo_íåy_ö_‰ame
(
GtkWidgë
 *
box
, c⁄° *
œbñ
)

10 
GtkWidgë
 *
íåy
, *
‰ame
;

12 
‰ame
 = 
	`gtk_‰ame_√w
(
œbñ
);

13 
íåy
 = 
	`gtk_combo_box_ãxt_√w
();

14 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
box
), 
‰ame
, 
TRUE
, TRUE, 3);

15 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
íåy
);

17  
íåy
;

18 
	}
}

20 
GtkWidgë
 *
	$√w_öfo_íåy_ö_‰ame
(
GtkWidgë
 *
box
, c⁄° *
œbñ
)

22 
GtkWidgë
 *
íåy
, *
‰ame
;

24 
‰ame
 = 
	`gtk_‰ame_√w
(
œbñ
);

25 
íåy
 = 
	`gtk_íåy_√w
();

26 
	`gtk_edôabÀ_£t_edôabÀ
(
	`GTK_EDITABLE
(
íåy
), 0);

27 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
box
), 
‰ame
, 
TRUE
, TRUE, 3);

28 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
íåy
);

30  
íåy
;

31 
	}
}

33 
	$fûl_cﬁ‹_‰om_rgb
(
GdkCﬁ‹
 *
c
, 
gÊﬂt
 
r
, gÊﬂà
g
, gÊﬂà
b
)

35 
göt
 
R
, 
G
, 
B
;

36 
gch¨
 
tmp
[8];

38 
	`mem£t
(
c
, 0, (*c));

39 
R
 = 
r
 * 255;

40 
G
 = 
g
 * 255;

41 
B
 = 
b
 * 255;

42 
	`¢¥ötf
(
tmp
, —mp), "#%02x%02x%02x", 
R
, 
G
, 
B
);

43 
	`gdk_cﬁ‹_∑r£
(
tmp
, 
c
);

44 
	}
}

46 
GtkWidgë
 *
	$√w_öfo_íåy_ö_‰ame_rgb
(
GtkWidgë
 *
box
, c⁄° *
œbñ
,

47 
gÊﬂt
 
r
, gÊﬂà
g
, gÊﬂà
b
)

49 
GtkWidgë
 *
íåy
;

50 
GdkCﬁ‹
 
c
;

52 
íåy
 = 
	`√w_öfo_íåy_ö_‰ame
(
box
, 
œbñ
);

53 
	`fûl_cﬁ‹_‰om_rgb
(&
c
, 
r
, 
g
, 
b
);

54 
	`gtk_widgë_modify_ãxt
(
íåy
, 
GTK_STATE_NORMAL
, &
c
);

55  
íåy
;

56 
	}
}

58 
GtkWidgë
 *
	$√w_öfo_œbñ_ö_‰ame
(
GtkWidgë
 *
box
, c⁄° *
œbñ
)

60 
GtkWidgë
 *
œbñ_widgë
;

61 
GtkWidgë
 *
‰ame
;

63 
‰ame
 = 
	`gtk_‰ame_√w
(
œbñ
);

64 
œbñ_widgë
 = 
	`gtk_œbñ_√w
(
NULL
);

65 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
box
), 
‰ame
, 
TRUE
, TRUE, 3);

66 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
œbñ_widgë
);

68  
œbñ_widgë
;

69 
	}
}

71 
GtkWidgë
 *
	$¸óã_•öbuâ⁄
(
GtkWidgë
 *
hbox
, 
mö
, 
max
, 
defvÆ
)

73 
GtkWidgë
 *
buâ⁄
, *
box
;

75 
box
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

76 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
hbox
), 
box
);

78 
buâ⁄
 = 
	`gtk_•ö_buâ⁄_√w_wôh_ønge
(
mö
, 
max
, 1.0);

79 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
box
), 
buâ⁄
, 
TRUE
, TRUE, 0);

81 
	`gtk_•ö_buâ⁄_£t_upd©e_pﬁicy
(
	`GTK_SPIN_BUTTON
(
buâ⁄
), 
GTK_UPDATE_IF_VALID
);

82 
	`gtk_•ö_buâ⁄_£t_vÆue
(
	`GTK_SPIN_BUTTON
(
buâ⁄
), 
defvÆ
);

84  
buâ⁄
;

85 
	}
}

87 
	$œbñ_£t_öt_vÆue
(
GtkWidgë
 *
íåy
, 
vÆ
)

89 
tmp
[80];

91 
	`•rötf
(
tmp
, "%u", 
vÆ
);

92 
	`gtk_œbñ_£t_ãxt
(
	`GTK_LABEL
(
íåy
), 
tmp
);

93 
	}
}

95 
	$íåy_£t_öt_vÆue
(
GtkWidgë
 *
íåy
, 
vÆ
)

97 
tmp
[80];

99 
	`•rötf
(
tmp
, "%u", 
vÆ
);

100 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
íåy
), 
tmp
);

101 
	}
}

103 
GtkTªeVõwCﬁumn
 *
	$åì_võw_cﬁumn
(
GtkWidgë
 *
åì_võw
, 
ödex
, c⁄° *
tôÀ
, 
Êags
)

105 
GtkCñlRídîî
 *
ªndîî
;

106 
GtkTªeVõwCﬁumn
 *
cﬁ
;

107 
xÆign
 = 0.0;

108 
P™goAlignmít
 
Æign
;

109 
gboﬁón
 
visibÀ
;

111 
Æign
 = (
Êags
 & 
ALIGN_LEFT
Ë? 
PANGO_ALIGN_LEFT
 :

112 (
Êags
 & 
ALIGN_RIGHT
Ë? 
PANGO_ALIGN_RIGHT
 :

113 
PANGO_ALIGN_CENTER
;

114 
visibÀ
 = !(
Êags
 & 
INVISIBLE
);

116 
ªndîî
 = 
	`gtk_˚Œ_ªndîî_ãxt_√w
();

117 
cﬁ
 = 
	`gtk_åì_võw_cﬁumn_√w
();

119 
	`gtk_åì_võw_cﬁumn_£t_tôÀ
(
cﬁ
, 
tôÀ
);

120 i‡(!(
Êags
 & 
UNSORTABLE
))

121 
	`gtk_åì_võw_cﬁumn_£t_s‹t_cﬁumn_id
(
cﬁ
, 
ödex
);

122 
	`gtk_åì_võw_cﬁumn_£t_ªsizabÀ
(
cﬁ
, 
TRUE
);

123 
	`gtk_åì_võw_cﬁumn_∑ck_°¨t
(
cﬁ
, 
ªndîî
, 
TRUE
);

124 
	`gtk_åì_võw_cﬁumn_£t_ex∑nd
(
cﬁ
, 
TRUE
);

125 
	`gtk_åì_võw_cﬁumn_add_©åibuã
(
cﬁ
, 
ªndîî
, "ãxt", 
ödex
);

126 
	`g_obje˘_£t
(
	`G_OBJECT
(
ªndîî
), "Æignmít", 
Æign
, 
NULL
);

127 
Æign
) {

128 
PANGO_ALIGN_LEFT
:

129 
xÆign
 = 0.0;

131 
PANGO_ALIGN_CENTER
:

132 
xÆign
 = 0.5;

134 
PANGO_ALIGN_RIGHT
:

135 
xÆign
 = 1.0;

138 
	`gtk_˚Œ_ªndîî_£t_Æignmít
(
	`GTK_CELL_RENDERER
(
ªndîî
), 
xÆign
, 0.5);

139 
	`gtk_åì_võw_cﬁumn_£t_visibÀ
(
cﬁ
, 
visibÀ
);

140 
	`gtk_åì_võw_≠≥nd_cﬁumn
(
	`GTK_TREE_VIEW
(
åì_võw
), 
cﬁ
);

141  
cﬁ
;

142 
	}
}

144 
	$mu…ôext_add_íåy
(
mu…ôext_widgë
 *
mt
, c⁄° *
ãxt
)

146 
mt
->
ãxt
 = 
	`ªÆloc
(mt->ãxt, (mt->
max_ãxt
 + 1) * (*));

147 
mt
->
ãxt
[mt->
max_ãxt
] = 
	`°rdup
(text);

148 
mt
->
max_ãxt
++;

149 
	}
}

151 
	$mu…ôext_£t_íåy
(
mu…ôext_widgë
 *
mt
, 
ödex
)

153 i‡(
ödex
 >
mt
->
max_ãxt
)

155 i‡(!
mt
->
ãxt
 || !mt->ãxt[
ödex
])

158 
mt
->
cur_ãxt
 = 
ödex
;

159 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
mt
->
íåy
), mt->
ãxt
[
ödex
]);

160 
	}
}

162 
	$mu…ôext_upd©e_íåy
(
mu…ôext_widgë
 *
mt
, 
ödex
,

163 c⁄° *
ãxt
)

165 i‡(!
mt
->
ãxt
)

168 i‡(
mt
->
ãxt
[
ödex
])

169 
	`‰ì
(
mt
->
ãxt
[
ödex
]);

171 
mt
->
ãxt
[
ödex
] = 
	`°rdup
(text);

172 i‡(
mt
->
cur_ãxt
 =
ödex
)

173 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
mt
->
íåy
), mt->
ãxt
[
ödex
]);

174 
	}
}

176 
	$mu…ôext_‰ì
(
mu…ôext_widgë
 *
mt
)

178 
i
;

180 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
mt
->
íåy
), "");

182 
i
 = 0; i < 
mt
->
max_ãxt
; i++) {

183 i‡(
mt
->
ãxt
[
i
])

184 
	`‰ì
(
mt
->
ãxt
[
i
]);

187 
	`‰ì
(
mt
->
ãxt
);

188 
mt
->
cur_ãxt
 = -1;

189 
mt
->
max_ãxt
 = 0;

190 
	}
}

192 
GtkWidgë
 *
	$gë_s¸ﬁÀd_wödow
(
göt
 
b‹dî_width
)

194 
GtkWidgë
 *
s¸ﬁl
;

196 
s¸ﬁl
 = 
	`gtk_s¸ﬁÀd_wödow_√w
(
NULL
, NULL);

197 
	`gtk_c⁄èöî_£t_b‹dî_width
(
	`GTK_CONTAINER
(
s¸ﬁl
), 
b‹dî_width
);

198 
	`gtk_s¸ﬁÀd_wödow_£t_pﬁicy
(
	`GTK_SCROLLED_WINDOW
(
s¸ﬁl
), 
GTK_POLICY_AUTOMATIC
, GTK_POLICY_AUTOMATIC);

200  
s¸ﬁl
;

201 
	}
}

	@/home/terekhov/tmp/fio/fio/ghelpers.h

1 #i‚de‡
GFIO_HELPERS_H


2 
	#GFIO_HELPERS_H


	)

4 
GtkWidgë
 *
√w_combo_íåy_ö_‰ame
(GtkWidgë *
box
, c⁄° *
œbñ
);

5 
GtkWidgë
 *
√w_öfo_íåy_ö_‰ame
(GtkWidgë *
box
, c⁄° *
œbñ
);

6 
GtkWidgë
 *
√w_öfo_œbñ_ö_‰ame
(GtkWidgë *
box
, c⁄° *
œbñ
);

7 
GtkWidgë
 *
√w_öfo_íåy_ö_‰ame_rgb
(GtkWidgë *
box
, c⁄° *
œbñ
,

8 
gÊﬂt
 
r
, gÊﬂà
g
, gÊﬂà
b
);

9 
GtkWidgë
 *
¸óã_•öbuâ⁄
(GtkWidgë *
hbox
, 
mö
, 
max
, 
defvÆ
);

10 
œbñ_£t_öt_vÆue
(
GtkWidgë
 *
íåy
, 
vÆ
);

11 
íåy_£t_öt_vÆue
(
GtkWidgë
 *
íåy
, 
vÆ
);

13 
GtkWidgë
 *
gë_s¸ﬁÀd_wödow
(
göt
 
b‹dî_width
);

15 
	smu…ôext_widgë
 {

16 
GtkWidgë
 *
	míåy
;

17 **
	mãxt
;

18 
	mcur_ãxt
;

19 
	mmax_ãxt
;

22 
mu…ôext_add_íåy
(
mu…ôext_widgë
 *
mt
, c⁄° *
ãxt
);

23 
mu…ôext_£t_íåy
(
mu…ôext_widgë
 *
mt
, 
ödex
);

24 
mu…ôext_upd©e_íåy
(
mu…ôext_widgë
 *
mt
, 
ödex
,

25 c⁄° *
ãxt
);

26 
mu…ôext_‰ì
(
mu…ôext_widgë
 *
mt
);

28 
	#ALIGN_LEFT
 1

	)

29 
	#ALIGN_RIGHT
 2

	)

30 
	#INVISIBLE
 4

	)

31 
	#UNSORTABLE
 8

	)

33 
GtkTªeVõwCﬁumn
 *
åì_võw_cﬁumn
(
GtkWidgë
 *
åì_võw
, 
ödex
, c⁄° *
tôÀ
, 
Êags
);

	@/home/terekhov/tmp/fio/fio/goptions.c

1 
	~<loˇÀ.h
>

2 
	~<mÆloc.h
>

3 
	~<°rög.h
>

5 
	~<glib.h
>

6 
	~<ˇúo.h
>

7 
	~<gtk/gtk.h
>

9 
	~"fio.h
"

10 
	~"gfio.h
"

11 
	~"ghñ≥rs.h
"

12 
	~"gîr‹.h
"

13 
	~"∑r£.h
"

15 
	sg›t
 {

16 
GtkWidgë
 *
	mbox
;

17 
	m›t_ödex
;

18 
	m›t_ty≥
;

19 
gul⁄g
 
	msig_h™dÀr
;

20 
g›t_job_võw
 *
	mgjv
;

21 
Êi°_hód
 
	mch™ged_li°
;

24 
	sg›t_combo
 {

25 
g›t
 
	mg›t
;

26 
GtkWidgë
 *
	mcombo
;

29 
	sg›t_öt
 {

30 
g›t
 
	mg›t
;

31 
	mœ°vÆ
;

32 
GtkWidgë
 *
	m•ö
;

35 
	sg›t_boﬁ
 {

36 
g›t
 
	mg›t
;

37 
GtkWidgë
 *
	mcheck
;

40 
	sg›t_°r
 {

41 
g›t
 
	mg›t
;

42 
GtkWidgë
 *
	míåy
;

45 
	sg›t_°r_vÆ
 {

46 
g›t
 
	mg›t
;

47 
GtkWidgë
 *
	m•ö
;

48 
GtkWidgë
 *
	mcombo
;

49 
	mmaxödex
;

52 
	#GOPT_RANGE_SPIN
 4

	)

54 
	sg›t_ønge
 {

55 
g›t
 
	mg›t
;

56 
GtkWidgë
 *
	m•ös
[
GOPT_RANGE_SPIN
];

59 
	sg›t_°r_mu…i
 {

60 
g›t
 
	mg›t
;

61 
GtkWidgë
 *
	mchecks
[
PARSE_MAX_VP
];

65 
	mGOPT_COMBO_INT
 = 1,

66 
	mGOPT_COMBO_STR
,

67 
	mGOPT_INT
,

68 
	mGOPT_BOOL
,

69 
	mGOPT_STR
,

70 
	mGOPT_STR_VAL
,

71 
	mGOPT_RANGE
,

72 
	mGOPT_STR_MULTI
,

75 
	sg›t_‰ame_widgë
 {

76 
GtkWidgë
 *
	mvbox
[2];

77 
	mƒ
;

80 
	sg›t_job_võw
 {

81 
g›t_‰ame_widgë
 
	mg_widgës
[
__FIO_OPT_G_NR
];

82 
GtkWidgë
 *
	mvboxes
[
__FIO_OPT_C_NR
];

83 
g›t
 *
	mg›ts
[
FIO_MAX_OPTS
];

84 
GtkWidgë
 *
	mdülog
;

85 
GtkWidgë
 *
	mjob_combo
;

86 
gfio_˛õ¡
 *
	m˛õ¡
;

87 
Êi°_hód
 
	mch™ged_li°
;

88 
thªad_›ti⁄s
 *
	mo
;

89 
	mö_job_swôch
;

92 
GNode
 *
	gg›t_dï_åì
;

94 
GtkWidgë
 *
	$g›t_gë_group_‰ame
(
g›t_job_võw
 *
gjv
,

95 
GtkWidgë
 *
box
, 
groupmask
)

97 
mask
, 
group
;

98 
›t_group
 *
og
;

99 
GtkWidgë
 *
‰ame
, *
hbox
;

100 
g›t_‰ame_widgë
 *
gfw
;

102 i‡(!
groupmask
)

105 
mask
 = 
groupmask
;

106 
og
 = 
	`›t_group_ˇt_‰om_mask
(&
mask
);

107 i‡(!
og
)

108  
NULL
;

110 
group
 = 
	`ffz
(~
groupmask
);

111 
gfw
 = &
gjv
->
g_widgës
[
group
];

112 i‡(!
gfw
->
vbox
[0]) {

113 
‰ame
 = 
	`gtk_‰ame_√w
(
og
->
«me
);

114 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
box
), 
‰ame
, 
FALSE
, FALSE, 3);

115 
hbox
 = 
	`gtk_hbox_√w
(
FALSE
, 0);

116 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
hbox
);

117 
gfw
->
vbox
[0] = 
	`gtk_vbox_√w
(
TRUE
, 5);

118 
gfw
->
vbox
[1] = 
	`gtk_vbox_√w
(
TRUE
, 5);

119 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
hbox
), 
gfw
->
vbox
[0], 
TRUE
, TRUE, 5);

120 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
hbox
), 
gfw
->
vbox
[1], 
TRUE
, TRUE, 5);

123 
hbox
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

124 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
gfw
->
vbox
[gfw->
ƒ
++ & 1]), 
hbox
, 
FALSE
, FALSE, 5);

125  
hbox
;

126 
	}
}

131 
	$g›t_£t_chûdªn_visibÀ
(
g›t_job_võw
 *
gjv
,

132 
fio_›ti⁄
 *
∑ª¡
,

133 
gboﬁón
 
visibÀ
)

135 
GNode
 *
chûd
, *
node
;

137 i‡(
∑ª¡
->
hide_⁄_£t
)

138 
visibÀ
 = !visible;

140 
node
 = 
	`g_node_föd
(
g›t_dï_åì
, 
G_IN_ORDER
, 
G_TRAVERSE_ALL
, 
∑ª¡
);

141 
chûd
 = 
	`g_node_fú°_chûd
(
node
);

142 
chûd
) {

143 
fio_›ti⁄
 *
o
 = 
chûd
->
d©a
;

144 
g›t
 *
g
 = 
o
->
gui_d©a
;

145 
GtkWidgë
 *
widgë
 = 
g
->
box
;

150 i‡(
	`g_node_n_chûdªn
(
chûd
))

151 
	`g›t_£t_chûdªn_visibÀ
(
gjv
, 
o
, 
visibÀ
);

153 
	`gtk_widgë_£t_£nsôive
(
widgë
, 
visibÀ
);

154 
chûd
 = 
	`g_node_√xt_siblög
(child);

156 
	}
}

158 
	$g›t_m¨k_ödex
(
g›t_job_võw
 *
gjv
, 
g›t
 *gopt,

159 
idx
, 
ty≥
)

161 
	`INIT_FLIST_HEAD
(&
g›t
->
ch™ged_li°
);

163 
	`as£π
(!
gjv
->
g›ts
[
idx
]);

164 
g›t
->
›t_ödex
 = 
idx
;

165 
g›t
->
›t_ty≥
 = 
ty≥
;

166 
g›t
->
gjv
 = gjv;

167 
gjv
->
g›ts
[
idx
] = 
g›t
;

168 
	}
}

170 
	$g›t_dülog_upd©e_≠∂y_buâ⁄
(
g›t_job_võw
 *
gjv
)

172 
GtkDülog
 *
dülog
 = 
	`GTK_DIALOG
(
gjv
->dialog);

173 
gboﬁón
 
£t
;

175 
£t
 = !
	`Êi°_em±y
(&
gjv
->
ch™ged_li°
);

176 
	`gtk_dülog_£t_ª•⁄£_£nsôive
(
dülog
, 
GTK_RESPONSE_APPLY
, 
£t
);

178 i‡(
£t
) {

179 
	`gtk_widgë_£t_£nsôive
(
gjv
->
job_combo
, 0);

180 
	`gtk_widgë_£t_toﬁtù_ãxt
(
gjv
->
job_combo
, "Apply option changes before switchingÅoáÇew job");

182 
	`gtk_widgë_£t_£nsôive
(
gjv
->
job_combo
, 1);

183 
	`gtk_widgë_£t_toﬁtù_ãxt
(
gjv
->
job_combo
, "Change current job");

185 
	}
}

187 
	$g›t_ch™ged
(
g›t
 *gopt)

189 
g›t_job_võw
 *
gjv
 = 
g›t
->gjv;

191 i‡(
gjv
->
ö_job_swôch
)

198 i‡(
	`Êi°_em±y
(&
g›t
->
ch™ged_li°
)) {

199 
	`Êi°_add_èû
(&
g›t
->
ch™ged_li°
, &
gjv
->changed_list);

200 
	`g›t_dülog_upd©e_≠∂y_buâ⁄
(
gjv
);

202 
	}
}

204 
	$g›t_°r_ch™ged
(
GtkE¡ry
 *
íåy
, 
gpoöãr
 
d©a
)

206 
g›t_°r
 *
s
 = (g›t_°∏*Ë
d©a
;

207 
fio_›ti⁄
 *
o
 = &
fio_›ti⁄s
[
s
->
g›t
.
›t_ödex
];

208 c⁄° 
gch¨
 *
ãxt
;

209 
£t
;

211 
	`g›t_ch™ged
(&
s
->
g›t
);

213 
ãxt
 = 
	`gtk_íåy_gë_ãxt
(
	`GTK_ENTRY
(
s
->
íåy
));

214 
£t
 = 
	`°rcmp
(
ãxt
, "") != 0;

216 
	`g›t_£t_chûdªn_visibÀ
(
s
->
g›t
.
gjv
, 
o
, 
£t
);

217 
	}
}

219 
	$g›t_°r_de°roy
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

221 
g›t_°r
 *
s
 = (g›t_°∏*Ë
d©a
;

223 
	`‰ì
(
s
);

224 
	`gtk_widgë_de°roy
(
w
);

225 
	}
}

227 
	$g›t_°r_°‹e_£t_vÆ
(
g›t_°r
 *
s
, c⁄° *
ãxt
)

229 i‡(
ãxt
)

230 
	`gtk_íåy_£t_ãxt
(
	`GTK_ENTRY
(
s
->
íåy
), 
ãxt
);

231 
	}
}

233 
g›t
 *
	$g›t_√w_°r_°‹e
(
g›t_job_võw
 *
gjv
,

234 
fio_›ti⁄
 *
o
, c⁄° *
ãxt
,

235 
idx
)

237 
g›t_°r
 *
s
;

238 
GtkWidgë
 *
œbñ
;

240 
s
 = 
	`ˇŒoc
(1, (*s));

242 
s
->
g›t
.
box
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

243 i‡(!
o
->
 ame
)

244 
œbñ
 = 
	`gtk_œbñ_√w
(
o
->
«me
);

246 
œbñ
 = 
	`gtk_œbñ_√w
(
o
->
 ame
);

248 
s
->
íåy
 = 
	`gtk_íåy_√w
();

249 
	`g›t_m¨k_ödex
(
gjv
, &
s
->
g›t
, 
idx
, 
GOPT_STR
);

250 
	`gtk_edôabÀ_£t_edôabÀ
(
	`GTK_EDITABLE
(
s
->
íåy
), 1);

252 i‡(
ãxt
)

253 
	`g›t_°r_°‹e_£t_vÆ
(
s
, 
ãxt
);

254 i‡(
o
->
def
)

255 
	`g›t_°r_°‹e_£t_vÆ
(
s
, 
o
->
def
);

257 
s
->
g›t
.
sig_h™dÀr
 = 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(s->
íåy
), "ch™ged", 
	`G_CALLBACK
(
g›t_°r_ch™ged
), s);

258 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
s
->
íåy
), "de°roy", 
	`G_CALLBACK
(
g›t_°r_de°roy
), s);

260 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
s
->
g›t
.
box
), s->
íåy
, 
FALSE
, FALSE, 0);

261 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
s
->
g›t
.
box
), 
œbñ
, 
FALSE
, FALSE, 0);

262  &
s
->
g›t
;

263 
	}
}

265 
	$g›t_combo_ch™ged
(
GtkComboBox
 *
box
, 
gpoöãr
 
d©a
)

267 
g›t_combo
 *
c
 = (g›t_combÿ*Ë
d©a
;

268 
fio_›ti⁄
 *
o
 = &
fio_›ti⁄s
[
c
->
g›t
.
›t_ödex
];

269 
ödex
;

271 
	`g›t_ch™ged
(&
c
->
g›t
);

273 
ödex
 = 
	`gtk_combo_box_gë_a˘ive
(
	`GTK_COMBO_BOX
(
c
->
combo
));

275 
	`g›t_£t_chûdªn_visibÀ
(
c
->
g›t
.
gjv
, 
o
, 
ödex
);

276 
	}
}

278 
	$g›t_combo_de°roy
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

280 
g›t_combo
 *
c
 = (g›t_combÿ*Ë
d©a
;

282 
	`‰ì
(
c
);

283 
	`gtk_widgë_de°roy
(
w
);

284 
	}
}

286 
g›t_combo
 *
	$__g›t_√w_combo
(
g›t_job_võw
 *
gjv
,

287 
fio_›ti⁄
 *
o
,

288 
idx
, 
ty≥
)

290 
g›t_combo
 *
c
;

291 
GtkWidgë
 *
œbñ
;

293 
c
 = 
	`ˇŒoc
(1, (*c));

295 
c
->
g›t
.
box
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

296 i‡(!
o
->
 ame
)

297 
œbñ
 = 
	`gtk_œbñ_√w
(
o
->
«me
);

299 
œbñ
 = 
	`gtk_œbñ_√w
(
o
->
 ame
);

301 
c
->
combo
 = 
	`gtk_combo_box_ãxt_√w
();

302 
	`g›t_m¨k_ödex
(
gjv
, &
c
->
g›t
, 
idx
, 
ty≥
);

303 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
c
->
combo
), "de°roy", 
	`G_CALLBACK
(
g›t_combo_de°roy
), c);

305 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
c
->
g›t
.
box
), c->
combo
, 
FALSE
, FALSE, 0);

306 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
c
->
g›t
.
box
), 
œbñ
, 
FALSE
, FALSE, 0);

308  
c
;

309 
	}
}

311 
	$g›t_combo_°r_£t_vÆ
(
g›t_combo
 *
c
, c⁄° *
ãxt
)

313 
fio_›ti⁄
 *
o
 = &
fio_›ti⁄s
[
c
->
g›t
.
›t_ödex
];

314 
vÆue_∑ú
 *
vp
;

315 
i
;

317 
i
 = 0;

318 
vp
 = &
o
->
posvÆ
[0];

319 
vp
->
ivÆ
) {

320 i‡(!
	`°rcmp
(
vp
->
ivÆ
, 
ãxt
)) {

321 
	`gtk_combo_box_£t_a˘ive
(
	`GTK_COMBO_BOX
(
c
->
combo
), 
i
);

324 
vp
++;

325 
i
++;

327 
	}
}

329 
g›t
 *
	$g›t_√w_combo_°r
(
g›t_job_võw
 *
gjv
,

330 
fio_›ti⁄
 *
o
, c⁄° *
ãxt
,

331 
idx
)

333 
g›t_combo
 *
c
;

334 
vÆue_∑ú
 *
vp
;

335 
i
, 
a˘ive
 = 0;

337 
c
 = 
	`__g›t_√w_combo
(
gjv
, 
o
, 
idx
, 
GOPT_COMBO_STR
);

339 
i
 = 0;

340 
vp
 = &
o
->
posvÆ
[0];

341 
vp
->
ivÆ
) {

342 
	`gtk_combo_box_ãxt_≠≥nd_ãxt
(
	`GTK_COMBO_BOX_TEXT
(
c
->
combo
), 
vp
->
ivÆ
);

343 i‡(
o
->
def
 && !
	`°rcmp
(
vp
->
ivÆ
, o->def))

344 
a˘ive
 = 
i
;

345 
vp
++;

346 
i
++;

349 
	`gtk_combo_box_£t_a˘ive
(
	`GTK_COMBO_BOX
(
c
->
combo
), 
a˘ive
);

350 i‡(
ãxt
)

351 
	`g›t_combo_°r_£t_vÆ
(
c
, 
ãxt
);

352 
c
->
g›t
.
sig_h™dÀr
 = 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(c->
combo
), "ch™ged", 
	`G_CALLBACK
(
g›t_combo_ch™ged
), c);

353  &
c
->
g›t
;

354 
	}
}

356 
	$g›t_combo_öt_£t_vÆ
(
g›t_combo
 *
c
, 
ù
)

358 
fio_›ti⁄
 *
o
 = &
fio_›ti⁄s
[
c
->
g›t
.
›t_ödex
];

359 
vÆue_∑ú
 *
vp
;

360 
i
;

362 
i
 = 0;

363 
vp
 = &
o
->
posvÆ
[0];

364 
vp
->
ivÆ
) {

365 i‡(
vp
->
ovÆ
 =
ù
) {

366 
	`gtk_combo_box_£t_a˘ive
(
	`GTK_COMBO_BOX
(
c
->
combo
), 
i
);

369 
vp
++;

370 
i
++;

372 
	}
}

374 
g›t
 *
	$g›t_√w_combo_öt
(
g›t_job_võw
 *
gjv
,

375 
fio_›ti⁄
 *
o
, *
ù
,

376 
idx
)

378 
g›t_combo
 *
c
;

379 
vÆue_∑ú
 *
vp
;

380 
i
, 
a˘ive
 = 0;

382 
c
 = 
	`__g›t_√w_combo
(
gjv
, 
o
, 
idx
, 
GOPT_COMBO_INT
);

384 
i
 = 0;

385 
vp
 = &
o
->
posvÆ
[0];

386 
vp
->
ivÆ
) {

387 
	`gtk_combo_box_ãxt_≠≥nd_ãxt
(
	`GTK_COMBO_BOX_TEXT
(
c
->
combo
), 
vp
->
ivÆ
);

388 i‡(
ù
 && 
vp
->
ovÆ
 == *ip)

389 
a˘ive
 = 
i
;

390 
vp
++;

391 
i
++;

394 
	`gtk_combo_box_£t_a˘ive
(
	`GTK_COMBO_BOX
(
c
->
combo
), 
a˘ive
);

395 i‡(
ù
)

396 
	`g›t_combo_öt_£t_vÆ
(
c
, *
ù
);

397 
c
->
g›t
.
sig_h™dÀr
 = 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(c->
combo
), "ch™ged", 
	`G_CALLBACK
(
g›t_combo_ch™ged
), c);

398  &
c
->
g›t
;

399 
	}
}

401 
	$g›t_°r_mu…i_toggÀd
(
GtkToggÀBuâ⁄
 *
buâ⁄
, 
gpoöãr
 
d©a
)

403 
g›t_°r_mu…i
 *
m
 = (g›t_°r_mu…ò*Ë
d©a
;

405 
	`g›t_ch™ged
(&
m
->
g›t
);

406 
	}
}

408 
	$g›t_°r_mu…i_de°roy
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

410 
g›t_°r_mu…i
 *
m
 = (g›t_°r_mu…ò*Ë
d©a
;

412 
	`‰ì
(
m
);

413 
	`gtk_widgë_de°roy
(
w
);

414 
	}
}

416 
	$g›t_°r_mu…i_£t_vÆ
(
g›t_°r_mu…i
 *
m
, 
vÆ
)

418 
	}
}

420 
g›t
 *
	$g›t_√w_°r_mu…i
(
g›t_job_võw
 *
gjv
,

421 
fio_›ti⁄
 *
o
, 
idx
)

423 
g›t_°r_mu…i
 *
m
;

424 
vÆue_∑ú
 *
vp
;

425 
GtkWidgë
 *
‰ame
, *
hbox
;

426 
i
;

428 
m
 = 
	`ˇŒoc
(1, (*m));

429 
m
->
g›t
.
box
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

430 
	`g›t_m¨k_ödex
(
gjv
, &
m
->
g›t
, 
idx
, 
GOPT_STR_MULTI
);

432 i‡(!
o
->
 ame
)

433 
‰ame
 = 
	`gtk_‰ame_√w
(
o
->
«me
);

435 
‰ame
 = 
	`gtk_‰ame_√w
(
o
->
 ame
);

436 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
m
->
g›t
.
box
), 
‰ame
, 
FALSE
, FALSE, 3);

438 
hbox
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

439 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame
), 
hbox
);

441 
i
 = 0;

442 
vp
 = &
o
->
posvÆ
[0];

443 
vp
->
ivÆ
) {

444 
m
->
checks
[
i
] = 
	`gtk_check_buâ⁄_√w_wôh_œbñ
(
vp
->
ivÆ
);

445 
	`gtk_widgë_£t_toﬁtù_ãxt
(
m
->
checks
[
i
], 
vp
->
hñp
);

446 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
hbox
), 
m
->
checks
[
i
], 
FALSE
, FALSE, 3);

447 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
m
->
checks
[
i
]), "toggÀd", 
	`G_CALLBACK
(
g›t_°r_mu…i_toggÀd
), m);

448 
vp
++;

449 
i
++;

452 
	`g›t_°r_mu…i_£t_vÆ
(
m
, 0);

453 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
m
->
g›t
.
box
), "de°roy", 
	`G_CALLBACK
(
g›t_°r_mu…i_de°roy
), m);

454  &
m
->
g›t
;

455 
	}
}

457 
	$g›t_öt_ch™ged
(
GtkSpöBuâ⁄
 *
•ö
, 
gpoöãr
 
d©a
)

459 
g›t_öt
 *
i
 = (g›t_öà*Ë
d©a
;

460 
fio_›ti⁄
 *
o
 = &
fio_›ti⁄s
[
i
->
g›t
.
›t_ödex
];

461 
GtkAdju°mít
 *
adj
;

462 
vÆue
, 
dñè
;

464 
	`g›t_ch™ged
(&
i
->
g›t
);

466 
adj
 = 
	`gtk_•ö_buâ⁄_gë_adju°mít
(
•ö
);

467 
vÆue
 = 
	`gtk_adju°mít_gë_vÆue
(
adj
);

468 
dñè
 = 
vÆue
 - 
i
->
œ°vÆ
;

469 
i
->
œ°vÆ
 = 
vÆue
;

471 i‡(
o
->
öv_›t
) {

472 
g›t
 *
b_öv
 = 
o
->
öv_›t
->
gui_d©a
;

473 
g›t_öt
 *
i_öv
 = 
	`c⁄èöî_of
(
b_öv
, g›t_öt, 
g›t
);

474 
cur_vÆ
;

476 
	`as£π
(
o
->
ty≥
 =o->
öv_›t
->type);

478 
cur_vÆ
 = 
	`gtk_•ö_buâ⁄_gë_vÆue
(
	`GTK_SPIN_BUTTON
(
i_öv
->
•ö
));

479 
cur_vÆ
 -
dñè
;

480 
	`g_sig«l_h™dÀr_block
(
	`G_OBJECT
(
i_öv
->
•ö
), i_öv->
g›t
.
sig_h™dÀr
);

481 
	`gtk_•ö_buâ⁄_£t_vÆue
(
	`GTK_SPIN_BUTTON
(
i_öv
->
•ö
), 
cur_vÆ
);

482 
	`g_sig«l_h™dÀr_unblock
(
	`G_OBJECT
(
i_öv
->
•ö
), i_öv->
g›t
.
sig_h™dÀr
);

484 
	}
}

486 
	$g›t_öt_de°roy
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

488 
g›t_öt
 *
i
 = (g›t_öà*Ë
d©a
;

490 
	`‰ì
(
i
);

491 
	`gtk_widgë_de°roy
(
w
);

492 
	}
}

494 
	$g›t_öt_£t_vÆ
(
g›t_öt
 *
i
, 
p
)

496 
	`gtk_•ö_buâ⁄_£t_vÆue
(
	`GTK_SPIN_BUTTON
(
i
->
•ö
), 
p
);

497 
i
->
œ°vÆ
 = 
p
;

498 
	}
}

500 
g›t_öt
 *
	$__g›t_√w_öt
(
g›t_job_võw
 *
gjv
,

501 
fio_›ti⁄
 *
o
,

502 *
p
, 
idx
)

504 
defvÆ
;

505 
g›t_öt
 *
i
;

506 
guöt
 
maxvÆ
, 
öãrvÆ
;

507 
GtkWidgë
 *
œbñ
;

509 
i
 = 
	`ˇŒoc
(1, (*i));

510 
i
->
g›t
.
box
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

511 i‡(!
o
->
 ame
)

512 
œbñ
 = 
	`gtk_œbñ_√w
(
o
->
«me
);

514 
œbñ
 = 
	`gtk_œbñ_√w
(
o
->
 ame
);

516 
maxvÆ
 = 
o
->maxval;

517 i‡(!
maxvÆ
)

518 
maxvÆ
 = 
UINT_MAX
;

520 
defvÆ
 = 0;

521 i‡(
p
)

522 
defvÆ
 = *
p
;

523 i‡(
o
->
def
) {

524 
vÆ
;

526 
	`check_°r_byãs
(
o
->
def
, &
vÆ
, o);

527 
defvÆ
 = 
vÆ
;

530 
öãrvÆ
 = 1.0;

531 i‡(
o
->
öãrvÆ
)

532 
öãrvÆ
 = 
o
->interval;

534 
i
->
•ö
 = 
	`gtk_•ö_buâ⁄_√w_wôh_ønge
(
o
->
mövÆ
, 
maxvÆ
, 
öãrvÆ
);

535 
	`g›t_m¨k_ödex
(
gjv
, &
i
->
g›t
, 
idx
, 
GOPT_INT
);

536 
	`gtk_•ö_buâ⁄_£t_upd©e_pﬁicy
(
	`GTK_SPIN_BUTTON
(
i
->
•ö
), 
GTK_UPDATE_IF_VALID
);

537 i‡(
p
)

538 
	`g›t_öt_£t_vÆ
(
i
, *
p
);

540 
	`g›t_öt_£t_vÆ
(
i
, 
defvÆ
);

541 
i
->
g›t
.
sig_h™dÀr
 = 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(i->
•ö
), "vÆue-ch™ged", 
	`G_CALLBACK
(
g›t_öt_ch™ged
), i);

542 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
i
->
•ö
), "de°roy", 
	`G_CALLBACK
(
g›t_öt_de°roy
), i);

544 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
i
->
g›t
.
box
), i->
•ö
, 
FALSE
, FALSE, 0);

545 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
i
->
g›t
.
box
), 
œbñ
, 
FALSE
, FALSE, 0);

547  
i
;

548 
	}
}

550 
g›t
 *
	$g›t_√w_öt
(
g›t_job_võw
 *
gjv
,

551 
fio_›ti⁄
 *
o
, *
ù
,

552 
idx
)

554 
uŒp
;

555 
g›t_öt
 *
i
;

557 i‡(
ù
) {

558 
uŒp
 = *
ù
;

559 
i
 = 
	`__g›t_√w_öt
(
gjv
, 
o
, &
uŒp
, 
idx
);

561 
i
 = 
	`__g›t_√w_öt
(
gjv
, 
o
, 
NULL
, 
idx
);

563  &
i
->
g›t
;

564 
	}
}

566 
g›t
 *
	$g›t_√w_uŒ⁄g
(
g›t_job_võw
 *
gjv
,

567 
fio_›ti⁄
 *
o
, *
p
,

568 
idx
)

570 
g›t_öt
 *
i
;

572 
i
 = 
	`__g›t_√w_öt
(
gjv
, 
o
, 
p
, 
idx
);

573  &
i
->
g›t
;

574 
	}
}

576 
	$g›t_boﬁ_toggÀd
(
GtkToggÀBuâ⁄
 *
buâ⁄
, 
gpoöãr
 
d©a
)

578 
g›t_boﬁ
 *
b
 = (g›t_boﬁ *Ë
d©a
;

579 
fio_›ti⁄
 *
o
 = &
fio_›ti⁄s
[
b
->
g›t
.
›t_ödex
];

580 
gboﬁón
 
£t
;

582 
	`g›t_ch™ged
(&
b
->
g›t
);

584 
£t
 = 
	`gtk_toggÀ_buâ⁄_gë_a˘ive
(
	`GTK_TOGGLE_BUTTON
(
b
->
check
));

586 i‡(
o
->
öv_›t
) {

587 
g›t
 *
g_öv
 = 
o
->
öv_›t
->
gui_d©a
;

588 
g›t_boﬁ
 *
b_öv
 = 
	`c⁄èöî_of
(
g_öv
, g›t_boﬁ, 
g›t
);

590 
	`as£π
(
o
->
ty≥
 =o->
öv_›t
->type);

592 
	`g_sig«l_h™dÀr_block
(
	`G_OBJECT
(
b_öv
->
check
), b_öv->
g›t
.
sig_h™dÀr
);

593 
	`gtk_toggÀ_buâ⁄_£t_a˘ive
(
	`GTK_TOGGLE_BUTTON
(
b_öv
->
check
), !
£t
);

594 
	`g_sig«l_h™dÀr_unblock
(
	`G_OBJECT
(
b_öv
->
check
), b_öv->
g›t
.
sig_h™dÀr
);

597 
	`g›t_£t_chûdªn_visibÀ
(
b
->
g›t
.
gjv
, 
o
, 
£t
);

598 
	}
}

600 
	$g›t_boﬁ_de°roy
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

602 
g›t_boﬁ
 *
b
 = (g›t_boﬁ *Ë
d©a
;

604 
	`‰ì
(
b
);

605 
	`gtk_widgë_de°roy
(
w
);

606 
	}
}

608 
	$g›t_boﬁ_£t_vÆ
(
g›t_boﬁ
 *
b
, 
vÆ
)

610 
	`gtk_toggÀ_buâ⁄_£t_a˘ive
(
	`GTK_TOGGLE_BUTTON
(
b
->
check
), 
vÆ
);

611 
	}
}

613 
g›t
 *
	$g›t_√w_boﬁ
(
g›t_job_võw
 *
gjv
,

614 
fio_›ti⁄
 *
o
, *
vÆ
,

615 
idx
)

617 
g›t_boﬁ
 *
b
;

618 
GtkWidgë
 *
œbñ
;

619 
def°©e
 = 0;

621 
b
 = 
	`ˇŒoc
(1, (*b));

622 
b
->
g›t
.
box
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

623 i‡(!
o
->
 ame
)

624 
œbñ
 = 
	`gtk_œbñ_√w
(
o
->
«me
);

626 
œbñ
 = 
	`gtk_œbñ_√w
(
o
->
 ame
);

628 
b
->
check
 = 
	`gtk_check_buâ⁄_√w
();

629 
	`g›t_m¨k_ödex
(
gjv
, &
b
->
g›t
, 
idx
, 
GOPT_BOOL
);

630 i‡(
o
->
def
 && !
	`°rcmp
(o->def, "1"))

631 
def°©e
 = 1;

633 i‡(
o
->
√g
)

634 
def°©e
 = !defstate;

636 i‡(
vÆ
)

637 
	`g›t_boﬁ_£t_vÆ
(
b
, *
vÆ
);

639 
	`gtk_toggÀ_buâ⁄_£t_a˘ive
(
	`GTK_TOGGLE_BUTTON
(
b
->
check
), 
def°©e
);

640 
b
->
g›t
.
sig_h™dÀr
 = 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(b->
check
), "toggÀd", 
	`G_CALLBACK
(
g›t_boﬁ_toggÀd
), b);

641 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
b
->
check
), "de°roy", 
	`G_CALLBACK
(
g›t_boﬁ_de°roy
), b);

643 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
b
->
g›t
.
box
), b->
check
, 
FALSE
, FALSE, 0);

644 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
b
->
g›t
.
box
), 
œbñ
, 
FALSE
, FALSE, 0);

645  &
b
->
g›t
;

646 
	}
}

653 
	$ønge_vÆue_ch™ged
(
GtkSpöBuâ⁄
 *
•ö
, 
gpoöãr
 
d©a
)

655 
g›t_ønge
 *
r
 = (g›t_øngê*Ë
d©a
;

656 
ch™ged
 = -1, 
i
;

657 
göt
 
vÆ
, 
mvÆ
;

659 
	`g›t_ch™ged
(&
r
->
g›t
);

661 
i
 = 0; i < 
GOPT_RANGE_SPIN
; i++) {

662 i‡(
	`GTK_SPIN_BUTTON
(
r
->
•ös
[
i
]Ë=
•ö
) {

663 
ch™ged
 = 
i
;

668 
	`as£π
(
ch™ged
 != -1);

673 i‡(
ch™ged
 == 0 || changed == 2) {

674 
GtkWidgë
 *
m•ö
 = 
r
->
•ös
[
ch™ged
 + 1];

676 
vÆ
 = 
	`gtk_•ö_buâ⁄_gë_vÆue_as_öt
(
	`GTK_SPIN_BUTTON
(
r
->
•ös
[
ch™ged
]));

677 
mvÆ
 = 
	`gtk_•ö_buâ⁄_gë_vÆue_as_öt
(
	`GTK_SPIN_BUTTON
(
m•ö
));

678 i‡(
vÆ
 > 
mvÆ
)

679 
	`gtk_•ö_buâ⁄_£t_vÆue
(
	`GTK_SPIN_BUTTON
(
m•ö
), 
vÆ
);

681 
GtkWidgë
 *
m•ö
 = 
r
->
•ös
[
ch™ged
 - 1];

683 
vÆ
 = 
	`gtk_•ö_buâ⁄_gë_vÆue_as_öt
(
	`GTK_SPIN_BUTTON
(
r
->
•ös
[
ch™ged
]));

684 
mvÆ
 = 
	`gtk_•ö_buâ⁄_gë_vÆue_as_öt
(
	`GTK_SPIN_BUTTON
(
m•ö
));

685 i‡(
vÆ
 < 
mvÆ
)

686 
	`gtk_•ö_buâ⁄_£t_vÆue
(
	`GTK_SPIN_BUTTON
(
m•ö
), 
vÆ
);

688 
	}
}

690 
	$g›t_ønge_de°roy
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

692 
g›t_ønge
 *
r
 = (g›t_øngê*Ë
d©a
;

694 
	`‰ì
(
r
);

695 
	`gtk_widgë_de°roy
(
w
);

696 
	}
}

698 
	$g›t_öt_ønge_£t_vÆ
(
g›t_ønge
 *
r
, *
vÆs
)

700 
i
;

702 
i
 = 0; i < 
GOPT_RANGE_SPIN
; i++)

703 
	`gtk_•ö_buâ⁄_£t_vÆue
(
	`GTK_SPIN_BUTTON
(
r
->
•ös
[
i
]), 
vÆs
[i]);

704 
	}
}

706 
g›t
 *
	$g›t_√w_öt_ønge
(
g›t_job_võw
 *
gjv
,

707 
fio_›ti⁄
 *
o
, **
ù
,

708 
idx
)

710 
g›t_ønge
 *
r
;

711 
GtkWidgë
 *
œbñ
;

712 
guöt
 
öãrvÆ
;

713 
defvÆs
[
GOPT_RANGE_SPIN
];

714 
göt
 
maxvÆ
;

715 
i
;

717 
r
 = 
	`ˇŒoc
(1, (*r));

718 
r
->
g›t
.
box
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

719 
	`g›t_m¨k_ödex
(
gjv
, &
r
->
g›t
, 
idx
, 
GOPT_RANGE
);

720 i‡(!
o
->
 ame
)

721 
œbñ
 = 
	`gtk_œbñ_√w
(
o
->
«me
);

723 
œbñ
 = 
	`gtk_œbñ_√w
(
o
->
 ame
);

725 
maxvÆ
 = 
o
->maxval;

726 i‡(!
maxvÆ
)

727 
maxvÆ
 = 
INT_MAX
;

729 
	`mem£t
(
defvÆs
, 0, (defvals));

730 i‡(
o
->
def
) {

731 
vÆ
;

733 
	`check_°r_byãs
(
o
->
def
, &
vÆ
, o);

734 
i
 = 0; i < 
GOPT_RANGE_SPIN
; i++)

735 
defvÆs
[
i
] = 
vÆ
;

738 
öãrvÆ
 = 1.0;

739 i‡(
o
->
öãrvÆ
)

740 
öãrvÆ
 = 
o
->interval;

742 
i
 = 0; i < 
GOPT_RANGE_SPIN
; i++) {

743 
r
->
•ös
[
i
] = 
	`gtk_•ö_buâ⁄_√w_wôh_ønge
(
o
->
mövÆ
, 
maxvÆ
, 
öãrvÆ
);

744 
	`gtk_•ö_buâ⁄_£t_upd©e_pﬁicy
(
	`GTK_SPIN_BUTTON
(
r
->
•ös
[
i
]), 
GTK_UPDATE_IF_VALID
);

745 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
r
->
g›t
.
box
),Ñ->
•ös
[
i
], 
FALSE
, FALSE, 0);

748 i‡(
ù
)

749 
	`g›t_öt_ønge_£t_vÆ
(
r
, *
ù
);

751 
	`g›t_öt_ønge_£t_vÆ
(
r
, 
defvÆs
);

753 
i
 = 0; i < 
GOPT_RANGE_SPIN
; i++)

754 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
r
->
•ös
[
i
]), "vÆue-ch™ged", 
	`G_CALLBACK
(
ønge_vÆue_ch™ged
),Ñ);

756 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
r
->
g›t
.
box
), 
œbñ
, 
FALSE
, FALSE, 0);

757 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
r
->
g›t
.
box
), "de°roy", 
	`G_CALLBACK
(
g›t_ønge_de°roy
),Ñ);

758  &
r
->
g›t
;

759 
	}
}

761 
	$g›t_°r_vÆ_de°roy
(
GtkWidgë
 *
w
, 
gpoöãr
 
d©a
)

763 
g›t_°r_vÆ
 *
g
 = (g›t_°r_vÆ *Ë
d©a
;

765 
	`‰ì
(
g
);

766 
	`gtk_widgë_de°roy
(
w
);

767 
	}
}

769 
	$g›t_°r_vÆ_•ö_wøµed
(
GtkSpöBuâ⁄
 *
•ö
, 
gpoöãr
 
d©a
)

771 
g›t_°r_vÆ
 *
g
 = (g›t_°r_vÆ *Ë
d©a
;

772 
vÆ
;

773 
GtkAdju°mít
 *
adj
;

774 
göt
 
ödex
;

776 
adj
 = 
	`gtk_•ö_buâ⁄_gë_adju°mít
(
•ö
);

777 
vÆ
 = 
	`gtk_adju°mít_gë_vÆue
(
adj
);

782 i‡(!
vÆ
) {

783 
ödex
 = 
	`gtk_combo_box_gë_a˘ive
(
	`GTK_COMBO_BOX
(
g
->
combo
));

784 i‡(
ödex
 + 1 <
g
->
maxödex
) {

785 
vÆ
 = 1;

786 
	`gtk_combo_box_£t_a˘ive
(
	`GTK_COMBO_BOX
(
g
->
combo
), ++
ödex
);

788 
vÆ
 = 1023;

789 
	`gtk_•ö_buâ⁄_£t_vÆue
(
•ö
, 
vÆ
);

791 
ödex
 = 
	`gtk_combo_box_gë_a˘ive
(
	`GTK_COMBO_BOX
(
g
->
combo
));

792 i‡(
ödex
) {

793 
	`gtk_combo_box_£t_a˘ive
(
	`GTK_COMBO_BOX
(
g
->
combo
), --
ödex
);

794 
	`gtk_•ö_buâ⁄_£t_vÆue
(
•ö
, 1023);

796 
	`gtk_•ö_buâ⁄_£t_vÆue
(
•ö
, 0);

798 
	}
}

800 
	$g›t_°r_vÆ_ch™ged
(
GtkSpöBuâ⁄
 *
•ö
, 
gpoöãr
 
d©a
)

802 
g›t_°r_vÆ
 *
g
 = (g›t_°r_vÆ *Ë
d©a
;

804 
	`g›t_ch™ged
(&
g
->
g›t
);

805 
	}
}

807 
	$g›t_°r_vÆ_£t_vÆ
(
g›t_°r_vÆ
 *
g
, 
vÆ
)

809 
i
 = 0;

812 i‡(!
vÆ
 || (val % 1024))

815 
i
++;

816 
vÆ
 /= 1024;

819 
	`gtk_•ö_buâ⁄_£t_vÆue
(
	`GTK_SPIN_BUTTON
(
g
->
•ö
), 
vÆ
);

820 
	`gtk_combo_box_£t_a˘ive
(
	`GTK_COMBO_BOX
(
g
->
combo
), 
i
);

821 
	}
}

823 
g›t
 *
	$g›t_√w_°r_vÆ
(
g›t_job_võw
 *
gjv
,

824 
fio_›ti⁄
 *
o
,

825 *
p
, 
idx
)

827 
g›t_°r_vÆ
 *
g
;

828 c⁄° 
gch¨
 *
po°fix
[] = { "B", "KB", "MB", "GB", "PB", "TB", "" };

829 
GtkWidgë
 *
œbñ
;

830 
i
;

832 
g
 = 
	`ˇŒoc
(1, (*g));

833 
g
->
g›t
.
box
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

834 i‡(!
o
->
 ame
)

835 
œbñ
 = 
	`gtk_œbñ_√w
(
o
->
«me
);

837 
œbñ
 = 
	`gtk_œbñ_√w
(
o
->
 ame
);

838 
	`g›t_m¨k_ödex
(
gjv
, &
g
->
g›t
, 
idx
, 
GOPT_STR_VAL
);

840 
g
->
•ö
 = 
	`gtk_•ö_buâ⁄_√w_wôh_ønge
(0.0, 1023.0, 1.0);

841 
	`gtk_•ö_buâ⁄_£t_upd©e_pﬁicy
(
	`GTK_SPIN_BUTTON
(
g
->
•ö
), 
GTK_UPDATE_IF_VALID
);

842 
	`gtk_•ö_buâ⁄_£t_vÆue
(
	`GTK_SPIN_BUTTON
(
g
->
•ö
), 0);

843 
	`gtk_•ö_buâ⁄_£t_wøp
(
	`GTK_SPIN_BUTTON
(
g
->
•ö
), 1);

844 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
g
->
g›t
.
box
), g->
•ö
, 
FALSE
, FALSE, 0);

845 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
g
->
•ö
), "wøµed", 
	`G_CALLBACK
(
g›t_°r_vÆ_•ö_wøµed
), g);

846 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
g
->
•ö
), "ch™ged", 
	`G_CALLBACK
(
g›t_°r_vÆ_ch™ged
), g);

848 
g
->
combo
 = 
	`gtk_combo_box_ãxt_√w
();

849 
i
 = 0;

850 
	`°æí
(
po°fix
[
i
])) {

851 
	`gtk_combo_box_ãxt_≠≥nd_ãxt
(
	`GTK_COMBO_BOX_TEXT
(
g
->
combo
), 
po°fix
[
i
]);

852 
i
++;

854 
g
->
maxödex
 = 
i
 - 1;

855 
	`gtk_combo_box_£t_a˘ive
(
	`GTK_COMBO_BOX
(
g
->
combo
), 0);

856 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
g
->
g›t
.
box
), g->
combo
, 
FALSE
, FALSE, 0);

857 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
g
->
g›t
.
box
), 
œbñ
, 
FALSE
, FALSE, 3);

859 i‡(
p
)

860 
	`g›t_°r_vÆ_£t_vÆ
(
g
, *
p
);

862 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
g
->
combo
), "ch™ged", 
	`G_CALLBACK
(
g›t_°r_vÆ_ch™ged
), g);

864 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
g
->
g›t
.
box
), "de°roy", 
	`G_CALLBACK
(
g›t_°r_vÆ_de°roy
), g);

865  &
g
->
g›t
;

866 
	}
}

868 
	$g›t_£t_›ti⁄
(
g›t_job_võw
 *
gjv
, 
fio_›ti⁄
 *
o
,

869 
g›t
 *g›t, 
thªad_›ti⁄s
 *
to
)

871 
o
->
ty≥
) {

872 
FIO_OPT_STR_VAL
: {

873 *
uŒp
 = 
NULL
;

874 
g›t_°r_vÆ
 *
g
;

876 i‡(
o
->
off1
)

877 
uŒp
 = 
	`td_v¨
(
to
, 
o
, o->
off1
);

879 
g
 = 
	`c⁄èöî_of
(
g›t
, 
g›t_°r_vÆ
, gopt);

880 i‡(
uŒp
)

881 
	`g›t_°r_vÆ_£t_vÆ
(
g
, *
uŒp
);

884 
FIO_OPT_STR_VAL_TIME
: {

885 *
uŒp
 = 
NULL
;

886 
g›t_öt
 *
i
;

888 i‡(
o
->
off1
)

889 
uŒp
 = 
	`td_v¨
(
to
, 
o
, o->
off1
);

891 
i
 = 
	`c⁄èöî_of
(
g›t
, 
g›t_öt
, gopt);

892 i‡(
uŒp
)

893 
	`g›t_öt_£t_vÆ
(
i
, *
uŒp
);

896 
FIO_OPT_INT
:

897 i‡(
o
->
posvÆ
[0].
ivÆ
) {

898 *
ù
 = 
NULL
;

899 
g›t_combo
 *
c
;

901 i‡(
o
->
off1
)

902 
ù
 = 
	`td_v¨
(
to
, 
o
, o->
off1
);

904 
c
 = 
	`c⁄èöî_of
(
g›t
, 
g›t_combo
, gopt);

905 i‡(
ù
)

906 
	`g›t_combo_öt_£t_vÆ
(
c
, *
ù
);

908 *
ù
 = 
NULL
;

909 
g›t_öt
 *
i
;

911 i‡(
o
->
off1
)

912 
ù
 = 
	`td_v¨
(
to
, 
o
, o->
off1
);

914 
i
 = 
	`c⁄èöî_of
(
g›t
, 
g›t_öt
, gopt);

915 i‡(
ù
)

916 
	`g›t_öt_£t_vÆ
(
i
, *
ù
);

919 
FIO_OPT_STR_SET
:

920 
FIO_OPT_BOOL
: {

921 *
ù
 = 
NULL
;

922 
g›t_boﬁ
 *
b
;

924 i‡(
o
->
off1
)

925 
ù
 = 
	`td_v¨
(
to
, 
o
, o->
off1
);

927 
b
 = 
	`c⁄èöî_of
(
g›t
, 
g›t_boﬁ
, gopt);

928 i‡(
ù
)

929 
	`g›t_boﬁ_£t_vÆ
(
b
, *
ù
);

932 
FIO_OPT_STR
: {

933 i‡(
o
->
posvÆ
[0].
ivÆ
) {

934 *
ù
 = 
NULL
;

935 
g›t_combo
 *
c
;

937 i‡(
o
->
off1
)

938 
ù
 = 
	`td_v¨
(
to
, 
o
, o->
off1
);

940 
c
 = 
	`c⁄èöî_of
(
g›t
, 
g›t_combo
, gopt);

941 i‡(
ù
)

942 
	`g›t_combo_öt_£t_vÆ
(
c
, *
ù
);

944 
g›t_°r
 *
s
;

945 *
ãxt
 = 
NULL
;

947 i‡(
o
->
off1
) {

948 **
p
 = 
	`td_v¨
(
to
, 
o
, o->
off1
);

950 
ãxt
 = *
p
;

953 
s
 = 
	`c⁄èöî_of
(
g›t
, 
g›t_°r
, gopt);

954 
	`g›t_°r_°‹e_£t_vÆ
(
s
, 
ãxt
);

959 
FIO_OPT_STR_STORE
: {

960 
g›t_combo
 *
c
;

961 *
ãxt
 = 
NULL
;

963 i‡(
o
->
off1
) {

964 **
p
 = 
	`td_v¨
(
to
, 
o
, o->
off1
);

965 
ãxt
 = *
p
;

968 i‡(!
o
->
posvÆ
[0].
ivÆ
) {

969 
g›t_°r
 *
s
;

971 
s
 = 
	`c⁄èöî_of
(
g›t
, 
g›t_°r
, gopt);

972 
	`g›t_°r_°‹e_£t_vÆ
(
s
, 
ãxt
);

976 
c
 = 
	`c⁄èöî_of
(
g›t
, 
g›t_combo
, gopt);

977 i‡(
ãxt
)

978 
	`g›t_combo_°r_£t_vÆ
(
c
, 
ãxt
);

981 
FIO_OPT_STR_MULTI
:

984 
FIO_OPT_RANGE
: {

985 
g›t_ønge
 *
r
;

986 *
ù
[4] = { 
	`td_v¨
(
to
, 
o
, o->
off1
),

987 
	`td_v¨
(
to
, 
o
, o->
off2
),

988 
	`td_v¨
(
to
, 
o
, o->
off3
),

989 
	`td_v¨
(
to
, 
o
, o->
off4
) };

991 
r
 = 
	`c⁄èöî_of
(
g›t
, 
g›t_ønge
, gopt);

992 
	`g›t_öt_ønge_£t_vÆ
(
r
, *
ù
);

996 
FIO_OPT_FLOAT_LIST
:

998 
FIO_OPT_DEPRECATED
:

1001 
	`¥ötf
("ign‹êty≥ %u\n", 
o
->
ty≥
);

1004 
	}
}

1006 
	$g›t_add_›ti⁄
(
g›t_job_võw
 *
gjv
, 
GtkWidgë
 *
hbox
,

1007 
fio_›ti⁄
 *
o
, 
›t_ödex
,

1008 
thªad_›ti⁄s
 *
to
)

1010 
g›t
 *
go
 = 
NULL
;

1012 
o
->
ty≥
) {

1013 
FIO_OPT_STR_VAL
: {

1014 *
uŒp
 = 
NULL
;

1016 i‡(
o
->
off1
)

1017 
uŒp
 = 
	`td_v¨
(
to
, 
o
, o->
off1
);

1019 
go
 = 
	`g›t_√w_°r_vÆ
(
gjv
, 
o
, 
uŒp
, 
›t_ödex
);

1022 
FIO_OPT_STR_VAL_TIME
: {

1023 *
uŒp
 = 
NULL
;

1025 i‡(
o
->
off1
)

1026 
uŒp
 = 
	`td_v¨
(
to
, 
o
, o->
off1
);

1028 
go
 = 
	`g›t_√w_uŒ⁄g
(
gjv
, 
o
, 
uŒp
, 
›t_ödex
);

1031 
FIO_OPT_INT
:

1032 i‡(
o
->
posvÆ
[0].
ivÆ
) {

1033 *
ù
 = 
NULL
;

1035 i‡(
o
->
off1
)

1036 
ù
 = 
	`td_v¨
(
to
, 
o
, o->
off1
);

1038 
go
 = 
	`g›t_√w_combo_öt
(
gjv
, 
o
, 
ù
, 
›t_ödex
);

1040 *
ù
 = 
NULL
;

1042 i‡(
o
->
off1
)

1043 
ù
 = 
	`td_v¨
(
to
, 
o
, o->
off1
);

1045 
go
 = 
	`g›t_√w_öt
(
gjv
, 
o
, 
ù
, 
›t_ödex
);

1048 
FIO_OPT_STR_SET
:

1049 
FIO_OPT_BOOL
: {

1050 *
ù
 = 
NULL
;

1052 i‡(
o
->
off1
)

1053 
ù
 = 
	`td_v¨
(
to
, 
o
, o->
off1
);

1055 
go
 = 
	`g›t_√w_boﬁ
(
gjv
, 
o
, 
ù
, 
›t_ödex
);

1058 
FIO_OPT_STR
: {

1059 i‡(
o
->
posvÆ
[0].
ivÆ
) {

1060 *
ù
 = 
NULL
;

1062 i‡(
o
->
off1
)

1063 
ù
 = 
	`td_v¨
(
to
, 
o
, o->
off1
);

1065 
go
 = 
	`g›t_√w_combo_öt
(
gjv
, 
o
, 
ù
, 
›t_ödex
);

1068 
go
 = 
	`g›t_√w_°r_°‹e
(
gjv
, 
o
, 
NULL
, 
›t_ödex
);

1073 
FIO_OPT_STR_STORE
: {

1074 *
ãxt
 = 
NULL
;

1076 i‡(
o
->
off1
) {

1077 **
p
 = 
	`td_v¨
(
to
, 
o
, o->
off1
);

1078 
ãxt
 = *
p
;

1081 i‡(!
o
->
posvÆ
[0].
ivÆ
) {

1082 
go
 = 
	`g›t_√w_°r_°‹e
(
gjv
, 
o
, 
ãxt
, 
›t_ödex
);

1086 
go
 = 
	`g›t_√w_combo_°r
(
gjv
, 
o
, 
ãxt
, 
›t_ödex
);

1089 
FIO_OPT_STR_MULTI
:

1090 
go
 = 
	`g›t_√w_°r_mu…i
(
gjv
, 
o
, 
›t_ödex
);

1092 
FIO_OPT_RANGE
: {

1093 *
ù
[4] = { 
	`td_v¨
(
to
, 
o
, o->
off1
),

1094 
	`td_v¨
(
to
, 
o
, o->
off2
),

1095 
	`td_v¨
(
to
, 
o
, o->
off3
),

1096 
	`td_v¨
(
to
, 
o
, o->
off4
) };

1098 
go
 = 
	`g›t_√w_öt_ønge
(
gjv
, 
o
, 
ù
, 
›t_ödex
);

1102 
FIO_OPT_FLOAT_LIST
:

1104 
FIO_OPT_DEPRECATED
:

1107 
	`¥ötf
("ign‹êty≥ %u\n", 
o
->
ty≥
);

1111 i‡(
go
) {

1112 
GtkWidgë
 *
de°
;

1114 i‡(
o
->
hñp
)

1115 
	`gtk_widgë_£t_toﬁtù_ãxt
(
go
->
box
, 
o
->
hñp
);

1117 
o
->
gui_d©a
 = 
go
;

1119 
de°
 = 
	`g›t_gë_group_‰ame
(
gjv
, 
hbox
, 
o
->
group
);

1120 i‡(!
de°
)

1121 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
hbox
), 
go
->
box
, 
FALSE
, FALSE, 5);

1123 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
de°
), 
go
->
box
, 
FALSE
, FALSE, 5);

1125 
	}
}

1127 
	$g›t_add_›ti⁄s
(
g›t_job_võw
 *
gjv
,

1128 
thªad_›ti⁄s
 *
to
)

1130 
GtkWidgë
 *
hbox
 = 
NULL
;

1131 
i
;

1136 
i
 = 0; 
fio_›ti⁄s
[i].
«me
; i++) {

1137 
fio_›ti⁄
 *
o
 = &
fio_›ti⁄s
[
i
];

1138 
mask
 = 
o
->
ˇãg‹y
;

1139 
›t_group
 *
og
;

1141 (
og
 = 
	`›t_group_‰om_mask
(&
mask
)Ë!
NULL
) {

1142 
GtkWidgë
 *
vbox
 = 
gjv
->
vboxes
[
	`ffz
(~
og
->
mask
)];

1144 
hbox
 = 
	`gtk_hbox_√w
(
FALSE
, 3);

1145 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
hbox
, 
FALSE
, FALSE, 5);

1146 
	`g›t_add_›ti⁄
(
gjv
, 
hbox
, 
o
, 
i
, 
to
);

1149 
	}
}

1151 
	$g›t_£t_›ti⁄s
(
g›t_job_võw
 *
gjv
,

1152 
thªad_›ti⁄s
 *
to
)

1154 
i
;

1156 
i
 = 0; 
fio_›ti⁄s
[i].
«me
; i++) {

1157 
fio_›ti⁄
 *
o
 = &
fio_›ti⁄s
[
i
];

1158 
g›t
 *g›à
gjv
->
g›ts
[
i
];

1160 
	`g›t_£t_›ti⁄
(
gjv
, 
o
, 
g›t
, 
to
);

1162 
	}
}

1164 
GtkWidgë
 *
	$g›t_add_èb
(
GtkWidgë
 *
nŸebook
, c⁄° *
«me
)

1166 
GtkWidgë
 *
box
, *
vbox
, *
s¸ﬁl
;

1168 
s¸ﬁl
 = 
	`gtk_s¸ﬁÀd_wödow_√w
(
NULL
, NULL);

1169 
	`gtk_c⁄èöî_£t_b‹dî_width
(
	`GTK_CONTAINER
(
s¸ﬁl
), 5);

1170 
	`gtk_s¸ﬁÀd_wödow_£t_pﬁicy
(
	`GTK_SCROLLED_WINDOW
(
s¸ﬁl
), 
GTK_POLICY_AUTOMATIC
, GTK_POLICY_AUTOMATIC);

1172 
vbox
 = 
	`gtk_vbox_√w
(
FALSE
, 3);

1173 
box
 = 
	`gtk_hbox_√w
(
FALSE
, 0);

1174 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
box
, 
FALSE
, FALSE, 5);

1175 
	`gtk_s¸ﬁÀd_wödow_add_wôh_võwp‹t
(
	`GTK_SCROLLED_WINDOW
(
s¸ﬁl
), 
vbox
);

1176 
	`gtk_nŸebook_≠≥nd_∑ge
(
	`GTK_NOTEBOOK
(
nŸebook
), 
s¸ﬁl
, 
	`gtk_œbñ_√w
(
«me
));

1177  
vbox
;

1178 
	}
}

1180 
GtkWidgë
 *
	$g›t_add_group_èb
(
GtkWidgë
 *
nŸebook
, 
›t_group
 *
og
)

1182  
	`g›t_add_èb
(
nŸebook
, 
og
->
«me
);

1183 
	}
}

1185 
	$g›t_add_group_èbs
(
GtkWidgë
 *
nŸebook
, 
g›t_job_võw
 *
gjv
)

1187 
›t_group
 *
og
;

1188 
i
;

1190 
i
 = 0;

1192 
mask
 = (1U << 
i
);

1194 
og
 = 
	`›t_group_‰om_mask
(&
mask
);

1195 i‡(!
og
)

1197 
gjv
->
vboxes
[
i
] = 
	`g›t_add_group_èb
(
nŸebook
, 
og
);

1198 
i
++;

1200 
	}
}

1202 
	$g›t_h™dÀ_°r_mu…i_ch™ged
(
g›t_job_võw
 *
gjv
,

1203 
g›t_°r_mu…i
 *
m
,

1204 
fio_›ti⁄
 *
o
)

1206 *
ù
 = 
	`td_v¨
(
gjv
->
o
, o, o->
off1
);

1207 
vÆue_∑ú
 *
vp
;

1208 
gboﬁón
 
£t
;

1209 
guöt
 
vÆ
 = 0;

1210 
i
;

1212 
i
 = 0;

1213 
vp
 = &
o
->
posvÆ
[0];

1214 
vp
->
ivÆ
) {

1215 i‡(!
m
->
checks
[
i
])

1217 
£t
 = 
	`gtk_toggÀ_buâ⁄_gë_a˘ive
(
	`GTK_TOGGLE_BUTTON
(
m
->
checks
[
i
]));

1218 i‡(
£t
) {

1219 i‡(
vp
->
‹vÆ
)

1220 
vÆ
 |
vp
->
ovÆ
;

1222 
vÆ
 = 
vp
->
ovÆ
;

1224 
i
++;

1225 
vp
++;

1228 i‡(
o
->
off1
)

1229 *
ù
 = 
vÆ
;

1230 
	}
}

1232 
	$g›t_h™dÀ_ønge_ch™ged
(
g›t_job_võw
 *
gjv
,

1233 
g›t_ønge
 *
r
,

1234 
fio_›ti⁄
 *
o
)

1236 *
ù
[4] = { 
	`td_v¨
(
gjv
->
o
, o, o->
off1
),

1237 
	`td_v¨
(
gjv
->
o
, o, o->
off2
),

1238 
	`td_v¨
(
gjv
->
o
, o, o->
off3
),

1239 
	`td_v¨
(
gjv
->
o
, o, o->
off4
) };

1240 
göt
 
vÆ
;

1241 
i
;

1243 
i
 = 0; i < 
GOPT_RANGE_SPIN
; i++) {

1244 
vÆ
 = 
	`gtk_•ö_buâ⁄_gë_vÆue_as_öt
(
	`GTK_SPIN_BUTTON
(
r
->
•ös
[
i
]));

1245 *
ù
[
i
] = 
vÆ
;

1247 
	}
}

1249 
	$g›t_h™dÀ_°r_vÆ_ch™ged
(
g›t_job_võw
 *
gjv
,

1250 
g›t_°r_vÆ
 *
s
,

1251 
fio_›ti⁄
 *
o
)

1253 *
uŒp
 = 
	`td_v¨
(
gjv
->
o
, o, o->
off1
);

1254 
GtkAdju°mít
 *
adj
;

1255 
göt
 
ödex
;

1257 i‡(!
uŒp
)

1263 
adj
 = 
	`gtk_•ö_buâ⁄_gë_adju°mít
(
	`GTK_SPIN_BUTTON
(
s
->
•ö
));

1264 *
uŒp
 = 
	`gtk_adju°mít_gë_vÆue
(
adj
);

1269 
ödex
 = 
	`gtk_combo_box_gë_a˘ive
(
	`GTK_COMBO_BOX
(
s
->
combo
));

1270 
ödex
--)

1271 *
uŒp
 *= 1024ULL;

1272 
	}
}

1274 
	$g›t_h™dÀ_°r_ch™ged
(
g›t_job_võw
 *
gjv
,

1275 
g›t_°r
 *
s
, 
fio_›ti⁄
 *
o
)

1277 **
p
 = 
	`td_v¨
(
gjv
->
o
, o, o->
off1
);

1279 i‡(*
p
)

1280 
	`‰ì
(*
p
);

1282 *
p
 = 
	`°rdup
(
	`gtk_íåy_gë_ãxt
(
	`GTK_ENTRY
(
s
->
íåy
)));

1283 
	}
}

1285 
	$g›t_h™dÀ_boﬁ_ch™ged
(
g›t_job_võw
 *
gjv
,

1286 
g›t_boﬁ
 *
b
, 
fio_›ti⁄
 *
o
)

1288 *
ù
 = 
	`td_v¨
(
gjv
->
o
, o, o->
off1
);

1289 
gboﬁón
 
£t
;

1291 
£t
 = 
	`gtk_toggÀ_buâ⁄_gë_a˘ive
(
	`GTK_TOGGLE_BUTTON
(
b
->
check
));

1292 *
ù
 = 
£t
;

1293 
	}
}

1295 
	$g›t_h™dÀ_öt_ch™ged
(
g›t_job_võw
 *
gjv
,

1296 
g›t_öt
 *
i
, 
fio_›ti⁄
 *
o
)

1298 *
ù
 = 
	`td_v¨
(
gjv
->
o
, o, o->
off1
);

1299 
GtkAdju°mít
 *
adj
;

1300 
guöt
 
vÆ
;

1302 
adj
 = 
	`gtk_•ö_buâ⁄_gë_adju°mít
(
	`GTK_SPIN_BUTTON
(
i
->
•ö
));

1303 
vÆ
 = 
	`gtk_adju°mít_gë_vÆue
(
adj
);

1304 *
ù
 = 
vÆ
;

1305 
	}
}

1307 
	$g›t_h™dÀ_combo_°r_ch™ged
(
g›t_job_võw
 *
gjv
,

1308 
g›t_combo
 *
c
,

1309 
fio_›ti⁄
 *
o
)

1311 **
p
 = 
	`td_v¨
(
gjv
->
o
, o, o->
off1
);

1313 i‡(*
p
)

1314 
	`‰ì
(*
p
);

1316 *
p
 = 
	`°rdup
(
	`gtk_combo_box_ãxt_gë_a˘ive_ãxt
(
	`GTK_COMBO_BOX_TEXT
(
c
->
combo
)));

1317 
	}
}

1319 
	$g›t_h™dÀ_combo_öt_ch™ged
(
g›t_job_võw
 *
gjv
,

1320 
g›t_combo
 *
c
,

1321 
fio_›ti⁄
 *
o
)

1323 *
ù
 = 
	`td_v¨
(
gjv
->
o
, o, o->
off1
);

1324 
göt
 
ödex
;

1326 
ödex
 = 
	`gtk_combo_box_gë_a˘ive
(
	`GTK_COMBO_BOX
(
c
->
combo
));

1327 *
ù
 = 
o
->
posvÆ
[
ödex
].
ovÆ
;

1328 
	}
}

1330 
	$g›t_h™dÀ_ch™ged
(
g›t
 *gopt)

1332 
fio_›ti⁄
 *
o
 = &
fio_›ti⁄s
[
g›t
->
›t_ödex
];

1333 
g›t_job_võw
 *
gjv
 = 
g›t
->gjv;

1335 
g›t
->
›t_ty≥
) {

1336 
GOPT_COMBO_INT
: {

1337 
g›t_combo
 *
c
;

1339 
c
 = 
	`c⁄èöî_of
(
g›t
, 
g›t_combo
, gopt);

1340 
	`g›t_h™dÀ_combo_öt_ch™ged
(
gjv
, 
c
, 
o
);

1343 
GOPT_COMBO_STR
: {

1344 
g›t_combo
 *
c
;

1346 
c
 = 
	`c⁄èöî_of
(
g›t
, 
g›t_combo
, gopt);

1347 
	`g›t_h™dÀ_combo_°r_ch™ged
(
gjv
, 
c
, 
o
);

1350 
GOPT_INT
: {

1351 
g›t_öt
 *
i
;

1353 
i
 = 
	`c⁄èöî_of
(
g›t
, 
g›t_öt
, gopt);

1354 
	`g›t_h™dÀ_öt_ch™ged
(
gjv
, 
i
, 
o
);

1357 
GOPT_BOOL
: {

1358 
g›t_boﬁ
 *
b
;

1360 
b
 = 
	`c⁄èöî_of
(
g›t
, 
g›t_boﬁ
, gopt);

1361 
	`g›t_h™dÀ_boﬁ_ch™ged
(
gjv
, 
b
, 
o
);

1364 
GOPT_STR
: {

1365 
g›t_°r
 *
s
;

1367 
s
 = 
	`c⁄èöî_of
(
g›t
, 
g›t_°r
, gopt);

1368 
	`g›t_h™dÀ_°r_ch™ged
(
gjv
, 
s
, 
o
);

1371 
GOPT_STR_VAL
: {

1372 
g›t_°r_vÆ
 *
s
;

1374 
s
 = 
	`c⁄èöî_of
(
g›t
, 
g›t_°r_vÆ
, gopt);

1375 
	`g›t_h™dÀ_°r_vÆ_ch™ged
(
gjv
, 
s
, 
o
);

1378 
GOPT_RANGE
: {

1379 
g›t_ønge
 *
r
;

1381 
r
 = 
	`c⁄èöî_of
(
g›t
, 
g›t_ønge
, gopt);

1382 
	`g›t_h™dÀ_ønge_ch™ged
(
gjv
, 
r
, 
o
);

1385 
GOPT_STR_MULTI
: {

1386 
g›t_°r_mu…i
 *
m
;

1388 
m
 = 
	`c⁄èöî_of
(
g›t
, 
g›t_°r_mu…i
, gopt);

1389 
	`g›t_h™dÀ_°r_mu…i_ch™ged
(
gjv
, 
m
, 
o
);

1393 
	`log_îr
("gfio: bad o±i⁄Åy≥: %d\n", 
g›t
->
›t_ty≥
);

1396 
	}
}

1398 
	$g›t_ªp‹t_upd©e_°©us
(
g›t_job_võw
 *
gjv
)

1400 
gfio_˛õ¡
 *
gc
 = 
gjv
->
˛õ¡
;

1401 
tmp
[80];

1403 
	`•rötf
(
tmp
, "\nCom∂ëed wôhÉº‹: %d\n", 
gc
->
upd©e_job_°©us
);

1404 
	`gfio_ªp‹t_öfo
(
gc
->
ge
->
ui
, "Upd©êjob", 
tmp
);

1405 
	}
}

1407 
	$g›t_h™dÀ_ch™ged_›ti⁄s
(
g›t_job_võw
 *
gjv
)

1409 
gfio_˛õ¡
 *
gc
 = 
gjv
->
˛õ¡
;

1410 
Êi°_hód
 *
íåy
;

1411 
uöt64_t
 
waôid
 = 0;

1412 
g›t
 *gopt;

1413 
ªt
;

1415 
	`Êi°_f‹_óch
(
íåy
, &
gjv
->
ch™ged_li°
) {

1416 
g›t
 = 
	`Êi°_íåy
(
íåy
, g›t, 
ch™ged_li°
);

1417 
	`g›t_h™dÀ_ch™ged
(
g›t
);

1420 
gc
->
upd©e_job_°©us
 = 0;

1421 
gc
->
upd©e_job_d⁄e
 = 0;

1423 
ªt
 = 
	`fio_˛õ¡_upd©e_›ti⁄s
(
gc
->
˛õ¡
, 
gjv
->
o
, &
waôid
);

1424 i‡(
ªt
)

1425 
d⁄e
;

1427 
ªt
 = 
	`fio_˛õ¡_waô_f‹_ª∂y
(
gc
->
˛õ¡
, 
waôid
);

1428 i‡(
ªt
)

1429 
d⁄e
;

1431 
	`as£π
(
gc
->
upd©e_job_d⁄e
);

1432 i‡(
gc
->
upd©e_job_°©us
)

1433 
d⁄e
;

1435 !
	`Êi°_em±y
(&
gjv
->
ch™ged_li°
)) {

1436 
g›t
 = 
	`Êi°_íåy
(
gjv
->
ch™ged_li°
.
√xt
, gopt, changed_list);

1437 
	`Êi°_dñ_öô
(&
g›t
->
ch™ged_li°
);

1440 
d⁄e
:

1441 
	`g›t_dülog_upd©e_≠∂y_buâ⁄
(
gjv
);

1442  
ªt
;

1443 
	}
}

1445 
göt
 
	$g›t_dülog_ˇn˚l
(
göt
 
ª•⁄£
)

1447 
ª•⁄£
) {

1448 
GTK_RESPONSE_NONE
:

1449 
GTK_RESPONSE_REJECT
:

1450 
GTK_RESPONSE_DELETE_EVENT
:

1451 
GTK_RESPONSE_CANCEL
:

1452 
GTK_RESPONSE_NO
:

1457 
	}
}

1459 
göt
 
	$g›t_dülog_d⁄e
(
göt
 
ª•⁄£
)

1461 
ª•⁄£
) {

1462 
GTK_RESPONSE_ACCEPT
:

1463 
GTK_RESPONSE_OK
:

1464 
GTK_RESPONSE_YES
:

1469 
	}
}

1471 
	$g›t_h™dÀ_›ti⁄_dülog
(
g›t_job_võw
 *
gjv
)

1473 
göt
 
ª•⁄£
;

1476 
ª•⁄£
 = 
	`gtk_dülog_run
(
	`GTK_DIALOG
(
gjv
->
dülog
));

1478 i‡(
	`g›t_dülog_ˇn˚l
(
ª•⁄£
) ||

1479 
	`g›t_dülog_d⁄e
(
ª•⁄£
))

1485 
	`g›t_h™dÀ_ch™ged_›ti⁄s
(
gjv
);

1486 
	`g›t_ªp‹t_upd©e_°©us
(
gjv
);

1489 i‡(
	`g›t_dülog_ˇn˚l
(
ª•⁄£
))

1492 
	`g›t_h™dÀ_ch™ged_›ti⁄s
(
gjv
);

1493 
	}
}

1495 
	$g›t_job_ch™ged
(
GtkComboBox
 *
box
, 
gpoöãr
 
d©a
)

1497 
g›t_job_võw
 *
gjv
 = (g›t_job_võw *Ë
d©a
;

1498 
gfio_˛õ¡_›ti⁄s
 *
gco
 = 
NULL
;

1499 
gfio_˛õ¡
 *
gc
 = 
gjv
->
˛õ¡
;

1500 
Êi°_hód
 *
íåy
;

1501 
gch¨
 *
job
;

1507 i‡(!
	`Êi°_em±y
(&
gjv
->
ch™ged_li°
)) {

1508 
	`gfio_ªp‹t_öfo
(
gc
->
ge
->
ui
, "Internal Error", "Modified options on job switch.\nThat shouldÇot beÖossible!\n");

1512 
job
 = 
	`gtk_combo_box_ãxt_gë_a˘ive_ãxt
(
	`GTK_COMBO_BOX_TEXT
(
gjv
->
job_combo
));

1513 
	`Êi°_f‹_óch
(
íåy
, &
gc
->
o_li°
) {

1514 c⁄° *
«me
;

1516 
gco
 = 
	`Êi°_íåy
(
íåy
, 
gfio_˛õ¡_›ti⁄s
, 
li°
);

1517 
«me
 = 
gco
->
o
.name;

1518 i‡(!
«me
 || !
	`°æí
(name))

1519 
«me
 = "Default job";

1521 i‡(!
	`°rcmp
(
«me
, 
job
))

1524 
gco
 = 
NULL
;

1527 i‡(!
gco
) {

1528 
	`gfio_ªp‹t_öfo
(
gc
->
ge
->
ui
, "Internal Error", "CouldÇot find job description.\nThat shouldÇot beÖossible!\n");

1532 
gjv
->
ö_job_swôch
 = 1;

1533 
	`g›t_£t_›ti⁄s
(
gjv
, &
gco
->
o
);

1534 
gjv
->
ö_job_swôch
 = 0;

1535 
	}
}

1537 
	$g›t_gë_›ti⁄s_wödow
(
GtkWidgë
 *
wödow
, 
gfio_˛õ¡
 *
gc
)

1539 
GtkWidgë
 *
dülog
, *
nŸebook
, *
vbox
, *
t›vbox
, *
combo
;

1540 
gfio_˛õ¡_›ti⁄s
 *
gco
;

1541 
Êi°_hód
 *
íåy
;

1542 
g›t_job_võw
 *
gjv
;

1544 
dülog
 = 
	`gtk_dülog_√w_wôh_buâ⁄s
("Fio options",

1545 
	`GTK_WINDOW
(
wödow
), 
GTK_DIALOG_DESTROY_WITH_PARENT
,

1546 
GTK_STOCK_OK
, 
GTK_RESPONSE_ACCEPT
,

1547 
GTK_STOCK_APPLY
, 
GTK_RESPONSE_APPLY
,

1548 
GTK_STOCK_CANCEL
, 
GTK_RESPONSE_REJECT
, 
NULL
);

1550 
combo
 = 
	`gtk_combo_box_ãxt_√w
();

1551 
	`Êi°_f‹_óch
(
íåy
, &
gc
->
o_li°
) {

1552 
thªad_›ti⁄s
 *
o
;

1553 c⁄° *
«me
;

1555 
gco
 = 
	`Êi°_íåy
(
íåy
, 
gfio_˛õ¡_›ti⁄s
, 
li°
);

1556 
o
 = &
gco
->o;

1557 
«me
 = 
o
->name;

1558 i‡(!
«me
 || !
	`°æí
(name))

1559 
«me
 = "Default job";

1561 
	`gtk_combo_box_ãxt_≠≥nd_ãxt
(
	`GTK_COMBO_BOX_TEXT
(
combo
), 
«me
);

1563 
	`gtk_combo_box_£t_a˘ive
(
	`GTK_COMBO_BOX
(
combo
), 0);

1565 
	`gtk_widgë_£t_size_ªque°
(
	`GTK_WIDGET
(
dülog
), 1024, 768);

1567 
t›vbox
 = 
	`gtk_dülog_gë_c⁄ã¡_¨ó
(
	`GTK_DIALOG
(
dülog
));

1568 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
t›vbox
), 
combo
, 
FALSE
, FALSE, 5);

1570 
vbox
 = 
	`gtk_vbox_√w
(
TRUE
, 5);

1571 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
t›vbox
), 
vbox
, 
TRUE
, TRUE, 5);

1573 
nŸebook
 = 
	`gtk_nŸebook_√w
();

1574 
	`gtk_nŸebook_£t_s¸ﬁœbÀ
(
	`GTK_NOTEBOOK
(
nŸebook
), 1);

1575 
	`gtk_nŸebook_p›up_íabÀ
(
	`GTK_NOTEBOOK
(
nŸebook
));

1576 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox
), 
nŸebook
, 
TRUE
, TRUE, 5);

1578 
gjv
 = 
	`ˇŒoc
(1, (*gjv));

1579 
	`INIT_FLIST_HEAD
(&
gjv
->
ch™ged_li°
);

1580 
gco
 = 
	`Êi°_íåy
(
gc
->
o_li°
.
√xt
, 
gfio_˛õ¡_›ti⁄s
, 
li°
);

1581 
gjv
->
o
 = &
gco
->o;

1582 
gjv
->
dülog
 = dialog;

1583 
gjv
->
˛õ¡
 = 
gc
;

1584 
gjv
->
job_combo
 = 
combo
;

1585 
	`g›t_add_group_èbs
(
nŸebook
, 
gjv
);

1586 
	`g›t_add_›ti⁄s
(
gjv
, &
gco
->
o
);

1587 
	`g›t_dülog_upd©e_≠∂y_buâ⁄
(
gjv
);

1589 
	`g_sig«l_c⁄√˘
(
	`G_OBJECT
(
combo
), "ch™ged", 
	`G_CALLBACK
(
g›t_job_ch™ged
), 
gjv
);

1591 
	`gtk_widgë_show_Æl
(
dülog
);

1593 
	`g›t_h™dÀ_›ti⁄_dülog
(
gjv
);

1595 
	`gtk_widgë_de°roy
(
dülog
);

1596 
	`‰ì
(
gjv
);

1597 
	}
}

1602 
	$g›t_öô
()

1604 
i
;

1606 
g›t_dï_åì
 = 
	`g_node_√w
(
NULL
);

1608 
i
 = 0; 
fio_›ti⁄s
[i].
«me
; i++) {

1609 
fio_›ti⁄
 *
o
 = &
fio_›ti⁄s
[
i
];

1610 
GNode
 *
node
, *
≈¨ít
;

1616 
node
 = 
	`g_node_√w
(
o
);

1617 
≈¨ít
 = 
g›t_dï_åì
;

1618 i‡(
o
->
∑ª¡
) {

1619 
fio_›ti⁄
 *
∑ª¡
;

1621 
∑ª¡
 = 
	`fio_›ti⁄_föd
(
o
->parent);

1622 
≈¨ít
 = 
	`g_node_föd
(
g›t_dï_åì
, 
G_IN_ORDER
, 
G_TRAVERSE_ALL
, 
∑ª¡
);

1623 i‡(!
≈¨ít
) {

1624 
	`log_îr
("fio: didÇŸ födÖ¨íà%†f‹ o± %s\n", 
o
->
«me
, o->
∑ª¡
);

1625 
≈¨ít
 = 
g›t_dï_åì
;

1629 
	`g_node_ö£π
(
≈¨ít
, -1, 
node
);

1631 
	}
}

1633 
	$g›t_exô
()

1635 
	`g_node_de°roy
(
g›t_dï_åì
);

1636 
g›t_dï_åì
 = 
NULL
;

1637 
	}
}

	@/home/terekhov/tmp/fio/fio/goptions.h

1 #i‚de‡
GFIO_OPTIONS_H


2 
	#GFIO_OPTIONS_H


	)

4 
g›t_gë_›ti⁄s_wödow
(
GtkWidgë
 *
wödow
, 
gfio_˛õ¡
 *
gc
);

5 
g›t_öô
();

6 
g›t_exô
();

	@/home/terekhov/tmp/fio/fio/graph.c

23 
	~<°rög.h
>

24 
	~<mÆloc.h
>

25 
	~<m©h.h
>

26 
	~<as£π.h
>

27 
	~<°dlib.h
>

29 
	~<ˇúo.h
>

30 
	~<gtk/gtk.h
>

32 
	~"tickm¨ks.h
"

33 
	~"gøph.h
"

34 
	~"Êi°.h
"

35 
	~"lib/¥io_åì.h
"

36 
	~"ˇúo_ãxt_hñ≥rs.h
"

41 
	#TOOLTIP_DELTA
 0.08

	)

43 
	sxyvÆue
 {

44 
	mx
, 
	my
;

48 
	mGV_F_ON_PRIO
 = 1,

49 
	mGV_F_PRIO_SKIP
 = 2,

52 
	sgøph_vÆue
 {

53 
Êi°_hód
 
	mli°
;

54 
¥io_åì_node
 
	mnode
;

55 
Êi°_hód
 
	mÆüs
;

56 
	mÊags
;

57 *
	mtoﬁtù
;

58 *
	mvÆue
;

61 
	sgøph_œbñ
 {

62 
Êi°_hód
 
	mli°
;

63 *
	mœbñ
;

64 
Êi°_hód
 
	mvÆue_li°
;

65 
¥io_åì_roŸ
 
	m¥io_åì
;

66 
	mr
, 
	mg
, 
	mb
;

67 
	mhide
;

68 
	mvÆue_cou¡
;

69 
gøph
 *
	m∑ª¡
;

72 
	stick_vÆue
 {

73 
	moff£t
;

74 
	mvÆue
;

77 
	sgøph
 {

78 *
	mtôÀ
;

79 *
	mxtôÀ
;

80 *
	mytôÀ
;

81 
	mxdim
, 
	mydim
;

82 
	mxoff£t
, 
	myoff£t
;

83 
Êi°_hód
 
	mœbñ_li°
;

84 
	m≥r_œbñ_limô
;

85 c⁄° *
	mf⁄t
;

86 
gøph_axis_unô_ch™ge_ˇŒback
 
	mx_axis_unô_ch™ge_ˇŒback
;

87 
gøph_axis_unô_ch™ge_ˇŒback
 
	my_axis_unô_ch™ge_ˇŒback
;

88 
	mba£_off£t
;

89 
	md⁄t_gøph_Æl_zî€s
;

90 
	mÀ·_exåa
;

91 
	mright_exåa
;

92 
	mt›_exåa
;

93 
	mbŸtom_exåa
;

95 
	mxtick_zîo
;

96 
	mxtick_dñè
;

97 
	mxtick_zîo_vÆ
;

98 
	mxtick_⁄e_vÆ
;

99 
	mytick_zîo
;

100 
	mytick_dñè
;

101 
	mytick_zîo_vÆ
;

102 
	mytick_⁄e_vÆ
;

105 
	$gøph_£t_size
(
gøph
 *
g
, 
xdim
, 
ydim
)

107 
g
->
xdim
 = xdim;

108 
g
->
ydim
 = ydim;

109 
	}
}

111 
	$gøph_£t_posôi⁄
(
gøph
 *
g
, 
xoff£t
, 
yoff£t
)

113 
g
->
xoff£t
 = xoffset;

114 
g
->
yoff£t
 = yoffset;

115 
	}
}

117 
gøph
 *
	$gøph_√w
(
xdim
, 
ydim
, c⁄° *
f⁄t
)

119 
gøph
 *
g
;

121 
g
 = 
	`ˇŒoc
(1, (*g));

122 
	`INIT_FLIST_HEAD
(&
g
->
œbñ_li°
);

123 
	`gøph_£t_size
(
g
, 
xdim
, 
ydim
);

124 
g
->
≥r_œbñ_limô
 = -1;

125 
g
->
f⁄t
 = font;

126 i‡(!
g
->
f⁄t
)

127 
g
->
f⁄t
 = 
GRAPH_DEFAULT_FONT
;

128  
g
;

129 
	}
}

131 
	$gøph_£t_f⁄t
(
gøph
 *
g
, c⁄° *
f⁄t
)

133 
g
->
f⁄t
 = font;

134 
	}
}

136 
	$gøph_x_axis_unô_ch™ge_nŸify
(
gøph
 *
g
, 
gøph_axis_unô_ch™ge_ˇŒback
 
f
)

138 
g
->
x_axis_unô_ch™ge_ˇŒback
 = 
f
;

139 
	}
}

141 
	$gøph_y_axis_unô_ch™ge_nŸify
(
gøph
 *
g
, 
gøph_axis_unô_ch™ge_ˇŒback
 
f
)

143 
g
->
y_axis_unô_ch™ge_ˇŒback
 = 
f
;

144 
	}
}

146 
	$cou¡_œbñs
(
gøph
 *
g
)

148 
Êi°_hód
 *
íåy
;

149 
cou¡
 = 0;

151 
	`Êi°_f‹_óch
(
íåy
, &
g
->
œbñ_li°
)

152 
cou¡
++;

154  
cou¡
;

155 
	}
}

157 
	$cou¡_vÆues
(
gøph_œbñ
 *
l
)

159 
Êi°_hód
 *
íåy
;

160 
cou¡
 = 0;

162 
	`Êi°_f‹_óch
(
íåy
, &
l
->
vÆue_li°
)

163 
cou¡
++;

165  
cou¡
;

166 
	}
}

168 (*
	tdoubÀ_com∑øt‹
)(
	ta
, 
	tb
);

170 
	$mödoubÀ
(
a
, 
b
)

172  
a
 < 
b
 ?á : b;

173 
	}
}

175 
	$maxdoubÀ
(
a
, 
b
)

177  
a
 < 
b
 ? b :á;

178 
	}
}

180 
	$föd_doubÀ_vÆues
(
gøph_œbñ
 *
l
, 
doubÀ_com∑øt‹
 
cmp
)

182 
Êi°_hód
 *
íåy
;

183 
™swî
 = 0.0, 
tmp
;

184 
fú°
 = 1;

186 i‡(
	`Êi°_em±y
(&
l
->
vÆue_li°
))

189 
	`Êi°_f‹_óch
(
íåy
, &
l
->
vÆue_li°
) {

190 
gøph_vÆue
 *
i
;

192 
i
 = 
	`Êi°_íåy
(
íåy
, 
gøph_vÆue
, 
li°
);

193 
tmp
 = *(*Ë
i
->
vÆue
;

194 i‡(
fú°
) {

195 
™swî
 = 
tmp
;

196 
fú°
 = 0;

198 
™swî
 = 
	`cmp
◊nswî, 
tmp
);

201  
™swî
;

202 
	}
}

204 
	$föd_doubÀ_d©a
(
gøph
 *
g
, 
doubÀ_com∑øt‹
 
cmp
)

206 
Êi°_hód
 *
íåy
;

207 
gøph_œbñ
 *
i
;

208 
fú°
 = 1;

209 
™swî
, 
tmp
;

211 i‡(
	`Êi°_em±y
(&
g
->
œbñ_li°
))

214 
	`Êi°_f‹_óch
(
íåy
, &
g
->
œbñ_li°
) {

215 
i
 = 
	`Êi°_íåy
(
íåy
, 
gøph_œbñ
, 
li°
);

216 
tmp
 = 
	`föd_doubÀ_vÆues
(
i
, 
cmp
);

217 i‡(
fú°
) {

218 
™swî
 = 
tmp
;

219 
fú°
 = 0;

221 
™swî
 = 
	`cmp
(
tmp
,ánswer);

224  
™swî
;

225 
	}
}

227 
	$föd_mö_d©a
(
gøph
 *
g
)

229  
	`föd_doubÀ_d©a
(
g
, 
mödoubÀ
);

230 
	}
}

232 
	$föd_max_d©a
(
gøph
 *
g
)

234  
	`föd_doubÀ_d©a
(
g
, 
maxdoubÀ
);

235 
	}
}

237 
	$døw_b¨s
(
gøph
 *
bg
, 
ˇúo_t
 *
¸
, 
gøph_œbñ
 *
lb
,

238 
œbñ_off£t
, 
b¨_width
,

239 
möd©a
, 
maxd©a
)

241 
Êi°_hód
 *
íåy
;

242 
x1
, 
y1
, 
x2
, 
y2
;

243 
b¨_num
 = 0;

244 
domaö
, 
ønge
, 
v
;

246 
domaö
 = (
maxd©a
 - 
möd©a
);

247 
ønge
 = (Ë
bg
->
ydim
 * 0.80;

248 
	`ˇúo_°roke
(
¸
);

249 
	`Êi°_f‹_óch
(
íåy
, &
lb
->
vÆue_li°
) {

250 
gøph_vÆue
 *
i
;

252 
i
 = 
	`Êi°_íåy
(
íåy
, 
gøph_vÆue
, 
li°
);

254 
x1
 = 
œbñ_off£t
 + (Ë
b¨_num
 * 
b¨_width
 + (bar_width * 0.05);

255 
x2
 = 
x1
 + 
b¨_width
 * 0.90;

256 
y2
 = 
bg
->
ydim
 * 0.90;

257 
v
 = *(*Ë
i
->
vÆue
;

258 
y1
 = 
y2
 - (((
v
 - 
möd©a
Ë/ 
domaö
Ë* 
ønge
);

259 
	`ˇúo_move_to
(
¸
, 
x1
, 
y1
);

260 
	`ˇúo_löe_to
(
¸
, 
x1
, 
y2
);

261 
	`ˇúo_löe_to
(
¸
, 
x2
, 
y2
);

262 
	`ˇúo_löe_to
(
¸
, 
x2
, 
y1
);

263 
	`ˇúo_˛o£_∑th
(
¸
);

264 
	`ˇúo_fûl
(
¸
);

265 
	`ˇúo_°roke
(
¸
);

266 
b¨_num
++;

268 
	}
}

270 
	$gøph_døw_comm⁄
(
gøph
 *
g
, 
ˇúo_t
 *
¸
, *
x1
,

271 *
y1
, *
x2
, *
y2
)

273 c⁄° 
shade_cﬁ
[3][3] = { { 0.55, 0.54, 0.54 },

276 
i
;

278 *
x1
 = 0.10 * 
g
->
xdim
;

279 *
x2
 = 0.95 * 
g
->
xdim
;

280 *
y1
 = 0.10 * 
g
->
ydim
;

281 *
y2
 = 0.90 * 
g
->
ydim
;

286 
	`ˇúo_£t_löe_width
(
¸
, 1.0);

287 
i
 = 0; i < 3; i++) {

288 
off£t
 = 
i
 + 1.0;

290 
	`ˇúo_£t_sour˚_rgb
(
¸
, 
shade_cﬁ
[
i
][0], shade_col[i][1], shade_col[i][2]);

291 
	`ˇúo_move_to
(
¸
, 
off£t
 + *
x1
, *
y1
 - offset);

292 
	`ˇúo_löe_to
(
¸
, *
x2
 + 
off£t
, *
y1
 - offset);

293 
	`ˇúo_löe_to
(
¸
, *
x2
 + 
off£t
, *
y2
 - offset);

294 
	`ˇúo_°roke
(
¸
);

297 
	`ˇúo_£t_sour˚_rgb
(
¸
, 0, 0, 0);

298 
	`ˇúo_£t_löe_width
(
¸
, 1.2);

300 
	`ˇúo_move_to
(
¸
, *
x1
, *
y1
);

301 
	`ˇúo_löe_to
(
¸
, *
x1
, *
y2
);

302 
	`ˇúo_löe_to
(
¸
, *
x2
, *
y2
);

303 
	`ˇúo_löe_to
(
¸
, *
x2
, *
y1
);

304 
	`ˇúo_löe_to
(
¸
, *
x1
, *
y1
);

305 
	`ˇúo_°roke
(
¸
);

307 
	`døw_˚¡îed_ãxt
(
¸
, 
g
->
f⁄t
, g->
xdim
 / 2, g->
ydim
 / 20, 20.0, g->
tôÀ
);

308 
	`døw_˚¡îed_ãxt
(
¸
, 
g
->
f⁄t
, g->
xdim
 / 2, g->
ydim
 * 0.97, 14.0, g->
xtôÀ
);

309 
	`døw_vîtiˇl_˚¡îed_ãxt
(
¸
, 
g
->
f⁄t
, g->
xdim
 * 0.02, g->
ydim
 / 2, 14.0, g->
ytôÀ
);

310 
	`ˇúo_°roke
(
¸
);

311 
	}
}

313 
	$gøph_døw_x_ticks
(
gøph
 *
g
, 
ˇúo_t
 *
¸
,

314 
x1
, 
y1
, 
x2
, 
y2
,

315 
möx
, 
maxx
, 
¡icks
, 
add_tm_ãxt
)

317 
tickm¨k
 *
tm
;

318 
tx
;

319 
i
, 
powî_of_ãn
;

320 
dash
[] = { 1.0, 2.0 };

322 
¡icks
 = 
	`ˇlc_tickm¨ks
(
möx
, 
maxx
,Çticks, &
tm
, &
powî_of_ãn
,

323 
g
->
x_axis_unô_ch™ge_ˇŒback
 =
NULL
, g->
ba£_off£t
);

324 i‡(
g
->
x_axis_unô_ch™ge_ˇŒback
)

325 
g
->
	`x_axis_unô_ch™ge_ˇŒback
(g, 
powî_of_ãn
);

327 
i
 = 0; i < 
¡icks
; i++) {

328 
tx
 = (((
tm
[
i
].
vÆue
Ë- 
möx
Ë/ (
maxx
 - möx)Ë* (
x2
 - 
x1
) + x1;

333 i‡(!
i
) {

334 
g
->
xtick_zîo
 = 
tx
;

335 
g
->
xtick_zîo_vÆ
 = 
tm
[0].
vÆue
;

336 } i‡(
i
 == 1) {

337 
g
->
xtick_dñè
 = (
tm
[1].
vÆue
 -Åm[0].vÆueË/ (
tx
 - g->
xtick_zîo
);

338 
g
->
xtick_⁄e_vÆ
 = 
tm
[1].
vÆue
;

342 i‡(
x1
 - 
tx
 > 0.01 ||Åx - 
x2
 > 0.01)

346 
	`ˇúo_£t_löe_width
(
¸
, 1.0);

347 
	`ˇúo_move_to
(
¸
, 
tx
, 
y2
);

348 
	`ˇúo_löe_to
(
¸
, 
tx
, 
y2
 + (y2 - 
y1
) * 0.03);

349 
	`ˇúo_°roke
(
¸
);

352 
	`ˇúo_ßve
(
¸
);

353 
	`ˇúo_£t_dash
(
¸
, 
dash
, 2, 0.66);

354 
	`ˇúo_£t_löe_width
(
¸
, 0.33);

355 
	`ˇúo_move_to
(
¸
, 
tx
, 
y1
);

356 
	`ˇúo_löe_to
(
¸
, 
tx
, 
y2
);

357 
	`ˇúo_°roke
(
¸
);

358 
	`ˇúo_ª°‹e
(
¸
);

360 i‡(!
add_tm_ãxt
)

364 
	`døw_˚¡îed_ãxt
(
¸
, 
g
->
f⁄t
, 
tx
, 
y2
 * 1.04, 12.0, 
tm
[
i
].
°rög
);

365 
	`ˇúo_°roke
(
¸
);

367 
	}
}

369 
	$gøph_døw_y_ticks
(
gøph
 *
g
, 
ˇúo_t
 *
¸
,

370 
x1
, 
y1
, 
x2
, 
y2
,

371 
möy
, 
maxy
, 
¡icks
, 
add_tm_ãxt
)

373 
tickm¨k
 *
tm
;

374 
ty
;

375 
i
, 
powî_of_ãn
;

376 
dash
[] = { 1.0, 2.0 };

378 
¡icks
 = 
	`ˇlc_tickm¨ks
(
möy
, 
maxy
,Çticks, &
tm
, &
powî_of_ãn
,

379 
g
->
y_axis_unô_ch™ge_ˇŒback
 =
NULL
, g->
ba£_off£t
);

380 i‡(
g
->
y_axis_unô_ch™ge_ˇŒback
)

381 
g
->
	`y_axis_unô_ch™ge_ˇŒback
(g, 
powî_of_ãn
);

388 
maxy
 = 
tm
[
¡icks
 - 1].
vÆue
;

390 
i
 = 0; i < 
¡icks
; i++) {

391 
ty
 = 
y2
 - (((
tm
[
i
].
vÆue
Ë- 
möy
Ë/ (
maxy
 - möy)Ë* (y2 - 
y1
);

396 i‡(!
i
) {

397 
g
->
ytick_zîo
 = 
ty
;

398 
g
->
ytick_zîo_vÆ
 = 
tm
[0].
vÆue
;

399 } i‡(
i
 == 1) {

400 
g
->
ytick_dñè
 = (
tm
[1].
vÆue
 -Åm[0].vÆueË/ (
ty
 - g->
ytick_zîo
);

401 
g
->
ytick_⁄e_vÆ
 = 
tm
[1].
vÆue
;

405 i‡(
y1
 - 
ty
 > 0.01 ||Åy - 
y2
 > 0.01)

409 
	`ˇúo_move_to
(
¸
, 
x1
, 
ty
);

410 
	`ˇúo_löe_to
(
¸
, 
x1
 - (
x2
 - x1Ë* 0.02, 
ty
);

411 
	`ˇúo_°roke
(
¸
);

414 
	`ˇúo_ßve
(
¸
);

415 
	`ˇúo_£t_dash
(
¸
, 
dash
, 2, 0.66);

416 
	`ˇúo_£t_löe_width
(
¸
, 0.33);

417 
	`ˇúo_move_to
(
¸
, 
x1
, 
ty
);

418 
	`ˇúo_löe_to
(
¸
, 
x2
, 
ty
);

419 
	`ˇúo_°roke
(
¸
);

420 
	`ˇúo_ª°‹e
(
¸
);

422 i‡(!
add_tm_ãxt
)

426 
	`døw_right_ju°ifõd_ãxt
(
¸
, 
g
->
f⁄t
, 
x1
 - (
x2
 - x1Ë* 0.025, 
ty
, 12.0, 
tm
[
i
].
°rög
);

427 
	`ˇúo_°roke
(
¸
);

433  
maxy
;

434 
	}
}

436 
	$b¨_gøph_døw
(
gøph
 *
bg
, 
ˇúo_t
 *
¸
)

438 
x1
, 
y1
, 
x2
, 
y2
;

439 
•a˚_≥r_œbñ
, 
b¨_width
;

440 
œbñ_off£t
, 
möd©a
, 
maxd©a
;

441 
i
, 
∆abñs
;

442 
gøph_œbñ
 *
lb
;

443 
Êi°_hód
 *
íåy
;

445 
	`ˇúo_ßve
(
¸
);

446 
	`ˇúo_å™¶©e
(
¸
, 
bg
->
xoff£t
, bg->
yoff£t
);

447 
	`gøph_døw_comm⁄
(
bg
, 
¸
, &
x1
, &
y1
, &
x2
, &
y2
);

449 
∆abñs
 = 
	`cou¡_œbñs
(
bg
);

450 
•a˚_≥r_œbñ
 = (
x2
 - 
x1
Ë/ (Ë
∆abñs
;

456 
möd©a
 = 
	`föd_mö_d©a
(
bg
);

457 i‡(
möd©a
 > 0)

458 
möd©a
 = 0;

460 
maxd©a
 = 
	`föd_max_d©a
(
bg
);

462 i‡(
	`Ábs
(
maxd©a
 - 
möd©a
) < 1e-20) {

463 
	`døw_˚¡îed_ãxt
(
¸
, 
bg
->
f⁄t
,

464 
x1
 + (
x2
 - x1) / 2.0,

465 
y1
 + (
y2
 - y1) / 2.0, 20.0, "No good data");

469 
maxd©a
 = 
	`gøph_døw_y_ticks
(
bg
, 
¸
, 
x1
, 
y1
, 
x2
, 
y2
, 
möd©a
, maxdata, 10, 1);

470 
i
 = 0;

471 
	`Êi°_f‹_óch
(
íåy
, &
bg
->
œbñ_li°
) {

472 
nvÆues
;

474 
lb
 = 
	`Êi°_íåy
(
íåy
, 
gøph_œbñ
, 
li°
);

475 
nvÆues
 = 
	`cou¡_vÆues
(
lb
);

476 
b¨_width
 = (
•a˚_≥r_œbñ
 - s∑˚_≥r_œbñ * 0.2Ë/ (Ë
nvÆues
;

477 
œbñ_off£t
 = 
bg
->
xdim
 * 0.1 + 
•a˚_≥r_œbñ
 * (Ë
i
 + space_per_label * 0.1;

478 
	`døw_b¨s
(
bg
, 
¸
, 
lb
, 
œbñ_off£t
, 
b¨_width
, 
möd©a
, 
maxd©a
);

480 
	`døw_˚¡îed_ãxt
(
¸
, 
bg
->
f⁄t
, 
x1
 + 
•a˚_≥r_œbñ
 * (
i
 + 0.5), bg->
ydim
 * 0.93,

481 12.0, 
lb
->
œbñ
);

482 
i
++;

484 
	`ˇúo_°roke
(
¸
);

485 
	`ˇúo_ª°‹e
(
¸
);

486 
	}
}

488 (*
	txy_vÆue_exåa˘‹
)(
	tgøph_vÆue
 *
	tv
);

490 
	$gëx
(
gøph_vÆue
 *
v
)

492 
xyvÆue
 *
xy
 = 
v
->
vÆue
;

493  
xy
->
x
;

494 
	}
}

496 
	$gëy
(
gøph_vÆue
 *
v
)

498 
xyvÆue
 *
xy
 = 
v
->
vÆue
;

499  
xy
->
y
;

500 
	}
}

502 
	$föd_xy_vÆue
(
gøph
 *
g
, 
xy_vÆue_exåa˘‹
 
gëvÆue
, 
doubÀ_com∑øt‹
 
cmp
)

504 
tmp
, 
™swî
 = 0.0;

505 
gøph_œbñ
 *
i
;

506 
gøph_vÆue
 *
j
;

507 
Êi°_hód
 *
jíåy
, *
íåy
;

508 
fú°
 = 1;

510 
	`Êi°_f‹_óch
(
íåy
, &
g
->
œbñ_li°
) {

511 
i
 = 
	`Êi°_íåy
(
íåy
, 
gøph_œbñ
, 
li°
);

513 
	`Êi°_f‹_óch
(
jíåy
, &
i
->
vÆue_li°
) {

514 
j
 = 
	`Êi°_íåy
(
jíåy
, 
gøph_vÆue
, 
li°
);

515 
tmp
 = 
	`gëvÆue
(
j
);

516 i‡(
fú°
) {

517 
fú°
 = 0;

518 
™swî
 = 
tmp
;

520 
™swî
 = 
	`cmp
(
tmp
,ánswer);

524  
™swî
;

525 
	}
}

527 
	$löe_gøph_døw
(
gøph
 *
g
, 
ˇúo_t
 *
¸
)

529 
x1
, 
y1
, 
x2
, 
y2
;

530 
möx
, 
möy
, 
maxx
, 
maxy
, 
gmöx
, 
gmöy
, 
gmaxx
, 
gmaxy
;

531 
tx
, 
ty
, 
t›_exåa
, 
bŸtom_exåa
, 
À·_exåa
, 
right_exåa
;

532 
gøph_œbñ
 *
i
;

533 
gøph_vÆue
 *
j
;

534 
good_d©a
 = 1, 
fú°
 = 1;

535 
Êi°_hód
 *
íåy
, *
À¡ry
;

537 
	`ˇúo_ßve
(
¸
);

538 
	`ˇúo_å™¶©e
(
¸
, 
g
->
xoff£t
, g->
yoff£t
);

539 
	`gøph_døw_comm⁄
(
g
, 
¸
, &
x1
, &
y1
, &
x2
, &
y2
);

541 
möx
 = 
	`föd_xy_vÆue
(
g
, 
gëx
, 
mödoubÀ
);

542 
maxx
 = 
	`föd_xy_vÆue
(
g
, 
gëx
, 
maxdoubÀ
);

543 
möy
 = 
	`föd_xy_vÆue
(
g
, 
gëy
, 
mödoubÀ
);

550 i‡(
möy
 > 0)

551 
möy
 = 0;

553 
maxy
 = 
	`föd_xy_vÆue
(
g
, 
gëy
, 
maxdoubÀ
);

555 i‡(
	`Ábs
(
maxx
 - 
möx
Ë< 1e-20 || fabs(
maxy
 - 
möy
) < 1e-20) {

556 
good_d©a
 = 0;

557 
möx
 = 0.0;

558 
möy
 = 0.0;

559 
maxx
 = 10.0;

560 
maxy
 = 100.0;

563 
t›_exåa
 = 0.0;

564 
bŸtom_exåa
 = 0.0;

565 
À·_exåa
 = 0.0;

566 
right_exåa
 = 0.0;

568 i‡(
g
->
t›_exåa
 > 0.001)

569 
t›_exåa
 = 
	`Ábs
(
maxy
 - 
möy
Ë* 
g
->top_extra;

570 i‡(
g
->
bŸtom_exåa
 > 0.001)

571 
bŸtom_exåa
 = 
	`Ábs
(
maxy
 - 
möy
Ë* 
g
->bottom_extra;

572 i‡(
g
->
À·_exåa
 > 0.001)

573 
À·_exåa
 = 
	`Ábs
(
maxx
 - 
möx
Ë* 
g
->left_extra;

574 i‡(
g
->
right_exåa
 > 0.001)

575 
right_exåa
 = 
	`Ábs
(
maxx
 - 
möx
Ë* 
g
->right_extra;

577 
gmöx
 = 
möx
 - 
À·_exåa
;

578 
gmaxx
 = 
maxx
 + 
right_exåa
;

579 
gmöy
 = 
möy
 - 
bŸtom_exåa
;

580 
gmaxy
 = 
maxy
 + 
t›_exåa
;

582 
	`gøph_døw_x_ticks
(
g
, 
¸
, 
x1
, 
y1
, 
x2
, 
y2
, 
gmöx
, 
gmaxx
, 10, 
good_d©a
);

583 
gmaxy
 = 
	`gøph_døw_y_ticks
(
g
, 
¸
, 
x1
, 
y1
, 
x2
, 
y2
, 
gmöy
, gmaxy, 10, 
good_d©a
);

585 i‡(!
good_d©a
)

586 
skù_d©a
;

588 
	`ˇúo_£t_löe_width
(
¸
, 1.5);

589 
	`ˇúo_£t_löe_joö
(
¸
, 
CAIRO_LINE_JOIN_ROUND
);

591 
	`Êi°_f‹_óch
(
À¡ry
, &
g
->
œbñ_li°
) {

592 
i
 = 
	`Êi°_íåy
(
À¡ry
, 
gøph_œbñ
, 
li°
);

593 
fú°
 = 1;

594 i‡(
i
->
hide
 || i->
r
 < 0)

597 
	`ˇúo_£t_sour˚_rgb
(
¸
, 
i
->
r
, i->
g
, i->
b
);

598 
	`Êi°_f‹_óch
(
íåy
, &
i
->
vÆue_li°
) {

599 
j
 = 
	`Êi°_íåy
(
íåy
, 
gøph_vÆue
, 
li°
);

600 
tx
 = ((
	`gëx
(
j
Ë- 
gmöx
Ë/ (
gmaxx
 - gmöx)Ë* (
x2
 - 
x1
) + x1;

601 
ty
 = 
y2
 - ((
	`gëy
(
j
Ë- 
gmöy
Ë/ (
gmaxy
 - gmöy)Ë* (y2 - 
y1
);

602 i‡(
fú°
) {

603 
	`ˇúo_move_to
(
¸
, 
tx
, 
ty
);

604 
fú°
 = 0;

606 
	`ˇúo_löe_to
(
¸
, 
tx
, 
ty
);

608 
	`ˇúo_°roke
(
¸
);

611 
skù_d©a
:

612 
	`ˇúo_ª°‹e
(
¸
);

613 
	}
}

615 
	$£t°rög
(**
°r
, c⁄° *
vÆue
)

617 
	`‰ì
(*
°r
);

618 *
°r
 = 
	`°rdup
(
vÆue
);

619 
	}
}

621 
	$gøph_tôÀ
(
gøph
 *
bg
, c⁄° *
tôÀ
)

623 
	`£t°rög
(&
bg
->
tôÀ
,Åitle);

624 
	}
}

626 
	$gøph_x_tôÀ
(
gøph
 *
bg
, c⁄° *
tôÀ
)

628 
	`£t°rög
(&
bg
->
xtôÀ
, 
tôÀ
);

629 
	}
}

631 
	$gøph_y_tôÀ
(
gøph
 *
bg
, c⁄° *
tôÀ
)

633 
	`£t°rög
(&
bg
->
ytôÀ
, 
tôÀ
);

634 
	}
}

636 
gøph_œbñ
 *
	$gøph_föd_œbñ
(
gøph
 *
bg
,

637 c⁄° *
œbñ
)

639 
Êi°_hód
 *
íåy
;

640 
gøph_œbñ
 *
i
;

642 
	`Êi°_f‹_óch
(
íåy
, &
bg
->
œbñ_li°
) {

643 
i
 = 
	`Êi°_íåy
(
íåy
, 
gøph_œbñ
, 
li°
);

645 i‡(
	`°rcmp
(
œbñ
, 
i
->label) == 0)

646  
i
;

649  
NULL
;

650 
	}
}

652 
gøph_œbñ_t
 
	$gøph_add_œbñ
(
gøph
 *
bg
, c⁄° *
œbñ
)

654 
gøph_œbñ
 *
i
;

656 
i
 = 
	`gøph_föd_œbñ
(
bg
, 
œbñ
);

657 i‡(
i
)

658  
i
;

659 
i
 = 
	`ˇŒoc
(1, (*i));

660 
	`INIT_FLIST_HEAD
(&
i
->
vÆue_li°
);

661 
i
->
∑ª¡
 = 
bg
;

662 
	`£t°rög
(&
i
->
œbñ
,Üabel);

663 
	`Êi°_add_èû
(&
i
->
li°
, &
bg
->
œbñ_li°
);

664 
	`INIT_PRIO_TREE_ROOT
(&
i
->
¥io_åì
);

665  
i
;

666 
	}
}

668 
	$__gøph_vÆue_dr›
(
gøph_œbñ
 *
l
, 
gøph_vÆue
 *
v
)

670 
	`Êi°_dñ_öô
(&
v
->
li°
);

671 i‡(
v
->
toﬁtù
)

672 
	`‰ì
(
v
->
toﬁtù
);

673 
	`‰ì
(
v
->
vÆue
);

674 
	`‰ì
(
v
);

675 
l
->
vÆue_cou¡
--;

676 
	}
}

678 
	$gøph_vÆue_dr›
(
gøph_œbñ
 *
l
, 
gøph_vÆue
 *
v
)

680 i‡(
v
->
Êags
 & 
GV_F_PRIO_SKIP
) {

681 
	`__gøph_vÆue_dr›
(
l
, 
v
);

688 !(
v
->
Êags
 & 
GV_F_ON_PRIO
)) {

689 
	`as£π
(!
	`Êi°_em±y
(&
v
->
Æüs
));

690 
v
 = 
	`Êi°_íåy
(v->
Æüs
.
√xt
, 
gøph_vÆue
,álias);

693 
	`¥io_åì_ªmove
(&
l
->
¥io_åì
, &
v
->
node
);

698 !
	`Êi°_em±y
(&
v
->
Æüs
)) {

699 
gøph_vÆue
 *
a
;

701 
a
 = 
	`Êi°_íåy
(
v
->
Æüs
.
√xt
, 
gøph_vÆue
,álias);

702 
	`Êi°_dñ_öô
(&
a
->
Æüs
);

704 
	`__gøph_vÆue_dr›
(
l
, 
a
);

707 
	`__gøph_vÆue_dr›
(
l
, 
v
);

708 
	}
}

710 
	$gøph_œbñ_add_vÆue
(
gøph_œbñ
 *
i
, *
vÆue
,

711 c⁄° *
toﬁtù
)

713 
gøph
 *
g
 = 
i
->
∑ª¡
;

714 
gøph_vÆue
 *
x
;

716 
x
 = 
	`mÆloc
((*x));

717 
	`mem£t
(
x
, 0, (*x));

718 
	`INIT_FLIST_HEAD
(&
x
->
Æüs
);

719 
	`INIT_FLIST_HEAD
(&
x
->
li°
);

720 
	`Êi°_add_èû
(&
x
->
li°
, &
i
->
vÆue_li°
);

721 
i
->
vÆue_cou¡
++;

722 
x
->
vÆue
 = value;

724 i‡(
toﬁtù
) {

725 
xvÆ
 = 
	`gëx
(
x
);

726 
möx
 = 
xvÆ
 - (
g
->
xtick_⁄e_vÆ
 * 
TOOLTIP_DELTA
);

727 
maxx
 = 
xvÆ
 + (
g
->
xtick_⁄e_vÆ
 * 
TOOLTIP_DELTA
);

728 
¥io_åì_node
 *
ªt
;

734 
möx
 = minx * 1000.0;

735 
maxx
 = maxx * 1000.0;

737 
	`INIT_PRIO_TREE_NODE
(&
x
->
node
);

738 
x
->
node
.
°¨t
 = 
möx
;

739 
x
->
node
.
œ°
 = 
maxx
;

740 
x
->
toﬁtù
 = 
	`°rdup
(tooltip);

741 i‡(
x
->
node
.
œ°
 =x->node.
°¨t
) {

742 
x
->
node
.
œ°
 +
	`Ábs
(
g
->
xtick_dñè
);

743 i‡(
x
->
node
.
œ°
 =x->node.
°¨t
)

744 
x
->
node
.
œ°
++;

751 
ªt
 = 
	`¥io_åì_ö£π
(&
i
->
¥io_åì
, &
x
->
node
);

752 i‡(
ªt
 !&
x
->
node
) {

753 
gøph_vÆue
 *
Æüs
;

755 
Æüs
 = 
	`c⁄èöî_of
(
ªt
, 
gøph_vÆue
, 
node
);

756 
	`Êi°_add_èû
(&
x
->
Æüs
, &alias->alias);

758 
x
->
Êags
 = 
GV_F_ON_PRIO
;

760 
x
->
Êags
 = 
GV_F_PRIO_SKIP
;

762 i‡(
g
->
≥r_œbñ_limô
 != -1 &&

763 
i
->
vÆue_cou¡
 > 
g
->
≥r_œbñ_limô
) {

764 
to_dr›
 = 1;

772 i‡(
i
->
vÆue_cou¡
 - 
g
->
≥r_œbñ_limô
 >= 2)

773 
to_dr›
 = 2;

775 
to_dr›
-- && !
	`Êi°_em±y
(&
i
->
vÆue_li°
)) {

776 
x
 = 
	`Êi°_íåy
(
i
->
vÆue_li°
.
√xt
, 
gøph_vÆue
, 
li°
);

777 
	`gøph_vÆue_dr›
(
i
, 
x
);

782 i‡(
i
->
vÆue_cou¡
 <
g
->
≥r_œbñ_limô
)

786 
	}
}

788 
	$gøph_add_d©a
(
gøph
 *
bg
, 
gøph_œbñ_t
 
œbñ
, c⁄° 
vÆue
)

790 
gøph_œbñ
 *
i
 = 
œbñ
;

791 *
d
;

793 
d
 = 
	`mÆloc
((*d));

794 *
d
 = 
vÆue
;

796 
	`gøph_œbñ_add_vÆue
(
i
, 
d
, 
NULL
);

798 
	}
}

800 
	$gøph_n⁄zîo_y
(
gøph_œbñ
 *
l
)

802 
Êi°_hód
 *
íåy
;

804 
	`Êi°_f‹_óch
(
íåy
, &
l
->
vÆue_li°
) {

805 
gøph_vÆue
 *
v
;

807 
v
 = 
	`Êi°_íåy
(
íåy
, 
gøph_vÆue
, 
li°
);

808 i‡(
	`gëy
(
v
) != 0.0)

813 
	}
}

815 
	$gøph_add_xy_d©a
(
gøph
 *
bg
, 
gøph_œbñ_t
 
œbñ
,

816 c⁄° 
x
, c⁄° 
y
, c⁄° *
toﬁtù
)

818 
gøph_œbñ
 *
i
 = 
œbñ
;

819 
xyvÆue
 *
xy
;

821 i‡(
bg
->
d⁄t_gøph_Æl_zî€s
 && 
y
 =0.0 && !
	`gøph_n⁄zîo_y
(
i
))

822 
i
->
hide
 = 1;

824 
i
->
hide
 = 0;

826 
xy
 = 
	`mÆloc
((*xy));

827 
xy
->
x
 = x;

828 
xy
->
y
 = y;

830 
	`gøph_œbñ_add_vÆue
(
i
, 
xy
, 
toﬁtù
);

832 
	}
}

834 
	$gøph_‰ì_vÆues
(
gøph_œbñ
 *
l
)

836 
gøph_vÆue
 *
i
;

838 !
	`Êi°_em±y
(&
l
->
vÆue_li°
)) {

839 
i
 = 
	`Êi°_íåy
(
l
->
vÆue_li°
.
√xt
, 
gøph_vÆue
, 
li°
);

840 
	`gøph_vÆue_dr›
(
l
, 
i
);

842 
	}
}

844 
	$gøph_‰ì_œbñs
(
gøph
 *
g
)

846 
gøph_œbñ
 *
i
;

848 !
	`Êi°_em±y
(&
g
->
œbñ_li°
)) {

849 
i
 = 
	`Êi°_íåy
(
g
->
œbñ_li°
.
√xt
, 
gøph_œbñ
, 
li°
);

850 
	`Êi°_dñ
(&
i
->
li°
);

851 
	`gøph_‰ì_vÆues
(
i
);

852 
	`‰ì
(
i
);

854 
	}
}

856 
	$gøph_˛ór_vÆues
(
gøph
 *
g
)

858 
Êi°_hód
 *
node
;

859 
gøph_œbñ
 *
i
;

861 
	`Êi°_f‹_óch
(
node
, &
g
->
œbñ_li°
) {

862 
i
 = 
	`Êi°_íåy
(
node
, 
gøph_œbñ
, 
li°
);

863 
	`gøph_‰ì_vÆues
(
i
);

865 
	}
}

867 
	$gøph_£t_cﬁ‹
(
gøph
 *
gr
, 
gøph_œbñ_t
 
œbñ
, 
ªd
,

868 
gªí
, 
blue
)

870 
gøph_œbñ
 *
i
 = 
œbñ
;

871 
r
, 
g
, 
b
;

873 i‡(
ªd
 < 0.0) {

874 
r
 = -1.0;

875 
g
 = -1.0;

876 
b
 = -1.0;

878 
r
 = 
	`Ábs
(
ªd
);

879 
g
 = 
	`Ábs
(
gªí
);

880 
b
 = 
	`Ábs
(
blue
);

882 i‡(
r
 > 1.0)

883 
r
 = 1.0;

884 i‡(
g
 > 1.0)

885 
g
 = 1.0;

886 i‡(
b
 > 1.0)

887 
b
 = 1.0;

890 
i
->
r
 =Ñ;

891 
i
->
g
 = g;

892 
i
->
b
 = b;

893 
	}
}

895 
	$gøph_‰ì
(
gøph
 *
bg
)

897 
	`‰ì
(
bg
->
tôÀ
);

898 
	`‰ì
(
bg
->
xtôÀ
);

899 
	`‰ì
(
bg
->
ytôÀ
);

900 
	`gøph_‰ì_œbñs
(
bg
);

901 
	}
}

907 
	$löe_gøph_£t_d©a_cou¡_limô
(
gøph
 *
g
, 
≥r_œbñ_limô
)

909 
g
->
≥r_œbñ_limô
 =Öer_label_limit;

910 
	}
}

912 
	$gøph_add_exåa_•a˚
(
gøph
 *
g
, 
À·_≥r˚¡
,

913 
right_≥r˚¡
, 
t›_≥r˚¡
,

914 
bŸtom_≥r˚¡
)

916 
g
->
À·_exåa
 = 
À·_≥r˚¡
;

917 
g
->
right_exåa
 = 
right_≥r˚¡
;

918 
g
->
t›_exåa
 = 
t›_≥r˚¡
;

919 
g
->
bŸtom_exåa
 = 
bŸtom_≥r˚¡
;

920 
	}
}

927 
	$gøph_£t_ba£_off£t
(
gøph
 *
g
, 
ba£_off£t
)

929 
g
->
ba£_off£t
 = base_offset;

930 
	}
}

932 
	$gøph_has_toﬁtùs
(
gøph
 *
g
)

934 
Êi°_hód
 *
íåy
;

935 
gøph_œbñ
 *
i
;

937 
	`Êi°_f‹_óch
(
íåy
, &
g
->
œbñ_li°
) {

938 
i
 = 
	`Êi°_íåy
(
íåy
, 
gøph_œbñ
, 
li°
);

940 i‡(!
	`¥io_åì_em±y
(&
i
->
¥io_åì
))

945 
	}
}

947 
	$gøph_c⁄èös_xy
(
gøph
 *
g
, 
x
, 
y
)

949 
fú°_x
 = 
g
->
xoff£t
;

950 
œ°_x
 = 
g
->
xoff£t
 + g->
xdim
;

951 
fú°_y
 = 
g
->
yoff£t
;

952 
œ°_y
 = 
g
->
yoff£t
 + g->
ydim
;

954  (
x
 >
fú°_x
 && x <
œ°_x
Ë&& (
y
 >
fú°_y
 && y <
œ°_y
);

955 
	}
}

957 c⁄° *
	$gøph_föd_toﬁtù
(
gøph
 *
g
, 
ix
, 
iy
)

959 
x
 = 
ix
, 
y
 = 
iy
;

960 
¥io_åì_ôî
 
ôî
;

961 
¥io_åì_node
 *
n
;

962 
gøph_vÆue
 *
be°
 = 
NULL
;

963 
Êi°_hód
 *
íåy
;

964 
be°_dñè
;

965 
maxy
, 
möy
;

967 
x
 -
g
->
xoff£t
;

968 
y
 -
g
->
yoff£t
;

970 
x
 = 
g
->
xtick_zîo_vÆ
 + ((x - g->
xtick_zîo
Ë* g->
xtick_dñè
);

971 
y
 = 
g
->
ytick_zîo_vÆ
 + ((y - g->
ytick_zîo
Ë* g->
ytick_dñè
);

973 
x
 = x * 1000.0;

974 
maxy
 = 
y
 + (
g
->
ytick_⁄e_vÆ
 * 
TOOLTIP_DELTA
);

975 
möy
 = 
y
 - (
g
->
ytick_⁄e_vÆ
 * 
TOOLTIP_DELTA
);

976 
be°_dñè
 = 
UINT_MAX
;

977 
	`Êi°_f‹_óch
(
íåy
, &
g
->
œbñ_li°
) {

978 
gøph_œbñ
 *
i
;

980 
i
 = 
	`Êi°_íåy
(
íåy
, 
gøph_œbñ
, 
li°
);

981 i‡(
i
->
hide
)

984 
	`INIT_PRIO_TREE_ITER
(&
ôî
);

985 
	`¥io_åì_ôî_öô
(&
ôî
, &
i
->
¥io_åì
, 
x
, x);

987 
n
 = 
	`¥io_åì_√xt
(&
ôî
);

988 i‡(!
n
)

992 
gøph_vÆue
 *
v
, *
roŸv
;

993 
yvÆ
, 
ydiff
;

995 
v
 = 
	`c⁄èöî_of
(
n
, 
gøph_vÆue
, 
node
);

996 
roŸv
 = 
v
;

998 
yvÆ
 = 
	`gëy
(
v
);

999 
ydiff
 = 
	`Ábs
(
yvÆ
 - 
y
);

1004 i‡(
ydiff
 < 
be°_dñè
) {

1005 
be°_dñè
 = 
ydiff
;

1006 i‡(!
be°_dñè
 ||

1007 (
yvÆ
 >
möy
 && yvÆ <
maxy
)) {

1008 
be°
 = 
v
;

1012 i‡(!
	`Êi°_em±y
(&
v
->
Æüs
))

1013 
v
 = 
	`Êi°_íåy
(v->
Æüs
.
√xt
, 
gøph_vÆue
,álias);

1014 } 
v
 !
roŸv
);

1015 } (
n
 = 
	`¥io_åì_√xt
(&
ôî
)Ë!
NULL
);

1020 i‡(
be°
)

1024 i‡(
be°
)

1025  
be°
->
toﬁtù
;

1027  
NULL
;

1028 
	}
}

1030 
	$gøph_£t_gøph_Æl_zî€s
(
gøph
 *
g
, 
£t
)

1032 
g
->
d⁄t_gøph_Æl_zî€s
 = !
£t
;

1033 
	}
}

	@/home/terekhov/tmp/fio/fio/graph.h

1 #i‚de‡
GRAPH_H


2 
	#GRAPH_H


	)

4 
	ggøph
;

5 
	ggøph_œbñ
;

7 
gøph_œbñ
 * 
	tgøph_œbñ_t
;

9 
	#GRAPH_DEFAULT_FONT
 "S™†12"

	)

11 
gøph
 *
gøph_√w
(
xdim
, 
ydim
, c⁄° *
f⁄t
);

13 
gøph_£t_size
(
gøph
 *
g
, 
xdim
, 
ydim
);

15 
gøph_£t_posôi⁄
(
gøph
 *
g
, 
xoff£t
, 
yoff£t
);

17 
b¨_gøph_døw
(
gøph
 *
g
, 
ˇúo_t
 *
¸
);

19 
löe_gøph_døw
(
gøph
 *
g
, 
ˇúo_t
 *
¸
);

21 
löe_gøph_£t_d©a_cou¡_limô
(
gøph
 *
g
, 
≥r_œbñ_limô
);

26 
gøph_£t_f⁄t
(
gøph
 *
g
, c⁄° *
f⁄t
);

27 
gøph_tôÀ
(
gøph
 *
g
, c⁄° *
tôÀ
);

29 
gøph_x_tôÀ
(
gøph
 *
g
, c⁄° *
tôÀ
);

31 
gøph_y_tôÀ
(
gøph
 *
g
, c⁄° *
tôÀ
);

33 
gøph_œbñ_t
 
gøph_add_œbñ
(
gøph
 *
g
, c⁄° *
œbñ
);

55 
gøph_add_d©a
(
gøph
 *
g
, 
gøph_œbñ_t
 
œbñ
, c⁄° 
vÆue
);

57 
gøph_add_xy_d©a
(
gøph
 *
g
, 
gøph_œbñ_t
 
œbñ
,

58 c⁄° 
x
, c⁄° 
y
, c⁄° *
toﬁtù
);

61 
gøph_£t_cﬁ‹
(
gøph
 *
g
, 
gøph_œbñ_t
 
œbñ
,

62 
ªd
, 
gªí
, 
blue
);

63 
	#INVISIBLE_COLOR
 (-1.0)

	)

70 
gøph_‰ì
(
gøph
 *
bg
);

73 (*
	tgøph_axis_unô_ch™ge_ˇŒback
)(
	tgøph
 *
	tg
, 
	tpowî_of_ãn
);

74 
	`gøph_x_axis_unô_ch™ge_nŸify
(
gøph
 *
g
, 
gøph_axis_unô_ch™ge_ˇŒback
 
f
);

75 
	`gøph_y_axis_unô_ch™ge_nŸify
(
gøph
 *
g
, 
gøph_axis_unô_ch™ge_ˇŒback
 
f
);

83 
	`gøph_add_exåa_•a˚
(
gøph
 *
g
, 
À·_≥r˚¡
, 
right_≥r˚¡
,

84 
t›_≥r˚¡
, 
bŸtom_≥r˚¡
);

89 
	`gøph_has_toﬁtùs
(
gøph
 *
g
);

90 c⁄° *
	`gøph_föd_toﬁtù
(
gøph
 *
g
, 
x
, 
y
);

91 
	`gøph_c⁄èös_xy
(
gøph
 *
p
, 
x
, 
y
);

93 
	`gøph_£t_ba£_off£t
(
gøph
 *
g
, 
ba£_off£t
);

94 
	`gøph_£t_gøph_Æl_zî€s
(
gøph
 *
g
, 
£t
);

96 
	`gøph_˛ór_vÆues
(
gøph
 *
g
);

	@/home/terekhov/tmp/fio/fio/hash.h

1 #i‚de‡
_LINUX_HASH_H


2 
	#_LINUX_HASH_H


	)

4 
	~<öây≥s.h
>

5 
	~"¨ch/¨ch.h
"

21 #i‡
BITS_PER_LONG
 == 32

23 
	#GOLDEN_RATIO_PRIME
 0x9e370001UL

	)

24 #ñi‡
BITS_PER_LONG
 == 64

26 
	#GOLDEN_RATIO_PRIME
 0x9e37fffffffc0001UL

	)

28 #îr‹ 
Deföe
 
GOLDEN_RATIO_PRIME
 
your
 
w‹dsize
.

31 
	#GR_PRIME_64
 0x9e37fffffffc0001ULL

	)

33 
ölöe
 
	$__hash_l⁄g
(
vÆ
)

35 
hash
 = 
vÆ
;

37 #i‡
BITS_PER_LONG
 == 64

39 
n
 = 
hash
;

40 
n
 <<= 18;

41 
hash
 -
n
;

42 
n
 <<= 33;

43 
hash
 -
n
;

44 
n
 <<= 3;

45 
hash
 +
n
;

46 
n
 <<= 3;

47 
hash
 -
n
;

48 
n
 <<= 4;

49 
hash
 +
n
;

50 
n
 <<= 2;

51 
hash
 +
n
;

54 
hash
 *
GOLDEN_RATIO_PRIME
;

57  
hash
;

58 
	}
}

60 
ölöe
 
	$hash_l⁄g
(
vÆ
, 
bôs
)

63  
	`__hash_l⁄g
(
vÆ
Ë>> (
BITS_PER_LONG
 - 
bôs
);

64 
	}
}

66 
ölöe
 
uöt64_t
 
	$__hash_u64
(
uöt64_t
 
vÆ
)

68  
vÆ
 * 
GR_PRIME_64
;

69 
	}
}

71 
ölöe
 
	$hash_±r
(*
±r
, 
bôs
)

73  
	`hash_l⁄g
((
uöçå_t
)
±r
, 
bôs
);

74 
	}
}

80 
	#JHASH_INITVAL
 
GOLDEN_RATIO_PRIME


	)

82 
ölöe
 
uöt32_t
 
	$rﬁ32
(
uöt32_t
 
w‹d
, uöt32_à
shi·
)

84  (
w‹d
 << 
shi·
) | (word >> (32 - shift));

85 
	}
}

88 
	#__jhash_mix
(
a
, 
b
, 
c
) \

90 
a
 -
c
;á ^
	`rﬁ32
(c, 4); c +
b
; \

91 
b
 -
a
; b ^
	`rﬁ32
◊, 6);á +
c
; \

92 
c
 -
b
; c ^
	`rﬁ32
(b, 8); b +
a
; \

93 
a
 -
c
;á ^
	`rﬁ32
(c, 16); c +
b
; \

94 
b
 -
a
; b ^
	`rﬁ32
◊, 19);á +
c
; \

95 
c
 -
b
; c ^
	`rﬁ32
(b, 4); b +
a
; \

96 }

	)

99 
	#__jhash_föÆ
(
a
, 
b
, 
c
) \

101 
c
 ^
b
; c -
	`rﬁ32
(b, 14); \

102 
a
 ^
c
;á -
	`rﬁ32
(c, 11); \

103 
b
 ^
a
; b -
	`rﬁ32
(a, 25); \

104 
c
 ^
b
; c -
	`rﬁ32
(b, 16); \

105 
a
 ^
c
;á -
	`rﬁ32
(c, 4); \

106 
b
 ^
a
; b -
	`rﬁ32
(a, 14); \

107 
c
 ^
b
; c -
	`rﬁ32
(b, 24); \

108 }

	)

110 
ölöe
 
uöt32_t
 
	$jhash
(c⁄° *
key
, 
uöt32_t
 
Àngth
, uöt32_à
öôvÆ
)

112 c⁄° 
uöt8_t
 *
k
 = 
key
;

113 
uöt32_t
 
a
, 
b
, 
c
;

116 
a
 = 
b
 = 
c
 = 
JHASH_INITVAL
 + 
Àngth
 + 
öôvÆ
;

119 
Àngth
 > 12) {

120 
a
 +*
k
;

121 
b
 +*(
k
 + 4);

122 
c
 +*(
k
 + 8);

123 
	`__jhash_mix
(
a
, 
b
, 
c
);

124 
Àngth
 -= 12;

125 
k
 += 12;

130 
Àngth
) {

131 12: 
c
 +(
uöt32_t
Ë
k
[11] << 24;

132 11: 
c
 +(
uöt32_t
Ë
k
[10] << 16;

133 10: 
c
 +(
uöt32_t
Ë
k
[9] << 8;

134 9: 
c
 +
k
[8];

135 8: 
b
 +(
uöt32_t
Ë
k
[7] << 24;

136 7: 
b
 +(
uöt32_t
Ë
k
[6] << 16;

137 6: 
b
 +(
uöt32_t
Ë
k
[5] << 8;

138 5: 
b
 +
k
[4];

139 4: 
a
 +(
uöt32_t
Ë
k
[3] << 24;

140 3: 
a
 +(
uöt32_t
Ë
k
[2] << 16;

141 2: 
a
 +(
uöt32_t
Ë
k
[1] << 8;

142 1: 
a
 +
k
[0];

143 
	`__jhash_föÆ
(
a
, 
b
, 
c
);

148  
c
;

149 
	}
}

	@/home/terekhov/tmp/fio/fio/helpers.c

1 
	~<°dlib.h
>

2 
	~<î∫o.h
>

3 
	~<sys/sockë.h
>

4 
	~<sys/time.h
>

5 
	~<√töë/ö.h
>

6 
	~<uni°d.h
>

8 
	~"compûî/compûî.h
"

9 
	~"¨ch/¨ch.h
"

10 
	~"os/os.h
"

12 #i‚de‡
CONFIG_LINUX_FALLOCATE


13 
	$ÁŒoˇã
(
fd
, 
mode
, 
off_t
 
off£t
, off_à
Àn
)

15 
î∫o
 = 
ENOSYS
;

17 
	}
}

20 #i‚de‡
CONFIG_POSIX_FALLOCATE


21 
	$posix_ÁŒoˇã
(
fd
, 
off_t
 
off£t
, off_à
Àn
)

24 
	}
}

27 #i‚de‡
CONFIG_SYNC_FILE_RANGE


28 
	$sync_fûe_ønge
(
fd
, 
off64_t
 
off£t
, off64_à
nbyãs
, 
Êags
)

30 
î∫o
 = 
ENOSYS
;

32 
	}
}

35 #i‚de‡
CONFIG_POSIX_FADVISE


36 
	$posix_Ádvi£
(
fd
, 
off_t
 
off£t
, off_à
Àn
, 
advi˚
)

39 
	}
}

	@/home/terekhov/tmp/fio/fio/helpers.h

1 #i‚de‡
FIO_HELPERS_H


2 
	#FIO_HELPERS_H


	)

4 
	~"compûî/compûî.h
"

6 
	~<sys/ty≥s.h
>

7 
	~<time.h
>

9 
ÁŒoˇã
(
fd
, 
mode
, 
off_t
 
off£t
, off_à
Àn
);

10 
posix_ÁŒoˇã
(
fd
, 
off_t
 
off£t
, off_à
Àn
);

11 
sync_fûe_ønge
(
fd
, 
off64_t
 
off£t
, off64_à
nbyãs
,

12 
Êags
);

13 
posix_Ádvi£
(
fd
, 
off_t
 
off£t
, off_à
Àn
, 
advi˚
);

	@/home/terekhov/tmp/fio/fio/idletime.c

1 
	~<m©h.h
>

2 
	~"js⁄.h
"

3 
	~"idÀtime.h
"

5 vﬁ©ûê
idÀ_¥of_comm⁄
 
	gùc
;

11 
	$ˇlibøã_unô
(*
d©a
)

13 
t
, 
i
, 
j
, 
k
;

14 
timevÆ
 
çs
;

15 
tunô
 = 0.0;

17 
i
 = 0; i < 
CALIBRATE_RUNS
; i++) {

19 
	`fio_gëtime
(&
çs
, 
NULL
);

21 
j
 = 0; j < 
CALIBRATE_SCALE
; j++) {

23 
k
=0; k < 
∑ge_size
; k++) {

24 
d©a
[(
k
 + 
j
Ë% 
∑ge_size
] = k % 256;

29 i‡(
ùc
.
°©us
 =
IDLE_PROF_STATUS_PROF_STOP
)

34 
t
 = 
	`utime_sö˚_now
(&
çs
);

35 i‡(!
t
)

39 i‡((
i
 =0Ë|| (()
t
 < 
tunô
))

40 
tunô
 = ()
t
;

43  
tunô
 / 
CALIBRATE_SCALE
;

44 
	}
}

46 
	$£t_˝u_afföôy
(
idÀ_¥of_thªad
 *
ùt
)

48 #i‡
	`deföed
(
FIO_HAVE_CPU_AFFINITY
)

49 
os_˝u_mask_t
 
˝u_mask
;

51 
	`mem£t
(&
˝u_mask
, 0, (cpu_mask));

52 
	`fio_˝u_£t
(&
˝u_mask
, 
ùt
->
˝u
);

54 i‡(
	`fio_£èfföôy
(
	`gëtid
(), 
˝u_mask
)) {

55 
	`log_îr
("fio: fio_setaffinity failed\n");

61 
	`log_îr
("fio: fio_setaffinityÇot supported\n");

64 
	}
}

66 *
	$idÀ_¥of_thªad_‚
(*
d©a
)

68 
ªtvÆ
;

69 
j
, 
k
;

70 
idÀ_¥of_thªad
 *
ùt
 = 
d©a
;

73 
	`±hªad_muãx_lock
(&
ùt
->
öô_lock
);

76 i‡(
ùc
.
°©us
 =
IDLE_PROF_STATUS_ABORT
) {

77 
	`±hªad_muãx_u∆ock
(&
ùt
->
öô_lock
);

78  
NULL
;

81 
ªtvÆ
 = 
	`£t_˝u_afföôy
(
ùt
);

82 i‡(
ªtvÆ
 == -1) {

83 
ùt
->
°©e
 = 
TD_EXITED
;

84 
	`±hªad_muãx_u∆ock
(&
ùt
->
öô_lock
);

85  
NULL
;

88 
ùt
->
ˇli_time
 = 
	`ˇlibøã_unô
(ùt->
d©a
);

91 #i‡
	`deföed
(
CONFIG_SCHED_IDLE
)

92 i‡((
ªtvÆ
 = 
	`fio_£t_sched_idÀ
()))

93 
	`log_îr
("fio: fio_set_sched_idle failed\n");

95 
ªtvÆ
 = -1;

96 
	`log_îr
("fio: fio_set_sched_idleÇot supported\n");

98 i‡(
ªtvÆ
 == -1) {

99 
ùt
->
°©e
 = 
TD_EXITED
;

100 
	`±hªad_muãx_u∆ock
(&
ùt
->
öô_lock
);

101  
NULL
;

104 
ùt
->
°©e
 = 
TD_INITIALIZED
;

107 
	`±hªad_c⁄d_sig«l
(&
ùt
->
c⁄d
);

108 
	`±hªad_muãx_u∆ock
(&
ùt
->
öô_lock
);

111 
	`±hªad_muãx_lock
(&
ùt
->
°¨t_lock
);

114 i‡(
ùc
.
°©us
 =
IDLE_PROF_STATUS_ABORT
) {

115 
	`±hªad_muãx_u∆ock
(&
ùt
->
°¨t_lock
);

116  
NULL
;

120 i‡(
ùc
.
°©us
 =
IDLE_PROF_STATUS_CALI_STOP
) {

121 
	`±hªad_muãx_u∆ock
(&
ùt
->
°¨t_lock
);

122  
NULL
;

125 
	`fio_gëtime
(&
ùt
->
çs
, 
NULL
);

126 
ùt
->
°©e
 = 
TD_RUNNING
;

128 
j
 = 0;

130 
k
 = 0; k < 
∑ge_size
; k++) {

131 
ùt
->
d©a
[(
k
 + 
j
Ë% 
∑ge_size
] = k % 256;

132 i‡(
ùc
.
°©us
 =
IDLE_PROF_STATUS_PROF_STOP
) {

133 
	`fio_gëtime
(&
ùt
->
çe
, 
NULL
);

134 
idÀ_¥of_d⁄e
;

137 
j
++;

140 
idÀ_¥of_d⁄e
:

142 
ùt
->
lo›s
 = 
j
 + (Ë
k
 / 
∑ge_size
;

143 
ùt
->
°©e
 = 
TD_EXITED
;

144 
	`±hªad_muãx_u∆ock
(&
ùt
->
°¨t_lock
);

146  
NULL
;

147 
	}
}

150 
	$ˇlibøti⁄_°©s
()

152 
i
;

153 
sum
 = 0.0, 
v¨
 = 0.0;

154 
idÀ_¥of_thªad
 *
ùt
;

156 
i
 = 0; i < 
ùc
.
ƒ_˝us
; i++) {

157 
ùt
 = &
ùc
.
ùts
[
i
];

158 
sum
 +
ùt
->
ˇli_time
;

161 
ùc
.
ˇli_món
 = 
sum
/ùc.
ƒ_˝us
;

163 
i
 = 0; i < 
ùc
.
ƒ_˝us
; i++) {

164 
ùt
 = &
ùc
.
ùts
[
i
];

165 
v¨
 +
	`pow
(
ùt
->
ˇli_time
-
ùc
.
ˇli_món
, 2);

168 
ùc
.
ˇli_°ddev
 = 
	`sqπ
(
v¨
/(ùc.
ƒ_˝us
-1));

169 
	}
}

171 
	$fio_idÀ_¥of_öô
()

173 
i
, 
ªt
;

174 
timevÆ
 
ç
;

175 
time•ec
 
ts
;

176 
±hªad_©å_t
 
èâr
;

177 
idÀ_¥of_thªad
 *
ùt
;

179 
ùc
.
ƒ_˝us
 = 
	`˝us_⁄löe
();

180 
ùc
.
°©us
 = 
IDLE_PROF_STATUS_OK
;

182 i‡(
ùc
.
›t
 =
IDLE_PROF_OPT_NONE
)

185 i‡((
ªt
 = 
	`±hªad_©å_öô
(&
èâr
))) {

186 
	`log_îr
("fio:Öthªad_©å_öô %s\n", 
	`°ªº‹
(
ªt
));

189 i‡((
ªt
 = 
	`±hªad_©å_£tsc›e
(&
èâr
, 
PTHREAD_SCOPE_SYSTEM
))) {

190 
	`log_îr
("fio:Öthªad_©å_£tsc›ê%s\n", 
	`°ªº‹
(
ªt
));

194 
ùc
.
ùts
 = 
	`mÆloc
(ùc.
ƒ_˝us
 * (
idÀ_¥of_thªad
));

195 i‡(!
ùc
.
ùts
) {

196 
	`log_îr
("fio: malloc failed\n");

200 
ùc
.
buf
 = 
	`mÆloc
(ùc.
ƒ_˝us
 * 
∑ge_size
);

201 i‡(!
ùc
.
buf
) {

202 
	`log_îr
("fio: malloc failed\n");

203 
	`‰ì
(
ùc
.
ùts
);

211 
i
 = 0; i < 
ùc
.
ƒ_˝us
; i++) {

212 
ùt
 = &
ùc
.
ùts
[
i
];

214 
ùt
->
˝u
 = 
i
;

215 
ùt
->
°©e
 = 
TD_NOT_CREATED
;

216 
ùt
->
d©a
 = (*)(
ùc
.
buf
 + 
∑ge_size
 * 
i
);

218 i‡((
ªt
 = 
	`±hªad_muãx_öô
(&
ùt
->
öô_lock
, 
NULL
))) {

219 
ùc
.
°©us
 = 
IDLE_PROF_STATUS_ABORT
;

220 
	`log_îr
("fio:Öthªad_muãx_öô %s\n", 
	`°ªº‹
(
ªt
));

224 i‡((
ªt
 = 
	`±hªad_muãx_öô
(&
ùt
->
°¨t_lock
, 
NULL
))) {

225 
ùc
.
°©us
 = 
IDLE_PROF_STATUS_ABORT
;

226 
	`log_îr
("fio:Öthªad_muãx_öô %s\n", 
	`°ªº‹
(
ªt
));

230 i‡((
ªt
 = 
	`±hªad_c⁄d_öô
(&
ùt
->
c⁄d
, 
NULL
))) {

231 
ùc
.
°©us
 = 
IDLE_PROF_STATUS_ABORT
;

232 
	`log_îr
("fio:Öthªad_c⁄d_öô %s\n", 
	`°ªº‹
(
ªt
));

237 
	`±hªad_muãx_lock
(&
ùt
->
öô_lock
);

240 
	`±hªad_muãx_lock
(&
ùt
->
°¨t_lock
);

242 i‡((
ªt
 = 
	`±hªad_¸óã
(&
ùt
->
thªad
, &
èâr
, 
idÀ_¥of_thªad_‚
, ipt))) {

243 
ùc
.
°©us
 = 
IDLE_PROF_STATUS_ABORT
;

244 
	`log_îr
("fio:Öthªad_¸óã %s\n", 
	`°ªº‹
(
ªt
));

247 
ùt
->
°©e
 = 
TD_CREATED
;

249 i‡((
ªt
 = 
	`±hªad_dëach
(
ùt
->
thªad
))) {

251 
	`log_îr
("fio:Öthªad_dë©ch %s\n", 
	`°ªº‹
(
ªt
));

259 
i
 = 0; i < 
ùc
.
ƒ_˝us
; i++) {

260 
ùt
 = &
ùc
.
ùts
[
i
];

261 
	`±hªad_muãx_u∆ock
(&
ùt
->
öô_lock
);

264 i‡(
ùc
.
°©us
 =
IDLE_PROF_STATUS_ABORT
)

268 
i
 = 0; i < 
ùc
.
ƒ_˝us
; i++) {

269 
ùt
 = &
ùc
.
ùts
[
i
];

270 
	`±hªad_muãx_lock
(&
ùt
->
öô_lock
);

271 (
ùt
->
°©e
 !
TD_EXITED
) &&

272 (
ùt
->
°©e
!=
TD_INITIALIZED
)) {

273 
	`fio_gëtime
(&
ç
, 
NULL
);

274 
ts
.
tv_£c
 = 
ç
.tv_sec + 1;

275 
ts
.
tv_n£c
 = 
ç
.
tv_u£c
 * 1000;

276 
	`±hªad_c⁄d_timedwaô
(&
ùt
->
c⁄d
, &ùt->
öô_lock
, &
ts
);

278 
	`±hªad_muãx_u∆ock
(&
ùt
->
öô_lock
);

284 i‡(
ùt
->
°©e
 =
TD_EXITED
)

285 
ùc
.
°©us
 = 
IDLE_PROF_STATUS_ABORT
;

288 i‡(
ùc
.
°©us
 !
IDLE_PROF_STATUS_ABORT
)

289 
	`ˇlibøti⁄_°©s
();

291 
ùc
.
ˇli_món
 = ipc.
ˇli_°ddev
 = 0.0;

293 i‡(
ùc
.
›t
 =
IDLE_PROF_OPT_CALI
)

294 
ùc
.
°©us
 = 
IDLE_PROF_STATUS_CALI_STOP
;

295 
	}
}

297 
	$fio_idÀ_¥of_°¨t
()

299 
i
;

300 
idÀ_¥of_thªad
 *
ùt
;

302 i‡(
ùc
.
›t
 =
IDLE_PROF_OPT_NONE
)

306 
i
 = 0; i < 
ùc
.
ƒ_˝us
; i++) {

307 
ùt
 = &
ùc
.
ùts
[
i
];

308 
	`±hªad_muãx_u∆ock
(&
ùt
->
°¨t_lock
);

310 
	}
}

312 
	$fio_idÀ_¥of_°›
()

314 
i
;

315 
uöt64_t
 
ru¡
;

316 
timevÆ
 
ç
;

317 
time•ec
 
ts
;

318 
idÀ_¥of_thªad
 *
ùt
;

320 i‡(
ùc
.
›t
 =
IDLE_PROF_OPT_NONE
)

323 i‡(
ùc
.
›t
 =
IDLE_PROF_OPT_CALI
)

326 
ùc
.
°©us
 = 
IDLE_PROF_STATUS_PROF_STOP
;

329 
i
 = 0; i < 
ùc
.
ƒ_˝us
; i++) {

330 
ùt
 = &
ùc
.
ùts
[
i
];

331 
	`±hªad_muãx_lock
(&
ùt
->
°¨t_lock
);

332 (
ùt
->
°©e
 !
TD_EXITED
) &&

333 (
ùt
->
°©e
!=
TD_NOT_CREATED
)) {

334 
	`fio_gëtime
(&
ç
, 
NULL
);

335 
ts
.
tv_£c
 = 
ç
.tv_sec + 1;

336 
ts
.
tv_n£c
 = 
ç
.
tv_u£c
 * 1000;

338 
	`±hªad_c⁄d_timedwaô
(&
ùt
->
c⁄d
, &ùt->
°¨t_lock
, &
ts
);

340 
	`±hªad_muãx_u∆ock
(&
ùt
->
°¨t_lock
);

343 i‡(
ùc
.
ˇli_món
 != 0.0) {

344 
ru¡
 = 
	`utime_sö˚
(&
ùt
->
çs
, &ùt->
çe
);

345 i‡(
ru¡
)

346 
ùt
->
idÀ√ss
 = i±->
lo›s
 * 
ùc
.
ˇli_món
 / 
ru¡
;

348 
ùt
->
idÀ√ss
 = 0.0;

350 
ùt
->
idÀ√ss
 = 0.0;

357 
	}
}

363 
	$fio_idÀ_¥of_˝u_°©
(
˝u
)

365 
i
, 
ƒ_˝us
 = 
ùc
.nr_cpus;

366 
idÀ_¥of_thªad
 *
ùt
;

367 
p
 = 0.0;

369 i‡(
ùc
.
›t
 =
IDLE_PROF_OPT_NONE
)

372 i‡((
˝u
 >
ƒ_˝us
) || (cpu < -1)) {

373 
	`log_îr
("fio: idleÖrofiling invalid cpu index\n");

377 i‡(
˝u
 == -1) {

378 
i
 = 0; i < 
ƒ_˝us
; i++) {

379 
ùt
 = &
ùc
.
ùts
[
i
];

380 
p
 +
ùt
->
idÀ√ss
;

382 
p
 /
ƒ_˝us
;

384 
ùt
 = &
ùc
.
ùts
[
˝u
];

385 
p
 = 
ùt
->
idÀ√ss
;

388  
p
 * 100.0;

389 
	}
}

391 
	$fio_idÀ_¥of_˛ónup
()

393 i‡(
ùc
.
ùts
) {

394 
	`‰ì
(
ùc
.
ùts
);

395 
ùc
.
ùts
 = 
NULL
;

398 i‡(
ùc
.
buf
) {

399 
	`‰ì
(
ùc
.
buf
);

400 
ùc
.
buf
 = 
NULL
;

402 
	}
}

404 
	$fio_idÀ_¥of_∑r£_›t
(c⁄° *
¨gs
)

406 
ùc
.
›t
 = 
IDLE_PROF_OPT_NONE
;

408 i‡(!
¨gs
) {

409 
	`log_îr
("fio:Émpty idle-prof option string\n");

413 #i‡
	`deföed
(
FIO_HAVE_CPU_AFFINITY
Ë&& deföed(
CONFIG_SCHED_IDLE
)

414 i‡(
	`°rcmp
("ˇlibøã", 
¨gs
) == 0) {

415 
ùc
.
›t
 = 
IDLE_PROF_OPT_CALI
;

416 
	`fio_idÀ_¥of_öô
();

417 
	`fio_idÀ_¥of_°¨t
();

418 
	`fio_idÀ_¥of_°›
();

419 
	`show_idÀ_¥of_°©s
(
FIO_OUTPUT_NORMAL
, 
NULL
);

421 } i‡(
	`°rcmp
("sy°em", 
¨gs
) == 0) {

422 
ùc
.
›t
 = 
IDLE_PROF_OPT_SYSTEM
;

424 } i‡(
	`°rcmp
("≥r˝u", 
¨gs
) == 0) {

425 
ùc
.
›t
 = 
IDLE_PROF_OPT_PERCPU
;

428 
	`log_îr
("fio: inc‹ª˘ idÀ-¥o‡›ti⁄: %s\n", 
¨gs
);

432 
	`log_îr
("fio: idle-profÇot supported onÅhisÖlatform\n");

435 
	}
}

437 
	$show_idÀ_¥of_°©s
(
ouçut
, 
js⁄_obje˘
 *
∑ª¡
)

439 
i
, 
ƒ_˝us
 = 
ùc
.nr_cpus;

440 
js⁄_obje˘
 *
tmp
;

441 
s
[
MAX_CPU_STR_LEN
];

443 i‡(
ouçut
 =
FIO_OUTPUT_NORMAL
) {

444 i‡(
ùc
.
›t
 > 
IDLE_PROF_OPT_CALI
)

445 
	`log_öfo
("\nCPU idleness:\n");

446 i‡(
ùc
.
›t
 =
IDLE_PROF_OPT_CALI
)

447 
	`log_öfo
("CPU idleness:\n");

449 i‡(
ùc
.
›t
 >
IDLE_PROF_OPT_SYSTEM
)

450 
	`log_öfo
(" sy°em: %3.2f%%\n", 
	`fio_idÀ_¥of_˝u_°©
(-1));

452 i‡(
ùc
.
›t
 =
IDLE_PROF_OPT_PERCPU
) {

453 
	`log_öfo
("Öî˝u: %3.2f%%", 
	`fio_idÀ_¥of_˝u_°©
(0));

454 
i
 = 1; i < 
ƒ_˝us
; i++)

455 
	`log_öfo
(", %3.2f%%", 
	`fio_idÀ_¥of_˝u_°©
(
i
));

456 
	`log_öfo
("\n");

459 i‡(
ùc
.
›t
 >
IDLE_PROF_OPT_CALI
) {

460 
	`log_öfo
(" unô w‹k: món=%3.2fus,", 
ùc
.
ˇli_món
);

461 
	`log_öfo
(" stddev=%3.2f\n", 
ùc
.
ˇli_°ddev
);

465 i‡(
ùc
.
›t
 !
IDLE_PROF_OPT_NONE
)

466 
	`fio_idÀ_¥of_˛ónup
();

471 i‡((
ùc
.
›t
 !
IDLE_PROF_OPT_NONE
Ë&& (
ouçut
 =
FIO_OUTPUT_JSON
)) {

472 i‡(!
∑ª¡
)

475 
tmp
 = 
	`js⁄_¸óã_obje˘
();

476 i‡(!
tmp
)

479 
	`js⁄_obje˘_add_vÆue_obje˘
(
∑ª¡
, "˝u_idÀ√ss", 
tmp
);

480 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
tmp
, "sy°em", 
	`fio_idÀ_¥of_˝u_°©
(-1));

482 i‡(
ùc
.
›t
 =
IDLE_PROF_OPT_PERCPU
) {

483 
i
 = 0; i < 
ƒ_˝us
; i++) {

484 
	`¢¥ötf
(
s
, 
MAX_CPU_STR_LEN
, "˝u-%d", 
i
);

485 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
tmp
, 
s
, 
	`fio_idÀ_¥of_˝u_°©
(
i
));

489 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
tmp
, "unô_món", 
ùc
.
ˇli_món
);

490 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
tmp
, "unô_°ddev", 
ùc
.
ˇli_°ddev
);

492 
	`fio_idÀ_¥of_˛ónup
();

494 
	}
}

	@/home/terekhov/tmp/fio/fio/idletime.h

1 #i‚de‡
FIO_IDLETIME_H


2 
	#FIO_IDLETIME_H


	)

4 
	~"fio.h
"

6 
	#CALIBRATE_RUNS
 10

	)

7 
	#CALIBRATE_SCALE
 1000

	)

8 
	#MAX_CPU_STR_LEN
 32

	)

11 
	mIDLE_PROF_OPT_NONE
,

12 
	mIDLE_PROF_OPT_CALI
,

13 
	mIDLE_PROF_OPT_SYSTEM
,

14 
	mIDLE_PROF_OPT_PERCPU


18 
	mIDLE_PROF_STATUS_OK
,

19 
	mIDLE_PROF_STATUS_CALI_STOP
,

20 
	mIDLE_PROF_STATUS_PROF_STOP
,

21 
	mIDLE_PROF_STATUS_ABORT


24 
	sidÀ_¥of_thªad
 {

25 
±hªad_t
 
	mthªad
;

26 
	m˝u
;

27 
	m°©e
;

28 
timevÆ
 
	mçs
;

29 
timevÆ
 
	mçe
;

30 
	mˇli_time
;

31 
	mlo›s
;

32 
	midÀ√ss
;

33 *
	md©a
;

34 
±hªad_c⁄d_t
 
	mc⁄d
;

35 
±hªad_muãx_t
 
	möô_lock
;

36 
±hªad_muãx_t
 
	m°¨t_lock
;

39 
	sidÀ_¥of_comm⁄
 {

40 
idÀ_¥of_thªad
 *
	mùts
;

41 
	mƒ_˝us
;

42 
	m°©us
;

43 
	m›t
;

44 
	mˇli_món
;

45 
	mˇli_°ddev
;

46 *
	mbuf
;

49 
fio_idÀ_¥of_∑r£_›t
(const *);

51 
fio_idÀ_¥of_öô
();

52 
fio_idÀ_¥of_°¨t
();

53 
fio_idÀ_¥of_°›
();

55 
show_idÀ_¥of_°©s
(, 
js⁄_obje˘
 *);

	@/home/terekhov/tmp/fio/fio/init.c

4 
	~<°dio.h
>

5 
	~<°dlib.h
>

6 
	~<uni°d.h
>

7 
	~<f˙é.h
>

8 
	~<˘y≥.h
>

9 
	~<°rög.h
>

10 
	~<î∫o.h
>

11 
	~<sys/ùc.h
>

12 
	~<sys/ty≥s.h
>

13 
	~<sys/°©.h
>

15 
	~"fio.h
"

16 #i‚de‡
FIO_NO_HAVE_SHM_H


17 
	~<sys/shm.h
>

20 
	~"∑r£.h
"

21 
	~"smÆloc.h
"

22 
	~"fûehash.h
"

23 
	~"vîify.h
"

24 
	~"¥ofûe.h
"

25 
	~"£rvî.h
"

26 
	~"idÀtime.h
"

27 
	~"fûñock.h
"

29 
	~"lib/gë›t.h
"

30 
	~"lib/°rˇ£°r.h
"

32 
	~"¸c/ã°.h
"

34 c⁄° 
	gfio_vîsi⁄_°rög
[] = 
FIO_VERSION
;

36 
	#FIO_RANDSEED
 (0xb1899bedUL)

	)

38 **
	göi_fûe
;

39 
	gmax_jobs
 = 
FIO_MAX_JOBS
;

40 
	gdump_cmdlöe
;

41 
	gdef_timeout
;

42 
	g∑r£_⁄ly
;

44 
thªad_d©a
 
	gdef_thªad
;

45 
thªad_d©a
 *
	gthªads
 = 
NULL
;

46 **
	gjob_£˘i⁄s
;

47 
	gƒ_job_£˘i⁄s
;

49 
	gexôÆl_⁄_ãrmö©e
 = 0;

50 
	gouçut_f‹m©
 = 
FIO_OUTPUT_NORMAL
;

51 
	g≠≥nd_ãr£_ouçut
 = 0;

52 
	gëa_¥öt
 = 
FIO_ETA_AUTO
;

53 
	gëa_√w_löe
 = 0;

54 
FILE
 *
	gf_out
 = 
NULL
;

55 
FILE
 *
	gf_îr
 = 
NULL
;

56 *
	gexec_¥ofûe
 = 
NULL
;

57 
	gw¨nögs_Áèl
 = 0;

58 
	gãr£_vîsi⁄
 = 3;

59 
	gis_backíd
 = 0;

60 
	gƒ_˛õ¡s
 = 0;

61 
	glog_sy¶og
 = 0;

63 
	gwrôe_bw_log
 = 0;

64 
	gªad_⁄ly
 = 0;

65 
	g°©us_öãrvÆ
 = 0;

67 
	gwrôe_œt_log
;

69 
	g¥ev_group_jobs
;

71 
	gfio_debug
 = 0;

72 
	gfio_debug_jobno
 = -1;

73 *
	gfio_debug_jobp
 = 
NULL
;

75 
	gcmd_›t°r
[256];

76 
	gdid_¨g
;

78 
	#FIO_CLIENT_FLAG
 (1 << 16)

	)

84 
›ti⁄
 
	gl_›ts
[
FIO_NR_OPTIONS
] = {

86 .
«me
 = (*) "output",

87 .
	ghas_¨g
 = 
ªquúed_¨gumít
,

88 .
	gvÆ
 = 'o' | 
FIO_CLIENT_FLAG
,

91 .
	g«me
 = (*) "timeout",

92 .
	ghas_¨g
 = 
ªquúed_¨gumít
,

93 .
	gvÆ
 = 't' | 
FIO_CLIENT_FLAG
,

96 .
	g«me
 = (*) "latency-log",

97 .
	ghas_¨g
 = 
ªquúed_¨gumít
,

98 .
	gvÆ
 = 'l' | 
FIO_CLIENT_FLAG
,

101 .
	g«me
 = (*) "bandwidth-log",

102 .
	ghas_¨g
 = 
ªquúed_¨gumít
,

103 .
	gvÆ
 = 'b' | 
FIO_CLIENT_FLAG
,

106 .
	g«me
 = (*) "minimal",

107 .
	ghas_¨g
 = 
no_¨gumít
,

108 .
	gvÆ
 = 'm' | 
FIO_CLIENT_FLAG
,

111 .
	g«me
 = (*) "output-format",

112 .
	ghas_¨g
 = 
›ti⁄Æ_¨gumít
,

113 .
	gvÆ
 = 'F' | 
FIO_CLIENT_FLAG
,

116 .
	g«me
 = (*) "append-terse",

117 .
	ghas_¨g
 = 
›ti⁄Æ_¨gumít
,

118 .
	gvÆ
 = 'f',

121 .
	g«me
 = (*) "version",

122 .
	ghas_¨g
 = 
no_¨gumít
,

123 .
	gvÆ
 = 'v' | 
FIO_CLIENT_FLAG
,

126 .
	g«me
 = (*) "help",

127 .
	ghas_¨g
 = 
no_¨gumít
,

128 .
	gvÆ
 = 'h' | 
FIO_CLIENT_FLAG
,

131 .
	g«me
 = (*) "cmdhelp",

132 .
	ghas_¨g
 = 
›ti⁄Æ_¨gumít
,

133 .
	gvÆ
 = 'c' | 
FIO_CLIENT_FLAG
,

136 .
	g«me
 = (*) "enghelp",

137 .
	ghas_¨g
 = 
›ti⁄Æ_¨gumít
,

138 .
	gvÆ
 = 'i' | 
FIO_CLIENT_FLAG
,

141 .
	g«me
 = (*) "showcmd",

142 .
	ghas_¨g
 = 
no_¨gumít
,

143 .
	gvÆ
 = 's' | 
FIO_CLIENT_FLAG
,

146 .
	g«me
 = (*) "readonly",

147 .
	ghas_¨g
 = 
no_¨gumít
,

148 .
	gvÆ
 = 'r' | 
FIO_CLIENT_FLAG
,

151 .
	g«me
 = (*) "eta",

152 .
	ghas_¨g
 = 
ªquúed_¨gumít
,

153 .
	gvÆ
 = 'e' | 
FIO_CLIENT_FLAG
,

156 .
	g«me
 = (*) "eta-newline",

157 .
	ghas_¨g
 = 
ªquúed_¨gumít
,

158 .
	gvÆ
 = 'E' | 
FIO_CLIENT_FLAG
,

161 .
	g«me
 = (*) "debug",

162 .
	ghas_¨g
 = 
ªquúed_¨gumít
,

163 .
	gvÆ
 = 'd' | 
FIO_CLIENT_FLAG
,

166 .
	g«me
 = (*) "parse-only",

167 .
	ghas_¨g
 = 
no_¨gumít
,

168 .
	gvÆ
 = 'P' | 
FIO_CLIENT_FLAG
,

171 .
	g«me
 = (*) "section",

172 .
	ghas_¨g
 = 
ªquúed_¨gumít
,

173 .
	gvÆ
 = 'x' | 
FIO_CLIENT_FLAG
,

176 .
	g«me
 = (*) "alloc-size",

177 .
	ghas_¨g
 = 
ªquúed_¨gumít
,

178 .
	gvÆ
 = 'a' | 
FIO_CLIENT_FLAG
,

181 .
	g«me
 = (*) "profile",

182 .
	ghas_¨g
 = 
ªquúed_¨gumít
,

183 .
	gvÆ
 = 'p' | 
FIO_CLIENT_FLAG
,

186 .
	g«me
 = (*) "warnings-fatal",

187 .
	ghas_¨g
 = 
no_¨gumít
,

188 .
	gvÆ
 = 'w' | 
FIO_CLIENT_FLAG
,

191 .
	g«me
 = (*) "max-jobs",

192 .
	ghas_¨g
 = 
ªquúed_¨gumít
,

193 .
	gvÆ
 = 'j' | 
FIO_CLIENT_FLAG
,

196 .
	g«me
 = (*) "terse-version",

197 .
	ghas_¨g
 = 
ªquúed_¨gumít
,

198 .
	gvÆ
 = 'V' | 
FIO_CLIENT_FLAG
,

201 .
	g«me
 = (*) "server",

202 .
	ghas_¨g
 = 
›ti⁄Æ_¨gumít
,

203 .
	gvÆ
 = 'S',

205 { .
	g«me
 = (*) "daemonize",

206 .
	ghas_¨g
 = 
ªquúed_¨gumít
,

207 .
	gvÆ
 = 'D',

210 .
	g«me
 = (*) "client",

211 .
	ghas_¨g
 = 
ªquúed_¨gumít
,

212 .
	gvÆ
 = 'C',

215 .
	g«me
 = (*) "cpuclock-test",

216 .
	ghas_¨g
 = 
no_¨gumít
,

217 .
	gvÆ
 = 'T',

220 .
	g«me
 = (*) "crctest",

221 .
	ghas_¨g
 = 
›ti⁄Æ_¨gumít
,

222 .
	gvÆ
 = 'G',

225 .
	g«me
 = (*) "idle-prof",

226 .
	ghas_¨g
 = 
ªquúed_¨gumít
,

227 .
	gvÆ
 = 'I',

230 .
	g«me
 = (*) "status-interval",

231 .
	ghas_¨g
 = 
ªquúed_¨gumít
,

232 .
	gvÆ
 = 'L',

235 .
	g«me
 = 
NULL
,

239 
	$‰ì_thªads_shm
()

241 
shmid_ds
 
sbuf
;

243 i‡(
thªads
) {

244 *
ç
 = 
thªads
;

246 
thªads
 = 
NULL
;

247 
	`shmdt
(
ç
);

248 
	`shm˘l
(
shm_id
, 
IPC_RMID
, &
sbuf
);

249 
shm_id
 = -1;

251 
	}
}

253 
	$‰ì_shm
()

255 i‡(
thªads
) {

256 
	`fûe_hash_exô
();

257 
	`Êow_exô
();

258 
fio_debug_jobp
 = 
NULL
;

259 
	`‰ì_thªads_shm
();

262 
	`›ti⁄s_‰ì
(
fio_›ti⁄s
, &
def_thªad
);

263 
	`fio_fûñock_exô
();

264 
	`s˛ónup
();

265 
	}
}

273 
	$£tup_thªad_¨ó
()

275 *
hash
;

277 i‡(
thªads
)

285 
size_t
 
size
 = 
max_jobs
 * (
thªad_d©a
);

287 
size
 +
fûe_hash_size
;

288 
size
 += ();

290 
shm_id
 = 
	`shmgë
(0, 
size
, 
IPC_CREAT
 | 0600);

291 i‡(
shm_id
 != -1)

293 i‡(
î∫o
 !
EINVAL
 &&Éºnÿ!
ENOMEM
 &&Éºnÿ!
ENOSPC
) {

294 
	`≥º‹
("shmget");

298 
max_jobs
 >>= 1;

299 } 
max_jobs
);

301 i‡(
shm_id
 == -1)

304 
thªads
 = 
	`shm©
(
shm_id
, 
NULL
, 0);

305 i‡(
thªads
 == (*) -1) {

306 
	`≥º‹
("shmat");

310 
	`mem£t
(
thªads
, 0, 
max_jobs
 * (
thªad_d©a
));

311 
hash
 = (*Ë
thªads
 + 
max_jobs
 * (
thªad_d©a
);

312 
fio_debug_jobp
 = (*Ë
hash
 + 
fûe_hash_size
;

313 *
fio_debug_jobp
 = -1;

314 
	`fûe_hash_öô
(
hash
);

316 
	`Êow_öô
();

319 
	}
}

321 
	$£t_cmd_›ti⁄s
(
thªad_d©a
 *
td
)

323 
thªad_›ti⁄s
 *
o
 = &
td
->o;

325 i‡(!
o
->
timeout
)

326 
o
->
timeout
 = 
def_timeout
;

327 
	}
}

332 
thªad_d©a
 *
	$gë_√w_job
(
globÆ
, 
thªad_d©a
 *
∑ª¡
,

333 
¥e£rve_eo
)

335 
thªad_d©a
 *
td
;

337 i‡(
globÆ
) {

338 
	`£t_cmd_›ti⁄s
(&
def_thªad
);

339  &
def_thªad
;

341 i‡(
	`£tup_thªad_¨ó
()) {

342 
	`log_îr
("error: failedÅo setup shm segment\n");

343  
NULL
;

345 i‡(
thªad_numbî
 >
max_jobs
) {

346 
	`log_îr
("error: maximumÇumber of jobs (%d)Ñeached.\n",

347 
max_jobs
);

348  
NULL
;

351 
td
 = &
thªads
[
thªad_numbî
++];

352 *
td
 = *
∑ª¡
;

354 
td
->
io_›s
 = 
NULL
;

355 i‡(!
¥e£rve_eo
)

356 
td
->
eo
 = 
NULL
;

358 
td
->
o
.
uid
 =Åd->o.
gid
 = -1U;

360 
	`dup_fûes
(
td
, 
∑ª¡
);

361 
	`fio_›ti⁄s_mem_du≥
(
td
);

363 
	`¥ofûe_add_hooks
(
td
);

365 
td
->
thªad_numbî
 =Åhread_number;

367 i‡(!
∑ª¡
->
o
.
group_ªp‹tög
)

368 
°©_numbî
++;

370 
	`£t_cmd_›ti⁄s
(
td
);

371  
td
;

372 
	}
}

374 
	$put_job
(
thªad_d©a
 *
td
)

376 i‡(
td
 =&
def_thªad
)

379 
	`¥ofûe_td_exô
(
td
);

380 
	`Êow_exô_job
(
td
);

382 i‡(
td
->
îr‹
)

383 
	`log_öfo
("fio: %s\n", 
td
->
vîr‹
);

385 
	`fio_›ti⁄s_‰ì
(
td
);

386 i‡(
td
->
io_›s
)

387 
	`‰ì_i€ngöe
(
td
);

389 
	`mem£t
(&
thªads
[
td
->
thªad_numbî
 - 1], 0, (*td));

390 
thªad_numbî
--;

391 
	}
}

393 
	$__£tup_øã
(
thªad_d©a
 *
td
, 
fio_ddú
 
ddú
)

395 
bs
 = 
td
->
o
.
mö_bs
[
ddú
];

397 
	`as£π
(
	`ddú_rw
(
ddú
));

399 i‡(
td
->
o
.
øã
[
ddú
])

400 
td
->
øã_bps
[
ddú
] =Åd->
o
.
øã
[ddir];

402 
td
->
øã_bps
[
ddú
] =Åd->
o
.
øã_i›s
[ddú] * 
bs
;

404 i‡(!
td
->
øã_bps
[
ddú
]) {

405 
	`log_îr
("rateÜowerÅhan supported\n");

409 
td
->
øã_≥ndög_u¶ìp
[
ddú
] = 0;

411 
	}
}

413 
	$£tup_øã
(
thªad_d©a
 *
td
)

415 
ªt
 = 0;

417 i‡(
td
->
o
.
øã
[
DDIR_READ
] ||Åd->o.
øã_i›s
[DDIR_READ])

418 
ªt
 = 
	`__£tup_øã
(
td
, 
DDIR_READ
);

419 i‡(
td
->
o
.
øã
[
DDIR_WRITE
] ||Åd->o.
øã_i›s
[DDIR_WRITE])

420 
ªt
 |
	`__£tup_øã
(
td
, 
DDIR_WRITE
);

421 i‡(
td
->
o
.
øã
[
DDIR_TRIM
] ||Åd->o.
øã_i›s
[DDIR_TRIM])

422 
ªt
 |
	`__£tup_øã
(
td
, 
DDIR_TRIM
);

424  
ªt
;

425 
	}
}

427 
	$fixed_block_size
(
thªad_›ti⁄s
 *
o
)

429  
o
->
mö_bs
[
DDIR_READ
] =o->
max_bs
[DDIR_READ] &&

430 
o
->
mö_bs
[
DDIR_WRITE
] =o->
max_bs
[DDIR_WRITE] &&

431 
o
->
mö_bs
[
DDIR_TRIM
] =o->
max_bs
[DDIR_TRIM] &&

432 
o
->
mö_bs
[
DDIR_READ
] =o->mö_bs[
DDIR_WRITE
] &&

433 
o
->
mö_bs
[
DDIR_READ
] =o->mö_bs[
DDIR_TRIM
];

434 
	}
}

437 
	$gë_ønd_°¨t_dñay
(
thªad_d©a
 *
td
)

439 
dñayønge
;

440 
r
;

442 
dñayønge
 = 
td
->
o
.
°¨t_dñay_high
 -Åd->o.
°¨t_dñay
;

444 i‡(
td
->
o
.
u£_os_ønd
) {

445 
r
 = 
	`os_øndom_l⁄g
(&
td
->
dñay_°©e
);

446 
dñayønge
 = (Ë((Ëdñayøngê* (
r
 / (
OS_RAND_MAX
 + 1.0)));

448 
r
 = 
	`__ønd
(&
td
->
__dñay_°©e
);

449 
dñayønge
 = (Ë((Ëdñayøngê* (
r
 / (
FRAND_MAX
 + 1.0)));

452 
dñayønge
 +
td
->
o
.
°¨t_dñay
;

453  
dñayønge
;

454 
	}
}

460 
	$fixup_›ti⁄s
(
thªad_d©a
 *
td
)

462 
thªad_›ti⁄s
 *
o
 = &
td
->o;

463 
ªt
 = 0;

465 #i‚de‡
FIO_HAVE_PSHARED_MUTEX


466 i‡(!
o
->
u£_thªad
) {

467 
	`log_öfo
("fio:ÅhisÖlatform doesÇot supportÖrocess shared"

470 
o
->
u£_thªad
 = 1;

471 
ªt
 = 
w¨nögs_Áèl
;

475 i‡(
o
->
wrôe_iﬁog_fûe
 && o->
ªad_iﬁog_fûe
) {

476 
	`log_îr
("fio:Ñead iolog overrides write_iolog\n");

477 
	`‰ì
(
o
->
wrôe_iﬁog_fûe
);

478 
o
->
wrôe_iﬁog_fûe
 = 
NULL
;

479 
ªt
 = 
w¨nögs_Áèl
;

485 i‡(
o
->
z⁄e_size
 && o->
›í_fûes
 > 1)

486 
o
->
z⁄e_size
 = 0;

492 i‡(
o
->
z⁄e_size
 && !o->
z⁄e_ønge
)

493 
o
->
z⁄e_ønge
 = o->
z⁄e_size
;

498 i‡(
	`td_ªad
(
td
Ë|| 
	`td_rw
(td))

499 
o
->
ovîwrôe
 = 1;

501 i‡(!
o
->
mö_bs
[
DDIR_READ
])

502 
o
->
mö_bs
[
DDIR_READ
] = o->
bs
[DDIR_READ];

503 i‡(!
o
->
max_bs
[
DDIR_READ
])

504 
o
->
max_bs
[
DDIR_READ
] = o->
bs
[DDIR_READ];

505 i‡(!
o
->
mö_bs
[
DDIR_WRITE
])

506 
o
->
mö_bs
[
DDIR_WRITE
] = o->
bs
[DDIR_WRITE];

507 i‡(!
o
->
max_bs
[
DDIR_WRITE
])

508 
o
->
max_bs
[
DDIR_WRITE
] = o->
bs
[DDIR_WRITE];

509 i‡(!
o
->
mö_bs
[
DDIR_TRIM
])

510 
o
->
mö_bs
[
DDIR_TRIM
] = o->
bs
[DDIR_TRIM];

511 i‡(!
o
->
max_bs
[
DDIR_TRIM
])

512 
o
->
max_bs
[
DDIR_TRIM
] = o->
bs
[DDIR_TRIM];

515 
o
->
rw_mö_bs
 = 
	`mö
(o->
mö_bs
[
DDIR_READ
], o->mö_bs[
DDIR_WRITE
]);

516 
o
->
rw_mö_bs
 = 
	`mö
(o->
mö_bs
[
DDIR_TRIM
], o->rw_min_bs);

521 i‡(!
o
->
ba
[
DDIR_READ
] || !
	`td_øndom
(
td
))

522 
o
->
ba
[
DDIR_READ
] = o->
mö_bs
[DDIR_READ];

523 i‡(!
o
->
ba
[
DDIR_WRITE
] || !
	`td_øndom
(
td
))

524 
o
->
ba
[
DDIR_WRITE
] = o->
mö_bs
[DDIR_WRITE];

525 i‡(!
o
->
ba
[
DDIR_TRIM
] || !
	`td_øndom
(
td
))

526 
o
->
ba
[
DDIR_TRIM
] = o->
mö_bs
[DDIR_TRIM];

528 i‡((
o
->
ba
[
DDIR_READ
] !o->
mö_bs
[DDIR_READ] ||

529 
o
->
ba
[
DDIR_WRITE
] !o->
mö_bs
[DDIR_WRITE] ||

530 
o
->
ba
[
DDIR_TRIM
] !o->
mö_bs
[DDIR_TRIM]) &&

531 !
o
->
n‹™domm≠
) {

532 
	`log_îr
("fio: Any use of blockalign=Åurns offÑandommap\n");

533 
o
->
n‹™domm≠
 = 1;

534 
ªt
 = 
w¨nögs_Áèl
;

537 i‡(!
o
->
fûe_size_high
)

538 
o
->
fûe_size_high
 = o->
fûe_size_low
;

540 i‡(
o
->
°¨t_dñay_high
)

541 
o
->
°¨t_dñay
 = 
	`gë_ønd_°¨t_dñay
(
td
);

543 i‡(
o
->
n‹™domm≠
 && o->
vîify
 !
VERIFY_NONE


544 && !
	`fixed_block_size
(
o
)) {

545 
	`log_îr
("fio:Çorandommap given for variable block sizes, "

547 
o
->
vîify
 = 
VERIFY_NONE
;

548 
ªt
 = 
w¨nögs_Áèl
;

550 i‡(
o
->
bs_u«lig√d
 && (o->
odúe˘
 || 
td
->
io_›s
->
Êags
 & 
FIO_RAWIO
))

551 
	`log_îr
("fio: bs_unaligned mayÇot work withÑaw io\n");

556 i‡(
o
->
thöktime_•ö
 > o->
thöktime
)

557 
o
->
thöktime_•ö
 = o->
thöktime
;

562 i‡(
o
->
iodïth_low
 > o->
iodïth
 || !o->iodepth_low)

563 
o
->
iodïth_low
 = o->
iodïth
;

568 i‡(
o
->
iodïth_b©ch
 > o->
iodïth
 || !o->iodepth_batch)

569 
o
->
iodïth_b©ch
 = o->
iodïth
;

571 i‡(
o
->
ƒ_fûes
 > 
td
->
fûes_ödex
)

572 
o
->
ƒ_fûes
 = 
td
->
fûes_ödex
;

574 i‡(
o
->
›í_fûes
 > o->
ƒ_fûes
 || !o->open_files)

575 
o
->
›í_fûes
 = o->
ƒ_fûes
;

577 i‡(((
o
->
øã
[
DDIR_READ
] + o->øã[
DDIR_WRITE
] + o->øã[
DDIR_TRIM
]) &&

578 (
o
->
øã_i›s
[
DDIR_READ
] + o->øã_i›s[
DDIR_WRITE
] + o->øã_i›s[
DDIR_TRIM
])) ||

579 ((
o
->
øãmö
[
DDIR_READ
] + o->øãmö[
DDIR_WRITE
] + o->øãmö[
DDIR_TRIM
]) &&

580 (
o
->
øã_i›s_mö
[
DDIR_READ
] + o->øã_i›s_mö[
DDIR_WRITE
] + o->øã_i›s_mö[
DDIR_TRIM
]))) {

581 
	`log_îr
("fio:ÑateándÑate_iopsáre mutuallyÉxclusive\n");

582 
ªt
 = 1;

584 i‡((
o
->
øã
[
DDIR_READ
] < o->
øãmö
[DDIR_READ]) ||

585 (
o
->
øã
[
DDIR_WRITE
] < o->
øãmö
[DDIR_WRITE]) ||

586 (
o
->
øã
[
DDIR_TRIM
] < o->
øãmö
[DDIR_TRIM]) ||

587 (
o
->
øã_i›s
[
DDIR_READ
] < o->
øã_i›s_mö
[DDIR_READ]) ||

588 (
o
->
øã_i›s
[
DDIR_WRITE
] < o->
øã_i›s_mö
[DDIR_WRITE]) ||

589 (
o
->
øã_i›s
[
DDIR_TRIM
] < o->
øã_i›s_mö
[DDIR_TRIM])) {

590 
	`log_îr
("fio: minimumÑateÉxceedsÑate\n");

591 
ªt
 = 1;

594 i‡(!
o
->
timeout
 && o->
time_ba£d
) {

595 
	`log_îr
("fio:Åime_basedÑequiresáÑuntime/timeout setting\n");

596 
o
->
time_ba£d
 = 0;

597 
ªt
 = 
w¨nögs_Áèl
;

600 i‡(
o
->
fûl_devi˚
 && !o->
size
)

601 
o
->
size
 = -1ULL;

603 i‡(
o
->
vîify
 !
VERIFY_NONE
) {

604 i‡(
	`td_wrôe
(
td
Ë&& 
o
->
do_vîify
 && o->
numjobs
 > 1) {

605 
	`log_öfo
("Multiple writers may overwrite blocksÅhat "

608 
ªt
 = 
w¨nögs_Áèl
;

611 
o
->
ªfûl_buf„rs
 = 1;

612 i‡(
o
->
max_bs
[
DDIR_WRITE
] !o->
mö_bs
[DDIR_WRITE] &&

613 !
o
->
vîify_öãrvÆ
)

614 
o
->
vîify_öãrvÆ
 = o->
mö_bs
[
DDIR_WRITE
];

617 i‡(
o
->
¥e_ªad
) {

618 
o
->
övÆid©e_ˇche
 = 0;

619 i‡(
td
->
io_›s
->
Êags
 & 
FIO_PIPEIO
) {

620 
	`log_öfo
("fio: cannotÖre-read files withán IOÉngine"

622 
ªt
 = 
w¨nögs_Áèl
;

626 i‡(!
o
->
unô_ba£
) {

627 i‡(
td
->
io_›s
->
Êags
 & 
FIO_BIT_BASED
)

628 
o
->
unô_ba£
 = 1;

630 
o
->
unô_ba£
 = 8;

633 #i‚de‡
CONFIG_FDATASYNC


634 i‡(
o
->
fd©async_blocks
) {

635 
	`log_öfo
("fio:ÅhisÖlatform doesÇot support fdatasync()"

639 
o
->
fsync_blocks
 = o->
fd©async_blocks
;

640 
o
->
fd©async_blocks
 = 0;

641 
ªt
 = 
w¨nögs_Áèl
;

645 #ifde‡
WIN32


650 i‡((
td
->
io_›s
->
Êags
 & 
FIO_SYNCIO
Ë&& (td->
o
.
odúe˘
 ||Åd->o.
sync_io
)) {

651 
	`log_îr
("fio: Windows doesÇot support direct orÇon-buffered io with"

654 
ªt
 = 1;

662 i‡(
td
->
o
.
com¥ess_≥r˚¡age
 == 100) {

663 
td
->
o
.
zîo_buf„rs
 = 1;

664 
td
->
o
.
com¥ess_≥r˚¡age
 = 0;

671 i‡(
td
->
o
.
øndom_di°ributi⁄
 !
FIO_RAND_DIST_RANDOM
)

672 
td
->
o
.
n‹™domm≠
 = 1;

677 i‡(
o
->
size
 && o->sizê< 
	`td_mö_bs
(
td
)) {

678 
	`log_îr
("fio: sizêtoÿsmÆl, mu° bêœrgîÅh™ÅhêIO size: %Œu\n", (Ë
o
->
size
);

679 
ªt
 = 1;

685 i‡(
td
->
o
.
ﬂtomic
)

686 
td
->
o
.
odúe˘
 = 1;

691 i‡(
td
->
o
.
ønd_£ed
)

692 
td
->
o
.
ønd_ª≥©abÀ
 = 0;

694 i‡((
td
->
io_›s
->
Êags
 & 
FIO_NOEXTEND
Ë&&Åd->
o
.
fûe_≠≥nd
) {

695 
	`log_îr
("fio: c™'à≠≥nd/exã¡ wôh IOÉngöê%s\n", 
td
->
io_›s
->
«me
);

696 
ªt
 = 1;

699  
ªt
;

700 
	}
}

705 *
	$fio_uöt_to_kmg
(
vÆ
)

707 *
buf
 = 
	`mÆloc
(32);

708 
po°
[] = { 0, 'K', 'M', 'G', 'P', 'E', 0 };

709 *
p
 = 
po°
;

712 i‡(
vÆ
 & 1023)

715 
vÆ
 >>= 10;

716 
p
++;

717 } *
p
);

719 
	`¢¥ötf
(
buf
, 32, "%u%c", 
vÆ
, *
p
);

720  
buf
;

721 
	}
}

724 c⁄° *
	$gë_ígöe_«me
(c⁄° *
°r
)

726 *
p
 = 
	`°r°r
(
°r
, ":");

728 i‡(!
p
)

729  
°r
;

731 
p
++;

732 
	`°rù_bœnk_‰⁄t
(&
p
);

733 
	`°rù_bœnk_íd
(
p
);

734  
p
;

735 
	}
}

737 
	$exi°s_™d_nŸ_fûe
(c⁄° *
fûíame
)

739 
°©
 
sb
;

741 i‡(
	`l°©
(
fûíame
, &
sb
) == -1)

746 i‡(
	`S_ISREG
(
sb
.
°_mode
Ë&& 
	`°∫cmp
(
fûíame
, "\\\\.\\", 4) != 0)

750 
	}
}

752 
	$td_fûl_ønd_£eds_os
(
thªad_d©a
 *
td
)

754 
	`os_øndom_£ed
(
td
->
ønd_£eds
[
FIO_RAND_BS_OFF
], &td->
b§™ge_°©e
);

755 
	`os_øndom_£ed
(
td
->
ønd_£eds
[
FIO_RAND_VER_OFF
], &td->
vîify_°©e
);

756 
	`os_øndom_£ed
(
td
->
ønd_£eds
[
FIO_RAND_MIX_OFF
], &td->
rwmix_°©e
);

758 i‡(
td
->
o
.
fûe_£rvi˚_ty≥
 =
FIO_FSERVICE_RANDOM
)

759 
	`os_øndom_£ed
(
td
->
ønd_£eds
[
FIO_RAND_FILE_OFF
], &td->
√xt_fûe_°©e
);

761 
	`os_øndom_£ed
(
td
->
ønd_£eds
[
FIO_RAND_FILE_SIZE_OFF
], &td->
fûe_size_°©e
);

762 
	`os_øndom_£ed
(
td
->
ønd_£eds
[
FIO_RAND_TRIM_OFF
], &td->
åim_°©e
);

763 
	`os_øndom_£ed
(
td
->
ønd_£eds
[
FIO_RAND_START_DELAY
], &td->
dñay_°©e
);

765 i‡(!
	`td_øndom
(
td
))

768 i‡(
td
->
o
.
ønd_ª≥©abÀ
)

769 
td
->
ønd_£eds
[
FIO_RAND_BLOCK_OFF
] = 
FIO_RANDSEED
 *Åd->
thªad_numbî
;

771 
	`os_øndom_£ed
(
td
->
ønd_£eds
[
FIO_RAND_BLOCK_OFF
], &td->
øndom_°©e
);

773 
	`os_øndom_£ed
(
td
->
ønd_£eds
[
FIO_RAND_SEQ_RAND_READ_OFF
], &td->
£q_ønd_°©e
[
DDIR_READ
]);

774 
	`os_øndom_£ed
(
td
->
ønd_£eds
[
FIO_RAND_SEQ_RAND_WRITE_OFF
], &td->
£q_ønd_°©e
[
DDIR_WRITE
]);

775 
	`os_øndom_£ed
(
td
->
ønd_£eds
[
FIO_RAND_SEQ_RAND_TRIM_OFF
], &td->
£q_ønd_°©e
[
DDIR_TRIM
]);

776 
	}
}

778 
	$td_fûl_ønd_£eds_öã∫Æ
(
thªad_d©a
 *
td
)

780 
	`öô_ønd_£ed
(&
td
->
__b§™ge_°©e
,Åd->
ønd_£eds
[
FIO_RAND_BS_OFF
]);

781 
	`öô_ønd_£ed
(&
td
->
__vîify_°©e
,Åd->
ønd_£eds
[
FIO_RAND_VER_OFF
]);

782 
	`öô_ønd_£ed
(&
td
->
__rwmix_°©e
,Åd->
ønd_£eds
[
FIO_RAND_MIX_OFF
]);

784 i‡(
td
->
o
.
fûe_£rvi˚_ty≥
 =
FIO_FSERVICE_RANDOM
)

785 
	`öô_ønd_£ed
(&
td
->
__√xt_fûe_°©e
,Åd->
ønd_£eds
[
FIO_RAND_FILE_OFF
]);

787 
	`öô_ønd_£ed
(&
td
->
__fûe_size_°©e
,Åd->
ønd_£eds
[
FIO_RAND_FILE_SIZE_OFF
]);

788 
	`öô_ønd_£ed
(&
td
->
__åim_°©e
,Åd->
ønd_£eds
[
FIO_RAND_TRIM_OFF
]);

789 
	`öô_ønd_£ed
(&
td
->
__dñay_°©e
,Åd->
ønd_£eds
[
FIO_RAND_START_DELAY
]);

791 i‡(!
	`td_øndom
(
td
))

794 i‡(
td
->
o
.
ønd_ª≥©abÀ
)

795 
td
->
ønd_£eds
[
FIO_RAND_BLOCK_OFF
] = 
FIO_RANDSEED
 *Åd->
thªad_numbî
;

797 
	`öô_ønd_£ed
(&
td
->
__øndom_°©e
,Åd->
ønd_£eds
[
FIO_RAND_BLOCK_OFF
]);

798 
	`öô_ønd_£ed
(&
td
->
__£q_ønd_°©e
[
DDIR_READ
],Åd->
ønd_£eds
[
FIO_RAND_SEQ_RAND_READ_OFF
]);

799 
	`öô_ønd_£ed
(&
td
->
__£q_ønd_°©e
[
DDIR_WRITE
],Åd->
ønd_£eds
[
FIO_RAND_SEQ_RAND_WRITE_OFF
]);

800 
	`öô_ønd_£ed
(&
td
->
__£q_ønd_°©e
[
DDIR_TRIM
],Åd->
ønd_£eds
[
FIO_RAND_SEQ_RAND_TRIM_OFF
]);

801 
	}
}

803 
	$td_fûl_ønd_£eds
(
thªad_d©a
 *
td
)

805 i‡(
td
->
o
.
ÆÃ™d_ª≥©abÀ
) {

806 
i
 = 0; i < 
FIO_RAND_NR_OFFS
; i++)

807 
td
->
ønd_£eds
[
i
] = 
FIO_RANDSEED
 *Åd->
thªad_numbî


808 + 
i
;

811 i‡(
td
->
o
.
u£_os_ønd
)

812 
	`td_fûl_ønd_£eds_os
(
td
);

814 
	`td_fûl_ønd_£eds_öã∫Æ
(
td
);

816 
	`öô_ønd_£ed
(&
td
->
buf_°©e
,Åd->
ønd_£eds
[
FIO_RAND_BUF_OFF
]);

817 
	}
}

823 
	$i€ngöe_lﬂd
(
thªad_d©a
 *
td
)

825 c⁄° *
ígöe
;

830 i‡(
td
->
io_›s
)

832 i‡(!
td
->
o
.
i€ngöe
) {

833 
	`log_îr
("fio: internal fault,Ço IOÉngine specified\n");

837 
ígöe
 = 
	`gë_ígöe_«me
(
td
->
o
.
i€ngöe
);

838 
td
->
io_›s
 = 
	`lﬂd_i€ngöe
—d, 
ígöe
);

839 i‡(!
td
->
io_›s
) {

840 
	`log_îr
("fio: faûedÅÿlﬂdÉngöê%s\n", 
ígöe
);

844 i‡(
td
->
io_›s
->
›ti⁄_°ru˘_size
 &&Åd->io_›s->
›ti⁄s
) {

851 *
‹igeo
 = 
td
->
eo
;

855 i‡(!
‹igeo
 && 
td
 !&
def_thªad
 && def_thªad.
eo
 &&

856 
def_thªad
.
io_›s
->
›ti⁄s
 =
td
->io_ops->options)

857 
‹igeo
 = 
def_thªad
.
eo
;

859 
	`›ti⁄s_öô
(
td
->
io_›s
->
›ti⁄s
);

860 
td
->
eo
 = 
	`mÆloc
—d->
io_›s
->
›ti⁄_°ru˘_size
);

866 i‡(
‹igeo
) {

867 
	`mem˝y
(
td
->
eo
, 
‹igeo
,Åd->
io_›s
->
›ti⁄_°ru˘_size
);

868 
	`›ti⁄s_mem_du≥
(
td
->
eo
,Åd->
io_›s
->
›ti⁄s
);

870 
	`mem£t
(
td
->
eo
, 0,Åd->
io_›s
->
›ti⁄_°ru˘_size
);

871 
	`fûl_deÁu…_›ti⁄s
(
td
->
eo
,Åd->
io_›s
->
›ti⁄s
);

873 *(
thªad_d©a
 **)
td
->
eo
 =Åd;

877 
	}
}

879 
	$öô_Êags
(
thªad_d©a
 *
td
)

881 
thªad_›ti⁄s
 *
o
 = &
td
->o;

883 i‡(
o
->
vîify_backlog
)

884 
td
->
Êags
 |
TD_F_VER_BACKLOG
;

885 i‡(
o
->
åim_backlog
)

886 
td
->
Êags
 |
TD_F_TRIM_BACKLOG
;

887 i‡(
o
->
ªad_iﬁog_fûe
)

888 
td
->
Êags
 |
TD_F_READ_IOLOG
;

889 i‡(
o
->
ªfûl_buf„rs
)

890 
td
->
Êags
 |
TD_F_REFILL_BUFFERS
;

891 i‡(
o
->
s¸ambÀ_buf„rs
)

892 
td
->
Êags
 |
TD_F_SCRAMBLE_BUFFERS
;

893 i‡(
o
->
vîify
 !
VERIFY_NONE
)

894 
td
->
Êags
 |
TD_F_VER_NONE
;

895 
	}
}

897 
	$£tup_øndom_£eds
(
thªad_d©a
 *
td
)

899 
£ed
;

900 
i
;

902 i‡(!
td
->
o
.
ønd_ª≥©abÀ
 && !td->o.
ønd_£ed
)

903  
	`öô_øndom_°©e
(
td
,Åd->
ønd_£eds
, (td->rand_seeds));

905 i‡(!
td
->
o
.
ønd_£ed
)

906 
£ed
 = 0x89;

908 
£ed
 = 
td
->
o
.
ønd_£ed
;

910 
i
 = 0; i < 4; i++)

911 
£ed
 *= 0x9e370001UL;

913 
i
 = 0; i < 
FIO_RAND_NR_OFFS
; i++) {

914 
td
->
ønd_£eds
[
i
] = 
£ed
;

915 
£ed
 *= 0x9e370001UL;

918 
	`td_fûl_ønd_£eds
(
td
);

920 
	}
}

923 
	mFPRE_NONE
 = 0,

924 
	mFPRE_JOBNAME
,

925 
	mFPRE_JOBNUM
,

926 
	mFPRE_FILENUM


929 
	sÂª_keyw‹d
 {

930 c⁄° *
	mkeyw‹d
;

931 
size_t
 
	m°æí
;

932 
	mkey
;

933 } 
	gÂª_keyw‹ds
[] = {

934 { .
keyw‹d
 = "$job«me", .
	gkey
 = 
FPRE_JOBNAME
, },

935 { .
	gkeyw‹d
 = "$jobnum", .
	gkey
 = 
FPRE_JOBNUM
, },

936 { .
	gkeyw‹d
 = "$fûíum", .
	gkey
 = 
FPRE_FILENUM
, },

937 { .
	gkeyw‹d
 = 
NULL
, },

940 *
	$make_fûíame
(*
buf
, 
size_t
 
buf_size
,
thªad_›ti⁄s
 *
o
,

941 c⁄° *
job«me
, 
jobnum
, 
fûíum
)

943 
Âª_keyw‹d
 *
f
;

944 
c›y
[
PATH_MAX
];

945 
size_t
 
d°_À·
 = 
PATH_MAX
 - 1;

947 i‡(!
o
->
fûíame_f‹m©
 || !
	`°æí
(o->filename_format)) {

948 
	`•rötf
(
buf
, "%s.%d.%d", 
job«me
, 
jobnum
, 
fûíum
);

949  
NULL
;

952 
f
 = &
Âª_keyw‹ds
[0]; f->
keyw‹d
; f++)

953 
f
->
°æí
 = 
	`°æí
(f->
keyw‹d
);

955 
buf
[
buf_size
 - 1] = '\0';

956 
	`°∫˝y
(
buf
, 
o
->
fûíame_f‹m©
, 
buf_size
 - 1);

958 
	`mem£t
(
c›y
, 0, (copy));

959 
f
 = &
Âª_keyw‹ds
[0]; f->
keyw‹d
; f++) {

961 
size_t
 
¥e_Àn
, 
po°_°¨t
 = 0;

962 *
°r
, *
d°
 = 
c›y
;

964 
°r
 = 
	`°rˇ£°r
(
buf
, 
f
->
keyw‹d
);

965 i‡(!
°r
)

968 
¥e_Àn
 = 
°r
 - 
buf
;

969 i‡(
	`°æí
(
°r
Ë!
f
->
°æí
)

970 
po°_°¨t
 = 
¥e_Àn
 + 
f
->
°æí
;

972 i‡(
¥e_Àn
) {

973 
	`°∫˝y
(
d°
, 
buf
, 
¥e_Àn
);

974 
d°
 +
¥e_Àn
;

975 
d°_À·
 -
¥e_Àn
;

978 
f
->
key
) {

979 
FPRE_JOBNAME
: {

980 
ªt
;

982 
ªt
 = 
	`¢¥ötf
(
d°
, 
d°_À·
, "%s", 
job«me
);

983 i‡(
ªt
 < 0)

985 
d°
 +
ªt
;

986 
d°_À·
 -
ªt
;

989 
FPRE_JOBNUM
: {

990 
ªt
;

992 
ªt
 = 
	`¢¥ötf
(
d°
, 
d°_À·
, "%d", 
jobnum
);

993 i‡(
ªt
 < 0)

995 
d°
 +
ªt
;

996 
d°_À·
 -
ªt
;

999 
FPRE_FILENUM
: {

1000 
ªt
;

1002 
ªt
 = 
	`¢¥ötf
(
d°
, 
d°_À·
, "%d", 
fûíum
);

1003 i‡(
ªt
 < 0)

1005 
d°
 +
ªt
;

1006 
d°_À·
 -
ªt
;

1010 
	`as£π
(0);

1014 i‡(
po°_°¨t
)

1015 
	`°∫˝y
(
d°
, 
buf
 + 
po°_°¨t
, 
d°_À·
);

1017 
	`°∫˝y
(
buf
, 
c›y
, 
buf_size
 - 1);

1021  
buf
;

1022 
	}
}

1024 
	$∑r£_dryrun
()

1026  
dump_cmdlöe
 || 
∑r£_⁄ly
;

1027 
	}
}

1034 
	$add_job
(
thªad_d©a
 *
td
, c⁄° *
job«me
, 
job_add_num
,

1035 
ªcur£d
, 
˛õ¡_ty≥
)

1037 
i
;

1038 
‚ame
[
PATH_MAX
];

1039 
numjobs
, 
fûe_Ælo˚d
;

1040 
thªad_›ti⁄s
 *
o
 = &
td
->o;

1045 i‡(
td
 =&
def_thªad
)

1048 
	`öô_Êags
(
td
);

1053 i‡(
	`∑r£_dryrun
()) {

1054 
	`put_job
(
td
);

1058 
td
->
˛õ¡_ty≥
 = client_type;

1060 i‡(
	`¥ofûe_td_öô
(
td
))

1061 
îr
;

1063 i‡(
	`i€ngöe_lﬂd
(
td
))

1064 
îr
;

1066 i‡(
o
->
odúe˘
)

1067 
td
->
io_›s
->
Êags
 |
FIO_RAWIO
;

1069 
fûe_Ælo˚d
 = 0;

1070 i‡(!
o
->
fûíame
 && !
td
->
fûes_ödex
 && !o->
ªad_iﬁog_fûe
) {

1071 
fûe_Ælo˚d
 = 1;

1073 i‡(
o
->
ƒ_fûes
 =1 && 
	`exi°s_™d_nŸ_fûe
(
job«me
))

1074 
	`add_fûe
(
td
, 
job«me
, 
job_add_num
, 0);

1076 
i
 = 0; i < 
o
->
ƒ_fûes
; i++)

1077 
	`add_fûe
(
td
, 
	`make_fûíame
(
‚ame
, (‚ame), 
o
, 
job«me
, 
job_add_num
, 
i
), job_add_num, 0);

1081 i‡(
	`fixup_›ti⁄s
(
td
))

1082 
îr
;

1084 
	`Êow_öô_job
(
td
);

1090 i‡(
td
->
eo
)

1091 *(
thªad_d©a
 **)
td
->
eo
 = 
NULL
;

1093 i‡(
td
->
io_›s
->
Êags
 & 
FIO_DISKLESSIO
) {

1094 
fio_fûe
 *
f
;

1096 
	`f‹_óch_fûe
(
td
, 
f
, 
i
)

1097 
f
->
ªÆ_fûe_size
 = -1ULL;

1100 
td
->
muãx
 = 
	`fio_muãx_öô
(
FIO_MUTEX_LOCKED
);

1102 
td
->
ts
.
˛©_≥r˚¡ûes
 = 
o
->clat_percentiles;

1103 
td
->
ts
.
≥r˚¡ûe_¥ecisi⁄
 = 
o
->percentile_precision;

1104 
	`mem˝y
(
td
->
ts
.
≥r˚¡ûe_li°
, 
o
->percentile_list, (o->percentile_list));

1106 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

1107 
td
->
ts
.
˛©_°©
[
i
].
mö_vÆ
 = 
ULONG_MAX
;

1108 
td
->
ts
.
¶©_°©
[
i
].
mö_vÆ
 = 
ULONG_MAX
;

1109 
td
->
ts
.
œt_°©
[
i
].
mö_vÆ
 = 
ULONG_MAX
;

1110 
td
->
ts
.
bw_°©
[
i
].
mö_vÆ
 = 
ULONG_MAX
;

1112 
td
->
ddú_£q_ƒ
 = 
o
->ddir_seq_nr;

1114 i‡((
o
->
°⁄ewÆl
 || o->
√w_group
Ë&& 
¥ev_group_jobs
) {

1115 
¥ev_group_jobs
 = 0;

1116 
groupid
++;

1119 
td
->
groupid
 = groupid;

1120 
¥ev_group_jobs
++;

1122 i‡(
	`£tup_øndom_£eds
(
td
)) {

1123 
	`td_vîr‹
(
td
, 
î∫o
, "init_random_state");

1124 
îr
;

1127 i‡(
	`£tup_øã
(
td
))

1128 
îr
;

1130 i‡(
o
->
œt_log_fûe
 || 
wrôe_œt_log
) {

1131 
	`£tup_log
(&
td
->
œt_log
, 
o
->
log_avg_m£c
, 
IO_LOG_TYPE_LAT
);

1132 
	`£tup_log
(&
td
->
¶©_log
, 
o
->
log_avg_m£c
, 
IO_LOG_TYPE_SLAT
);

1133 
	`£tup_log
(&
td
->
˛©_log
, 
o
->
log_avg_m£c
, 
IO_LOG_TYPE_CLAT
);

1135 i‡(
o
->
bw_log_fûe
 || 
wrôe_bw_log
)

1136 
	`£tup_log
(&
td
->
bw_log
, 
o
->
log_avg_m£c
, 
IO_LOG_TYPE_BW
);

1137 i‡(
o
->
i›s_log_fûe
)

1138 
	`£tup_log
(&
td
->
i›s_log
, 
o
->
log_avg_m£c
, 
IO_LOG_TYPE_IOPS
);

1140 i‡(!
o
->
«me
)

1141 
o
->
«me
 = 
	`°rdup
(
job«me
);

1143 i‡(
ouçut_f‹m©
 =
FIO_OUTPUT_NORMAL
) {

1144 i‡(!
job_add_num
) {

1145 i‡(
is_backíd
 && !
ªcur£d
)

1146 
	`fio_£rvî_£nd_add_job
(
td
);

1148 i‡(!(
td
->
io_›s
->
Êags
 & 
FIO_NOIO
)) {

1149 *
c1
, *
c2
, *
c3
, *
c4
;

1150 *
c5
 = 
NULL
, *
c6
 = NULL;

1152 
c1
 = 
	`fio_uöt_to_kmg
(
o
->
mö_bs
[
DDIR_READ
]);

1153 
c2
 = 
	`fio_uöt_to_kmg
(
o
->
max_bs
[
DDIR_READ
]);

1154 
c3
 = 
	`fio_uöt_to_kmg
(
o
->
mö_bs
[
DDIR_WRITE
]);

1155 
c4
 = 
	`fio_uöt_to_kmg
(
o
->
max_bs
[
DDIR_WRITE
]);

1157 i‡(!
o
->
bs_is_£q_ønd
) {

1158 
c5
 = 
	`fio_uöt_to_kmg
(
o
->
mö_bs
[
DDIR_TRIM
]);

1159 
c6
 = 
	`fio_uöt_to_kmg
(
o
->
max_bs
[
DDIR_TRIM
]);

1162 
	`log_öfo
("%s: (g=%d):Ñw=%s, ", 
td
->
o
.
«me
,

1163 
td
->
groupid
,

1164 
	`ddú_°r
(
o
->
td_ddú
));

1166 i‡(
o
->
bs_is_£q_ønd
)

1167 
	`log_öfo
("bs(seq/rand)=%s-%s/%s-%s, ",

1168 
c1
, 
c2
, 
c3
, 
c4
);

1170 
	`log_öfo
("bs=%s-%s/%s-%s/%s-%s, ",

1171 
c1
, 
c2
, 
c3
, 
c4
, 
c5
, 
c6
);

1173 
	`log_öfo
("ioengine=%s, iodepth=%u\n",

1174 
td
->
io_›s
->
«me
, 
o
->
iodïth
);

1176 
	`‰ì
(
c1
);

1177 
	`‰ì
(
c2
);

1178 
	`‰ì
(
c3
);

1179 
	`‰ì
(
c4
);

1180 
	`‰ì
(
c5
);

1181 
	`‰ì
(
c6
);

1183 } i‡(
job_add_num
 == 1)

1184 
	`log_öfo
("...\n");

1191 
numjobs
 = 
o
->numjobs;

1192 --
numjobs
) {

1193 
thªad_d©a
 *
td_√w
 = 
	`gë_√w_job
(0, 
td
, 1);

1195 i‡(!
td_√w
)

1196 
îr
;

1198 
td_√w
->
o
.
numjobs
 = 1;

1199 
td_√w
->
o
.
°⁄ewÆl
 = 0;

1200 
td_√w
->
o
.
√w_group
 = 0;

1202 i‡(
fûe_Ælo˚d
) {

1203 i‡(
td_√w
->
fûes
) {

1204 
fio_fûe
 *
f
;

1205 
	`f‹_óch_fûe
(
td_√w
, 
f
, 
i
) {

1206 i‡(
f
->
fûe_«me
)

1207 
	`s‰ì
(
f
->
fûe_«me
);

1208 
	`s‰ì
(
f
);

1210 
	`‰ì
(
td_√w
->
fûes
);

1211 
td_√w
->
fûes
 = 
NULL
;

1213 
td_√w
->
fûes_ödex
 = 0;

1214 
td_√w
->
fûes_size
 = 0;

1215 i‡(
td_√w
->
o
.
fûíame
) {

1216 
	`‰ì
(
td_√w
->
o
.
fûíame
);

1217 
td_√w
->
o
.
fûíame
 = 
NULL
;

1221 i‡(
	`add_job
(
td_√w
, 
job«me
, 
numjobs
, 1, 
˛õ¡_ty≥
))

1222 
îr
;

1226 
îr
:

1227 
	`put_job
(
td
);

1229 
	}
}

1234 
	$add_job_›ts
(c⁄° **
o
, 
˛õ¡_ty≥
)

1236 
thªad_d©a
 *
td
, *
td_∑ª¡
;

1237 
i
, 
ö_globÆ
 = 1;

1238 
job«me
[32];

1240 
i
 = 0;

1241 
td_∑ª¡
 = 
td
 = 
NULL
;

1242 
o
[
i
]) {

1243 i‡(!
	`°∫cmp
(
o
[
i
], "name", 4)) {

1244 
ö_globÆ
 = 0;

1245 i‡(
td
)

1246 
	`add_job
(
td
, 
job«me
, 0, 0, 
˛õ¡_ty≥
);

1247 
td
 = 
NULL
;

1248 
	`•rötf
(
job«me
, "%s", 
o
[
i
] + 5);

1250 i‡(
ö_globÆ
 && !
td_∑ª¡
)

1251 
td_∑ª¡
 = 
	`gë_√w_job
(1, &
def_thªad
, 0);

1252 i‡(!
ö_globÆ
 && !
td
) {

1253 i‡(!
td_∑ª¡
)

1254 
td_∑ª¡
 = &
def_thªad
;

1255 
td
 = 
	`gë_√w_job
(0, 
td_∑ª¡
, 0);

1257 i‡(
ö_globÆ
)

1258 
	`fio_›ti⁄s_∑r£
(
td_∑ª¡
, (**Ë&
o
[
i
], 1, 0);

1260 
	`fio_›ti⁄s_∑r£
(
td
, (**Ë&
o
[
i
], 1, 0);

1261 
i
++;

1264 i‡(
td
)

1265 
	`add_job
(
td
, 
job«me
, 0, 0, 
˛õ¡_ty≥
);

1266 
	}
}

1268 
	$skù_this_£˘i⁄
(c⁄° *
«me
)

1270 
i
;

1272 i‡(!
ƒ_job_£˘i⁄s
)

1274 i‡(!
	`°∫cmp
(
«me
, "global", 6))

1277 
i
 = 0; i < 
ƒ_job_£˘i⁄s
; i++)

1278 i‡(!
	`°rcmp
(
job_£˘i⁄s
[
i
], 
«me
))

1282 
	}
}

1284 
	$is_em±y_‹_commít
(*
löe
)

1286 
i
;

1288 
i
 = 0; i < 
	`°æí
(
löe
); i++) {

1289 i‡(
löe
[
i
] == ';')

1291 i‡(
löe
[
i
] == '#')

1293 i‡(!
	`is•a˚
((Ë
löe
[
i
]Ë&& !
	`is˙ål
(()Üine[i]))

1298 
	}
}

1303 
	$∑r£_jobs_öi
(*
fûe
, 
is_buf
, 
°⁄ewÆl_Êag
, 
ty≥
)

1305 
globÆ
;

1306 
thªad_d©a
 *
td
;

1307 *
°rög
, *
«me
;

1308 
FILE
 *
f
;

1309 *
p
;

1310 
ªt
 = 0, 
°⁄ewÆl
;

1311 
fú°_£˘
 = 1;

1312 
skù_fgës
 = 0;

1313 
öside_skù
 = 0;

1314 **
›ts
;

1315 
i
, 
Æloc_›ts
, 
num_›ts
;

1317 i‡(
is_buf
)

1318 
f
 = 
NULL
;

1320 i‡(!
	`°rcmp
(
fûe
, "-"))

1321 
f
 = 
°dö
;

1323 
f
 = 
	`f›í
(
fûe
, "r");

1325 i‡(!
f
) {

1326 
	`≥º‹
("fopen job file");

1331 
°rög
 = 
	`mÆloc
(4096);

1336 
«me
 = 
	`mÆloc
(280);

1337 
	`mem£t
(
«me
, 0, 280);

1339 
Æloc_›ts
 = 8;

1340 
›ts
 = 
	`mÆloc
((*Ë* 
Æloc_›ts
);

1341 
num_›ts
 = 0;

1343 
°⁄ewÆl
 = 
°⁄ewÆl_Êag
;

1349 i‡(!
skù_fgës
) {

1350 i‡(
is_buf
)

1351 
p
 = 
	`°r£p
(&
fûe
, "\n");

1353 
p
 = 
	`fgës
(
°rög
, 4096, 
f
);

1354 i‡(!
p
)

1358 
skù_fgës
 = 0;

1359 
	`°rù_bœnk_‰⁄t
(&
p
);

1360 
	`°rù_bœnk_íd
(
p
);

1362 i‡(
	`is_em±y_‹_commít
(
p
))

1364 i‡(
	`ssˇnf
(
p
, "[%255[^\n]]", 
«me
) != 1) {

1365 i‡(
öside_skù
)

1367 
	`log_îr
("fio: option <%s> outside of [] job section\n",

1368 
p
);

1372 
«me
[
	`°æí
(name) - 1] = '\0';

1374 i‡(
	`skù_this_£˘i⁄
(
«me
)) {

1375 
öside_skù
 = 1;

1378 
öside_skù
 = 0;

1380 
globÆ
 = !
	`°∫cmp
(
«me
, "global", 6);

1382 i‡(
dump_cmdlöe
) {

1383 i‡(
fú°_£˘
)

1384 
	`log_öfo
("fio ");

1385 i‡(!
globÆ
)

1386 
	`log_öfo
("--«me=%†", 
«me
);

1387 
fú°_£˘
 = 0;

1390 
td
 = 
	`gë_√w_job
(
globÆ
, &
def_thªad
, 0);

1391 i‡(!
td
) {

1392 
ªt
 = 1;

1399 i‡(!
globÆ
 && 
°⁄ewÆl
) {

1400 
td
->
o
.
°⁄ewÆl
 = stonewall;

1401 
°⁄ewÆl
 = 0;

1404 
num_›ts
 = 0;

1405 
	`mem£t
(
›ts
, 0, 
Æloc_›ts
 * (*));

1408 i‡(
is_buf
)

1409 
p
 = 
	`°r£p
(&
fûe
, "\n");

1411 
p
 = 
	`fgës
(
°rög
, 4096, 
f
);

1412 i‡(!
p
)

1415 i‡(
	`is_em±y_‹_commít
(
p
))

1418 
	`°rù_bœnk_‰⁄t
(&
p
);

1424 i‡(
p
[0] == '[') {

1425 
skù_fgës
 = 1;

1429 
	`°rù_bœnk_íd
(
p
);

1431 i‡(
num_›ts
 =
Æloc_›ts
) {

1432 
Æloc_›ts
 <<= 1;

1433 
›ts
 = 
	`ªÆloc
(opts,

1434 
Æloc_›ts
 * (*));

1437 
›ts
[
num_›ts
] = 
	`°rdup
(
p
);

1438 
num_›ts
++;

1441 
ªt
 = 
	`fio_›ti⁄s_∑r£
(
td
, 
›ts
, 
num_›ts
, 
dump_cmdlöe
);

1442 i‡(!
ªt
)

1443 
ªt
 = 
	`add_job
(
td
, 
«me
, 0, 0, 
ty≥
);

1445 
	`log_îr
("fio: job %†dr›≥d\n", 
«me
);

1446 
	`put_job
(
td
);

1449 
i
 = 0; i < 
num_›ts
; i++)

1450 
	`‰ì
(
›ts
[
i
]);

1451 
num_›ts
 = 0;

1452 } !
ªt
);

1454 i‡(
dump_cmdlöe
)

1455 
	`log_öfo
("\n");

1457 
i
 = 0;

1458 
i
 < 
ƒ_job_£˘i⁄s
) {

1459 
	`‰ì
(
job_£˘i⁄s
[
i
]);

1460 
i
++;

1463 
	`‰ì
(
°rög
);

1464 
	`‰ì
(
«me
);

1465 
	`‰ì
(
›ts
);

1466 i‡(!
is_buf
 && 
f
 !
°dö
)

1467 
	`f˛o£
(
f
);

1468  
ªt
;

1469 
	}
}

1471 
	$fûl_def_thªad
()

1473 
	`mem£t
(&
def_thªad
, 0, (def_thread));

1475 
	`fio_gëafföôy
(
	`gëpid
(), &
def_thªad
.
o
.
˝umask
);

1476 
def_thªad
.
o
.
îr‹_dump
 = 1;

1481 
	`fio_fûl_deÁu…_›ti⁄s
(&
def_thªad
);

1483 
	}
}

1485 
	$ußge
(c⁄° *
«me
)

1487 
	`¥ötf
("%s\n", 
fio_vîsi⁄_°rög
);

1488 
	`¥ötf
("%†[›ti⁄s] [job o±i⁄s] <job fûe(s)>\n", 
«me
);

1489 
	`¥ötf
(" --debug=options\tEnable debugÜogging. May be one/more of:\n"

1492 
	`¥ötf
(" --parse-only\t\tParse options only, don't startány IO\n");

1493 
	`¥ötf
(" --output\t\tWrite outputÅo file\n");

1494 
	`¥ötf
(" --runtime\t\tRuntime in seconds\n");

1495 
	`¥ötf
(" --latency-log\t\tGenerateÖer-jobÜatencyÜogs\n");

1496 
	`¥ötf
(" --bandwidth-log\tGenerateÖer-job bandwidthÜogs\n");

1497 
	`¥ötf
(" --minimal\t\tMinimal (terse) output\n");

1498 
	`¥ötf
(" --output-format=x\tOutput format (terse,json,normal)\n");

1499 
	`¥ötf
(" --terse-version=x\tSetÅerse version output formatÅo 'x'\n");

1500 
	`¥ötf
(" --version\t\tPrint version infoándÉxit\n");

1501 
	`¥ötf
(" --help\t\tPrintÅhisÖage\n");

1502 
	`¥ötf
(" --cpuclock-test\tPerformÅest/validation of CPU clock\n");

1503 
	`¥ötf
(" --crctest\t\tTest speed of checksum functions\n");

1504 
	`¥ötf
(" --cmdhelp=cmd\t\tPrint command help, \"all\" foráll of"

1506 
	`¥ötf
(" --enghelp=engine\tPrint ioengine help, orÜist"

1508 
	`¥ötf
(" --enghelp=engine,cmd\tPrint help forán ioengine"

1510 
	`¥ötf
(" --showcmd\t\tTurná job file into commandÜine options\n");

1511 
	`¥ötf
(" --eta=when\t\tWhen ETAÉstimate should beÖrinted\n");

1512 
	`¥ötf
(" \t\tMay be \"always\", \"never\" or \"auto\"\n");

1513 
	`¥ötf
(" --eta-newline=time\tForceáÇewÜine forÉvery 'time'");

1514 
	`¥ötf
("ÖeriodÖassed\n");

1515 
	`¥ötf
(" --status-interval=t\tForce full status dumpÉvery");

1516 
	`¥ötf
(" 't'ÖeriodÖassed\n");

1517 
	`¥ötf
(" --readonly\t\tTurn on safetyÑead-only checks,Öreventing"

1519 
	`¥ötf
(" --section=name\tOnlyÑun specified section in job file\n");

1520 
	`¥ötf
(" --alloc-size=kb\tSet smallocÖoolÅoÅhis size in kb"

1522 
	`¥ötf
(" --warnings-fatal\tFioÖarser warningsáre fatal\n");

1523 
	`¥ötf
(" --max-jobs=nr\t\tMaximumÇumber ofÅhreads/processesÅo support\n");

1524 
	`¥ötf
(" --server=args\t\tStartá backend fio server\n");

1525 
	`¥ötf
(" --daemonize=pidfile\tBackground fio server, writeÖidÅo file\n");

1526 
	`¥ötf
(" --client=hostname\tTalkÅoÑemote backend fio serverát hostname\n");

1527 
	`¥ötf
(" --idle-prof=option\tReport cpu idleness oná system orÖercpu basis\n"

1530 
	`¥ötf
("\nFio was written by Jens Axboe <jens.axboe@oracle.com>");

1531 
	`¥ötf
("\n Jens Axboe <jaxboe@fusionio.com>");

1532 
	`¥ötf
("\n Jens Axboe <axboe@fb.com>\n");

1533 
	}
}

1535 #ifde‡
FIO_INC_DEBUG


1536 
debug_Àvñ
 
	gdebug_Àvñs
[] = {

1537 { .
«me
 = "process",

1538 .
	ghñp
 = "Process creation/exitÜogging",

1539 .
	gshi·
 = 
FD_PROCESS
,

1541 { .
	g«me
 = "file",

1542 .
	ghñp
 = "FileÑelatedáctionÜogging",

1543 .
	gshi·
 = 
FD_FILE
,

1545 { .
	g«me
 = "io",

1546 .
	ghñp
 = "IOánd IOÉngineáctionÜogging (offsets, queue, completions,Étc)",

1547 .
	gshi·
 = 
FD_IO
,

1549 { .
	g«me
 = "mem",

1550 .
	ghñp
 = "Memoryállocation/freeingÜogging",

1551 .
	gshi·
 = 
FD_MEM
,

1553 { .
	g«me
 = "blktrace",

1554 .
	ghñp
 = "blktraceáctionÜogging",

1555 .
	gshi·
 = 
FD_BLKTRACE
,

1557 { .
	g«me
 = "verify",

1558 .
	ghñp
 = "IO verificationáctionÜogging",

1559 .
	gshi·
 = 
FD_VERIFY
,

1561 { .
	g«me
 = "random",

1562 .
	ghñp
 = "Random generationÜogging",

1563 .
	gshi·
 = 
FD_RANDOM
,

1565 { .
	g«me
 = "parse",

1566 .
	ghñp
 = "ParserÜogging",

1567 .
	gshi·
 = 
FD_PARSE
,

1569 { .
	g«me
 = "diskutil",

1570 .
	ghñp
 = "Disk utilityÜoggingáctions",

1571 .
	gshi·
 = 
FD_DISKUTIL
,

1573 { .
	g«me
 = "job",

1574 .
	ghñp
 = "LoggingÑelatedÅo creating/destroying jobs",

1575 .
	gshi·
 = 
FD_JOB
,

1577 { .
	g«me
 = "mutex",

1578 .
	ghñp
 = "MutexÜogging",

1579 .
	gshi·
 = 
FD_MUTEX


1581 { .
	g«me
 = "profile",

1582 .
	ghñp
 = "LoggingÑelatedÅoÖrofiles",

1583 .
	gshi·
 = 
FD_PROFILE
,

1585 { .
	g«me
 = "time",

1586 .
	ghñp
 = "LoggingÑelatedÅoÅime keeping functions",

1587 .
	gshi·
 = 
FD_TIME
,

1589 { .
	g«me
 = "net",

1590 .
	ghñp
 = "NetworkÜogging",

1591 .
	gshi·
 = 
FD_NET
,

1593 { .
	g«me
 = "rate",

1594 .
	ghñp
 = "RateÜogging",

1595 .
	gshi·
 = 
FD_RATE
,

1597 { .
	g«me
 = 
NULL
, },

1600 
	$£t_debug
(c⁄° *
°rög
)

1602 
debug_Àvñ
 *
dl
;

1603 *
p
 = (*Ë
°rög
;

1604 *
›t
;

1605 
i
;

1607 i‡(!
	`°rcmp
(
°rög
, "?") || !strcmp(string, "help")) {

1608 
	`log_öfo
("fio: dumping debug options:");

1609 
i
 = 0; 
debug_Àvñs
[i].
«me
; i++) {

1610 
dl
 = &
debug_Àvñs
[
i
];

1611 
	`log_öfo
("%s,", 
dl
->
«me
);

1613 
	`log_öfo
("all\n");

1617 (
›t
 = 
	`°r£p
(&
p
, ",")Ë!
NULL
) {

1618 
found
 = 0;

1620 i‡(!
	`°∫cmp
(
›t
, "all", 3)) {

1621 
	`log_öfo
("fio: setáll debug options\n");

1622 
fio_debug
 = ~0UL;

1626 
i
 = 0; 
debug_Àvñs
[i].
«me
; i++) {

1627 
dl
 = &
debug_Àvñs
[
i
];

1628 
found
 = !
	`°∫cmp
(
›t
, 
dl
->
«me
, 
	`°æí
(dl->name));

1629 i‡(!
found
)

1632 i‡(
dl
->
shi·
 =
FD_JOB
) {

1633 
›t
 = 
	`°rchr
(opt, ':');

1634 i‡(!
›t
) {

1635 
	`log_îr
("fio: missing jobÇumber\n");

1638 
›t
++;

1639 
fio_debug_jobno
 = 
	`©oi
(
›t
);

1640 
	`log_öfo
("fio: set debug jobno %d\n",

1641 
fio_debug_jobno
);

1643 
	`log_öfo
("fio: së debug o±i⁄ %s\n", 
›t
);

1644 
fio_debug
 |(1UL << 
dl
->
shi·
);

1649 i‡(!
found
)

1650 
	`log_îr
("fio: debug mask %†nŸ found\n", 
›t
);

1653 
	}
}

1655 
	$£t_debug
(c⁄° *
°rög
)

1657 
	`log_îr
("fio: debugÅracingÇot included in build\n");

1659 
	}
}

1662 
	$fio_›ti⁄s_fûl_›t°rög
()

1664 *
o°r
 = 
cmd_›t°r
;

1665 
i
, 
c
;

1667 
c
 = 
i
 = 0;

1668 
l_›ts
[
i
].
«me
) {

1669 
o°r
[
c
++] = 
l_›ts
[
i
].
vÆ
;

1670 i‡(
l_›ts
[
i
].
has_¨g
 =
ªquúed_¨gumít
)

1671 
o°r
[
c
++] = ':';

1672 i‡(
l_›ts
[
i
].
has_¨g
 =
›ti⁄Æ_¨gumít
) {

1673 
o°r
[
c
++] = ':';

1674 
o°r
[
c
++] = ':';

1676 
i
++;

1678 
o°r
[
c
] = '\0';

1679 
	}
}

1681 
	$˛õ¡_Êag_£t
(
c
)

1683 
i
;

1685 
i
 = 0;

1686 
l_›ts
[
i
].
«me
) {

1687 
vÆ
 = 
l_›ts
[
i
].val;

1689 i‡(
c
 =(
vÆ
 & 0xff))

1690  (
vÆ
 & 
FIO_CLIENT_FLAG
);

1692 
i
++;

1696 
	}
}

1698 
	$∑r£_cmd_˛õ¡
(*
˛õ¡
, *
›t
)

1700 
	`fio_˛õ¡_add_cmd_›ti⁄
(
˛õ¡
, 
›t
);

1701 
	}
}

1703 
	$∑r£_cmd_löe
(
¨gc
, *
¨gv
[], 
˛õ¡_ty≥
)

1705 
thªad_d©a
 *
td
 = 
NULL
;

1706 
c
, 
öi_idx
 = 0, 
lidx
, 
ªt
 = 0, 
do_exô
 = 0, 
exô_vÆ
 = 0;

1707 *
o°r
 = 
cmd_›t°r
;

1708 *
pid_fûe
 = 
NULL
;

1709 *
cur_˛õ¡
 = 
NULL
;

1710 
backíd
 = 0;

1716 
›töd
 = 1;

1718 (
c
 = 
	`gë›t_l⁄g_⁄ly
(
¨gc
, 
¨gv
, 
o°r
, 
l_›ts
, &
lidx
)) != -1) {

1719 i‡((
c
 & 
FIO_CLIENT_FLAG
Ë|| 
	`˛õ¡_Êag_£t
(c)) {

1720 
	`∑r£_cmd_˛õ¡
(
cur_˛õ¡
, 
¨gv
[
›töd
 - 1]);

1721 
c
 &~
FIO_CLIENT_FLAG
;

1724 
c
) {

1726 
smÆloc_poﬁ_size
 = 
	`©oi
(
›èrg
);

1729 i‡(
	`check_°r_time
(
›èrg
, &
def_timeout
, 1)) {

1730 
	`log_îr
("fio: faûedÖ¨sögÅimê%s\n", 
›èrg
);

1731 
do_exô
++;

1732 
exô_vÆ
 = 1;

1736 
wrôe_œt_log
 = 1;

1739 
wrôe_bw_log
 = 1;

1742 i‡(
f_out
)

1743 
	`f˛o£
(
f_out
);

1745 
f_out
 = 
	`f›í
(
›èrg
, "w+");

1746 i‡(!
f_out
) {

1747 
	`≥º‹
("fopen output");

1748 
	`exô
(1);

1750 
f_îr
 = 
f_out
;

1753 
ouçut_f‹m©
 = 
FIO_OUTPUT_TERSE
;

1756 i‡(!
›èrg
) {

1757 
	`log_îr
("fio: missing --output-formatárgument\n");

1758 
exô_vÆ
 = 1;

1759 
do_exô
++;

1762 i‡(!
	`°rcmp
(
›èrg
, "minimal") ||

1763 !
	`°rcmp
(
›èrg
, "terse") ||

1764 !
	`°rcmp
(
›èrg
, "csv"))

1765 
ouçut_f‹m©
 = 
FIO_OUTPUT_TERSE
;

1766 i‡(!
	`°rcmp
(
›èrg
, "json"))

1767 
ouçut_f‹m©
 = 
FIO_OUTPUT_JSON
;

1769 
ouçut_f‹m©
 = 
FIO_OUTPUT_NORMAL
;

1772 
≠≥nd_ãr£_ouçut
 = 1;

1775 
did_¨g
 = 1;

1776 i‡(!
cur_˛õ¡
) {

1777 
	`ußge
(
¨gv
[0]);

1778 
do_exô
++;

1782 
did_¨g
 = 1;

1783 i‡(!
cur_˛õ¡
) {

1784 
	`fio_show_›ti⁄_hñp
(
›èrg
);

1785 
do_exô
++;

1789 
did_¨g
 = 1;

1790 i‡(!
cur_˛õ¡
) {

1791 
	`fio_show_i€ngöe_hñp
(
›èrg
);

1792 
do_exô
++;

1796 
did_¨g
 = 1;

1797 
dump_cmdlöe
 = 1;

1800 
ªad_⁄ly
 = 1;

1803 
did_¨g
 = 1;

1804 i‡(!
cur_˛õ¡
) {

1805 
	`log_öfo
("%s\n", 
fio_vîsi⁄_°rög
);

1806 
do_exô
++;

1810 
ãr£_vîsi⁄
 = 
	`©oi
(
›èrg
);

1811 i‡(!(
ãr£_vîsi⁄
 == 2 ||Åerse_version == 3 ||

1812 
ãr£_vîsi⁄
 == 4)) {

1813 
	`log_îr
("fio: badÅerse version format\n");

1814 
exô_vÆ
 = 1;

1815 
do_exô
++;

1819 i‡(!
	`°rcmp
("Æways", 
›èrg
))

1820 
ëa_¥öt
 = 
FIO_ETA_ALWAYS
;

1821 i‡(!
	`°rcmp
("√vî", 
›èrg
))

1822 
ëa_¥öt
 = 
FIO_ETA_NEVER
;

1825 
t
 = 0;

1827 i‡(
	`°r_to_decimÆ
(
›èrg
, &
t
, 0, 
NULL
, 1)) {

1828 
	`log_îr
("fio: faûedÖ¨sögÉèÅimê%s\n", 
›èrg
);

1829 
exô_vÆ
 = 1;

1830 
do_exô
++;

1832 
ëa_√w_löe
 = 
t
;

1836 i‡(
	`£t_debug
(
›èrg
))

1837 
do_exô
++;

1840 
did_¨g
 = 1;

1841 
∑r£_⁄ly
 = 1;

1844 
size_t
 
√w_size
;

1846 i‡(!
	`°rcmp
(
›èrg
, "global")) {

1847 
	`log_îr
("fio: can't use globalás only "

1849 
do_exô
++;

1850 
exô_vÆ
 = 1;

1853 
√w_size
 = (
ƒ_job_£˘i⁄s
 + 1) * (*);

1854 
job_£˘i⁄s
 = 
	`ªÆloc
(job_£˘i⁄s, 
√w_size
);

1855 
job_£˘i⁄s
[
ƒ_job_£˘i⁄s
] = 
	`°rdup
(
›èrg
);

1856 
ƒ_job_£˘i⁄s
++;

1860 
did_¨g
 = 1;

1861 i‡(
exec_¥ofûe
)

1862 
	`‰ì
(
exec_¥ofûe
);

1863 
exec_¥ofûe
 = 
	`°rdup
(
›èrg
);

1865 
FIO_GETOPT_JOB
: {

1866 c⁄° *
›t
 = 
l_›ts
[
lidx
].
«me
;

1867 *
vÆ
 = 
›èrg
;

1869 i‡(!
	`°∫cmp
(
›t
, "«me", 4Ë&& 
td
) {

1870 
ªt
 = 
	`add_job
(
td
,Åd->
o
.
«me
 ?: "fio", 0, 0, 
˛õ¡_ty≥
);

1871 i‡(
ªt
)

1872 
out_‰ì
;

1873 
td
 = 
NULL
;

1874 
did_¨g
 = 1;

1876 i‡(!
td
) {

1877 
is_£˘i⁄
 = !
	`°∫cmp
(
›t
, "name", 4);

1878 
globÆ
 = 0;

1880 i‡(!
is_£˘i⁄
 || !
	`°∫cmp
(
vÆ
, "global", 6))

1881 
globÆ
 = 1;

1883 i‡(
is_£˘i⁄
 && 
	`skù_this_£˘i⁄
(
vÆ
))

1886 
td
 = 
	`gë_√w_job
(
globÆ
, &
def_thªad
, 1);

1887 i‡(!
td
 || 
	`i€ngöe_lﬂd
(td))

1888 
out_‰ì
;

1889 
	`fio_›ti⁄s_£t_i€ngöe_›ts
(
l_›ts
, 
td
);

1892 i‡((!
vÆ
 || !
	`°æí
(val)) &&

1893 
l_›ts
[
lidx
].
has_¨g
 =
ªquúed_¨gumít
) {

1894 
	`log_îr
("fio: o±i⁄ %†ªquúe†™árgumít\n", 
›t
);

1895 
ªt
 = 1;

1897 
ªt
 = 
	`fio_cmd_›ti⁄_∑r£
(
td
, 
›t
, 
vÆ
);

1899 i‡(
ªt
) {

1900 i‡(
td
) {

1901 
	`put_job
(
td
);

1902 
td
 = 
NULL
;

1904 
do_exô
++;

1907 i‡(!
ªt
 && !
	`°rcmp
(
›t
, "ioengine")) {

1908 
	`‰ì_i€ngöe
(
td
);

1909 i‡(
	`i€ngöe_lﬂd
(
td
))

1910 
out_‰ì
;

1911 
	`fio_›ti⁄s_£t_i€ngöe_›ts
(
l_›ts
, 
td
);

1915 
FIO_GETOPT_IOENGINE
: {

1916 c⁄° *
›t
 = 
l_›ts
[
lidx
].
«me
;

1917 *
vÆ
 = 
›èrg
;

1919 i‡(!
td
)

1922 
ªt
 = 
	`fio_cmd_i€ngöe_›ti⁄_∑r£
(
td
, 
›t
, 
vÆ
);

1926 
w¨nögs_Áèl
 = 1;

1929 
max_jobs
 = 
	`©oi
(
›èrg
);

1930 i‡(!
max_jobs
 || max_job†> 
REAL_MAX_JOBS
) {

1931 
	`log_îr
("fio: invÆid max jobs: %d\n", 
max_jobs
);

1932 
do_exô
++;

1933 
exô_vÆ
 = 1;

1937 
did_¨g
 = 1;

1938 i‡(
ƒ_˛õ¡s
) {

1939 
	`log_îr
("fio: can't be both clientánd server\n");

1940 
do_exô
++;

1941 
exô_vÆ
 = 1;

1944 i‡(
›èrg
)

1945 
	`fio_£rvî_£t_¨g
(
›èrg
);

1946 
is_backíd
 = 1;

1947 
backíd
 = 1;

1950 i‡(
pid_fûe
)

1951 
	`‰ì
(
pid_fûe
);

1952 
pid_fûe
 = 
	`°rdup
(
›èrg
);

1955 i‡((
ªt
 = 
	`fio_idÀ_¥of_∑r£_›t
(
›èrg
))) {

1957 
did_¨g
 = 1;

1958 
do_exô
++;

1959 i‡(
ªt
 == -1)

1960 
exô_vÆ
 = 1;

1964 
did_¨g
 = 1;

1965 i‡(
is_backíd
) {

1966 
	`log_îr
("fio: can't be both clientánd server\n");

1967 
do_exô
++;

1968 
exô_vÆ
 = 1;

1971 i‡(
	`fio_˛õ¡_add
(&
fio_˛õ¡_›s
, 
›èrg
, &
cur_˛õ¡
)) {

1972 
	`log_îr
("fio: faûedáddög clõ¡ %s\n", 
›èrg
);

1973 
do_exô
++;

1974 
exô_vÆ
 = 1;

1981 
›töd
 < 
¨gc
) {

1982 i‡(!
	`°∫cmp
(
¨gv
[
›töd
], "--", 2) ||

1983 !
	`°∫cmp
(
¨gv
[
›töd
], "-", 1))

1986 
	`fio_˛õ¡_add_öi_fûe
(
cur_˛õ¡
, 
¨gv
[
›töd
]);

1987 
›töd
++;

1991 
did_¨g
 = 1;

1992 
do_exô
++;

1993 
exô_vÆ
 = 
	`fio_m⁄Ÿ⁄ic_˛ockã°
();

1996 
did_¨g
 = 1;

1997 
do_exô
++;

1998 
exô_vÆ
 = 
	`fio_¸˘e°
(
›èrg
);

2001 
vÆ
;

2003 i‡(
	`check_°r_time
(
›èrg
, &
vÆ
, 0)) {

2004 
	`log_îr
("fio: faûedÖ¨sögÅimê%s\n", 
›èrg
);

2005 
do_exô
++;

2006 
exô_vÆ
 = 1;

2009 
°©us_öãrvÆ
 = 
vÆ
 * 1000;

2013 
	`log_îr
("%s: uƒecognized o±i⁄ '%s'\n", 
¨gv
[0],

2014 
¨gv
[
›töd
 - 1]);

2016 
do_exô
++;

2017 
exô_vÆ
 = 1;

2020 i‡(
do_exô
)

2024 i‡(
do_exô
 && !(
is_backíd
 || 
ƒ_˛õ¡s
))

2025 
	`exô
(
exô_vÆ
);

2027 i‡(
ƒ_˛õ¡s
 && 
	`fio_˛õ¡s_c⁄√˘
())

2028 
	`exô
(1);

2030 i‡(
is_backíd
 && 
backíd
)

2031  
	`fio_°¨t_£rvî
(
pid_fûe
);

2032 i‡(
pid_fûe
)

2033 
	`‰ì
(
pid_fûe
);

2035 i‡(
td
) {

2036 i‡(!
ªt
) {

2037 
ªt
 = 
	`add_job
(
td
,Åd->
o
.
«me
 ?: "fio", 0, 0, 
˛õ¡_ty≥
);

2038 i‡(
ªt
)

2039 
did_¨g
 = 1;

2043 !
ªt
 && 
›töd
 < 
¨gc
) {

2044 
öi_idx
++;

2045 
öi_fûe
 = 
	`ªÆloc
(öi_fûe, 
öi_idx
 * (*));

2046 
öi_fûe
[
öi_idx
 - 1] = 
	`°rdup
(
¨gv
[
›töd
]);

2047 
›töd
++;

2050 
out_‰ì
:

2051 i‡(
pid_fûe
)

2052 
	`‰ì
(
pid_fûe
);

2054  
öi_idx
;

2055 
	}
}

2057 
	$fio_öô_›ti⁄s
()

2059 
f_out
 = 
°dout
;

2060 
f_îr
 = 
°dîr
;

2062 
	`fio_›ti⁄s_fûl_›t°rög
();

2063 
	`fio_›ti⁄s_dup_™d_öô
(
l_›ts
);

2065 
	`©exô
(
‰ì_shm
);

2067 i‡(
	`fûl_def_thªad
())

2071 
	}
}

2073 
fio_check_›ti⁄s
(
thªad_›ti⁄s
 *);

2075 
	$∑r£_›ti⁄s
(
¨gc
, *
¨gv
[])

2077 c⁄° 
ty≥
 = 
FIO_CLIENT_TYPE_CLI
;

2078 
job_fûes
, 
i
;

2080 i‡(
	`fio_öô_›ti⁄s
())

2082 i‡(
	`fio_ã°_cc⁄v
(&
def_thªad
.
o
))

2083 
	`log_îr
("fio: failed internal cconvÅest\n");

2085 
job_fûes
 = 
	`∑r£_cmd_löe
(
¨gc
, 
¨gv
, 
ty≥
);

2087 i‡(
job_fûes
 > 0) {

2088 
i
 = 0; i < 
job_fûes
; i++) {

2089 i‡(
i
 && 
	`fûl_def_thªad
())

2091 i‡(
ƒ_˛õ¡s
) {

2092 i‡(
	`fio_˛õ¡s_£nd_öi
(
öi_fûe
[
i
]))

2094 
	`‰ì
(
öi_fûe
[
i
]);

2095 } i‡(!
is_backíd
) {

2096 i‡(
	`∑r£_jobs_öi
(
öi_fûe
[
i
], 0, i, 
ty≥
))

2098 
	`‰ì
(
öi_fûe
[
i
]);

2101 } i‡(
ƒ_˛õ¡s
) {

2102 i‡(
	`fûl_def_thªad
())

2104 i‡(
	`fio_˛õ¡s_£nd_öi
(
NULL
))

2108 
	`‰ì
(
öi_fûe
);

2109 
	`fio_›ti⁄s_‰ì
(&
def_thªad
);

2110 
	`fûe£tup_mem_‰ì
();

2112 i‡(!
thªad_numbî
) {

2113 i‡(
	`∑r£_dryrun
())

2115 i‡(
exec_¥ofûe
)

2117 i‡(
is_backíd
 || 
ƒ_˛õ¡s
)

2119 i‡(
did_¨g
)

2122 
	`log_îr
("No jobs(s) defined\n\n");

2124 i‡(!
did_¨g
) {

2125 
	`ußge
(
¨gv
[0]);

2132 i‡(
def_thªad
.
o
.
gtod_ofÊﬂd
) {

2133 
	`fio_gtod_öô
();

2134 
fio_gtod_ofÊﬂd
 = 1;

2135 
fio_gtod_˝u
 = 
def_thªad
.
o
.
gtod_˝u
;

2138 i‡(
ouçut_f‹m©
 =
FIO_OUTPUT_NORMAL
)

2139 
	`log_öfo
("%s\n", 
fio_vîsi⁄_°rög
);

2142 
	}
}

2144 
	$›ti⁄s_deÁu…_fûl
(
thªad_›ti⁄s
 *
o
)

2146 
	`mem˝y
(
o
, &
def_thªad
.o, (*o));

2147 
	}
}

	@/home/terekhov/tmp/fio/fio/io_ddir.h

1 #i‚de‡
FIO_DDIR_H


2 
	#FIO_DDIR_H


	)

4 
	efio_ddú
 {

5 
	mDDIR_READ
 = 0,

6 
	mDDIR_WRITE
 = 1,

7 
	mDDIR_TRIM
 = 2,

8 
	mDDIR_RWDIR_CNT
 = 3,

9 
	mDDIR_SYNC
 = 3,

10 
	mDDIR_DATASYNC
,

11 
	mDDIR_SYNC_FILE_RANGE
,

12 
	mDDIR_WAIT
,

13 
	mDDIR_INVAL
 = -1,

16 
	etd_ddú
 {

17 
	mTD_DDIR_READ
 = 1 << 0,

18 
	mTD_DDIR_WRITE
 = 1 << 1,

19 
	mTD_DDIR_RAND
 = 1 << 2,

20 
	mTD_DDIR_TRIM
 = 1 << 3,

21 
	mTD_DDIR_RW
 = 
TD_DDIR_READ
 | 
TD_DDIR_WRITE
,

22 
	mTD_DDIR_RANDREAD
 = 
TD_DDIR_READ
 | 
TD_DDIR_RAND
,

23 
	mTD_DDIR_RANDWRITE
 = 
TD_DDIR_WRITE
 | 
TD_DDIR_RAND
,

24 
	mTD_DDIR_RANDRW
 = 
TD_DDIR_RW
 | 
TD_DDIR_RAND
,

25 
	mTD_DDIR_RANDTRIM
 = 
TD_DDIR_TRIM
 | 
TD_DDIR_RAND
,

28 
	#td_ªad
(
td
Ë(—d)->
o
.
td_ddú
 & 
TD_DDIR_READ
)

	)

29 
	#td_wrôe
(
td
Ë(—d)->
o
.
td_ddú
 & 
TD_DDIR_WRITE
)

	)

30 
	#td_åim
(
td
Ë(—d)->
o
.
td_ddú
 & 
TD_DDIR_TRIM
)

	)

31 
	#td_rw
(
td
Ë((—d)->
o
.
td_ddú
 & 
TD_DDIR_RW
Ë=TD_DDIR_RW)

	)

32 
	#td_øndom
(
td
Ë(—d)->
o
.
td_ddú
 & 
TD_DDIR_RAND
)

	)

33 
	#fûe_øndomm≠
(
td
, 
f
Ë(!—d)->
o
.
n‹™domm≠
 && (f)->
io_axm≠
)

	)

35 
ölöe
 
	$ddú_sync
(
fio_ddú
 
ddú
)

37  
ddú
 =
DDIR_SYNC
 || ddú =
DDIR_DATASYNC
 ||

38 
ddú
 =
DDIR_SYNC_FILE_RANGE
;

39 
	}
}

41 
ölöe
 
	$ddú_rw
(
fio_ddú
 
ddú
)

43  
ddú
 =
DDIR_READ
 || ddú =
DDIR_WRITE
 || ddú =
DDIR_TRIM
;

44 
	}
}

46 
ölöe
 c⁄° *
	$ddú_°r
(
td_ddú
 
ddú
)

48 c⁄° *
ddú_°r
[] = { 
NULL
, "read", "write", "rw", NULL,

50 "åim", 
NULL
, NULL, NULL, "randtrim" };

52  
ddú_°r
[
ddú
];

53 
	}
}

55 
	#ddú_åim
(
ddú
Ë((ddúË=
DDIR_TRIM
)

	)

57 
	#ddú_rw_sum
(
¨r
) \

58 ((
¨r
)[
DDIR_READ
] + (¨r)[
DDIR_WRITE
] + (¨r)[
DDIR_TRIM
])

	)

	@/home/terekhov/tmp/fio/fio/io_u.c

1 
	~<uni°d.h
>

2 
	~<f˙é.h
>

3 
	~<°rög.h
>

4 
	~<sig«l.h
>

5 
	~<time.h
>

6 
	~<as£π.h
>

8 
	~"fio.h
"

9 
	~"hash.h
"

10 
	~"vîify.h
"

11 
	~"åim.h
"

12 
	~"lib/ønd.h
"

13 
	~"lib/axm≠.h
"

14 
	~"îr.h
"

16 
	sio_com∂ëi⁄_d©a
 {

17 
	mƒ
;

19 
	mîr‹
;

20 
uöt64_t
 
	mbyãs_d⁄e
[
DDIR_RWDIR_CNT
];

21 
timevÆ
 
	mtime
;

28 
	$øndom_m≠_‰ì
(
fio_fûe
 *
f
, c⁄° 
uöt64_t
 
block
)

30  !
	`axm≠_is£t
(
f
->
io_axm≠
, 
block
);

31 
	}
}

36 
	$m¨k_øndom_m≠
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

38 
mö_bs
 = 
td
->
o
.
rw_mö_bs
;

39 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

40 
ƒ_blocks
;

41 
uöt64_t
 
block
;

43 
block
 = (
io_u
->
off£t
 - 
f
->
fûe_off£t
Ë/ (
uöt64_t
Ë
mö_bs
;

44 
ƒ_blocks
 = (
io_u
->
buÊí
 + 
mö_bs
 - 1) / min_bs;

46 i‡(!(
io_u
->
Êags
 & 
IO_U_F_BUSY_OK
))

47 
ƒ_blocks
 = 
	`axm≠_£t_ƒ
(
f
->
io_axm≠
, 
block
,Çr_blocks);

49 i‡((
ƒ_blocks
 * 
mö_bs
Ë< 
io_u
->
buÊí
)

50 
io_u
->
buÊí
 = 
ƒ_blocks
 * 
mö_bs
;

51 
	}
}

53 
uöt64_t
 
	$œ°_block
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

54 
fio_ddú
 
ddú
)

56 
uöt64_t
 
max_blocks
;

57 
uöt64_t
 
max_size
;

59 
	`as£π
(
	`ddú_rw
(
ddú
));

64 
max_size
 = 
f
->
io_size
;

65 i‡(
max_size
 > 
f
->
ªÆ_fûe_size
)

66 
max_size
 = 
f
->
ªÆ_fûe_size
;

68 i‡(
td
->
o
.
z⁄e_ønge
)

69 
max_size
 = 
td
->
o
.
z⁄e_ønge
;

71 
max_blocks
 = 
max_size
 / (
uöt64_t
Ë
td
->
o
.
ba
[
ddú
];

72 i‡(!
max_blocks
)

75  
max_blocks
;

76 
	}
}

78 
	sønd_off
 {

79 
Êi°_hód
 
	mli°
;

80 
uöt64_t
 
	moff
;

83 
	$__gë_√xt_ønd_off£t
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

84 
fio_ddú
 
ddú
, 
uöt64_t
 *
b
)

86 
uöt64_t
 
r
, 
œ°b
;

88 
œ°b
 = 
	`œ°_block
(
td
, 
f
, 
ddú
);

89 i‡(!
œ°b
)

92 i‡(
td
->
o
.
øndom_gíî©‹
 =
FIO_RAND_GEN_TAUSWORTHE
) {

93 
uöt64_t
 
rmax
;

95 
rmax
 = 
td
->
o
.
u£_os_ønd
 ? 
OS_RAND_MAX
 : 
FRAND_MAX
;

97 i‡(
td
->
o
.
u£_os_ønd
) {

98 
rmax
 = 
OS_RAND_MAX
;

99 
r
 = 
	`os_øndom_l⁄g
(&
td
->
øndom_°©e
);

101 
rmax
 = 
FRAND_MAX
;

102 
r
 = 
	`__ønd
(&
td
->
__øndom_°©e
);

105 
	`d¥öt
(
FD_RANDOM
, "of‡ønd %Œu\n", (Ë
r
);

107 *
b
 = 
œ°b
 * (
r
 / ((
uöt64_t
Ë
rmax
 + 1.0));

109 
uöt64_t
 
off
 = 0;

111 i‡(
	`lf§_√xt
(&
f
->
lf§
, &
off
, 
œ°b
))

114 *
b
 = 
off
;

120 i‡(!
	`fûe_øndomm≠
(
td
, 
f
))

121 
ªt
;

126 i‡(
	`øndom_m≠_‰ì
(
f
, *
b
))

127 
ªt
;

129 
	`d¥öt
(
FD_RANDOM
, "get_next_rand_offset: offset %llu busy\n",

130 (Ë*
b
);

132 *
b
 = 
	`axm≠_√xt_‰ì
(
f
->
io_axm≠
, *b);

133 i‡(*
b
 =(
uöt64_t
) -1ULL)

135 
ªt
:

137 
	}
}

139 
	$__gë_√xt_ønd_off£t_zùf
(
thªad_d©a
 *
td
,

140 
fio_fûe
 *
f
, 
fio_ddú
 
ddú
,

141 
uöt64_t
 *
b
)

143 *
b
 = 
	`zùf_√xt
(&
f
->
zùf
);

145 
	}
}

147 
	$__gë_√xt_ønd_off£t_∑ªto
(
thªad_d©a
 *
td
,

148 
fio_fûe
 *
f
, 
fio_ddú
 
ddú
,

149 
uöt64_t
 *
b
)

151 *
b
 = 
	`∑ªto_√xt
(&
f
->
zùf
);

153 
	}
}

155 
	$Êi°_cmp
(*
d©a
, 
Êi°_hód
 *
a
, Êi°_hód *
b
)

157 
ønd_off
 *
r1
 = 
	`Êi°_íåy
(
a
, ønd_off, 
li°
);

158 
ønd_off
 *
r2
 = 
	`Êi°_íåy
(
b
, ønd_off, 
li°
);

160  
r1
->
off
 - 
r2
->off;

161 
	}
}

163 
	$gë_off_‰om_mëhod
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

164 
fio_ddú
 
ddú
, 
uöt64_t
 *
b
)

166 i‡(
td
->
o
.
øndom_di°ributi⁄
 =
FIO_RAND_DIST_RANDOM
)

167  
	`__gë_√xt_ønd_off£t
(
td
, 
f
, 
ddú
, 
b
);

168 i‡(
td
->
o
.
øndom_di°ributi⁄
 =
FIO_RAND_DIST_ZIPF
)

169  
	`__gë_√xt_ønd_off£t_zùf
(
td
, 
f
, 
ddú
, 
b
);

170 i‡(
td
->
o
.
øndom_di°ributi⁄
 =
FIO_RAND_DIST_PARETO
)

171  
	`__gë_√xt_ønd_off£t_∑ªto
(
td
, 
f
, 
ddú
, 
b
);

173 
	`log_îr
("fio: unknow¿øndom di°ributi⁄: %d\n", 
td
->
o
.
øndom_di°ributi⁄
);

175 
	}
}

181 
ölöe
 
	$should_s‹t_io
(
thªad_d©a
 *
td
)

183 i‡(!
td
->
o
.
vîifys‹t_ƒ
 || !td->o.
do_vîify
)

185 i‡(!
	`td_øndom
(
td
))

187 i‡(
td
->
run°©e
 !
TD_VERIFYING
)

189 i‡(
td
->
o
.
øndom_gíî©‹
 =
FIO_RAND_GEN_TAUSWORTHE
)

193 
	}
}

195 
	$should_do_øndom
(
thªad_d©a
 *
td
, 
fio_ddú
 
ddú
)

197 
v
;

198 
r
;

200 i‡(
td
->
o
.
≥rc_ønd
[
ddú
] == 100)

203 i‡(
td
->
o
.
u£_os_ønd
) {

204 
r
 = 
	`os_øndom_l⁄g
(&
td
->
£q_ønd_°©e
[
ddú
]);

205 
v
 = 1 + (Ë(100.0 * (
r
 / (
OS_RAND_MAX
 + 1.0)));

207 
r
 = 
	`__ønd
(&
td
->
__£q_ønd_°©e
[
ddú
]);

208 
v
 = 1 + (Ë(100.0 * (
r
 / (
FRAND_MAX
 + 1.0)));

211  
v
 <
td
->
o
.
≥rc_ønd
[
ddú
];

212 
	}
}

214 
	$gë_√xt_ønd_off£t
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

215 
fio_ddú
 
ddú
, 
uöt64_t
 *
b
)

217 
ønd_off
 *
r
;

218 
i
, 
ªt
 = 1;

220 i‡(!
	`should_s‹t_io
(
td
))

221  
	`gë_off_‰om_mëhod
(
td
, 
f
, 
ddú
, 
b
);

223 i‡(!
	`Êi°_em±y
(&
td
->
√xt_ønd_li°
)) {

224 
ønd_off
 *
r
;

225 
„tch
:

226 
r
 = 
	`Êi°_íåy
(
td
->
√xt_ønd_li°
.
√xt
, 
ønd_off
, 
li°
);

227 
	`Êi°_dñ
(&
r
->
li°
);

228 *
b
 = 
r
->
off
;

229 
	`‰ì
(
r
);

233 
i
 = 0; i < 
td
->
o
.
vîifys‹t_ƒ
; i++) {

234 
r
 = 
	`mÆloc
((*r));

236 
ªt
 = 
	`gë_off_‰om_mëhod
(
td
, 
f
, 
ddú
, &
r
->
off
);

237 i‡(
ªt
) {

238 
	`‰ì
(
r
);

242 
	`Êi°_add
(&
r
->
li°
, &
td
->
√xt_ønd_li°
);

245 i‡(
ªt
 && !
i
)

246  
ªt
;

248 
	`as£π
(!
	`Êi°_em±y
(&
td
->
√xt_ønd_li°
));

249 
	`Êi°_s‹t
(
NULL
, &
td
->
√xt_ønd_li°
, 
Êi°_cmp
);

250 
„tch
;

251 
	}
}

253 
	$gë_√xt_ønd_block
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

254 
fio_ddú
 
ddú
, 
uöt64_t
 *
b
)

256 i‡(!
	`gë_√xt_ønd_off£t
(
td
, 
f
, 
ddú
, 
b
))

259 i‡(
td
->
o
.
time_ba£d
) {

260 
	`fio_fûe_ª£t
(
td
, 
f
);

261 i‡(!
	`gë_√xt_ønd_off£t
(
td
, 
f
, 
ddú
, 
b
))

265 
	`d¥öt
(
FD_IO
, "%s:Ñand offset failed,Üast=%llu, size=%llu\n",

266 
f
->
fûe_«me
, (Ëf->
œ°_pos
,

267 (Ë
f
->
ªÆ_fûe_size
);

269 
	}
}

271 
	$gë_√xt_£q_off£t
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

272 
fio_ddú
 
ddú
, 
uöt64_t
 *
off£t
)

274 
	`as£π
(
	`ddú_rw
(
ddú
));

276 i‡(
f
->
œ°_pos
 >f->
io_size
 + 
	`gë_°¨t_off£t
(
td
, fË&&Åd->
o
.
time_ba£d
)

277 
f
->
œ°_pos
 = f->œ°_po†- f->
io_size
;

279 i‡(
f
->
œ°_pos
 < f->
ªÆ_fûe_size
) {

280 
uöt64_t
 
pos
;

282 i‡(
f
->
œ°_pos
 =f->
fûe_off£t
 && 
td
->
o
.
ddú_£q_add
 < 0)

283 
f
->
œ°_pos
 = f->
ªÆ_fûe_size
;

285 
pos
 = 
f
->
œ°_pos
 - f->
fûe_off£t
;

286 i‡(
pos
)

287 
pos
 +
td
->
o
.
ddú_£q_add
;

289 *
off£t
 = 
pos
;

294 
	}
}

296 
	$gë_√xt_block
(
thªad_d©a
 *
td
, 
io_u
 *io_u,

297 
fio_ddú
 
ddú
, 
rw_£q
,

298 *
is_øndom
)

300 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

301 
uöt64_t
 
b
, 
off£t
;

302 
ªt
;

304 
	`as£π
(
	`ddú_rw
(
ddú
));

306 
b
 = 
off£t
 = -1ULL;

308 i‡(
rw_£q
) {

309 i‡(
	`td_øndom
(
td
)) {

310 i‡(
	`should_do_øndom
(
td
, 
ddú
)) {

311 
ªt
 = 
	`gë_√xt_ønd_block
(
td
, 
f
, 
ddú
, &
b
);

312 *
is_øndom
 = 1;

314 *
is_øndom
 = 0;

315 
io_u
->
Êags
 |
IO_U_F_BUSY_OK
;

316 
ªt
 = 
	`gë_√xt_£q_off£t
(
td
, 
f
, 
ddú
, &
off£t
);

317 i‡(
ªt
)

318 
ªt
 = 
	`gë_√xt_ønd_block
(
td
, 
f
, 
ddú
, &
b
);

321 *
is_øndom
 = 0;

322 
ªt
 = 
	`gë_√xt_£q_off£t
(
td
, 
f
, 
ddú
, &
off£t
);

325 
io_u
->
Êags
 |
IO_U_F_BUSY_OK
;

326 *
is_øndom
 = 0;

328 i‡(
td
->
o
.
rw_£q
 =
RW_SEQ_SEQ
) {

329 
ªt
 = 
	`gë_√xt_£q_off£t
(
td
, 
f
, 
ddú
, &
off£t
);

330 i‡(
ªt
) {

331 
ªt
 = 
	`gë_√xt_ønd_block
(
td
, 
f
, 
ddú
, &
b
);

332 *
is_øndom
 = 0;

334 } i‡(
td
->
o
.
rw_£q
 =
RW_SEQ_IDENT
) {

335 i‡(
f
->
œ°_°¨t
 != -1ULL)

336 
off£t
 = 
f
->
œ°_°¨t
 - f->
fûe_off£t
;

338 
off£t
 = 0;

339 
ªt
 = 0;

341 
	`log_îr
("fio: unknow¿rw_£q=%d\n", 
td
->
o
.
rw_£q
);

342 
ªt
 = 1;

346 i‡(!
ªt
) {

347 i‡(
off£t
 != -1ULL)

348 
io_u
->
off£t
 = offset;

349 i‡(
b
 != -1ULL)

350 
io_u
->
off£t
 = 
b
 * 
td
->
o
.
ba
[
ddú
];

352 
	`log_îr
("fio: bug i¿off£àgíî©i⁄: off£t=%Œu, b=%Œu\n", (Ë
off£t
, (Ë
b
);

353 
ªt
 = 1;

357  
ªt
;

358 
	}
}

365 
	$__gë_√xt_off£t
(
thªad_d©a
 *
td
, 
io_u
 *io_u,

366 *
is_øndom
)

368 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

369 
fio_ddú
 
ddú
 = 
io_u
->ddir;

370 
rw_£q_hô
 = 0;

372 
	`as£π
(
	`ddú_rw
(
ddú
));

374 i‡(
td
->
o
.
ddú_£q_ƒ
 && !--td->ddir_seq_nr) {

375 
rw_£q_hô
 = 1;

376 
td
->
ddú_£q_ƒ
 =Åd->
o
.ddir_seq_nr;

379 i‡(
	`gë_√xt_block
(
td
, 
io_u
, 
ddú
, 
rw_£q_hô
, 
is_øndom
))

382 i‡(
io_u
->
off£t
 >
f
->
io_size
) {

383 
	`d¥öt
(
FD_IO
, "get_next_offset: offset %llu >= io_size %llu\n",

384 (Ë
io_u
->
off£t
,

385 (Ë
f
->
io_size
);

389 
io_u
->
off£t
 +
f
->
fûe_off£t
;

390 i‡(
io_u
->
off£t
 >
f
->
ªÆ_fûe_size
) {

391 
	`d¥öt
(
FD_IO
, "get_next_offset: offset %llu >= size %llu\n",

392 (Ë
io_u
->
off£t
,

393 (Ë
f
->
ªÆ_fûe_size
);

398 
	}
}

400 
	$gë_√xt_off£t
(
thªad_d©a
 *
td
, 
io_u
 *io_u,

401 *
is_øndom
)

403 i‡(
td
->
Êags
 & 
TD_F_PROFILE_OPS
) {

404 
¥of_io_›s
 *
›s
 = &
td
->prof_io_ops;

406 i‡(
›s
->
fûl_io_u_off
)

407  
›s
->
	`fûl_io_u_off
(
td
, 
io_u
, 
is_øndom
);

410  
	`__gë_√xt_off£t
(
td
, 
io_u
, 
is_øndom
);

411 
	}
}

413 
ölöe
 
	$io_u_fôs
(
thªad_d©a
 *
td
, 
io_u
 *io_u,

414 
buÊí
)

416 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

418  
io_u
->
off£t
 + 
buÊí
 <
f
->
io_size
 + 
	`gë_°¨t_off£t
(
td
, f);

419 
	}
}

421 
	$__gë_√xt_buÊí
(
thªad_d©a
 *
td
, 
io_u
 *io_u,

422 
is_øndom
)

424 
ddú
 = 
io_u
->ddir;

425 
buÊí
 = 0;

426 
möbs
, 
maxbs
;

427 
r
, 
ønd_max
;

429 
	`as£π
(
	`ddú_rw
(
ddú
));

431 i‡(
td
->
o
.
bs_is_£q_ønd
)

432 
ddú
 = 
is_øndom
 ? 
DDIR_WRITE
: 
DDIR_READ
;

434 
möbs
 = 
td
->
o
.
mö_bs
[
ddú
];

435 
maxbs
 = 
td
->
o
.
max_bs
[
ddú
];

437 i‡(
möbs
 =
maxbs
)

438  
möbs
;

443 i‡(!
	`io_u_fôs
(
td
, 
io_u
, 
möbs
))

446 i‡(
td
->
o
.
u£_os_ønd
)

447 
ønd_max
 = 
OS_RAND_MAX
;

449 
ønd_max
 = 
FRAND_MAX
;

452 i‡(
td
->
o
.
u£_os_ønd
)

453 
r
 = 
	`os_øndom_l⁄g
(&
td
->
b§™ge_°©e
);

455 
r
 = 
	`__ønd
(&
td
->
__b§™ge_°©e
);

457 i‡(!
td
->
o
.
bs•lô_ƒ
[
ddú
]) {

458 
buÊí
 = 1 + (Ë((Ë
maxbs
 *

459 (
r
 / (
ønd_max
 + 1.0)));

460 i‡(
buÊí
 < 
möbs
)

461 
buÊí
 = 
möbs
;

463 
≥rc
 = 0;

464 
i
;

466 
i
 = 0; i < 
td
->
o
.
bs•lô_ƒ
[
ddú
]; i++) {

467 
bs•lô
 *
b•
 = &
td
->
o
.bs•lô[
ddú
][
i
];

469 
buÊí
 = 
b•
->
bs
;

470 
≥rc
 +
b•
->perc;

471 i‡((
r
 <((
ønd_max
 / 100LË* 
≥rc
)) &&

472 
	`io_u_fôs
(
td
, 
io_u
, 
buÊí
))

477 i‡(
td
->
o
.
do_vîify
 &&Åd->o.
vîify
 !
VERIFY_NONE
)

478 
buÊí
 = (buÊí + 
td
->
o
.
vîify_öãrvÆ
 - 1) &

479 ~(
td
->
o
.
vîify_öãrvÆ
 - 1);

481 i‡(!
td
->
o
.
bs_u«lig√d
 && 
	`is_powî_of_2
(
möbs
))

482 
buÊí
 = (buÊí + 
möbs
 - 1) & ~(minbs - 1);

484 } !
	`io_u_fôs
(
td
, 
io_u
, 
buÊí
));

486  
buÊí
;

487 
	}
}

489 
	$gë_√xt_buÊí
(
thªad_d©a
 *
td
, 
io_u
 *io_u,

490 
is_øndom
)

492 i‡(
td
->
Êags
 & 
TD_F_PROFILE_OPS
) {

493 
¥of_io_›s
 *
›s
 = &
td
->prof_io_ops;

495 i‡(
›s
->
fûl_io_u_size
)

496  
›s
->
	`fûl_io_u_size
(
td
, 
io_u
, 
is_øndom
);

499  
	`__gë_√xt_buÊí
(
td
, 
io_u
, 
is_øndom
);

500 
	}
}

502 
	$£t_rwmix_byãs
(
thªad_d©a
 *
td
)

504 
diff
;

511 
diff
 = 
td
->
o
.
rwmix
[td->
rwmix_ddú
 ^ 1];

512 
td
->
rwmix_issues
 = (td->
io_issues
[td->
rwmix_ddú
] * 
diff
) / 100;

513 
	}
}

515 
ölöe
 
fio_ddú
 
	$gë_ønd_ddú
(
thªad_d©a
 *
td
)

517 
v
;

518 
r
;

520 i‡(
td
->
o
.
u£_os_ønd
) {

521 
r
 = 
	`os_øndom_l⁄g
(&
td
->
rwmix_°©e
);

522 
v
 = 1 + (Ë(100.0 * (
r
 / (
OS_RAND_MAX
 + 1.0)));

524 
r
 = 
	`__ønd
(&
td
->
__rwmix_°©e
);

525 
v
 = 1 + (Ë(100.0 * (
r
 / (
FRAND_MAX
 + 1.0)));

528 i‡(
v
 <
td
->
o
.
rwmix
[
DDIR_READ
])

529  
DDIR_READ
;

531  
DDIR_WRITE
;

532 
	}
}

534 
	$io_u_quõs˚
(
thªad_d©a
 *
td
)

545 
td
->
io_u_ö_Êight
) {

546 
fio_unu£d
 
ªt
;

548 
ªt
 = 
	`io_u_queued_com∂ëe
(
td
, 1, 
NULL
);

550 
	}
}

552 
fio_ddú
 
	$øã_ddú
(
thªad_d©a
 *
td
, 
fio_ddú
 
ddú
)

554 
fio_ddú
 
odú
 = 
ddú
 ^ 1;

555 
timevÆ
 
t
;

556 
u£c
;

558 
	`as£π
(
	`ddú_rw
(
ddú
));

560 i‡(
td
->
øã_≥ndög_u¶ìp
[
ddú
] <= 0)

561  
ddú
;

567 i‡(
	`td_rw
(
td
Ë&&Åd->
o
.
rwmix
[
odú
]) {

571 i‡(
td
->
øã_≥ndög_u¶ìp
[
odú
] < 100000)

572  
odú
;

578 i‡(
td
->
øã_≥ndög_u¶ìp
[
ddú
] <=

579 
td
->
øã_≥ndög_u¶ìp
[
odú
]) {

580 
u£c
 = 
td
->
øã_≥ndög_u¶ìp
[
ddú
];

582 
u£c
 = 
td
->
øã_≥ndög_u¶ìp
[
odú
];

583 
ddú
 = 
odú
;

586 
u£c
 = 
td
->
øã_≥ndög_u¶ìp
[
ddú
];

588 
	`io_u_quõs˚
(
td
);

590 
	`fio_gëtime
(&
t
, 
NULL
);

591 
	`u£c_¶ìp
(
td
, 
u£c
);

592 
u£c
 = 
	`utime_sö˚_now
(&
t
);

594 
td
->
øã_≥ndög_u¶ìp
[
ddú
] -
u£c
;

596 
odú
 = 
ddú
 ^ 1;

597 i‡(
	`td_rw
(
td
Ë&& 
	`__should_check_øã
—d, 
odú
))

598 
td
->
øã_≥ndög_u¶ìp
[
odú
] -
u£c
;

600 i‡(
	`ddú_åim
(
ddú
))

601  
ddú
;

603  
ddú
;

604 
	}
}

611 
fio_ddú
 
	$gë_rw_ddú
(
thªad_d©a
 *
td
)

613 
fio_ddú
 
ddú
;

618 i‡(
td
->
o
.
fsync_blocks
 &&

619 !(
td
->
io_issues
[
DDIR_WRITE
] %Åd->
o
.
fsync_blocks
) &&

620 
td
->
io_issues
[
DDIR_WRITE
] && 
	`should_fsync
(td))

621  
DDIR_SYNC
;

626 i‡(
td
->
o
.
fd©async_blocks
 &&

627 !(
td
->
io_issues
[
DDIR_WRITE
] %Åd->
o
.
fd©async_blocks
) &&

628 
td
->
io_issues
[
DDIR_WRITE
] && 
	`should_fsync
(td))

629  
DDIR_DATASYNC
;

634 i‡(
td
->
sync_fûe_ønge_ƒ
 &&

635 !(
td
->
io_issues
[
DDIR_WRITE
] %Åd->
sync_fûe_ønge_ƒ
) &&

636 
td
->
io_issues
[
DDIR_WRITE
] && 
	`should_fsync
(td))

637  
DDIR_SYNC_FILE_RANGE
;

639 i‡(
	`td_rw
(
td
)) {

643 i‡(
td
->
io_issues
[td->
rwmix_ddú
] >td->
rwmix_issues
) {

649 
ddú
 = 
	`gë_ønd_ddú
(
td
);

651 i‡(
ddú
 !
td
->
rwmix_ddú
)

652 
	`£t_rwmix_byãs
(
td
);

654 
td
->
rwmix_ddú
 = 
ddú
;

656 
ddú
 = 
td
->
rwmix_ddú
;

657 } i‡(
	`td_ªad
(
td
))

658 
ddú
 = 
DDIR_READ
;

659 i‡(
	`td_wrôe
(
td
))

660 
ddú
 = 
DDIR_WRITE
;

662 
ddú
 = 
DDIR_TRIM
;

664 
td
->
rwmix_ddú
 = 
	`øã_ddú
—d, 
ddú
);

665  
td
->
rwmix_ddú
;

666 
	}
}

668 
	$£t_rw_ddú
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

670 
io_u
->
ddú
 = io_u->
ac˘_ddú
 = 
	`gë_rw_ddú
(
td
);

672 i‡(
io_u
->
ddú
 =
DDIR_WRITE
 && (
td
->
io_›s
->
Êags
 & 
FIO_BARRIER
) &&

673 
td
->
o
.
b¨rõr_blocks
 &&

674 !(
td
->
io_issues
[
DDIR_WRITE
] %Åd->
o
.
b¨rõr_blocks
) &&

675 
td
->
io_issues
[
DDIR_WRITE
])

676 
io_u
->
Êags
 |
IO_U_F_BARRIER
;

677 
	}
}

679 
	$put_fûe_log
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

681 
ªt
 = 
	`put_fûe
(
td
, 
f
);

683 i‡(
ªt
)

684 
	`td_vîr‹
(
td
, 
ªt
, "file close");

685 
	}
}

687 
	$put_io_u
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

689 
	`td_io_u_lock
(
td
);

691 i‡(
io_u
->
fûe
 && !(io_u->
Êags
 & 
IO_U_F_FREE_DEF
))

692 
	`put_fûe_log
(
td
, 
io_u
->
fûe
);

693 
io_u
->
fûe
 = 
NULL
;

694 
io_u
->
Êags
 &~
IO_U_F_FREE_DEF
;

695 
io_u
->
Êags
 |
IO_U_F_FREE
;

697 i‡(
io_u
->
Êags
 & 
IO_U_F_IN_CUR_DEPTH
)

698 
td
->
cur_dïth
--;

699 
	`io_u_qpush
(&
td
->
io_u_‰ìli°
, 
io_u
);

700 
	`td_io_u_u∆ock
(
td
);

701 
	`td_io_u_‰ì_nŸify
(
td
);

702 
	}
}

704 
	$˛ór_io_u
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

706 
io_u
->
Êags
 &~
IO_U_F_FLIGHT
;

707 
	`put_io_u
(
td
, 
io_u
);

708 
	}
}

710 
	$ªqueue_io_u
(
thªad_d©a
 *
td
, 
io_u
 **io_u)

712 
io_u
 *
__io_u
 = *io_u;

713 
fio_ddú
 
ddú
 = 
	`ac˘_ddú
(
__io_u
);

715 
	`d¥öt
(
FD_IO
, "ªqueuê%p\n", 
__io_u
);

717 
	`td_io_u_lock
(
td
);

719 
__io_u
->
Êags
 |
IO_U_F_FREE
;

720 i‡((
__io_u
->
Êags
 & 
IO_U_F_FLIGHT
Ë&& 
	`ddú_rw
(
ddú
))

721 
td
->
io_issues
[
ddú
]--;

723 
__io_u
->
Êags
 &~
IO_U_F_FLIGHT
;

724 i‡(
__io_u
->
Êags
 & 
IO_U_F_IN_CUR_DEPTH
)

725 
td
->
cur_dïth
--;

727 
	`io_u_Ωush
(&
td
->
io_u_ªqueues
, 
__io_u
);

728 
	`td_io_u_u∆ock
(
td
);

729 *
io_u
 = 
NULL
;

730 
	}
}

732 
	$fûl_io_u
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

734 
is_øndom
;

736 i‡(
td
->
io_›s
->
Êags
 & 
FIO_NOIO
)

737 
out
;

739 
	`£t_rw_ddú
(
td
, 
io_u
);

744 i‡(!
	`ddú_rw
(
io_u
->
ddú
))

745 
out
;

750 i‡(
td
->
z⁄e_byãs
 >td->
o
.
z⁄e_size
 &&Åd->o.
z⁄e_skù
) {

751 
td
->
z⁄e_byãs
 = 0;

752 
io_u
->
fûe
->
fûe_off£t
 +
td
->
o
.
z⁄e_ønge
 +Åd->o.
z⁄e_skù
;

753 
io_u
->
fûe
->
œ°_pos
 = io_u->fûe->
fûe_off£t
;

754 
td
->
io_skù_byãs
 +td->
o
.
z⁄e_skù
;

761 i‡(
	`gë_√xt_off£t
(
td
, 
io_u
, &
is_øndom
)) {

762 
	`d¥öt
(
FD_IO
, "io_u %p, faûed gëtög off£t\n", 
io_u
);

766 
io_u
->
buÊí
 = 
	`gë_√xt_buÊí
(
td
, io_u, 
is_øndom
);

767 i‡(!
io_u
->
buÊí
) {

768 
	`d¥öt
(
FD_IO
, "io_u %p, faûed gëtög buÊí\n", 
io_u
);

772 i‡(
io_u
->
off£t
 + io_u->
buÊí
 > io_u->
fûe
->
ªÆ_fûe_size
) {

773 
	`d¥öt
(
FD_IO
, "io_u %p, off£àtoÿœrge\n", 
io_u
);

774 
	`d¥öt
(
FD_IO
, " off=%llu/%lu > %llu\n",

775 (Ë
io_u
->
off£t
, io_u->
buÊí
,

776 (Ë
io_u
->
fûe
->
ªÆ_fûe_size
);

783 i‡(
	`td_øndom
(
td
Ë&& 
	`fûe_øndomm≠
—d, 
io_u
->
fûe
))

784 
	`m¨k_øndom_m≠
(
td
, 
io_u
);

786 
out
:

787 
	`d¥öt_io_u
(
io_u
, "fill_io_u");

788 
td
->
z⁄e_byãs
 +
io_u
->
buÊí
;

790 
	}
}

792 
	$__io_u_m¨k_m≠
(*
m≠
, 
ƒ
)

794 
idx
 = 0;

796 
ƒ
) {

798 
idx
 = 6;

801 
idx
 = 5;

804 
idx
 = 4;

807 
idx
 = 3;

810 
idx
 = 2;

813 
idx
 = 1;

818 
m≠
[
idx
]++;

819 
	}
}

821 
	$io_u_m¨k_submô
(
thªad_d©a
 *
td
, 
ƒ
)

823 
	`__io_u_m¨k_m≠
(
td
->
ts
.
io_u_submô
, 
ƒ
);

824 
td
->
ts
.
tŸÆ_submô
++;

825 
	}
}

827 
	$io_u_m¨k_com∂ëe
(
thªad_d©a
 *
td
, 
ƒ
)

829 
	`__io_u_m¨k_m≠
(
td
->
ts
.
io_u_com∂ëe
, 
ƒ
);

830 
td
->
ts
.
tŸÆ_com∂ëe
++;

831 
	}
}

833 
	$io_u_m¨k_dïth
(
thªad_d©a
 *
td
, 
ƒ
)

835 
idx
 = 0;

837 
td
->
cur_dïth
) {

839 
idx
 = 6;

842 
idx
 = 5;

845 
idx
 = 4;

848 
idx
 = 3;

851 
idx
 = 2;

854 
idx
 = 1;

859 
td
->
ts
.
io_u_m≠
[
idx
] +
ƒ
;

860 
	}
}

862 
	$io_u_m¨k_œt_u£c
(
thªad_d©a
 *
td
, 
u£c
)

864 
idx
 = 0;

866 
	`as£π
(
u£c
 < 1000);

868 
u£c
) {

870 
idx
 = 9;

873 
idx
 = 8;

876 
idx
 = 7;

879 
idx
 = 6;

882 
idx
 = 5;

885 
idx
 = 4;

888 
idx
 = 3;

891 
idx
 = 2;

894 
idx
 = 1;

899 
	`as£π
(
idx
 < 
FIO_IO_U_LAT_U_NR
);

900 
td
->
ts
.
io_u_œt_u
[
idx
]++;

901 
	}
}

903 
	$io_u_m¨k_œt_m£c
(
thªad_d©a
 *
td
, 
m£c
)

905 
idx
 = 0;

907 
m£c
) {

909 
idx
 = 11;

912 
idx
 = 10;

915 
idx
 = 9;

918 
idx
 = 8;

921 
idx
 = 7;

924 
idx
 = 6;

927 
idx
 = 5;

930 
idx
 = 4;

933 
idx
 = 3;

936 
idx
 = 2;

939 
idx
 = 1;

944 
	`as£π
(
idx
 < 
FIO_IO_U_LAT_M_NR
);

945 
td
->
ts
.
io_u_œt_m
[
idx
]++;

946 
	}
}

948 
	$io_u_m¨k_œãncy
(
thªad_d©a
 *
td
, 
u£c
)

950 i‡(
u£c
 < 1000)

951 
	`io_u_m¨k_œt_u£c
(
td
, 
u£c
);

953 
	`io_u_m¨k_œt_m£c
(
td
, 
u£c
 / 1000);

954 
	}
}

959 
fio_fûe
 *
	$gë_√xt_fûe_ønd
(
thªad_d©a
 *
td
,

960 
fio_fûe_Êags
 
goodf
,

961 
fio_fûe_Êags
 
badf
)

963 
fio_fûe
 *
f
;

964 
‚o
;

967 
›íed
 = 0;

968 
r
;

970 i‡(
td
->
o
.
u£_os_ønd
) {

971 
r
 = 
	`os_øndom_l⁄g
(&
td
->
√xt_fûe_°©e
);

972 
‚o
 = (Ë((Ë
td
->
o
.
ƒ_fûes


973 * (
r
 / (
OS_RAND_MAX
 + 1.0)));

975 
r
 = 
	`__ønd
(&
td
->
__√xt_fûe_°©e
);

976 
‚o
 = (Ë((Ë
td
->
o
.
ƒ_fûes


977 * (
r
 / (
FRAND_MAX
 + 1.0)));

980 
f
 = 
td
->
fûes
[
‚o
];

981 i‡(
	`fio_fûe_d⁄e
(
f
))

984 i‡(!
	`fio_fûe_›í
(
f
)) {

985 
îr
;

987 i‡(
td
->
ƒ_›í_fûes
 >td->
o
.
›í_fûes
)

988  
	`ERR_PTR
(-
EBUSY
);

990 
îr
 = 
	`td_io_›í_fûe
(
td
, 
f
);

991 i‡(
îr
)

993 
›íed
 = 1;

996 i‡((!
goodf
 || (
f
->
Êags
 & goodf)Ë&& !(f->Êag†& 
badf
)) {

997 
	`d¥öt
(
FD_FILE
, "gë_√xt_fûe_ønd: %p\n", 
f
);

998  
f
;

1000 i‡(
›íed
)

1001 
	`td_io_˛o£_fûe
(
td
, 
f
);

1003 
	}
}

1008 
fio_fûe
 *
	$gë_√xt_fûe_º
(
thªad_d©a
 *
td
, 
goodf
,

1009 
badf
)

1011 
ﬁd_√xt_fûe
 = 
td
->
√xt_fûe
;

1012 
fio_fûe
 *
f
;

1015 
›íed
 = 0;

1017 
f
 = 
td
->
fûes
[td->
√xt_fûe
];

1019 
td
->
√xt_fûe
++;

1020 i‡(
td
->
√xt_fûe
 >td->
o
.
ƒ_fûes
)

1021 
td
->
√xt_fûe
 = 0;

1023 
	`d¥öt
(
FD_FILE
, "åyög fûê%†%x\n", 
f
->
fûe_«me
, f->
Êags
);

1024 i‡(
	`fio_fûe_d⁄e
(
f
)) {

1025 
f
 = 
NULL
;

1029 i‡(!
	`fio_fûe_›í
(
f
)) {

1030 
îr
;

1032 i‡(
td
->
ƒ_›í_fûes
 >td->
o
.
›í_fûes
)

1033  
	`ERR_PTR
(-
EBUSY
);

1035 
îr
 = 
	`td_io_›í_fûe
(
td
, 
f
);

1036 i‡(
îr
) {

1037 
	`d¥öt
(
FD_FILE
, "error %d on open of %s\n",

1038 
îr
, 
f
->
fûe_«me
);

1039 
f
 = 
NULL
;

1042 
›íed
 = 1;

1045 
	`d¥öt
(
FD_FILE
, "goodf=%x, badf=%x, ff=%x\n", 
goodf
, 
badf
,

1046 
f
->
Êags
);

1047 i‡((!
goodf
 || (
f
->
Êags
 & goodf)Ë&& !(f->Êag†& 
badf
))

1050 i‡(
›íed
)

1051 
	`td_io_˛o£_fûe
(
td
, 
f
);

1053 
f
 = 
NULL
;

1054 } 
td
->
√xt_fûe
 !
ﬁd_√xt_fûe
);

1056 
	`d¥öt
(
FD_FILE
, "gë_√xt_fûe_º: %p\n", 
f
);

1057  
f
;

1058 
	}
}

1060 
fio_fûe
 *
	$__gë_√xt_fûe
(
thªad_d©a
 *
td
)

1062 
fio_fûe
 *
f
;

1064 
	`as£π
(
td
->
o
.
ƒ_fûes
 <td->
fûes_ödex
);

1066 i‡(
td
->
ƒ_d⁄e_fûes
 >td->
o
.
ƒ_fûes
) {

1067 
	`d¥öt
(
FD_FILE
, "get_next_file:Çr_open=%d,Çr_done=%d,"

1068 "Çr_fûes=%d\n", 
td
->
ƒ_›í_fûes
,

1069 
td
->
ƒ_d⁄e_fûes
,

1070 
td
->
o
.
ƒ_fûes
);

1071  
NULL
;

1074 
f
 = 
td
->
fûe_£rvi˚_fûe
;

1075 i‡(
f
 && 
	`fio_fûe_›í
(fË&& !
	`fio_fûe_˛osög
(f)) {

1076 i‡(
td
->
o
.
fûe_£rvi˚_ty≥
 =
FIO_FSERVICE_SEQ
)

1077 
out
;

1078 i‡(
td
->
fûe_£rvi˚_À·
--)

1079 
out
;

1082 i‡(
td
->
o
.
fûe_£rvi˚_ty≥
 =
FIO_FSERVICE_RR
 ||

1083 
td
->
o
.
fûe_£rvi˚_ty≥
 =
FIO_FSERVICE_SEQ
)

1084 
f
 = 
	`gë_√xt_fûe_º
(
td
, 
FIO_FILE_›í
, 
FIO_FILE_˛osög
);

1086 
f
 = 
	`gë_√xt_fûe_ønd
(
td
, 
FIO_FILE_›í
, 
FIO_FILE_˛osög
);

1088 i‡(
	`IS_ERR
(
f
))

1089  
f
;

1091 
td
->
fûe_£rvi˚_fûe
 = 
f
;

1092 
td
->
fûe_£rvi˚_À·
 =Åd->
fûe_£rvi˚_ƒ
 - 1;

1093 
out
:

1094 i‡(
f
)

1095 
	`d¥öt
(
FD_FILE
, "gë_√xt_fûe: %∞[%s]\n", 
f
, f->
fûe_«me
);

1097 
	`d¥öt
(
FD_FILE
, "get_next_file: NULL\n");

1098  
f
;

1099 
	}
}

1101 
fio_fûe
 *
	$gë_√xt_fûe
(
thªad_d©a
 *
td
)

1103 i‡(!(
td
->
Êags
 & 
TD_F_PROFILE_OPS
)) {

1104 
¥of_io_›s
 *
›s
 = &
td
->prof_io_ops;

1106 i‡(
›s
->
gë_√xt_fûe
)

1107  
›s
->
	`gë_√xt_fûe
(
td
);

1110  
	`__gë_√xt_fûe
(
td
);

1111 
	}
}

1113 
	$£t_io_u_fûe
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

1115 
fio_fûe
 *
f
;

1118 
f
 = 
	`gë_√xt_fûe
(
td
);

1119 i‡(
	`IS_ERR_OR_NULL
(
f
))

1120  
	`PTR_ERR
(
f
);

1122 
io_u
->
fûe
 = 
f
;

1123 
	`gë_fûe
(
f
);

1125 i‡(!
	`fûl_io_u
(
td
, 
io_u
))

1128 
	`put_fûe_log
(
td
, 
f
);

1129 
	`td_io_˛o£_fûe
(
td
, 
f
);

1130 
io_u
->
fûe
 = 
NULL
;

1131 
	`fio_fûe_£t_d⁄e
(
f
);

1132 
td
->
ƒ_d⁄e_fûes
++;

1133 
	`d¥öt
(
FD_FILE
, "%s: i†d⁄ê(%d o‡%d)\n", 
f
->
fûe_«me
,

1134 
td
->
ƒ_d⁄e_fûes
,Åd->
o
.
ƒ_fûes
);

1138 
	}
}

1140 
	$œt_Áèl
(
thªad_d©a
 *
td
, 
io_com∂ëi⁄_d©a
 *
icd
,

1141 
tu£c
, 
max_u£c
)

1143 i‡(!
td
->
îr‹
)

1144 
	`log_îr
("fio:Ü©ícy o‡%lu u£¯ex˚ed†•ecifõd max (%lu u£c)\n", 
tu£c
, 
max_u£c
);

1145 
	`td_vîr‹
(
td
, 
ETIMEDOUT
, "maxÜatencyÉxceeded");

1146 
icd
->
îr‹
 = 
ETIMEDOUT
;

1147 
	}
}

1149 
	$œt_√w_cy˛e
(
thªad_d©a
 *
td
)

1151 
	`fio_gëtime
(&
td
->
œãncy_ts
, 
NULL
);

1152 
td
->
œãncy_ios
 = 
	`ddú_rw_sum
—d->
io_blocks
);

1153 
td
->
œãncy_Áûed
 = 0;

1154 
	}
}

1160 
	$__œt_èrgë_Áûed
(
thªad_d©a
 *
td
)

1162 i‡(
td
->
œãncy_qd
 == 1)

1165 
td
->
œãncy_qd_high
 =Åd->
œãncy_qd
;

1167 i‡(
td
->
œãncy_qd
 =td->
œãncy_qd_low
)

1168 
td
->
œãncy_qd_low
--;

1170 
td
->
œãncy_qd
 = (td->œãncy_qd +Åd->
œãncy_qd_low
) / 2;

1172 
	`d¥öt
(
FD_RATE
, "Ram≥d down: %d %d %d\n", 
td
->
œãncy_qd_low
,Åd->
œãncy_qd
,Åd->
œãncy_qd_high
);

1178 
	`io_u_quõs˚
(
td
);

1179 
	`œt_√w_cy˛e
(
td
);

1181 
	}
}

1183 
	$œt_èrgë_Áûed
(
thªad_d©a
 *
td
)

1185 i‡(
td
->
o
.
œãncy_≥r˚¡ûe
.
u
.
f
 == 100.0)

1186  
	`__œt_èrgë_Áûed
(
td
);

1188 
td
->
œãncy_Áûed
++;

1190 
	}
}

1192 
	$œt_èrgë_öô
(
thªad_d©a
 *
td
)

1194 
td
->
œãncy_íd_run
 = 0;

1196 i‡(
td
->
o
.
œãncy_èrgë
) {

1197 
	`d¥öt
(
FD_RATE
, "L©ícyÅ¨gë=%Œu\n", 
td
->
o
.
œãncy_èrgë
);

1198 
	`fio_gëtime
(&
td
->
œãncy_ts
, 
NULL
);

1199 
td
->
œãncy_qd
 = 1;

1200 
td
->
œãncy_qd_high
 =Åd->
o
.
iodïth
;

1201 
td
->
œãncy_qd_low
 = 1;

1202 
td
->
œãncy_ios
 = 
	`ddú_rw_sum
—d->
io_blocks
);

1204 
td
->
œãncy_qd
 =Åd->
o
.
iodïth
;

1205 
	}
}

1207 
	$œt_èrgë_ª£t
(
thªad_d©a
 *
td
)

1209 i‡(!
td
->
œãncy_íd_run
)

1210 
	`œt_èrgë_öô
(
td
);

1211 
	}
}

1213 
	$œt_èrgë_suc˚ss
(
thªad_d©a
 *
td
)

1215 c⁄° 
qd
 = 
td
->
œãncy_qd
;

1216 
thªad_›ti⁄s
 *
o
 = &
td
->o;

1218 
td
->
œãncy_qd_low
 =Åd->
œãncy_qd
;

1225 i‡(
td
->
œãncy_qd_high
 !
o
->
iodïth
)

1226 
td
->
œãncy_qd
 = (td->œãncy_qd +Åd->
œãncy_qd_high
) / 2;

1228 
td
->
œãncy_qd
 *= 2;

1230 i‡(
td
->
œãncy_qd
 > 
o
->
iodïth
)

1231 
td
->
œãncy_qd
 = 
o
->
iodïth
;

1233 
	`d¥öt
(
FD_RATE
, "Ram≥d up: %d %d %d\n", 
td
->
œãncy_qd_low
,Åd->
œãncy_qd
,Åd->
œãncy_qd_high
);

1239 i‡(
td
->
œãncy_qd
 =
qd
) {

1240 i‡(
td
->
œãncy_íd_run
) {

1241 
	`d¥öt
(
FD_RATE
, "Weáre done\n");

1242 
td
->
d⁄e
 = 1;

1244 
	`d¥öt
(
FD_RATE
, "Quiesceánd finalÑun\n");

1245 
	`io_u_quõs˚
(
td
);

1246 
td
->
œãncy_íd_run
 = 1;

1247 
	`ª£t_Æl_°©s
(
td
);

1248 
	`ª£t_io_°©s
(
td
);

1252 
	`œt_√w_cy˛e
(
td
);

1253 
	}
}

1258 
	$œt_èrgë_check
(
thªad_d©a
 *
td
)

1260 
uöt64_t
 
u£c_wödow
;

1261 
uöt64_t
 
ios
;

1262 
suc˚ss_ios
;

1264 
u£c_wödow
 = 
	`utime_sö˚_now
(&
td
->
œãncy_ts
);

1265 i‡(
u£c_wödow
 < 
td
->
o
.
œãncy_wödow
)

1268 
ios
 = 
	`ddú_rw_sum
(
td
->
io_blocks
Ë-Åd->
œãncy_ios
;

1269 
suc˚ss_ios
 = (Ë(
ios
 - 
td
->
œãncy_Áûed
) / () ios;

1270 
suc˚ss_ios
 *= 100.0;

1272 
	`d¥öt
(
FD_RATE
, "Suc˚s†øã: %.2f%% (èrgë %.2f%%)\n", 
suc˚ss_ios
, 
td
->
o
.
œãncy_≥r˚¡ûe
.
u
.
f
);

1274 i‡(
suc˚ss_ios
 >
td
->
o
.
œãncy_≥r˚¡ûe
.
u
.
f
)

1275 
	`œt_èrgë_suc˚ss
(
td
);

1277 
	`__œt_èrgë_Áûed
(
td
);

1278 
	}
}

1284 
	$queue_fuŒ
(
thªad_d©a
 *
td
)

1286 c⁄° 
qem±y
 = 
	`io_u_qem±y
(&
td
->
io_u_‰ìli°
);

1288 i‡(
qem±y
)

1290 i‡(!
td
->
o
.
œãncy_èrgë
)

1293  
td
->
cur_dïth
 >td->
œãncy_qd
;

1294 
	}
}

1296 
io_u
 *
	$__gë_io_u
(
thªad_d©a
 *
td
)

1298 
io_u
 *io_u = 
NULL
;

1300 
	`td_io_u_lock
(
td
);

1302 
agaö
:

1303 i‡(!
	`io_u_ªm±y
(&
td
->
io_u_ªqueues
))

1304 
io_u
 = 
	`io_u_Ω›
(&
td
->
io_u_ªqueues
);

1305 i‡(!
	`queue_fuŒ
(
td
)) {

1306 
io_u
 = 
	`io_u_qp›
(&
td
->
io_u_‰ìli°
);

1308 
io_u
->
fûe
 = 
NULL
;

1309 
io_u
->
buÊí
 = 0;

1310 
io_u
->
ªsid
 = 0;

1311 
io_u
->
íd_io
 = 
NULL
;

1314 i‡(
io_u
) {

1315 
	`as£π
(
io_u
->
Êags
 & 
IO_U_F_FREE
);

1316 
io_u
->
Êags
 &~(
IO_U_F_FREE
 | 
IO_U_F_FREE_DEF
);

1317 
io_u
->
Êags
 &~(
IO_U_F_TRIMMED
 | 
IO_U_F_BARRIER
);

1318 
io_u
->
Êags
 &~
IO_U_F_VER_LIST
;

1320 
io_u
->
îr‹
 = 0;

1321 
io_u
->
ac˘_ddú
 = -1;

1322 
td
->
cur_dïth
++;

1323 
io_u
->
Êags
 |
IO_U_F_IN_CUR_DEPTH
;

1324 
io_u
->
ùo
 = 
NULL
;

1325 } i‡(
td
->
o
.
vîify_async
) {

1330 
	`±hªad_c⁄d_waô
(&
td
->
‰ì_c⁄d
, &td->
io_u_lock
);

1331 
agaö
;

1334 
	`td_io_u_u∆ock
(
td
);

1335  
io_u
;

1336 
	}
}

1338 
	$check_gë_åim
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

1340 i‡(!(
td
->
Êags
 & 
TD_F_TRIM_BACKLOG
))

1343 i‡(
td
->
åim_íåõs
) {

1344 
gë_åim
 = 0;

1346 i‡(
td
->
åim_b©ch
) {

1347 
td
->
åim_b©ch
--;

1348 
gë_åim
 = 1;

1349 } i‡(!(
td
->
io_hi°_Àn
 %Åd->
o
.
åim_backlog
) &&

1350 
td
->
œ°_ddú
 !
DDIR_READ
) {

1351 
td
->
åim_b©ch
 =Åd->
o
.trim_batch;

1352 i‡(!
td
->
åim_b©ch
)

1353 
td
->
åim_b©ch
 =Åd->
o
.
åim_backlog
;

1354 
gë_åim
 = 1;

1357 i‡(
gë_åim
 && !
	`gë_√xt_åim
(
td
, 
io_u
))

1362 
	}
}

1364 
	$check_gë_vîify
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

1366 i‡(!(
td
->
Êags
 & 
TD_F_VER_BACKLOG
))

1369 i‡(
td
->
io_hi°_Àn
) {

1370 
gë_vîify
 = 0;

1372 i‡(
td
->
vîify_b©ch
)

1373 
gë_vîify
 = 1;

1374 i‡(!(
td
->
io_hi°_Àn
 %Åd->
o
.
vîify_backlog
) &&

1375 
td
->
œ°_ddú
 !
DDIR_READ
) {

1376 
td
->
vîify_b©ch
 =Åd->
o
.verify_batch;

1377 i‡(!
td
->
vîify_b©ch
)

1378 
td
->
vîify_b©ch
 =Åd->
o
.
vîify_backlog
;

1379 
gë_vîify
 = 1;

1382 i‡(
gë_vîify
 && !
	`gë_√xt_vîify
(
td
, 
io_u
)) {

1383 
td
->
vîify_b©ch
--;

1389 
	}
}

1397 
	$smÆl_c⁄ã¡_s¸ambÀ
(
io_u
 *io_u)

1399 
i
, 
ƒ_blocks
 = 
io_u
->
buÊí
 / 512;

1400 
uöt64_t
 
boff£t
;

1401 
off£t
;

1402 *
p
, *
íd
;

1404 i‡(!
ƒ_blocks
)

1407 
p
 = 
io_u
->
x„r_buf
;

1408 
boff£t
 = 
io_u
->
off£t
;

1409 
io_u
->
buf_fûÀd_Àn
 = 0;

1411 
i
 = 0; i < 
ƒ_blocks
; i++) {

1417 
off£t
 = (
io_u
->
°¨t_time
.
tv_u£c
 ^ 
boff£t
) & 511;

1418 
off£t
 &~((
uöt64_t
) - 1);

1419 i‡(
off£t
 >512 - (
uöt64_t
))

1420 
off£t
 -(
uöt64_t
);

1421 
	`mem˝y
(
p
 + 
off£t
, &
boff£t
, (boffset));

1423 
íd
 = 
p
 + 512 - (
io_u
->
°¨t_time
);

1424 
	`mem˝y
(
íd
, &
io_u
->
°¨t_time
, (io_u->start_time));

1425 
p
 += 512;

1426 
boff£t
 += 512;

1428 
	}
}

1434 
io_u
 *
	$gë_io_u
(
thªad_d©a
 *
td
)

1436 
fio_fûe
 *
f
;

1437 
io_u
 *io_u;

1438 
do_s¸ambÀ
 = 0;

1439 
ªt
 = 0;

1441 
io_u
 = 
	`__gë_io_u
(
td
);

1442 i‡(!
io_u
) {

1443 
	`d¥öt
(
FD_IO
, "__get_io_u failed\n");

1444  
NULL
;

1447 i‡(
	`check_gë_vîify
(
td
, 
io_u
))

1448 
out
;

1449 i‡(
	`check_gë_åim
(
td
, 
io_u
))

1450 
out
;

1455 i‡(
io_u
->
fûe
)

1456 
out
;

1461 i‡(
td
->
Êags
 & 
TD_F_READ_IOLOG
) {

1462 i‡(
	`ªad_iﬁog_gë
(
td
, 
io_u
))

1463 
îr_put
;

1464 } i‡(
	`£t_io_u_fûe
(
td
, 
io_u
)) {

1465 
ªt
 = -
EBUSY
;

1466 
	`d¥öt
(
FD_IO
, "io_u %p, sëtög fûêÁûed\n", 
io_u
);

1467 
îr_put
;

1470 
f
 = 
io_u
->
fûe
;

1471 i‡(!
f
) {

1472 
	`d¥öt
(
FD_IO
, "io_u %p, sëtög fûêÁûed\n", 
io_u
);

1473 
îr_put
;

1476 
	`as£π
(
	`fio_fûe_›í
(
f
));

1478 i‡(
	`ddú_rw
(
io_u
->
ddú
)) {

1479 i‡(!
io_u
->
buÊí
 && !(
td
->
io_›s
->
Êags
 & 
FIO_NOIO
)) {

1480 
	`d¥öt
(
FD_IO
, "gë_io_u: zîÿbuÊí o¿%p\n", 
io_u
);

1481 
îr_put
;

1484 
f
->
œ°_°¨t
 = 
io_u
->
off£t
;

1485 
f
->
œ°_pos
 = 
io_u
->
off£t
 + io_u->
buÊí
;

1487 i‡(
io_u
->
ddú
 =
DDIR_WRITE
) {

1488 i‡(
td
->
Êags
 & 
TD_F_REFILL_BUFFERS
) {

1489 
	`io_u_fûl_buf„r
(
td
, 
io_u
,

1490 
io_u
->
x„r_buÊí
, io_u->xfer_buflen);

1491 } i‡((
td
->
Êags
 & 
TD_F_SCRAMBLE_BUFFERS
) &&

1492 !(
td
->
Êags
 & 
TD_F_COMPRESS
))

1493 
do_s¸ambÀ
 = 1;

1494 i‡(
td
->
Êags
 & 
TD_F_VER_NONE
) {

1495 
	`p›uœã_vîify_io_u
(
td
, 
io_u
);

1496 
do_s¸ambÀ
 = 0;

1498 } i‡(
io_u
->
ddú
 =
DDIR_READ
) {

1503 
io_u
->
buf_fûÀd_Àn
 = 0;

1510 
io_u
->
x„r_buf
 = io_u->
buf
;

1511 
io_u
->
x„r_buÊí
 = io_u->
buÊí
;

1513 
out
:

1514 
	`as£π
(
io_u
->
fûe
);

1515 i‡(!
	`td_io_¥ï
(
td
, 
io_u
)) {

1516 i‡(!
td
->
o
.
dißbÀ_¶©
)

1517 
	`fio_gëtime
(&
io_u
->
°¨t_time
, 
NULL
);

1518 i‡(
do_s¸ambÀ
)

1519 
	`smÆl_c⁄ã¡_s¸ambÀ
(
io_u
);

1520  
io_u
;

1522 
îr_put
:

1523 
	`d¥öt
(
FD_IO
, "get_io_u failed\n");

1524 
	`put_io_u
(
td
, 
io_u
);

1525  
	`ERR_PTR
(
ªt
);

1526 
	}
}

1528 
	$io_u_log_îr‹
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

1530 
îr‹_ty≥_bô
 
eb
 = 
	`td_îr‹_ty≥
(
io_u
->
ddú
, io_u->
îr‹
);

1531 c⁄° *
msg
[] = { "read", "write", "sync", "datasync",

1534 i‡(
	`td_n⁄_Áèl_îr‹
(
td
, 
eb
, 
io_u
->
îr‹
Ë&& !td->
o
.
îr‹_dump
)

1537 
	`log_îr
("fio: io_uÉrror");

1539 i‡(
io_u
->
fûe
)

1540 
	`log_îr
(" o¿fûê%s", 
io_u
->
fûe
->
fûe_«me
);

1542 
	`log_îr
(": %s\n", 
	`°ªº‹
(
io_u
->
îr‹
));

1544 
	`log_îr
(" %†off£t=%Œu, buÊí=%lu\n", 
msg
[
io_u
->
ddú
],

1545 
io_u
->
off£t
, io_u->
x„r_buÊí
);

1547 i‡(!
td
->
îr‹
)

1548 
	`td_vîr‹
(
td
, 
io_u
->
îr‹
, "io_uÉrror");

1549 
	}
}

1551 
ölöe
 
	$gtod_ªdu˚
(
thªad_d©a
 *
td
)

1553  
td
->
o
.
dißbÀ_˛©
 &&Åd->o.
dißbÀ_œt
 &&Åd->o.
dißbÀ_¶©


1554 && 
td
->
o
.
dißbÀ_bw
;

1555 
	}
}

1557 
	$accou¡_io_com∂ëi⁄
(
thªad_d©a
 *
td
, 
io_u
 *io_u,

1558 
io_com∂ëi⁄_d©a
 *
icd
,

1559 c⁄° 
fio_ddú
 
idx
, 
byãs
)

1561 
lu£c
 = 0;

1563 i‡(!
	`gtod_ªdu˚
(
td
))

1564 
lu£c
 = 
	`utime_sö˚
(&
io_u
->
issue_time
, &
icd
->
time
);

1566 i‡(!
td
->
o
.
dißbÀ_œt
) {

1567 
tu£c
;

1569 
tu£c
 = 
	`utime_sö˚
(&
io_u
->
°¨t_time
, &
icd
->
time
);

1570 
	`add_œt_ßm∂e
(
td
, 
idx
, 
tu£c
, 
byãs
);

1572 i‡(
td
->
Êags
 & 
TD_F_PROFILE_OPS
) {

1573 
¥of_io_›s
 *
›s
 = &
td
->prof_io_ops;

1575 i‡(
›s
->
io_u_œt
)

1576 
icd
->
îr‹
 = 
›s
->
	`io_u_œt
(
td
, 
tu£c
);

1579 i‡(
td
->
o
.
max_œãncy
 && 
tu£c
 >Åd->o.max_latency)

1580 
	`œt_Áèl
(
td
, 
icd
, 
tu£c
,Åd->
o
.
max_œãncy
);

1581 i‡(
td
->
o
.
œãncy_èrgë
 && 
tu£c
 >Åd->o.latency_target) {

1582 i‡(
	`œt_èrgë_Áûed
(
td
))

1583 
	`œt_Áèl
(
td
, 
icd
, 
tu£c
,Åd->
o
.
œãncy_èrgë
);

1587 i‡(!
td
->
o
.
dißbÀ_˛©
) {

1588 
	`add_˛©_ßm∂e
(
td
, 
idx
, 
lu£c
, 
byãs
);

1589 
	`io_u_m¨k_œãncy
(
td
, 
lu£c
);

1592 i‡(!
td
->
o
.
dißbÀ_bw
)

1593 
	`add_bw_ßm∂e
(
td
, 
idx
, 
byãs
, &
icd
->
time
);

1595 i‡(!
	`gtod_ªdu˚
(
td
))

1596 
	`add_i›s_ßm∂e
(
td
, 
idx
, 
byãs
, &
icd
->
time
);

1597 
	}
}

1599 
	$u£c_f‹_io
(
thªad_d©a
 *
td
, 
fio_ddú
 
ddú
)

1601 
uöt64_t
 
£cs
, 
ªmaödî
, 
bps
, 
byãs
;

1603 
byãs
 = 
td
->
this_io_byãs
[
ddú
];

1604 
bps
 = 
td
->
øã_bps
[
ddú
];

1605 
£cs
 = 
byãs
 / 
bps
;

1606 
ªmaödî
 = 
byãs
 % 
bps
;

1607  
ªmaödî
 * 1000000 / 
bps
 + 
£cs
 * 1000000;

1608 
	}
}

1610 
	$io_com∂ëed
(
thªad_d©a
 *
td
, 
io_u
 *io_u,

1611 
io_com∂ëi⁄_d©a
 *
icd
)

1613 
fio_fûe
 *
f
;

1615 
	`d¥öt_io_u
(
io_u
, "io complete");

1617 
	`td_io_u_lock
(
td
);

1618 
	`as£π
(
io_u
->
Êags
 & 
IO_U_F_FLIGHT
);

1619 
io_u
->
Êags
 &~(
IO_U_F_FLIGHT
 | 
IO_U_F_BUSY_OK
);

1624 i‡(
io_u
->
ùo
) {

1628 i‡(
io_u
->
îr‹
)

1629 
	`u∆og_io_põ˚
(
td
, 
io_u
);

1631 
io_u
->
ùo
->
Êags
 &~
IP_F_IN_FLIGHT
;

1632 
	`wrôe_b¨rõr
();

1636 
	`td_io_u_u∆ock
(
td
);

1638 i‡(
	`ddú_sync
(
io_u
->
ddú
)) {

1639 
td
->
œ°_was_sync
 = 1;

1640 
f
 = 
io_u
->
fûe
;

1641 i‡(
f
) {

1642 
f
->
fú°_wrôe
 = -1ULL;

1643 
f
->
œ°_wrôe
 = -1ULL;

1648 
td
->
œ°_was_sync
 = 0;

1649 
td
->
œ°_ddú
 = 
io_u
->
ddú
;

1651 i‡(!
io_u
->
îr‹
 && 
	`ddú_rw
(io_u->
ddú
)) {

1652 
byãs
 = 
io_u
->
buÊí
 - io_u->
ªsid
;

1653 c⁄° 
fio_ddú
 
idx
 = 
io_u
->
ddú
;

1654 c⁄° 
fio_ddú
 
odx
 = 
io_u
->
ddú
 ^ 1;

1655 
ªt
;

1657 
td
->
io_blocks
[
idx
]++;

1658 
td
->
this_io_blocks
[
idx
]++;

1659 
td
->
io_byãs
[
idx
] +
byãs
;

1661 i‡(!(
io_u
->
Êags
 & 
IO_U_F_VER_LIST
))

1662 
td
->
this_io_byãs
[
idx
] +
byãs
;

1664 i‡(
idx
 =
DDIR_WRITE
) {

1665 
f
 = 
io_u
->
fûe
;

1666 i‡(
f
) {

1667 i‡(
f
->
fú°_wrôe
 == -1ULL ||

1668 
io_u
->
off£t
 < 
f
->
fú°_wrôe
)

1669 
f
->
fú°_wrôe
 = 
io_u
->
off£t
;

1670 i‡(
f
->
œ°_wrôe
 == -1ULL ||

1671 ((
io_u
->
off£t
 + 
byãs
Ë> 
f
->
œ°_wrôe
))

1672 
f
->
œ°_wrôe
 = 
io_u
->
off£t
 + 
byãs
;

1676 i‡(
	`ømp_time_ovî
(
td
Ë&& (td->
run°©e
 =
TD_RUNNING
 ||

1677 
td
->
run°©e
 =
TD_VERIFYING
)) {

1678 
	`accou¡_io_com∂ëi⁄
(
td
, 
io_u
, 
icd
, 
idx
, 
byãs
);

1680 i‡(
	`__should_check_øã
(
td
, 
idx
)) {

1681 
td
->
øã_≥ndög_u¶ìp
[
idx
] =

1682 (
	`u£c_f‹_io
(
td
, 
idx
) -

1683 
	`utime_sö˚_now
(&
td
->
°¨t
));

1685 i‡(
idx
 !
DDIR_TRIM
 && 
	`__should_check_øã
(
td
, 
odx
))

1686 
td
->
øã_≥ndög_u¶ìp
[
odx
] =

1687 (
	`u£c_f‹_io
(
td
, 
odx
) -

1688 
	`utime_sö˚_now
(&
td
->
°¨t
));

1691 
icd
->
byãs_d⁄e
[
idx
] +
byãs
;

1693 i‡(
io_u
->
íd_io
) {

1694 
ªt
 = 
io_u
->
	`íd_io
(
td
, io_u);

1695 i‡(
ªt
 && !
icd
->
îr‹
)

1696 
icd
->
îr‹
 = 
ªt
;

1698 } i‡(
io_u
->
îr‹
) {

1699 
icd
->
îr‹
 = 
io_u
->error;

1700 
	`io_u_log_îr‹
(
td
, 
io_u
);

1702 i‡(
icd
->
îr‹
) {

1703 
îr‹_ty≥_bô
 
eb
 = 
	`td_îr‹_ty≥
(
io_u
->
ddú
, 
icd
->
îr‹
);

1704 i‡(!
	`td_n⁄_Áèl_îr‹
(
td
, 
eb
, 
icd
->
îr‹
))

1710 
	`upd©e_îr‹_cou¡
(
td
, 
icd
->
îr‹
);

1711 
	`td_˛ór_îr‹
(
td
);

1712 
icd
->
îr‹
 = 0;

1713 
io_u
->
îr‹
 = 0;

1715 
	}
}

1717 
	$öô_icd
(
thªad_d©a
 *
td
, 
io_com∂ëi⁄_d©a
 *
icd
,

1718 
ƒ
)

1720 
ddú
;

1722 i‡(!
	`gtod_ªdu˚
(
td
))

1723 
	`fio_gëtime
(&
icd
->
time
, 
NULL
);

1725 
icd
->
ƒ
 =Çr;

1727 
icd
->
îr‹
 = 0;

1728 
ddú
 = 
DDIR_READ
; ddú < 
DDIR_RWDIR_CNT
; ddir++)

1729 
icd
->
byãs_d⁄e
[
ddú
] = 0;

1730 
	}
}

1732 
	$ios_com∂ëed
(
thªad_d©a
 *
td
,

1733 
io_com∂ëi⁄_d©a
 *
icd
)

1735 
io_u
 *io_u;

1736 
i
;

1738 
i
 = 0; i < 
icd
->
ƒ
; i++) {

1739 
io_u
 = 
td
->
io_›s
->
	`evít
—d, 
i
);

1741 
	`io_com∂ëed
(
td
, 
io_u
, 
icd
);

1743 i‡(!(
io_u
->
Êags
 & 
IO_U_F_FREE_DEF
))

1744 
	`put_io_u
(
td
, 
io_u
);

1746 
	}
}

1751 
	$io_u_sync_com∂ëe
(
thªad_d©a
 *
td
, 
io_u
 *io_u,

1752 
uöt64_t
 *
byãs
)

1754 
io_com∂ëi⁄_d©a
 
icd
;

1756 
	`öô_icd
(
td
, &
icd
, 1);

1757 
	`io_com∂ëed
(
td
, 
io_u
, &
icd
);

1759 i‡(!(
io_u
->
Êags
 & 
IO_U_F_FREE_DEF
))

1760 
	`put_io_u
(
td
, 
io_u
);

1762 i‡(
icd
.
îr‹
) {

1763 
	`td_vîr‹
(
td
, 
icd
.
îr‹
, "io_u_sync_complete");

1767 i‡(
byãs
) {

1768 
ddú
;

1770 
ddú
 = 
DDIR_READ
; ddú < 
DDIR_RWDIR_CNT
; ddir++)

1771 
byãs
[
ddú
] +
icd
.
byãs_d⁄e
[ddir];

1775 
	}
}

1780 
	$io_u_queued_com∂ëe
(
thªad_d©a
 *
td
, 
mö_evts
,

1781 
uöt64_t
 *
byãs
)

1783 
io_com∂ëi⁄_d©a
 
icd
;

1784 
time•ec
 *
tvp
 = 
NULL
;

1785 
ªt
;

1786 
time•ec
 
ts
 = { .
tv_£c
 = 0, .
tv_n£c
 = 0, };

1788 
	`d¥öt
(
FD_IO
, "io_u_queued_com∂ëed: mö=%d\n", 
mö_evts
);

1790 i‡(!
mö_evts
)

1791 
tvp
 = &
ts
;

1793 
ªt
 = 
	`td_io_gëevíts
(
td
, 
mö_evts
,Åd->
o
.
iodïth_b©ch_com∂ëe
, 
tvp
);

1794 i‡(
ªt
 < 0) {

1795 
	`td_vîr‹
(
td
, -
ªt
, "td_io_getevents");

1796  
ªt
;

1797 } i‡(!
ªt
)

1798  
ªt
;

1800 
	`öô_icd
(
td
, &
icd
, 
ªt
);

1801 
	`ios_com∂ëed
(
td
, &
icd
);

1802 i‡(
icd
.
îr‹
) {

1803 
	`td_vîr‹
(
td
, 
icd
.
îr‹
, "io_u_queued_complete");

1807 i‡(
byãs
) {

1808 
ddú
;

1810 
ddú
 = 
DDIR_READ
; ddú < 
DDIR_RWDIR_CNT
; ddir++)

1811 
byãs
[
ddú
] +
icd
.
byãs_d⁄e
[ddir];

1815 
	}
}

1820 
	$io_u_queued
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

1822 i‡(!
td
->
o
.
dißbÀ_¶©
) {

1823 
¶©_time
;

1825 
¶©_time
 = 
	`utime_sö˚
(&
io_u
->
°¨t_time
, &io_u->
issue_time
);

1826 
	`add_¶©_ßm∂e
(
td
, 
io_u
->
ddú
, 
¶©_time
, io_u->
x„r_buÊí
);

1828 
	}
}

1830 
	$fûl_io_buf„r
(
thªad_d©a
 *
td
, *
buf
, 
mö_wrôe
,

1831 
max_bs
)

1833 i‡(
td
->
o
.
buf„r_∑âîn_byãs
)

1834 
	`fûl_buf„r_∑âîn
(
td
, 
buf
, 
max_bs
);

1835 i‡(!
td
->
o
.
zîo_buf„rs
) {

1836 
≥rc
 = 
td
->
o
.
com¥ess_≥r˚¡age
;

1838 i‡(
≥rc
) {

1839 
£g
 = 
mö_wrôe
;

1841 
£g
 = 
	`mö
(
mö_wrôe
, 
td
->
o
.
com¥ess_chunk
);

1842 i‡(!
£g
)

1843 
£g
 = 
mö_wrôe
;

1845 
	`fûl_øndom_buf_≥r˚¡age
(&
td
->
buf_°©e
, 
buf
,

1846 
≥rc
, 
£g
, 
max_bs
);

1848 
	`fûl_øndom_buf
(&
td
->
buf_°©e
, 
buf
, 
max_bs
);

1850 
	`mem£t
(
buf
, 0, 
max_bs
);

1851 
	}
}

1856 
	$io_u_fûl_buf„r
(
thªad_d©a
 *
td
, 
io_u
 *io_u,

1857 
mö_wrôe
, 
max_bs
)

1859 
io_u
->
buf_fûÀd_Àn
 = 0;

1860 
	`fûl_io_buf„r
(
td
, 
io_u
->
buf
, 
mö_wrôe
, 
max_bs
);

1861 
	}
}

	@/home/terekhov/tmp/fio/fio/io_u_queue.c

1 
	~<°dlib.h
>

2 
	~"io_u_queue.h
"

4 
	$io_u_qöô
(
io_u_queue
 *
q
, 
ƒ
)

6 
q
->
io_us
 = 
	`ˇŒoc
(
ƒ
, (
io_u
 *));

7 i‡(!
q
->
io_us
)

10 
q
->
ƒ
 = 0;

12 
	}
}

14 
	$io_u_qexô
(
io_u_queue
 *
q
)

16 
	`‰ì
(
q
->
io_us
);

17 
	}
}

19 
	$io_u_röô
(
io_u_rög
 *
rög
, 
ƒ
)

21 
rög
->
max
 = 
ƒ
 + 1;

22 i‡(
rög
->
max
 & (ring->max - 1)) {

23 
rög
->
max
--;

24 
rög
->
max
 |=Ñing->max >> 1;

25 
rög
->
max
 |=Ñing->max >> 2;

26 
rög
->
max
 |=Ñing->max >> 4;

27 
rög
->
max
 |=Ñing->max >> 8;

28 
rög
->
max
 |=Ñing->max >> 16;

29 
rög
->
max
++;

32 
rög
->rög = 
	`ˇŒoc
‘ög->
max
, (
io_u
 *));

33 i‡(!
rög
->ring)

36 
rög
->
hód
 =Ñög->
èû
 = 0;

38 
	}
}

40 
	$io_u_ªxô
(
io_u_rög
 *
rög
)

42 
	`‰ì
(
rög
->ring);

43 
	}
}

	@/home/terekhov/tmp/fio/fio/io_u_queue.h

1 #i‚de‡
FIO_IO_U_QUEUE


2 
	#FIO_IO_U_QUEUE


	)

4 
	~<as£π.h
>

6 
	gio_u
;

8 
	sio_u_queue
 {

9 
io_u
 **
	mio_us
;

10 
	mƒ
;

13 
ölöe
 
io_u
 *
	$io_u_qp›
(
io_u_queue
 *
q
)

15 i‡(
q
->
ƒ
)

16  
q
->
io_us
[--q->
ƒ
];

18  
NULL
;

19 
	}
}

21 
ölöe
 
	$io_u_qpush
(
io_u_queue
 *
q
, 
io_u
 *io_u)

23 
q
->
io_us
[q->
ƒ
++] = 
io_u
;

24 
	}
}

26 
ölöe
 
	$io_u_qem±y
(
io_u_queue
 *
q
)

28  !
q
->
ƒ
;

29 
	}
}

31 
	#io_u_qôî
(
q
, 
io_u
, 
i
) \

32 
i
 = 0; i < (
q
)->
ƒ
 && (
io_u
 = (q)->
io_us
[i]); i++)

	)

34 
io_u_qöô
(
io_u_queue
 *
q
, 
ƒ
);

35 
io_u_qexô
(
io_u_queue
 *
q
);

37 
	sio_u_rög
 {

38 
	mhód
;

39 
	mèû
;

40 
	mmax
;

41 
io_u
 **
	mrög
;

44 
io_u_röô
(
io_u_rög
 *
rög
, 
ƒ
);

45 
io_u_ªxô
(
io_u_rög
 *
rög
);

47 
ölöe
 
	$io_u_Ωush
(
io_u_rög
 *
r
, 
io_u
 *io_u)

49 i‡(
r
->
hód
 + 1 !r->
èû
) {

50 
r
->
rög
[r->
hód
] = 
io_u
;

51 
r
->
hód
 = (r->hód + 1Ë& (r->
max
 - 1);

55 
	`as£π
(0);

56 
	}
}

58 
ölöe
 
io_u
 *
	$io_u_Ω›
(
io_u_rög
 *
r
)

60 i‡(
r
->
hód
 !r->
èû
) {

61 
io_u
 *io_u = 
r
->
rög
[r->
èû
];

63 
r
->
èû
 = (r->èû + 1Ë& (r->
max
 - 1);

64  
io_u
;

67  
NULL
;

68 
	}
}

70 
ölöe
 
	$io_u_ªm±y
(
io_u_rög
 *
rög
)

72  
rög
->
hód
 =rög->
èû
;

73 
	}
}

	@/home/terekhov/tmp/fio/fio/ioengine.h

1 #i‚de‡
FIO_IOENGINE_H


2 
	#FIO_IOENGINE_H


	)

4 
	~"compûî/compûî.h
"

5 
	~"os/os.h
"

6 
	~"log.h
"

7 
	~"io_ddú.h
"

8 
	~"debug.h
"

9 
	~"fûe.h
"

11 #ifde‡
CONFIG_LIBAIO


12 
	~<libaio.h
>

14 #ifde‡
CONFIG_GUASI


15 
	~<guasi.h
>

18 
	#FIO_IOOPS_VERSION
 18

	)

21 
	mIO_U_F_FREE
 = 1 << 0,

22 
	mIO_U_F_FLIGHT
 = 1 << 1,

23 
	mIO_U_F_FREE_DEF
 = 1 << 2,

24 
	mIO_U_F_IN_CUR_DEPTH
 = 1 << 3,

25 
	mIO_U_F_BUSY_OK
 = 1 << 4,

26 
	mIO_U_F_TRIMMED
 = 1 << 5,

27 
	mIO_U_F_BARRIER
 = 1 << 6,

28 
	mIO_U_F_VER_LIST
 = 1 << 7,

34 
	sio_u
 {

35 
timevÆ
 
	m°¨t_time
;

36 
timevÆ
 
	missue_time
;

38 
fio_fûe
 *
	mfûe
;

39 
	mÊags
;

40 
fio_ddú
 
	mddú
;

46 
fio_ddú
 
	mac˘_ddú
;

51 
	mbuÊí
;

52 
	moff£t
;

53 
	mnumbîio
;

54 *
	mbuf
;

59 
uöt64_t
 
	mønd_£ed
;

65 *
	mx„r_buf
;

66 
	mx„r_buÊí
;

72 
	mbuf_fûÀd_Àn
;

74 
io_põ˚
 *
	mùo
;

76 
	mªsid
;

77 
	mîr‹
;

83 
	mödex
;

84 
	m£í
;

85 *
	mígöe_d©a
;

88 
Êi°_hód
 
	mvîify_li°
;

93 (*
	míd_io
)(
	mthªad_d©a
 *, 
	mio_u
 *);

96 #ifde‡
CONFIG_LIBAIO


97 
iocb
 
	miocb
;

99 #ifde‡
CONFIG_POSIXAIO


100 
os_aiocb_t
 
	maiocb
;

102 #ifde‡
FIO_HAVE_SGIO


103 
sg_io_hdr
 
	mhdr
;

105 #ifde‡
CONFIG_GUASI


106 
guasi_ªq_t
 
	mgªq
;

108 #ifde‡
CONFIG_SOLARISAIO


109 
aio_ªsu…_t
 
	mªsu…p
;

111 #ifde‡
FIO_HAVE_BINJECT


112 
b_u£r_cmd
 
	mbuc
;

114 #ifde‡
CONFIG_RDMA


115 
ibv_mr
 *
	mmr
;

117 *
	mmm≠_d©a
;

125 
	mFIO_Q_COMPLETED
 = 0,

126 
	mFIO_Q_QUEUED
 = 1,

127 
	mFIO_Q_BUSY
 = 2,

130 
	si€ngöe_›s
 {

131 
Êi°_hód
 
	mli°
;

132 
	m«me
[16];

133 
	mvîsi⁄
;

134 
	mÊags
;

135 (*
	m£tup
)(
	mthªad_d©a
 *);

136 (*
	möô
)(
	mthªad_d©a
 *);

137 (*
	m¥ï
)(
	mthªad_d©a
 *, 
	mio_u
 *);

138 (*
	mqueue
)(
	mthªad_d©a
 *, 
	mio_u
 *);

139 (*
	mcommô
)(
	mthªad_d©a
 *);

140 (*
	mgëevíts
)(
	mthªad_d©a
 *, , , 
	mtime•ec
 *);

141 
	mio_u
 *(*
	mevít
)(
	mthªad_d©a
 *, );

142 (*
	mˇn˚l
)(
	mthªad_d©a
 *, 
	mio_u
 *);

143 (*
	m˛ónup
)(
	mthªad_d©a
 *);

144 (*
	m›í_fûe
)(
	mthªad_d©a
 *, 
	mfio_fûe
 *);

145 (*
	m˛o£_fûe
)(
	mthªad_d©a
 *, 
	mfio_fûe
 *);

146 (*
	mgë_fûe_size
)(
	mthªad_d©a
 *, 
	mfio_fûe
 *);

147 (*
	mãrmö©e
)(
	mthªad_d©a
 *);

148 (*
	mio_u_öô
)(
	mthªad_d©a
 *, 
	mio_u
 *);

149 (*
	mio_u_‰ì
)(
	mthªad_d©a
 *, 
	mio_u
 *);

150 
	m›ti⁄_°ru˘_size
;

151 
fio_›ti⁄
 *
	m›ti⁄s
;

152 *
	md©a
;

153 *
	mdlh™dÀ
;

156 
	efio_i€ngöe_Êags
 {

157 
	mFIO_SYNCIO
 = 1 << 0,

158 
	mFIO_RAWIO
 = 1 << 1,

159 
	mFIO_DISKLESSIO
 = 1 << 2,

160 
	mFIO_NOEXTEND
 = 1 << 3,

161 
	mFIO_NODISKUTIL
 = 1 << 4,

162 
	mFIO_UNIDIR
 = 1 << 5,

163 
	mFIO_NOIO
 = 1 << 6,

164 
	mFIO_PIPEIO
 = 1 << 7,

165 
	mFIO_BARRIER
 = 1 << 8,

166 
	mFIO_MEMALIGN
 = 1 << 9,

167 
	mFIO_BIT_BASED
 = 1 << 10,

173 (*
	tgë_i€ngöe_t
)(
	ti€ngöe_›s
 **);

178 
__mu°_check
 
	`td_io_öô
(
thªad_d©a
 *);

179 
__mu°_check
 
	`td_io_¥ï
(
thªad_d©a
 *, 
io_u
 *);

180 
__mu°_check
 
	`td_io_queue
(
thªad_d©a
 *, 
io_u
 *);

181 
__mu°_check
 
	`td_io_sync
(
thªad_d©a
 *, 
fio_fûe
 *);

182 
__mu°_check
 
	`td_io_gëevíts
(
thªad_d©a
 *, , , 
time•ec
 *);

183 
__mu°_check
 
	`td_io_commô
(
thªad_d©a
 *);

184 
__mu°_check
 
	`td_io_›í_fûe
(
thªad_d©a
 *, 
fio_fûe
 *);

185 
	`td_io_˛o£_fûe
(
thªad_d©a
 *, 
fio_fûe
 *);

186 
__mu°_check
 
	`td_io_gë_fûe_size
(
thªad_d©a
 *, 
fio_fûe
 *);

188 
i€ngöe_›s
 *
	`lﬂd_i€ngöe
(
thªad_d©a
 *, const *);

189 
	`ªgi°î_i€ngöe
(
i€ngöe_›s
 *);

190 
	`uƒegi°î_i€ngöe
(
i€ngöe_›s
 *);

191 
	`‰ì_i€ngöe
(
thªad_d©a
 *);

192 
	`˛o£_i€ngöe
(
thªad_d©a
 *);

194 
	`fio_show_i€ngöe_hñp
(c⁄° *
ígöe
);

199 
io_u
 *
	`__gë_io_u
(
thªad_d©a
 *);

200 
io_u
 *
	`gë_io_u
(
thªad_d©a
 *);

201 
	`put_io_u
(
thªad_d©a
 *, 
io_u
 *);

202 
	`˛ór_io_u
(
thªad_d©a
 *, 
io_u
 *);

203 
	`ªqueue_io_u
(
thªad_d©a
 *, 
io_u
 **);

204 
__mu°_check
 
	`io_u_sync_com∂ëe
(
thªad_d©a
 *, 
io_u
 *, 
uöt64_t
 *);

205 
__mu°_check
 
	`io_u_queued_com∂ëe
(
thªad_d©a
 *, , 
uöt64_t
 *);

206 
	`io_u_queued
(
thªad_d©a
 *, 
io_u
 *);

207 
	`io_u_quõs˚
(
thªad_d©a
 *);

208 
	`io_u_log_îr‹
(
thªad_d©a
 *, 
io_u
 *);

209 
	`io_u_m¨k_dïth
(
thªad_d©a
 *, );

210 
	`fûl_io_buf„r
(
thªad_d©a
 *, *, , );

211 
	`io_u_fûl_buf„r
(
thªad_d©a
 *
td
, 
io_u
 *, , );

212 
	`io_u_m¨k_com∂ëe
(
thªad_d©a
 *, );

213 
	`io_u_m¨k_submô
(
thªad_d©a
 *, );

214 
	`queue_fuŒ
(
thªad_d©a
 *);

216 
	`do_io_u_sync
(
thªad_d©a
 *, 
io_u
 *);

217 
	`do_io_u_åim
(
thªad_d©a
 *, 
io_u
 *);

219 #ifde‡
FIO_INC_DEBUG


220 
ölöe
 
	$d¥öt_io_u
(
io_u
 *io_u, c⁄° *
p
)

222 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

224 
	`d¥öt
(
FD_IO
, "%s: io_u %p: off=%Œu/Àn=%lu/ddú=%d", 
p
, 
io_u
,

225 (Ë
io_u
->
off£t
,

226 
io_u
->
buÊí
, io_u->
ddú
);

227 i‡(
fio_debug
 & (1 << 
FD_IO
)) {

228 i‡(
f
)

229 
	`log_öfo
("/%s", 
f
->
fûe_«me
);

231 
	`log_öfo
("\n");

233 
	}
}

235 
	#d¥öt_io_u
(
io_u
, 
p
)

	)

238 
ölöe
 
fio_ddú
 
	$ac˘_ddú
(
io_u
 *io_u)

240 i‡(
io_u
->
ac˘_ddú
 != -1)

241  
io_u
->
ac˘_ddú
;

243  
io_u
->
ddú
;

244 
	}
}

	@/home/terekhov/tmp/fio/fio/ioengines.c

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<uni°d.h
>

15 
	~<°rög.h
>

16 
	~<dlf˙.h
>

17 
	~<f˙é.h
>

18 
	~<as£π.h
>

20 
	~"fio.h
"

21 
	~"diskutû.h
"

23 
FLIST_HEAD
(
ígöe_li°
);

25 
	$check_ígöe_›s
(
i€ngöe_›s
 *
›s
)

27 i‡(
›s
->
vîsi⁄
 !
FIO_IOOPS_VERSION
) {

28 
	`log_îr
("bad io›†vîsi⁄ %d (w™à%d)\n", 
›s
->
vîsi⁄
,

29 
FIO_IOOPS_VERSION
);

33 i‡(!
›s
->
queue
) {

34 
	`log_îr
("%s:Çÿqueuêh™dÀr\n", 
›s
->
«me
);

41 i‡(
›s
->
Êags
 & 
FIO_SYNCIO
)

44 i‡(!
›s
->
evít
) {

45 
	`log_îr
("%s:Çÿevíàh™dÀr\n", 
›s
->
«me
);

48 i‡(!
›s
->
gëevíts
) {

49 
	`log_îr
("%s:Çÿgëevít†h™dÀr\n", 
›s
->
«me
);

52 i‡(!
›s
->
queue
) {

53 
	`log_îr
("%s:Çÿqueuêh™dÀr\n", 
›s
->
«me
);

58 
	}
}

60 
	$uƒegi°î_i€ngöe
(
i€ngöe_›s
 *
›s
)

62 
	`d¥öt
(
FD_IO
, "i€ngöê%†uƒegi°îed\n", 
›s
->
«me
);

63 
	`Êi°_dñ
(&
›s
->
li°
);

64 
	`INIT_FLIST_HEAD
(&
›s
->
li°
);

65 
	}
}

67 
	$ªgi°î_i€ngöe
(
i€ngöe_›s
 *
›s
)

69 
	`d¥öt
(
FD_IO
, "i€ngöê%†ªgi°îed\n", 
›s
->
«me
);

70 
	`INIT_FLIST_HEAD
(&
›s
->
li°
);

71 
	`Êi°_add_èû
(&
›s
->
li°
, &
ígöe_li°
);

72 
	}
}

74 
i€ngöe_›s
 *
	$föd_i€ngöe
(c⁄° *
«me
)

76 
i€ngöe_›s
 *
›s
;

77 
Êi°_hód
 *
íåy
;

79 
	`Êi°_f‹_óch
(
íåy
, &
ígöe_li°
) {

80 
›s
 = 
	`Êi°_íåy
(
íåy
, 
i€ngöe_›s
, 
li°
);

81 i‡(!
	`°rcmp
(
«me
, 
›s
->name))

82  
›s
;

85  
NULL
;

86 
	}
}

88 
i€ngöe_›s
 *
	$dl›í_i€ngöe
(
thªad_d©a
 *
td
,

89 c⁄° *
ígöe_lib
)

91 
i€ngöe_›s
 *
›s
;

92 *
dlh™dÀ
;

94 
	`d¥öt
(
FD_IO
, "dlﬂdÉngöê%s\n", 
ígöe_lib
);

96 
	`dÀº‹
();

97 
dlh™dÀ
 = 
	`dl›í
(
ígöe_lib
, 
RTLD_LAZY
);

98 i‡(!
dlh™dÀ
) {

99 
	`td_vmsg
(
td
, -1, 
	`dÀº‹
(), "dlopen");

100  
NULL
;

107 
›s
 = 
	`dlsym
(
dlh™dÀ
, 
ígöe_lib
);

108 i‡(!
›s
)

109 
›s
 = 
	`dlsym
(
dlh™dÀ
, "ioengine");

117 i‡(!
›s
) {

118 
gë_i€ngöe_t
 
gë_i€ngöe
 = 
	`dlsym
(
dlh™dÀ
, "get_ioengine");

120 i‡(
gë_i€ngöe
)

121 
	`gë_i€ngöe
(&
›s
);

124 i‡(!
›s
) {

125 
	`td_vmsg
(
td
, -1, 
	`dÀº‹
(), "dlsym");

126 
	`dl˛o£
(
dlh™dÀ
);

127  
NULL
;

130 
›s
->
dlh™dÀ
 = dlhandle;

131  
›s
;

132 
	}
}

134 
i€ngöe_›s
 *
	$lﬂd_i€ngöe
(
thªad_d©a
 *
td
, c⁄° *
«me
)

136 
i€ngöe_›s
 *
›s
, *
ªt
;

137 
ígöe
[16];

139 
	`d¥öt
(
FD_IO
, "lﬂd i€ngöê%s\n", 
«me
);

141 
	`°∫˝y
(
ígöe
, 
«me
, (engine) - 1);

146 i‡(!
	`°∫cmp
(
ígöe
, "linuxaio", 8) || !strncmp(engine, "aio", 3))

147 
	`°r˝y
(
ígöe
, "libaio");

149 
›s
 = 
	`föd_i€ngöe
(
ígöe
);

150 i‡(!
›s
)

151 
›s
 = 
	`dl›í_i€ngöe
(
td
, 
«me
);

153 i‡(!
›s
) {

154 
	`log_îr
("fio:Éngöê%†nŸÜﬂdabÀ\n", 
«me
);

155  
NULL
;

161 i‡(
	`check_ígöe_›s
(
›s
))

162  
NULL
;

164 
ªt
 = 
	`mÆloc
((*ret));

165 
	`mem˝y
(
ªt
, 
›s
, (*ret));

166 
ªt
->
d©a
 = 
NULL
;

168  
ªt
;

169 
	}
}

174 
	$‰ì_i€ngöe
(
thªad_d©a
 *
td
)

176 
	`d¥öt
(
FD_IO
, "‰ì i€ngöê%s\n", 
td
->
io_›s
->
«me
);

178 i‡(
td
->
eo
 &&Åd->
io_›s
->
›ti⁄s
) {

179 
	`›ti⁄s_‰ì
(
td
->
io_›s
->
›ti⁄s
,Åd->
eo
);

180 
	`‰ì
(
td
->
eo
);

181 
td
->
eo
 = 
NULL
;

184 i‡(
td
->
io_›s
->
dlh™dÀ
)

185 
	`dl˛o£
(
td
->
io_›s
->
dlh™dÀ
);

187 
	`‰ì
(
td
->
io_›s
);

188 
td
->
io_›s
 = 
NULL
;

189 
	}
}

191 
	$˛o£_i€ngöe
(
thªad_d©a
 *
td
)

193 
	`d¥öt
(
FD_IO
, "˛o£ i€ngöê%s\n", 
td
->
io_›s
->
«me
);

195 i‡(
td
->
io_›s
->
˛ónup
) {

196 
td
->
io_›s
->
	`˛ónup
(td);

197 
td
->
io_›s
->
d©a
 = 
NULL
;

200 
	`‰ì_i€ngöe
(
td
);

201 
	}
}

203 
	$td_io_¥ï
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

205 
	`d¥öt_io_u
(
io_u
, "prep");

206 
	`fio_ro_check
(
td
, 
io_u
);

208 
	`lock_fûe
(
td
, 
io_u
->
fûe
, io_u->
ddú
);

210 i‡(
td
->
io_›s
->
¥ï
) {

211 
ªt
 = 
td
->
io_›s
->
	`¥ï
—d, 
io_u
);

213 
	`d¥öt
(
FD_IO
, "->¥ï(%p)=%d\n", 
io_u
, 
ªt
);

214 i‡(
ªt
)

215 
	`u∆ock_fûe
(
td
, 
io_u
->
fûe
);

216  
ªt
;

220 
	}
}

222 
	$td_io_gëevíts
(
thªad_d©a
 *
td
, 
mö
, 
max
,

223 
time•ec
 *
t
)

225 
r
 = 0;

234 i‡(
td
->
d⁄e
)

237 i‡(
mö
 > 0 && 
td
->
io_›s
->
commô
) {

238 
r
 = 
td
->
io_›s
->
	`commô
(td);

239 i‡(
r
 < 0)

240 
out
;

242 i‡(
max
 > 
td
->
cur_dïth
)

243 
max
 = 
td
->
cur_dïth
;

244 i‡(
mö
 > 
max
)

245 
max
 = 
mö
;

247 
r
 = 0;

248 i‡(
max
 && 
td
->
io_›s
->
gëevíts
)

249 
r
 = 
td
->
io_›s
->
	`gëevíts
—d, 
mö
, 
max
, 
t
);

250 
out
:

251 i‡(
r
 >= 0) {

256 
td
->
io_u_ö_Êight
 -
r
;

257 
	`io_u_m¨k_com∂ëe
(
td
, 
r
);

259 
	`td_vîr‹
(
td
, 
r
, "get_events");

261 
	`d¥öt
(
FD_IO
, "gëevíts: %d\n", 
r
);

262  
r
;

263 
	}
}

265 
	$td_io_queue
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

267 
ªt
;

269 
	`d¥öt_io_u
(
io_u
, "queue");

270 
	`fio_ro_check
(
td
, 
io_u
);

272 
	`as£π
((
io_u
->
Êags
 & 
IO_U_F_FLIGHT
) == 0);

273 
io_u
->
Êags
 |
IO_U_F_FLIGHT
;

275 
	`as£π
(
	`fio_fûe_›í
(
io_u
->
fûe
));

280 
	`log_io_u
(
td
, 
io_u
);

282 
io_u
->
îr‹
 = 0;

283 
io_u
->
ªsid
 = 0;

285 i‡(
td
->
io_›s
->
Êags
 & 
FIO_SYNCIO
) {

286 i‡(
	`fio_fûl_issue_time
(
td
))

287 
	`fio_gëtime
(&
io_u
->
issue_time
, 
NULL
);

292 i‡(
td
->
o
.
ªad_iﬁog_fûe
)

293 
	`mem˝y
(&
td
->
œ°_issue
, &
io_u
->
issue_time
,

294 (
timevÆ
));

297 i‡(
	`ddú_rw
(
	`ac˘_ddú
(
io_u
)))

298 
td
->
io_issues
[
	`ac˘_ddú
(
io_u
)]++;

300 
ªt
 = 
td
->
io_›s
->
	`queue
—d, 
io_u
);

302 
	`u∆ock_fûe
(
td
, 
io_u
->
fûe
);

308 i‡(
io_u
->
îr‹
 && !
td
->error)

309 
	`td_vîr‹
(
td
, 
io_u
->
îr‹
, "td_io_queue");

317 i‡(
io_u
->
îr‹
 =
EINVAL
 && 
td
->
io_issues
[io_u->
ddú
 & 1] == 1 &&

318 
td
->
o
.
odúe˘
) {

320 
	`log_öfo
("fio: first direct IOÉrrored. File system mayÇot "

324 i‡(!
td
->
io_›s
->
commô
 || 
	`ddú_åim
(
io_u
->
ddú
)) {

325 
	`io_u_m¨k_submô
(
td
, 1);

326 
	`io_u_m¨k_com∂ëe
(
td
, 1);

329 i‡(
ªt
 =
FIO_Q_COMPLETED
) {

330 i‡(
	`ddú_rw
(
io_u
->
ddú
)) {

331 
	`io_u_m¨k_dïth
(
td
, 1);

332 
td
->
ts
.
tŸÆ_io_u
[
io_u
->
ddú
]++;

334 } i‡(
ªt
 =
FIO_Q_QUEUED
) {

335 
r
;

337 i‡(
	`ddú_rw
(
io_u
->
ddú
)) {

338 
td
->
io_u_queued
++;

339 
td
->
ts
.
tŸÆ_io_u
[
io_u
->
ddú
]++;

342 i‡(
td
->
io_u_queued
 >td->
o
.
iodïth_b©ch
) {

343 
r
 = 
	`td_io_commô
(
td
);

344 i‡(
r
 < 0)

345  
r
;

349 i‡((
td
->
io_›s
->
Êags
 & 
FIO_SYNCIO
) == 0) {

350 i‡(
	`fio_fûl_issue_time
(
td
))

351 
	`fio_gëtime
(&
io_u
->
issue_time
, 
NULL
);

356 i‡(
td
->
o
.
ªad_iﬁog_fûe
)

357 
	`mem˝y
(&
td
->
œ°_issue
, &
io_u
->
issue_time
,

358 (
timevÆ
));

361  
ªt
;

362 
	}
}

364 
	$td_io_öô
(
thªad_d©a
 *
td
)

366 
ªt
 = 0;

368 i‡(
td
->
io_›s
->
öô
) {

369 
ªt
 = 
td
->
io_›s
->
	`öô
(td);

370 i‡(
ªt
 && 
td
->
o
.
iodïth
 > 1) {

371 
	`log_îr
("fio: ioÉngine init failed. PerhapsÅry"

374 i‡(!
td
->
îr‹
)

375 
td
->
îr‹
 = 
ªt
;

378 i‡(!
ªt
 && (
td
->
io_›s
->
Êags
 & 
FIO_NOIO
))

379 
td
->
Êags
 |
TD_F_NOIO
;

381  
ªt
;

382 
	}
}

384 
	$td_io_commô
(
thªad_d©a
 *
td
)

386 
ªt
;

388 
	`d¥öt
(
FD_IO
, "ˇŒög ->commô(), dïth %d\n", 
td
->
cur_dïth
);

390 i‡(!
td
->
cur_dïth
 || !td->
io_u_queued
)

393 
	`io_u_m¨k_dïth
(
td
,Åd->
io_u_queued
);

395 i‡(
td
->
io_›s
->
commô
) {

396 
ªt
 = 
td
->
io_›s
->
	`commô
(td);

397 i‡(
ªt
)

398 
	`td_vîr‹
(
td
, -
ªt
, "io commit");

404 
td
->
io_u_ö_Êight
 +td->
io_u_queued
;

405 
td
->
io_u_queued
 = 0;

408 
	}
}

410 
	$td_io_›í_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

412 
	`as£π
(!
	`fio_fûe_›í
(
f
));

413 
	`as£π
(
f
->
fd
 == -1);

415 i‡(
td
->
io_›s
->
	`›í_fûe
—d, 
f
)) {

416 i‡(
td
->
îr‹
 =
EINVAL
 &&Åd->
o
.
odúe˘
)

417 
	`log_îr
("fio: destination doesÇot support O_DIRECT\n");

418 i‡(
td
->
îr‹
 =
EMFILE
) {

419 
	`log_îr
("fio:ÅryÑeducing/setting openfiles (failed"

420 "áà%u o‡%u)\n", 
td
->
ƒ_›í_fûes
,

421 
td
->
o
.
ƒ_fûes
);

424 
	`as£π
(
f
->
fd
 == -1);

425 
	`as£π
(!
	`fio_fûe_›í
(
f
));

429 
	`fio_fûe_ª£t
(
td
, 
f
);

430 
	`fio_fûe_£t_›í
(
f
);

431 
	`fio_fûe_˛ór_˛osög
(
f
);

432 
	`disk_utû_öc
(
f
->
du
);

434 
td
->
ƒ_›í_fûes
++;

435 
	`gë_fûe
(
f
);

437 i‡(
f
->
fûëy≥
 =
FIO_TYPE_PIPE
) {

438 i‡(
	`td_øndom
(
td
)) {

439 
	`log_îr
("fio: can't seek onÖipes (noÑandom io)\n");

440 
îr
;

444 i‡(
td
->
io_›s
->
Êags
 & 
FIO_DISKLESSIO
)

445 
d⁄e
;

447 i‡(
td
->
o
.
övÆid©e_ˇche
 && 
	`fûe_övÆid©e_ˇche
—d, 
f
))

448 
îr
;

450 i‡(
td
->
o
.
Ádvi£_höt
 &&

451 (
f
->
fûëy≥
 =
FIO_TYPE_BD
 || f->fûëy≥ =
FIO_TYPE_FILE
)) {

452 
Êags
;

454 i‡(
	`td_øndom
(
td
))

455 
Êags
 = 
POSIX_FADV_RANDOM
;

457 
Êags
 = 
POSIX_FADV_SEQUENTIAL
;

459 i‡(
	`posix_Ádvi£
(
f
->
fd
, f->
fûe_off£t
, f->
io_size
, 
Êags
) < 0) {

460 
	`td_vîr‹
(
td
, 
î∫o
, "fadvise");

461 
îr
;

465 #ifde‡
FIO_OS_DIRECTIO


470 i‡(
td
->
o
.
odúe˘
) {

471 
ªt
 = 
	`fio_£t_odúe˘
(
f
->
fd
);

473 i‡(
ªt
) {

474 
	`td_vîr‹
(
td
, 
ªt
, "fio_set_odirect");

475 
	`log_îr
("fio:Åhe file system doesÇot seemÅo support direct IO\n");

476 
îr
;

481 
d⁄e
:

482 
	`log_fûe
(
td
, 
f
, 
FIO_LOG_OPEN_FILE
);

484 
îr
:

485 
	`disk_utû_dec
(
f
->
du
);

486 i‡(
td
->
io_›s
->
˛o£_fûe
)

487 
td
->
io_›s
->
	`˛o£_fûe
—d, 
f
);

489 
	}
}

491 
	$td_io_˛o£_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

493 i‡(!
	`fio_fûe_˛osög
(
f
))

494 
	`log_fûe
(
td
, 
f
, 
FIO_LOG_CLOSE_FILE
);

499 
	`fio_fûe_£t_˛osög
(
f
);

501 
	`disk_utû_dec
(
f
->
du
);

503 i‡(
td
->
o
.
fûe_lock_mode
 !
FILE_LOCK_NONE
)

504 
	`u∆ock_fûe_Æl
(
td
, 
f
);

506  
	`put_fûe
(
td
, 
f
);

507 
	}
}

509 
	$td_io_gë_fûe_size
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

511 i‡(!
td
->
io_›s
->
gë_fûe_size
)

514  
td
->
io_›s
->
	`gë_fûe_size
—d, 
f
);

515 
	}
}

517 
	$do_sync_fûe_ønge
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
)

519 
off64_t
 
off£t
, 
nbyãs
;

521 
off£t
 = 
f
->
fú°_wrôe
;

522 
nbyãs
 = 
f
->
œ°_wrôe
 - f->
fú°_wrôe
;

524 i‡(!
nbyãs
)

527  
	`sync_fûe_ønge
(
f
->
fd
, 
off£t
, 
nbyãs
, 
td
->
o
.
sync_fûe_ønge
);

528 
	}
}

530 
	$do_io_u_sync
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

532 
ªt
;

534 i‡(
io_u
->
ddú
 =
DDIR_SYNC
) {

535 
ªt
 = 
	`fsync
(
io_u
->
fûe
->
fd
);

536 } i‡(
io_u
->
ddú
 =
DDIR_DATASYNC
) {

537 #ifde‡
CONFIG_FDATASYNC


538 
ªt
 = 
	`fd©async
(
io_u
->
fûe
->
fd
);

540 
ªt
 = 
io_u
->
x„r_buÊí
;

541 
io_u
->
îr‹
 = 
EINVAL
;

543 } i‡(
io_u
->
ddú
 =
DDIR_SYNC_FILE_RANGE
)

544 
ªt
 = 
	`do_sync_fûe_ønge
(
td
, 
io_u
->
fûe
);

546 
ªt
 = 
io_u
->
x„r_buÊí
;

547 
io_u
->
îr‹
 = 
EINVAL
;

550 i‡(
ªt
 < 0)

551 
io_u
->
îr‹
 = 
î∫o
;

553  
ªt
;

554 
	}
}

556 
	$do_io_u_åim
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

558 #i‚de‡
FIO_HAVE_TRIM


559 
io_u
->
îr‹
 = 
EINVAL
;

562 
fio_fûe
 *
f
 = 
io_u
->
fûe
;

563 
ªt
;

565 
ªt
 = 
	`os_åim
(
f
->
fd
, 
io_u
->
off£t
, io_u->
x„r_buÊí
);

566 i‡(!
ªt
)

567  
io_u
->
x„r_buÊí
;

569 
io_u
->
îr‹
 = 
ªt
;

572 
	}
}

574 
	$fio_show_i€ngöe_hñp
(c⁄° *
ígöe
)

576 
Êi°_hód
 *
íåy
;

577 
thªad_d©a
 
td
;

578 *
£p
;

579 
ªt
 = 1;

581 i‡(!
ígöe
 || !*engine) {

582 
	`log_öfo
("Available IOÉngines:\n");

583 
	`Êi°_f‹_óch
(
íåy
, &
ígöe_li°
) {

584 
td
.
io_›s
 = 
	`Êi°_íåy
(
íåy
, 
i€ngöe_›s
,

585 
li°
);

586 
	`log_öfo
("\t%s\n", 
td
.
io_›s
->
«me
);

590 
£p
 = 
	`°rchr
(
ígöe
, ',');

591 i‡(
£p
) {

592 *
£p
 = 0;

593 
£p
++;

596 
	`mem£t
(&
td
, 0, (td));

598 
td
.
io_›s
 = 
	`lﬂd_i€ngöe
(&td, 
ígöe
);

599 i‡(!
td
.
io_›s
) {

600 
	`log_öfo
("IOÉngöê%†nŸ found\n", 
ígöe
);

604 i‡(
td
.
io_›s
->
›ti⁄s
)

605 
ªt
 = 
	`show_cmd_hñp
(
td
.
io_›s
->
›ti⁄s
, 
£p
);

607 
	`log_öfo
("IOÉngöê%†ha†nÿ›ti⁄s\n", 
td
.
io_›s
->
«me
);

609 
	`‰ì_i€ngöe
(&
td
);

611  
ªt
;

612 
	}
}

	@/home/terekhov/tmp/fio/fio/iolog.c

5 
	~<°dio.h
>

6 
	~<°dlib.h
>

7 
	~<libgí.h
>

8 
	~<as£π.h
>

9 
	~"Êi°.h
"

10 
	~"fio.h
"

11 
	~"vîify.h
"

12 
	~"åim.h
"

13 
	~"fûñock.h
"

15 c⁄° 
	giﬁog_vî2
[] = "fio version 2 iolog";

17 
	$queue_io_põ˚
(
thªad_d©a
 *
td
, 
io_põ˚
 *
ùo
)

19 
	`Êi°_add_èû
(&
ùo
->
li°
, &
td
->
io_log_li°
);

20 
td
->
tŸÆ_io_size
 +
ùo
->
Àn
;

21 
	}
}

23 
	$log_io_u
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

25 c⁄° *
a˘
[] = { "read", "write", "sync", "datasync",

28 
	`as£π
(
io_u
->
ddú
 <= 6);

30 i‡(!
td
->
o
.
wrôe_iﬁog_fûe
)

33 
	`Ârötf
(
td
->
iﬁog_f
, "%†%†%Œu %lu\n", 
io_u
->
fûe
->
fûe_«me
,

34 
a˘
[
io_u
->
ddú
], io_u->
off£t
,

35 
io_u
->
buÊí
);

36 
	}
}

38 
	$log_fûe
(
thªad_d©a
 *
td
, 
fio_fûe
 *
f
,

39 
fûe_log_a˘
 
wh©
)

41 c⁄° *
a˘
[] = { "add", "open", "close" };

43 
	`as£π
(
wh©
 < 3);

45 i‡(!
td
->
o
.
wrôe_iﬁog_fûe
)

52 i‡(!
td
->
iﬁog_f
)

55 
	`Ârötf
(
td
->
iﬁog_f
, "%†%s\n", 
f
->
fûe_«me
, 
a˘
[
wh©
]);

56 
	}
}

58 
	$iﬁog_dñay
(
thªad_d©a
 *
td
, 
dñay
)

60 
u£c
 = 
	`utime_sö˚_now
(&
td
->
œ°_issue
);

61 
this_dñay
;

63 i‡(
dñay
 < 
u£c
)

66 
dñay
 -
u£c
;

71 i‡(
dñay
 < 100)

74 
dñay
 && !
td
->
ãrmö©e
) {

75 
this_dñay
 = 
dñay
;

76 i‡(
this_dñay
 > 500000)

77 
this_dñay
 = 500000;

79 
	`u£c_¶ìp
(
td
, 
this_dñay
);

80 
dñay
 -
this_dñay
;

82 
	}
}

84 
	$ùo_•ecül
(
thªad_d©a
 *
td
, 
io_põ˚
 *
ùo
)

86 
fio_fûe
 *
f
;

87 
ªt
;

92 i‡(
ùo
->
ddú
 !
DDIR_INVAL
)

95 
f
 = 
td
->
fûes
[
ùo
->
fûío
];

97 
ùo
->
fûe_a˘i⁄
) {

98 
FIO_LOG_OPEN_FILE
:

99 
ªt
 = 
	`td_io_›í_fûe
(
td
, 
f
);

100 i‡(!
ªt
)

102 
	`td_vîr‹
(
td
, 
ªt
, "iolog open file");

104 
FIO_LOG_CLOSE_FILE
:

105 
	`td_io_˛o£_fûe
(
td
, 
f
);

107 
FIO_LOG_UNLINK_FILE
:

108 
	`u∆ök
(
f
->
fûe_«me
);

111 
	`log_îr
("fio: bad fûêa˘i⁄ %d\n", 
ùo
->
fûe_a˘i⁄
);

116 
	}
}

118 
	$ªad_iﬁog_gë
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

120 
io_põ˚
 *
ùo
;

121 
ñ≠£d
;

123 !
	`Êi°_em±y
(&
td
->
io_log_li°
)) {

124 
ªt
;

126 
ùo
 = 
	`Êi°_íåy
(
td
->
io_log_li°
.
√xt
, 
io_põ˚
, 
li°
);

127 
	`Êi°_dñ
(&
ùo
->
li°
);

128 
	`ªmove_åim_íåy
(
td
, 
ùo
);

130 
ªt
 = 
	`ùo_•ecül
(
td
, 
ùo
);

131 i‡(
ªt
 < 0) {

132 
	`‰ì
(
ùo
);

134 } i‡(
ªt
 > 0) {

135 
	`‰ì
(
ùo
);

139 
io_u
->
ddú
 = 
ùo
->ddir;

140 i‡(
ùo
->
ddú
 !
DDIR_WAIT
) {

141 
io_u
->
off£t
 = 
ùo
->offset;

142 
io_u
->
buÊí
 = 
ùo
->
Àn
;

143 
io_u
->
fûe
 = 
td
->
fûes
[
ùo
->
fûío
];

144 
	`gë_fûe
(
io_u
->
fûe
);

145 
	`d¥öt
(
FD_IO
, "iﬁog: gë %Œu/%lu/%s\n", 
io_u
->
off£t
,

146 
io_u
->
buÊí
, io_u->
fûe
->
fûe_«me
);

147 i‡(
ùo
->
dñay
)

148 
	`iﬁog_dñay
(
td
, 
ùo
->
dñay
);

150 
ñ≠£d
 = 
	`mtime_sö˚_gíesis
();

151 i‡(
ùo
->
dñay
 > 
ñ≠£d
)

152 
	`u£c_¶ìp
(
td
, (
ùo
->
dñay
 - 
ñ≠£d
) * 1000);

155 
	`‰ì
(
ùo
);

157 i‡(
io_u
->
ddú
 !
DDIR_WAIT
)

161 
td
->
d⁄e
 = 1;

163 
	}
}

165 
	$¥u√_io_põ˚_log
(
thªad_d©a
 *
td
)

167 
io_põ˚
 *
ùo
;

168 
rb_node
 *
n
;

170 (
n
 = 
	`rb_fú°
(&
td
->
io_hi°_åì
)Ë!
NULL
) {

171 
ùo
 = 
	`rb_íåy
(
n
, 
io_põ˚
, 
rb_node
);

172 
	`rb_îa£
(
n
, &
td
->
io_hi°_åì
);

173 
	`ªmove_åim_íåy
(
td
, 
ùo
);

174 
td
->
io_hi°_Àn
--;

175 
	`‰ì
(
ùo
);

178 !
	`Êi°_em±y
(&
td
->
io_hi°_li°
)) {

179 
ùo
 = 
	`Êi°_íåy
(
td
->
io_hi°_li°
.
√xt
, 
io_põ˚
, 
li°
);

180 
	`Êi°_dñ
(&
ùo
->
li°
);

181 
	`ªmove_åim_íåy
(
td
, 
ùo
);

182 
td
->
io_hi°_Àn
--;

183 
	`‰ì
(
ùo
);

185 
	}
}

190 
	$log_io_põ˚
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

192 
rb_node
 **
p
, *
∑ª¡
;

193 
io_põ˚
 *
ùo
, *
__ùo
;

195 
ùo
 = 
	`mÆloc
((
io_põ˚
));

196 
	`öô_ùo
(
ùo
);

197 
ùo
->
fûe
 = 
io_u
->file;

198 
ùo
->
off£t
 = 
io_u
->offset;

199 
ùo
->
Àn
 = 
io_u
->
buÊí
;

200 
ùo
->
numbîio
 = 
io_u
->numberio;

201 
ùo
->
Êags
 = 
IP_F_IN_FLIGHT
;

203 
io_u
->
ùo
 = ipo;

205 i‡(
	`io_u_should_åim
(
td
, 
io_u
)) {

206 
	`Êi°_add_èû
(&
ùo
->
åim_li°
, &
td
->trim_list);

207 
td
->
åim_íåõs
++;

224 i‡(((!
td
->
o
.
vîifys‹t
Ë|| !
	`td_øndom
—dË|| !td->o.
ovîwrôe
) &&

225 (
	`fûe_øndomm≠
(
td
, 
ùo
->
fûe
Ë||Åd->
o
.
vîify
 =
VERIFY_NONE
)) {

226 
	`INIT_FLIST_HEAD
(&
ùo
->
li°
);

227 
	`Êi°_add_èû
(&
ùo
->
li°
, &
td
->
io_hi°_li°
);

228 
ùo
->
Êags
 |
IP_F_ONLIST
;

229 
td
->
io_hi°_Àn
++;

233 
	`RB_CLEAR_NODE
(&
ùo
->
rb_node
);

238 
ª°¨t
:

239 
p
 = &
td
->
io_hi°_åì
.
rb_node
;

240 
∑ª¡
 = 
NULL
;

241 *
p
) {

242 
∑ª¡
 = *
p
;

244 
__ùo
 = 
	`rb_íåy
(
∑ª¡
, 
io_põ˚
, 
rb_node
);

245 i‡(
ùo
->
fûe
 < 
__ùo
->file)

246 
p
 = &(*p)->
rb_À·
;

247 i‡(
ùo
->
fûe
 > 
__ùo
->file)

248 
p
 = &(*p)->
rb_right
;

249 i‡(
ùo
->
off£t
 < 
__ùo
->offset)

250 
p
 = &(*p)->
rb_À·
;

251 i‡(
ùo
->
off£t
 > 
__ùo
->offset)

252 
p
 = &(*p)->
rb_right
;

254 
	`d¥öt
(
FD_IO
, "iolog: overlap %llu/%lu, %llu/%lu",

255 
__ùo
->
off£t
, __ùo->
Àn
,

256 
ùo
->
off£t
, ipo->
Àn
);

257 
td
->
io_hi°_Àn
--;

258 
	`rb_îa£
(
∑ª¡
, &
td
->
io_hi°_åì
);

259 
	`ªmove_åim_íåy
(
td
, 
__ùo
);

260 
	`‰ì
(
__ùo
);

261 
ª°¨t
;

265 
	`rb_lök_node
(&
ùo
->
rb_node
, 
∑ª¡
, 
p
);

266 
	`rb_ö£π_cﬁ‹
(&
ùo
->
rb_node
, &
td
->
io_hi°_åì
);

267 
ùo
->
Êags
 |
IP_F_ONRB
;

268 
td
->
io_hi°_Àn
++;

269 
	}
}

271 
	$u∆og_io_põ˚
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

273 
io_põ˚
 *
ùo
 = 
io_u
->ipo;

275 i‡(!
ùo
)

278 i‡(
ùo
->
Êags
 & 
IP_F_ONRB
)

279 
	`rb_îa£
(&
ùo
->
rb_node
, &
td
->
io_hi°_åì
);

280 i‡(
ùo
->
Êags
 & 
IP_F_ONLIST
)

281 
	`Êi°_dñ
(&
ùo
->
li°
);

283 
	`‰ì
(
ùo
);

284 
io_u
->
ùo
 = 
NULL
;

285 
td
->
io_hi°_Àn
--;

286 
	}
}

288 
	$åim_io_põ˚
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

290 
io_põ˚
 *
ùo
 = 
io_u
->ipo;

292 i‡(!
ùo
)

295 
ùo
->
Àn
 = 
io_u
->
x„r_buÊí
 - io_u->
ªsid
;

296 
	}
}

298 
	$wrôe_iﬁog_˛o£
(
thªad_d©a
 *
td
)

300 
	`fÊush
(
td
->
iﬁog_f
);

301 
	`f˛o£
(
td
->
iﬁog_f
);

302 
	`‰ì
(
td
->
iﬁog_buf
);

303 
td
->
iﬁog_f
 = 
NULL
;

304 
td
->
iﬁog_buf
 = 
NULL
;

305 
	}
}

311 
	$ªad_iﬁog2
(
thªad_d©a
 *
td
, 
FILE
 *
f
)

313 
off£t
;

314 
byãs
;

315 
ªads
, 
wrôes
, 
waôs
, 
fûío
 = 0, 
fûe_a˘i⁄
 = 0;

316 *
‚ame
, *
a˘
;

317 *
°r
, *
p
;

318 
fio_ddú
 
rw
;

320 
	`‰ì_ªÀa£_fûes
(
td
);

326 
°r
 = 
	`mÆloc
(4096);

327 
‚ame
 = 
	`mÆloc
(256+16);

328 
a˘
 = 
	`mÆloc
(256+16);

330 
ªads
 = 
wrôes
 = 
waôs
 = 0;

331 (
p
 = 
	`fgës
(
°r
, 4096, 
f
)Ë!
NULL
) {

332 
io_põ˚
 *
ùo
;

333 
r
;

335 
r
 = 
	`ssˇnf
(
p
, "%256†%256†%Œu %u", 
‚ame
, 
a˘
, &
off£t
,

336 &
byãs
);

337 i‡(
r
 == 4) {

341 i‡(!
	`°rcmp
(
a˘
, "wait"))

342 
rw
 = 
DDIR_WAIT
;

343 i‡(!
	`°rcmp
(
a˘
, "read"))

344 
rw
 = 
DDIR_READ
;

345 i‡(!
	`°rcmp
(
a˘
, "write"))

346 
rw
 = 
DDIR_WRITE
;

347 i‡(!
	`°rcmp
(
a˘
, "sync"))

348 
rw
 = 
DDIR_SYNC
;

349 i‡(!
	`°rcmp
(
a˘
, "datasync"))

350 
rw
 = 
DDIR_DATASYNC
;

351 i‡(!
	`°rcmp
(
a˘
, "trim"))

352 
rw
 = 
DDIR_TRIM
;

354 
	`log_îr
("fio: bad iolog fileáction: %s\n",

355 
a˘
);

358 
fûío
 = 
	`gë_fûío
(
td
, 
‚ame
);

359 } i‡(
r
 == 2) {

360 
rw
 = 
DDIR_INVAL
;

361 i‡(!
	`°rcmp
(
a˘
, "add")) {

362 
fûío
 = 
	`add_fûe
(
td
, 
‚ame
, 0, 1);

363 
fûe_a˘i⁄
 = 
FIO_LOG_ADD_FILE
;

365 } i‡(!
	`°rcmp
(
a˘
, "open")) {

366 
fûío
 = 
	`gë_fûío
(
td
, 
‚ame
);

367 
fûe_a˘i⁄
 = 
FIO_LOG_OPEN_FILE
;

368 } i‡(!
	`°rcmp
(
a˘
, "close")) {

369 
fûío
 = 
	`gë_fûío
(
td
, 
‚ame
);

370 
fûe_a˘i⁄
 = 
FIO_LOG_CLOSE_FILE
;

372 
	`log_îr
("fio: bad iolog fileáction: %s\n",

373 
a˘
);

377 
	`log_îr
("bad iﬁog2: %s", 
p
);

381 i‡(
rw
 =
DDIR_READ
)

382 
ªads
++;

383 i‡(
rw
 =
DDIR_WRITE
) {

387 i‡(
ªad_⁄ly
)

389 
wrôes
++;

390 } i‡(
rw
 =
DDIR_WAIT
) {

391 
waôs
++;

392 } i‡(
rw
 =
DDIR_INVAL
) {

393 } i‡(!
	`ddú_sync
(
rw
)) {

394 
	`log_îr
("bad ddú: %d\n", 
rw
);

401 
ùo
 = 
	`mÆloc
((*ipo));

402 
	`öô_ùo
(
ùo
);

403 
ùo
->
ddú
 = 
rw
;

404 i‡(
rw
 =
DDIR_WAIT
) {

405 
ùo
->
dñay
 = 
off£t
;

407 
ùo
->
off£t
 = offset;

408 
ùo
->
Àn
 = 
byãs
;

409 i‡(
rw
 !
DDIR_INVAL
 && 
byãs
 > 
td
->
o
.
max_bs
[rw])

410 
td
->
o
.
max_bs
[
rw
] = 
byãs
;

411 
ùo
->
fûío
 = fileno;

412 
ùo
->
fûe_a˘i⁄
 = file_action;

415 
	`queue_io_põ˚
(
td
, 
ùo
);

418 
	`‰ì
(
°r
);

419 
	`‰ì
(
a˘
);

420 
	`‰ì
(
‚ame
);

422 i‡(
wrôes
 && 
ªad_⁄ly
) {

423 
	`log_îr
("fio: <%s> skipsÑeplay of %d writes dueÅo"

424 "Ñód-⁄ly\n", 
td
->
o
.
«me
, 
wrôes
);

425 
wrôes
 = 0;

428 i‡(!
ªads
 && !
wrôes
 && !
waôs
)

430 i‡(
ªads
 && !
wrôes
)

431 
td
->
o
.
td_ddú
 = 
TD_DDIR_READ
;

432 i‡(!
ªads
 && 
wrôes
)

433 
td
->
o
.
td_ddú
 = 
TD_DDIR_WRITE
;

435 
td
->
o
.
td_ddú
 = 
TD_DDIR_RW
;

438 
	}
}

443 
	$öô_iﬁog_ªad
(
thªad_d©a
 *
td
)

445 
buf„r
[256], *
p
;

446 
FILE
 *
f
;

447 
ªt
;

449 
f
 = 
	`f›í
(
td
->
o
.
ªad_iﬁog_fûe
, "r");

450 i‡(!
f
) {

451 
	`≥º‹
("fopenÑead iolog");

455 
p
 = 
	`fgës
(
buf„r
, (buf„r), 
f
);

456 i‡(!
p
) {

457 
	`td_vîr‹
(
td
, 
î∫o
, "iologÑead");

458 
	`log_îr
("fio: unableÅoÑead iolog\n");

459 
	`f˛o£
(
f
);

467 i‡(!
	`°∫cmp
(
iﬁog_vî2
, 
buf„r
, 
	`°æí
(iolog_ver2)))

468 
ªt
 = 
	`ªad_iﬁog2
(
td
, 
f
);

470 
	`log_îr
("fio: iolog version 1 isÇoÜonger supported\n");

471 
ªt
 = 1;

474 
	`f˛o£
(
f
);

475  
ªt
;

476 
	}
}

481 
	$öô_iﬁog_wrôe
(
thªad_d©a
 *
td
)

483 
fio_fûe
 *
ff
;

484 
FILE
 *
f
;

485 
i
;

487 
f
 = 
	`f›í
(
td
->
o
.
wrôe_iﬁog_fûe
, "a");

488 i‡(!
f
) {

489 
	`≥º‹
("fopen write iolog");

496 
td
->
iﬁog_f
 = 
f
;

497 
td
->
iﬁog_buf
 = 
	`mÆloc
(8192);

498 
	`£tvbuf
(
f
, 
td
->
iﬁog_buf
, 
_IOFBF
, 8192);

503 i‡(
	`Ârötf
(
f
, "%s\n", 
iﬁog_vî2
) < 0) {

504 
	`≥º‹
("iolog init\n");

511 
	`f‹_óch_fûe
(
td
, 
ff
, 
i
)

512 
	`log_fûe
(
td
, 
ff
, 
FIO_LOG_ADD_FILE
);

515 
	}
}

517 
	$öô_iﬁog
(
thªad_d©a
 *
td
)

519 
ªt
 = 0;

521 i‡(
td
->
o
.
ªad_iﬁog_fûe
) {

522 
√ed_sw≠
;

528 i‡(
	`is_blkåa˚
(
td
->
o
.
ªad_iﬁog_fûe
, &
√ed_sw≠
))

529 
ªt
 = 
	`lﬂd_blkåa˚
(
td
,Åd->
o
.
ªad_iﬁog_fûe
, 
√ed_sw≠
);

531 
ªt
 = 
	`öô_iﬁog_ªad
(
td
);

532 } i‡(
td
->
o
.
wrôe_iﬁog_fûe
)

533 
ªt
 = 
	`öô_iﬁog_wrôe
(
td
);

535 i‡(
ªt
)

536 
	`td_vîr‹
(
td
, 
EINVAL
, "failed initializing iolog");

538  
ªt
;

539 
	}
}

541 
	$£tup_log
(
io_log
 **
log
, 
avg_m£c
, 
log_ty≥
)

543 
io_log
 *
l
 = 
	`mÆloc
((*l));

545 
	`mem£t
(
l
, 0, (*l));

546 
l
->
ƒ_ßm∂es
 = 0;

547 
l
->
max_ßm∂es
 = 1024;

548 
l
->
log_ty≥
 =Üog_type;

549 
l
->
log
 = 
	`mÆloc
÷->
max_ßm∂es
 * (
io_ßm∂e
));

550 
l
->
avg_m£c
 =ávg_msec;

551 *
log
 = 
l
;

552 
	}
}

554 #ifde‡
CONFIG_SETVBUF


555 *
	$£t_fûe_buf„r
(
FILE
 *
f
)

557 
size_t
 
size
 = 1048576;

558 *
buf
;

560 
buf
 = 
	`mÆloc
(
size
);

561 
	`£tvbuf
(
f
, 
buf
, 
_IOFBF
, 
size
);

562  
buf
;

563 
	}
}

565 
	$˛ór_fûe_buf„r
(*
buf
)

567 
	`‰ì
(
buf
);

568 
	}
}

570 *
	$£t_fûe_buf„r
(
FILE
 *
f
)

572  
NULL
;

573 
	}
}

575 
	$˛ór_fûe_buf„r
(*
buf
)

577 
	}
}

580 
	$__föish_log
(
io_log
 *
log
, c⁄° *
«me
)

582 
i
;

583 *
buf
;

584 
FILE
 *
f
;

586 
f
 = 
	`f›í
(
«me
, "a");

587 i‡(!
f
) {

588 
	`≥º‹
("fopenÜog");

592 
buf
 = 
	`£t_fûe_buf„r
(
f
);

594 
i
 = 0; i < 
log
->
ƒ_ßm∂es
; i++) {

595 
	`Ârötf
(
f
, "%lu, %lu, %u, %u\n",

596 (Ë
log
->log[
i
].
time
,

597 (Ë
log
->log[
i
].
vÆ
,

598 
log
->log[
i
].
ddú
,Üog->log[i].
bs
);

601 
	`f˛o£
(
f
);

602 
	`˛ór_fûe_buf„r
(
buf
);

603 
	`‰ì
(
log
->log);

604 
	`‰ì
(
log
);

605 
	}
}

607 
	$föish_log_«med
(
thªad_d©a
 *
td
, 
io_log
 *
log
,

608 c⁄° *
¥efix
, c⁄° *
po°fix
,

609 
åylock
)

611 
fûe_«me
[256];

613 
	`¢¥ötf
(
fûe_«me
, (fûe_«me), "%s_%s.log", 
¥efix
, 
po°fix
);

615 i‡(
åylock
) {

616 i‡(
	`fio_åylock_fûe
(
fûe_«me
))

619 
	`fio_lock_fûe
(
fûe_«me
);

621 i‡(
td
->
˛õ¡_ty≥
 =
FIO_CLIENT_TYPE_GUI
) {

622 
	`fio_£nd_iﬁog
(
td
, 
log
, 
fûe_«me
);

623 
	`‰ì
(
log
->log);

624 
	`‰ì
(
log
);

626 
	`__föish_log
(
log
, 
fûe_«me
);

628 
	`fio_u∆ock_fûe
(
fûe_«me
);

630 
	}
}

632 
	$föish_log
(
thªad_d©a
 *
td
, 
io_log
 *
log
,

633 c⁄° *
«me
, 
åylock
)

635  
	`föish_log_«med
(
td
, 
log
,Åd->
o
.
«me
,Çame, 
åylock
);

636 
	}
}

638 
	$wrôe_this_log
(
thªad_d©a
 *
td
, 
io_log
 *
log
,

639 c⁄° *
log_fûe
, c⁄° *
«me
, 
åy
)

641 
ªt
;

643 i‡(!
log
)

646 i‡(
log_fûe
)

647 
ªt
 = 
	`föish_log_«med
(
td
, 
log
, 
log_fûe
, 
«me
, 
åy
);

649 
ªt
 = 
	`föish_log
(
td
, 
log
, 
«me
, 
åy
);

651  
ªt
;

652 
	}
}

654 
	$wrôe_i›s_log
(
thªad_d©a
 *
td
, 
åy
)

656 
thªad_›ti⁄s
 *
o
 = &
td
->o;

658  
	`wrôe_this_log
(
td
,Åd->
i›s_log
, 
o
->
i›s_log_fûe
, "i›s", 
åy
);

659 
	}
}

661 
	$wrôe_¶©_log
(
thªad_d©a
 *
td
, 
åy
)

663 
thªad_›ti⁄s
 *
o
 = &
td
->o;

665  
	`wrôe_this_log
(
td
,Åd->
¶©_log
, 
o
->
œt_log_fûe
, "¶©", 
åy
);

666 
	}
}

668 
	$wrôe_˛©_log
(
thªad_d©a
 *
td
, 
åy
)

670 
thªad_›ti⁄s
 *
o
 = &
td
->o;

672  
	`wrôe_this_log
(
td
,Åd->
˛©_log
, 
o
->
œt_log_fûe
, "˛©" , 
åy
);

673 
	}
}

675 
	$wrôe_œt_log
(
thªad_d©a
 *
td
, 
åy
)

677 
thªad_›ti⁄s
 *
o
 = &
td
->o;

679  
	`wrôe_this_log
(
td
,Åd->
œt_log
, 
o
->
œt_log_fûe
, "œt", 
åy
);

680 
	}
}

682 
	$wrôe_b™dw_log
(
thªad_d©a
 *
td
, 
åy
)

684 
thªad_›ti⁄s
 *
o
 = &
td
->o;

686  
	`wrôe_this_log
(
td
,Åd->
bw_log
, 
o
->
bw_log_fûe
, "bw", 
åy
);

687 
	}
}

690 
	mBW_LOG_MASK
 = 1,

691 
	mLAT_LOG_MASK
 = 2,

692 
	mSLAT_LOG_MASK
 = 4,

693 
	mCLAT_LOG_MASK
 = 8,

694 
	mIOPS_LOG_MASK
 = 16,

696 
	mALL_LOG_NR
 = 5,

699 
	slog_ty≥
 {

700 
	mmask
;

701 (*
	m‚
)(
	mthªad_d©a
 *, );

704 
log_ty≥
 
	glog_ty≥s
[] = {

706 .
mask
 = 
BW_LOG_MASK
,

707 .
	g‚
 = 
wrôe_b™dw_log
,

710 .
	gmask
 = 
LAT_LOG_MASK
,

711 .
	g‚
 = 
wrôe_œt_log
,

714 .
	gmask
 = 
SLAT_LOG_MASK
,

715 .
	g‚
 = 
wrôe_¶©_log
,

718 .
	gmask
 = 
CLAT_LOG_MASK
,

719 .
	g‚
 = 
wrôe_˛©_log
,

722 .
	gmask
 = 
IOPS_LOG_MASK
,

723 .
	g‚
 = 
wrôe_i›s_log
,

727 
	$fio_wrôeout_logs
(
thªad_d©a
 *
td
)

729 
log_mask
 = 0;

730 
log_À·
 = 
ALL_LOG_NR
;

731 
ﬁd_°©e
, 
i
;

733 
ﬁd_°©e
 = 
	`td_bump_run°©e
(
td
, 
TD_FINISHING
);

735 
	`föÆize_logs
(
td
);

737 
log_À·
) {

738 
¥ev_log_À·
 = 
log_À·
;

740 
i
 = 0; i < 
ALL_LOG_NR
 && 
log_À·
; i++) {

741 
log_ty≥
 *
…
 = &
log_ty≥s
[
i
];

742 
ªt
;

744 i‡(!(
log_mask
 & 
…
->
mask
)) {

745 
ªt
 = 
…
->
	`‚
(
td
, 
log_À·
 != 1);

746 i‡(!
ªt
) {

747 
log_À·
--;

748 
log_mask
 |
…
->
mask
;

753 i‡(
¥ev_log_À·
 =
log_À·
)

754 
	`u¶ìp
(5000);

757 
	`td_ª°‹e_run°©e
(
td
, 
ﬁd_°©e
);

758 
	}
}

	@/home/terekhov/tmp/fio/fio/iolog.h

1 #i‚de‡
FIO_IOLOG_H


2 
	#FIO_IOLOG_H


	)

4 
	~"lib/rbåì.h
"

5 
	~"lib/õì754.h
"

6 
	~"Êi°.h
"

7 
	~"i€ngöe.h
"

12 
	sio_°©
 {

13 
uöt64_t
 
	mmax_vÆ
;

14 
uöt64_t
 
	mmö_vÆ
;

15 
uöt64_t
 
	mßm∂es
;

17 
fio_Â64_t
 
	mmón
;

18 
fio_Â64_t
 
	mS
;

24 
	sio_ßm∂e
 {

25 
uöt64_t
 
	mtime
;

26 
uöt64_t
 
	mvÆ
;

27 
uöt32_t
 
	mddú
;

28 
uöt32_t
 
	mbs
;

32 
	mIO_LOG_TYPE_LAT
 = 1,

33 
	mIO_LOG_TYPE_CLAT
,

34 
	mIO_LOG_TYPE_SLAT
,

35 
	mIO_LOG_TYPE_BW
,

36 
	mIO_LOG_TYPE_IOPS
,

42 
	sio_log
 {

46 
	mƒ_ßm∂es
;

47 
	mmax_ßm∂es
;

48 
io_ßm∂e
 *
	mlog
;

50 
	mlog_ty≥
;

55 
	mdißbÀd
;

61 
io_°©
 
	mavg_wödow
[
DDIR_RWDIR_CNT
];

62 
	mavg_m£c
;

63 
	mavg_œ°
;

67 
	mIP_F_ONRB
 = 1,

68 
	mIP_F_ONLIST
 = 2,

69 
	mIP_F_TRIMMED
 = 4,

70 
	mIP_F_IN_FLIGHT
 = 8,

76 
	sio_põ˚
 {

78 
rb_node
 
	mrb_node
;

79 
Êi°_hód
 
	mli°
;

81 
Êi°_hód
 
	måim_li°
;

83 
	mfûío
;

84 
fio_fûe
 *
	mfûe
;

86 
	moff£t
;

87 
	mnumbîio
;

88 
	mÀn
;

89 
	mÊags
;

90 
fio_ddú
 
	mddú
;

92 
	mdñay
;

93 
	mfûe_a˘i⁄
;

100 
	efûe_log_a˘
 {

101 
	mFIO_LOG_ADD_FILE
,

102 
	mFIO_LOG_OPEN_FILE
,

103 
	mFIO_LOG_CLOSE_FILE
,

104 
	mFIO_LOG_UNLINK_FILE
,

107 
	gio_u
;

108 
__mu°_check
 
ªad_iﬁog_gë
(
thªad_d©a
 *, 
io_u
 *);

109 
log_io_u
(
thªad_d©a
 *, 
io_u
 *);

110 
log_fûe
(
thªad_d©a
 *, 
fio_fûe
 *, 
fûe_log_a˘
);

111 
__mu°_check
 
öô_iﬁog
(
thªad_d©a
 *
td
);

112 
log_io_põ˚
(
thªad_d©a
 *, 
io_u
 *);

113 
u∆og_io_põ˚
(
thªad_d©a
 *, 
io_u
 *);

114 
åim_io_põ˚
(
thªad_d©a
 *, 
io_u
 *);

115 
queue_io_põ˚
(
thªad_d©a
 *, 
io_põ˚
 *);

116 
¥u√_io_põ˚_log
(
thªad_d©a
 *);

117 
wrôe_iﬁog_˛o£
(
thªad_d©a
 *);

122 
föÆize_logs
(
thªad_d©a
 *
td
);

123 
add_œt_ßm∂e
(
thªad_d©a
 *, 
fio_ddú
, ,

125 
add_˛©_ßm∂e
(
thªad_d©a
 *, 
fio_ddú
, ,

127 
add_¶©_ßm∂e
(
thªad_d©a
 *, 
fio_ddú
, ,

129 
add_bw_ßm∂e
(
thªad_d©a
 *, 
fio_ddú
, ,

130 
timevÆ
 *);

131 
add_i›s_ßm∂e
(
thªad_d©a
 *, 
fio_ddú
, ,

132 
timevÆ
 *);

133 
öô_disk_utû
(
thªad_d©a
 *);

134 
upd©e_rußge_°©
(
thªad_d©a
 *);

135 
£tup_log
(
io_log
 **, , );

136 
__föish_log
(
io_log
 *, const *);

137 
io_log
 *
agg_io_log
[
DDIR_RWDIR_CNT
];

138 
wrôe_bw_log
;

139 
add_agg_ßm∂e
(, 
fio_ddú
, );

140 
fio_wrôeout_logs
(
thªad_d©a
 *);

142 
ölöe
 
	$öô_ùo
(
io_põ˚
 *
ùo
)

144 
	`mem£t
(
ùo
, 0, (*ipo));

145 
	`INIT_FLIST_HEAD
(&
ùo
->
åim_li°
);

146 
	}
}

	@/home/terekhov/tmp/fio/fio/json.c

1 
	~<°dlib.h
>

2 
	~<°rög.h
>

3 
	~<°dio.h
>

4 
	~<î∫o.h
>

5 
	~<°d¨g.h
>

6 
	~"js⁄.h
"

7 
	~"log.h
"

9 
js⁄_obje˘
 *
	$js⁄_¸óã_obje˘
()

11 
js⁄_obje˘
 *
obj
 = 
	`mÆloc
((json_object));

12 i‡(
obj
)

13 
	`mem£t
(
obj
, 0, (
js⁄_obje˘
));

14  
obj
;

15 
	}
}

17 
js⁄_¨øy
 *
	$js⁄_¸óã_¨øy
()

19 
js⁄_¨øy
 *
¨øy
 = 
	`mÆloc
((json_array));

20 i‡(
¨øy
)

21 
	`mem£t
(
¨øy
, 0, (
js⁄_¨øy
));

22  
¨øy
;

23 
	}
}

25 
js⁄_∑ú
 *
	$js⁄_¸óã_∑ú
(c⁄° *
«me
, 
js⁄_vÆue
 *
vÆue
)

27 
js⁄_∑ú
 *
∑ú
 = 
	`mÆloc
((json_pair));

28 i‡(
∑ú
) {

29 
∑ú
->
«me
 = 
	`°rdup
(name);

30 
∑ú
->
vÆue
 = value;

32 
vÆue
->
∑ª¡_ty≥
 = 
JSON_PARENT_TYPE_PAIR
;

33 
vÆue
->
∑ª¡_∑ú
 = 
∑ú
;

35  
∑ú
;

36 
	}
}

38 
js⁄_vÆue
 *
	$js⁄_¸óã_vÆue_öt
(
numbî
)

40 
js⁄_vÆue
 *
vÆue
 = 
	`mÆloc
((json_value));

42 i‡(
vÆue
) {

43 
vÆue
->
ty≥
 = 
JSON_TYPE_INTEGER
;

44 
vÆue
->
öãgî_numbî
 = 
numbî
;

46  
vÆue
;

47 
	}
}

49 
js⁄_vÆue
 *
	$js⁄_¸óã_vÆue_Êﬂt
(
numbî
)

51 
js⁄_vÆue
 *
vÆue
 = 
	`mÆloc
((json_value));

53 i‡(
vÆue
) {

54 
vÆue
->
ty≥
 = 
JSON_TYPE_FLOAT
;

55 
vÆue
->
Êﬂt_numbî
 = 
numbî
;

57  
vÆue
;

58 
	}
}

60 *
	$°rdup_esˇ≥
(c⁄° *
°r
)

62 c⁄° *
öput
 = 
°r
;

63 *
p
, *
ªt
;

64 
esˇ≥s
;

66 i‡(!
	`°æí
(
°r
))

67  
NULL
;

69 
esˇ≥s
 = 0;

70 (
öput
 = 
	`°Ωbrk
(öput, "\\\"")Ë!
NULL
) {

71 
esˇ≥s
++;

72 
öput
++;

75 
p
 = 
ªt
 = 
	`mÆloc
(
	`°æí
(
°r
Ë+ 
esˇ≥s
 + 1);

76 *
°r
) {

77 i‡(*
°r
 == '\\' || *str == '\"')

78 *
p
++ = '\\';

79 *
p
++ = *
°r
++;

81 *
p
 = '\0';

83  
ªt
;

84 
	}
}

89 
js⁄_vÆue
 *
	$js⁄_¸óã_vÆue_°rög
(c⁄° *
°r
)

91 
js⁄_vÆue
 *
vÆue
 = 
	`mÆloc
((json_value));

93 i‡(
vÆue
) {

94 
vÆue
->
ty≥
 = 
JSON_TYPE_STRING
;

95 
vÆue
->
°rög
 = 
	`°rdup_esˇ≥
(
°r
);

96 i‡(!
vÆue
->
°rög
) {

97 
	`‰ì
(
vÆue
);

98 
vÆue
 = 
NULL
;

101  
vÆue
;

102 
	}
}

104 
js⁄_vÆue
 *
	$js⁄_¸óã_vÆue_obje˘
(
js⁄_obje˘
 *
obj
)

106 
js⁄_vÆue
 *
vÆue
 = 
	`mÆloc
((json_value));

108 i‡(
vÆue
) {

109 
vÆue
->
ty≥
 = 
JSON_TYPE_OBJECT
;

110 
vÆue
->
obje˘
 = 
obj
;

111 
obj
->
∑ª¡
 = 
vÆue
;

113  
vÆue
;

114 
	}
}

116 
js⁄_vÆue
 *
	$js⁄_¸óã_vÆue_¨øy
(
js⁄_¨øy
 *
¨øy
)

118 
js⁄_vÆue
 *
vÆue
 = 
	`mÆloc
((json_value));

120 i‡(
vÆue
) {

121 
vÆue
->
ty≥
 = 
JSON_TYPE_ARRAY
;

122 
vÆue
->
¨øy
 =árray;

123 
¨øy
->
∑ª¡
 = 
vÆue
;

125  
vÆue
;

126 
	}
}

128 
js⁄_‰ì_∑ú
(
js⁄_∑ú
 *
∑ú
);

129 
js⁄_‰ì_vÆue
(
js⁄_vÆue
 *
vÆue
);

131 
	$js⁄_‰ì_obje˘
(
js⁄_obje˘
 *
obj
)

133 
i
;

135 
i
 = 0; i < 
obj
->
∑ú_˙t
; i++)

136 
	`js⁄_‰ì_∑ú
(
obj
->
∑ús
[
i
]);

137 
	`‰ì
(
obj
->
∑ús
);

138 
	`‰ì
(
obj
);

139 
	}
}

141 
	$js⁄_‰ì_¨øy
(
js⁄_¨øy
 *
¨øy
)

143 
i
;

145 
i
 = 0; i < 
¨øy
->
vÆue_˙t
; i++)

146 
	`js⁄_‰ì_vÆue
(
¨øy
->
vÆues
[
i
]);

147 
	`‰ì
(
¨øy
->
vÆues
);

148 
	`‰ì
(
¨øy
);

149 
	}
}

151 
	$js⁄_‰ì_∑ú
(
js⁄_∑ú
 *
∑ú
)

153 
	`js⁄_‰ì_vÆue
(
∑ú
->
vÆue
);

154 
	`‰ì
(
∑ú
->
«me
);

155 
	`‰ì
(
∑ú
);

156 
	}
}

158 
	$js⁄_‰ì_vÆue
(
js⁄_vÆue
 *
vÆue
)

160 
vÆue
->
ty≥
) {

161 
JSON_TYPE_STRING
:

162 
	`‰ì
(
vÆue
->
°rög
);

164 
JSON_TYPE_OBJECT
:

165 
	`js⁄_‰ì_obje˘
(
vÆue
->
obje˘
);

167 
JSON_TYPE_ARRAY
:

168 
	`js⁄_‰ì_¨øy
(
vÆue
->
¨øy
);

171 
	`‰ì
(
vÆue
);

172 
	}
}

174 
	$js⁄_¨øy_add_vÆue
(
js⁄_¨øy
 *
¨øy
, 
js⁄_vÆue
 *
vÆue
)

176 
js⁄_vÆue
 **
vÆues
 = 
	`ªÆloc
(
¨øy
->values,

177 (
js⁄_vÆue
 *Ë* (
¨øy
->
vÆue_˙t
 + 1));

179 i‡(!
vÆues
)

180  
ENOMEM
;

181 
vÆues
[
¨øy
->
vÆue_˙t
] = 
vÆue
;

182 
¨øy
->
vÆue_˙t
++;

183 
¨øy
->
vÆues
 = values;

185 
vÆue
->
∑ª¡_ty≥
 = 
JSON_PARENT_TYPE_ARRAY
;

186 
vÆue
->
∑ª¡_¨øy
 = 
¨øy
;

188 
	}
}

190 
	$js⁄_obje˘_add_∑ú
(
js⁄_obje˘
 *
obj
, 
js⁄_∑ú
 *
∑ú
)

192 
js⁄_∑ú
 **
∑ús
 = 
	`ªÆloc
(
obj
->pairs,

193 (
js⁄_∑ú
 *Ë* (
obj
->
∑ú_˙t
 + 1));

194 i‡(!
∑ús
)

195  
ENOMEM
;

196 
∑ús
[
obj
->
∑ú_˙t
] = 
∑ú
;

197 
obj
->
∑ú_˙t
++;

198 
obj
->
∑ús
 =Öairs;

200 
∑ú
->
∑ª¡
 = 
obj
;

202 
	}
}

204 
	$js⁄_obje˘_add_vÆue_ty≥
(
js⁄_obje˘
 *
obj
, c⁄° *
«me
, 
ty≥
, ...)

206 
js⁄_vÆue
 *
vÆue
;

207 
js⁄_∑ú
 *
∑ú
;

208 
va_li°
 
¨gs
;

209 
ªt
;

211 
	`va_°¨t
(
¨gs
, 
ty≥
);

212 i‡(
ty≥
 =
JSON_TYPE_STRING
)

213 
vÆue
 = 
	`js⁄_¸óã_vÆue_°rög
(
	`va_¨g
(
¨gs
, *));

214 i‡(
ty≥
 =
JSON_TYPE_INTEGER
)

215 
vÆue
 = 
	`js⁄_¸óã_vÆue_öt
(
	`va_¨g
(
¨gs
, ));

216 i‡(
ty≥
 =
JSON_TYPE_FLOAT
)

217 
vÆue
 = 
	`js⁄_¸óã_vÆue_Êﬂt
(
	`va_¨g
(
¨gs
, ));

218 i‡(
ty≥
 =
JSON_TYPE_OBJECT
)

219 
vÆue
 = 
	`js⁄_¸óã_vÆue_obje˘
(
	`va_¨g
(
¨gs
, 
js⁄_obje˘
 *));

221 
vÆue
 = 
	`js⁄_¸óã_vÆue_¨øy
(
	`va_¨g
(
¨gs
, 
js⁄_¨øy
 *));

222 
	`va_íd
(
¨gs
);

224 i‡(!
vÆue
)

225  
ENOMEM
;

227 
∑ú
 = 
	`js⁄_¸óã_∑ú
(
«me
, 
vÆue
);

228 i‡(!
∑ú
) {

229 
	`js⁄_‰ì_vÆue
(
vÆue
);

230  
ENOMEM
;

232 
ªt
 = 
	`js⁄_obje˘_add_∑ú
(
obj
, 
∑ú
);

233 i‡(
ªt
) {

234 
	`js⁄_‰ì_∑ú
(
∑ú
);

235  
ENOMEM
;

238 
	}
}

240 
js⁄_¥öt_¨øy
(
js⁄_¨øy
 *
¨øy
);

241 
	$js⁄_¨øy_add_vÆue_ty≥
(
js⁄_¨øy
 *
¨øy
, 
ty≥
, ...)

243 
js⁄_vÆue
 *
vÆue
;

244 
va_li°
 
¨gs
;

245 
ªt
;

247 
	`va_°¨t
(
¨gs
, 
ty≥
);

248 i‡(
ty≥
 =
JSON_TYPE_STRING
)

249 
vÆue
 = 
	`js⁄_¸óã_vÆue_°rög
(
	`va_¨g
(
¨gs
, *));

250 i‡(
ty≥
 =
JSON_TYPE_INTEGER
)

251 
vÆue
 = 
	`js⁄_¸óã_vÆue_öt
(
	`va_¨g
(
¨gs
, ));

252 i‡(
ty≥
 =
JSON_TYPE_FLOAT
)

253 
vÆue
 = 
	`js⁄_¸óã_vÆue_Êﬂt
(
	`va_¨g
(
¨gs
, ));

254 i‡(
ty≥
 =
JSON_TYPE_OBJECT
)

255 
vÆue
 = 
	`js⁄_¸óã_vÆue_obje˘
(
	`va_¨g
(
¨gs
, 
js⁄_obje˘
 *));

257 
vÆue
 = 
	`js⁄_¸óã_vÆue_¨øy
(
	`va_¨g
(
¨gs
, 
js⁄_¨øy
 *));

258 
	`va_íd
(
¨gs
);

260 i‡(!
vÆue
)

261  
ENOMEM
;

263 
ªt
 = 
	`js⁄_¨øy_add_vÆue
(
¨øy
, 
vÆue
);

264 i‡(
ªt
) {

265 
	`js⁄_‰ì_vÆue
(
vÆue
);

266  
ENOMEM
;

269 
	}
}

271 
js⁄_vÆue_Àvñ
(
js⁄_vÆue
 *
vÆue
);

272 
js⁄_∑ú_Àvñ
(
js⁄_∑ú
 *
∑ú
);

273 
js⁄_¨øy_Àvñ
(
js⁄_¨øy
 *
¨øy
);

274 
	$js⁄_obje˘_Àvñ
(
js⁄_obje˘
 *
obje˘
)

276 i‡(
obje˘
->
∑ª¡
 =
NULL
)

278  
	`js⁄_vÆue_Àvñ
(
obje˘
->
∑ª¡
);

279 
	}
}

281 
	$js⁄_∑ú_Àvñ
(
js⁄_∑ú
 *
∑ú
)

283  
	`js⁄_obje˘_Àvñ
(
∑ú
->
∑ª¡
) + 1;

284 
	}
}

286 
	$js⁄_¨øy_Àvñ
(
js⁄_¨øy
 *
¨øy
)

288  
	`js⁄_vÆue_Àvñ
(
¨øy
->
∑ª¡
);

289 
	}
}

291 
	$js⁄_vÆue_Àvñ
(
js⁄_vÆue
 *
vÆue
)

293 i‡(
vÆue
->
∑ª¡_ty≥
 =
JSON_PARENT_TYPE_PAIR
)

294  
	`js⁄_∑ú_Àvñ
(
vÆue
->
∑ª¡_∑ú
);

296  
	`js⁄_¨øy_Àvñ
(
vÆue
->
∑ª¡_¨øy
) + 1;

297 
	}
}

299 
	$js⁄_¥öt_Àvñ
(
Àvñ
)

301 
Àvñ
-- > 0)

302 
	`log_öfo
(" ");

303 
	}
}

305 
js⁄_¥öt_∑ú
(
js⁄_∑ú
 *
∑ú
);

306 
js⁄_¥öt_¨øy
(
js⁄_¨øy
 *
¨øy
);

307 
js⁄_¥öt_vÆue
(
js⁄_vÆue
 *
vÆue
);

308 
	$js⁄_¥öt_obje˘
(
js⁄_obje˘
 *
obj
)

310 
i
;

312 
	`log_öfo
("{\n");

313 
i
 = 0; i < 
obj
->
∑ú_˙t
; i++) {

314 i‡(
i
 > 0)

315 
	`log_öfo
(",\n");

316 
	`js⁄_¥öt_∑ú
(
obj
->
∑ús
[
i
]);

318 
	`log_öfo
("\n");

319 
	`js⁄_¥öt_Àvñ
(
	`js⁄_obje˘_Àvñ
(
obj
));

320 
	`log_öfo
("}");

321 
	}
}

323 
	$js⁄_¥öt_∑ú
(
js⁄_∑ú
 *
∑ú
)

325 
	`js⁄_¥öt_Àvñ
(
	`js⁄_∑ú_Àvñ
(
∑ú
));

326 
	`log_öfo
("\"%s\" : ", 
∑ú
->
«me
);

327 
	`js⁄_¥öt_vÆue
(
∑ú
->
vÆue
);

328 
	}
}

330 
	$js⁄_¥öt_¨øy
(
js⁄_¨øy
 *
¨øy
)

332 
i
;

334 
	`log_öfo
("[\n");

335 
i
 = 0; i < 
¨øy
->
vÆue_˙t
; i++) {

336 i‡(
i
 > 0)

337 
	`log_öfo
(",\n");

338 
	`js⁄_¥öt_Àvñ
(
	`js⁄_vÆue_Àvñ
(
¨øy
->
vÆues
[
i
]));

339 
	`js⁄_¥öt_vÆue
(
¨øy
->
vÆues
[
i
]);

341 
	`log_öfo
("\n");

342 
	`js⁄_¥öt_Àvñ
(
	`js⁄_¨øy_Àvñ
(
¨øy
));

343 
	`log_öfo
("]");

344 
	}
}

346 
	$js⁄_¥öt_vÆue
(
js⁄_vÆue
 *
vÆue
)

348 
vÆue
->
ty≥
) {

349 
JSON_TYPE_STRING
:

350 
	`log_öfo
("\"%s\"", 
vÆue
->
°rög
);

352 
JSON_TYPE_INTEGER
:

353 
	`log_öfo
("%Œd", 
vÆue
->
öãgî_numbî
);

355 
JSON_TYPE_FLOAT
:

356 
	`log_öfo
("%.2f", 
vÆue
->
Êﬂt_numbî
);

358 
JSON_TYPE_OBJECT
:

359 
	`js⁄_¥öt_obje˘
(
vÆue
->
obje˘
);

361 
JSON_TYPE_ARRAY
:

362 
	`js⁄_¥öt_¨øy
(
vÆue
->
¨øy
);

365 
	}
}

	@/home/terekhov/tmp/fio/fio/json.h

1 #i‚de‡
__JSON__H


2 
	#__JSON__H


	)

3 
	gjs⁄_obje˘
;

4 
	gjs⁄_¨øy
;

5 
	gjs⁄_∑ú
;

7 
	#JSON_TYPE_STRING
 0

	)

8 
	#JSON_TYPE_INTEGER
 1

	)

9 
	#JSON_TYPE_FLOAT
 2

	)

10 
	#JSON_TYPE_OBJECT
 3

	)

11 
	#JSON_TYPE_ARRAY
 4

	)

12 
	#JSON_PARENT_TYPE_PAIR
 0

	)

13 
	#JSON_PARENT_TYPE_ARRAY
 1

	)

14 
	sjs⁄_vÆue
 {

15 
	mty≥
;

17 
	möãgî_numbî
;

18 
	mÊﬂt_numbî
;

19 *
	m°rög
;

20 
js⁄_obje˘
 *
	mobje˘
;

21 
js⁄_¨øy
 *
	m¨øy
;

23 
	m∑ª¡_ty≥
;

25 
js⁄_∑ú
 *
	m∑ª¡_∑ú
;

26 
js⁄_¨øy
 *
	m∑ª¡_¨øy
;

30 
	sjs⁄_¨øy
 {

31 
js⁄_vÆue
 **
	mvÆues
;

32 
	mvÆue_˙t
;

33 
js⁄_vÆue
 *
	m∑ª¡
;

36 
	sjs⁄_obje˘
 {

37 
js⁄_∑ú
 **
	m∑ús
;

38 
	m∑ú_˙t
;

39 
js⁄_vÆue
 *
	m∑ª¡
;

42 
	sjs⁄_∑ú
 {

43 *
	m«me
;

44 
js⁄_vÆue
 *
	mvÆue
;

45 
js⁄_obje˘
 *
	m∑ª¡
;

48 
js⁄_obje˘
 *
js⁄_¸óã_obje˘
();

49 
js⁄_¨øy
 *
js⁄_¸óã_¨øy
();

51 
js⁄_‰ì_obje˘
(
js⁄_obje˘
 *
obj
);

53 
js⁄_obje˘_add_vÆue_ty≥
(
js⁄_obje˘
 *
obj
, c⁄° *
«me
, 
ty≥
, ...);

54 
	#js⁄_obje˘_add_vÆue_öt
(
obj
, 
«me
, 
vÆ
) \

55 
	`js⁄_obje˘_add_vÆue_ty≥
((
obj
), 
«me
, 
JSON_TYPE_INTEGER
, (
vÆ
))

	)

56 
	#js⁄_obje˘_add_vÆue_Êﬂt
(
obj
, 
«me
, 
vÆ
) \

57 
	`js⁄_obje˘_add_vÆue_ty≥
((
obj
), 
«me
, 
JSON_TYPE_FLOAT
, (
vÆ
))

	)

58 
	#js⁄_obje˘_add_vÆue_°rög
(
obj
, 
«me
, 
vÆ
) \

59 
	`js⁄_obje˘_add_vÆue_ty≥
((
obj
), 
«me
, 
JSON_TYPE_STRING
, (
vÆ
))

	)

60 
	#js⁄_obje˘_add_vÆue_obje˘
(
obj
, 
«me
, 
vÆ
) \

61 
	`js⁄_obje˘_add_vÆue_ty≥
((
obj
), 
«me
, 
JSON_TYPE_OBJECT
, (
vÆ
))

	)

62 
	#js⁄_obje˘_add_vÆue_¨øy
(
obj
, 
«me
, 
vÆ
) \

63 
	`js⁄_obje˘_add_vÆue_ty≥
((
obj
), 
«me
, 
JSON_TYPE_ARRAY
, (
vÆ
))

	)

64 
js⁄_¨øy_add_vÆue_ty≥
(
js⁄_¨øy
 *
¨øy
, 
ty≥
, ...);

65 
	#js⁄_¨øy_add_vÆue_öt
(
obj
, 
vÆ
) \

66 
	`js⁄_¨øy_add_vÆue_ty≥
((
obj
), 
JSON_TYPE_INTEGER
, (
vÆ
))

	)

67 
	#js⁄_¨øy_add_vÆue_Êﬂt
(
obj
, 
vÆ
) \

68 
	`js⁄_¨øy_add_vÆue_ty≥
((
obj
), 
JSON_TYPE_FLOAT
, (
vÆ
))

	)

69 
	#js⁄_¨øy_add_vÆue_°rög
(
obj
, 
vÆ
) \

70 
	`js⁄_¨øy_add_vÆue_ty≥
((
obj
), 
JSON_TYPE_STRING
, (
vÆ
))

	)

71 
	#js⁄_¨øy_add_vÆue_obje˘
(
obj
, 
vÆ
) \

72 
	`js⁄_¨øy_add_vÆue_ty≥
((
obj
), 
JSON_TYPE_OBJECT
, (
vÆ
))

	)

73 
	#js⁄_¨øy_add_vÆue_¨øy
(
obj
, 
vÆ
) \

74 
	`js⁄_¨øy_add_vÆue_ty≥
((
obj
), 
JSON_TYPE_ARRAY
, (
vÆ
))

	)

76 
	#js⁄_¨øy_œ°_vÆue_obje˘
(
obj
) \

77 (
obj
->
vÆues
[obj->
vÆue_˙t
 - 1]->
obje˘
)

	)

79 
js⁄_¥öt_obje˘
(
js⁄_obje˘
 *
obj
);

	@/home/terekhov/tmp/fio/fio/lib/axmap.c

18 
	~<°dio.h
>

19 
	~<°dlib.h
>

20 
	~<°rög.h
>

21 
	~<as£π.h
>

23 
	~"../¨ch/¨ch.h
"

24 
	~"axm≠.h
"

25 
	~"../smÆloc.h
"

26 
	~"../mömax.h
"

28 #i‡
BITS_PER_LONG
 == 64

29 
	#UNIT_SHIFT
 6

	)

30 #ñi‡
BITS_PER_LONG
 == 32

31 
	#UNIT_SHIFT
 5

	)

36 
	#BLOCKS_PER_UNIT
 (1UL << 
UNIT_SHIFT
)

	)

37 
	#BLOCKS_PER_UNIT_MASK
 (
BLOCKS_PER_UNIT
 - 1)

	)

39 
	#fú°‰ì_vÆid
(
b
Ë((b)->
fú°_‰ì
 !(
uöt64_t
Ë-1)

	)

41 
	saxm≠_Àvñ
 {

42 
	mÀvñ
;

43 
	mm≠_size
;

44 *
	mm≠
;

47 
	saxm≠
 {

48 
	mƒ_Àvñs
;

49 
axm≠_Àvñ
 *
	mÀvñs
;

50 
uöt64_t
 
	mfú°_‰ì
;

51 
uöt64_t
 
	mƒ_bôs
;

54 
	$ulog64
(
vÆ
, 
log
)

56 
log
-- && 
vÆ
)

57 
vÆ
 >>
UNIT_SHIFT
;

59  
vÆ
;

60 
	}
}

62 
	$axm≠_ª£t
(
axm≠
 *axmap)

64 
i
;

66 
i
 = 0; i < 
axm≠
->
ƒ_Àvñs
; i++) {

67 
axm≠_Àvñ
 *
Æ
 = &
axm≠
->
Àvñs
[
i
];

69 
	`mem£t
(
Æ
->
m≠
, 0,ál->
m≠_size
 * ());

72 
axm≠
->
fú°_‰ì
 = 0;

73 
	}
}

75 
	$axm≠_‰ì
(
axm≠
 *axmap)

77 
i
;

79 i‡(!
axm≠
)

82 
i
 = 0; i < 
axm≠
->
ƒ_Àvñs
; i++)

83 
	`s‰ì
(
axm≠
->
Àvñs
[
i
].
m≠
);

85 
	`s‰ì
(
axm≠
->
Àvñs
);

86 
	`s‰ì
(
axm≠
);

87 
	}
}

89 
axm≠
 *
	$axm≠_√w
(
ƒ_bôs
)

91 
axm≠
 *axmap;

92 
i
, 
Àvñs
;

94 
axm≠
 = 
	`smÆloc
((*axmap));

95 i‡(!
axm≠
)

96  
NULL
;

98 
Àvñs
 = 1;

99 
i
 = (
ƒ_bôs
 + 
BLOCKS_PER_UNIT
 - 1Ë>> 
UNIT_SHIFT
;

100 
i
 > 1) {

101 
i
 = (ò+ 
BLOCKS_PER_UNIT
 - 1Ë>> 
UNIT_SHIFT
;

102 
Àvñs
++;

105 
axm≠
->
ƒ_Àvñs
 = 
Àvñs
;

106 
axm≠
->
Àvñs
 = 
	`smÆloc
◊xm≠->
ƒ_Àvñs
 * (
axm≠_Àvñ
));

107 
axm≠
->
ƒ_bôs
 =Çr_bits;

109 
i
 = 0; i < 
axm≠
->
ƒ_Àvñs
; i++) {

110 
axm≠_Àvñ
 *
Æ
 = &
axm≠
->
Àvñs
[
i
];

112 
Æ
->
Àvñ
 = 
i
;

113 
Æ
->
m≠_size
 = (
ƒ_bôs
 + 
BLOCKS_PER_UNIT
 - 1Ë>> 
UNIT_SHIFT
;

114 
Æ
->
m≠
 = 
	`smÆloc
◊l->
m≠_size
 * ());

115 i‡(!
Æ
->
m≠
)

116 
îr
;

118 
ƒ_bôs
 = (ƒ_bô†+ 
BLOCKS_PER_UNIT
 - 1Ë>> 
UNIT_SHIFT
;

121 
	`axm≠_ª£t
(
axm≠
);

122  
axm≠
;

123 
îr
:

124 
i
 = 0; i < 
axm≠
->
ƒ_Àvñs
; i++)

125 i‡(
axm≠
->
Àvñs
[
i
].
m≠
)

126 
	`s‰ì
(
axm≠
->
Àvñs
[
i
].
m≠
);

128 
	`s‰ì
(
axm≠
->
Àvñs
);

129  
NULL
;

130 
	}
}

132 
axm≠_h™dÀr
(
axm≠
 *axm≠, 
uöt64_t
 
bô_ƒ
,

133 (*
func
)(
axm≠_Àvñ
 *, , ,

134 *), *
d©a
)

136 
axm≠_Àvñ
 *
Æ
;

137 
i
;

139 
i
 = 0; i < 
axm≠
->
ƒ_Àvñs
; i++) {

140 
ödex
 = 
	`ulog64
(
bô_ƒ
, 
i
);

141 
off£t
 = 
ödex
 >> 
UNIT_SHIFT
;

142 
bô
 = 
ödex
 & 
BLOCKS_PER_UNIT_MASK
;

144 
Æ
 = &
axm≠
->
Àvñs
[
i
];

146 i‡(
	`func
(
Æ
, 
off£t
, 
bô
, 
d©a
))

151 
	}
}

153 
axm≠_h™dÀr_t›down
(
axm≠
 *axm≠, 
uöt64_t
 
bô_ƒ
,

154 (*
func
)(
axm≠_Àvñ
 *, , , *),

155 *
d©a
)

157 
axm≠_Àvñ
 *
Æ
;

158 
i
, 
Àvñ
 = 
axm≠
->
ƒ_Àvñs
;

160 
i
 = 
axm≠
->
ƒ_Àvñs
 - 1; i >= 0; i--) {

161 
ödex
 = 
	`ulog64
(
bô_ƒ
, --
Àvñ
);

162 
off£t
 = 
ödex
 >> 
UNIT_SHIFT
;

163 
bô
 = 
ödex
 & 
BLOCKS_PER_UNIT_MASK
;

165 
Æ
 = &
axm≠
->
Àvñs
[
i
];

167 i‡(
	`func
(
Æ
, 
off£t
, 
bô
, 
d©a
))

172 
	}
}

174 
	$axm≠_˛ór_‚
(
axm≠_Àvñ
 *
Æ
, 
off£t
,

175 
bô
, *
unu£d
)

177 i‡(!(
Æ
->
m≠
[
off£t
] & (1UL << 
bô
)))

180 
Æ
->
m≠
[
off£t
] &~(1UL << 
bô
);

182 
	}
}

184 
	$axm≠_˛ór
(
axm≠
 *axm≠, 
uöt64_t
 
bô_ƒ
)

186 
	`axm≠_h™dÀr
(
axm≠
, 
bô_ƒ
, 
axm≠_˛ór_‚
, 
NULL
);

187 
	}
}

189 
	saxm≠_£t_d©a
 {

190 
	mƒ_bôs
;

191 
	m£t_bôs
;

194 
	gbô_masks
[] = {

204 #i‡
BITS_PER_LONG
 == 64

216 
	$axm≠_£t_‚
(
axm≠_Àvñ
 *
Æ
, 
off£t
,

217 
bô
, *
__d©a
)

219 
axm≠_£t_d©a
 *
d©a
 = 
__d©a
;

220 
mask
, 
ovîœp
;

221 
ƒ_bôs
;

223 
ƒ_bôs
 = 
	`mö
(
d©a
->ƒ_bôs, 
BLOCKS_PER_UNIT
 - 
bô
);

225 
mask
 = 
bô_masks
[
ƒ_bôs
] << 
bô
;

230 
ovîœp
 = 
Æ
->
m≠
[
off£t
] & 
mask
;

231 i‡(
ovîœp
 =
mask
)

234 
ovîœp
) {

235 
˛ór_mask
 = ~(1UL << 
	`ffz
(~
ovîœp
));

237 
mask
 &
˛ór_mask
;

238 
ovîœp
 &
˛ór_mask
;

239 
ƒ_bôs
--;

242 
	`as£π
(
mask
);

243 
	`as£π
(!(
Æ
->
m≠
[
off£t
] & 
mask
));

245 
Æ
->
m≠
[
off£t
] |
mask
;

247 i‡(!
Æ
->
Àvñ
)

248 
d©a
->
£t_bôs
 = 
ƒ_bôs
;

250 
d©a
->
ƒ_bôs
 = 1;

251  
Æ
->
m≠
[
off£t
] != -1UL;

252 
	}
}

254 
	$__axm≠_£t
(
axm≠
 *axm≠, 
uöt64_t
 
bô_ƒ
,

255 
axm≠_£t_d©a
 *
d©a
)

257 
£t_bôs
, 
ƒ_bôs
 = 
d©a
->nr_bits;

259 i‡(
axm≠
->
fú°_‰ì
 >
bô_ƒ
 &&

260 
axm≠
->
fú°_‰ì
 < 
bô_ƒ
 + 
d©a
->
ƒ_bôs
)

261 
axm≠
->
fú°_‰ì
 = -1ULL;

263 i‡(
bô_ƒ
 > 
axm≠
->
ƒ_bôs
)

265 i‡(
bô_ƒ
 + 
ƒ_bôs
 > 
axm≠
->nr_bits)

266 
ƒ_bôs
 = 
axm≠
->ƒ_bô†- 
bô_ƒ
;

268 
£t_bôs
 = 0;

269 
ƒ_bôs
) {

270 
	`axm≠_h™dÀr
(
axm≠
, 
bô_ƒ
, 
axm≠_£t_‚
, 
d©a
);

271 
£t_bôs
 +
d©a
->set_bits;

273 i‡(!
d©a
->
£t_bôs
 ||

274 
d©a
->
£t_bôs
 !(
BLOCKS_PER_UNIT
 - 
ƒ_bôs
))

277 
ƒ_bôs
 -
d©a
->
£t_bôs
;

278 
bô_ƒ
 +
d©a
->
£t_bôs
;

280 
d©a
->
ƒ_bôs
 =Çr_bits;

283 
d©a
->
£t_bôs
 = set_bits;

284 
	}
}

286 
	$axm≠_£t
(
axm≠
 *axm≠, 
uöt64_t
 
bô_ƒ
)

288 
axm≠_£t_d©a
 
d©a
 = { .
ƒ_bôs
 = 1, };

290 
	`__axm≠_£t
(
axm≠
, 
bô_ƒ
, &
d©a
);

291 
	}
}

293 
	$axm≠_£t_ƒ
(
axm≠
 *axm≠, 
uöt64_t
 
bô_ƒ
, 
ƒ_bôs
)

295 
£t_bôs
 = 0;

298 
axm≠_£t_d©a
 
d©a
 = { .
ƒ_bôs
 =Çr_bits, };

299 
max_bôs
, 
this_£t
;

301 
max_bôs
 = 
BLOCKS_PER_UNIT
 - (
bô_ƒ
 & 
BLOCKS_PER_UNIT_MASK
);

302 i‡(
max_bôs
 < 
ƒ_bôs
)

303 
d©a
.
ƒ_bôs
 = 
max_bôs
;

305 
this_£t
 = 
d©a
.
ƒ_bôs
;

306 
	`__axm≠_£t
(
axm≠
, 
bô_ƒ
, &
d©a
);

307 
£t_bôs
 +
d©a
.set_bits;

308 i‡(
d©a
.
£t_bôs
 !
this_£t
)

311 
ƒ_bôs
 -
d©a
.
£t_bôs
;

312 
bô_ƒ
 +
d©a
.
£t_bôs
;

313 } 
ƒ_bôs
);

315  
£t_bôs
;

316 
	}
}

318 
	$axm≠_is£t_‚
(
axm≠_Àvñ
 *
Æ
, 
off£t
,

319 
bô
, *
unu£d
)

321  (
Æ
->
m≠
[
off£t
] & (1UL << 
bô
)) != 0;

322 
	}
}

324 
	$axm≠_is£t
(
axm≠
 *axm≠, 
uöt64_t
 
bô_ƒ
)

326 i‡(
bô_ƒ
 <
axm≠
->
ƒ_bôs
)

327  
	`axm≠_h™dÀr_t›down
(
axm≠
, 
bô_ƒ
, 
axm≠_is£t_‚
, 
NULL
);

330 
	}
}

332 
uöt64_t
 
	$axm≠_föd_fú°_‰ì
(
axm≠
 *axm≠, 
Àvñ
,

333 
uöt64_t
 
ödex
)

335 
uöt64_t
 
ªt
 = -1ULL;

336 
j
;

337 
i
;

342 
i
 = 
Àvñ
; i >= 0; i--) {

343 
axm≠_Àvñ
 *
Æ
 = &
axm≠
->
Àvñs
[
i
];

348 i‡(
ödex
 >
Æ
->
m≠_size
) {

349 
ªt
 = -1ULL;

353 
j
 = 
ödex
; j < 
Æ
->
m≠_size
; j++) {

354 i‡(
Æ
->
m≠
[
j
] == -1UL)

361 
ªt
 = 
ödex
 = (
j
 << 
UNIT_SHIFT
Ë+ 
	`ffz
(
Æ
->
m≠
[j]);

366 i‡(
ªt
 < 
axm≠
->
ƒ_bôs
)

367  
ªt
;

369  (
uöt64_t
) -1ULL;

370 
	}
}

372 
uöt64_t
 
	$axm≠_fú°_‰ì
(
axm≠
 *axmap)

374 i‡(
	`fú°‰ì_vÆid
(
axm≠
))

375  
axm≠
->
fú°_‰ì
;

377 
axm≠
->
fú°_‰ì
 = 
	`axm≠_föd_fú°_‰ì
◊xm≠,áxm≠->
ƒ_Àvñs
 - 1, 0);

378  
axm≠
->
fú°_‰ì
;

379 
	}
}

381 
	saxm≠_√xt_‰ì_d©a
 {

382 
	mÀvñ
;

383 
	moff£t
;

384 
uöt64_t
 
	mbô
;

387 
	$axm≠_√xt_‰ì_‚
(
axm≠_Àvñ
 *
Æ
, 
off£t
,

388 
bô
, *
__d©a
)

390 
axm≠_√xt_‰ì_d©a
 *
d©a
 = 
__d©a
;

391 
uöt64_t
 
mask
 = ~
bô_masks
[(
d©a
->
bô
 + 1Ë& 
BLOCKS_PER_UNIT_MASK
];

393 i‡(!(
mask
 & ~
Æ
->
m≠
[
off£t
]))

396 i‡(
Æ
->
m≠
[
off£t
] != -1UL) {

397 
d©a
->
Àvñ
 = 
Æ
->level;

398 
d©a
->
off£t
 = offset;

402 
d©a
->
bô
 = (d©a->bô + 
BLOCKS_PER_UNIT
 - 1) / BLOCKS_PER_UNIT;

404 
	}
}

409 
uöt64_t
 
	$axm≠_√xt_‰ì
(
axm≠
 *axm≠, 
uöt64_t
 
bô_ƒ
)

411 
axm≠_√xt_‰ì_d©a
 
d©a
 = { .
Àvñ
 = -1U, .
bô
 = 
bô_ƒ
, };

412 
uöt64_t
 
ªt
;

414 i‡(
	`fú°‰ì_vÆid
(
axm≠
Ë&& 
bô_ƒ
 <áxm≠->
fú°_‰ì
)

415  
axm≠
->
fú°_‰ì
;

417 i‡(!
	`axm≠_h™dÀr
(
axm≠
, 
bô_ƒ
, 
axm≠_√xt_‰ì_‚
, &
d©a
))

418  
	`axm≠_fú°_‰ì
(
axm≠
);

420 
	`as£π
(
d©a
.
Àvñ
 != -1U);

427 
ªt
 = 
	`axm≠_föd_fú°_‰ì
(
axm≠
, 
d©a
.
Àvñ
, d©a.
off£t
);

428 i‡(
ªt
 != -1ULL)

429  
ªt
;

431  
	`axm≠_fú°_‰ì
(
axm≠
);

432 
	}
}

	@/home/terekhov/tmp/fio/fio/lib/axmap.h

1 #i‚de‡
FIO_BITMAP_H


2 
	#FIO_BITMAP_H


	)

4 
	~<öây≥s.h
>

6 
	gaxm≠
;

7 
axm≠
 *
axm≠_√w
(
ƒ_bôs
);

8 
axm≠_‰ì
(
axm≠
 *
bm
);

10 
axm≠_˛ór
(
axm≠
 *axm≠, 
uöt64_t
 
bô_ƒ
);

11 
axm≠_£t
(
axm≠
 *axm≠, 
uöt64_t
 
bô_ƒ
);

12 
axm≠_£t_ƒ
(
axm≠
 *axm≠, 
uöt64_t
 
bô_ƒ
, 
ƒ_bôs
);

13 
axm≠_is£t
(
axm≠
 *axm≠, 
uöt64_t
 
bô_ƒ
);

14 
uöt64_t
 
axm≠_fú°_‰ì
(
axm≠
 *axmap);

15 
uöt64_t
 
axm≠_√xt_‰ì
(
axm≠
 *axm≠, uöt64_à
bô_ƒ
);

16 
axm≠_ª£t
(
axm≠
 *axmap);

	@/home/terekhov/tmp/fio/fio/lib/bswap.h

1 #i‚de‡
FIO_BSWAP_H


2 
	#FIO_BSWAP_H


	)

4 
	~<öây≥s.h
>

6 #ifde‡
CONFIG_LITTLE_ENDIAN


7 
ölöe
 
uöt32_t
 
	$__be32_to_˝u
(
uöt32_t
 
vÆ
)

9 
uöt32_t
 
c1
, 
c2
, 
c3
, 
c4
;

11 
c1
 = (
vÆ
 >> 24) & 0xff;

12 
c2
 = (
vÆ
 >> 16) & 0xff;

13 
c3
 = (
vÆ
 >> 8) & 0xff;

14 
c4
 = 
vÆ
 & 0xff;

16  
c1
 | 
c2
 << 8 | 
c3
 << 16 | 
c4
 << 24;

17 
	}
}

19 
ölöe
 
uöt64_t
 
	$__be64_to_˝u
(
uöt64_t
 
vÆ
)

21 
uöt64_t
 
c1
, 
c2
, 
c3
, 
c4
, 
c5
, 
c6
, 
c7
, 
c8
;

23 
c1
 = (
vÆ
 >> 56) & 0xff;

24 
c2
 = (
vÆ
 >> 48) & 0xff;

25 
c3
 = (
vÆ
 >> 40) & 0xff;

26 
c4
 = (
vÆ
 >> 32) & 0xff;

27 
c5
 = (
vÆ
 >> 24) & 0xff;

28 
c6
 = (
vÆ
 >> 16) & 0xff;

29 
c7
 = (
vÆ
 >> 8) & 0xff;

30 
c8
 = 
vÆ
 & 0xff;

32  
c1
 | 
c2
 << 8 | 
c3
 << 16 | 
c4
 << 24 | 
c5
 << 32 | 
c6
 << 40 | 
c7
 << 48 | 
c8
 << 56;

33 
	}
}

35 
ölöe
 
uöt64_t
 
	$__be64_to_˝u
(
uöt64_t
 
vÆ
)

37  
vÆ
;

38 
	}
}

40 
ölöe
 
uöt32_t
 
	$__be32_to_˝u
(
uöt32_t
 
vÆ
)

42  
vÆ
;

43 
	}
}

	@/home/terekhov/tmp/fio/fio/lib/ffz.h

1 #i‚de‡
FIO_FFZ_H


2 
	#FIO_FFZ_H


	)

4 
ölöe
 
	$__ffs
(
w‹d
)

6 
r
 = 0;

8 #i‡
BITS_PER_LONG
 == 64

9 i‡((
w‹d
 & 0xffffffff) == 0) {

10 
r
 += 32;

11 
w‹d
 >>= 32;

14 i‡(!(
w‹d
 & 0xffff)) {

15 
w‹d
 >>= 16;

16 
r
 += 16;

18 i‡(!(
w‹d
 & 0xff)) {

19 
w‹d
 >>= 8;

20 
r
 += 8;

22 i‡(!(
w‹d
 & 0xf)) {

23 
w‹d
 >>= 4;

24 
r
 += 4;

26 i‡(!(
w‹d
 & 3)) {

27 
w‹d
 >>= 2;

28 
r
 += 2;

30 i‡(!(
w‹d
 & 1)) {

31 
w‹d
 >>= 1;

32 
r
 += 1;

35  
r
;

36 
	}
}

38 
ölöe
 
	$ffz
(
bômask
)

40  
	`__ffs
(~
bômask
);

41 
	}
}

	@/home/terekhov/tmp/fio/fio/lib/flist_sort.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~"../Êi°.h
"

4 
	~"../log.h
"

6 
	#MAX_LIST_LENGTH_BITS
 20

	)

13 
Êi°_hód
 *
mîge
(*
¥iv
,

14 (*
cmp
)(*
¥iv
, 
Êi°_hód
 *
a
,

15 
Êi°_hód
 *
b
),

16 
Êi°_hód
 *
a
, Êi°_hód *
b
)

18 
Êi°_hód
 
hód
, *
èû
 = &head;

20 
a
 && 
b
) {

22 i‡((*
cmp
)(
¥iv
, 
a
, 
b
) <= 0) {

23 
èû
->
√xt
 = 
a
;

24 
a
 =á->
√xt
;

26 
èû
->
√xt
 = 
b
;

27 
b
 = b->
√xt
;

29 
èû
 =Åaû->
√xt
;

31 
èû
->
√xt
 = 
a
?:
b
;

32  
hód
.
√xt
;

33 
	}
}

42 
mîge_™d_ª°‹e_back_löks
(*
¥iv
,

43 (*
cmp
)(*
¥iv
, 
Êi°_hód
 *
a
,

44 
Êi°_hód
 *
b
),

45 
Êi°_hód
 *
hód
,

46 
Êi°_hód
 *
a
, Êi°_hód *
b
)

48 
Êi°_hód
 *
èû
 = 
hód
;

50 
a
 && 
b
) {

52 i‡((*
cmp
)(
¥iv
, 
a
, 
b
) <= 0) {

53 
èû
->
√xt
 = 
a
;

54 
a
->
¥ev
 = 
èû
;

55 
a
 =á->
√xt
;

57 
èû
->
√xt
 = 
b
;

58 
b
->
¥ev
 = 
èû
;

59 
b
 = b->
√xt
;

61 
èû
 =Åaû->
√xt
;

63 
èû
->
√xt
 = 
a
 ? : 
b
;

72 (*
cmp
)(
¥iv
, 
èû
->
√xt
,Åail->next);

74 
èû
->
√xt
->
¥ev
 =Åail;

75 
èû
 =Åaû->
√xt
;

76 } 
èû
->
√xt
);

78 
èû
->
√xt
 = 
hód
;

79 
hód
->
¥ev
 = 
èû
;

80 
	}
}

96 
Êi°_s‹t
(*
¥iv
, 
Êi°_hód
 *
hód
,

97 (*
cmp
)(*
¥iv
, 
Êi°_hód
 *
a
,

98 
Êi°_hód
 *
b
))

100 
Êi°_hód
 *
∑π
[
MAX_LIST_LENGTH_BITS
+1];

102 
Àv
;

103 
max_Àv
 = 0;

104 
Êi°_hód
 *
li°
;

106 i‡(
	`Êi°_em±y
(
hód
))

109 
	`mem£t
(
∑π
, 0, (part));

111 
hód
->
¥ev
->
√xt
 = 
NULL
;

112 
li°
 = 
hód
->
√xt
;

114 
li°
) {

115 
Êi°_hód
 *
cur
 = 
li°
;

116 
li°
 =Üi°->
√xt
;

117 
cur
->
√xt
 = 
NULL
;

119 
Àv
 = 0; 
∑π
[lev];Üev++) {

120 
cur
 = 
	`mîge
(
¥iv
, 
cmp
, 
∑π
[
Àv
], cur);

121 
∑π
[
Àv
] = 
NULL
;

123 i‡(
Àv
 > 
max_Àv
) {

124 i‡(
Àv
 >
MAX_LIST_LENGTH_BITS
) {

125 
	`log_îr
("fio:ÜistÖassedÅo"

128 
Àv
--;

130 
max_Àv
 = 
Àv
;

132 
∑π
[
Àv
] = 
cur
;

135 
Àv
 = 0;Üev < 
max_Àv
;Üev++)

136 i‡(
∑π
[
Àv
])

137 
li°
 = 
	`mîge
(
¥iv
, 
cmp
, 
∑π
[
Àv
],Üist);

139 
	`mîge_™d_ª°‹e_back_löks
(
¥iv
, 
cmp
, 
hód
, 
∑π
[
max_Àv
], 
li°
);

140 
	}
}

	@/home/terekhov/tmp/fio/fio/lib/fls.h

1 #i‚de‡
_ASM_GENERIC_BITOPS_FLS_H_


2 
	#_ASM_GENERIC_BITOPS_FLS_H_


	)

12 
ölöe
 
	$__Ês
(
x
)

14 
r
 = 32;

16 i‡(!
x
)

18 i‡(!(
x
 & 0xffff0000u)) {

19 
x
 <<= 16;

20 
r
 -= 16;

22 i‡(!(
x
 & 0xff000000u)) {

23 
x
 <<= 8;

24 
r
 -= 8;

26 i‡(!(
x
 & 0xf0000000u)) {

27 
x
 <<= 4;

28 
r
 -= 4;

30 i‡(!(
x
 & 0xc0000000u)) {

31 
x
 <<= 2;

32 
r
 -= 2;

34 i‡(!(
x
 & 0x80000000u)) {

35 
x
 <<= 1;

36 
r
 -= 1;

38  
r
;

39 
	}
}

	@/home/terekhov/tmp/fio/fio/lib/getopt.h

1 #ifde‡
CONFIG_GETOPT_LONG_ONLY


3 
	~<gë›t.h
>

7 #i‚de‡
_GETOPT_H


8 
	#_GETOPT_H


	)

10 
	s›ti⁄
 {

11 c⁄° *
	m«me
;

12 
	mhas_¨g
;

13 *
	mÊag
;

14 
	mvÆ
;

18 
	mno_¨gumít
 = 0,

19 
	mªquúed_¨gumít
 = 1,

20 
	m›ti⁄Æ_¨gumít
 = 2,

23 
gë›t_l⁄g_⁄ly
(, *c⁄° *, c⁄° *, c⁄° 
›ti⁄
 *, *);

	@/home/terekhov/tmp/fio/fio/lib/getopt_long.c

13 
	~<°döt.h
>

14 
	~<uni°d.h
>

15 
	~<°rög.h
>

17 
	~"gë›t.h
"

19 *
	g›èrg
 = 
NULL
;

20 
	g›töd
 = 0, 
	g›ãº
 = 0, 
	g›t›t
 = 0;

22 
	sgë›t_¥iv©e_°©e
 {

23 c⁄° *
	m›çå
;

24 c⁄° *
	mœ°_›t°rög
;

25 *c⁄° *
	mœ°_¨gv
;

26 } 
	gpvt
;

28 
ölöe
 c⁄° *
	$›ti⁄_m©ches
(c⁄° *
¨g_°r
,

29 c⁄° *
›t_«me
)

31 *
¨g_°r
 != '\0' && *arg_str != '=') {

32 i‡(*
¨g_°r
++ !*
›t_«me
++)

33  
NULL
;

36 i‡(*
›t_«me
)

37  
NULL
;

39  
¨g_°r
;

40 
	}
}

42 
	$gë›t_l⁄g_⁄ly
(
¨gc
, *c⁄° *
¨gv
, c⁄° *
›t°rög
,

43 c⁄° 
›ti⁄
 *
l⁄g›ts
, *
l⁄gödex
)

45 c⁄° *
ˇrg
;

46 c⁄° *
o•å
;

47 
›t
;

49 
›èrg
 = 
NULL
;

58 i‡(
›t°rög
 !
pvt
.
œ°_›t°rög
 || 
¨gv
 !pvt.
œ°_¨gv
 ||

59 
›töd
 < 1 || o±öd > 
¨gc
) {

61 
pvt
.
œ°_›t°rög
 = 
›t°rög
;

62 
pvt
.
œ°_¨gv
 = 
¨gv
;

63 
›töd
 = 1;

64 
pvt
.
›çå
 = 
NULL
;

67 
ˇrg
 = 
¨gv
[
›töd
];

71 i‡(!
ˇrg
 || carg[0] != '-' || !carg[1])

74 i‡(
ˇrg
[1] == '-') {

75 c⁄° 
›ti⁄
 *
lo
;

76 c⁄° *
›t_íd
 = 
NULL
;

78 
›töd
++;

81 i‡(!
ˇrg
[2]) {

86 
lo
 = 
l⁄g›ts
;Üo->
«me
;Üo++) {

87 i‡((
›t_íd
 = 
	`›ti⁄_m©ches
(
ˇrg
+2, 
lo
->
«me
)))

90 i‡(!
›t_íd
)

93 i‡(
l⁄gödex
)

94 *
l⁄gödex
 = 
lo
-
l⁄g›ts
;

96 i‡(*
›t_íd
 == '=') {

97 i‡(
lo
->
has_¨g
)

98 
›èrg
 = (*)
›t_íd
+1;

101 } i‡(
lo
->
has_¨g
 == 1) {

102 i‡(!(
›èrg
 = 
¨gv
[
›töd
]))

104 
›töd
++;

107 i‡(
lo
->
Êag
) {

108 *
lo
->
Êag
 =Üo->
vÆ
;

111  
lo
->
vÆ
;

115 i‡((
uöçå_t
Ë(
pvt
.
›çå
 - 
ˇrg
Ë> (uöçå_tË
	`°æí
(carg)) {

117 
pvt
.
›çå
 = 
ˇrg
 + 1;

120 
›t
 = *
pvt
.
›çå
++;

122 i‡(
›t
 !':' && (
o•å
 = 
	`°rchr
(
›t°rög
, opt))) {

123 i‡(
o•å
[1] == ':') {

124 i‡(*
pvt
.
›çå
) {

127 
›èrg
 = (*)
pvt
.
›çå
;

128 
›töd
++;

132 i‡(
o•å
[2] == ':') {

133 i‡(
¨gv
[
›töd
 + 1]) {

134 
›èrg
 = (*)
¨gv
[
›töd
+1];

135 
›töd
 += 2;

137 
›èrg
 = 
NULL
;

138 
›töd
++;

140  
›t
;

141 } i‡(
¨gv
[
›töd
 + 1]) {

142 
›èrg
 = (*)
¨gv
[
›töd
+1];

143 
›töd
 += 2;

146 
›töd
++;

147  (
›t°rög
[0] == ':')

151  
›t
;

156 i‡(!*
pvt
.
›çå
)

157 
›töd
++;

158  
›t
;

162 
›t›t
 = 
›t
;

163 i‡(!*
pvt
.
›çå
)

164 
›töd
++;

167 
	}
}

	@/home/terekhov/tmp/fio/fio/lib/getrusage.c

1 
	~<î∫o.h
>

2 
	~"gërußge.h
"

4 
	$fio_gërußge
(
rußge
 *
ru
)

6 #ifde‡
CONFIG_RUSAGE_THREAD


7 i‡(!
	`gërußge
(
RUSAGE_THREAD
, 
ru
))

9 i‡(
î∫o
 !
EINVAL
)

13  
	`gërußge
(
RUSAGE_SELF
, 
ru
);

14 
	}
}

	@/home/terekhov/tmp/fio/fio/lib/getrusage.h

1 #i‚de‡
FIO_GETRUSAGE_H


2 
	#FIO_GETRUSAGE_H


	)

4 
	~<sys/time.h
>

5 
	~<sys/ªsour˚.h
>

7 
fio_gërußge
(
rußge
 *
ru
);

	@/home/terekhov/tmp/fio/fio/lib/hweight.c

1 
	~"hweight.h
"

3 
	$hweight8
(
uöt8_t
 
w
)

5 
ªs
 = 
w
 - ((w >> 1) & 0x55);

7 
ªs
 = (res & 0x33) + ((res >> 2) & 0x33);

8  (
ªs
 + (res >> 4)) & 0x0F;

9 
	}
}

11 
	$hweight32
(
uöt32_t
 
w
)

13 
ªs
 = 
w
 - ((w >> 1) & 0x55555555);

15 
ªs
 = (res & 0x33333333) + ((res >> 2) & 0x33333333);

16 
ªs
 = (res + (res >> 4)) & 0x0F0F0F0F;

17 
ªs
 =Ñes + (res >> 8);

18  (
ªs
 + (res >> 16)) & 0x000000FF;

19 
	}
}

21 
	$hweight64
(
uöt64_t
 
w
)

23 #i‡
BITS_PER_LONG
 == 32

24  
	`hweight32
(()(
w
 >> 32)) + hweight32(()w);

26 
uöt64_t
 
ªs
 = 
w
 - ((w >> 1) & 0x5555555555555555ULL);

27 
ªs
 = (res & 0x3333333333333333ULL) + ((res >> 2) & 0x3333333333333333ULL);

28 
ªs
 = (res + (res >> 4)) & 0x0F0F0F0F0F0F0F0FULL;

29 
ªs
 =Ñes + (res >> 8);

30 
ªs
 =Ñes + (res >> 16);

31  (
ªs
 + (res >> 32)) & 0x00000000000000FFULL;

33 
	}
}

	@/home/terekhov/tmp/fio/fio/lib/hweight.h

1 #i‚de‡
FIO_HWEIGHT_H


2 
	#FIO_HWEIGHT_H


	)

4 
	~<öây≥s.h
>

6 
hweight8
(
uöt8_t
 
w
);

7 
hweight32
(
uöt32_t
 
w
);

8 
hweight64
(
uöt64_t
 
w
);

	@/home/terekhov/tmp/fio/fio/lib/ieee754.c

8 
	~<öây≥s.h
>

9 
	~"õì754.h
"

11 
uöt64_t
 
	$∑ck754
(
f
, 
bôs
, 
expbôs
)

13 
‚‹m
;

14 
shi·
;

15 
sign
, 
exp
, 
signifiˇnd
;

16 
signifiˇndbôs
 = 
bôs
 - 
expbôs
 - 1;

19 i‡(
f
 == 0.0)

23 i‡(
f
 < 0) {

24 
sign
 = 1;

25 
‚‹m
 = -
f
;

27 
sign
 = 0;

28 
‚‹m
 = 
f
;

32 
shi·
 = 0;

33 
‚‹m
 >= 2.0) {

34 
‚‹m
 /= 2.0;

35 
shi·
++;

37 
‚‹m
 < 1.0) {

38 
‚‹m
 *= 2.0;

39 
shi·
--;

41 
‚‹m
 = fnorm - 1.0;

44 
signifiˇnd
 = 
‚‹m
 * ((1LL << 
signifiˇndbôs
) + 0.5f);

47 
exp
 = 
shi·
 + ((1 << (
expbôs
 - 1)) - 1);

50  (
sign
 << (
bôs
 - 1)Ë| (
exp
 << (bôs-
expbôs
 - 1)Ë| 
signifiˇnd
;

51 
	}
}

53 
	$u≈ack754
(
uöt64_t
 
i
, 
bôs
, 
expbôs
)

55 
ªsu…
;

56 
shi·
;

57 
büs
;

58 
signifiˇndbôs
 = 
bôs
 - 
expbôs
 - 1;

60 i‡(
i
 == 0)

64 
ªsu…
 = (
i
 & ((1LL << 
signifiˇndbôs
) - 1));

65 
ªsu…
 /(1LL << 
signifiˇndbôs
);

66 
ªsu…
 += 1.0f;

69 
büs
 = (1 << (
expbôs
 - 1)) - 1;

70 
shi·
 = ((
i
 >> 
signifiˇndbôs
Ë& ((1LL << 
expbôs
Ë- 1)Ë- 
büs
;

71 
shi·
 > 0) {

72 
ªsu…
 *= 2.0;

73 
shi·
--;

75 
shi·
 < 0) {

76 
ªsu…
 /= 2.0;

77 
shi·
++;

81 
ªsu…
 *(
i
 >> (
bôs
 - 1)) & 1 ? -1.0 : 1.0;

83  
ªsu…
;

84 
	}
}

	@/home/terekhov/tmp/fio/fio/lib/ieee754.h

1 #i‚de‡
FIO_IEEE754_H


2 
	#FIO_IEEE754_H


	)

4 
	~<öây≥s.h
>

6 
uöt64_t
 
∑ck754
(
f
, 
bôs
, 
expbôs
);

7 
u≈ack754
(
uöt64_t
 
i
, 
bôs
, 
expbôs
);

9 
	#fio_doubÀ_to_uöt64
(
vÆ
Ë
	`∑ck754
((vÆ), 64, 11)

	)

10 
	#fio_uöt64_to_doubÀ
(
vÆ
Ë
	`u≈ack754
((vÆ), 64, 11)

	)

12 
	sfio_Â64
 {

14 
uöt64_t
 
	mi
;

15 
	mf
;

16 
uöt8_t
 
	mfûÀr
[16];

17 } 
	mu
;

18 } 
	tfio_Â64_t
;

	@/home/terekhov/tmp/fio/fio/lib/inet_aton.c

1 
	~"öë_©⁄.h
"

3 
	$öë_©⁄
(c⁄° *
˝
, 
ö_addr
 *
öp
)

5  
	`öë_±⁄
(
AF_INET
, 
˝
, 
öp
);

6 
	}
}

	@/home/terekhov/tmp/fio/fio/lib/inet_aton.h

1 #i‚de‡
FIO_INET_ATON_LIB_H


2 
	#FIO_INET_ATON_LIB_H


	)

4 
	~<¨∑/öë.h
>

6 
öë_©⁄
(c⁄° *
˝
, 
ö_addr
 *
öp
);

	@/home/terekhov/tmp/fio/fio/lib/lfsr.c

1 
	~<°dio.h
>

2 
	~<m©h.h
>

4 
	~"lf§.h
"

5 
	~"../compûî/compûî.h
"

14 
uöt8_t
 
	gèps
[64][
FIO_MAX_TAPS
] =

80 
	#__LFSR_NEXT
(
__Ê
, 
__v
) \

81 
__v
 = ((__v >> 1Ë| 
__Ê
->
ˇched_bô
) ^ \

82 (((
__v
 & 1ULË- 1ULË& 
__Ê
->
x‹mask
);

	)

84 
ölöe
 
	$__lf§_√xt
(
fio_lf§
 *
Ê
, 
•ö
)

90 
•ö
) {

91 15: 
	`__LFSR_NEXT
(
Ê
, fl->
œ°_vÆ
);

92 14: 
	`__LFSR_NEXT
(
Ê
, fl->
œ°_vÆ
);

93 13: 
	`__LFSR_NEXT
(
Ê
, fl->
œ°_vÆ
);

94 12: 
	`__LFSR_NEXT
(
Ê
, fl->
œ°_vÆ
);

95 11: 
	`__LFSR_NEXT
(
Ê
, fl->
œ°_vÆ
);

96 10: 
	`__LFSR_NEXT
(
Ê
, fl->
œ°_vÆ
);

97 9: 
	`__LFSR_NEXT
(
Ê
, fl->
œ°_vÆ
);

98 8: 
	`__LFSR_NEXT
(
Ê
, fl->
œ°_vÆ
);

99 7: 
	`__LFSR_NEXT
(
Ê
, fl->
œ°_vÆ
);

100 6: 
	`__LFSR_NEXT
(
Ê
, fl->
œ°_vÆ
);

101 5: 
	`__LFSR_NEXT
(
Ê
, fl->
œ°_vÆ
);

102 4: 
	`__LFSR_NEXT
(
Ê
, fl->
œ°_vÆ
);

103 3: 
	`__LFSR_NEXT
(
Ê
, fl->
œ°_vÆ
);

104 2: 
	`__LFSR_NEXT
(
Ê
, fl->
œ°_vÆ
);

105 1: 
	`__LFSR_NEXT
(
Ê
, fl->
œ°_vÆ
);

106 0: 
	`__LFSR_NEXT
(
Ê
, fl->
œ°_vÆ
);

109 
	}
}

127 
	$lf§_√xt
(
fio_lf§
 *
Ê
, 
uöt64_t
 *
off
, uöt64_à
œ°
)

129 i‡(
Ê
->
num_vÆs
++ > fl->
max_vÆ
)

133 i‡(
Ê
->
cy˛e_Àngth
 && !--fl->cycle_length) {

134 
	`__lf§_√xt
(
Ê
, fl->
•ö
 + 1);

135 
Ê
->
cy˛e_Àngth
 = fl->
ˇched_cy˛e_Àngth
;

137 
	`__lf§_√xt
(
Ê
, fl->
•ö
);

138 } 
	`fio_u∆ikñy
(
Ê
->
œ°_vÆ
 > fl->
max_vÆ
));

140 *
off
 = 
Ê
->
œ°_vÆ
;

142 
	}
}

144 
uöt64_t
 
	$lf§_¸óã_x‹mask
(
uöt8_t
 *
èps
)

146 
i
;

147 
uöt64_t
 
x‹mask
 = 0;

149 
i
 = 0; i < 
FIO_MAX_TAPS
 && 
èps
[i] != 0; i++)

150 
x‹mask
 |1UL << (
èps
[
i
] - 1);

152  
x‹mask
;

153 
	}
}

155 
uöt8_t
 *
	$föd_lf§
(
uöt64_t
 
size
)

157 
i
;

164 
i
 = 3; i < 64; i++)

165 i‡((1UL << 
i
Ë> 
size
)

166  
èps
[
i
];

168  
NULL
;

169 
	}
}

189 
	$¥ï¨e_•ö
(
fio_lf§
 *
Ê
, 
•ö
)

191 
uöt64_t
 
max
 = (
Ê
->
ˇched_bô
 << 1) - 1;

192 
uöt64_t
 
x
, 
y
;

193 
i
;

195 i‡(
•ö
 > 15)

198 
x
 = 
max
 / (
•ö
 + 1);

199 
y
 = 
max
 % (
•ö
 + 1);

200 
Ê
->
cy˛e_Àngth
 = 0;

201 
Ê
->
•ö
 = spin;

203 
i
 = 1; i <
•ö
; i++) {

204 i‡((
y
 * 
i
Ë% (
•ö
 + 1) == 0) {

205 
Ê
->
cy˛e_Àngth
 = (
x
 * 
i
Ë+ (
y
 * iË/ (
•ö
 + 1);

209 
Ê
->
ˇched_cy˛e_Àngth
 = fl->
cy˛e_Àngth
;

215 
Ê
->
cy˛e_Àngth
++;

218 
	}
}

220 
	$lf§_ª£t
(
fio_lf§
 *
Ê
, 
£ed
)

222 
uöt64_t
 
bômask
 = (
Ê
->
ˇched_bô
 << 1) - 1;

224 
Ê
->
num_vÆs
 = 0;

225 
Ê
->
œ°_vÆ
 = 
£ed
 & 
bômask
;

228 i‡(
Ê
->
œ°_vÆ
 =
bômask
)

232 
	}
}

234 
	$lf§_öô
(
fio_lf§
 *
Ê
, 
uöt64_t
 
nums
, 
£ed
,

235 
•ö
)

237 
uöt8_t
 *
lf§_èps
;

239 
lf§_èps
 = 
	`föd_lf§
(
nums
);

240 i‡(!
lf§_èps
)

243 
Ê
->
max_vÆ
 = 
nums
 - 1;

244 
Ê
->
x‹mask
 = 
	`lf§_¸óã_x‹mask
(
lf§_èps
);

245 
Ê
->
ˇched_bô
 = 1UL << (
lf§_èps
[0] - 1);

247 i‡(
	`¥ï¨e_•ö
(
Ê
, 
•ö
))

250 i‡(
	`lf§_ª£t
(
Ê
, 
£ed
))

254 
	}
}

	@/home/terekhov/tmp/fio/fio/lib/lfsr.h

1 #i‚de‡
FIO_LFSR_H


2 
	#FIO_LFSR_H


	)

4 
	~<öây≥s.h
>

6 
	#FIO_MAX_TAPS
 6

	)

8 
	slf§_èps
 {

9 
	mÀngth
;

10 
	mèps
[
FIO_MAX_TAPS
];

14 
	sfio_lf§
 {

15 
uöt64_t
 
	mx‹mask
;

16 
uöt64_t
 
	mœ°_vÆ
;

17 
uöt64_t
 
	mˇched_bô
;

18 
uöt64_t
 
	mmax_vÆ
;

19 
uöt64_t
 
	mnum_vÆs
;

20 
uöt64_t
 
	mcy˛e_Àngth
;

21 
uöt64_t
 
	mˇched_cy˛e_Àngth
;

22 
	m•ö
;

25 
lf§_√xt
(
fio_lf§
 *
Ê
, 
uöt64_t
 *
off
, uint64_t);

26 
lf§_öô
(
fio_lf§
 *
Ê
, 
uöt64_t
 
size
,

27 
£ed
, 
•ö
);

28 
lf§_ª£t
(
fio_lf§
 *
Ê
, 
£ed
);

	@/home/terekhov/tmp/fio/fio/lib/num2str.c

1 
	~<°dlib.h
>

2 
	~<°dio.h
>

3 
	~<°rög.h
>

5 
	~"../fio.h
"

7 
	#ARRAY_LENGTH
(
¨r
Ë◊ºË/ (◊º)[0])

	)

12 *
	$num2°r
(
num
, 
maxÀn
, 
ba£
, 
pow2
, 
unô_ba£
)

14 c⁄° *
po°fix
[] = { "", "K", "M", "G", "P", "E" };

15 c⁄° *
byã_po°fix
[] = { "", "B", "bit" };

16 c⁄° 
thoußnd
[] = { 1000, 1024 };

17 
modulo
, 
decimÆs
;

18 
byã_po°_ödex
 = 0, 
po°_ödex
, 
ˇºy
 = 0;

19 
tmp
[32];

20 *
buf
;

22 
buf
 = 
	`mÆloc
(128);

24 
po°_ödex
 = 0; 
ba£
 > 1;Öost_index++)

25 
ba£
 /
thoußnd
[!!
pow2
];

27 
unô_ba£
) {

29 
byã_po°_ödex
 = 2;

30 
num
 *= 8;

33 
byã_po°_ödex
 = 1;

37 
modulo
 = -1U;

38 
po°_ödex
 < (
po°fix
)) {

39 
	`•rötf
(
tmp
, "%lu", 
num
);

40 i‡(
	`°æí
(
tmp
Ë<
maxÀn
)

43 
modulo
 = 
num
 % 
thoußnd
[!!
pow2
];

44 
num
 /
thoußnd
[!!
pow2
];

45 
ˇºy
 = 
modulo
 >
thoußnd
[!!
pow2
] / 2;

46 
po°_ödex
++;

49 i‡(
modulo
 == -1U) {

50 
d⁄e
:

51 i‡(
po°_ödex
 >
	`ARRAY_LENGTH
(
po°fix
))

52 
po°_ödex
 = 0;

54 
	`•rötf
(
buf
, "%lu%s%s", 
num
, 
po°fix
[
po°_ödex
],

55 
byã_po°fix
[
byã_po°_ödex
]);

56  
buf
;

59 
	`•rötf
(
tmp
, "%lu", 
num
);

60 
decimÆs
 = 
maxÀn
 - 
	`°æí
(
tmp
);

61 i‡(
decimÆs
 <= 1) {

62 i‡(
ˇºy
)

63 
num
++;

64 
d⁄e
;

68 
	`•rötf
(
tmp
, "%u", 
modulo
);

69 i‡(
	`°æí
(
tmp
Ë<
decimÆs
 - 1)

72 
modulo
 = (modulo + 9) / 10;

75 
	`•rötf
(
buf
, "%lu.%u%s%s", 
num
, 
modulo
, 
po°fix
[
po°_ödex
],

76 
byã_po°fix
[
byã_po°_ödex
]);

77  
buf
;

78 
	}
}

	@/home/terekhov/tmp/fio/fio/lib/prio_tree.c

14 
	~<°dlib.h
>

15 
	~<limôs.h
>

16 
	~"../fio.h
"

17 
	~"¥io_åì.h
"

43 
	$gë_ödex
(c⁄° 
¥io_åì_node
 *
node
,

44 *
ødix
, *
hóp
)

46 *
ødix
 = 
node
->
°¨t
;

47 *
hóp
 = 
node
->
œ°
;

48 
	}
}

50 
	gödex_bôs_to_maxödex
[
BITS_PER_LONG
];

52 
fio_öô
 
	$¥io_åì_öô
()

54 
i
;

56 
i
 = 0; i < 
	`ARRAY_SIZE
(
ödex_bôs_to_maxödex
) - 1; i++)

57 
ödex_bôs_to_maxödex
[
i
] = (1UL << (i + 1)) - 1;

58 
ödex_bôs_to_maxödex
[
	`ARRAY_SIZE
(index_bits_to_maxindex) - 1] = ~0UL;

59 
	}
}

64 
ölöe
 
	$¥io_åì_maxödex
(
bôs
)

66  
ödex_bôs_to_maxödex
[
bôs
 - 1];

67 
	}
}

75 
¥io_åì_node
 *
	$¥io_åì_ex∑nd
(
¥io_åì_roŸ
 *
roŸ
,

76 
¥io_åì_node
 *
node
, 
max_hóp_ödex
)

78 
¥io_åì_node
 *
fú°
 = 
NULL
, *
¥ev
, *
œ°
 = NULL;

80 i‡(
max_hóp_ödex
 > 
	`¥io_åì_maxödex
(
roŸ
->
ödex_bôs
))

81 
roŸ
->
ödex_bôs
++;

83 
max_hóp_ödex
 > 
	`¥io_åì_maxödex
(
roŸ
->
ödex_bôs
)) {

84 
roŸ
->
ödex_bôs
++;

86 i‡(
	`¥io_åì_em±y
(
roŸ
))

89 i‡(
fú°
 =
NULL
) {

90 
fú°
 = 
roŸ
->
¥io_åì_node
;

91 
	`¥io_åì_ªmove
(
roŸ
,ÑoŸ->
¥io_åì_node
);

92 
	`INIT_PRIO_TREE_NODE
(
fú°
);

93 
œ°
 = 
fú°
;

95 
¥ev
 = 
œ°
;

96 
œ°
 = 
roŸ
->
¥io_åì_node
;

97 
	`¥io_åì_ªmove
(
roŸ
,ÑoŸ->
¥io_åì_node
);

98 
	`INIT_PRIO_TREE_NODE
(
œ°
);

99 
¥ev
->
À·
 = 
œ°
;

100 
œ°
->
∑ª¡
 = 
¥ev
;

104 
	`INIT_PRIO_TREE_NODE
(
node
);

106 i‡(
fú°
) {

107 
node
->
À·
 = 
fú°
;

108 
fú°
->
∑ª¡
 = 
node
;

110 
œ°
 = 
node
;

112 i‡(!
	`¥io_åì_em±y
(
roŸ
)) {

113 
œ°
->
À·
 = 
roŸ
->
¥io_åì_node
;

114 
œ°
->
À·
->
∑ª¡
 =Üast;

117 
roŸ
->
¥io_åì_node
 = 
node
;

118  
node
;

119 
	}
}

124 
¥io_åì_node
 *
	$¥io_åì_ª∂a˚
(
¥io_åì_roŸ
 *
roŸ
,

125 
¥io_åì_node
 *
ﬁd
, ¥io_åì_nodê*
node
)

127 
	`INIT_PRIO_TREE_NODE
(
node
);

129 i‡(
	`¥io_åì_roŸ
(
ﬁd
)) {

130 
	`as£π
(
roŸ
->
¥io_åì_node
 =
ﬁd
);

135 
node
->
∑ª¡
 =Çode;

136 
roŸ
->
¥io_åì_node
 = 
node
;

138 
node
->
∑ª¡
 = 
ﬁd
->parent;

139 i‡(
ﬁd
->
∑ª¡
->
À·
 == old)

140 
ﬁd
->
∑ª¡
->
À·
 = 
node
;

142 
ﬁd
->
∑ª¡
->
right
 = 
node
;

145 i‡(!
	`¥io_åì_À·_em±y
(
ﬁd
)) {

146 
node
->
À·
 = 
ﬁd
->left;

147 
ﬁd
->
À·
->
∑ª¡
 = 
node
;

150 i‡(!
	`¥io_åì_right_em±y
(
ﬁd
)) {

151 
node
->
right
 = 
ﬁd
->right;

152 
ﬁd
->
right
->
∑ª¡
 = 
node
;

155  
ﬁd
;

156 
	}
}

168 
¥io_åì_node
 *
	$¥io_åì_ö£π
(
¥io_åì_roŸ
 *
roŸ
,

169 
¥io_åì_node
 *
node
)

171 
¥io_åì_node
 *
cur
, *
ªs
 = 
node
;

172 
ødix_ödex
, 
hóp_ödex
;

173 
r_ödex
, 
h_ödex
, 
ödex
, 
mask
;

174 
size_Êag
 = 0;

176 
	`gë_ödex
(
node
, &
ødix_ödex
, &
hóp_ödex
);

178 i‡(
	`¥io_åì_em±y
(
roŸ
) ||

179 
hóp_ödex
 > 
	`¥io_åì_maxödex
(
roŸ
->
ödex_bôs
))

180  
	`¥io_åì_ex∑nd
(
roŸ
, 
node
, 
hóp_ödex
);

182 
cur
 = 
roŸ
->
¥io_åì_node
;

183 
mask
 = 1UL << (
roŸ
->
ödex_bôs
 - 1);

185 
mask
) {

186 
	`gë_ödex
(
cur
, &
r_ödex
, &
h_ödex
);

188 i‡(
r_ödex
 =
ødix_ödex
 && 
h_ödex
 =
hóp_ödex
)

189  
cur
;

191 i‡(
h_ödex
 < 
hóp_ödex
 ||

192 (
h_ödex
 =
hóp_ödex
 && 
r_ödex
 > 
ødix_ödex
)) {

193 
¥io_åì_node
 *
tmp
 = 
node
;

194 
node
 = 
	`¥io_åì_ª∂a˚
(
roŸ
, 
cur
,Çode);

195 
cur
 = 
tmp
;

197 
ödex
 = 
r_ödex
;

198 
r_ödex
 = 
ødix_ödex
;

199 
ødix_ödex
 = 
ödex
;

200 
ödex
 = 
h_ödex
;

201 
h_ödex
 = 
hóp_ödex
;

202 
hóp_ödex
 = 
ödex
;

205 i‡(
size_Êag
)

206 
ödex
 = 
hóp_ödex
 - 
ødix_ödex
;

208 
ödex
 = 
ødix_ödex
;

210 i‡(
ödex
 & 
mask
) {

211 i‡(
	`¥io_åì_right_em±y
(
cur
)) {

212 
	`INIT_PRIO_TREE_NODE
(
node
);

213 
cur
->
right
 = 
node
;

214 
node
->
∑ª¡
 = 
cur
;

215  
ªs
;

217 
cur
 = cur->
right
;

219 i‡(
	`¥io_åì_À·_em±y
(
cur
)) {

220 
	`INIT_PRIO_TREE_NODE
(
node
);

221 
cur
->
À·
 = 
node
;

222 
node
->
∑ª¡
 = 
cur
;

223  
ªs
;

225 
cur
 = cur->
À·
;

228 
mask
 >>= 1;

230 i‡(!
mask
) {

231 
mask
 = 1UL << (
BITS_PER_LONG
 - 1);

232 
size_Êag
 = 1;

236 
	`as£π
(0);

237  
NULL
;

238 
	}
}

245 
	$¥io_åì_ªmove
(
¥io_åì_roŸ
 *
roŸ
, 
¥io_åì_node
 *
node
)

247 
¥io_åì_node
 *
cur
;

248 
r_ödex
, 
h_ödex_right
, 
h_ödex_À·
;

250 
cur
 = 
node
;

252 !
	`¥io_åì_À·_em±y
(
cur
Ë|| !
	`¥io_åì_right_em±y
(cur)) {

253 i‡(!
	`¥io_åì_À·_em±y
(
cur
))

254 
	`gë_ödex
(
cur
->
À·
, &
r_ödex
, &
h_ödex_À·
);

256 
cur
 = cur->
right
;

260 i‡(!
	`¥io_åì_right_em±y
(
cur
))

261 
	`gë_ödex
(
cur
->
right
, &
r_ödex
, &
h_ödex_right
);

263 
cur
 = cur->
À·
;

268 i‡(
h_ödex_À·
 >
h_ödex_right
)

269 
cur
 = cur->
À·
;

271 
cur
 = cur->
right
;

274 i‡(
	`¥io_åì_roŸ
(
cur
)) {

275 
	`as£π
(
roŸ
->
¥io_åì_node
 =
cur
);

276 
	`INIT_PRIO_TREE_ROOT
(
roŸ
);

280 i‡(
cur
->
∑ª¡
->
right
 == cur)

281 
cur
->
∑ª¡
->
right
 = cur->parent;

283 
cur
->
∑ª¡
->
À·
 = cur->parent;

285 
cur
 !
node
)

286 
cur
 = 
	`¥io_åì_ª∂a˚
(
roŸ
, cur->
∑ª¡
, cur);

287 
	}
}

297 
¥io_åì_node
 *
	$¥io_åì_À·
(
¥io_åì_ôî
 *
ôî
,

298 *
r_ödex
, *
h_ödex
)

300 i‡(
	`¥io_åì_À·_em±y
(
ôî
->
cur
))

301  
NULL
;

303 
	`gë_ödex
(
ôî
->
cur
->
À·
, 
r_ödex
, 
h_ödex
);

305 i‡(
ôî
->
r_ödex
 <*
h_ödex
) {

306 
ôî
->
cur
 = iãr->cur->
À·
;

307 
ôî
->
mask
 >>= 1;

308 i‡(
ôî
->
mask
) {

309 i‡(
ôî
->
size_Àvñ
)

310 
ôî
->
size_Àvñ
++;

312 i‡(
ôî
->
size_Àvñ
) {

313 
	`as£π
(
	`¥io_åì_À·_em±y
(
ôî
->
cur
));

314 
	`as£π
(
	`¥io_åì_right_em±y
(
ôî
->
cur
));

315 
ôî
->
size_Àvñ
++;

316 
ôî
->
mask
 = 
ULONG_MAX
;

318 
ôî
->
size_Àvñ
 = 1;

319 
ôî
->
mask
 = 1UL << (
BITS_PER_LONG
 - 1);

322  
ôî
->
cur
;

325  
NULL
;

326 
	}
}

328 
¥io_åì_node
 *
	$¥io_åì_right
(
¥io_åì_ôî
 *
ôî
,

329 *
r_ödex
, *
h_ödex
)

331 
vÆue
;

333 i‡(
	`¥io_åì_right_em±y
(
ôî
->
cur
))

334  
NULL
;

336 i‡(
ôî
->
size_Àvñ
)

337 
vÆue
 = 
ôî
->value;

339 
vÆue
 = 
ôî
->vÆuê| iãr->
mask
;

341 i‡(
ôî
->
h_ödex
 < 
vÆue
)

342  
NULL
;

344 
	`gë_ödex
(
ôî
->
cur
->
right
, 
r_ödex
, 
h_ödex
);

346 i‡(
ôî
->
r_ödex
 <*
h_ödex
) {

347 
ôî
->
cur
 = iãr->cur->
right
;

348 
ôî
->
mask
 >>= 1;

349 
ôî
->
vÆue
 = value;

350 i‡(
ôî
->
mask
) {

351 i‡(
ôî
->
size_Àvñ
)

352 
ôî
->
size_Àvñ
++;

354 i‡(
ôî
->
size_Àvñ
) {

355 
	`as£π
(
	`¥io_åì_À·_em±y
(
ôî
->
cur
));

356 
	`as£π
(
	`¥io_åì_right_em±y
(
ôî
->
cur
));

357 
ôî
->
size_Àvñ
++;

358 
ôî
->
mask
 = 
ULONG_MAX
;

360 
ôî
->
size_Àvñ
 = 1;

361 
ôî
->
mask
 = 1UL << (
BITS_PER_LONG
 - 1);

364  
ôî
->
cur
;

367  
NULL
;

368 
	}
}

370 
¥io_åì_node
 *
	$¥io_åì_∑ª¡
(
¥io_åì_ôî
 *
ôî
)

372 
ôî
->
cur
 = iãr->cur->
∑ª¡
;

373 i‡(
ôî
->
mask
 =
ULONG_MAX
)

374 
ôî
->
mask
 = 1UL;

375 i‡(
ôî
->
size_Àvñ
 == 1)

376 
ôî
->
mask
 = 1UL;

378 
ôî
->
mask
 <<= 1;

379 i‡(
ôî
->
size_Àvñ
)

380 
ôî
->
size_Àvñ
--;

381 i‡(!
ôî
->
size_Àvñ
 && (ôî->
vÆue
 & iãr->
mask
))

382 
ôî
->
vÆue
 ^ôî->
mask
;

383  
ôî
->
cur
;

384 
	}
}

386 
ölöe
 
	$ovîœp
(
¥io_åì_ôî
 *
ôî
,

387 
r_ödex
, 
h_ödex
)

389  
ôî
->
h_ödex
 >
r_ödex
 && iter->r_index <= h_index;

390 
	}
}

399 
¥io_åì_node
 *
	$¥io_åì_fú°
(
¥io_åì_ôî
 *
ôî
)

401 
¥io_åì_roŸ
 *
roŸ
;

402 
r_ödex
, 
h_ödex
;

404 
	`INIT_PRIO_TREE_ITER
(
ôî
);

406 
roŸ
 = 
ôî
->root;

407 i‡(
	`¥io_åì_em±y
(
roŸ
))

408  
NULL
;

410 
	`gë_ödex
(
roŸ
->
¥io_åì_node
, &
r_ödex
, &
h_ödex
);

412 i‡(
ôî
->
r_ödex
 > 
h_ödex
)

413  
NULL
;

415 
ôî
->
mask
 = 1UL << (
roŸ
->
ödex_bôs
 - 1);

416 
ôî
->
cur
 = 
roŸ
->
¥io_åì_node
;

419 i‡(
	`ovîœp
(
ôî
, 
r_ödex
, 
h_ödex
))

420  
ôî
->
cur
;

422 i‡(
	`¥io_åì_À·
(
ôî
, &
r_ödex
, &
h_ödex
))

425 i‡(
	`¥io_åì_right
(
ôî
, &
r_ödex
, &
h_ödex
))

430  
NULL
;

431 
	}
}

438 
¥io_åì_node
 *
	$¥io_åì_√xt
(
¥io_åì_ôî
 *
ôî
)

440 
r_ödex
, 
h_ödex
;

442 i‡(
ôî
->
cur
 =
NULL
)

443  
	`¥io_åì_fú°
(
ôî
);

445 
ª≥©
:

446 
	`¥io_åì_À·
(
ôî
, &
r_ödex
, &
h_ödex
))

447 i‡(
	`ovîœp
(
ôî
, 
r_ödex
, 
h_ödex
))

448  
ôî
->
cur
;

450 !
	`¥io_åì_right
(
ôî
, &
r_ödex
, &
h_ödex
)) {

451 !
	`¥io_åì_roŸ
(
ôî
->
cur
) &&

452 
ôî
->
cur
->
∑ª¡
->
right
 == iter->cur)

453 
	`¥io_åì_∑ª¡
(
ôî
);

455 i‡(
	`¥io_åì_roŸ
(
ôî
->
cur
))

456  
NULL
;

458 
	`¥io_åì_∑ª¡
(
ôî
);

461 i‡(
	`ovîœp
(
ôî
, 
r_ödex
, 
h_ödex
))

462  
ôî
->
cur
;

464 
ª≥©
;

465 
	}
}

	@/home/terekhov/tmp/fio/fio/lib/prio_tree.h

1 #i‚de‡
_LINUX_PRIO_TREE_H


2 
	#_LINUX_PRIO_TREE_H


	)

4 
	~<öây≥s.h
>

5 
	~"../hash.h
"

7 
	s¥io_åì_node
 {

8 
¥io_åì_node
 *
	mÀ·
;

9 
¥io_åì_node
 *
	mright
;

10 
¥io_åì_node
 *
	m∑ª¡
;

11 
uöt64_t
 
	m°¨t
;

12 
uöt64_t
 
	mœ°
;

15 
	s¥io_åì_roŸ
 {

16 
¥io_åì_node
 *
	m¥io_åì_node
;

17 
	mödex_bôs
;

20 
	s¥io_åì_ôî
 {

21 
¥io_åì_node
 *
	mcur
;

22 
	mmask
;

23 
	mvÆue
;

24 
	msize_Àvñ
;

26 
¥io_åì_roŸ
 *
	mroŸ
;

27 
uöt64_t
 
	mr_ödex
;

28 
uöt64_t
 
	mh_ödex
;

31 
ölöe
 
	$¥io_åì_ôî_öô
(
¥io_åì_ôî
 *
ôî
,

32 
¥io_åì_roŸ
 *
roŸ
, 
uöt64_t
 
r_ödex
, uöt64_à
h_ödex
)

34 
ôî
->
roŸ
 =Ñoot;

35 
ôî
->
r_ödex
 =Ñ_index;

36 
ôî
->
h_ödex
 = h_index;

37 
ôî
->
cur
 = 
NULL
;

38 
	}
}

40 
	#INIT_PRIO_TREE_ROOT
(
±r
) \

42 (
±r
)->
¥io_åì_node
 = 
NULL
; \

43 (
±r
)->
ödex_bôs
 = 1; \

44 } 0)

	)

46 
	#INIT_PRIO_TREE_NODE
(
±r
) \

48 (
±r
)->
À·
 = (±r)->
right
 = (±r)->
∑ª¡
 = (ptr); \

49 } 0)

	)

51 
	#INIT_PRIO_TREE_ITER
(
±r
) \

53 (
±r
)->
cur
 = 
NULL
; \

54 (
±r
)->
mask
 = 0UL; \

55 (
±r
)->
vÆue
 = 0UL; \

56 (
±r
)->
size_Àvñ
 = 0; \

57 } 0)

	)

59 
	#¥io_åì_íåy
(
±r
, 
ty≥
, 
membî
) \

60 ((
ty≥
 *)((*)(
±r
)-()(&(—y≥ *)0)->
membî
)))

	)

62 
ölöe
 
	$¥io_åì_em±y
(c⁄° 
¥io_åì_roŸ
 *
roŸ
)

64  
roŸ
->
¥io_åì_node
 =
NULL
;

65 
	}
}

67 
ölöe
 
	$¥io_åì_roŸ
(c⁄° 
¥io_åì_node
 *
node
)

69  
node
->
∑ª¡
 ==Çode;

70 
	}
}

72 
ölöe
 
	$¥io_åì_À·_em±y
(c⁄° 
¥io_åì_node
 *
node
)

74  
node
->
À·
 ==Çode;

75 
	}
}

77 
ölöe
 
	$¥io_åì_right_em±y
(c⁄° 
¥io_åì_node
 *
node
)

79  
node
->
right
 ==Çode;

80 
	}
}

83 
¥io_åì_node
 *
¥io_åì_ª∂a˚
(
¥io_åì_roŸ
 *
roŸ
,

84 
¥io_åì_node
 *
ﬁd
, ¥io_åì_nodê*
node
);

85 
¥io_åì_node
 *
¥io_åì_ö£π
(
¥io_åì_roŸ
 *
roŸ
,

86 
¥io_åì_node
 *
node
);

87 
¥io_åì_ªmove
(
¥io_åì_roŸ
 *
roŸ
, 
¥io_åì_node
 *
node
);

88 
¥io_åì_node
 *
¥io_åì_√xt
(
¥io_åì_ôî
 *
ôî
);

	@/home/terekhov/tmp/fio/fio/lib/rand.c

36 
	~<°rög.h
>

37 
	~"ønd.h
"

38 
	~"../hash.h
"

40 
ölöe
 
	$__£ed
(
x
, 
m
)

42  (
x
 < 
m
) ? x + m : x;

43 
	}
}

45 
	$__öô_ønd
(
‰™d_°©e
 *
°©e
, 
£ed
)

47 
¸™ks
 = 6;

49 
	#LCG
(
x
, 
£ed
Ë((xË* 69069 ^ (£ed))

	)

51 
°©e
->
s1
 = 
	`__£ed
(
	`LCG
((2^31Ë+ (2^17Ë+ (2^7), 
£ed
), 1);

52 
°©e
->
s2
 = 
	`__£ed
(
	`LCG
(°©e->
s1
, 
£ed
), 7);

53 
°©e
->
s3
 = 
	`__£ed
(
	`LCG
(°©e->
s2
, 
£ed
), 15);

55 
¸™ks
--)

56 
	`__ønd
(
°©e
);

57 
	}
}

59 
	$öô_ønd
(
‰™d_°©e
 *
°©e
)

61 
	`__öô_ønd
(
°©e
, 1);

62 
	}
}

64 
	$öô_ønd_£ed
(
‰™d_°©e
 *
°©e
, 
£ed
)

66 
	`__öô_ønd
(
°©e
, 
£ed
);

67 
	}
}

69 
	$__fûl_øndom_buf
(*
buf
, 
Àn
, 
£ed
)

71 *
±r
 = 
buf
;

73 (*Ë
±r
 - 
buf
 < 
Àn
) {

74 *
±r
 = 
£ed
;

75 
±r
++;

76 
£ed
 *
GOLDEN_RATIO_PRIME
;

77 
£ed
 >>= 3;

79 
	}
}

81 
	$fûl_øndom_buf
(
‰™d_°©e
 *
fs
, *
buf
,

82 
Àn
)

84 
r
 = 
	`__ønd
(
fs
);

87 
r
 *(Ë
	`__ønd
(
fs
);

89 
	`__fûl_øndom_buf
(
buf
, 
Àn
, 
r
);

90  
r
;

91 
	}
}

93 
	$fûl_øndom_buf_≥r˚¡age
(
‰™d_°©e
 *
fs
, *
buf
,

94 
≥r˚¡age
,

95 
£gmít
, 
Àn
)

97 
r
 = 
	`__ønd
(
fs
);

98 
this_Àn
;

100 i‡(
≥r˚¡age
 == 100) {

101 
	`mem£t
(
buf
, 0, 
Àn
);

105 i‡(
£gmít
 > 
Àn
)

106 
£gmít
 = 
Àn
;

109 
r
 *(Ë
	`__ønd
(
fs
);

111 
Àn
) {

115 
this_Àn
 = (
£gmít
 * (100 - 
≥r˚¡age
)) / 100;

116 i‡(
this_Àn
 > 
Àn
)

117 
this_Àn
 = 
Àn
;

119 
	`__fûl_øndom_buf
(
buf
, 
this_Àn
, 
r
);

121 
Àn
 -
this_Àn
;

122 
buf
 +
this_Àn
;

124 i‡(
this_Àn
 > 
Àn
)

125 
this_Àn
 = 
Àn
;

127 
	`mem£t
(
buf
, 0, 
this_Àn
);

128 
Àn
 -
this_Àn
;

129 
buf
 +
this_Àn
;

132  
r
;

133 
	}
}

	@/home/terekhov/tmp/fio/fio/lib/rand.h

1 #i‚de‡
FIO_RAND_H


2 
	#FIO_RAND_H


	)

4 
	#FRAND_MAX
 (-1U)

	)

6 
	s‰™d_°©e
 {

7 
	ms1
, 
	ms2
, 
	ms3
;

10 
ölöe
 
	$__ønd
(
‰™d_°©e
 *
°©e
)

12 
	#TAUSWORTHE
(
s
,
a
,
b
,
c
,
d
Ë((s&c)<<dË^ (((†<<aË^ s)>>b)

	)

14 
°©e
->
s1
 = 
	`TAUSWORTHE
(state->s1, 13, 19, 4294967294UL, 12);

15 
°©e
->
s2
 = 
	`TAUSWORTHE
(state->s2, 2, 25, 4294967288UL, 4);

16 
°©e
->
s3
 = 
	`TAUSWORTHE
(state->s3, 3, 11, 4294967280UL, 17);

18  (
°©e
->
s1
 ^ sèã->
s2
 ^ sèã->
s3
);

19 
	}
}

21 
öô_ønd
(
‰™d_°©e
 *);

22 
öô_ønd_£ed
(
‰™d_°©e
 *, 
£ed
);

23 
__fûl_øndom_buf
(*
buf
, 
Àn
, 
£ed
);

24 
fûl_øndom_buf
(
‰™d_°©e
 *, *
buf
, 
Àn
);

25 
fûl_øndom_buf_≥r˚¡age
(
‰™d_°©e
 *, *
buf
, 
≥r˚¡age
, 
£gmít
, 
Àn
);

	@/home/terekhov/tmp/fio/fio/lib/rbtree.c

23 
	~"rbåì.h
"

25 
	$__rb_rŸ©e_À·
(
rb_node
 *
node
, 
rb_roŸ
 *
roŸ
)

27 
rb_node
 *
right
 = 
node
->
rb_right
;

28 
rb_node
 *
∑ª¡
 = 
	`rb_∑ª¡
(
node
);

30 i‡((
node
->
rb_right
 = 
right
->
rb_À·
))

31 
	`rb_£t_∑ª¡
(
right
->
rb_À·
, 
node
);

32 
right
->
rb_À·
 = 
node
;

34 
	`rb_£t_∑ª¡
(
right
, 
∑ª¡
);

36 i‡(
∑ª¡
)

38 i‡(
node
 =
∑ª¡
->
rb_À·
)

39 
∑ª¡
->
rb_À·
 = 
right
;

41 
∑ª¡
->
rb_right
 = 
right
;

44 
roŸ
->
rb_node
 = 
right
;

45 
	`rb_£t_∑ª¡
(
node
, 
right
);

46 
	}
}

48 
	$__rb_rŸ©e_right
(
rb_node
 *
node
, 
rb_roŸ
 *
roŸ
)

50 
rb_node
 *
À·
 = 
node
->
rb_À·
;

51 
rb_node
 *
∑ª¡
 = 
	`rb_∑ª¡
(
node
);

53 i‡((
node
->
rb_À·
 = 
À·
->
rb_right
))

54 
	`rb_£t_∑ª¡
(
À·
->
rb_right
, 
node
);

55 
À·
->
rb_right
 = 
node
;

57 
	`rb_£t_∑ª¡
(
À·
, 
∑ª¡
);

59 i‡(
∑ª¡
)

61 i‡(
node
 =
∑ª¡
->
rb_right
)

62 
∑ª¡
->
rb_right
 = 
À·
;

64 
∑ª¡
->
rb_À·
 = 
À·
;

67 
roŸ
->
rb_node
 = 
À·
;

68 
	`rb_£t_∑ª¡
(
node
, 
À·
);

69 
	}
}

71 
	$rb_ö£π_cﬁ‹
(
rb_node
 *
node
, 
rb_roŸ
 *
roŸ
)

73 
rb_node
 *
∑ª¡
, *
g∑ª¡
;

75 (
∑ª¡
 = 
	`rb_∑ª¡
(
node
)Ë&& 
	`rb_is_ªd
(parent))

77 
g∑ª¡
 = 
	`rb_∑ª¡
(
∑ª¡
);

79 i‡(
∑ª¡
 =
g∑ª¡
->
rb_À·
)

82 
rb_node
 *
un˛e
 = 
g∑ª¡
->
rb_right
;

83 i‡(
un˛e
 && 
	`rb_is_ªd
(uncle))

85 
	`rb_£t_bœck
(
un˛e
);

86 
	`rb_£t_bœck
(
∑ª¡
);

87 
	`rb_£t_ªd
(
g∑ª¡
);

88 
node
 = 
g∑ª¡
;

93 i‡(
∑ª¡
->
rb_right
 =
node
)

95 
rb_node
 *
tmp
;

96 
	`__rb_rŸ©e_À·
(
∑ª¡
, 
roŸ
);

97 
tmp
 = 
∑ª¡
;

98 
∑ª¡
 = 
node
;

99 
node
 = 
tmp
;

102 
	`rb_£t_bœck
(
∑ª¡
);

103 
	`rb_£t_ªd
(
g∑ª¡
);

104 
	`__rb_rŸ©e_right
(
g∑ª¡
, 
roŸ
);

107 
rb_node
 *
un˛e
 = 
g∑ª¡
->
rb_À·
;

108 i‡(
un˛e
 && 
	`rb_is_ªd
(uncle))

110 
	`rb_£t_bœck
(
un˛e
);

111 
	`rb_£t_bœck
(
∑ª¡
);

112 
	`rb_£t_ªd
(
g∑ª¡
);

113 
node
 = 
g∑ª¡
;

118 i‡(
∑ª¡
->
rb_À·
 =
node
)

120 
rb_node
 *
tmp
;

121 
	`__rb_rŸ©e_right
(
∑ª¡
, 
roŸ
);

122 
tmp
 = 
∑ª¡
;

123 
∑ª¡
 = 
node
;

124 
node
 = 
tmp
;

127 
	`rb_£t_bœck
(
∑ª¡
);

128 
	`rb_£t_ªd
(
g∑ª¡
);

129 
	`__rb_rŸ©e_À·
(
g∑ª¡
, 
roŸ
);

133 
	`rb_£t_bœck
(
roŸ
->
rb_node
);

134 
	}
}

136 
	$__rb_îa£_cﬁ‹
(
rb_node
 *
node
, rb_nodê*
∑ª¡
,

137 
rb_roŸ
 *
roŸ
)

139 
rb_node
 *
Ÿhî
;

141 (!
node
 || 
	`rb_is_bœck
“ode)Ë&&Çodê!
roŸ
->
rb_node
)

143 i‡(
∑ª¡
->
rb_À·
 =
node
)

145 
Ÿhî
 = 
∑ª¡
->
rb_right
;

146 i‡(
	`rb_is_ªd
(
Ÿhî
))

148 
	`rb_£t_bœck
(
Ÿhî
);

149 
	`rb_£t_ªd
(
∑ª¡
);

150 
	`__rb_rŸ©e_À·
(
∑ª¡
, 
roŸ
);

151 
Ÿhî
 = 
∑ª¡
->
rb_right
;

153 i‡((!
Ÿhî
->
rb_À·
 || 
	`rb_is_bœck
(other->rb_left)) &&

154 (!
Ÿhî
->
rb_right
 || 
	`rb_is_bœck
(other->rb_right)))

156 
	`rb_£t_ªd
(
Ÿhî
);

157 
node
 = 
∑ª¡
;

158 
∑ª¡
 = 
	`rb_∑ª¡
(
node
);

162 i‡(!
Ÿhî
->
rb_right
 || 
	`rb_is_bœck
(other->rb_right))

164 
rb_node
 *
o_À·
;

165 i‡((
o_À·
 = 
Ÿhî
->
rb_À·
))

166 
	`rb_£t_bœck
(
o_À·
);

167 
	`rb_£t_ªd
(
Ÿhî
);

168 
	`__rb_rŸ©e_right
(
Ÿhî
, 
roŸ
);

169 
Ÿhî
 = 
∑ª¡
->
rb_right
;

171 
	`rb_£t_cﬁ‹
(
Ÿhî
, 
	`rb_cﬁ‹
(
∑ª¡
));

172 
	`rb_£t_bœck
(
∑ª¡
);

173 i‡(
Ÿhî
->
rb_right
)

174 
	`rb_£t_bœck
(
Ÿhî
->
rb_right
);

175 
	`__rb_rŸ©e_À·
(
∑ª¡
, 
roŸ
);

176 
node
 = 
roŸ
->
rb_node
;

182 
Ÿhî
 = 
∑ª¡
->
rb_À·
;

183 i‡(
	`rb_is_ªd
(
Ÿhî
))

185 
	`rb_£t_bœck
(
Ÿhî
);

186 
	`rb_£t_ªd
(
∑ª¡
);

187 
	`__rb_rŸ©e_right
(
∑ª¡
, 
roŸ
);

188 
Ÿhî
 = 
∑ª¡
->
rb_À·
;

190 i‡((!
Ÿhî
->
rb_À·
 || 
	`rb_is_bœck
(other->rb_left)) &&

191 (!
Ÿhî
->
rb_right
 || 
	`rb_is_bœck
(other->rb_right)))

193 
	`rb_£t_ªd
(
Ÿhî
);

194 
node
 = 
∑ª¡
;

195 
∑ª¡
 = 
	`rb_∑ª¡
(
node
);

199 i‡(!
Ÿhî
->
rb_À·
 || 
	`rb_is_bœck
(other->rb_left))

201 
rb_node
 *
o_right
;

202 i‡((
o_right
 = 
Ÿhî
->
rb_right
))

203 
	`rb_£t_bœck
(
o_right
);

204 
	`rb_£t_ªd
(
Ÿhî
);

205 
	`__rb_rŸ©e_À·
(
Ÿhî
, 
roŸ
);

206 
Ÿhî
 = 
∑ª¡
->
rb_À·
;

208 
	`rb_£t_cﬁ‹
(
Ÿhî
, 
	`rb_cﬁ‹
(
∑ª¡
));

209 
	`rb_£t_bœck
(
∑ª¡
);

210 i‡(
Ÿhî
->
rb_À·
)

211 
	`rb_£t_bœck
(
Ÿhî
->
rb_À·
);

212 
	`__rb_rŸ©e_right
(
∑ª¡
, 
roŸ
);

213 
node
 = 
roŸ
->
rb_node
;

218 i‡(
node
)

219 
	`rb_£t_bœck
(
node
);

220 
	}
}

222 
	$rb_îa£
(
rb_node
 *
node
, 
rb_roŸ
 *
roŸ
)

224 
rb_node
 *
chûd
, *
∑ª¡
;

225 
cﬁ‹
;

227 i‡(!
node
->
rb_À·
)

228 
chûd
 = 
node
->
rb_right
;

229 i‡(!
node
->
rb_right
)

230 
chûd
 = 
node
->
rb_À·
;

233 
rb_node
 *
ﬁd
 = 
node
, *
À·
;

235 
node
 =Çode->
rb_right
;

236 (
À·
 = 
node
->
rb_À·
Ë!
NULL
)

237 
node
 = 
À·
;

238 
chûd
 = 
node
->
rb_right
;

239 
∑ª¡
 = 
	`rb_∑ª¡
(
node
);

240 
cﬁ‹
 = 
	`rb_cﬁ‹
(
node
);

242 i‡(
chûd
)

243 
	`rb_£t_∑ª¡
(
chûd
, 
∑ª¡
);

244 i‡(
∑ª¡
 =
ﬁd
) {

245 
∑ª¡
->
rb_right
 = 
chûd
;

246 
∑ª¡
 = 
node
;

248 
∑ª¡
->
rb_À·
 = 
chûd
;

250 
node
->
rb_∑ª¡_cﬁ‹
 = 
ﬁd
->rb_parent_color;

251 
node
->
rb_right
 = 
ﬁd
->rb_right;

252 
node
->
rb_À·
 = 
ﬁd
->rb_left;

254 i‡(
	`rb_∑ª¡
(
ﬁd
))

256 i‡(
	`rb_∑ª¡
(
ﬁd
)->
rb_À·
 == old)

257 
	`rb_∑ª¡
(
ﬁd
)->
rb_À·
 = 
node
;

259 
	`rb_∑ª¡
(
ﬁd
)->
rb_right
 = 
node
;

261 
roŸ
->
rb_node
 = 
node
;

263 
	`rb_£t_∑ª¡
(
ﬁd
->
rb_À·
, 
node
);

264 i‡(
ﬁd
->
rb_right
)

265 
	`rb_£t_∑ª¡
(
ﬁd
->
rb_right
, 
node
);

266 
cﬁ‹
;

269 
∑ª¡
 = 
	`rb_∑ª¡
(
node
);

270 
cﬁ‹
 = 
	`rb_cﬁ‹
(
node
);

272 i‡(
chûd
)

273 
	`rb_£t_∑ª¡
(
chûd
, 
∑ª¡
);

274 i‡(
∑ª¡
)

276 i‡(
∑ª¡
->
rb_À·
 =
node
)

277 
∑ª¡
->
rb_À·
 = 
chûd
;

279 
∑ª¡
->
rb_right
 = 
chûd
;

282 
roŸ
->
rb_node
 = 
chûd
;

284 
cﬁ‹
:

285 i‡(
cﬁ‹
 =
RB_BLACK
)

286 
	`__rb_îa£_cﬁ‹
(
chûd
, 
∑ª¡
, 
roŸ
);

287 
	}
}

292 
rb_node
 *
	$rb_fú°
(
rb_roŸ
 *
roŸ
)

294 
rb_node
 *
n
;

296 
n
 = 
roŸ
->
rb_node
;

297 i‡(!
n
)

298  
NULL
;

299 
n
->
rb_À·
)

300 
n
 =Ç->
rb_À·
;

301  
n
;

302 
	}
}

304 
rb_node
 *
	$rb_√xt
(c⁄° 
rb_node
 *
node
)

306 
rb_node
 *
∑ª¡
;

308 i‡(
	`RB_EMPTY_NODE
(
node
))

309  
NULL
;

315 i‡(
node
->
rb_right
) {

316 
node
 =Çode->
rb_right
;

317 
node
->
rb_À·
)

318 
node
Úode->
rb_À·
;

319  (
rb_node
 *)
node
;

329 (
∑ª¡
 = 
	`rb_∑ª¡
(
node
)Ë&&Çodê=∑ª¡->
rb_right
)

330 
node
 = 
∑ª¡
;

332  
∑ª¡
;

333 
	}
}

	@/home/terekhov/tmp/fio/fio/lib/rbtree.h

94 #i‚def 
_LINUX_RBTREE_H


95 
	#_LINUX_RBTREE_H


	)

97 
	~<°dlib.h
>

98 
	~<öây≥s.h
>

100 
	srb_node


102 
öçå_t
 
	mrb_∑ª¡_cﬁ‹
;

103 
	#RB_RED
 0

	)

104 
	#RB_BLACK
 1

	)

105 
rb_node
 *
	mrb_right
;

106 
rb_node
 *
	mrb_À·
;

107 } 
__©åibuã__
((
Æig√d
(())));

110 
	srb_roŸ


112 
rb_node
 *
	mrb_node
;

116 
	#rb_∑ª¡
(
r
Ë((
rb_node
 *)(‘)->
rb_∑ª¡_cﬁ‹
 & ~3))

	)

117 
	#rb_cﬁ‹
(
r
Ë(‘)->
rb_∑ª¡_cﬁ‹
 & 1)

	)

118 
	#rb_is_ªd
(
r
Ë(!
	`rb_cﬁ‹
‘))

	)

119 
	#rb_is_bœck
(
r
Ë
	`rb_cﬁ‹
‘)

	)

120 
	#rb_£t_ªd
(
r
Ëdÿ{ (r)->
rb_∑ª¡_cﬁ‹
 &~1; } 0)

	)

121 
	#rb_£t_bœck
(
r
Ëdÿ{ (r)->
rb_∑ª¡_cﬁ‹
 |1; } 0)

	)

123 
ölöe
 
	$rb_£t_∑ª¡
(
rb_node
 *
rb
, rb_nodê*
p
)

125 
rb
->
rb_∑ª¡_cﬁ‹
 = (rb->rb_∑ª¡_cﬁ‹ & 3Ë| (
uöçå_t
)
p
;

126 
	}
}

127 
ölöe
 
	$rb_£t_cﬁ‹
(
rb_node
 *
rb
, 
cﬁ‹
)

129 
rb
->
rb_∑ª¡_cﬁ‹
 = (rb->rb_∑ª¡_cﬁ‹ & ~1Ë| 
cﬁ‹
;

130 
	}
}

132 
	#RB_ROOT
 (
rb_roŸ
Ë{ 
NULL
, }

	)

133 
	#rb_íåy
(
±r
, 
ty≥
, 
membî
Ë
	`c⁄èöî_of
’å,Åy≥, membî)

	)

135 
	#RB_EMPTY_ROOT
(
roŸ
Ë(‘oŸ)->
rb_node
 =
NULL
)

	)

136 
	#RB_EMPTY_NODE
(
node
Ë(
	`rb_∑ª¡
“odeË=node)

	)

137 
	#RB_CLEAR_NODE
(
node
Ë(
	`rb_£t_∑ª¡
“ode,Çode))

	)

139 
rb_ö£π_cﬁ‹
(
rb_node
 *, 
rb_roŸ
 *);

140 
rb_îa£
(
rb_node
 *, 
rb_roŸ
 *);

143 
rb_node
 *
rb_fú°
(
rb_roŸ
 *);

144 
rb_node
 *
rb_√xt
(const rb_node *);

146 
ölöe
 
	$rb_lök_node
(
rb_node
 * 
node
, rb_nodê* 
∑ª¡
,

147 
rb_node
 ** 
rb_lök
)

149 
node
->
rb_∑ª¡_cﬁ‹
 = (
uöçå_t
)
∑ª¡
;

150 
node
->
rb_À·
 =Çode->
rb_right
 = 
NULL
;

152 *
rb_lök
 = 
node
;

153 
	}
}

	@/home/terekhov/tmp/fio/fio/lib/strcasestr.c

1 
	~<˘y≥.h
>

2 
	~<°ddef.h
>

4 *
	$°rˇ£°r
(c⁄° *
s1
, c⁄° *
s2
)

6 c⁄° *
s
 = 
s1
;

7 c⁄° *
p
 = 
s2
;

10 i‡(!*
p
)

11  (*Ë
s1
;

12 i‡((*
p
 =*
s
) ||

13 (
	`tﬁowî
(*
p
Ë=tﬁowî(*
s
))) {

14 ++
p
;

15 ++
s
;

17 
p
 = 
s2
;

18 i‡(!*
s
)

19  
NULL
;

20 
s
 = ++
s1
;

24  *
p
 ? 
NULL
 : (*Ë
s1
;

25 
	}
}

	@/home/terekhov/tmp/fio/fio/lib/strcasestr.h

1 #ifde‡
CONFIG_STRCASESTR


3 
	~<°rög.h
>

7 #i‚de‡
FIO_STRCASESTR_H


8 
	#FIO_STRCASESTR_H


	)

10 *
°rˇ£°r
(c⁄° *
hay°ack
, c⁄° *
√edÀ
);

	@/home/terekhov/tmp/fio/fio/lib/strsep.c

1 
	~<°dio.h
>

3 *
	$°r£p
(**
°rögp
, c⁄° *
dñim
)

5 *
s
, *
tok
;

6 c⁄° *
•™p
;

7 
c
, 
sc
;

9 
s
 = *
°rögp
;

10 i‡(!
s
)

11  
NULL
;

13 
tok
 = 
s
;

15 
c
 = *
s
++;

16 
•™p
 = 
dñim
;

18 
sc
 = *
•™p
++;

19 i‡(
sc
 =
c
) {

20 i‡(
c
 == 0)

21 
s
 = 
NULL
;

23 
s
[-1] = 0;

24 *
°rögp
 = 
s
;

25  
tok
;

27 } 
sc
 != 0);

29 
	}
}

	@/home/terekhov/tmp/fio/fio/lib/strsep.h

1 #i‚de‡
FIO_STRSEP_LIB_H


2 
	#FIO_STRSEP_LIB_H


	)

4 *
°r£p
(**, const *);

	@/home/terekhov/tmp/fio/fio/lib/zipf.c

1 
	~<m©h.h
>

2 
	~<°rög.h
>

3 
	~<öây≥s.h
>

4 
	~<°dio.h
>

5 
	~<uni°d.h
>

6 
	~<sys/ty≥s.h
>

7 
	~<f˙é.h
>

8 
	~"õì754.h
"

9 
	~"../log.h
"

10 
	~"zùf.h
"

11 
	~"../mömax.h
"

12 
	~"../hash.h
"

14 
	#ZIPF_MAX_GEN
 10000000

	)

16 
	$zùf_upd©e
(
zùf_°©e
 *
zs
)

18 
to_gí
;

19 
i
;

26 
to_gí
 = 
	`mö
(
zs
->
ƒ™ges
, 
ZIPF_MAX_GEN
);

28 
i
 = 0; i < 
to_gí
; i++)

29 
zs
->
zë™
 +
	`pow
(1.0 / (Ë(
i
 + 1), zs->
thëa
);

30 
	}
}

32 
	$sh¨ed_ønd_öô
(
zùf_°©e
 *
zs
, 
ƒ™ges
,

33 
£ed
)

35 
	`mem£t
(
zs
, 0, (*zs));

36 
zs
->
ƒ™ges
 =Çranges;

38 
	`öô_ønd_£ed
(&
zs
->
ønd
, 
£ed
);

39 
zs
->
ønd_off
 = 
	`__ønd
(&zs->
ønd
);

40 
	}
}

42 
	$zùf_öô
(
zùf_°©e
 *
zs
, 
ƒ™ges
, 
thëa
,

43 
£ed
)

45 
	`sh¨ed_ønd_öô
(
zs
, 
ƒ™ges
, 
£ed
);

47 
zs
->
thëa
 =Åheta;

48 
zs
->
zëa2
 = 
	`pow
(1.0, zs->
thëa
) +Öow(0.5, zs->theta);

50 
	`zùf_upd©e
(
zs
);

51 
	}
}

53 
	$zùf_√xt
(
zùf_°©e
 *
zs
)

55 
Æpha
, 
ëa
, 
ønd_uni
, 
ønd_z
;

56 
n
 = 
zs
->
ƒ™ges
;

57 
vÆ
;

59 
Æpha
 = 1.0 / (1.0 - 
zs
->
thëa
);

60 
ëa
 = (1.0 - 
	`pow
(2.0 / 
n
, 1.0 - 
zs
->
thëa
)Ë/ (1.0 - zs->
zëa2
 / zs->
zë™
);

62 
ønd_uni
 = (Ë
	`__ønd
(&
zs
->
ønd
Ë/ (Ë
FRAND_MAX
;

63 
ønd_z
 = 
ønd_uni
 * 
zs
->
zë™
;

65 i‡(
ønd_z
 < 1.0)

66 
vÆ
 = 1;

67 i‡(
ønd_z
 < (1.0 + 
	`pow
(0.5, 
zs
->
thëa
)))

68 
vÆ
 = 2;

70 
vÆ
 = 1 + ()(
n
 * 
	`pow
(
ëa
*
ønd_uni
 -Éè + 1.0, 
Æpha
));

72  (
	`__hash_u64
(
vÆ
 - 1Ë+ 
zs
->
ønd_off
Ë% zs->
ƒ™ges
;

73 
	}
}

75 
	$∑ªto_öô
(
zùf_°©e
 *
zs
, 
ƒ™ges
, 
h
,

76 
£ed
)

78 
	`sh¨ed_ønd_öô
(
zs
, 
ƒ™ges
, 
£ed
);

79 
zs
->
∑ªto_pow
 = 
	`log
(
h
) /Üog(1.0 - h);

80 
	}
}

82 
	$∑ªto_√xt
(
zùf_°©e
 *
zs
)

84 
ønd
 = (Ë
	`__ønd
(&
zs
->øndË/ (Ë
FRAND_MAX
;

85 
n
 = 
zs
->
ƒ™ges
 - 1;

87  (
	`__hash_u64
(
n
 * 
	`pow
(
ønd
, 
zs
->
∑ªto_pow
)Ë+ zs->
ønd_off
Ë% zs->
ƒ™ges
;

88 
	}
}

	@/home/terekhov/tmp/fio/fio/lib/zipf.h

1 #i‚de‡
FIO_ZIPF_H


2 
	#FIO_ZIPF_H


	)

4 
	~<öây≥s.h
>

5 
	~"ønd.h
"

7 
	szùf_°©e
 {

8 
uöt64_t
 
	mƒ™ges
;

9 
	mthëa
;

10 
	mzëa2
;

11 
	mzë™
;

12 
	m∑ªto_pow
;

13 
‰™d_°©e
 
	mønd
;

14 
uöt64_t
 
	mønd_off
;

17 
zùf_öô
(
zùf_°©e
 *
zs
, 
ƒ™ges
, 
thëa
, 
£ed
);

18 
zùf_√xt
(
zùf_°©e
 *
zs
);

20 
∑ªto_öô
(
zùf_°©e
 *
zs
, 
ƒ™ges
, 
h
, 
£ed
);

21 
∑ªto_√xt
(
zùf_°©e
 *
zs
);

	@/home/terekhov/tmp/fio/fio/libfio.c

25 
	~<°rög.h
>

26 
	~<sys/ty≥s.h
>

27 
	~<sig«l.h
>

28 
	~<°döt.h
>

29 
	~<loˇÀ.h
>

30 
	~<f˙é.h
>

32 
	~"fio.h
"

33 
	~"smÆloc.h
"

34 
	~"os/os.h
"

35 
	~"fûñock.h
"

40 #i‚de‡
FIO_HAVE_DISK_UTIL


41 
FLIST_HEAD
(
disk_li°
);

44 
	g¨ch_Êags
 = 0;

46 
uöçå_t
 
	g∑ge_mask
 = 0;

47 
uöçå_t
 
	g∑ge_size
 = 0;

49 c⁄° *
	gfio_os_°rögs
[
os_ƒ
] = {

63 c⁄° *
	gfio_¨ch_°rögs
[
¨ch_ƒ
] = {

79 
	$ª£t_io_cou¡îs
(
thªad_d©a
 *
td
)

81 
ddú
;

83 
ddú
 = 0; ddú < 
DDIR_RWDIR_CNT
; ddir++) {

84 
td
->
°©_io_byãs
[
ddú
] = 0;

85 
td
->
this_io_byãs
[
ddú
] = 0;

86 
td
->
°©_io_blocks
[
ddú
] = 0;

87 
td
->
this_io_blocks
[
ddú
] = 0;

88 
td
->
øã_byãs
[
ddú
] = 0;

89 
td
->
øã_blocks
[
ddú
] = 0;

91 
td
->
z⁄e_byãs
 = 0;

93 
td
->
œ°_was_sync
 = 0;

94 
td
->
rwmix_issues
 = 0;

99 i‡(
td
->
o
.
time_ba£d
 ||Åd->o.
lo›s
 ||Åd->o.
do_vîify
)

100 
td
->
ƒ_d⁄e_fûes
 = 0;

101 
	}
}

103 
	$˛ór_io_°©e
(
thªad_d©a
 *
td
)

105 
fio_fûe
 *
f
;

106 
i
;

108 
	`ª£t_io_cou¡îs
(
td
);

110 
	`˛o£_fûes
(
td
);

111 
	`f‹_óch_fûe
(
td
, 
f
, 
i
)

112 
	`fio_fûe_˛ór_d⁄e
(
f
);

117 
	`td_fûl_ønd_£eds
(
td
);

118 
	}
}

120 
	$ª£t_Æl_°©s
(
thªad_d©a
 *
td
)

122 
timevÆ
 
tv
;

123 
i
;

125 
	`ª£t_io_cou¡îs
(
td
);

127 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

128 
td
->
io_byãs
[
i
] = 0;

129 
td
->
io_blocks
[
i
] = 0;

130 
td
->
io_issues
[
i
] = 0;

131 
td
->
ts
.
tŸÆ_io_u
[
i
] = 0;

132 
td
->
ts
.
ru¡ime
[
i
] = 0;

133 
td
->
rwmix_issues
 = 0;

136 
	`fio_gëtime
(&
tv
, 
NULL
);

137 
	`mem˝y
(&
td
->
ïoch
, &
tv
, (tv));

138 
	`mem˝y
(&
td
->
°¨t
, &
tv
, (tv));

140 
	`œt_èrgë_ª£t
(
td
);

141 
	}
}

143 
	$ª£t_fio_°©e
()

145 
groupid
 = 0;

146 
thªad_numbî
 = 0;

147 
°©_numbî
 = 0;

148 
d⁄e_£cs
 = 0;

149 
	}
}

151 c⁄° *
	$fio_gë_os_°rög
(
ƒ
)

153 i‡(
ƒ
 < 
os_ƒ
)

154  
fio_os_°rögs
[
ƒ
];

156  
NULL
;

157 
	}
}

159 c⁄° *
	$fio_gë_¨ch_°rög
(
ƒ
)

161 i‡(
ƒ
 < 
¨ch_ƒ
)

162  
fio_¨ch_°rögs
[
ƒ
];

164  
NULL
;

165 
	}
}

167 
	$td_£t_run°©e
(
thªad_d©a
 *
td
, 
run°©e
)

169 i‡(
td
->
run°©e
 ==Ñunstate)

172 
	`d¥öt
(
FD_PROCESS
, "pid=%d:Ñun°©ê%d -> %d\n", (Ë
td
->
pid
,

173 
td
->
run°©e
,Ñunstate);

174 
td
->
run°©e
 =Ñunstate;

175 
	}
}

177 
	$td_bump_run°©e
(
thªad_d©a
 *
td
, 
√w_°©e
)

179 
ﬁd_°©e
 = 
td
->
run°©e
;

181 
	`td_£t_run°©e
(
td
, 
√w_°©e
);

182  
ﬁd_°©e
;

183 
	}
}

185 
	$td_ª°‹e_run°©e
(
thªad_d©a
 *
td
, 
ﬁd_°©e
)

187 
	`td_£t_run°©e
(
td
, 
ﬁd_°©e
);

188 
	}
}

190 
	$fio_ãrmö©e_thªads
(
group_id
)

192 
thªad_d©a
 *
td
;

193 
pid_t
 
pid
 = 
	`gëpid
();

194 
i
;

196 
	`d¥öt
(
FD_PROCESS
, "ãrmö©êgroup_id=%d\n", 
group_id
);

198 
	`f‹_óch_td
(
td
, 
i
) {

199 i‡(
group_id
 =
TERMINATE_ALL
 || 
groupid
 =
td
->groupid) {

200 
	`d¥öt
(
FD_PROCESS
, "settingÅerminate on %s/%d\n",

201 
td
->
o
.
«me
, (Ëtd->
pid
);

202 
td
->
ãrmö©e
 = 1;

203 
td
->
o
.
°¨t_dñay
 = 0;

208 i‡(!
td
->
pid
 ||Öid ==Åd->pid)

210 i‡(
td
->
run°©e
 < 
TD_RAMP
)

211 
	`kûl
(
td
->
pid
, 
SIGTERM
);

213 
i€ngöe_›s
 *
›s
 = 
td
->
io_›s
;

215 i‡(
›s
 && ops->
ãrmö©e
)

216 
›s
->
	`ãrmö©e
(
td
);

220 
	}
}

222 
	$fio_ru¬ög_‹_≥ndög_io_thªads
()

224 
thªad_d©a
 *
td
;

225 
i
;

227 
	`f‹_óch_td
(
td
, 
i
) {

228 i‡(
td
->
Êags
 & 
TD_F_NOIO
)

230 i‡(
td
->
run°©e
 < 
TD_EXITED
)

235 
	}
}

237 
	$fio_£t_fd_n⁄blockög
(
fd
, c⁄° *
who
)

239 
Êags
;

241 
Êags
 = 
	`f˙é
(
fd
, 
F_GETFL
);

242 i‡(
Êags
 < 0)

243 
	`log_îr
("fio: %†ÁûedÅÿgë fûêÊags: %s\n", 
who
, 
	`°ªº‹
(
î∫o
));

245 
√w_Êags
 = 
Êags
 | 
O_NONBLOCK
;

247 
√w_Êags
 = 
	`f˙é
(
fd
, 
F_SETFL
,Çew_flags);

248 i‡(
√w_Êags
 < 0)

249 
	`log_îr
("fio: %†ÁûedÅÿgë fûêÊags: %s\n", 
who
, 
	`°ªº‹
(
î∫o
));

252  
Êags
;

253 
	}
}

255 
	$ídün_check
()

258 
uöt8_t
 
c
[8];

259 
uöt64_t
 
v
;

260 } 
u
;

261 
À
 = 0, 
be
 = 0;

263 
u
.
v
 = 0x12;

264 i‡(
u
.
c
[7] == 0x12)

265 
be
 = 1;

266 i‡(
u
.
c
[0] == 0x12)

267 
À
 = 1;

269 #i‡
	`deföed
(
CONFIG_LITTLE_ENDIAN
)

270 i‡(
be
)

272 #ñi‡
	`deföed
(
CONFIG_BIG_ENDIAN
)

273 i‡(
À
)

279 i‡(!
À
 && !
be
)

283 
	}
}

285 
	$öôülize_fio
(*
ívp
[])

287 
ps
;

289 i‡(
	`ídün_check
()) {

290 
	`log_îr
("fio:Éndianness settingsáppear wrong.\n");

291 
	`log_îr
("fio:ÖleaseÑeportÅhisÅo fio@vger.kernel.org\n");

295 #i‡!
	`deföed
(
CONFIG_GETTIMEOFDAY
Ë&& !deföed(
CONFIG_CLOCK_GETTIME
)

299 
	`¨ch_öô
(
ívp
);

301 
	`söô
();

303 i‡(
	`fio_fûñock_öô
()) {

304 
	`log_îr
("fio: failed initializing filelock subsys\n");

312 i‡(!
	`gëív
("LC_NUMERIC"))

313 
	`£éoˇÀ
(
LC_NUMERIC
, "en_US");

315 
ps
 = 
	`sysc⁄f
(
_SC_PAGESIZE
);

316 i‡(
ps
 < 0) {

317 
	`log_îr
("FailedÅo getÖage size\n");

321 
∑ge_size
 = 
ps
;

322 
∑ge_mask
 = 
ps
 - 1;

324 
	`fio_keyw‹ds_öô
();

326 
	}
}

	@/home/terekhov/tmp/fio/fio/log.c

1 
	~<uni°d.h
>

2 
	~<f˙é.h
>

3 
	~<°rög.h
>

4 
	~<°d¨g.h
>

5 
	~<sy¶og.h
>

7 
	~"fio.h
"

9 
	$log_vÆi°
(c⁄° *
°r
, 
va_li°
 
¨gs
)

11 
buf„r
[1024];

12 
size_t
 
Àn
;

14 
Àn
 = 
	`v¢¥ötf
(
buf„r
, (buf„r), 
°r
, 
¨gs
);

15 
Àn
 = 
	`mö
÷í, (
buf„r
) - 1);

17 i‡(
is_backíd
)

18 
Àn
 = 
	`fio_£rvî_ãxt_ouçut
(
FIO_LOG_INFO
, 
buf„r
,Üen);

19 i‡(
log_sy¶og
)

20 
	`sy¶og
(
LOG_INFO
, "%s", 
buf„r
);

22 
Àn
 = 
	`fwrôe
(
buf„r
,Üí, 1, 
f_out
);

24  
Àn
;

25 
	}
}

27 
	$log_loˇl_buf
(c⁄° *
buf
, 
size_t
 
Àn
)

29 i‡(
log_sy¶og
)

30 
	`sy¶og
(
LOG_INFO
, "%s", 
buf
);

32 
Àn
 = 
	`fwrôe
(
buf
,Üí, 1, 
f_out
);

34  
Àn
;

35 
	}
}

37 
	$log_öfo
(c⁄° *
f‹m©
, ...)

39 
buf„r
[1024];

40 
va_li°
 
¨gs
;

41 
size_t
 
Àn
;

43 
	`va_°¨t
(
¨gs
, 
f‹m©
);

44 
Àn
 = 
	`v¢¥ötf
(
buf„r
, (buf„r), 
f‹m©
, 
¨gs
);

45 
	`va_íd
(
¨gs
);

46 
Àn
 = 
	`mö
÷í, (
buf„r
) - 1);

48 i‡(
is_backíd
)

49  
	`fio_£rvî_ãxt_ouçut
(
FIO_LOG_INFO
, 
buf„r
, 
Àn
);

50 i‡(
log_sy¶og
) {

51 
	`sy¶og
(
LOG_INFO
, "%s", 
buf„r
);

52  
Àn
;

54  
	`fwrôe
(
buf„r
, 
Àn
, 1, 
f_out
);

55 
	}
}

57 
	$log_öfo_Êush
()

59 i‡(
is_backíd
 || 
log_sy¶og
)

62  
	`fÊush
(
f_out
);

63 
	}
}

65 
	$log_îr
(c⁄° *
f‹m©
, ...)

67 
buf„r
[1024];

68 
va_li°
 
¨gs
;

69 
size_t
 
Àn
;

71 
	`va_°¨t
(
¨gs
, 
f‹m©
);

72 
Àn
 = 
	`v¢¥ötf
(
buf„r
, (buf„r), 
f‹m©
, 
¨gs
);

73 
	`va_íd
(
¨gs
);

74 
Àn
 = 
	`mö
÷í, (
buf„r
) - 1);

76 i‡(
is_backíd
)

77  
	`fio_£rvî_ãxt_ouçut
(
FIO_LOG_ERR
, 
buf„r
, 
Àn
);

78 i‡(
log_sy¶og
) {

79 
	`sy¶og
(
LOG_INFO
, "%s", 
buf„r
);

80  
Àn
;

82 i‡(
f_îr
 !
°dîr
) {

83 
fio_unu£d
 
ªt
;

85 
ªt
 = 
	`fwrôe
(
buf„r
, 
Àn
, 1, 
°dîr
);

88  
	`fwrôe
(
buf„r
, 
Àn
, 1, 
f_îr
);

90 
	}
}

92 c⁄° *
	$log_gë_Àvñ
(
Àvñ
)

94 c⁄° *
Àvñs
[] = { "Unknown", "Debug", "Info", "Error",

97 i‡(
Àvñ
 >
FIO_LOG_NR
)

98 
Àvñ
 = 
FIO_LOG_NR
;

100  
Àvñs
[
Àvñ
];

101 
	}
}

	@/home/terekhov/tmp/fio/fio/log.h

1 #i‚de‡
FIO_LOG_H


2 
	#FIO_LOG_H


	)

4 
	~<°dio.h
>

5 
	~<°d¨g.h
>

7 
FILE
 *
f_out
;

8 
FILE
 *
f_îr
;

10 
	$log_îr
(c⁄° *
f‹m©
, ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 1, 2)));

11 
	$log_öfo
(c⁄° *
f‹m©
, ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 1, 2)));

12 
	`log_vÆi°
(c⁄° *
°r
, 
va_li°
);

13 
	`log_loˇl_buf
(c⁄° *
buf
, 
size_t
);

14 
	`log_öfo_Êush
();

17 
FIO_LOG_DEBUG
 = 1,

18 
FIO_LOG_INFO
 = 2,

19 
FIO_LOG_ERR
 = 3,

20 
FIO_LOG_NR
 = 4,

23 c⁄° *
	`log_gë_Àvñ
(
Àvñ
);

	@/home/terekhov/tmp/fio/fio/memalign.c

1 
	~<°dlib.h
>

2 
	~<as£π.h
>

3 
	~<öây≥s.h
>

5 
	~"memÆign.h
"

7 
	sÆign_foŸî
 {

8 
	moff£t
;

11 
	#PTR_ALIGN
(
±r
, 
mask
) \

12 (*Ë(((
uöçå_t
Ë((
±r
Ë+ (
mask
)Ë& ~(mask)))

	)

14 *
	$fio_memÆign
(
size_t
 
Æignmít
, size_à
size
)

16 
Æign_foŸî
 *
f
;

17 *
±r
, *
ªt
 = 
NULL
;

19 
	`as£π
(!(
Æignmít
 & (alignment - 1)));

21 
±r
 = 
	`mÆloc
(
size
 + 
Æignmít
 + sizê+ (*
f
) - 1);

22 i‡(
±r
) {

23 
ªt
 = 
	`PTR_ALIGN
(
±r
, 
Æignmít
);

24 
f
 = 
ªt
 + 
size
;

25 
f
->
off£t
 = (
uöçå_t
Ë
ªt
 - (uöçå_tË
±r
;

28  
ªt
;

29 
	}
}

31 
	$fio_mem‰ì
(*
±r
, 
size_t
 
size
)

33 
Æign_foŸî
 *
f
 = 
±r
 + 
size
;

35 
	`‰ì
(
±r
 - 
f
->
off£t
);

36 
	}
}

	@/home/terekhov/tmp/fio/fio/memalign.h

1 #i‚de‡
FIO_MEMALIGN_H


2 
	#FIO_MEMALIGN_H


	)

4 *
fio_memÆign
(
size_t
 
Æignmít
, size_à
size
);

5 
fio_mem‰ì
(*
±r
, 
size_t
 
size
);

	@/home/terekhov/tmp/fio/fio/memory.c

4 
	~<sys/ty≥s.h
>

5 
	~<sys/°©.h
>

6 
	~<f˙é.h
>

7 
	~<uni°d.h
>

8 
	~<sys/mm™.h
>

10 
	~"fio.h
"

11 #i‚de‡
FIO_NO_HAVE_SHM_H


12 
	~<sys/shm.h
>

15 
	$fio_u≈ö_mem‹y
(
thªad_d©a
 *
td
)

17 i‡(
td
->
pö√d_mem
) {

18 
	`d¥öt
(
FD_MEM
, "u≈önög %Œu byãs\n", 
td
->
o
.
lockmem
);

19 i‡(
	`mu∆ock
(
td
->
pö√d_mem
,Åd->
o
.
lockmem
) < 0)

20 
	`≥º‹
("munlock");

21 
	`munm≠
(
td
->
pö√d_mem
,Åd->
o
.
lockmem
);

22 
td
->
pö√d_mem
 = 
NULL
;

24 
	}
}

26 
	$fio_pö_mem‹y
(
thªad_d©a
 *
td
)

28 
phys_mem
;

30 i‡(!
td
->
o
.
lockmem
)

33 
	`d¥öt
(
FD_MEM
, "pönög %Œu byãs\n", 
td
->
o
.
lockmem
);

38 
phys_mem
 = 
	`os_phys_mem
();

39 i‡(
phys_mem
) {

40 i‡((
td
->
o
.
lockmem
 + 128 * 1024 * 1024Ë> 
phys_mem
) {

41 
td
->
o
.
lockmem
 = 
phys_mem
 - 128 * 1024 * 1024;

42 
	`log_öfo
("fio:Üimiting mlocked memoryÅo %lluMB\n",

43 
td
->
o
.
lockmem
 >> 20);

47 
td
->
pö√d_mem
 = 
	`mm≠
(
NULL
,Åd->
o
.
lockmem
, 
PROT_READ
 | 
PROT_WRITE
,

48 
MAP_PRIVATE
 | 
OS_MAP_ANON
, -1, 0);

49 i‡(
td
->
pö√d_mem
 =
MAP_FAILED
) {

50 
	`≥º‹
("mallocÜocked mem");

51 
td
->
pö√d_mem
 = 
NULL
;

54 i‡(
	`mlock
(
td
->
pö√d_mem
,Åd->
o
.
lockmem
) < 0) {

55 
	`≥º‹
("mlock");

56 
	`munm≠
(
td
->
pö√d_mem
,Åd->
o
.
lockmem
);

57 
td
->
pö√d_mem
 = 
NULL
;

62 
	}
}

64 
	$Æloc_mem_shm
(
thªad_d©a
 *
td
, 
tŸÆ_mem
)

66 
Êags
 = 
IPC_CREAT
 | 
S_IRUSR
 | 
S_IWUSR
;

68 i‡(
td
->
o
.
mem_ty≥
 =
MEM_SHMHUGE
) {

69 
mask
 = 
td
->
o
.
hugïage_size
 - 1;

71 
Êags
 |
SHM_HUGETLB
;

72 
tŸÆ_mem
 = (tŸÆ_mem + 
mask
) & ~mask;

75 
td
->
shm_id
 = 
	`shmgë
(
IPC_PRIVATE
, 
tŸÆ_mem
, 
Êags
);

76 
	`d¥öt
(
FD_MEM
, "shmgë %u, %d\n", 
tŸÆ_mem
, 
td
->
shm_id
);

77 i‡(
td
->
shm_id
 < 0) {

78 
	`td_vîr‹
(
td
, 
î∫o
, "shmget");

79 i‡(
	`gëeuid
(Ë!0 && (
î∫o
 =
ENOMEM
 ||Éºnÿ=
EPERM
))

80 
	`log_îr
("fio: you mayÇeedÅoÑunÅhis jobásÑoot\n");

81 i‡(
td
->
o
.
mem_ty≥
 =
MEM_SHMHUGE
) {

82 i‡(
î∫o
 =
EINVAL
) {

83 
	`log_îr
("fio: checkÅhat you have free huge"

86 } i‡(
î∫o
 =
ENOSYS
) {

87 
	`log_îr
("fio: your system doesÇotáppearÅo"

89 } i‡(
î∫o
 =
ENOMEM
) {

90 
	`log_îr
("fio:Ço hugeÖagesávailable, do you"

98 
td
->
‹ig_buf„r
 = 
	`shm©
—d->
shm_id
, 
NULL
, 0);

99 
	`d¥öt
(
FD_MEM
, "shm© %d, %p\n", 
td
->
shm_id
,Åd->
‹ig_buf„r
);

100 i‡(
td
->
‹ig_buf„r
 == (*) -1) {

101 
	`td_vîr‹
(
td
, 
î∫o
, "shmat");

102 
td
->
‹ig_buf„r
 = 
NULL
;

107 
	}
}

109 
	$‰ì_mem_shm
(
thªad_d©a
 *
td
)

111 
shmid_ds
 
sbuf
;

113 
	`d¥öt
(
FD_MEM
, "shmdt/˘»%d %p\n", 
td
->
shm_id
,Åd->
‹ig_buf„r
);

114 
	`shmdt
(
td
->
‹ig_buf„r
);

115 
	`shm˘l
(
td
->
shm_id
, 
IPC_RMID
, &
sbuf
);

116 
	}
}

118 
	$Æloc_mem_mm≠
(
thªad_d©a
 *
td
, 
size_t
 
tŸÆ_mem
)

120 
Êags
 = 0;

122 
td
->
mm≠fd
 = 1;

124 i‡(
td
->
o
.
mem_ty≥
 =
MEM_MMAPHUGE
) {

125 
mask
 = 
td
->
o
.
hugïage_size
 - 1;

128 i‡(!
td
->
o
.
mm≠fûe
)

129 
Êags
 |
MAP_HUGETLB
;

130 
tŸÆ_mem
 = (tŸÆ_mem + 
mask
) & ~mask;

133 i‡(
td
->
o
.
mm≠fûe
) {

134 
td
->
mm≠fd
 = 
	`›í
—d->
o
.
mm≠fûe
, 
O_RDWR
|
O_CREAT
, 0644);

136 i‡(
td
->
mm≠fd
 < 0) {

137 
	`td_vîr‹
(
td
, 
î∫o
, "open mmap file");

138 
td
->
‹ig_buf„r
 = 
NULL
;

141 i‡(
td
->
o
.
mem_ty≥
 !
MEM_MMAPHUGE
 &&

142 
	`·runˇã
(
td
->
mm≠fd
, 
tŸÆ_mem
) < 0) {

143 
	`td_vîr‹
(
td
, 
î∫o
, "truncate mmap file");

144 
td
->
‹ig_buf„r
 = 
NULL
;

147 i‡(
td
->
o
.
mem_ty≥
 =
MEM_MMAPHUGE
)

148 
Êags
 |
MAP_SHARED
;

150 
Êags
 |
MAP_PRIVATE
;

152 
Êags
 |
OS_MAP_ANON
 | 
MAP_PRIVATE
;

154 
td
->
‹ig_buf„r
 = 
	`mm≠
(
NULL
, 
tŸÆ_mem
, 
PROT_READ
 | 
PROT_WRITE
, 
Êags
,

155 
td
->
mm≠fd
, 0);

156 
	`d¥öt
(
FD_MEM
, "mm≠ %Œu/%d %p\n", (Ë
tŸÆ_mem
,

157 
td
->
mm≠fd
,Åd->
‹ig_buf„r
);

158 i‡(
td
->
‹ig_buf„r
 =
MAP_FAILED
) {

159 
	`td_vîr‹
(
td
, 
î∫o
, "mmap");

160 
td
->
‹ig_buf„r
 = 
NULL
;

161 i‡(
td
->
mm≠fd
 != 1) {

162 
	`˛o£
(
td
->
mm≠fd
);

163 i‡(
td
->
o
.
mm≠fûe
)

164 
	`u∆ök
(
td
->
o
.
mm≠fûe
);

171 
	}
}

173 
	$‰ì_mem_mm≠
(
thªad_d©a
 *
td
, 
size_t
 
tŸÆ_mem
)

175 
	`d¥öt
(
FD_MEM
, "munm≠ %Œu %p\n", (Ë
tŸÆ_mem
,

176 
td
->
‹ig_buf„r
);

177 
	`munm≠
(
td
->
‹ig_buf„r
,Åd->
‹ig_buf„r_size
);

178 i‡(
td
->
o
.
mm≠fûe
) {

179 
	`˛o£
(
td
->
mm≠fd
);

180 
	`u∆ök
(
td
->
o
.
mm≠fûe
);

181 
	`‰ì
(
td
->
o
.
mm≠fûe
);

183 
	}
}

185 
	$Æloc_mem_mÆloc
(
thªad_d©a
 *
td
, 
size_t
 
tŸÆ_mem
)

187 
td
->
‹ig_buf„r
 = 
	`mÆloc
(
tŸÆ_mem
);

188 
	`d¥öt
(
FD_MEM
, "mÆlo¯%Œu %p\n", (Ë
tŸÆ_mem
,

189 
td
->
‹ig_buf„r
);

191  
td
->
‹ig_buf„r
 =
NULL
;

192 
	}
}

194 
	$‰ì_mem_mÆloc
(
thªad_d©a
 *
td
)

196 
	`d¥öt
(
FD_MEM
, "‰ì mÆlo¯mem %p\n", 
td
->
‹ig_buf„r
);

197 
	`‰ì
(
td
->
‹ig_buf„r
);

198 
	}
}

203 
	$Æloˇã_io_mem
(
thªad_d©a
 *
td
)

205 
size_t
 
tŸÆ_mem
;

206 
ªt
 = 0;

208 i‡(
td
->
io_›s
->
Êags
 & 
FIO_NOIO
)

211 
tŸÆ_mem
 = 
td
->
‹ig_buf„r_size
;

213 i‡(
td
->
o
.
odúe˘
 ||Åd->o.
mem_Æign
 ||Åd->o.
ﬂtomic
 ||

214 (
td
->
io_›s
->
Êags
 & 
FIO_MEMALIGN
)) {

215 
tŸÆ_mem
 +
∑ge_mask
;

216 i‡(
td
->
o
.
mem_Æign
 &&Åd->o.mem_Æig¿> 
∑ge_size
)

217 
tŸÆ_mem
 +
td
->
o
.
mem_Æign
 - 
∑ge_size
;

220 
	`d¥öt
(
FD_MEM
, "AŒo¯%Œu f‹ buf„rs\n", (Ë
tŸÆ_mem
);

222 i‡(
td
->
o
.
mem_ty≥
 =
MEM_MALLOC
)

223 
ªt
 = 
	`Æloc_mem_mÆloc
(
td
, 
tŸÆ_mem
);

224 i‡(
td
->
o
.
mem_ty≥
 =
MEM_SHM
 ||Åd->o.mem_ty≥ =
MEM_SHMHUGE
)

225 
ªt
 = 
	`Æloc_mem_shm
(
td
, 
tŸÆ_mem
);

226 i‡(
td
->
o
.
mem_ty≥
 =
MEM_MMAP
 ||Åd->o.mem_ty≥ =
MEM_MMAPHUGE
)

227 
ªt
 = 
	`Æloc_mem_mm≠
(
td
, 
tŸÆ_mem
);

229 
	`log_îr
("fio: bad memÅy≥: %d\n", 
td
->
o
.
mem_ty≥
);

230 
ªt
 = 1;

233 i‡(
ªt
)

234 
	`td_vîr‹
(
td
, 
ENOMEM
, "iomemállocation");

236  
ªt
;

237 
	}
}

239 
	$‰ì_io_mem
(
thªad_d©a
 *
td
)

241 
tŸÆ_mem
;

243 
tŸÆ_mem
 = 
td
->
‹ig_buf„r_size
;

244 i‡(
td
->
o
.
odúe˘
 ||Åd->o.
ﬂtomic
)

245 
tŸÆ_mem
 +
∑ge_mask
;

247 i‡(
td
->
o
.
mem_ty≥
 =
MEM_MALLOC
)

248 
	`‰ì_mem_mÆloc
(
td
);

249 i‡(
td
->
o
.
mem_ty≥
 =
MEM_SHM
 ||Åd->o.mem_ty≥ =
MEM_SHMHUGE
)

250 
	`‰ì_mem_shm
(
td
);

251 i‡(
td
->
o
.
mem_ty≥
 =
MEM_MMAP
 ||Åd->o.mem_ty≥ =
MEM_MMAPHUGE
)

252 
	`‰ì_mem_mm≠
(
td
, 
tŸÆ_mem
);

254 
	`log_îr
("Bad mem‹yÅy≥ %u\n", 
td
->
o
.
mem_ty≥
);

256 
td
->
‹ig_buf„r
 = 
NULL
;

257 
td
->
‹ig_buf„r_size
 = 0;

258 
	}
}

	@/home/terekhov/tmp/fio/fio/minmax.h

1 #i‚de‡
FIO_MIN_MAX_H


2 
	#FIO_MIN_MAX_H


	)

4 #i‚de‡
mö


5 
	#mö
(
a
, 
b
Ë(◊Ë< (bË? (aË: (b))

	)

7 #i‚de‡
max


8 
	#max
(
a
, 
b
Ë(◊Ë> (bË? (aË: (b))

	)

	@/home/terekhov/tmp/fio/fio/mutex.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~<uni°d.h
>

4 
	~<°dlib.h
>

5 
	~<f˙é.h
>

6 
	~<time.h
>

7 
	~<î∫o.h
>

8 
	~<±hªad.h
>

9 
	~<sys/mm™.h
>

10 
	~<as£π.h
>

12 
	~"fio.h
"

13 
	~"log.h
"

14 
	~"muãx.h
"

15 
	~"¨ch/¨ch.h
"

16 
	~"os/os.h
"

17 
	~"hñ≥rs.h
"

18 
	~"fio_time.h
"

19 
	~"gëtime.h
"

21 
	$fio_muãx_ªmove
(
fio_muãx
 *
muãx
)

23 
	`as£π
(
muãx
->
magic
 =
FIO_MUTEX_MAGIC
);

24 
	`±hªad_c⁄d_de°roy
(&
muãx
->
c⁄d
);

25 
	`munm≠
((*Ë
muãx
, (*mutex));

26 
	}
}

28 
	$__fio_muãx_öô
(
fio_muãx
 *
muãx
, 
vÆue
)

30 
±hªad_muãx©å_t
 
©å
;

31 
±hªad_c⁄d©å_t
 
c⁄d
;

32 
ªt
;

34 
muãx
->
vÆue
 = value;

35 
muãx
->
magic
 = 
FIO_MUTEX_MAGIC
;

37 
ªt
 = 
	`±hªad_muãx©å_öô
(&
©å
);

38 i‡(
ªt
) {

39 
	`log_îr
("±hªad_muãx©å_öô: %s\n", 
	`°ªº‹
(
ªt
));

40  
ªt
;

46 #ifde‡
FIO_HAVE_PSHARED_MUTEX


47 
ªt
 = 
	`±hªad_muãx©å_£çsh¨ed
(&
©å
, 
PTHREAD_PROCESS_SHARED
);

48 i‡(
ªt
) {

49 
	`log_îr
("±hªad_muãx©å_£çsh¨ed: %s\n", 
	`°ªº‹
(
ªt
));

50  
ªt
;

54 
	`±hªad_c⁄d©å_öô
(&
c⁄d
);

55 #ifde‡
FIO_HAVE_PSHARED_MUTEX


56 
	`±hªad_c⁄d©å_£çsh¨ed
(&
c⁄d
, 
PTHREAD_PROCESS_SHARED
);

58 
	`±hªad_c⁄d_öô
(&
muãx
->
c⁄d
, &cond);

60 
ªt
 = 
	`±hªad_muãx_öô
(&
muãx
->
lock
, &
©å
);

61 i‡(
ªt
) {

62 
	`log_îr
("±hªad_muãx_öô: %s\n", 
	`°ªº‹
(
ªt
));

63  
ªt
;

66 
	`±hªad_c⁄d©å_de°roy
(&
c⁄d
);

67 
	`±hªad_muãx©å_de°roy
(&
©å
);

69 
	}
}

71 
fio_muãx
 *
	$fio_muãx_öô
(
vÆue
)

73 
fio_muãx
 *
muãx
 = 
NULL
;

75 
muãx
 = (*Ë
	`mm≠
(
NULL
, (
fio_muãx
),

76 
PROT_READ
 | 
PROT_WRITE
,

77 
OS_MAP_ANON
 | 
MAP_SHARED
, -1, 0);

78 i‡(
muãx
 =
MAP_FAILED
) {

79 
	`≥º‹
("mmap mutex");

80  
NULL
;

83 i‡(!
	`__fio_muãx_öô
(
muãx
, 
vÆue
))

84  
muãx
;

86 
	`fio_muãx_ªmove
(
muãx
);

87  
NULL
;

88 
	}
}

90 
	$muãx_timed_out
(
timevÆ
 *
t
, 
£c⁄ds
)

92  
	`mtime_sö˚_now
(
t
Ë>
£c⁄ds
 * 1000;

93 
	}
}

95 
	$fio_muãx_down_timeout
(
fio_muãx
 *
muãx
, 
£c⁄ds
)

97 
timevÆ
 
tv_s
;

98 
time•ec
 
t
;

99 
ªt
 = 0;

101 
	`as£π
(
muãx
->
magic
 =
FIO_MUTEX_MAGIC
);

103 
	`gëtimeofday
(&
tv_s
, 
NULL
);

104 
t
.
tv_£c
 = 
tv_s
.tv_£¯+ 
£c⁄ds
;

105 
t
.
tv_n£c
 = 
tv_s
.
tv_u£c
 * 1000;

107 
	`±hªad_muãx_lock
(&
muãx
->
lock
);

109 !
muãx
->
vÆue
 && !
ªt
) {

110 
muãx
->
waôîs
++;

116 
ªt
 = 
	`±hªad_c⁄d_timedwaô
(&
muãx
->
c⁄d
, &muãx->
lock
, &
t
);

117 i‡(
ªt
 =
ETIMEDOUT
 && !
	`muãx_timed_out
(&
tv_s
, 
£c⁄ds
))

118 
ªt
 = 0;

120 
muãx
->
waôîs
--;

123 i‡(!
ªt
) {

124 
muãx
->
vÆue
--;

125 
	`±hªad_muãx_u∆ock
(&
muãx
->
lock
);

128  
ªt
;

129 
	}
}

131 
	$fio_muãx_down_åylock
(
fio_muãx
 *
muãx
)

133 
ªt
 = 1;

135 
	`as£π
(
muãx
->
magic
 =
FIO_MUTEX_MAGIC
);

137 
	`±hªad_muãx_lock
(&
muãx
->
lock
);

138 i‡(
muãx
->
vÆue
) {

139 
muãx
->
vÆue
--;

140 
ªt
 = 0;

142 
	`±hªad_muãx_u∆ock
(&
muãx
->
lock
);

144  
ªt
;

145 
	}
}

147 
	$fio_muãx_down
(
fio_muãx
 *
muãx
)

149 
	`as£π
(
muãx
->
magic
 =
FIO_MUTEX_MAGIC
);

151 
	`±hªad_muãx_lock
(&
muãx
->
lock
);

153 !
muãx
->
vÆue
) {

154 
muãx
->
waôîs
++;

155 
	`±hªad_c⁄d_waô
(&
muãx
->
c⁄d
, &muãx->
lock
);

156 
muãx
->
waôîs
--;

159 
muãx
->
vÆue
--;

160 
	`±hªad_muãx_u∆ock
(&
muãx
->
lock
);

161 
	}
}

163 
	$fio_muãx_up
(
fio_muãx
 *
muãx
)

165 
	`as£π
(
muãx
->
magic
 =
FIO_MUTEX_MAGIC
);

167 
	`±hªad_muãx_lock
(&
muãx
->
lock
);

168 
	`ªad_b¨rõr
();

169 i‡(!
muãx
->
vÆue
 && muãx->
waôîs
)

170 
	`±hªad_c⁄d_sig«l
(&
muãx
->
c⁄d
);

171 
muãx
->
vÆue
++;

172 
	`±hªad_muãx_u∆ock
(&
muãx
->
lock
);

173 
	}
}

175 
	$fio_rwlock_wrôe
(
fio_rwlock
 *
lock
)

177 
	`as£π
(
lock
->
magic
 =
FIO_RWLOCK_MAGIC
);

178 
	`±hªad_rwlock_wæock
(&
lock
->lock);

179 
	}
}

181 
	$fio_rwlock_ªad
(
fio_rwlock
 *
lock
)

183 
	`as£π
(
lock
->
magic
 =
FIO_RWLOCK_MAGIC
);

184 
	`±hªad_rwlock_rdlock
(&
lock
->lock);

185 
	}
}

187 
	$fio_rwlock_u∆ock
(
fio_rwlock
 *
lock
)

189 
	`as£π
(
lock
->
magic
 =
FIO_RWLOCK_MAGIC
);

190 
	`±hªad_rwlock_u∆ock
(&
lock
->lock);

191 
	}
}

193 
	$fio_rwlock_ªmove
(
fio_rwlock
 *
lock
)

195 
	`as£π
(
lock
->
magic
 =
FIO_RWLOCK_MAGIC
);

196 
	`munm≠
((*Ë
lock
, (*lock));

197 
	}
}

199 
fio_rwlock
 *
	$fio_rwlock_öô
()

201 
fio_rwlock
 *
lock
;

202 
±hªad_rwlock©å_t
 
©å
;

203 
ªt
;

205 
lock
 = (*Ë
	`mm≠
(
NULL
, (
fio_rwlock
),

206 
PROT_READ
 | 
PROT_WRITE
,

207 
OS_MAP_ANON
 | 
MAP_SHARED
, -1, 0);

208 i‡(
lock
 =
MAP_FAILED
) {

209 
	`≥º‹
("mmapÑwlock");

210 
lock
 = 
NULL
;

211 
îr
;

214 
lock
->
magic
 = 
FIO_RWLOCK_MAGIC
;

216 
ªt
 = 
	`±hªad_rwlock©å_öô
(&
©å
);

217 i‡(
ªt
) {

218 
	`log_îr
("±hªad_rwlock©å_öô: %s\n", 
	`°ªº‹
(
ªt
));

219 
îr
;

221 #ifde‡
FIO_HAVE_PSHARED_MUTEX


222 
ªt
 = 
	`±hªad_rwlock©å_£çsh¨ed
(&
©å
, 
PTHREAD_PROCESS_SHARED
);

223 i‡(
ªt
) {

224 
	`log_îr
("±hªad_rwlock©å_£çsh¨ed: %s\n", 
	`°ªº‹
(
ªt
));

225 
de°roy_©å
;

228 
ªt
 = 
	`±hªad_rwlock_öô
(&
lock
->lock, &
©å
);

230 
ªt
 = 
	`±hªad_rwlock_öô
(&
lock
->lock, 
NULL
);

233 i‡(
ªt
) {

234 
	`log_îr
("±hªad_rwlock_öô: %s\n", 
	`°ªº‹
(
ªt
));

235 
de°roy_©å
;

238 
	`±hªad_rwlock©å_de°roy
(&
©å
);

240  
lock
;

241 
de°roy_©å
:

242 
	`±hªad_rwlock©å_de°roy
(&
©å
);

243 
îr
:

244 i‡(
lock
)

245 
	`fio_rwlock_ªmove
(
lock
);

246  
NULL
;

247 
	}
}

	@/home/terekhov/tmp/fio/fio/mutex.h

1 #i‚de‡
FIO_MUTEX_H


2 
	#FIO_MUTEX_H


	)

4 
	~<±hªad.h
>

6 
	#FIO_MUTEX_MAGIC
 0x4d555445U

	)

7 
	#FIO_RWLOCK_MAGIC
 0x52574c4fU

	)

9 
	sfio_muãx
 {

10 
±hªad_muãx_t
 
	mlock
;

11 
±hªad_c⁄d_t
 
	mc⁄d
;

12 
	mvÆue
;

13 
	mwaôîs
;

14 
	mmagic
;

17 
	sfio_rwlock
 {

18 
±hªad_rwlock_t
 
	mlock
;

19 
	mmagic
;

23 
	mFIO_MUTEX_LOCKED
 = 0,

24 
	mFIO_MUTEX_UNLOCKED
 = 1,

27 
__fio_muãx_öô
(
fio_muãx
 *, );

28 
fio_muãx
 *
fio_muãx_öô
();

29 
fio_muãx_ªmove
(
fio_muãx
 *);

30 
fio_muãx_up
(
fio_muãx
 *);

31 
fio_muãx_down
(
fio_muãx
 *);

32 
fio_muãx_down_åylock
(
fio_muãx
 *);

33 
fio_muãx_down_timeout
(
fio_muãx
 *, );

35 
fio_rwlock_ªad
(
fio_rwlock
 *);

36 
fio_rwlock_wrôe
(
fio_rwlock
 *);

37 
fio_rwlock_u∆ock
(
fio_rwlock
 *);

38 
fio_rwlock
 *
fio_rwlock_öô
();

39 
fio_rwlock_ªmove
(
fio_rwlock
 *);

	@/home/terekhov/tmp/fio/fio/options.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<uni°d.h
>

4 
	~<˘y≥.h
>

5 
	~<°rög.h
>

6 
	~<as£π.h
>

7 
	~<libgí.h
>

8 
	~<f˙é.h
>

9 
	~<sys/ty≥s.h
>

10 
	~<sys/°©.h
>

12 
	~"fio.h
"

13 
	~"vîify.h
"

14 
	~"∑r£.h
"

15 
	~"lib/Ês.h
"

16 
	~"›ti⁄s.h
"

18 
	~"¸c/¸c32c.h
"

23 *
	$gë_›t_po°fix
(c⁄° *
°r
)

25 *
p
 = 
	`°r°r
(
°r
, ":");

27 i‡(!
p
)

28  
NULL
;

30 
p
++;

31 
	`°rù_bœnk_‰⁄t
(&
p
);

32 
	`°rù_bœnk_íd
(
p
);

33  
	`°rdup
(
p
);

34 
	}
}

36 
	$c⁄vîthexch¨toöt
(
a
)

38 
ba£
;

40 
a
) {

42 
ba£
 = '0';

45 
ba£
 = 'A' - 10;

48 
ba£
 = 'a' - 10;

51 
ba£
 = 0;

53  
a
 - 
ba£
;

54 
	}
}

56 
	$bs_cmp
(c⁄° *
p1
, c⁄° *
p2
)

58 c⁄° 
bs•lô
 *
b•1
 = 
p1
;

59 c⁄° 
bs•lô
 *
b•2
 = 
p2
;

61  
b•1
->
≥rc
 < 
b•2
->perc;

62 
	}
}

64 
	$bs•lô_ddú
(
thªad_›ti⁄s
 *
o
, 
ddú
, *
°r
)

66 
bs•lô
 *bssplit;

67 
i
, 
≥rc
, 
≥rc_missög
;

68 
max_bs
, 
mö_bs
;

69 
vÆ
;

70 *
‚ame
;

72 
o
->
bs•lô_ƒ
[
ddú
] = 4;

73 
bs•lô
 = 
	`mÆloc
(4 * (bssplit));

75 
i
 = 0;

76 
max_bs
 = 0;

77 
mö_bs
 = -1;

78 (
‚ame
 = 
	`°r£p
(&
°r
, ":")Ë!
NULL
) {

79 *
≥rc_°r
;

81 i‡(!
	`°æí
(
‚ame
))

87 i‡(
i
 =
o
->
bs•lô_ƒ
[
ddú
]) {

88 
o
->
bs•lô_ƒ
[
ddú
] <<= 1;

89 
bs•lô
 = 
	`ªÆloc
(bs•lô, 
o
->
bs•lô_ƒ
[
ddú
]

90 * (
bs•lô
));

93 
≥rc_°r
 = 
	`°r°r
(
‚ame
, "/");

94 i‡(
≥rc_°r
) {

95 *
≥rc_°r
 = '\0';

96 
≥rc_°r
++;

97 
≥rc
 = 
	`©oi
(
≥rc_°r
);

98 i‡(
≥rc
 > 100)

99 
≥rc
 = 100;

100 i‡(!
≥rc
)

101 
≥rc
 = -1;

103 
≥rc
 = -1;

105 i‡(
	`°r_to_decimÆ
(
‚ame
, &
vÆ
, 1, 
o
, 0)) {

106 
	`log_îr
("fio: bssplit conversion failed\n");

107 
	`‰ì
(
bs•lô
);

111 i‡(
vÆ
 > 
max_bs
)

112 
max_bs
 = 
vÆ
;

113 i‡(
vÆ
 < 
mö_bs
)

114 
mö_bs
 = 
vÆ
;

116 
bs•lô
[
i
].
bs
 = 
vÆ
;

117 
bs•lô
[
i
].
≥rc
 =Öerc;

118 
i
++;

121 
o
->
bs•lô_ƒ
[
ddú
] = 
i
;

126 
≥rc
 = 
≥rc_missög
 = 0;

127 
i
 = 0; i < 
o
->
bs•lô_ƒ
[
ddú
]; i++) {

128 
bs•lô
 *
b•
 = &bs•lô[
i
];

130 i‡(
b•
->
≥rc
 == () -1)

131 
≥rc_missög
++;

133 
≥rc
 +
b•
->perc;

136 i‡(
≥rc
 > 100) {

137 
	`log_îr
("fio: bssplitÖercentagesáddÅo moreÅhan 100%%\n");

138 
	`‰ì
(
bs•lô
);

145 i‡(
≥rc_missög
) {

146 
i
 = 0; i < 
o
->
bs•lô_ƒ
[
ddú
]; i++) {

147 
bs•lô
 *
b•
 = &bs•lô[
i
];

149 i‡(
b•
->
≥rc
 == () -1)

150 
b•
->
≥rc
 = (100 -ÖîcË/ 
≥rc_missög
;

154 
o
->
mö_bs
[
ddú
] = min_bs;

155 
o
->
max_bs
[
ddú
] = max_bs;

160 
	`qs‹t
(
bs•lô
, 
o
->
bs•lô_ƒ
[
ddú
], (bs•lô), 
bs_cmp
);

161 
o
->
bs•lô
[
ddú
] = bssplit;

163 
	}
}

165 
	$°r_bs•lô_cb
(*
d©a
, c⁄° *
öput
)

167 
thªad_d©a
 *
td
 = 
d©a
;

168 *
°r
, *
p
, *
odú
, *
ddú
;

169 
ªt
 = 0;

171 i‡(
	`∑r£_dryrun
())

174 
p
 = 
°r
 = 
	`°rdup
(
öput
);

176 
	`°rù_bœnk_‰⁄t
(&
°r
);

177 
	`°rù_bœnk_íd
(
°r
);

179 
odú
 = 
	`°rchr
(
°r
, ',');

180 i‡(
odú
) {

181 
ddú
 = 
	`°rchr
(
odú
 + 1, ',');

182 i‡(
ddú
) {

183 
ªt
 = 
	`bs•lô_ddú
(&
td
->
o
, 
DDIR_TRIM
, 
ddú
 + 1);

184 i‡(!
ªt
)

185 *
ddú
 = '\0';

187 *
›
;

189 
›
 = 
	`°rdup
(
odú
 + 1);

190 
ªt
 = 
	`bs•lô_ddú
(&
td
->
o
, 
DDIR_TRIM
, 
›
);

192 
	`‰ì
(
›
);

194 i‡(!
ªt
)

195 
ªt
 = 
	`bs•lô_ddú
(&
td
->
o
, 
DDIR_WRITE
, 
odú
 + 1);

196 i‡(!
ªt
) {

197 *
odú
 = '\0';

198 
ªt
 = 
	`bs•lô_ddú
(&
td
->
o
, 
DDIR_READ
, 
°r
);

201 *
›
;

203 
›
 = 
	`°rdup
(
°r
);

204 
ªt
 = 
	`bs•lô_ddú
(&
td
->
o
, 
DDIR_WRITE
, 
›
);

205 
	`‰ì
(
›
);

207 i‡(!
ªt
) {

208 
›
 = 
	`°rdup
(
°r
);

209 
ªt
 = 
	`bs•lô_ddú
(&
td
->
o
, 
DDIR_TRIM
, 
›
);

210 
	`‰ì
(
›
);

212 
ªt
 = 
	`bs•lô_ddú
(&
td
->
o
, 
DDIR_READ
, 
°r
);

215 
	`‰ì
(
p
);

216  
ªt
;

217 
	}
}

219 
	$°r2îr‹
(*
°r
)

221 c⁄° *
îr
[] = { "EPERM", "ENOENT", "ESRCH", "EINTR", "EIO",

229 
i
 = 0, 
num
 = (
îr
) / (*);

231 
i
 < 
num
) {

232 i‡(!
	`°rcmp
(
îr
[
i
], 
°r
))

233  
i
 + 1;

234 
i
++;

237 
	}
}

239 
	$ign‹e_îr‹_ty≥
(
thªad_d©a
 *
td
, 
ëy≥
, *
°r
)

241 
i
;

242 *
îr‹
;

243 *
‚ame
;

245 i‡(
ëy≥
 >
ERROR_TYPE_CNT
) {

246 
	`log_îr
("IllegalÉrrorÅype\n");

250 
td
->
o
.
ign‹e_îr‹_ƒ
[
ëy≥
] = 4;

251 
îr‹
 = 
	`mÆloc
(4 * (
bs•lô
));

253 
i
 = 0;

254 (
‚ame
 = 
	`°r£p
(&
°r
, ":")Ë!
NULL
) {

256 i‡(!
	`°æí
(
‚ame
))

262 i‡(
i
 =
td
->
o
.
ign‹e_îr‹_ƒ
[
ëy≥
]) {

263 
td
->
o
.
ign‹e_îr‹_ƒ
[
ëy≥
] <<= 1;

264 
îr‹
 = 
	`ªÆloc
”º‹, 
td
->
o
.
ign‹e_îr‹_ƒ
[
ëy≥
]

267 i‡(
‚ame
[0] == 'E') {

268 
îr‹
[
i
] = 
	`°r2îr‹
(
‚ame
);

270 
îr‹
[
i
] = 
	`©oi
(
‚ame
);

271 i‡(
îr‹
[
i
] < 0)

272 
îr‹
[
i
] = -error[i];

274 i‡(!
îr‹
[
i
]) {

275 
	`log_îr
("UnknownÉrror %s,Ölease useÇumber value \n",

276 
‚ame
);

277 
	`‰ì
(
îr‹
);

280 
i
++;

282 i‡(
i
) {

283 
td
->
o
.
c⁄töue_⁄_îr‹
 |1 << 
ëy≥
;

284 
td
->
o
.
ign‹e_îr‹_ƒ
[
ëy≥
] = 
i
;

285 
td
->
o
.
ign‹e_îr‹
[
ëy≥
] = 
îr‹
;

287 
	`‰ì
(
îr‹
);

291 
	}
}

293 
	$°r_ign‹e_îr‹_cb
(*
d©a
, c⁄° *
öput
)

295 
thªad_d©a
 *
td
 = 
d©a
;

296 *
°r
, *
p
, *
n
;

297 
ty≥
 = 0, 
ªt
 = 1;

299 i‡(
	`∑r£_dryrun
())

302 
p
 = 
°r
 = 
	`°rdup
(
öput
);

304 
	`°rù_bœnk_‰⁄t
(&
°r
);

305 
	`°rù_bœnk_íd
(
°r
);

307 
p
) {

308 
n
 = 
	`°rchr
(
p
, ',');

309 i‡(
n
)

310 *
n
++ = '\0';

311 
ªt
 = 
	`ign‹e_îr‹_ty≥
(
td
, 
ty≥
, 
p
);

312 i‡(
ªt
)

314 
p
 = 
n
;

315 
ty≥
++;

317 
	`‰ì
(
°r
);

318  
ªt
;

319 
	}
}

321 
	$°r_rw_cb
(*
d©a
, c⁄° *
°r
)

323 
thªad_d©a
 *
td
 = 
d©a
;

324 
thªad_›ti⁄s
 *
o
 = &
td
->o;

325 *
ƒ
;

327 i‡(
	`∑r£_dryrun
())

330 
o
->
ddú_£q_ƒ
 = 1;

331 
o
->
ddú_£q_add
 = 0;

333 
ƒ
 = 
	`gë_›t_po°fix
(
°r
);

334 i‡(!
ƒ
)

337 i‡(
	`td_øndom
(
td
))

338 
o
->
ddú_£q_ƒ
 = 
	`©oi
(
ƒ
);

340 
vÆ
;

342 i‡(
	`°r_to_decimÆ
(
ƒ
, &
vÆ
, 1, 
o
, 0)) {

343 
	`log_îr
("fio:ÑwÖostfixÖarsing failed\n");

344 
	`‰ì
(
ƒ
);

348 
o
->
ddú_£q_add
 = 
vÆ
;

351 
	`‰ì
(
ƒ
);

353 
	}
}

355 
	$°r_mem_cb
(*
d©a
, c⁄° *
mem
)

357 
thªad_d©a
 *
td
 = 
d©a
;

359 i‡(
td
->
o
.
mem_ty≥
 =
MEM_MMAPHUGE
 ||Åd->o.mem_ty≥ =
MEM_MMAP
)

360 
td
->
o
.
mm≠fûe
 = 
	`gë_›t_po°fix
(
mem
);

363 
	}
}

365 
	$fio_˛ock_sour˚_cb
(*
d©a
, c⁄° *
°r
)

367 
thªad_d©a
 *
td
 = 
d©a
;

369 
fio_˛ock_sour˚
 = 
td
->
o
.
˛ocksour˚
;

370 
fio_˛ock_sour˚_£t
 = 1;

371 
	`fio_˛ock_öô
();

373 
	}
}

375 
	$°r_rwmix_ªad_cb
(*
d©a
, *
vÆ
)

377 
thªad_d©a
 *
td
 = 
d©a
;

379 
td
->
o
.
rwmix
[
DDIR_READ
] = *
vÆ
;

380 
td
->
o
.
rwmix
[
DDIR_WRITE
] = 100 - *
vÆ
;

382 
	}
}

384 
	$°r_rwmix_wrôe_cb
(*
d©a
, *
vÆ
)

386 
thªad_d©a
 *
td
 = 
d©a
;

388 
td
->
o
.
rwmix
[
DDIR_WRITE
] = *
vÆ
;

389 
td
->
o
.
rwmix
[
DDIR_READ
] = 100 - *
vÆ
;

391 
	}
}

393 
	$°r_exôÆl_cb
()

395 
exôÆl_⁄_ãrmö©e
 = 1;

397 
	}
}

399 #ifde‡
FIO_HAVE_CPU_AFFINITY


400 
	$fio_˝us_•lô
(
os_˝u_mask_t
 *
mask
, 
˝u_ödex
)

402 
i
, 
ödex
, 
˝us_ö_mask
;

403 c⁄° 
max_˝u
 = 
	`˝us_⁄löe
();

405 
˝us_ö_mask
 = 
	`fio_˝u_cou¡
(
mask
);

406 
˝u_ödex
 = cpu_ödex % 
˝us_ö_mask
;

408 
ödex
 = 0;

409 
i
 = 0; i < 
max_˝u
; i++) {

410 i‡(!
	`fio_˝u_is£t
(
mask
, 
i
))

413 i‡(
˝u_ödex
 !
ödex
)

414 
	`fio_˝u_˛ór
(
mask
, 
i
);

416 
ödex
++;

419  
	`fio_˝u_cou¡
(
mask
);

420 
	}
}

422 
	$°r_˝umask_cb
(*
d©a
, *
vÆ
)

424 
thªad_d©a
 *
td
 = 
d©a
;

425 
i
;

426 
max_˝u
;

427 
ªt
;

429 i‡(
	`∑r£_dryrun
())

432 
ªt
 = 
	`fio_˝u£t_öô
(&
td
->
o
.
˝umask
);

433 i‡(
ªt
 < 0) {

434 
	`log_îr
("fio: cpuset_init failed\n");

435 
	`td_vîr‹
(
td
, 
ªt
, "fio_cpuset_init");

439 
max_˝u
 = 
	`˝us_⁄löe
();

441 
i
 = 0; i < () * 8; i++) {

442 i‡((1 << 
i
Ë& *
vÆ
) {

443 i‡(
i
 > 
max_˝u
) {

444 
	`log_îr
("fio: CPU %dÅoÿœrgê(max=%ld)\n", 
i
,

445 
max_˝u
);

448 
	`d¥öt
(
FD_PARSE
, "£à˝uáŒowed %d\n", 
i
);

449 
	`fio_˝u_£t
(&
td
->
o
.
˝umask
, 
i
);

453 
td
->
o
.
˝umask_£t
 = 1;

455 
	}
}

457 
	$£t_˝us_Ælowed
(
thªad_d©a
 *
td
, 
os_˝u_mask_t
 *
mask
,

458 c⁄° *
öput
)

460 *
˝u
, *
°r
, *
p
;

461 
max_˝u
;

462 
ªt
 = 0;

464 
ªt
 = 
	`fio_˝u£t_öô
(
mask
);

465 i‡(
ªt
 < 0) {

466 
	`log_îr
("fio: cpuset_init failed\n");

467 
	`td_vîr‹
(
td
, 
ªt
, "fio_cpuset_init");

471 
p
 = 
°r
 = 
	`°rdup
(
öput
);

473 
	`°rù_bœnk_‰⁄t
(&
°r
);

474 
	`°rù_bœnk_íd
(
°r
);

476 
max_˝u
 = 
	`˝us_⁄löe
();

478 (
˝u
 = 
	`°r£p
(&
°r
, ",")Ë!
NULL
) {

479 *
°r2
, *
˝u2
;

480 
i˝u
, 
i˝u2
;

482 i‡(!
	`°æí
(
˝u
))

485 
°r2
 = 
˝u
;

486 
i˝u2
 = -1;

487 (
˝u2
 = 
	`°r£p
(&
°r2
, "-")Ë!
NULL
) {

488 i‡(!
	`°æí
(
˝u2
))

491 
i˝u2
 = 
	`©oi
(
˝u2
);

494 
i˝u
 = 
	`©oi
(
˝u
);

495 i‡(
i˝u2
 == -1)

496 
i˝u2
 = 
i˝u
;

497 
i˝u
 <
i˝u2
) {

498 i‡(
i˝u
 >
FIO_MAX_CPUS
) {

499 
	`log_îr
("fio: your OS only supports upÅo"

500 " %d CPUs\n", (Ë
FIO_MAX_CPUS
);

501 
ªt
 = 1;

504 i‡(
i˝u
 > 
max_˝u
) {

505 
	`log_îr
("fio: CPU %dÅooÜarge (max=%ld)\n",

506 
i˝u
, 
max_˝u
);

507 
ªt
 = 1;

511 
	`d¥öt
(
FD_PARSE
, "£à˝uáŒowed %d\n", 
i˝u
);

512 
	`fio_˝u_£t
(
mask
, 
i˝u
);

513 
i˝u
++;

515 i‡(
ªt
)

519 
	`‰ì
(
p
);

520 i‡(!
ªt
)

521 
td
->
o
.
˝umask_£t
 = 1;

522  
ªt
;

523 
	}
}

525 
	$°r_˝us_Ælowed_cb
(*
d©a
, c⁄° *
öput
)

527 
thªad_d©a
 *
td
 = 
d©a
;

528 
ªt
;

530 i‡(
	`∑r£_dryrun
())

533 
ªt
 = 
	`£t_˝us_Ælowed
(
td
, &td->
o
.
˝umask
, 
öput
);

534 i‡(!
ªt
)

535 
td
->
o
.
˝umask_£t
 = 1;

537  
ªt
;

538 
	}
}

540 
	$°r_vîify_˝us_Ælowed_cb
(*
d©a
, c⁄° *
öput
)

542 
thªad_d©a
 *
td
 = 
d©a
;

543 
ªt
;

545 
ªt
 = 
	`£t_˝us_Ælowed
(
td
, &td->
o
.
vîify_˝umask
, 
öput
);

546 i‡(!
ªt
)

547 
td
->
o
.
vîify_˝umask_£t
 = 1;

549  
ªt
;

550 
	}
}

553 #ifde‡
CONFIG_LIBNUMA


554 
	$°r_numa_˝unodes_cb
(*
d©a
, *
öput
)

556 
thªad_d©a
 *
td
 = 
d©a
;

557 
bômask
 *
vîify_bômask
;

559 i‡(
	`∑r£_dryrun
())

567 
vîify_bômask
 = 
	`numa_∑r£_node°rög
(
öput
);

568 i‡(
vîify_bômask
 =
NULL
) {

569 
	`log_îr
("fio:Çuma_parse_nodestring failed\n");

570 
	`td_vîr‹
(
td
, 1, "str_numa_cpunodes_cb");

573 
	`numa_‰ì_nodemask
(
vîify_bômask
);

575 
td
->
o
.
numa_˝unodes
 = 
	`°rdup
(
öput
);

576 
td
->
o
.
numa_˝umask_£t
 = 1;

578 
	}
}

580 
	$°r_numa_mpﬁ_cb
(*
d©a
, *
öput
)

582 
thªad_d©a
 *
td
 = 
d©a
;

583 c⁄° * c⁄° 
pﬁicy_ty≥s
[] =

584 { "deÁu…", "¥e„r", "böd", "öãæóve", "loˇl", 
NULL
 };

585 
i
;

586 *
nodñi°
;

587 
bômask
 *
vîify_bômask
;

589 i‡(
	`∑r£_dryrun
())

592 
nodñi°
 = 
	`°rchr
(
öput
, ':');

593 i‡(
nodñi°
) {

595 *
nodñi°
++ = '\0';

598 
i
 = 0; i <
MPOL_LOCAL
; i++) {

599 i‡(!
	`°rcmp
(
öput
, 
pﬁicy_ty≥s
[
i
])) {

600 
td
->
o
.
numa_mem_mode
 = 
i
;

604 i‡(
i
 > 
MPOL_LOCAL
) {

605 
	`log_îr
("fio: memoryÖolicy should be: default,Örefer, bind, interleave,Üocal\n");

606 
out
;

609 
td
->
o
.
numa_mem_mode
) {

610 
MPOL_PREFERRED
:

614 i‡(
nodñi°
) {

615 *
ª°
 = 
nodñi°
;

616 
	`isdigô
(*
ª°
))

617 
ª°
++;

618 i‡(*
ª°
) {

619 
	`log_îr
("fio: oneÇode only for \'prefer\'\n");

620 
out
;

623 
	`log_îr
("fio: oneÇode isÇeeded for \'prefer\'\n");

624 
out
;

627 
MPOL_INTERLEAVE
:

631 i‡(!
nodñi°
)

632 
nodñi°
 = 
	`°rdup
("all");

634 
MPOL_LOCAL
:

635 
MPOL_DEFAULT
:

639 i‡(
nodñi°
) {

640 
	`log_îr
("fio: NOÇodelist for \'local\'\n");

641 
out
;

644 
MPOL_BIND
:

648 i‡(!
nodñi°
) {

649 
	`log_îr
("fio:áÇodelist isÇeeded for \'bind\'\n");

650 
out
;

661 
td
->
o
.
numa_mem_mode
) {

662 
MPOL_PREFERRED
:

663 
td
->
o
.
numa_mem_¥e„r_node
 = 
	`©oi
(
nodñi°
);

665 
MPOL_INTERLEAVE
:

666 
MPOL_BIND
:

667 
vîify_bômask
 = 
	`numa_∑r£_node°rög
(
nodñi°
);

668 i‡(
vîify_bômask
 =
NULL
) {

669 
	`log_îr
("fio:Çuma_parse_nodestring failed\n");

670 
	`td_vîr‹
(
td
, 1, "str_numa_memnodes_cb");

673 
td
->
o
.
numa_memnodes
 = 
	`°rdup
(
nodñi°
);

674 
	`numa_‰ì_nodemask
(
vîify_bômask
);

677 
MPOL_LOCAL
:

678 
MPOL_DEFAULT
:

683 
td
->
o
.
numa_memmask_£t
 = 1;

686 
out
:

688 
	}
}

691 
	$°r_f°_cb
(*
d©a
, c⁄° *
°r
)

693 
thªad_d©a
 *
td
 = 
d©a
;

694 *
ƒ
 = 
	`gë_›t_po°fix
(
°r
);

696 
td
->
fûe_£rvi˚_ƒ
 = 1;

697 i‡(
ƒ
) {

698 
td
->
fûe_£rvi˚_ƒ
 = 
	`©oi
(
ƒ
);

699 
	`‰ì
(
ƒ
);

703 
	}
}

705 #ifde‡
CONFIG_SYNC_FILE_RANGE


706 
	$°r_s‰_cb
(*
d©a
, c⁄° *
°r
)

708 
thªad_d©a
 *
td
 = 
d©a
;

709 *
ƒ
 = 
	`gë_›t_po°fix
(
°r
);

711 
td
->
sync_fûe_ønge_ƒ
 = 1;

712 i‡(
ƒ
) {

713 
td
->
sync_fûe_ønge_ƒ
 = 
	`©oi
(
ƒ
);

714 
	`‰ì
(
ƒ
);

718 
	}
}

721 
	$°r_øndom_di°ributi⁄_cb
(*
d©a
, c⁄° *
°r
)

723 
thªad_d©a
 *
td
 = 
d©a
;

724 
vÆ
;

725 *
ƒ
;

727 i‡(
	`∑r£_dryrun
())

730 i‡(
td
->
o
.
øndom_di°ributi⁄
 =
FIO_RAND_DIST_ZIPF
)

731 
vÆ
 = 1.1;

732 i‡(
td
->
o
.
øndom_di°ributi⁄
 =
FIO_RAND_DIST_PARETO
)

733 
vÆ
 = 0.2;

737 
ƒ
 = 
	`gë_›t_po°fix
(
°r
);

738 i‡(
ƒ
 && !
	`°r_to_Êﬂt
“r, &
vÆ
)) {

739 
	`log_îr
("fio:ÑandomÖostfixÖarsing failed\n");

740 
	`‰ì
(
ƒ
);

744 
	`‰ì
(
ƒ
);

746 i‡(
td
->
o
.
øndom_di°ributi⁄
 =
FIO_RAND_DIST_ZIPF
) {

747 i‡(
vÆ
 == 1.00) {

748 
	`log_îr
("fio: zipfÅheta must differentÅhan 1.0\n");

751 
td
->
o
.
zùf_thëa
.
u
.
f
 = 
vÆ
;

753 i‡(
vÆ
 <= 0.00 || val >= 1.00) {

754 
	`log_îr
("fio:Öareto input out ofÑange (0 < input < 1.0)\n");

757 
td
->
o
.
∑ªto_h
.
u
.
f
 = 
vÆ
;

761 
	}
}

768 *
	$gë_√xt_«me
(**
±r
)

770 *
°r
 = *
±r
;

771 *
p
, *
°¨t
;

773 i‡(!
°r
 || !
	`°æí
(str))

774  
NULL
;

776 
°¨t
 = 
°r
;

781 
p
 = 
	`°rchr
(
°r
, ':');

782 i‡(!
p
) {

783 *
±r
 = 
NULL
;

791 i‡(
p
 =
°¨t
) {

792 
°r
 = ++
°¨t
;

796 i‡(*(
p
 - 1) != '\\') {

797 *
p
 = '\0';

798 *
±r
 = 
p
 + 1;

802 
	`memmove
(
p
 - 1,Ö, 
	`°æí
(p) + 1);

803 
°r
 = 
p
;

806  
°¨t
;

807 
	}
}

810 
	$gë_max_«me_idx
(*
öput
)

812 
cur_idx
;

813 *
°r
, *
p
;

815 
p
 = 
°r
 = 
	`°rdup
(
öput
);

816 
cur_idx
 = 0; ; cur_idx++)

817 i‡(
	`gë_√xt_«me
(&
°r
Ë=
NULL
)

820 
	`‰ì
(
p
);

821  
cur_idx
;

822 
	}
}

828 
	$£t_«me_idx
(*
èrgë
, *
öput
, 
ödex
)

830 
cur_idx
;

831 
Àn
;

832 *
‚ame
, *
°r
, *
p
;

834 
p
 = 
°r
 = 
	`°rdup
(
öput
);

836 
ödex
 %
	`gë_max_«me_idx
(
öput
);

837 
cur_idx
 = 0; cur_idx <
ödex
; cur_idx++)

838 
‚ame
 = 
	`gë_√xt_«me
(&
°r
);

840 
Àn
 = 
	`•rötf
(
èrgë
, "%s/", 
‚ame
);

841 
	`‰ì
(
p
);

843  
Àn
;

844 
	}
}

846 
	$°r_fûíame_cb
(*
d©a
, c⁄° *
öput
)

848 
thªad_d©a
 *
td
 = 
d©a
;

849 *
‚ame
, *
°r
, *
p
;

851 
p
 = 
°r
 = 
	`°rdup
(
öput
);

853 
	`°rù_bœnk_‰⁄t
(&
°r
);

854 
	`°rù_bœnk_íd
(
°r
);

856 i‡(!
td
->
fûes_ödex
)

857 
td
->
o
.
ƒ_fûes
 = 0;

859 (
‚ame
 = 
	`gë_√xt_«me
(&
°r
)Ë!
NULL
) {

860 i‡(!
	`°æí
(
‚ame
))

862 
	`add_fûe
(
td
, 
‚ame
, 0, 1);

865 
	`‰ì
(
p
);

867 
	}
}

869 
	$°r_dúe˘‹y_cb
(*
d©a
, c⁄° 
fio_unu£d
 *
unu£d
)

871 
thªad_d©a
 *
td
 = 
d©a
;

872 
°©
 
sb
;

873 *
dú«me
, *
°r
, *
p
;

874 
ªt
 = 0;

876 i‡(
	`∑r£_dryrun
())

879 
p
 = 
°r
 = 
	`°rdup
(
td
->
o
.
dúe˘‹y
);

880 (
dú«me
 = 
	`gë_√xt_«me
(&
°r
)Ë!
NULL
) {

881 i‡(
	`l°©
(
dú«me
, &
sb
) < 0) {

882 
ªt
 = 
î∫o
;

884 
	`log_îr
("fio: %†i†nŸá dúe˘‹y\n", 
dú«me
);

885 
	`td_vîr‹
(
td
, 
ªt
, "lstat");

886 
out
;

888 i‡(!
	`S_ISDIR
(
sb
.
°_mode
)) {

889 
	`log_îr
("fio: %†i†nŸá dúe˘‹y\n", 
dú«me
);

890 
ªt
 = 1;

891 
out
;

895 
out
:

896 
	`‰ì
(
p
);

897  
ªt
;

898 
	}
}

900 
	$°r_lockfûe_cb
(*
d©a
, c⁄° 
fio_unu£d
 *
°r
)

902 
thªad_d©a
 *
td
 = 
d©a
;

904 i‡(
td
->
fûes_ödex
) {

905 
	`log_îr
("fio:Üockfile= option mustÖrecede filename=\n");

910 
	}
}

912 
	$°r_›ídú_cb
(*
d©a
, c⁄° 
fio_unu£d
 *
°r
)

914 
thªad_d©a
 *
td
 = 
d©a
;

916 i‡(
	`∑r£_dryrun
())

919 i‡(!
td
->
fûes_ödex
)

920 
td
->
o
.
ƒ_fûes
 = 0;

922  
	`add_dú_fûes
(
td
,Åd->
o
.
›ídú
);

923 
	}
}

925 
	$∑âîn_cb
(*
∑âîn
, 
max_size
,

926 c⁄° *
öput
, *
∑âîn_byãs
)

928 
off
;

929 
i
 = 0, 
j
 = 0, 
Àn
, 
k
, 
ba£
 = 10;

930 
uöt32_t
 
∑âîn_Àngth
;

931 *
loc1
, *
loc2
;

933 
loc1
 = 
	`°r°r
(
öput
, "0x");

934 
loc2
 = 
	`°r°r
(
öput
, "0X");

935 i‡(
loc1
 || 
loc2
)

936 
ba£
 = 16;

937 
off
 = 
	`°πﬁ
(
öput
, 
NULL
, 
ba£
);

938 i‡(
off
 !
LONG_MAX
 || 
î∫o
 !
ERANGE
) {

939 
off
) {

940 
∑âîn
[
i
] = 
off
 & 0xff;

941 
off
 >>= 8;

942 
i
++;

945 
Àn
 = 
	`°æí
(
öput
);

946 
k
 = 
Àn
 - 1;

947 i‡(
ba£
 == 16) {

948 i‡(
loc1
)

949 
j
 = 
loc1
 - 
öput
 + 2;

951 
j
 = 
loc2
 - 
öput
 + 2;

954 i‡(
Àn
 - 
j
 < 
max_size
 * 2) {

955 
k
 >
j
) {

956 
off
 = 
	`c⁄vîthexch¨toöt
(
öput
[
k
--]);

957 i‡(
k
 >
j
)

958 
off
 +(
	`c⁄vîthexch¨toöt
(
öput
[
k
--])

960 
∑âîn
[
i
++] = (Ë
off
;

969 
∑âîn_Àngth
 = 
i
;

970 
i
 > 1 && i * 2 <
max_size
) {

971 
	`mem˝y
(&
∑âîn
[
i
], &pattern[0], i);

972 
i
 *= 2;

979 
i
 > 1 && i < 
max_size
) {

980 
b
 = 
	`mö
(
∑âîn_Àngth
, 
max_size
 - 
i
);

982 
	`mem˝y
(&
∑âîn
[
i
], &∑âîn[0], 
b
);

983 
i
 +
b
;

986 i‡(
i
 == 1) {

991 
	`mem£t
(
∑âîn
,Ö©ã∫[0], 
max_size
);

994 *
∑âîn_byãs
 = 
i
;

996 
	}
}

998 
	$°r_buf„r_∑âîn_cb
(*
d©a
, c⁄° *
öput
)

1000 
thªad_d©a
 *
td
 = 
d©a
;

1001 
ªt
;

1003 
ªt
 = 
	`∑âîn_cb
(
td
->
o
.
buf„r_∑âîn
, 
MAX_PATTERN_SIZE
, 
öput
,

1004 &
td
->
o
.
buf„r_∑âîn_byãs
);

1006 i‡(!
ªt
) {

1007 
td
->
o
.
ªfûl_buf„rs
 = 0;

1008 
td
->
o
.
s¸ambÀ_buf„rs
 = 0;

1009 
td
->
o
.
zîo_buf„rs
 = 0;

1012  
ªt
;

1013 
	}
}

1015 
	$°r_buf„r_com¥ess_cb
(*
d©a
, *
û
)

1017 
thªad_d©a
 *
td
 = 
d©a
;

1019 
td
->
Êags
 |
TD_F_COMPRESS
;

1020 
td
->
o
.
com¥ess_≥r˚¡age
 = *
û
;

1022 
	}
}

1024 
	$°r_vîify_∑âîn_cb
(*
d©a
, c⁄° *
öput
)

1026 
thªad_d©a
 *
td
 = 
d©a
;

1027 
ªt
;

1029 
ªt
 = 
	`∑âîn_cb
(
td
->
o
.
vîify_∑âîn
, 
MAX_PATTERN_SIZE
, 
öput
,

1030 &
td
->
o
.
vîify_∑âîn_byãs
);

1035 i‡(!
ªt
 && 
td
->
o
.
vîify
 =
VERIFY_NONE
)

1036 
td
->
o
.
vîify
 = 
VERIFY_PATTERN
;

1038  
ªt
;

1039 
	}
}

1041 
	$°r_gtod_ªdu˚_cb
(*
d©a
, *
û
)

1043 
thªad_d©a
 *
td
 = 
d©a
;

1044 
vÆ
 = *
û
;

1046 
td
->
o
.
dißbÀ_œt
 = !!
vÆ
;

1047 
td
->
o
.
dißbÀ_˛©
 = !!
vÆ
;

1048 
td
->
o
.
dißbÀ_¶©
 = !!
vÆ
;

1049 
td
->
o
.
dißbÀ_bw
 = !!
vÆ
;

1050 
td
->
o
.
˛©_≥r˚¡ûes
 = !
vÆ
;

1051 i‡(
vÆ
)

1052 
td
->
tv_ˇche_mask
 = 63;

1055 
	}
}

1057 
	$°r_gtod_˝u_cb
(*
d©a
, *
û
)

1059 
thªad_d©a
 *
td
 = 
d©a
;

1060 
vÆ
 = *
û
;

1062 
td
->
o
.
gtod_˝u
 = 
vÆ
;

1063 
td
->
o
.
gtod_ofÊﬂd
 = 1;

1065 
	}
}

1067 
	$°r_size_cb
(*
d©a
, *
__vÆ
)

1069 
thªad_d©a
 *
td
 = 
d©a
;

1070 
v
 = *
__vÆ
;

1072 i‡(
	`∑r£_is_≥r˚¡
(
v
)) {

1073 
td
->
o
.
size
 = 0;

1074 
td
->
o
.
size_≥r˚¡
 = -1ULL - 
v
;

1076 
td
->
o
.
size
 = 
v
;

1079 
	}
}

1081 
	$rw_vîify
(
fio_›ti⁄
 *
o
, *
d©a
)

1083 
thªad_d©a
 *
td
 = 
d©a
;

1085 i‡(
ªad_⁄ly
 && 
	`td_wrôe
(
td
)) {

1086 
	`log_îr
("fio: job <%s> has write bit set, but fio is in"

1087 "Ñód-⁄ly mode\n", 
td
->
o
.
«me
);

1092 
	}
}

1094 
	$gtod_˝u_vîify
(
fio_›ti⁄
 *
o
, *
d©a
)

1096 #i‚de‡
FIO_HAVE_CPU_AFFINITY


1097 
thªad_d©a
 *
td
 = 
d©a
;

1099 i‡(
td
->
o
.
gtod_˝u
) {

1100 
	`log_îr
("fio:Ölatform must support CPUáffinity for"

1107 
	}
}

1112 
›t_group
 
	gfio_›t_groups
[] = {

1114 .
«me
 = "General",

1115 .
	gmask
 = 
FIO_OPT_C_GENERAL
,

1118 .
	g«me
 = "I/O",

1119 .
	gmask
 = 
FIO_OPT_C_IO
,

1122 .
	g«me
 = "File",

1123 .
	gmask
 = 
FIO_OPT_C_FILE
,

1126 .
	g«me
 = "Statistics",

1127 .
	gmask
 = 
FIO_OPT_C_STAT
,

1130 .
	g«me
 = "Logging",

1131 .
	gmask
 = 
FIO_OPT_C_LOG
,

1134 .
	g«me
 = "Profiles",

1135 .
	gmask
 = 
FIO_OPT_C_PROFILE
,

1138 .
	g«me
 = 
NULL
,

1142 
›t_group
 *
	$__›t_group_‰om_mask
(
›t_group
 *
ogs
, *
mask
,

1143 
öv_mask
)

1145 
›t_group
 *
og
;

1146 
i
;

1148 i‡(*
mask
 =
öv_mask
 || !*mask)

1149  
NULL
;

1151 
i
 = 0; 
ogs
[i].
«me
; i++) {

1152 
og
 = &
ogs
[
i
];

1154 i‡(*
mask
 & 
og
->mask) {

1155 *
mask
 &~(
og
->mask);

1156  
og
;

1160  
NULL
;

1161 
	}
}

1163 
›t_group
 *
	$›t_group_‰om_mask
(*
mask
)

1165  
	`__›t_group_‰om_mask
(
fio_›t_groups
, 
mask
, 
FIO_OPT_C_INVALID
);

1166 
	}
}

1168 
›t_group
 
	gfio_›t_ˇt_groups
[] = {

1170 .
«me
 = "LatencyÖrofiling",

1171 .
	gmask
 = 
FIO_OPT_G_LATPROF
,

1174 .
	g«me
 = "Rate",

1175 .
	gmask
 = 
FIO_OPT_G_RATE
,

1178 .
	g«me
 = "Zone",

1179 .
	gmask
 = 
FIO_OPT_G_ZONE
,

1182 .
	g«me
 = "Read/write mix",

1183 .
	gmask
 = 
FIO_OPT_G_RWMIX
,

1186 .
	g«me
 = "Verify",

1187 .
	gmask
 = 
FIO_OPT_G_VERIFY
,

1190 .
	g«me
 = "Trim",

1191 .
	gmask
 = 
FIO_OPT_G_TRIM
,

1194 .
	g«me
 = "I/O Logging",

1195 .
	gmask
 = 
FIO_OPT_G_IOLOG
,

1198 .
	g«me
 = "I/O Depth",

1199 .
	gmask
 = 
FIO_OPT_G_IO_DEPTH
,

1202 .
	g«me
 = "I/O Flow",

1203 .
	gmask
 = 
FIO_OPT_G_IO_FLOW
,

1206 .
	g«me
 = "Description",

1207 .
	gmask
 = 
FIO_OPT_G_DESC
,

1210 .
	g«me
 = "Filename",

1211 .
	gmask
 = 
FIO_OPT_G_FILENAME
,

1214 .
	g«me
 = "General I/O",

1215 .
	gmask
 = 
FIO_OPT_G_IO_BASIC
,

1218 .
	g«me
 = "Cgroups",

1219 .
	gmask
 = 
FIO_OPT_G_CGROUP
,

1222 .
	g«me
 = "Runtime",

1223 .
	gmask
 = 
FIO_OPT_G_RUNTIME
,

1226 .
	g«me
 = "Process",

1227 .
	gmask
 = 
FIO_OPT_G_PROCESS
,

1230 .
	g«me
 = "Job credentials /Öriority",

1231 .
	gmask
 = 
FIO_OPT_G_CRED
,

1234 .
	g«me
 = "Clock settings",

1235 .
	gmask
 = 
FIO_OPT_G_CLOCK
,

1238 .
	g«me
 = "I/O Type",

1239 .
	gmask
 = 
FIO_OPT_G_IO_TYPE
,

1242 .
	g«me
 = "I/O Thinktime",

1243 .
	gmask
 = 
FIO_OPT_G_THINKTIME
,

1246 .
	g«me
 = "Randomizations",

1247 .
	gmask
 = 
FIO_OPT_G_RANDOM
,

1250 .
	g«me
 = "I/O buffers",

1251 .
	gmask
 = 
FIO_OPT_G_IO_BUF
,

1254 .
	g«me
 = "TiobenchÖrofile",

1255 .
	gmask
 = 
FIO_OPT_G_TIOBENCH
,

1259 .
	g«me
 = 
NULL
,

1263 
›t_group
 *
	$›t_group_ˇt_‰om_mask
(*
mask
)

1265  
	`__›t_group_‰om_mask
(
fio_›t_ˇt_groups
, 
mask
, 
FIO_OPT_G_INVALID
);

1266 
	}
}

1271 
fio_›ti⁄
 
	gfio_›ti⁄s
[
FIO_MAX_OPTS
] = {

1273 .
«me
 = "description",

1274 .
	g ame
 = "Description of job",

1275 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

1276 .
	goff1
 = 
td_v¨_off£t
(
des¸ùti⁄
),

1277 .
	ghñp
 = "Text job description",

1278 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

1279 .
	ggroup
 = 
FIO_OPT_G_DESC
,

1282 .
	g«me
 = "name",

1283 .
	g ame
 = "JobÇame",

1284 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

1285 .
	goff1
 = 
td_v¨_off£t
(
«me
),

1286 .
	ghñp
 = "Name ofÅhis job",

1287 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

1288 .
	ggroup
 = 
FIO_OPT_G_DESC
,

1291 .
	g«me
 = "filename",

1292 .
	g ame
 = "Filename(s)",

1293 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

1294 .
	goff1
 = 
td_v¨_off£t
(
fûíame
),

1295 .
	gcb
 = 
°r_fûíame_cb
,

1296 .
	g¥io
 = -1,

1297 .
	ghñp
 = "File(s)Åo use forÅhe workload",

1298 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

1299 .
	ggroup
 = 
FIO_OPT_G_FILENAME
,

1302 .
	g«me
 = "directory",

1303 .
	g ame
 = "Directory",

1304 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

1305 .
	goff1
 = 
td_v¨_off£t
(
dúe˘‹y
),

1306 .
	gcb
 = 
°r_dúe˘‹y_cb
,

1307 .
	ghñp
 = "DirectoryÅo store files in",

1308 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

1309 .
	ggroup
 = 
FIO_OPT_G_FILENAME
,

1312 .
	g«me
 = "filename_format",

1313 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

1314 .
	goff1
 = 
td_v¨_off£t
(
fûíame_f‹m©
),

1315 .
	g¥io
 = -1,

1316 .
	ghñp
 = "Override default $jobname.$jobnum.$filenumÇaming",

1317 .
	gdef
 = "$jobname.$jobnum.$filenum",

1318 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

1319 .
	ggroup
 = 
FIO_OPT_G_FILENAME
,

1322 .
	g«me
 = "lockfile",

1323 .
	g ame
 = "Lockfile",

1324 .
	gty≥
 = 
FIO_OPT_STR
,

1325 .
	goff1
 = 
td_v¨_off£t
(
fûe_lock_mode
),

1326 .
	ghñp
 = "Lock file when doing IOÅo it",

1327 .
	g¥io
 = 1,

1328 .
	g∑ª¡
 = "filename",

1329 .
	ghide
 = 0,

1330 .
	gdef
 = "none",

1331 .
	gcb
 = 
°r_lockfûe_cb
,

1332 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

1333 .
	ggroup
 = 
FIO_OPT_G_FILENAME
,

1334 .
	gposvÆ
 = {

1335 { .
ivÆ
 = "none",

1336 .
	govÆ
 = 
FILE_LOCK_NONE
,

1337 .
	ghñp
 = "No fileÜocking",

1339 { .
	givÆ
 = "exclusive",

1340 .
	govÆ
 = 
FILE_LOCK_EXCLUSIVE
,

1341 .
	ghñp
 = "Exclusive fileÜock",

1344 .
	givÆ
 = "readwrite",

1345 .
	govÆ
 = 
FILE_LOCK_READWRITE
,

1346 .
	ghñp
 = "Read vs writeÜock",

1351 .
	g«me
 = "opendir",

1352 .
	g ame
 = "Open directory",

1353 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

1354 .
	goff1
 = 
td_v¨_off£t
(
›ídú
),

1355 .
	gcb
 = 
°r_›ídú_cb
,

1356 .
	ghñp
 = "Recursivelyádd files fromÅhis directoryánd down",

1357 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

1358 .
	ggroup
 = 
FIO_OPT_G_FILENAME
,

1361 .
	g«me
 = "rw",

1362 .
	g ame
 = "Read/write",

1363 .
	gÆüs
 = "readwrite",

1364 .
	gty≥
 = 
FIO_OPT_STR
,

1365 .
	gcb
 = 
°r_rw_cb
,

1366 .
	goff1
 = 
td_v¨_off£t
(
td_ddú
),

1367 .
	ghñp
 = "IO direction",

1368 .
	gdef
 = "read",

1369 .
	gvîify
 = 
rw_vîify
,

1370 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

1371 .
	ggroup
 = 
FIO_OPT_G_IO_BASIC
,

1372 .
	gposvÆ
 = {

1373 { .
ivÆ
 = "read",

1374 .
	govÆ
 = 
TD_DDIR_READ
,

1375 .
	ghñp
 = "SequentialÑead",

1377 { .
	givÆ
 = "write",

1378 .
	govÆ
 = 
TD_DDIR_WRITE
,

1379 .
	ghñp
 = "Sequential write",

1381 { .
	givÆ
 = "trim",

1382 .
	govÆ
 = 
TD_DDIR_TRIM
,

1383 .
	ghñp
 = "SequentialÅrim",

1385 { .
	givÆ
 = "randread",

1386 .
	govÆ
 = 
TD_DDIR_RANDREAD
,

1387 .
	ghñp
 = "RandomÑead",

1389 { .
	givÆ
 = "randwrite",

1390 .
	govÆ
 = 
TD_DDIR_RANDWRITE
,

1391 .
	ghñp
 = "Random write",

1393 { .
	givÆ
 = "randtrim",

1394 .
	govÆ
 = 
TD_DDIR_RANDTRIM
,

1395 .
	ghñp
 = "RandomÅrim",

1397 { .
	givÆ
 = "rw",

1398 .
	govÆ
 = 
TD_DDIR_RW
,

1399 .
	ghñp
 = "SequentialÑeadánd write mix",

1401 { .
	givÆ
 = "readwrite",

1402 .
	govÆ
 = 
TD_DDIR_RW
,

1403 .
	ghñp
 = "SequentialÑeadánd write mix",

1405 { .
	givÆ
 = "randrw",

1406 .
	govÆ
 = 
TD_DDIR_RANDRW
,

1407 .
	ghñp
 = "RandomÑeadánd write mix"

1412 .
	g«me
 = "rw_sequencer",

1413 .
	g ame
 = "RW Sequencer",

1414 .
	gty≥
 = 
FIO_OPT_STR
,

1415 .
	goff1
 = 
td_v¨_off£t
(
rw_£q
),

1416 .
	ghñp
 = "IO offset generator modifier",

1417 .
	gdef
 = "sequential",

1418 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

1419 .
	ggroup
 = 
FIO_OPT_G_IO_BASIC
,

1420 .
	gposvÆ
 = {

1421 { .
ivÆ
 = "sequential",

1422 .
	govÆ
 = 
RW_SEQ_SEQ
,

1423 .
	ghñp
 = "Generate sequential offsets",

1425 { .
	givÆ
 = "identical",

1426 .
	govÆ
 = 
RW_SEQ_IDENT
,

1427 .
	ghñp
 = "Generate identical offsets",

1433 .
	g«me
 = "ioengine",

1434 .
	g ame
 = "IO Engine",

1435 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

1436 .
	goff1
 = 
td_v¨_off£t
(
i€ngöe
),

1437 .
	ghñp
 = "IOÉngineÅo use",

1438 .
	gdef
 = 
FIO_PREFERRED_ENGINE
,

1439 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

1440 .
	ggroup
 = 
FIO_OPT_G_IO_BASIC
,

1441 .
	gposvÆ
 = {

1442 { .
ivÆ
 = "sync",

1443 .
	ghñp
 = "UseÑead/write",

1445 { .
	givÆ
 = "psync",

1446 .
	ghñp
 = "UseÖread/pwrite",

1448 { .
	givÆ
 = "vsync",

1449 .
	ghñp
 = "UseÑeadv/writev",

1451 #ifde‡
CONFIG_PWRITEV


1452 { .
	givÆ
 = "pvsync",

1453 .
	ghñp
 = "UseÖreadv/pwritev",

1456 #ifde‡
CONFIG_LIBAIO


1457 { .
	givÆ
 = "libaio",

1458 .
	ghñp
 = "LinuxÇativeásynchronous IO",

1461 #ifde‡
CONFIG_POSIXAIO


1462 { .
	givÆ
 = "posixaio",

1463 .
	ghñp
 = "POSIXásynchronous IO",

1466 #ifde‡
CONFIG_SOLARISAIO


1467 { .
	givÆ
 = "solarisaio",

1468 .
	ghñp
 = "SolarisÇativeásynchronous IO",

1471 #ifde‡
CONFIG_WINDOWSAIO


1472 { .
	givÆ
 = "windowsaio",

1473 .
	ghñp
 = "WindowsÇativeásynchronous IO"

1476 #ifde‡
CONFIG_RBD


1477 { .
	givÆ
 = "rbd",

1478 .
	ghñp
 = "Rados Block Deviceásynchronous IO"

1481 { .
	givÆ
 = "mmap",

1482 .
	ghñp
 = "Memory mapped IO"

1484 #ifde‡
CONFIG_LINUX_SPLICE


1485 { .
	givÆ
 = "splice",

1486 .
	ghñp
 = "splice/vmsplice based IO",

1488 { .
	givÆ
 = "netsplice",

1489 .
	ghñp
 = "splice/vmspliceÅo/fromÅheÇetwork",

1492 #ifde‡
FIO_HAVE_SGIO


1493 { .
	givÆ
 = "sg",

1494 .
	ghñp
 = "SCSI generic v3 IO",

1497 { .
	givÆ
 = "null",

1498 .
	ghñp
 = "TestingÉngine (no dataÅransfer)",

1500 { .
	givÆ
 = "net",

1501 .
	ghñp
 = "Network IO",

1503 { .
	givÆ
 = "cpuio",

1504 .
	ghñp
 = "CPU cycle burnerÉngine",

1506 #ifde‡
CONFIG_GUASI


1507 { .
	givÆ
 = "guasi",

1508 .
	ghñp
 = "GUASI IOÉngine",

1511 #ifde‡
FIO_HAVE_BINJECT


1512 { .
	givÆ
 = "binject",

1513 .
	ghñp
 = "binject direct inject blockÉngine",

1516 #ifde‡
CONFIG_RDMA


1517 { .
	givÆ
 = "rdma",

1518 .
	ghñp
 = "RDMA IOÉngine",

1521 #ifde‡
CONFIG_FUSION_AW


1522 { .
	givÆ
 = "fusion-aw-sync",

1523 .
	ghñp
 = "Fusion-ioátomic writeÉngine",

1526 #ifde‡
CONFIG_LINUX_EXT4_MOVE_EXTENT


1527 { .
	givÆ
 = "e4defrag",

1528 .
	ghñp
 = "ext4 defragÉngine",

1531 #ifde‡
CONFIG_LINUX_FALLOCATE


1532 { .
	givÆ
 = "falloc",

1533 .
	ghñp
 = "fallocate() file basedÉngine",

1536 { .
	givÆ
 = "external",

1537 .
	ghñp
 = "LoadÉxternalÉngine (appendÇame)",

1542 .
	g«me
 = "iodepth",

1543 .
	g ame
 = "IO Depth",

1544 .
	gty≥
 = 
FIO_OPT_INT
,

1545 .
	goff1
 = 
td_v¨_off£t
(
iodïth
),

1546 .
	ghñp
 = "Number of IO buffersÅo keep in flight",

1547 .
	gmövÆ
 = 1,

1548 .
	göãrvÆ
 = 1,

1549 .
	gdef
 = "1",

1550 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

1551 .
	ggroup
 = 
FIO_OPT_G_IO_BASIC
,

1554 .
	g«me
 = "iodepth_batch",

1555 .
	g ame
 = "IO Depth batch",

1556 .
	gÆüs
 = "iodepth_batch_submit",

1557 .
	gty≥
 = 
FIO_OPT_INT
,

1558 .
	goff1
 = 
td_v¨_off£t
(
iodïth_b©ch
),

1559 .
	ghñp
 = "Number of IO buffersÅo submit in one go",

1560 .
	g∑ª¡
 = "iodepth",

1561 .
	ghide
 = 1,

1562 .
	gmövÆ
 = 1,

1563 .
	göãrvÆ
 = 1,

1564 .
	gdef
 = "1",

1565 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

1566 .
	ggroup
 = 
FIO_OPT_G_IO_BASIC
,

1569 .
	g«me
 = "iodepth_batch_complete",

1570 .
	g ame
 = "IO Depth batch complete",

1571 .
	gty≥
 = 
FIO_OPT_INT
,

1572 .
	goff1
 = 
td_v¨_off£t
(
iodïth_b©ch_com∂ëe
),

1573 .
	ghñp
 = "Number of IO buffersÅoÑetrieve in one go",

1574 .
	g∑ª¡
 = "iodepth",

1575 .
	ghide
 = 1,

1576 .
	gmövÆ
 = 0,

1577 .
	göãrvÆ
 = 1,

1578 .
	gdef
 = "1",

1579 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

1580 .
	ggroup
 = 
FIO_OPT_G_IO_BASIC
,

1583 .
	g«me
 = "iodepth_low",

1584 .
	g ame
 = "IO Depth batchÜow",

1585 .
	gty≥
 = 
FIO_OPT_INT
,

1586 .
	goff1
 = 
td_v¨_off£t
(
iodïth_low
),

1587 .
	ghñp
 = "Low water mark for queuing depth",

1588 .
	g∑ª¡
 = "iodepth",

1589 .
	ghide
 = 1,

1590 .
	göãrvÆ
 = 1,

1591 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

1592 .
	ggroup
 = 
FIO_OPT_G_IO_BASIC
,

1595 .
	g«me
 = "size",

1596 .
	g ame
 = "Size",

1597 .
	gty≥
 = 
FIO_OPT_STR_VAL
,

1598 .
	gcb
 = 
°r_size_cb
,

1599 .
	ghñp
 = "Total size of device or files",

1600 .
	göãrvÆ
 = 1024 * 1024,

1601 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

1602 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

1605 .
	g«me
 = "io_limit",

1606 .
	g ame
 = "IO Limit",

1607 .
	gty≥
 = 
FIO_OPT_STR_VAL
,

1608 .
	goff1
 = 
td_v¨_off£t
(
io_limô
),

1609 .
	göãrvÆ
 = 1024 * 1024,

1610 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

1611 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

1614 .
	g«me
 = "fill_device",

1615 .
	g ame
 = "Fill device",

1616 .
	gÆüs
 = "fill_fs",

1617 .
	gty≥
 = 
FIO_OPT_BOOL
,

1618 .
	goff1
 = 
td_v¨_off£t
(
fûl_devi˚
),

1619 .
	ghñp
 = "Write untilán ENOSPCÉrror occurs",

1620 .
	gdef
 = "0",

1621 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

1622 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

1625 .
	g«me
 = "filesize",

1626 .
	g ame
 = "File size",

1627 .
	gty≥
 = 
FIO_OPT_STR_VAL
,

1628 .
	goff1
 = 
td_v¨_off£t
(
fûe_size_low
),

1629 .
	goff2
 = 
td_v¨_off£t
(
fûe_size_high
),

1630 .
	gmövÆ
 = 1,

1631 .
	ghñp
 = "Size of individual files",

1632 .
	göãrvÆ
 = 1024 * 1024,

1633 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

1634 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

1637 .
	g«me
 = "file_append",

1638 .
	g ame
 = "Fileáppend",

1639 .
	gty≥
 = 
FIO_OPT_BOOL
,

1640 .
	goff1
 = 
td_v¨_off£t
(
fûe_≠≥nd
),

1641 .
	ghñp
 = "IO will startátÅheÉnd ofÅhe file(s)",

1642 .
	gdef
 = "0",

1643 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

1644 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

1647 .
	g«me
 = "offset",

1648 .
	g ame
 = "IO offset",

1649 .
	gÆüs
 = "fileoffset",

1650 .
	gty≥
 = 
FIO_OPT_STR_VAL
,

1651 .
	goff1
 = 
td_v¨_off£t
(
°¨t_off£t
),

1652 .
	ghñp
 = "Start IO fromÅhis offset",

1653 .
	gdef
 = "0",

1654 .
	göãrvÆ
 = 1024 * 1024,

1655 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

1656 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

1659 .
	g«me
 = "offset_increment",

1660 .
	g ame
 = "IO offset increment",

1661 .
	gty≥
 = 
FIO_OPT_STR_VAL
,

1662 .
	goff1
 = 
td_v¨_off£t
(
off£t_ö¸emít
),

1663 .
	ghñp
 = "What isÅhe increment from one offsetÅoÅheÇext",

1664 .
	g∑ª¡
 = "offset",

1665 .
	ghide
 = 1,

1666 .
	gdef
 = "0",

1667 .
	göãrvÆ
 = 1024 * 1024,

1668 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

1669 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

1672 .
	g«me
 = "number_ios",

1673 .
	g ame
 = "Number of IOsÅoÖerform",

1674 .
	gty≥
 = 
FIO_OPT_STR_VAL
,

1675 .
	goff1
 = 
td_v¨_off£t
(
numbî_ios
),

1676 .
	ghñp
 = "Force job completion ofÅhisÇumber of IOs",

1677 .
	gdef
 = "0",

1678 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

1679 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

1682 .
	g«me
 = "bs",

1683 .
	g ame
 = "Block size",

1684 .
	gÆüs
 = "blocksize",

1685 .
	gty≥
 = 
FIO_OPT_INT
,

1686 .
	goff1
 = 
td_v¨_off£t
(
bs
[
DDIR_READ
]),

1687 .
	goff2
 = 
td_v¨_off£t
(
bs
[
DDIR_WRITE
]),

1688 .
	goff3
 = 
td_v¨_off£t
(
bs
[
DDIR_TRIM
]),

1689 .
	gmövÆ
 = 1,

1690 .
	ghñp
 = "Block size unit",

1691 .
	gdef
 = "4k",

1692 .
	g∑ª¡
 = "rw",

1693 .
	ghide
 = 1,

1694 .
	göãrvÆ
 = 512,

1695 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

1696 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

1699 .
	g«me
 = "ba",

1700 .
	g ame
 = "Block sizeálign",

1701 .
	gÆüs
 = "blockalign",

1702 .
	gty≥
 = 
FIO_OPT_INT
,

1703 .
	goff1
 = 
td_v¨_off£t
(
ba
[
DDIR_READ
]),

1704 .
	goff2
 = 
td_v¨_off£t
(
ba
[
DDIR_WRITE
]),

1705 .
	goff3
 = 
td_v¨_off£t
(
ba
[
DDIR_TRIM
]),

1706 .
	gmövÆ
 = 1,

1707 .
	ghñp
 = "IO block offsetálignment",

1708 .
	g∑ª¡
 = "rw",

1709 .
	ghide
 = 1,

1710 .
	göãrvÆ
 = 512,

1711 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

1712 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

1715 .
	g«me
 = "bsrange",

1716 .
	g ame
 = "Block sizeÑange",

1717 .
	gÆüs
 = "blocksize_range",

1718 .
	gty≥
 = 
FIO_OPT_RANGE
,

1719 .
	goff1
 = 
td_v¨_off£t
(
mö_bs
[
DDIR_READ
]),

1720 .
	goff2
 = 
td_v¨_off£t
(
max_bs
[
DDIR_READ
]),

1721 .
	goff3
 = 
td_v¨_off£t
(
mö_bs
[
DDIR_WRITE
]),

1722 .
	goff4
 = 
td_v¨_off£t
(
max_bs
[
DDIR_WRITE
]),

1723 .
	goff5
 = 
td_v¨_off£t
(
mö_bs
[
DDIR_TRIM
]),

1724 .
	goff6
 = 
td_v¨_off£t
(
max_bs
[
DDIR_TRIM
]),

1725 .
	gmövÆ
 = 1,

1726 .
	ghñp
 = "Set block sizeÑange (in more detailÅhan bs)",

1727 .
	g∑ª¡
 = "rw",

1728 .
	ghide
 = 1,

1729 .
	göãrvÆ
 = 4096,

1730 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

1731 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

1734 .
	g«me
 = "bssplit",

1735 .
	g ame
 = "Block size split",

1736 .
	gty≥
 = 
FIO_OPT_STR
,

1737 .
	gcb
 = 
°r_bs•lô_cb
,

1738 .
	ghñp
 = "Setá specific mix of block sizes",

1739 .
	g∑ª¡
 = "rw",

1740 .
	ghide
 = 1,

1741 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

1742 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

1745 .
	g«me
 = "bs_unaligned",

1746 .
	g ame
 = "Block size unaligned",

1747 .
	gÆüs
 = "blocksize_unaligned",

1748 .
	gty≥
 = 
FIO_OPT_STR_SET
,

1749 .
	goff1
 = 
td_v¨_off£t
(
bs_u«lig√d
),

1750 .
	ghñp
 = "Don't sectorálign IO buffer sizes",

1751 .
	g∑ª¡
 = "rw",

1752 .
	ghide
 = 1,

1753 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

1754 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

1757 .
	g«me
 = "bs_is_seq_rand",

1758 .
	g ame
 = "Block size division is seq/random (notÑead/write)",

1759 .
	gty≥
 = 
FIO_OPT_BOOL
,

1760 .
	goff1
 = 
td_v¨_off£t
(
bs_is_£q_ønd
),

1761 .
	ghñp
 = "Considerány blocksize settingÅo be sequential,ramdom",

1762 .
	gdef
 = "0",

1763 .
	g∑ª¡
 = "blocksize",

1764 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

1765 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

1768 .
	g«me
 = "randrepeat",

1769 .
	g ame
 = "RandomÑepeatable",

1770 .
	gty≥
 = 
FIO_OPT_BOOL
,

1771 .
	goff1
 = 
td_v¨_off£t
(
ønd_ª≥©abÀ
),

1772 .
	ghñp
 = "UseÑepeatableÑandom IOÖattern",

1773 .
	gdef
 = "1",

1774 .
	g∑ª¡
 = "rw",

1775 .
	ghide
 = 1,

1776 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

1777 .
	ggroup
 = 
FIO_OPT_G_RANDOM
,

1780 .
	g«me
 = "randseed",

1781 .
	g ame
 = "TheÑandom generator seed",

1782 .
	gty≥
 = 
FIO_OPT_STR_VAL
,

1783 .
	goff1
 = 
td_v¨_off£t
(
ønd_£ed
),

1784 .
	ghñp
 = "SetÅheÑandom generator seed value",

1785 .
	g∑ª¡
 = "rw",

1786 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

1787 .
	ggroup
 = 
FIO_OPT_G_RANDOM
,

1790 .
	g«me
 = "use_os_rand",

1791 .
	g ame
 = "Use OSÑandom",

1792 .
	gty≥
 = 
FIO_OPT_BOOL
,

1793 .
	goff1
 = 
td_v¨_off£t
(
u£_os_ønd
),

1794 .
	ghñp
 = "SetÅo use OSÑandom generator",

1795 .
	gdef
 = "0",

1796 .
	g∑ª¡
 = "rw",

1797 .
	ghide
 = 1,

1798 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

1799 .
	ggroup
 = 
FIO_OPT_G_RANDOM
,

1802 .
	g«me
 = "norandommap",

1803 .
	g ame
 = "NoÑandommap",

1804 .
	gty≥
 = 
FIO_OPT_STR_SET
,

1805 .
	goff1
 = 
td_v¨_off£t
(
n‹™domm≠
),

1806 .
	ghñp
 = "AcceptÖotential duplicateÑandom blocks",

1807 .
	g∑ª¡
 = "rw",

1808 .
	ghide
 = 1,

1809 .
	ghide_⁄_£t
 = 1,

1810 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

1811 .
	ggroup
 = 
FIO_OPT_G_RANDOM
,

1814 .
	g«me
 = "softrandommap",

1815 .
	g ame
 = "SoftÑandommap",

1816 .
	gty≥
 = 
FIO_OPT_BOOL
,

1817 .
	goff1
 = 
td_v¨_off£t
(
so·øndomm≠
),

1818 .
	ghñp
 = "SetÇorandommap ifÑandommapállocation fails",

1819 .
	g∑ª¡
 = "norandommap",

1820 .
	ghide
 = 1,

1821 .
	gdef
 = "0",

1822 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

1823 .
	ggroup
 = 
FIO_OPT_G_RANDOM
,

1826 .
	g«me
 = "random_generator",

1827 .
	gty≥
 = 
FIO_OPT_STR
,

1828 .
	goff1
 = 
td_v¨_off£t
(
øndom_gíî©‹
),

1829 .
	ghñp
 = "Type ofÑandomÇumber generatorÅo use",

1830 .
	gdef
 = "tausworthe",

1831 .
	gposvÆ
 = {

1832 { .
ivÆ
 = "tausworthe",

1833 .
	govÆ
 = 
FIO_RAND_GEN_TAUSWORTHE
,

1834 .
	ghñp
 = "Strong Tausworthe generator",

1836 { .
	givÆ
 = "lfsr",

1837 .
	govÆ
 = 
FIO_RAND_GEN_LFSR
,

1838 .
	ghñp
 = "VariableÜength LFSR",

1841 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

1842 .
	ggroup
 = 
FIO_OPT_G_RANDOM
,

1845 .
	g«me
 = "random_distribution",

1846 .
	gty≥
 = 
FIO_OPT_STR
,

1847 .
	goff1
 = 
td_v¨_off£t
(
øndom_di°ributi⁄
),

1848 .
	gcb
 = 
°r_øndom_di°ributi⁄_cb
,

1849 .
	ghñp
 = "Random offset distribution generator",

1850 .
	gdef
 = "random",

1851 .
	gposvÆ
 = {

1852 { .
ivÆ
 = "random",

1853 .
	govÆ
 = 
FIO_RAND_DIST_RANDOM
,

1854 .
	ghñp
 = "CompletelyÑandom",

1856 { .
	givÆ
 = "zipf",

1857 .
	govÆ
 = 
FIO_RAND_DIST_ZIPF
,

1858 .
	ghñp
 = "Zipf distribution",

1860 { .
	givÆ
 = "pareto",

1861 .
	govÆ
 = 
FIO_RAND_DIST_PARETO
,

1862 .
	ghñp
 = "Pareto distribution",

1865 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

1866 .
	ggroup
 = 
FIO_OPT_G_RANDOM
,

1869 .
	g«me
 = "percentage_random",

1870 .
	g ame
 = "Percentage Random",

1871 .
	gty≥
 = 
FIO_OPT_INT
,

1872 .
	goff1
 = 
td_v¨_off£t
(
≥rc_ønd
[
DDIR_READ
]),

1873 .
	goff2
 = 
td_v¨_off£t
(
≥rc_ønd
[
DDIR_WRITE
]),

1874 .
	goff3
 = 
td_v¨_off£t
(
≥rc_ønd
[
DDIR_TRIM
]),

1875 .
	gmaxvÆ
 = 100,

1876 .
	ghñp
 = "Percentage of seq/random mixÅhat should beÑandom",

1877 .
	gdef
 = "100,100,100",

1878 .
	göãrvÆ
 = 5,

1879 .
	gövî£
 = "percentage_sequential",

1880 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

1881 .
	ggroup
 = 
FIO_OPT_G_RANDOM
,

1884 .
	g«me
 = "percentage_sequential",

1885 .
	g ame
 = "Percentage Sequential",

1886 .
	gty≥
 = 
FIO_OPT_DEPRECATED
,

1887 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

1888 .
	ggroup
 = 
FIO_OPT_G_RANDOM
,

1891 .
	g«me
 = "allrandrepeat",

1892 .
	gty≥
 = 
FIO_OPT_BOOL
,

1893 .
	goff1
 = 
td_v¨_off£t
(
ÆÃ™d_ª≥©abÀ
),

1894 .
	ghñp
 = "UseÑepeatableÑandomÇumbers forÉverything",

1895 .
	gdef
 = "0",

1896 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

1897 .
	ggroup
 = 
FIO_OPT_G_RANDOM
,

1900 .
	g«me
 = "nrfiles",

1901 .
	g ame
 = "Number of files",

1902 .
	gÆüs
 = "nr_files",

1903 .
	gty≥
 = 
FIO_OPT_INT
,

1904 .
	goff1
 = 
td_v¨_off£t
(
ƒ_fûes
),

1905 .
	ghñp
 = "Split job workload betweenÅhisÇumber of files",

1906 .
	gdef
 = "1",

1907 .
	göãrvÆ
 = 1,

1908 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

1909 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

1912 .
	g«me
 = "openfiles",

1913 .
	g ame
 = "Number of open files",

1914 .
	gty≥
 = 
FIO_OPT_INT
,

1915 .
	goff1
 = 
td_v¨_off£t
(
›í_fûes
),

1916 .
	ghñp
 = "Number of filesÅo keep openátÅhe sameÅime",

1917 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

1918 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

1921 .
	g«me
 = "file_service_type",

1922 .
	g ame
 = "File serviceÅype",

1923 .
	gty≥
 = 
FIO_OPT_STR
,

1924 .
	gcb
 = 
°r_f°_cb
,

1925 .
	goff1
 = 
td_v¨_off£t
(
fûe_£rvi˚_ty≥
),

1926 .
	ghñp
 = "HowÅo select which fileÅo serviceÇext",

1927 .
	gdef
 = "roundrobin",

1928 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

1929 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

1930 .
	gposvÆ
 = {

1931 { .
ivÆ
 = "random",

1932 .
	govÆ
 = 
FIO_FSERVICE_RANDOM
,

1933 .
	ghñp
 = "Chooseá fileátÑandom",

1935 { .
	givÆ
 = "roundrobin",

1936 .
	govÆ
 = 
FIO_FSERVICE_RR
,

1937 .
	ghñp
 = "RoundÑobin select files",

1939 { .
	givÆ
 = "sequential",

1940 .
	govÆ
 = 
FIO_FSERVICE_SEQ
,

1941 .
	ghñp
 = "Finish one file before movingÅoÅheÇext",

1944 .
	g∑ª¡
 = "nrfiles",

1945 .
	ghide
 = 1,

1947 #ifde‡
CONFIG_POSIX_FALLOCATE


1949 .
	g«me
 = "fallocate",

1950 .
	g ame
 = "Fallocate",

1951 .
	gty≥
 = 
FIO_OPT_STR
,

1952 .
	goff1
 = 
td_v¨_off£t
(
ÁŒoˇã_mode
),

1953 .
	ghñp
 = "WhetherÖre-allocation isÖerformed whenÜaying out files",

1954 .
	gdef
 = "posix",

1955 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

1956 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

1957 .
	gposvÆ
 = {

1958 { .
ivÆ
 = "none",

1959 .
	govÆ
 = 
FIO_FALLOCATE_NONE
,

1960 .
	ghñp
 = "DoÇotÖre-allocate space",

1962 { .
	givÆ
 = "posix",

1963 .
	govÆ
 = 
FIO_FALLOCATE_POSIX
,

1964 .
	ghñp
 = "UseÖosix_fallocate()",

1966 #ifde‡
CONFIG_LINUX_FALLOCATE


1967 { .
	givÆ
 = "keep",

1968 .
	govÆ
 = 
FIO_FALLOCATE_KEEP_SIZE
,

1969 .
	ghñp
 = "Use fallocate(..., FALLOC_FL_KEEP_SIZE, ...)",

1973 { .
	givÆ
 = "0",

1974 .
	govÆ
 = 
FIO_FALLOCATE_NONE
,

1975 .
	ghñp
 = "Alias for 'none'",

1977 { .
	givÆ
 = "1",

1978 .
	govÆ
 = 
FIO_FALLOCATE_POSIX
,

1979 .
	ghñp
 = "Alias for 'posix'",

1985 .
	g«me
 = "fadvise_hint",

1986 .
	g ame
 = "Fadvise hint",

1987 .
	gty≥
 = 
FIO_OPT_BOOL
,

1988 .
	goff1
 = 
td_v¨_off£t
(
Ádvi£_höt
),

1989 .
	ghñp
 = "Use fadvise()ÅoádviseÅhe kernel on IOÖattern",

1990 .
	gdef
 = "1",

1991 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

1992 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

1995 .
	g«me
 = "fsync",

1996 .
	g ame
 = "Fsync",

1997 .
	gty≥
 = 
FIO_OPT_INT
,

1998 .
	goff1
 = 
td_v¨_off£t
(
fsync_blocks
),

1999 .
	ghñp
 = "Issue fsync for writesÉvery givenÇumber of blocks",

2000 .
	gdef
 = "0",

2001 .
	göãrvÆ
 = 1,

2002 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

2003 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2006 .
	g«me
 = "fdatasync",

2007 .
	g ame
 = "Fdatasync",

2008 .
	gty≥
 = 
FIO_OPT_INT
,

2009 .
	goff1
 = 
td_v¨_off£t
(
fd©async_blocks
),

2010 .
	ghñp
 = "Issue fdatasync for writesÉvery givenÇumber of blocks",

2011 .
	gdef
 = "0",

2012 .
	göãrvÆ
 = 1,

2013 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

2014 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2017 .
	g«me
 = "write_barrier",

2018 .
	g ame
 = "Write barrier",

2019 .
	gty≥
 = 
FIO_OPT_INT
,

2020 .
	goff1
 = 
td_v¨_off£t
(
b¨rõr_blocks
),

2021 .
	ghñp
 = "MakeÉvery Nth writeá barrier write",

2022 .
	gdef
 = "0",

2023 .
	göãrvÆ
 = 1,

2024 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2025 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2027 #ifde‡
CONFIG_SYNC_FILE_RANGE


2029 .
	g«me
 = "sync_file_range",

2030 .
	g ame
 = "Sync fileÑange",

2031 .
	gposvÆ
 = {

2032 { .
ivÆ
 = "wait_before",

2033 .
	govÆ
 = 
SYNC_FILE_RANGE_WAIT_BEFORE
,

2034 .
	ghñp
 = "SYNC_FILE_RANGE_WAIT_BEFORE",

2035 .
	g‹vÆ
 = 1,

2037 { .
	givÆ
 = "write",

2038 .
	govÆ
 = 
SYNC_FILE_RANGE_WRITE
,

2039 .
	ghñp
 = "SYNC_FILE_RANGE_WRITE",

2040 .
	g‹vÆ
 = 1,

2043 .
	givÆ
 = "wait_after",

2044 .
	govÆ
 = 
SYNC_FILE_RANGE_WAIT_AFTER
,

2045 .
	ghñp
 = "SYNC_FILE_RANGE_WAIT_AFTER",

2046 .
	g‹vÆ
 = 1,

2049 .
	gty≥
 = 
FIO_OPT_STR_MULTI
,

2050 .
	gcb
 = 
°r_s‰_cb
,

2051 .
	goff1
 = 
td_v¨_off£t
(
sync_fûe_ønge
),

2052 .
	ghñp
 = "Use sync_file_range()",

2053 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

2054 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2058 .
	g«me
 = "direct",

2059 .
	g ame
 = "Direct I/O",

2060 .
	gty≥
 = 
FIO_OPT_BOOL
,

2061 .
	goff1
 = 
td_v¨_off£t
(
odúe˘
),

2062 .
	ghñp
 = "Use O_DIRECT IO (negates buffered)",

2063 .
	gdef
 = "0",

2064 .
	gövî£
 = "buffered",

2065 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2066 .
	ggroup
 = 
FIO_OPT_G_IO_TYPE
,

2069 .
	g«me
 = "atomic",

2070 .
	g ame
 = "Atomic I/O",

2071 .
	gty≥
 = 
FIO_OPT_BOOL
,

2072 .
	goff1
 = 
td_v¨_off£t
(
ﬂtomic
),

2073 .
	ghñp
 = "Use Atomic IO with O_DIRECT (implies O_DIRECT)",

2074 .
	gdef
 = "0",

2075 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2076 .
	ggroup
 = 
FIO_OPT_G_IO_TYPE
,

2079 .
	g«me
 = "buffered",

2080 .
	g ame
 = "Buffered I/O",

2081 .
	gty≥
 = 
FIO_OPT_BOOL
,

2082 .
	goff1
 = 
td_v¨_off£t
(
odúe˘
),

2083 .
	g√g
 = 1,

2084 .
	ghñp
 = "Use buffered IO (negates direct)",

2085 .
	gdef
 = "1",

2086 .
	gövî£
 = "direct",

2087 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2088 .
	ggroup
 = 
FIO_OPT_G_IO_TYPE
,

2091 .
	g«me
 = "overwrite",

2092 .
	g ame
 = "Overwrite",

2093 .
	gty≥
 = 
FIO_OPT_BOOL
,

2094 .
	goff1
 = 
td_v¨_off£t
(
ovîwrôe
),

2095 .
	ghñp
 = "When writing, set whetherÅo overwrite current data",

2096 .
	gdef
 = "0",

2097 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

2098 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2101 .
	g«me
 = "loops",

2102 .
	g ame
 = "Loops",

2103 .
	gty≥
 = 
FIO_OPT_INT
,

2104 .
	goff1
 = 
td_v¨_off£t
(
lo›s
),

2105 .
	ghñp
 = "Number ofÅimesÅoÑunÅhe job",

2106 .
	gdef
 = "1",

2107 .
	göãrvÆ
 = 1,

2108 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

2109 .
	ggroup
 = 
FIO_OPT_G_RUNTIME
,

2112 .
	g«me
 = "numjobs",

2113 .
	g ame
 = "Number of jobs",

2114 .
	gty≥
 = 
FIO_OPT_INT
,

2115 .
	goff1
 = 
td_v¨_off£t
(
numjobs
),

2116 .
	ghñp
 = "DuplicateÅhis jobÅhis manyÅimes",

2117 .
	gdef
 = "1",

2118 .
	göãrvÆ
 = 1,

2119 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

2120 .
	ggroup
 = 
FIO_OPT_G_RUNTIME
,

2123 .
	g«me
 = "startdelay",

2124 .
	g ame
 = "Start delay",

2125 .
	gty≥
 = 
FIO_OPT_STR_VAL_TIME
,

2126 .
	goff1
 = 
td_v¨_off£t
(
°¨t_dñay
),

2127 .
	goff2
 = 
td_v¨_off£t
(
°¨t_dñay_high
),

2128 .
	ghñp
 = "Only start job whenÅhisÖeriod hasÖassed",

2129 .
	gdef
 = "0",

2130 .
	gis_£c⁄ds
 = 1,

2131 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

2132 .
	ggroup
 = 
FIO_OPT_G_RUNTIME
,

2135 .
	g«me
 = "runtime",

2136 .
	g ame
 = "Runtime",

2137 .
	gÆüs
 = "timeout",

2138 .
	gty≥
 = 
FIO_OPT_STR_VAL_TIME
,

2139 .
	goff1
 = 
td_v¨_off£t
(
timeout
),

2140 .
	ghñp
 = "Stop workload whenÅhisámount ofÅime hasÖassed",

2141 .
	gdef
 = "0",

2142 .
	gis_£c⁄ds
 = 1,

2143 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

2144 .
	ggroup
 = 
FIO_OPT_G_RUNTIME
,

2147 .
	g«me
 = "time_based",

2148 .
	g ame
 = "Time based",

2149 .
	gty≥
 = 
FIO_OPT_STR_SET
,

2150 .
	goff1
 = 
td_v¨_off£t
(
time_ba£d
),

2151 .
	ghñp
 = "KeepÑunning untilÑuntime/timeout is met",

2152 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

2153 .
	ggroup
 = 
FIO_OPT_G_RUNTIME
,

2156 .
	g«me
 = "verify_only",

2157 .
	g ame
 = "Verify only",

2158 .
	gty≥
 = 
FIO_OPT_STR_SET
,

2159 .
	goff1
 = 
td_v¨_off£t
(
vîify_⁄ly
),

2160 .
	ghñp
 = "VerifiesÖreviously written data is still valid",

2161 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

2162 .
	ggroup
 = 
FIO_OPT_G_RUNTIME
,

2165 .
	g«me
 = "ramp_time",

2166 .
	g ame
 = "RampÅime",

2167 .
	gty≥
 = 
FIO_OPT_STR_VAL_TIME
,

2168 .
	goff1
 = 
td_v¨_off£t
(
ømp_time
),

2169 .
	ghñp
 = "Ramp upÅime before measuringÖerformance",

2170 .
	gis_£c⁄ds
 = 1,

2171 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

2172 .
	ggroup
 = 
FIO_OPT_G_RUNTIME
,

2175 .
	g«me
 = "clocksource",

2176 .
	g ame
 = "Clock source",

2177 .
	gty≥
 = 
FIO_OPT_STR
,

2178 .
	gcb
 = 
fio_˛ock_sour˚_cb
,

2179 .
	goff1
 = 
td_v¨_off£t
(
˛ocksour˚
),

2180 .
	ghñp
 = "WhatÅype ofÅiming sourceÅo use",

2181 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

2182 .
	ggroup
 = 
FIO_OPT_G_CLOCK
,

2183 .
	gposvÆ
 = {

2184 #ifde‡
CONFIG_GETTIMEOFDAY


2185 { .
ivÆ
 = "gettimeofday",

2186 .
	govÆ
 = 
CS_GTOD
,

2187 .
	ghñp
 = "Use gettimeofday(2) forÅiming",

2190 #ifde‡
CONFIG_CLOCK_GETTIME


2191 { .
	givÆ
 = "clock_gettime",

2192 .
	govÆ
 = 
CS_CGETTIME
,

2193 .
	ghñp
 = "Use clock_gettime(2) forÅiming",

2196 #ifde‡
ARCH_HAVE_CPU_CLOCK


2197 { .
	givÆ
 = "cpu",

2198 .
	govÆ
 = 
CS_CPUCLOCK
,

2199 .
	ghñp
 = "Use CPUÖrivate clock",

2205 .
	g«me
 = "mem",

2206 .
	gÆüs
 = "iomem",

2207 .
	g ame
 = "I/O Memory",

2208 .
	gty≥
 = 
FIO_OPT_STR
,

2209 .
	gcb
 = 
°r_mem_cb
,

2210 .
	goff1
 = 
td_v¨_off£t
(
mem_ty≥
),

2211 .
	ghñp
 = "BackingÅype for IO buffers",

2212 .
	gdef
 = "malloc",

2213 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2214 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2215 .
	gposvÆ
 = {

2216 { .
ivÆ
 = "malloc",

2217 .
	govÆ
 = 
MEM_MALLOC
,

2218 .
	ghñp
 = "Use malloc(3) for IO buffers",

2220 { .
	givÆ
 = "shm",

2221 .
	govÆ
 = 
MEM_SHM
,

2222 .
	ghñp
 = "Use shared memory segments for IO buffers",

2224 #ifde‡
FIO_HAVE_HUGETLB


2225 { .
	givÆ
 = "shmhuge",

2226 .
	govÆ
 = 
MEM_SHMHUGE
,

2227 .
	ghñp
 = "Like shm, but use hugeÖages",

2230 { .
	givÆ
 = "mmap",

2231 .
	govÆ
 = 
MEM_MMAP
,

2232 .
	ghñp
 = "Use mmap(2) (file oránon) for IO buffers",

2234 #ifde‡
FIO_HAVE_HUGETLB


2235 { .
	givÆ
 = "mmaphuge",

2236 .
	govÆ
 = 
MEM_MMAPHUGE
,

2237 .
	ghñp
 = "Like mmap, but use hugeÖages",

2243 .
	g«me
 = "iomem_align",

2244 .
	gÆüs
 = "mem_align",

2245 .
	g ame
 = "I/O memoryálignment",

2246 .
	gty≥
 = 
FIO_OPT_INT
,

2247 .
	goff1
 = 
td_v¨_off£t
(
mem_Æign
),

2248 .
	gmövÆ
 = 0,

2249 .
	ghñp
 = "IO memory buffer offsetálignment",

2250 .
	gdef
 = "0",

2251 .
	g∑ª¡
 = "iomem",

2252 .
	ghide
 = 1,

2253 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2254 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2257 .
	g«me
 = "verify",

2258 .
	g ame
 = "Verify",

2259 .
	gty≥
 = 
FIO_OPT_STR
,

2260 .
	goff1
 = 
td_v¨_off£t
(
vîify
),

2261 .
	ghñp
 = "Verify data written",

2262 .
	gdef
 = "0",

2263 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2264 .
	ggroup
 = 
FIO_OPT_G_VERIFY
,

2265 .
	gposvÆ
 = {

2266 { .
ivÆ
 = "0",

2267 .
	govÆ
 = 
VERIFY_NONE
,

2268 .
	ghñp
 = "Don't do IO verification",

2270 { .
	givÆ
 = "md5",

2271 .
	govÆ
 = 
VERIFY_MD5
,

2272 .
	ghñp
 = "Use md5 checksums for verification",

2274 { .
	givÆ
 = "crc64",

2275 .
	govÆ
 = 
VERIFY_CRC64
,

2276 .
	ghñp
 = "Use crc64 checksums for verification",

2278 { .
	givÆ
 = "crc32",

2279 .
	govÆ
 = 
VERIFY_CRC32
,

2280 .
	ghñp
 = "Use crc32 checksums for verification",

2282 { .
	givÆ
 = "crc32c-intel",

2283 .
	govÆ
 = 
VERIFY_CRC32C
,

2284 .
	ghñp
 = "Use crc32c checksums for verification (hwássisted, ifávailable)",

2286 { .
	givÆ
 = "crc32c",

2287 .
	govÆ
 = 
VERIFY_CRC32C
,

2288 .
	ghñp
 = "Use crc32c checksums for verification (hwássisted, ifávailable)",

2290 { .
	givÆ
 = "crc16",

2291 .
	govÆ
 = 
VERIFY_CRC16
,

2292 .
	ghñp
 = "Use crc16 checksums for verification",

2294 { .
	givÆ
 = "crc7",

2295 .
	govÆ
 = 
VERIFY_CRC7
,

2296 .
	ghñp
 = "Use crc7 checksums for verification",

2298 { .
	givÆ
 = "sha1",

2299 .
	govÆ
 = 
VERIFY_SHA1
,

2300 .
	ghñp
 = "Use sha1 checksums for verification",

2302 { .
	givÆ
 = "sha256",

2303 .
	govÆ
 = 
VERIFY_SHA256
,

2304 .
	ghñp
 = "Use sha256 checksums for verification",

2306 { .
	givÆ
 = "sha512",

2307 .
	govÆ
 = 
VERIFY_SHA512
,

2308 .
	ghñp
 = "Use sha512 checksums for verification",

2310 { .
	givÆ
 = "xxhash",

2311 .
	govÆ
 = 
VERIFY_XXHASH
,

2312 .
	ghñp
 = "Use xxhash checksums for verification",

2314 { .
	givÆ
 = "meta",

2315 .
	govÆ
 = 
VERIFY_META
,

2316 .
	ghñp
 = "Use io information",

2319 .
	givÆ
 = "null",

2320 .
	govÆ
 = 
VERIFY_NULL
,

2321 .
	ghñp
 = "PretendÅo verify",

2326 .
	g«me
 = "do_verify",

2327 .
	g ame
 = "Perform verify step",

2328 .
	gty≥
 = 
FIO_OPT_BOOL
,

2329 .
	goff1
 = 
td_v¨_off£t
(
do_vîify
),

2330 .
	ghñp
 = "Run verification stageáfter write",

2331 .
	gdef
 = "1",

2332 .
	g∑ª¡
 = "verify",

2333 .
	ghide
 = 1,

2334 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2335 .
	ggroup
 = 
FIO_OPT_G_VERIFY
,

2338 .
	g«me
 = "verifysort",

2339 .
	g ame
 = "Verify sort",

2340 .
	gty≥
 = 
FIO_OPT_BOOL
,

2341 .
	goff1
 = 
td_v¨_off£t
(
vîifys‹t
),

2342 .
	ghñp
 = "Sort written verify blocks forÑead back",

2343 .
	gdef
 = "1",

2344 .
	g∑ª¡
 = "verify",

2345 .
	ghide
 = 1,

2346 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2347 .
	ggroup
 = 
FIO_OPT_G_VERIFY
,

2350 .
	g«me
 = "verifysort_nr",

2351 .
	gty≥
 = 
FIO_OPT_INT
,

2352 .
	goff1
 = 
td_v¨_off£t
(
vîifys‹t_ƒ
),

2353 .
	ghñp
 = "Pre-loadánd sort verify blocks foráÑead workload",

2354 .
	gmövÆ
 = 0,

2355 .
	gmaxvÆ
 = 131072,

2356 .
	gdef
 = "1024",

2357 .
	g∑ª¡
 = "verify",

2358 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2359 .
	ggroup
 = 
FIO_OPT_G_VERIFY
,

2362 .
	g«me
 = "verify_interval",

2363 .
	g ame
 = "Verify interval",

2364 .
	gty≥
 = 
FIO_OPT_INT
,

2365 .
	goff1
 = 
td_v¨_off£t
(
vîify_öãrvÆ
),

2366 .
	gmövÆ
 = 2 * (
vîify_hódî
),

2367 .
	ghñp
 = "Store verify buffer headerÉvery N bytes",

2368 .
	g∑ª¡
 = "verify",

2369 .
	ghide
 = 1,

2370 .
	göãrvÆ
 = 2 * (
vîify_hódî
),

2371 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2372 .
	ggroup
 = 
FIO_OPT_G_VERIFY
,

2375 .
	g«me
 = "verify_offset",

2376 .
	g ame
 = "Verify offset",

2377 .
	gty≥
 = 
FIO_OPT_INT
,

2378 .
	ghñp
 = "Offset verify headerÜocation by N bytes",

2379 .
	goff1
 = 
td_v¨_off£t
(
vîify_off£t
),

2380 .
	gmövÆ
 = (
vîify_hódî
),

2381 .
	g∑ª¡
 = "verify",

2382 .
	ghide
 = 1,

2383 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2384 .
	ggroup
 = 
FIO_OPT_G_VERIFY
,

2387 .
	g«me
 = "verify_pattern",

2388 .
	g ame
 = "VerifyÖattern",

2389 .
	gty≥
 = 
FIO_OPT_STR
,

2390 .
	gcb
 = 
°r_vîify_∑âîn_cb
,

2391 .
	ghñp
 = "FillÖattern for IO buffers",

2392 .
	g∑ª¡
 = "verify",

2393 .
	ghide
 = 1,

2394 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2395 .
	ggroup
 = 
FIO_OPT_G_VERIFY
,

2398 .
	g«me
 = "verify_fatal",

2399 .
	g ame
 = "Verify fatal",

2400 .
	gty≥
 = 
FIO_OPT_BOOL
,

2401 .
	goff1
 = 
td_v¨_off£t
(
vîify_Áèl
),

2402 .
	gdef
 = "0",

2403 .
	ghñp
 = "Exit oná single verify failure, don't continue",

2404 .
	g∑ª¡
 = "verify",

2405 .
	ghide
 = 1,

2406 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2407 .
	ggroup
 = 
FIO_OPT_G_VERIFY
,

2410 .
	g«me
 = "verify_dump",

2411 .
	g ame
 = "Verify dump",

2412 .
	gty≥
 = 
FIO_OPT_BOOL
,

2413 .
	goff1
 = 
td_v¨_off£t
(
vîify_dump
),

2414 .
	gdef
 = "0",

2415 .
	ghñp
 = "Dump contents of goodánd bad blocks on failure",

2416 .
	g∑ª¡
 = "verify",

2417 .
	ghide
 = 1,

2418 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2419 .
	ggroup
 = 
FIO_OPT_G_VERIFY
,

2422 .
	g«me
 = "verify_async",

2423 .
	g ame
 = "Verifyásynchronously",

2424 .
	gty≥
 = 
FIO_OPT_INT
,

2425 .
	goff1
 = 
td_v¨_off£t
(
vîify_async
),

2426 .
	gdef
 = "0",

2427 .
	ghñp
 = "Number ofásync verifierÅhreadsÅo use",

2428 .
	g∑ª¡
 = "verify",

2429 .
	ghide
 = 1,

2430 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2431 .
	ggroup
 = 
FIO_OPT_G_VERIFY
,

2434 .
	g«me
 = "verify_backlog",

2435 .
	g ame
 = "Verify backlog",

2436 .
	gty≥
 = 
FIO_OPT_STR_VAL
,

2437 .
	goff1
 = 
td_v¨_off£t
(
vîify_backlog
),

2438 .
	ghñp
 = "VerifyáfterÅhisÇumber of blocksáre written",

2439 .
	g∑ª¡
 = "verify",

2440 .
	ghide
 = 1,

2441 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2442 .
	ggroup
 = 
FIO_OPT_G_VERIFY
,

2445 .
	g«me
 = "verify_backlog_batch",

2446 .
	g ame
 = "Verify backlog batch",

2447 .
	gty≥
 = 
FIO_OPT_INT
,

2448 .
	goff1
 = 
td_v¨_off£t
(
vîify_b©ch
),

2449 .
	ghñp
 = "VerifyÅhisÇumber of IO blocks",

2450 .
	g∑ª¡
 = "verify",

2451 .
	ghide
 = 1,

2452 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2453 .
	ggroup
 = 
FIO_OPT_G_VERIFY
,

2455 #ifde‡
FIO_HAVE_CPU_AFFINITY


2457 .
	g«me
 = "verify_async_cpus",

2458 .
	g ame
 = "Async verify CPUs",

2459 .
	gty≥
 = 
FIO_OPT_STR
,

2460 .
	gcb
 = 
°r_vîify_˝us_Ælowed_cb
,

2461 .
	ghñp
 = "Set CPUsállowed forásync verifyÅhreads",

2462 .
	g∑ª¡
 = "verify_async",

2463 .
	ghide
 = 1,

2464 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2465 .
	ggroup
 = 
FIO_OPT_G_VERIFY
,

2469 .
	g«me
 = "experimental_verify",

2470 .
	goff1
 = 
td_v¨_off£t
(
ex≥rimíèl_vîify
),

2471 .
	gty≥
 = 
FIO_OPT_BOOL
,

2472 .
	ghñp
 = "EnableÉxperimental verification",

2473 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2474 .
	ggroup
 = 
FIO_OPT_G_VERIFY
,

2476 #ifde‡
FIO_HAVE_TRIM


2478 .
	g«me
 = "trim_percentage",

2479 .
	g ame
 = "TrimÖercentage",

2480 .
	gty≥
 = 
FIO_OPT_INT
,

2481 .
	goff1
 = 
td_v¨_off£t
(
åim_≥r˚¡age
),

2482 .
	gmövÆ
 = 0,

2483 .
	gmaxvÆ
 = 100,

2484 .
	ghñp
 = "Number of verify blocksÅo discard/trim",

2485 .
	g∑ª¡
 = "verify",

2486 .
	gdef
 = "0",

2487 .
	göãrvÆ
 = 1,

2488 .
	ghide
 = 1,

2489 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2490 .
	ggroup
 = 
FIO_OPT_G_TRIM
,

2493 .
	g«me
 = "trim_verify_zero",

2494 .
	g ame
 = "VerifyÅrim zero",

2495 .
	gty≥
 = 
FIO_OPT_BOOL
,

2496 .
	ghñp
 = "VerifyÅhatÅrim/discarded blocksáreÑeturnedás zeroes",

2497 .
	goff1
 = 
td_v¨_off£t
(
åim_zîo
),

2498 .
	g∑ª¡
 = "trim_percentage",

2499 .
	ghide
 = 1,

2500 .
	gdef
 = "1",

2501 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2502 .
	ggroup
 = 
FIO_OPT_G_TRIM
,

2505 .
	g«me
 = "trim_backlog",

2506 .
	g ame
 = "Trim backlog",

2507 .
	gty≥
 = 
FIO_OPT_STR_VAL
,

2508 .
	goff1
 = 
td_v¨_off£t
(
åim_backlog
),

2509 .
	ghñp
 = "TrimáfterÅhisÇumber of blocksáre written",

2510 .
	g∑ª¡
 = "trim_percentage",

2511 .
	ghide
 = 1,

2512 .
	göãrvÆ
 = 1,

2513 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2514 .
	ggroup
 = 
FIO_OPT_G_TRIM
,

2517 .
	g«me
 = "trim_backlog_batch",

2518 .
	g ame
 = "Trim backlog batch",

2519 .
	gty≥
 = 
FIO_OPT_INT
,

2520 .
	goff1
 = 
td_v¨_off£t
(
åim_b©ch
),

2521 .
	ghñp
 = "TrimÅhisÇumber of IO blocks",

2522 .
	g∑ª¡
 = "trim_percentage",

2523 .
	ghide
 = 1,

2524 .
	göãrvÆ
 = 1,

2525 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2526 .
	ggroup
 = 
FIO_OPT_G_TRIM
,

2530 .
	g«me
 = "write_iolog",

2531 .
	g ame
 = "Write I/OÜog",

2532 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

2533 .
	goff1
 = 
td_v¨_off£t
(
wrôe_iﬁog_fûe
),

2534 .
	ghñp
 = "Store IOÖatternÅo file",

2535 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2536 .
	ggroup
 = 
FIO_OPT_G_IOLOG
,

2539 .
	g«me
 = "read_iolog",

2540 .
	g ame
 = "Read I/OÜog",

2541 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

2542 .
	goff1
 = 
td_v¨_off£t
(
ªad_iﬁog_fûe
),

2543 .
	ghñp
 = "Playback IOÖattern from file",

2544 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2545 .
	ggroup
 = 
FIO_OPT_G_IOLOG
,

2548 .
	g«me
 = "replay_no_stall",

2549 .
	g ame
 = "Don't stall onÑeplay",

2550 .
	gty≥
 = 
FIO_OPT_BOOL
,

2551 .
	goff1
 = 
td_v¨_off£t
(
no_°Æl
),

2552 .
	gdef
 = "0",

2553 .
	g∑ª¡
 = "read_iolog",

2554 .
	ghide
 = 1,

2555 .
	ghñp
 = "Playback IOÖattern fileás fastásÖossible without stalls",

2556 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2557 .
	ggroup
 = 
FIO_OPT_G_IOLOG
,

2560 .
	g«me
 = "replay_redirect",

2561 .
	g ame
 = "Redirect device forÑeplay",

2562 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

2563 .
	goff1
 = 
td_v¨_off£t
(
ª∂ay_ªdúe˘
),

2564 .
	g∑ª¡
 = "read_iolog",

2565 .
	ghide
 = 1,

2566 .
	ghñp
 = "Replayáll I/O ontoÅhis device,Ñegardless ofÅrace device",

2567 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2568 .
	ggroup
 = 
FIO_OPT_G_IOLOG
,

2571 .
	g«me
 = "exec_prerun",

2572 .
	g ame
 = "Pre-executeÑunnable",

2573 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

2574 .
	goff1
 = 
td_v¨_off£t
(
exec_¥îun
),

2575 .
	ghñp
 = "ExecuteÅhis fileÖriorÅoÑunning job",

2576 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

2577 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2580 .
	g«me
 = "exec_postrun",

2581 .
	g ame
 = "Post-executeÑunnable",

2582 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

2583 .
	goff1
 = 
td_v¨_off£t
(
exec_po°run
),

2584 .
	ghñp
 = "ExecuteÅhis fileáfterÑunning job",

2585 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

2586 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2588 #ifde‡
FIO_HAVE_IOSCHED_SWITCH


2590 .
	g«me
 = "ioscheduler",

2591 .
	g ame
 = "I/O scheduler",

2592 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

2593 .
	goff1
 = 
td_v¨_off£t
(
ioscheduÀr
),

2594 .
	ghñp
 = "UseÅhis IO scheduler onÅhe backing device",

2595 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

2596 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2600 .
	g«me
 = "zonesize",

2601 .
	g ame
 = "Zone size",

2602 .
	gty≥
 = 
FIO_OPT_STR_VAL
,

2603 .
	goff1
 = 
td_v¨_off£t
(
z⁄e_size
),

2604 .
	ghñp
 = "Amount of dataÅoÑeadÖer zone",

2605 .
	gdef
 = "0",

2606 .
	göãrvÆ
 = 1024 * 1024,

2607 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2608 .
	ggroup
 = 
FIO_OPT_G_ZONE
,

2611 .
	g«me
 = "zonerange",

2612 .
	g ame
 = "ZoneÑange",

2613 .
	gty≥
 = 
FIO_OPT_STR_VAL
,

2614 .
	goff1
 = 
td_v¨_off£t
(
z⁄e_ønge
),

2615 .
	ghñp
 = "Give size ofán IO zone",

2616 .
	gdef
 = "0",

2617 .
	göãrvÆ
 = 1024 * 1024,

2618 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2619 .
	ggroup
 = 
FIO_OPT_G_ZONE
,

2622 .
	g«me
 = "zoneskip",

2623 .
	g ame
 = "Zone skip",

2624 .
	gty≥
 = 
FIO_OPT_STR_VAL
,

2625 .
	goff1
 = 
td_v¨_off£t
(
z⁄e_skù
),

2626 .
	ghñp
 = "Space between IO zones",

2627 .
	gdef
 = "0",

2628 .
	göãrvÆ
 = 1024 * 1024,

2629 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2630 .
	ggroup
 = 
FIO_OPT_G_ZONE
,

2633 .
	g«me
 = "lockmem",

2634 .
	g ame
 = "Lock memory",

2635 .
	gty≥
 = 
FIO_OPT_STR_VAL
,

2636 .
	goff1
 = 
td_v¨_off£t
(
lockmem
),

2637 .
	ghñp
 = "Lock downÅhisámount of memory (per worker)",

2638 .
	gdef
 = "0",

2639 .
	göãrvÆ
 = 1024 * 1024,

2640 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

2641 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2644 .
	g«me
 = "rwmixread",

2645 .
	g ame
 = "Read/write mixÑead",

2646 .
	gty≥
 = 
FIO_OPT_INT
,

2647 .
	gcb
 = 
°r_rwmix_ªad_cb
,

2648 .
	gmaxvÆ
 = 100,

2649 .
	ghñp
 = "Percentage of mixed workloadÅhat isÑeads",

2650 .
	gdef
 = "50",

2651 .
	göãrvÆ
 = 5,

2652 .
	gövî£
 = "rwmixwrite",

2653 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2654 .
	ggroup
 = 
FIO_OPT_G_RWMIX
,

2657 .
	g«me
 = "rwmixwrite",

2658 .
	g ame
 = "Read/write mix write",

2659 .
	gty≥
 = 
FIO_OPT_INT
,

2660 .
	gcb
 = 
°r_rwmix_wrôe_cb
,

2661 .
	gmaxvÆ
 = 100,

2662 .
	ghñp
 = "Percentage of mixed workloadÅhat is writes",

2663 .
	gdef
 = "50",

2664 .
	göãrvÆ
 = 5,

2665 .
	gövî£
 = "rwmixread",

2666 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2667 .
	ggroup
 = 
FIO_OPT_G_RWMIX
,

2670 .
	g«me
 = "rwmixcycle",

2671 .
	g ame
 = "Read/write mix cycle",

2672 .
	gty≥
 = 
FIO_OPT_DEPRECATED
,

2673 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2674 .
	ggroup
 = 
FIO_OPT_G_RWMIX
,

2677 .
	g«me
 = "nice",

2678 .
	g ame
 = "Nice",

2679 .
	gty≥
 = 
FIO_OPT_INT
,

2680 .
	goff1
 = 
td_v¨_off£t
(
ni˚
),

2681 .
	ghñp
 = "Set job CPUÇice value",

2682 .
	gmövÆ
 = -19,

2683 .
	gmaxvÆ
 = 20,

2684 .
	gdef
 = "0",

2685 .
	göãrvÆ
 = 1,

2686 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

2687 .
	ggroup
 = 
FIO_OPT_G_CRED
,

2689 #ifde‡
FIO_HAVE_IOPRIO


2691 .
	g«me
 = "prio",

2692 .
	g ame
 = "I/OÇiceÖriority",

2693 .
	gty≥
 = 
FIO_OPT_INT
,

2694 .
	goff1
 = 
td_v¨_off£t
(
i›rio
),

2695 .
	ghñp
 = "Set job IOÖriority value",

2696 .
	gmövÆ
 = 0,

2697 .
	gmaxvÆ
 = 7,

2698 .
	göãrvÆ
 = 1,

2699 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

2700 .
	ggroup
 = 
FIO_OPT_G_CRED
,

2703 .
	g«me
 = "prioclass",

2704 .
	g ame
 = "I/OÇiceÖriority class",

2705 .
	gty≥
 = 
FIO_OPT_INT
,

2706 .
	goff1
 = 
td_v¨_off£t
(
i›rio_˛ass
),

2707 .
	ghñp
 = "Set job IOÖriority class",

2708 .
	gmövÆ
 = 0,

2709 .
	gmaxvÆ
 = 3,

2710 .
	göãrvÆ
 = 1,

2711 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

2712 .
	ggroup
 = 
FIO_OPT_G_CRED
,

2716 .
	g«me
 = "thinktime",

2717 .
	g ame
 = "Thinktime",

2718 .
	gty≥
 = 
FIO_OPT_INT
,

2719 .
	goff1
 = 
td_v¨_off£t
(
thöktime
),

2720 .
	ghñp
 = "IdleÅime between IO buffers (usec)",

2721 .
	gdef
 = "0",

2722 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2723 .
	ggroup
 = 
FIO_OPT_G_THINKTIME
,

2726 .
	g«me
 = "thinktime_spin",

2727 .
	g ame
 = "Thinktime spin",

2728 .
	gty≥
 = 
FIO_OPT_INT
,

2729 .
	goff1
 = 
td_v¨_off£t
(
thöktime_•ö
),

2730 .
	ghñp
 = "StartÅhinkÅime by spinningÅhisámount (usec)",

2731 .
	gdef
 = "0",

2732 .
	g∑ª¡
 = "thinktime",

2733 .
	ghide
 = 1,

2734 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2735 .
	ggroup
 = 
FIO_OPT_G_THINKTIME
,

2738 .
	g«me
 = "thinktime_blocks",

2739 .
	g ame
 = "Thinktime blocks",

2740 .
	gty≥
 = 
FIO_OPT_INT
,

2741 .
	goff1
 = 
td_v¨_off£t
(
thöktime_blocks
),

2742 .
	ghñp
 = "IO bufferÖeriod between 'thinktime'",

2743 .
	gdef
 = "1",

2744 .
	g∑ª¡
 = "thinktime",

2745 .
	ghide
 = 1,

2746 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2747 .
	ggroup
 = 
FIO_OPT_G_THINKTIME
,

2750 .
	g«me
 = "rate",

2751 .
	g ame
 = "I/OÑate",

2752 .
	gty≥
 = 
FIO_OPT_INT
,

2753 .
	goff1
 = 
td_v¨_off£t
(
øã
[
DDIR_READ
]),

2754 .
	goff2
 = 
td_v¨_off£t
(
øã
[
DDIR_WRITE
]),

2755 .
	goff3
 = 
td_v¨_off£t
(
øã
[
DDIR_TRIM
]),

2756 .
	ghñp
 = "Set bandwidthÑate",

2757 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2758 .
	ggroup
 = 
FIO_OPT_G_RATE
,

2761 .
	g«me
 = "ratemin",

2762 .
	g ame
 = "I/O minÑate",

2763 .
	gty≥
 = 
FIO_OPT_INT
,

2764 .
	goff1
 = 
td_v¨_off£t
(
øãmö
[
DDIR_READ
]),

2765 .
	goff2
 = 
td_v¨_off£t
(
øãmö
[
DDIR_WRITE
]),

2766 .
	goff3
 = 
td_v¨_off£t
(
øãmö
[
DDIR_TRIM
]),

2767 .
	ghñp
 = "Job must meetÅhisÑate or it will be shutdown",

2768 .
	g∑ª¡
 = "rate",

2769 .
	ghide
 = 1,

2770 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2771 .
	ggroup
 = 
FIO_OPT_G_RATE
,

2774 .
	g«me
 = "rate_iops",

2775 .
	g ame
 = "I/OÑate IOPS",

2776 .
	gty≥
 = 
FIO_OPT_INT
,

2777 .
	goff1
 = 
td_v¨_off£t
(
øã_i›s
[
DDIR_READ
]),

2778 .
	goff2
 = 
td_v¨_off£t
(
øã_i›s
[
DDIR_WRITE
]),

2779 .
	goff3
 = 
td_v¨_off£t
(
øã_i›s
[
DDIR_TRIM
]),

2780 .
	ghñp
 = "Limit IO usedÅoÅhisÇumber of IO operations/sec",

2781 .
	ghide
 = 1,

2782 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2783 .
	ggroup
 = 
FIO_OPT_G_RATE
,

2786 .
	g«me
 = "rate_iops_min",

2787 .
	g ame
 = "I/O minÑate IOPS",

2788 .
	gty≥
 = 
FIO_OPT_INT
,

2789 .
	goff1
 = 
td_v¨_off£t
(
øã_i›s_mö
[
DDIR_READ
]),

2790 .
	goff2
 = 
td_v¨_off£t
(
øã_i›s_mö
[
DDIR_WRITE
]),

2791 .
	goff3
 = 
td_v¨_off£t
(
øã_i›s_mö
[
DDIR_TRIM
]),

2792 .
	ghñp
 = "Job must meetÅhisÑate or it will be shut down",

2793 .
	g∑ª¡
 = "rate_iops",

2794 .
	ghide
 = 1,

2795 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2796 .
	ggroup
 = 
FIO_OPT_G_RATE
,

2799 .
	g«me
 = "ratecycle",

2800 .
	g ame
 = "I/OÑate cycle",

2801 .
	gty≥
 = 
FIO_OPT_INT
,

2802 .
	goff1
 = 
td_v¨_off£t
(
øãcy˛e
),

2803 .
	ghñp
 = "Windowáverage forÑateÜimits (msec)",

2804 .
	gdef
 = "1000",

2805 .
	g∑ª¡
 = "rate",

2806 .
	ghide
 = 1,

2807 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2808 .
	ggroup
 = 
FIO_OPT_G_RATE
,

2811 .
	g«me
 = "max_latency",

2812 .
	gty≥
 = 
FIO_OPT_INT
,

2813 .
	goff1
 = 
td_v¨_off£t
(
max_œãncy
),

2814 .
	ghñp
 = "MaximumÅolerated IOÜatency (usec)",

2815 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2816 .
	ggroup
 = 
FIO_OPT_G_LATPROF
,

2819 .
	g«me
 = "latency_target",

2820 .
	g ame
 = "Latency Target (usec)",

2821 .
	gty≥
 = 
FIO_OPT_STR_VAL_TIME
,

2822 .
	goff1
 = 
td_v¨_off£t
(
œãncy_èrgë
),

2823 .
	ghñp
 = "RampÅo max queue depth supportingÅhisÜatency",

2824 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2825 .
	ggroup
 = 
FIO_OPT_G_LATPROF
,

2828 .
	g«me
 = "latency_window",

2829 .
	g ame
 = "Latency Window (usec)",

2830 .
	gty≥
 = 
FIO_OPT_STR_VAL_TIME
,

2831 .
	goff1
 = 
td_v¨_off£t
(
œãncy_wödow
),

2832 .
	ghñp
 = "TimeÅo sustainÜatency_target",

2833 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2834 .
	ggroup
 = 
FIO_OPT_G_LATPROF
,

2837 .
	g«me
 = "latency_percentile",

2838 .
	g ame
 = "Latency Percentile",

2839 .
	gty≥
 = 
FIO_OPT_FLOAT_LIST
,

2840 .
	goff1
 = 
td_v¨_off£t
(
œãncy_≥r˚¡ûe
),

2841 .
	ghñp
 = "Percentile of IOs must be belowÜatency_target",

2842 .
	gdef
 = "100",

2843 .
	gmaxÀn
 = 1,

2844 .
	gmöÂ
 = 0.0,

2845 .
	gmaxÂ
 = 100.0,

2846 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2847 .
	ggroup
 = 
FIO_OPT_G_LATPROF
,

2850 .
	g«me
 = "invalidate",

2851 .
	g ame
 = "Cache invalidate",

2852 .
	gty≥
 = 
FIO_OPT_BOOL
,

2853 .
	goff1
 = 
td_v¨_off£t
(
övÆid©e_ˇche
),

2854 .
	ghñp
 = "Invalidate buffer/page cacheÖriorÅoÑunning job",

2855 .
	gdef
 = "1",

2856 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2857 .
	ggroup
 = 
FIO_OPT_G_IO_TYPE
,

2860 .
	g«me
 = "sync",

2861 .
	g ame
 = "Synchronous I/O",

2862 .
	gty≥
 = 
FIO_OPT_BOOL
,

2863 .
	goff1
 = 
td_v¨_off£t
(
sync_io
),

2864 .
	ghñp
 = "Use O_SYNC for buffered writes",

2865 .
	gdef
 = "0",

2866 .
	g∑ª¡
 = "buffered",

2867 .
	ghide
 = 1,

2868 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

2869 .
	ggroup
 = 
FIO_OPT_G_IO_TYPE
,

2872 .
	g«me
 = "create_serialize",

2873 .
	g ame
 = "Create serialize",

2874 .
	gty≥
 = 
FIO_OPT_BOOL
,

2875 .
	goff1
 = 
td_v¨_off£t
(
¸óã_£rülize
),

2876 .
	ghñp
 = "Serialize creating of job files",

2877 .
	gdef
 = "1",

2878 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

2879 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2882 .
	g«me
 = "create_fsync",

2883 .
	g ame
 = "Create fsync",

2884 .
	gty≥
 = 
FIO_OPT_BOOL
,

2885 .
	goff1
 = 
td_v¨_off£t
(
¸óã_fsync
),

2886 .
	ghñp
 = "fsync fileáfter creation",

2887 .
	gdef
 = "1",

2888 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

2889 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2892 .
	g«me
 = "create_on_open",

2893 .
	g ame
 = "Create on open",

2894 .
	gty≥
 = 
FIO_OPT_BOOL
,

2895 .
	goff1
 = 
td_v¨_off£t
(
¸óã_⁄_›í
),

2896 .
	ghñp
 = "Create files whenÅheyáre opened for IO",

2897 .
	gdef
 = "0",

2898 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

2899 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2902 .
	g«me
 = "create_only",

2903 .
	gty≥
 = 
FIO_OPT_BOOL
,

2904 .
	goff1
 = 
td_v¨_off£t
(
¸óã_⁄ly
),

2905 .
	ghñp
 = "OnlyÖerform file creationÖhase",

2906 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

2907 .
	gdef
 = "0",

2910 .
	g«me
 = "pre_read",

2911 .
	g ame
 = "Pre-read files",

2912 .
	gty≥
 = 
FIO_OPT_BOOL
,

2913 .
	goff1
 = 
td_v¨_off£t
(
¥e_ªad
),

2914 .
	ghñp
 = "Pre-read files before starting officialÅesting",

2915 .
	gdef
 = "0",

2916 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

2917 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2919 #ifde‡
FIO_HAVE_CPU_AFFINITY


2921 .
	g«me
 = "cpumask",

2922 .
	g ame
 = "CPU mask",

2923 .
	gty≥
 = 
FIO_OPT_INT
,

2924 .
	gcb
 = 
°r_˝umask_cb
,

2925 .
	ghñp
 = "CPUáffinity mask",

2926 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

2927 .
	ggroup
 = 
FIO_OPT_G_CRED
,

2930 .
	g«me
 = "cpus_allowed",

2931 .
	g ame
 = "CPUsállowed",

2932 .
	gty≥
 = 
FIO_OPT_STR
,

2933 .
	gcb
 = 
°r_˝us_Ælowed_cb
,

2934 .
	ghñp
 = "Set CPUsállowed",

2935 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

2936 .
	ggroup
 = 
FIO_OPT_G_CRED
,

2939 .
	g«me
 = "cpus_allowed_policy",

2940 .
	g ame
 = "CPUsállowed distributionÖolicy",

2941 .
	gty≥
 = 
FIO_OPT_STR
,

2942 .
	goff1
 = 
td_v¨_off£t
(
˝us_Ælowed_pﬁicy
),

2943 .
	ghñp
 = "DistributionÖolicy for cpus_allowed",

2944 .
	g∑ª¡
 = "cpus_allowed",

2945 .
	g¥io
 = 1,

2946 .
	gposvÆ
 = {

2947 { .
ivÆ
 = "shared",

2948 .
	govÆ
 = 
FIO_CPUS_SHARED
,

2949 .
	ghñp
 = "Mask shared betweenÅhreads",

2951 { .
	givÆ
 = "split",

2952 .
	govÆ
 = 
FIO_CPUS_SPLIT
,

2953 .
	ghñp
 = "Mask split betweenÅhreads",

2956 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

2957 .
	ggroup
 = 
FIO_OPT_G_CRED
,

2960 #ifde‡
CONFIG_LIBNUMA


2962 .
	g«me
 = "numa_cpu_nodes",

2963 .
	gty≥
 = 
FIO_OPT_STR
,

2964 .
	gcb
 = 
°r_numa_˝unodes_cb
,

2965 .
	ghñp
 = "NUMA CPUÇodes bind",

2966 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

2967 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2970 .
	g«me
 = "numa_mem_policy",

2971 .
	gty≥
 = 
FIO_OPT_STR
,

2972 .
	gcb
 = 
°r_numa_mpﬁ_cb
,

2973 .
	ghñp
 = "NUMA memoryÖolicy setup",

2974 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

2975 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2979 .
	g«me
 = "end_fsync",

2980 .
	g ame
 = "End fsync",

2981 .
	gty≥
 = 
FIO_OPT_BOOL
,

2982 .
	goff1
 = 
td_v¨_off£t
(
íd_fsync
),

2983 .
	ghñp
 = "Include fsyncátÅheÉnd of job",

2984 .
	gdef
 = "0",

2985 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

2986 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2989 .
	g«me
 = "fsync_on_close",

2990 .
	g ame
 = "Fsync on close",

2991 .
	gty≥
 = 
FIO_OPT_BOOL
,

2992 .
	goff1
 = 
td_v¨_off£t
(
fsync_⁄_˛o£
),

2993 .
	ghñp
 = "fsync files on close",

2994 .
	gdef
 = "0",

2995 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

2996 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

2999 .
	g«me
 = "unlink",

3000 .
	g ame
 = "Unlink file",

3001 .
	gty≥
 = 
FIO_OPT_BOOL
,

3002 .
	goff1
 = 
td_v¨_off£t
(
u∆ök
),

3003 .
	ghñp
 = "Unlink created filesáfter job has completed",

3004 .
	gdef
 = "0",

3005 .
	gˇãg‹y
 = 
FIO_OPT_C_FILE
,

3006 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

3009 .
	g«me
 = "exitall",

3010 .
	g ame
 = "Exit-all onÅerminate",

3011 .
	gty≥
 = 
FIO_OPT_STR_SET
,

3012 .
	gcb
 = 
°r_exôÆl_cb
,

3013 .
	ghñp
 = "Terminateáll jobs when oneÉxits",

3014 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

3015 .
	ggroup
 = 
FIO_OPT_G_PROCESS
,

3018 .
	g«me
 = "stonewall",

3019 .
	g ame
 = "Wait forÖrevious",

3020 .
	gÆüs
 = "wait_for_previous",

3021 .
	gty≥
 = 
FIO_OPT_STR_SET
,

3022 .
	goff1
 = 
td_v¨_off£t
(
°⁄ewÆl
),

3023 .
	ghñp
 = "Insertá hard barrier betweenÅhis jobándÖrevious",

3024 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

3025 .
	ggroup
 = 
FIO_OPT_G_PROCESS
,

3028 .
	g«me
 = "new_group",

3029 .
	g ame
 = "New group",

3030 .
	gty≥
 = 
FIO_OPT_STR_SET
,

3031 .
	goff1
 = 
td_v¨_off£t
(
√w_group
),

3032 .
	ghñp
 = "MarkÅhe start ofáÇew group (forÑeporting)",

3033 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

3034 .
	ggroup
 = 
FIO_OPT_G_PROCESS
,

3037 .
	g«me
 = "thread",

3038 .
	g ame
 = "Thread",

3039 .
	gty≥
 = 
FIO_OPT_STR_SET
,

3040 .
	goff1
 = 
td_v¨_off£t
(
u£_thªad
),

3041 .
	ghñp
 = "UseÅhreads instead ofÖrocesses",

3042 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

3043 .
	ggroup
 = 
FIO_OPT_G_PROCESS
,

3046 .
	g«me
 = "write_bw_log",

3047 .
	g ame
 = "Write bandwidthÜog",

3048 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

3049 .
	goff1
 = 
td_v¨_off£t
(
bw_log_fûe
),

3050 .
	ghñp
 = "WriteÜog of bandwidth duringÑun",

3051 .
	gˇãg‹y
 = 
FIO_OPT_C_LOG
,

3052 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

3055 .
	g«me
 = "write_lat_log",

3056 .
	g ame
 = "WriteÜatencyÜog",

3057 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

3058 .
	goff1
 = 
td_v¨_off£t
(
œt_log_fûe
),

3059 .
	ghñp
 = "WriteÜog ofÜatency duringÑun",

3060 .
	gˇãg‹y
 = 
FIO_OPT_C_LOG
,

3061 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

3064 .
	g«me
 = "write_iops_log",

3065 .
	g ame
 = "Write IOPSÜog",

3066 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

3067 .
	goff1
 = 
td_v¨_off£t
(
i›s_log_fûe
),

3068 .
	ghñp
 = "WriteÜog of IOPS duringÑun",

3069 .
	gˇãg‹y
 = 
FIO_OPT_C_LOG
,

3070 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

3073 .
	g«me
 = "log_avg_msec",

3074 .
	g ame
 = "Logáveraging (msec)",

3075 .
	gty≥
 = 
FIO_OPT_INT
,

3076 .
	goff1
 = 
td_v¨_off£t
(
log_avg_m£c
),

3077 .
	ghñp
 = "Average bw/iops/latÜogs overÅhisÖeriod ofÅime",

3078 .
	gdef
 = "0",

3079 .
	gˇãg‹y
 = 
FIO_OPT_C_LOG
,

3080 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

3083 .
	g«me
 = "bwavgtime",

3084 .
	g ame
 = "BandwidtháverageÅime",

3085 .
	gty≥
 = 
FIO_OPT_INT
,

3086 .
	goff1
 = 
td_v¨_off£t
(
bw_avg_time
),

3087 .
	ghñp
 = "Time window over whichÅo calculate bandwidth"

3089 .
	gdef
 = "500",

3090 .
	g∑ª¡
 = "write_bw_log",

3091 .
	ghide
 = 1,

3092 .
	göãrvÆ
 = 100,

3093 .
	gˇãg‹y
 = 
FIO_OPT_C_LOG
,

3094 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

3097 .
	g«me
 = "iopsavgtime",

3098 .
	g ame
 = "IOPSáverageÅime",

3099 .
	gty≥
 = 
FIO_OPT_INT
,

3100 .
	goff1
 = 
td_v¨_off£t
(
i›s_avg_time
),

3101 .
	ghñp
 = "Time window over whichÅo calculate IOPS (msec)",

3102 .
	gdef
 = "500",

3103 .
	g∑ª¡
 = "write_iops_log",

3104 .
	ghide
 = 1,

3105 .
	göãrvÆ
 = 100,

3106 .
	gˇãg‹y
 = 
FIO_OPT_C_LOG
,

3107 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

3110 .
	g«me
 = "group_reporting",

3111 .
	g ame
 = "GroupÑeporting",

3112 .
	gty≥
 = 
FIO_OPT_STR_SET
,

3113 .
	goff1
 = 
td_v¨_off£t
(
group_ªp‹tög
),

3114 .
	ghñp
 = "DoÑeporting onáÖer-group basis",

3115 .
	gˇãg‹y
 = 
FIO_OPT_C_STAT
,

3116 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

3119 .
	g«me
 = "zero_buffers",

3120 .
	g ame
 = "Zero I/O buffers",

3121 .
	gty≥
 = 
FIO_OPT_STR_SET
,

3122 .
	goff1
 = 
td_v¨_off£t
(
zîo_buf„rs
),

3123 .
	ghñp
 = "Init IO buffersÅoáll zeroes",

3124 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3125 .
	ggroup
 = 
FIO_OPT_G_IO_BUF
,

3128 .
	g«me
 = "refill_buffers",

3129 .
	g ame
 = "Refill I/O buffers",

3130 .
	gty≥
 = 
FIO_OPT_STR_SET
,

3131 .
	goff1
 = 
td_v¨_off£t
(
ªfûl_buf„rs
),

3132 .
	ghñp
 = "Refill IO buffers onÉvery IO submit",

3133 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3134 .
	ggroup
 = 
FIO_OPT_G_IO_BUF
,

3137 .
	g«me
 = "scramble_buffers",

3138 .
	g ame
 = "Scramble I/O buffers",

3139 .
	gty≥
 = 
FIO_OPT_BOOL
,

3140 .
	goff1
 = 
td_v¨_off£t
(
s¸ambÀ_buf„rs
),

3141 .
	ghñp
 = "Slightly scramble buffers onÉvery IO submit",

3142 .
	gdef
 = "1",

3143 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3144 .
	ggroup
 = 
FIO_OPT_G_IO_BUF
,

3147 .
	g«me
 = "buffer_pattern",

3148 .
	g ame
 = "BufferÖattern",

3149 .
	gty≥
 = 
FIO_OPT_STR
,

3150 .
	gcb
 = 
°r_buf„r_∑âîn_cb
,

3151 .
	ghñp
 = "FillÖattern for IO buffers",

3152 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3153 .
	ggroup
 = 
FIO_OPT_G_IO_BUF
,

3156 .
	g«me
 = "buffer_compress_percentage",

3157 .
	g ame
 = "Buffer compressionÖercentage",

3158 .
	gty≥
 = 
FIO_OPT_INT
,

3159 .
	gcb
 = 
°r_buf„r_com¥ess_cb
,

3160 .
	gmaxvÆ
 = 100,

3161 .
	gmövÆ
 = 0,

3162 .
	ghñp
 = "How compressibleÅhe buffer is (approximately)",

3163 .
	göãrvÆ
 = 5,

3164 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3165 .
	ggroup
 = 
FIO_OPT_G_IO_BUF
,

3168 .
	g«me
 = "buffer_compress_chunk",

3169 .
	g ame
 = "Buffer compression chunk size",

3170 .
	gty≥
 = 
FIO_OPT_INT
,

3171 .
	goff1
 = 
td_v¨_off£t
(
com¥ess_chunk
),

3172 .
	g∑ª¡
 = "buffer_compress_percentage",

3173 .
	ghide
 = 1,

3174 .
	ghñp
 = "Size of compressibleÑegion in buffer",

3175 .
	göãrvÆ
 = 256,

3176 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3177 .
	ggroup
 = 
FIO_OPT_G_IO_BUF
,

3180 .
	g«me
 = "clat_percentiles",

3181 .
	g ame
 = "CompletionÜatencyÖercentiles",

3182 .
	gty≥
 = 
FIO_OPT_BOOL
,

3183 .
	goff1
 = 
td_v¨_off£t
(
˛©_≥r˚¡ûes
),

3184 .
	ghñp
 = "EnableÅheÑeporting of completionÜatencyÖercentiles",

3185 .
	gdef
 = "1",

3186 .
	gˇãg‹y
 = 
FIO_OPT_C_STAT
,

3187 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

3190 .
	g«me
 = "percentile_list",

3191 .
	g ame
 = "CompletionÜatencyÖercentileÜist",

3192 .
	gty≥
 = 
FIO_OPT_FLOAT_LIST
,

3193 .
	goff1
 = 
td_v¨_off£t
(
≥r˚¡ûe_li°
),

3194 .
	goff2
 = 
td_v¨_off£t
(
≥r˚¡ûe_¥ecisi⁄
),

3195 .
	ghñp
 = "Specifyá customÜist ofÖercentilesÅoÑeport",

3196 .
	gdef
 = "1:5:10:20:30:40:50:60:70:80:90:95:99:99.5:99.9:99.95:99.99",

3197 .
	gmaxÀn
 = 
FIO_IO_U_LIST_MAX_LEN
,

3198 .
	gmöÂ
 = 0.0,

3199 .
	gmaxÂ
 = 100.0,

3200 .
	gˇãg‹y
 = 
FIO_OPT_C_STAT
,

3201 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

3204 #ifde‡
FIO_HAVE_DISK_UTIL


3206 .
	g«me
 = "disk_util",

3207 .
	g ame
 = "Disk utilization",

3208 .
	gty≥
 = 
FIO_OPT_BOOL
,

3209 .
	goff1
 = 
td_v¨_off£t
(
do_disk_utû
),

3210 .
	ghñp
 = "Log disk utilization statistics",

3211 .
	gdef
 = "1",

3212 .
	gˇãg‹y
 = 
FIO_OPT_C_STAT
,

3213 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

3217 .
	g«me
 = "gtod_reduce",

3218 .
	g ame
 = "Reduce gettimeofday() calls",

3219 .
	gty≥
 = 
FIO_OPT_BOOL
,

3220 .
	ghñp
 = "GreatlyÑeduceÇumber of gettimeofday() calls",

3221 .
	gcb
 = 
°r_gtod_ªdu˚_cb
,

3222 .
	gdef
 = "0",

3223 .
	ghide_⁄_£t
 = 1,

3224 .
	gˇãg‹y
 = 
FIO_OPT_C_STAT
,

3225 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

3228 .
	g«me
 = "disable_lat",

3229 .
	g ame
 = "DisableállÜatency stats",

3230 .
	gty≥
 = 
FIO_OPT_BOOL
,

3231 .
	goff1
 = 
td_v¨_off£t
(
dißbÀ_œt
),

3232 .
	ghñp
 = "DisableÜatencyÇumbers",

3233 .
	g∑ª¡
 = "gtod_reduce",

3234 .
	ghide
 = 1,

3235 .
	gdef
 = "0",

3236 .
	gˇãg‹y
 = 
FIO_OPT_C_STAT
,

3237 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

3240 .
	g«me
 = "disable_clat",

3241 .
	g ame
 = "Disable completionÜatency stats",

3242 .
	gty≥
 = 
FIO_OPT_BOOL
,

3243 .
	goff1
 = 
td_v¨_off£t
(
dißbÀ_˛©
),

3244 .
	ghñp
 = "Disable completionÜatencyÇumbers",

3245 .
	g∑ª¡
 = "gtod_reduce",

3246 .
	ghide
 = 1,

3247 .
	gdef
 = "0",

3248 .
	gˇãg‹y
 = 
FIO_OPT_C_STAT
,

3249 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

3252 .
	g«me
 = "disable_slat",

3253 .
	g ame
 = "Disable submissionÜatency stats",

3254 .
	gty≥
 = 
FIO_OPT_BOOL
,

3255 .
	goff1
 = 
td_v¨_off£t
(
dißbÀ_¶©
),

3256 .
	ghñp
 = "Disable submissionÜatencyÇumbers",

3257 .
	g∑ª¡
 = "gtod_reduce",

3258 .
	ghide
 = 1,

3259 .
	gdef
 = "0",

3260 .
	gˇãg‹y
 = 
FIO_OPT_C_STAT
,

3261 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

3264 .
	g«me
 = "disable_bw_measurement",

3265 .
	g ame
 = "Disable bandwidth stats",

3266 .
	gty≥
 = 
FIO_OPT_BOOL
,

3267 .
	goff1
 = 
td_v¨_off£t
(
dißbÀ_bw
),

3268 .
	ghñp
 = "Disable bandwidthÜogging",

3269 .
	g∑ª¡
 = "gtod_reduce",

3270 .
	ghide
 = 1,

3271 .
	gdef
 = "0",

3272 .
	gˇãg‹y
 = 
FIO_OPT_C_STAT
,

3273 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

3276 .
	g«me
 = "gtod_cpu",

3277 .
	g ame
 = "Dedicated gettimeofday() CPU",

3278 .
	gty≥
 = 
FIO_OPT_INT
,

3279 .
	gcb
 = 
°r_gtod_˝u_cb
,

3280 .
	ghñp
 = "Set up dedicated gettimeofday()Åhread onÅhis CPU",

3281 .
	gvîify
 = 
gtod_˝u_vîify
,

3282 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

3283 .
	ggroup
 = 
FIO_OPT_G_CLOCK
,

3286 .
	g«me
 = "unified_rw_reporting",

3287 .
	gty≥
 = 
FIO_OPT_BOOL
,

3288 .
	goff1
 = 
td_v¨_off£t
(
unifõd_rw_ªp
),

3289 .
	ghñp
 = "UnifyÑeportingácross data direction",

3290 .
	gdef
 = "0",

3291 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

3292 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

3295 .
	g«me
 = "continue_on_error",

3296 .
	g ame
 = "Continue onÉrror",

3297 .
	gty≥
 = 
FIO_OPT_STR
,

3298 .
	goff1
 = 
td_v¨_off£t
(
c⁄töue_⁄_îr‹
),

3299 .
	ghñp
 = "Continue onÇon-fatalÉrrors during IO",

3300 .
	gdef
 = "none",

3301 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

3302 .
	ggroup
 = 
FIO_OPT_G_ERR
,

3303 .
	gposvÆ
 = {

3304 { .
ivÆ
 = "none",

3305 .
	govÆ
 = 
ERROR_TYPE_NONE
,

3306 .
	ghñp
 = "Exit whenánÉrror isÉncountered",

3308 { .
	givÆ
 = "read",

3309 .
	govÆ
 = 
ERROR_TYPE_READ
,

3310 .
	ghñp
 = "Continue onÑeadÉrrors only",

3312 { .
	givÆ
 = "write",

3313 .
	govÆ
 = 
ERROR_TYPE_WRITE
,

3314 .
	ghñp
 = "Continue on writeÉrrors only",

3316 { .
	givÆ
 = "io",

3317 .
	govÆ
 = 
ERROR_TYPE_READ
 | 
ERROR_TYPE_WRITE
,

3318 .
	ghñp
 = "Continue onány IOÉrrors",

3320 { .
	givÆ
 = "verify",

3321 .
	govÆ
 = 
ERROR_TYPE_VERIFY
,

3322 .
	ghñp
 = "Continue on verifyÉrrors only",

3324 { .
	givÆ
 = "all",

3325 .
	govÆ
 = 
ERROR_TYPE_ANY
,

3326 .
	ghñp
 = "Continue onáll ioánd verifyÉrrors",

3328 { .
	givÆ
 = "0",

3329 .
	govÆ
 = 
ERROR_TYPE_NONE
,

3330 .
	ghñp
 = "Alias for 'none'",

3332 { .
	givÆ
 = "1",

3333 .
	govÆ
 = 
ERROR_TYPE_ANY
,

3334 .
	ghñp
 = "Alias for 'all'",

3339 .
	g«me
 = "ignore_error",

3340 .
	gty≥
 = 
FIO_OPT_STR
,

3341 .
	gcb
 = 
°r_ign‹e_îr‹_cb
,

3342 .
	ghñp
 = "Setá specificÜist ofÉrrorsÅo ignore",

3343 .
	g∑ª¡
 = "rw",

3344 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

3345 .
	ggroup
 = 
FIO_OPT_G_ERR
,

3348 .
	g«me
 = "error_dump",

3349 .
	gty≥
 = 
FIO_OPT_BOOL
,

3350 .
	goff1
 = 
td_v¨_off£t
(
îr‹_dump
),

3351 .
	gdef
 = "0",

3352 .
	ghñp
 = "Dump info onÉachÉrror",

3353 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

3354 .
	ggroup
 = 
FIO_OPT_G_ERR
,

3357 .
	g«me
 = "profile",

3358 .
	g ame
 = "Profile",

3359 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

3360 .
	goff1
 = 
td_v¨_off£t
(
¥ofûe
),

3361 .
	ghñp
 = "Selectá specific builtinÖerformanceÅest",

3362 .
	gˇãg‹y
 = 
FIO_OPT_C_PROFILE
,

3363 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

3366 .
	g«me
 = "cgroup",

3367 .
	g ame
 = "Cgroup",

3368 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

3369 .
	goff1
 = 
td_v¨_off£t
(
cgroup
),

3370 .
	ghñp
 = "Add jobÅo cgroup ofÅhisÇame",

3371 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

3372 .
	ggroup
 = 
FIO_OPT_G_CGROUP
,

3375 .
	g«me
 = "cgroup_nodelete",

3376 .
	g ame
 = "CgroupÇo-delete",

3377 .
	gty≥
 = 
FIO_OPT_BOOL
,

3378 .
	goff1
 = 
td_v¨_off£t
(
cgroup_nodñëe
),

3379 .
	ghñp
 = "DoÇot delete cgroupsáfter job completion",

3380 .
	gdef
 = "0",

3381 .
	g∑ª¡
 = "cgroup",

3382 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

3383 .
	ggroup
 = 
FIO_OPT_G_CGROUP
,

3386 .
	g«me
 = "cgroup_weight",

3387 .
	g ame
 = "Cgroup weight",

3388 .
	gty≥
 = 
FIO_OPT_INT
,

3389 .
	goff1
 = 
td_v¨_off£t
(
cgroup_weight
),

3390 .
	ghñp
 = "Use given weight for cgroup",

3391 .
	gmövÆ
 = 100,

3392 .
	gmaxvÆ
 = 1000,

3393 .
	g∑ª¡
 = "cgroup",

3394 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

3395 .
	ggroup
 = 
FIO_OPT_G_CGROUP
,

3398 .
	g«me
 = "uid",

3399 .
	g ame
 = "User ID",

3400 .
	gty≥
 = 
FIO_OPT_INT
,

3401 .
	goff1
 = 
td_v¨_off£t
(
uid
),

3402 .
	ghñp
 = "Run job withÅhis user ID",

3403 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

3404 .
	ggroup
 = 
FIO_OPT_G_CRED
,

3407 .
	g«me
 = "gid",

3408 .
	g ame
 = "Group ID",

3409 .
	gty≥
 = 
FIO_OPT_INT
,

3410 .
	goff1
 = 
td_v¨_off£t
(
gid
),

3411 .
	ghñp
 = "Run job withÅhis group ID",

3412 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

3413 .
	ggroup
 = 
FIO_OPT_G_CRED
,

3416 .
	g«me
 = "kb_base",

3417 .
	g ame
 = "KB Base",

3418 .
	gty≥
 = 
FIO_OPT_INT
,

3419 .
	goff1
 = 
td_v¨_off£t
(
kb_ba£
),

3420 .
	g¥io
 = 1,

3421 .
	gdef
 = "1024",

3422 .
	gposvÆ
 = {

3423 { .
ivÆ
 = "1024",

3424 .
	govÆ
 = 1024,

3425 .
	ghñp
 = "Use 1024ásÅhe K base",

3427 { .
	givÆ
 = "1000",

3428 .
	govÆ
 = 1000,

3429 .
	ghñp
 = "Use 1000ásÅhe K base",

3432 .
	ghñp
 = "How many bytesÖer KB forÑeporting (1000 or 1024)",

3433 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

3434 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

3437 .
	g«me
 = "unit_base",

3438 .
	g ame
 = "Base unit forÑeporting (Bits or Bytes)",

3439 .
	gty≥
 = 
FIO_OPT_INT
,

3440 .
	goff1
 = 
td_v¨_off£t
(
unô_ba£
),

3441 .
	g¥io
 = 1,

3442 .
	gposvÆ
 = {

3443 { .
ivÆ
 = "0",

3444 .
	govÆ
 = 0,

3445 .
	ghñp
 = "Auto-detect",

3447 { .
	givÆ
 = "8",

3448 .
	govÆ
 = 8,

3449 .
	ghñp
 = "Normal (byte based)",

3451 { .
	givÆ
 = "1",

3452 .
	govÆ
 = 1,

3453 .
	ghñp
 = "Bit based",

3456 .
	ghñp
 = "Bit multiple ofÑesult summary data (8 for byte, 1 for bit)",

3457 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

3458 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

3461 .
	g«me
 = "hugepage-size",

3462 .
	g ame
 = "Hugepage size",

3463 .
	gty≥
 = 
FIO_OPT_INT
,

3464 .
	goff1
 = 
td_v¨_off£t
(
hugïage_size
),

3465 .
	ghñp
 = "When using hugepages, specify size ofÉachÖage",

3466 .
	gdef
 = 
__fio_°rögify
(
FIO_HUGE_PAGE
),

3467 .
	göãrvÆ
 = 1024 * 1024,

3468 .
	gˇãg‹y
 = 
FIO_OPT_C_GENERAL
,

3469 .
	ggroup
 = 
FIO_OPT_G_INVALID
,

3472 .
	g«me
 = "flow_id",

3473 .
	g ame
 = "I/O flow ID",

3474 .
	gty≥
 = 
FIO_OPT_INT
,

3475 .
	goff1
 = 
td_v¨_off£t
(
Êow_id
),

3476 .
	ghñp
 = "The flow index IDÅo use",

3477 .
	gdef
 = "0",

3478 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3479 .
	ggroup
 = 
FIO_OPT_G_IO_FLOW
,

3482 .
	g«me
 = "flow",

3483 .
	g ame
 = "I/O flow weight",

3484 .
	gty≥
 = 
FIO_OPT_INT
,

3485 .
	goff1
 = 
td_v¨_off£t
(
Êow
),

3486 .
	ghñp
 = "Weight for flow control ofÅhis job",

3487 .
	g∑ª¡
 = "flow_id",

3488 .
	ghide
 = 1,

3489 .
	gdef
 = "0",

3490 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3491 .
	ggroup
 = 
FIO_OPT_G_IO_FLOW
,

3494 .
	g«me
 = "flow_watermark",

3495 .
	g ame
 = "I/O flow watermark",

3496 .
	gty≥
 = 
FIO_OPT_INT
,

3497 .
	goff1
 = 
td_v¨_off£t
(
Êow_w©îm¨k
),

3498 .
	ghñp
 = "High watermark for flow control. This option"

3501 .
	g∑ª¡
 = "flow_id",

3502 .
	ghide
 = 1,

3503 .
	gdef
 = "1024",

3504 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3505 .
	ggroup
 = 
FIO_OPT_G_IO_FLOW
,

3508 .
	g«me
 = "flow_sleep",

3509 .
	g ame
 = "I/O flow sleep",

3510 .
	gty≥
 = 
FIO_OPT_INT
,

3511 .
	goff1
 = 
td_v¨_off£t
(
Êow_¶ìp
),

3512 .
	ghñp
 = "How many microsecondsÅo sleepáfter being held"

3514 .
	g∑ª¡
 = "flow_id",

3515 .
	ghide
 = 1,

3516 .
	gdef
 = "0",

3517 .
	gˇãg‹y
 = 
FIO_OPT_C_IO
,

3518 .
	ggroup
 = 
FIO_OPT_G_IO_FLOW
,

3521 .
	g«me
 = 
NULL
,

3525 
	$add_to_l›t
(
›ti⁄
 *
l›t
, 
fio_›ti⁄
 *
o
,

3526 c⁄° *
«me
, 
vÆ
)

3528 
l›t
->
«me
 = (*)Çame;

3529 
l›t
->
vÆ
 = val;

3530 i‡(
o
->
ty≥
 =
FIO_OPT_STR_SET
)

3531 
l›t
->
has_¨g
 = 
›ti⁄Æ_¨gumít
;

3533 
l›t
->
has_¨g
 = 
ªquúed_¨gumít
;

3534 
	}
}

3536 
	$›ti⁄s_to_l›ts
(
fio_›ti⁄
 *
›ts
,

3537 
›ti⁄
 *
l⁄g_›ti⁄s
,

3538 
i
, 
›ti⁄_ty≥
)

3540 
fio_›ti⁄
 *
o
 = &
›ts
[0];

3541 
o
->
«me
) {

3542 
	`add_to_l›t
(&
l⁄g_›ti⁄s
[
i
], 
o
, o->
«me
, 
›ti⁄_ty≥
);

3543 i‡(
o
->
Æüs
) {

3544 
i
++;

3545 
	`add_to_l›t
(&
l⁄g_›ti⁄s
[
i
], 
o
, o->
Æüs
, 
›ti⁄_ty≥
);

3548 
i
++;

3549 
o
++;

3550 
	`as£π
(
i
 < 
FIO_NR_OPTIONS
);

3552 
	}
}

3554 
	$fio_›ti⁄s_£t_i€ngöe_›ts
(
›ti⁄
 *
l⁄g_›ti⁄s
,

3555 
thªad_d©a
 *
td
)

3557 
i
;

3559 
i
 = 0;

3560 
l⁄g_›ti⁄s
[
i
].
«me
) {

3561 i‡(
l⁄g_›ti⁄s
[
i
].
vÆ
 =
FIO_GETOPT_IOENGINE
) {

3562 
	`mem£t
(&
l⁄g_›ti⁄s
[
i
], 0, (*long_options));

3565 
i
++;

3571 i‡(!
td
 || !td->
eo
)

3574 
	`›ti⁄s_to_l›ts
(
td
->
io_›s
->
›ti⁄s
, 
l⁄g_›ti⁄s
, 
i
,

3575 
FIO_GETOPT_IOENGINE
);

3576 
	}
}

3578 
	$fio_›ti⁄s_dup_™d_öô
(
›ti⁄
 *
l⁄g_›ti⁄s
)

3580 
i
;

3582 
	`›ti⁄s_öô
(
fio_›ti⁄s
);

3584 
i
 = 0;

3585 
l⁄g_›ti⁄s
[
i
].
«me
)

3586 
i
++;

3588 
	`›ti⁄s_to_l›ts
(
fio_›ti⁄s
, 
l⁄g_›ti⁄s
, 
i
, 
FIO_GETOPT_JOB
);

3589 
	}
}

3591 
	sfio_keyw‹d
 {

3592 c⁄° *
	mw‹d
;

3593 c⁄° *
	mdesc
;

3594 *
	mª∂a˚
;

3597 
fio_keyw‹d
 
	gfio_keyw‹ds
[] = {

3599 .
w‹d
 = "$pagesize",

3600 .
	gdesc
 = "Page size inÅhe system",

3603 .
	gw‹d
 = "$mb_memory",

3604 .
	gdesc
 = "Megabytes of memory online",

3607 .
	gw‹d
 = "$ncpus",

3608 .
	gdesc
 = "Number of CPUs online inÅhe system",

3611 .
	gw‹d
 = 
NULL
,

3615 
	$fio_keyw‹ds_öô
()

3617 
mb_mem‹y
;

3618 
buf
[128];

3619 
l
;

3621 
	`•rötf
(
buf
, "%lu", (Ë
∑ge_size
);

3622 
fio_keyw‹ds
[0].
ª∂a˚
 = 
	`°rdup
(
buf
);

3624 
mb_mem‹y
 = 
	`os_phys_mem
() / (1024 * 1024);

3625 
	`•rötf
(
buf
, "%Œu", 
mb_mem‹y
);

3626 
fio_keyw‹ds
[1].
ª∂a˚
 = 
	`°rdup
(
buf
);

3628 
l
 = 
	`˝us_⁄löe
();

3629 
	`•rötf
(
buf
, "%lu", 
l
);

3630 
fio_keyw‹ds
[2].
ª∂a˚
 = 
	`°rdup
(
buf
);

3631 
	}
}

3633 
	#BC_APP
 "bc"

	)

3635 *
	$bc_ˇlc
(*
°r
)

3637 
buf
[128], *
tmp
;

3638 
FILE
 *
f
;

3639 
ªt
;

3644 i‡((!
	`°rchr
(
°r
, '+') && !strchr(str, '-') && !strchr(str, '*') &&

3645 !
	`°rchr
(
°r
, '/')) || strchr(str, '\''))

3646  
°r
;

3651 
tmp
 = 
	`°rchr
(
°r
, '=');

3652 i‡(!
tmp
)

3653  
°r
;

3655 
tmp
++;

3660 i‡(
	`°æí
(
°r
Ë>128 || såÀn(
tmp
) > 100)

3661  
°r
;

3663 
	`•rötf
(
buf
, "which %†> /dev/nuŒ", 
BC_APP
);

3664 i‡(
	`sy°em
(
buf
)) {

3665 
	`log_îr
("fio: bc isÇeeded forÖerforming math\n");

3666  
NULL
;

3669 
	`•rötf
(
buf
, "echÿ'%s' | %s", 
tmp
, 
BC_APP
);

3670 
f
 = 
	`p›í
(
buf
, "r");

3671 i‡(!
f
)

3672  
NULL
;

3674 
ªt
 = 
	`‰ód
(&
buf
[
tmp
 - 
°r
], 1, 128 - (tm∞- så), 
f
);

3675 i‡(
ªt
 <= 0) {

3676 
	`p˛o£
(
f
);

3677  
NULL
;

3680 
	`p˛o£
(
f
);

3681 
buf
[(
tmp
 - 
°r
Ë+ 
ªt
 - 1] = '\0';

3682 
	`mem˝y
(
buf
, 
°r
, 
tmp
 - str);

3683 
	`‰ì
(
°r
);

3684  
	`°rdup
(
buf
);

3685 
	}
}

3693 *
	$›ti⁄_dup_subs
(c⁄° *
›t
)

3695 
out
[
OPT_LEN_MAX
+1];

3696 
ö
[
OPT_LEN_MAX
+1];

3697 *
ouçå
 = 
out
;

3698 *
ö±r
 = 
ö
;

3699 *
ch1
, *
ch2
, *
ív
;

3700 
ssize_t
 
nchr
 = 
OPT_LEN_MAX
;

3701 
size_t
 
ívÀn
;

3703 i‡(
	`°æí
(
›t
Ë+ 1 > 
OPT_LEN_MAX
) {

3704 
	`log_îr
("OPT_LEN_MAX (%dËi†toÿsmÆl\n", 
OPT_LEN_MAX
);

3705  
NULL
;

3708 
ö
[
OPT_LEN_MAX
] = '\0';

3709 
	`°∫˝y
(
ö
, 
›t
, 
OPT_LEN_MAX
);

3711 *
ö±r
 && 
nchr
 > 0) {

3712 i‡(
ö±r
[0] == '$' && inptr[1] == '{') {

3713 
ch2
 = 
	`°rchr
(
ö±r
, '}');

3714 i‡(
ch2
 && 
ö±r
+1 < ch2) {

3715 
ch1
 = 
ö±r
+2;

3716 
ö±r
 = 
ch2
+1;

3717 *
ch2
 = '\0';

3719 
ív
 = 
	`gëív
(
ch1
);

3720 i‡(
ív
) {

3721 
ívÀn
 = 
	`°æí
(
ív
);

3722 i‡(
ívÀn
 <
nchr
) {

3723 
	`mem˝y
(
ouçå
, 
ív
, 
ívÀn
);

3724 
ouçå
 +
ívÀn
;

3725 
nchr
 -
ívÀn
;

3733 *
ouçå
++ = *
ö±r
++;

3734 --
nchr
;

3737 *
ouçå
 = '\0';

3738  
	`°rdup
(
out
);

3739 
	}
}

3744 *
	$fio_keyw‹d_ª∂a˚
(*
›t
)

3746 *
s
;

3747 
i
;

3748 
doˇlc
 = 0;

3750 
i
 = 0; 
fio_keyw‹ds
[i].
w‹d
 !
NULL
; i++) {

3751 
fio_keyw‹d
 *
kw
 = &
fio_keyw‹ds
[
i
];

3753 (
s
 = 
	`°r°r
(
›t
, 
kw
->
w‹d
)Ë!
NULL
) {

3754 *
√w
 = 
	`mÆloc
(
	`°æí
(
›t
) + 1);

3755 *
o_‹g
 = 
›t
;

3756 
ﬁí
 = 
s
 - 
›t
;

3757 
Àn
;

3763 
	`mem˝y
(
√w
, 
›t
, 
ﬁí
);

3764 
Àn
 = 
	`•rötf
(
√w
 + 
ﬁí
, "%s", 
kw
->
ª∂a˚
);

3770 
›t
 +
	`°æí
(
kw
->
w‹d
Ë+ 
ﬁí
;

3771 i‡(
	`°æí
(
›t
))

3772 
	`mem˝y
(
√w
 + 
ﬁí
 + 
Àn
, 
›t
, o± - 
o_‹g
 - 1);

3777 
›t
 = 
√w
;

3778 
	`‰ì
(
o_‹g
);

3780 
doˇlc
 = 1;

3787 i‡(
doˇlc
)

3788 
›t
 = 
	`bc_ˇlc
(opt);

3790  
›t
;

3791 
	}
}

3793 **
	$dup_™d_sub_›ti⁄s
(**
›ts
, 
num_›ts
)

3795 
i
;

3796 **
›ts_c›y
 = 
	`mÆloc
(
num_›ts
 * (*
›ts
));

3797 
i
 = 0; i < 
num_›ts
; i++) {

3798 
›ts_c›y
[
i
] = 
	`›ti⁄_dup_subs
(
›ts
[i]);

3799 i‡(!
›ts_c›y
[
i
])

3801 
›ts_c›y
[
i
] = 
	`fio_keyw‹d_ª∂a˚
(opts_copy[i]);

3803  
›ts_c›y
;

3804 
	}
}

3806 
	$fio_›ti⁄s_∑r£
(
thªad_d©a
 *
td
, **
›ts
, 
num_›ts
,

3807 
dump_cmdlöe
)

3809 
i
, 
ªt
, 
unknown
;

3810 **
›ts_c›y
;

3812 
	`s‹t_›ti⁄s
(
›ts
, 
fio_›ti⁄s
, 
num_›ts
);

3813 
›ts_c›y
 = 
	`dup_™d_sub_›ti⁄s
(
›ts
, 
num_›ts
);

3815 
ªt
 = 0, 
i
 = 0, 
unknown
 = 0; i < 
num_›ts
; i++) {

3816 
fio_›ti⁄
 *
o
;

3817 
√wªt
 = 
	`∑r£_›ti⁄
(
›ts_c›y
[
i
], 
›ts
[i], 
fio_›ti⁄s
,

3818 &
o
, 
td
, 
dump_cmdlöe
);

3820 i‡(
›ts_c›y
[
i
]) {

3821 i‡(
√wªt
 && !
o
) {

3822 
unknown
++;

3825 
	`‰ì
(
›ts_c›y
[
i
]);

3826 
›ts_c›y
[
i
] = 
NULL
;

3829 
ªt
 |
√wªt
;

3832 i‡(
unknown
) {

3833 
ªt
 |
	`i€ngöe_lﬂd
(
td
);

3834 i‡(
td
->
eo
) {

3835 
	`s‹t_›ti⁄s
(
›ts_c›y
, 
td
->
io_›s
->
›ti⁄s
, 
num_›ts
);

3836 
›ts
 = 
›ts_c›y
;

3838 
i
 = 0; i < 
num_›ts
; i++) {

3839 
fio_›ti⁄
 *
o
 = 
NULL
;

3840 
√wªt
 = 1;

3841 i‡(!
›ts_c›y
[
i
])

3844 i‡(
td
->
eo
)

3845 
√wªt
 = 
	`∑r£_›ti⁄
(
›ts_c›y
[
i
], 
›ts
[i],

3846 
td
->
io_›s
->
›ti⁄s
, &
o
,

3847 
td
->
eo
, 
dump_cmdlöe
);

3849 
ªt
 |
√wªt
;

3850 i‡(!
o
)

3851 
	`log_îr
("Bad o±i⁄ <%s>\n", 
›ts
[
i
]);

3853 
	`‰ì
(
›ts_c›y
[
i
]);

3854 
›ts_c›y
[
i
] = 
NULL
;

3858 
	`‰ì
(
›ts_c›y
);

3859  
ªt
;

3860 
	}
}

3862 
	$fio_cmd_›ti⁄_∑r£
(
thªad_d©a
 *
td
, c⁄° *
›t
, *
vÆ
)

3864  
	`∑r£_cmd_›ti⁄
(
›t
, 
vÆ
, 
fio_›ti⁄s
, 
td
);

3865 
	}
}

3867 
	$fio_cmd_i€ngöe_›ti⁄_∑r£
(
thªad_d©a
 *
td
, c⁄° *
›t
,

3868 *
vÆ
)

3870  
	`∑r£_cmd_›ti⁄
(
›t
, 
vÆ
, 
td
->
io_›s
->
›ti⁄s
,Åd->
eo
);

3871 
	}
}

3873 
	$fio_fûl_deÁu…_›ti⁄s
(
thªad_d©a
 *
td
)

3875 
td
->
o
.
magic
 = 
OPT_MAGIC
;

3876 
	`fûl_deÁu…_›ti⁄s
(
td
, 
fio_›ti⁄s
);

3877 
	}
}

3879 
	$fio_show_›ti⁄_hñp
(c⁄° *
›t
)

3881  
	`show_cmd_hñp
(
fio_›ti⁄s
, 
›t
);

3882 
	}
}

3884 
	$›ti⁄s_mem_du≥
(*
d©a
, 
fio_›ti⁄
 *
›ti⁄s
)

3886 
fio_›ti⁄
 *
o
;

3887 **
±r
;

3889 
o
 = &
›ti⁄s
[0]; o->
«me
; o++) {

3890 i‡(
o
->
ty≥
 !
FIO_OPT_STR_STORE
)

3893 
±r
 = 
	`td_v¨
(
d©a
, 
o
, o->
off1
);

3894 i‡(*
±r
)

3895 *
±r
 = 
	`°rdup
(*ptr);

3897 
	}
}

3902 
	$fio_›ti⁄s_mem_du≥
(
thªad_d©a
 *
td
)

3904 
	`›ti⁄s_mem_du≥
(&
td
->
o
, 
fio_›ti⁄s
);

3906 i‡(
td
->
eo
 &&Åd->
io_›s
) {

3907 *
ﬁdeo
 = 
td
->
eo
;

3909 
td
->
eo
 = 
	`mÆloc
—d->
io_›s
->
›ti⁄_°ru˘_size
);

3910 
	`mem˝y
(
td
->
eo
, 
ﬁdeo
,Åd->
io_›s
->
›ti⁄_°ru˘_size
);

3911 
	`›ti⁄s_mem_du≥
(
td
->
eo
,Åd->
io_›s
->
›ti⁄s
);

3913 
	}
}

3915 
	$fio_gë_kb_ba£
(*
d©a
)

3917 
thªad_›ti⁄s
 *
o
 = 
d©a
;

3918 
kb_ba£
 = 0;

3929 i‡(
o
 && o->
magic
 =
OPT_MAGIC
)

3930 
kb_ba£
 = 
o
->kb_base;

3931 i‡(!
kb_ba£
)

3932 
kb_ba£
 = 1024;

3934  
kb_ba£
;

3935 
	}
}

3937 
	$add_›ti⁄
(
fio_›ti⁄
 *
o
)

3939 
fio_›ti⁄
 *
__o
;

3940 
›t_ödex
 = 0;

3942 
__o
 = 
fio_›ti⁄s
;

3943 
__o
->
«me
) {

3944 
›t_ödex
++;

3945 
__o
++;

3948 i‡(
›t_ödex
 + 1 =
FIO_MAX_OPTS
) {

3949 
	`log_îr
("fio: FIO_MAX_OPTS isÅoo small\n");

3953 
	`mem˝y
(&
fio_›ti⁄s
[
›t_ödex
], 
o
, (*o));

3954 
fio_›ti⁄s
[
›t_ödex
 + 1].
«me
 = 
NULL
;

3956 
	}
}

3958 
	$övÆid©e_¥ofûe_›ti⁄s
(c⁄° *
¥of_«me
)

3960 
fio_›ti⁄
 *
o
;

3962 
o
 = 
fio_›ti⁄s
;

3963 
o
->
«me
) {

3964 i‡(
o
->
¥of_«me
 && !
	`°rcmp
(o->prof_name,Örof_name)) {

3965 
o
->
ty≥
 = 
FIO_OPT_INVALID
;

3966 
o
->
¥of_«me
 = 
NULL
;

3968 
o
++;

3970 
	}
}

3972 
	$add_›t_posvÆ
(c⁄° *
›äame
, c⁄° *
ivÆ
, c⁄° *
hñp
)

3974 
fio_›ti⁄
 *
o
;

3975 
i
;

3977 
o
 = 
	`föd_›ti⁄
(
fio_›ti⁄s
, 
›äame
);

3978 i‡(!
o
)

3981 
i
 = 0; i < 
PARSE_MAX_VP
; i++) {

3982 i‡(
o
->
posvÆ
[
i
].
ivÆ
)

3985 
o
->
posvÆ
[
i
].
ivÆ
 = ival;

3986 
o
->
posvÆ
[
i
].
hñp
 = help;

3989 
	}
}

3991 
	$dñ_›t_posvÆ
(c⁄° *
›äame
, c⁄° *
ivÆ
)

3993 
fio_›ti⁄
 *
o
;

3994 
i
;

3996 
o
 = 
	`föd_›ti⁄
(
fio_›ti⁄s
, 
›äame
);

3997 i‡(!
o
)

4000 
i
 = 0; i < 
PARSE_MAX_VP
; i++) {

4001 i‡(!
o
->
posvÆ
[
i
].
ivÆ
)

4003 i‡(
	`°rcmp
(
o
->
posvÆ
[
i
].
ivÆ
, ival))

4006 
o
->
posvÆ
[
i
].
ivÆ
 = 
NULL
;

4007 
o
->
posvÆ
[
i
].
hñp
 = 
NULL
;

4009 
	}
}

4011 
	$fio_›ti⁄s_‰ì
(
thªad_d©a
 *
td
)

4013 
	`›ti⁄s_‰ì
(
fio_›ti⁄s
, 
td
);

4014 i‡(
td
->
eo
 &&Åd->
io_›s
 &&Åd->io_›s->
›ti⁄s
) {

4015 
	`›ti⁄s_‰ì
(
td
->
io_›s
->
›ti⁄s
,Åd->
eo
);

4016 
	`‰ì
(
td
->
eo
);

4017 
td
->
eo
 = 
NULL
;

4019 
	}
}

4021 
fio_›ti⁄
 *
	$fio_›ti⁄_föd
(c⁄° *
«me
)

4023  
	`föd_›ti⁄
(
fio_›ti⁄s
, 
«me
);

4024 
	}
}

	@/home/terekhov/tmp/fio/fio/options.h

1 #i‚de‡
FIO_OPTION_H


2 
	#FIO_OPTION_H


	)

4 
	#FIO_MAX_OPTS
 512

	)

6 
	~<°rög.h
>

7 
	~"∑r£.h
"

8 
	~"Êi°.h
"

10 
	#td_v¨_off£t
(
v¨
Ë((
size_t
Ë&((
thªad_›ti⁄s
 *)0)->v¨)

	)

12 
add_›ti⁄
(
fio_›ti⁄
 *);

13 
övÆid©e_¥ofûe_›ti⁄s
(const *);

14 *
exec_¥ofûe
;

16 
add_›t_posvÆ
(const *, const *, const *);

17 
dñ_›t_posvÆ
(const *, const *);

18 
	gthªad_d©a
;

19 
fio_›ti⁄s_‰ì
(
thªad_d©a
 *);

20 *
gë_«me_idx
(*, );

21 
£t_«me_idx
(*, *, );

23 
fio_›ti⁄
 
fio_›ti⁄s
[
FIO_MAX_OPTS
];

25 
ölöe
 
	$o_m©ch
(
fio_›ti⁄
 *
o
, c⁄° *
›t
)

27 i‡(!
	`°rcmp
(
o
->
«me
, 
›t
))

29 i‡(
o
->
Æüs
 && !
	`°rcmp
(o->Æüs, 
›t
))

33 
	}
}

35 
ölöe
 
fio_›ti⁄
 *
	$föd_›ti⁄
(
fio_›ti⁄
 *
›ti⁄s
,

36 c⁄° *
›t
)

38 
fio_›ti⁄
 *
o
;

40 
o
 = &
›ti⁄s
[0]; o->
«me
; o++)

41 i‡(
	`o_m©ch
(
o
, 
›t
))

42  
o
;

44  
NULL
;

45 
	}
}

47 
	s›t_group
 {

48 c⁄° *
	m«me
;

49 
	mmask
;

52 
	e›t_ˇãg‹y
 {

53 
	m__FIO_OPT_C_GENERAL
 = 0,

54 
	m__FIO_OPT_C_IO
,

55 
	m__FIO_OPT_C_FILE
,

56 
	m__FIO_OPT_C_STAT
,

57 
	m__FIO_OPT_C_LOG
,

58 
	m__FIO_OPT_C_PROFILE
,

59 
	m__FIO_OPT_C_ENGINE
,

60 
	m__FIO_OPT_C_NR
,

62 
	mFIO_OPT_C_GENERAL
 = (1U << 
__FIO_OPT_C_GENERAL
),

63 
	mFIO_OPT_C_IO
 = (1U << 
__FIO_OPT_C_IO
),

64 
	mFIO_OPT_C_FILE
 = (1U << 
__FIO_OPT_C_FILE
),

65 
	mFIO_OPT_C_STAT
 = (1U << 
__FIO_OPT_C_STAT
),

66 
	mFIO_OPT_C_LOG
 = (1U << 
__FIO_OPT_C_LOG
),

67 
	mFIO_OPT_C_PROFILE
 = (1U << 
__FIO_OPT_C_PROFILE
),

68 
	mFIO_OPT_C_ENGINE
 = (1U << 
__FIO_OPT_C_ENGINE
),

69 
	mFIO_OPT_C_INVALID
 = (1U << 
__FIO_OPT_C_NR
),

72 
	e›t_ˇãg‹y_group
 {

73 
	m__FIO_OPT_G_RATE
 = 0,

74 
	m__FIO_OPT_G_ZONE
,

75 
	m__FIO_OPT_G_RWMIX
,

76 
	m__FIO_OPT_G_VERIFY
,

77 
	m__FIO_OPT_G_TRIM
,

78 
	m__FIO_OPT_G_IOLOG
,

79 
	m__FIO_OPT_G_IO_DEPTH
,

80 
	m__FIO_OPT_G_IO_FLOW
,

81 
	m__FIO_OPT_G_DESC
,

82 
	m__FIO_OPT_G_FILENAME
,

83 
	m__FIO_OPT_G_IO_BASIC
,

84 
	m__FIO_OPT_G_CGROUP
,

85 
	m__FIO_OPT_G_RUNTIME
,

86 
	m__FIO_OPT_G_PROCESS
,

87 
	m__FIO_OPT_G_CRED
,

88 
	m__FIO_OPT_G_CLOCK
,

89 
	m__FIO_OPT_G_IO_TYPE
,

90 
	m__FIO_OPT_G_THINKTIME
,

91 
	m__FIO_OPT_G_RANDOM
,

92 
	m__FIO_OPT_G_IO_BUF
,

93 
	m__FIO_OPT_G_TIOBENCH
,

94 
	m__FIO_OPT_G_ERR
,

95 
	m__FIO_OPT_G_E4DEFRAG
,

96 
	m__FIO_OPT_G_NETIO
,

97 
	m__FIO_OPT_G_LIBAIO
,

98 
	m__FIO_OPT_G_ACT
,

99 
	m__FIO_OPT_G_LATPROF
,

100 
	m__FIO_OPT_G_RBD
,

101 
	m__FIO_OPT_G_NR
,

103 
	mFIO_OPT_G_RATE
 = (1U << 
__FIO_OPT_G_RATE
),

104 
	mFIO_OPT_G_ZONE
 = (1U << 
__FIO_OPT_G_ZONE
),

105 
	mFIO_OPT_G_RWMIX
 = (1U << 
__FIO_OPT_G_RWMIX
),

106 
	mFIO_OPT_G_VERIFY
 = (1U << 
__FIO_OPT_G_VERIFY
),

107 
	mFIO_OPT_G_TRIM
 = (1U << 
__FIO_OPT_G_TRIM
),

108 
	mFIO_OPT_G_IOLOG
 = (1U << 
__FIO_OPT_G_IOLOG
),

109 
	mFIO_OPT_G_IO_DEPTH
 = (1U << 
__FIO_OPT_G_IO_DEPTH
),

110 
	mFIO_OPT_G_IO_FLOW
 = (1U << 
__FIO_OPT_G_IO_FLOW
),

111 
	mFIO_OPT_G_DESC
 = (1U << 
__FIO_OPT_G_DESC
),

112 
	mFIO_OPT_G_FILENAME
 = (1U << 
__FIO_OPT_G_FILENAME
),

113 
	mFIO_OPT_G_IO_BASIC
 = (1U << 
__FIO_OPT_G_IO_BASIC
),

114 
	mFIO_OPT_G_CGROUP
 = (1U << 
__FIO_OPT_G_CGROUP
),

115 
	mFIO_OPT_G_RUNTIME
 = (1U << 
__FIO_OPT_G_RUNTIME
),

116 
	mFIO_OPT_G_PROCESS
 = (1U << 
__FIO_OPT_G_PROCESS
),

117 
	mFIO_OPT_G_CRED
 = (1U << 
__FIO_OPT_G_CRED
),

118 
	mFIO_OPT_G_CLOCK
 = (1U << 
__FIO_OPT_G_CLOCK
),

119 
	mFIO_OPT_G_IO_TYPE
 = (1U << 
__FIO_OPT_G_IO_TYPE
),

120 
	mFIO_OPT_G_THINKTIME
 = (1U << 
__FIO_OPT_G_THINKTIME
),

121 
	mFIO_OPT_G_RANDOM
 = (1U << 
__FIO_OPT_G_RANDOM
),

122 
	mFIO_OPT_G_IO_BUF
 = (1U << 
__FIO_OPT_G_IO_BUF
),

123 
	mFIO_OPT_G_TIOBENCH
 = (1U << 
__FIO_OPT_G_TIOBENCH
),

124 
	mFIO_OPT_G_ERR
 = (1U << 
__FIO_OPT_G_ERR
),

125 
	mFIO_OPT_G_E4DEFRAG
 = (1U << 
__FIO_OPT_G_E4DEFRAG
),

126 
	mFIO_OPT_G_NETIO
 = (1U << 
__FIO_OPT_G_NETIO
),

127 
	mFIO_OPT_G_LIBAIO
 = (1U << 
__FIO_OPT_G_LIBAIO
),

128 
	mFIO_OPT_G_ACT
 = (1U << 
__FIO_OPT_G_ACT
),

129 
	mFIO_OPT_G_LATPROF
 = (1U << 
__FIO_OPT_G_LATPROF
),

130 
	mFIO_OPT_G_RBD
 = (1U << 
__FIO_OPT_G_RBD
),

131 
	mFIO_OPT_G_INVALID
 = (1U << 
__FIO_OPT_G_NR
),

134 
›t_group
 *
›t_group_‰om_mask
(*
mask
);

135 
›t_group
 *
›t_group_ˇt_‰om_mask
(*
mask
);

136 
fio_›ti⁄
 *
fio_›ti⁄_föd
(c⁄° *
«me
);

137 
fio_gë_kb_ba£
(*);

	@/home/terekhov/tmp/fio/fio/os/binject.h

1 #i‚de‡
BINJECT_H


2 
	#BINJECT_H


	)

4 
	~<löux/ty≥s.h
>

6 
	#BINJECT_MAGIC
 0x89

	)

7 
	#BINJECT_VER
 0x01

	)

8 
	#BINJECT_MAGIC_SHIFT
 8

	)

9 
	#BINJECT_VER_MASK
 ((1 << 
BINJECT_MAGIC_SHIFT
Ë- 1)

	)

11 
	sb_u£r_cmd
 {

12 
__u16
 
	mmagic
;

13 
__u16
 
	mty≥
;

14 
__u32
 
	mîr‹
;

15 
__u32
 
	mÊags
;

16 
__u32
 
	mÀn
;

17 
__u64
 
	moff£t
;

18 
__u64
 
	mbuf
;

19 
__u64
 
	mu§_±r
;

20 
__u64
 
	mn£c
;

23 
	sb_io˘l_cmd
 {

24 
	mfd
;

25 
	mmö‹
;

28 
	#BINJECT_IOCTL_CHR
 'J'

	)

29 
	#B_IOCTL_ADD
 
	`_IOWR
(
BINJECT_IOCTL_CHR
, 1, 
b_io˘l_cmd
)

	)

30 
	#B_IOCTL_DEL
 
	`_IOWR
(
BINJECT_IOCTL_CHR
, 2, 
b_io˘l_cmd
)

	)

33 
	mB_TYPE_READ
 = 0,

34 
	mB_TYPE_WRITE
,

35 
	mB_TYPE_DISCARD
,

36 
	mB_TYPE_READVOID
,

37 
	mB_TYPE_WRITEZERO
,

38 
	mB_TYPE_READBARRIER
,

39 
	mB_TYPE_WRITEBARRIER
,

40 
	mB_TYPE_NR


44 
	m__B_FLAG_SYNC
 = 0,

45 
	m__B_FLAG_UNPLUG
,

46 
	m__B_FLAG_NOIDLE
,

47 
	m__B_FLAG_BARRIER
,

48 
	m__B_FLAG_META
,

49 
	m__B_FLAG_RAHEAD
,

50 
	m__B_FLAG_FAILFAST_DEV
,

51 
	m__B_FLAG_FAILFAST_TRANSPORT
,

52 
	m__B_FLAG_FAILFAST_DRIVER
,

53 
	m__B_FLAG_NR
,

55 
	mB_FLAG_SYNC
 = 1 << 
__B_FLAG_SYNC
,

56 
	mB_FLAG_UNPLUG
 = 1 << 
__B_FLAG_UNPLUG
,

57 
	mB_FLAG_NOIDLE
 = 1 << 
__B_FLAG_NOIDLE
,

58 
	mB_FLAG_BARRIER
 = 1 << 
__B_FLAG_BARRIER
,

59 
	mB_FLAG_META
 = 1 << 
__B_FLAG_META
,

60 
	mB_FLAG_RAHEAD
 = 1 << 
__B_FLAG_RAHEAD
,

61 
	mB_FLAG_FAILFAST_DEV
 = 1 << 
__B_FLAG_FAILFAST_DEV
,

62 
	mB_FLAG_FAILFAST_TRANSPORT
 = 1 << 
__B_FLAG_FAILFAST_TRANSPORT
,

63 
	mB_FLAG_FAILFAST_DRIVER
 = 1 << 
__B_FLAG_FAILFAST_DRIVER
,

66 
ölöe
 
	$böje˘_buc_£t_magic
(
b_u£r_cmd
 *
buc
)

68 
buc
->
magic
 = (
BINJECT_MAGIC
 << 
BINJECT_MAGIC_SHIFT
Ë| 
BINJECT_VER
;

69 
	}
}

	@/home/terekhov/tmp/fio/fio/os/kcompat.h

1 #i‚de‡
_KCOMPAT_H_


2 
	#_KCOMPAT_H_


	)

4 
	~<°döt.h
>

6 
	#u64
 
uöt64_t


	)

7 
	#u32
 
uöt32_t


	)

	@/home/terekhov/tmp/fio/fio/os/os-aix.h

1 #i‚de‡
FIO_OS_AIX_H


2 
	#FIO_OS_AIX_H


	)

4 
	#FIO_OS
 
os_aix


	)

6 
	~<î∫o.h
>

7 
	~<uni°d.h
>

8 
	~<sys/devöfo.h
>

9 
	~<sys/io˘l.h
>

11 
	~"../fûe.h
"

13 
	#FIO_HAVE_ODIRECT


	)

14 
	#FIO_USE_GENERIC_RAND


	)

15 
	#FIO_USE_GENERIC_INIT_RANDOM_STATE


	)

17 
	#FIO_HAVE_PSHARED_MUTEX


	)

19 
	#OS_MAP_ANON
 
MAP_ANON


	)

20 
	#OS_MSG_DONTWAIT
 0

	)

22 
	#FIO_USE_GENERIC_SWAP


	)

24 
ölöe
 
	$blockdev_övÆid©e_ˇche
(
fio_fûe
 *
f
)

26  
EINVAL
;

27 
	}
}

29 
ölöe
 
	$blockdev_size
(
fio_fûe
 *
f
, *
byãs
)

31 
devöfo
 
öfo
;

33 i‡(!
	`io˘l
(
f
->
fd
, 
IOCINFO
, &
öfo
)) {

34 *
byãs
 = ()
öfo
.
un
.
scdk
.
numblks
 *

35 
öfo
.
un
.
scdk
.
blksize
;

39  
î∫o
;

40 
	}
}

42 
ölöe
 
	$os_phys_mem
()

44 
mem
 = 
	`sysc⁄f
(
_SC_AIX_REALMEM
);

46 i‡(
mem
 == -1)

49  (Ë
mem
 * 1024;

50 
	}
}

	@/home/terekhov/tmp/fio/fio/os/os-android.h

1 #i‚de‡
FIO_OS_ANDROID_H


2 
	#FIO_OS_ANDROID_H


	)

4 
	#FIO_OS
 
os_™droid


	)

6 
	~<sys/io˘l.h
>

7 
	~<sys/uio.h
>

8 
	~<sys/sysˇŒ.h
>

9 
	~<sys/vfs.h
>

10 
	~<uni°d.h
>

11 
	~<f˙é.h
>

12 
	~<î∫o.h
>

13 
	~<sched.h
>

14 
	~<löux/uni°d.h
>

15 
	~<löux/maj‹.h
>

16 
	~<asm/byã‹dî.h
>

18 
	~"böje˘.h
"

19 
	~"../fûe.h
"

21 
	#FIO_HAVE_DISK_UTIL


	)

22 
	#FIO_HAVE_IOSCHED_SWITCH


	)

23 
	#FIO_HAVE_IOPRIO


	)

24 
	#FIO_HAVE_ODIRECT


	)

25 
	#FIO_HAVE_HUGETLB


	)

26 
	#FIO_HAVE_BLKTRACE


	)

27 
	#FIO_HAVE_PSHARED_MUTEX


	)

28 
	#FIO_HAVE_CL_SIZE


	)

29 
	#FIO_HAVE_FS_STAT


	)

30 
	#FIO_HAVE_TRIM


	)

31 
	#FIO_HAVE_GETTID


	)

32 
	#FIO_USE_GENERIC_INIT_RANDOM_STATE


	)

33 
	#FIO_HAVE_E4_ENG


	)

34 
	#FIO_HAVE_BYTEORDER_FUNCS


	)

35 
	#FIO_HAVE_MMAP_HUGE


	)

36 
	#FIO_NO_HAVE_SHM_H


	)

38 
	#OS_MAP_ANON
 
MAP_ANONYMOUS


	)

40 
	#posix_madvi£
 
madvi£


	)

41 
	#POSIX_MADV_DONTNEED
 
MADV_DONTNEED


	)

42 
	#POSIX_MADV_SEQUENTIAL
 
MADV_SEQUENTIAL


	)

43 
	#POSIX_MADV_RANDOM
 
MADV_RANDOM


	)

44 #ifde‡
MADV_REMOVE


45 
	#FIO_MADV_FREE
 
MADV_REMOVE


	)

47 #i‚de‡
MAP_HUGETLB


48 
	#MAP_HUGETLB
 0x40000

	)

57 
	~<löux/shm.h
>

58 
	#SHM_HUGETLB
 04000

	)

60 
	~<°dio.h
>

61 
	~<löux/ashmem.h
>

62 
	~<sys/mm™.h
>

64 
	#ASHMEM_DEVICE
 "/dev/ashmem"

	)

66 
ölöe
 
	$shm˘l
 (
__shmid
, 
__cmd
, 
shmid_ds
 *
__buf
)

68 
ªt
=0;

69 i‡(
__cmd
 =
IPC_RMID
)

71 
Àngth
 = 
	`io˘l
(
__shmid
, 
ASHMEM_GET_SIZE
, 
NULL
);

72 
ashmem_pö
 
pö
 = {0 , 
Àngth
};

73 
ªt
 = 
	`io˘l
(
__shmid
, 
ASHMEM_UNPIN
, &
pö
);

74 
	`˛o£
(
__shmid
);

76  
ªt
;

77 
	}
}

79 
ölöe
 
	$shmgë
 (
key_t
 
__key
, 
size_t
 
__size
, 
__shmÊg
)

81 
fd
,
ªt
;

82 
key
[11];

84 
fd
 = 
	`›í
(
ASHMEM_DEVICE
, 
O_RDWR
);

85 i‡(
fd
 < 0)

86  
fd
;

88 
	`•rötf
(
key
,"%d",
__key
);

89 
ªt
 = 
	`io˘l
(
fd
, 
ASHMEM_SET_NAME
, 
key
);

90 i‡(
ªt
 < 0)

91 
îr‹
;

93 
ªt
 = 
	`io˘l
(
fd
, 
ASHMEM_SET_SIZE
, 
__size
);

94 i‡(
ªt
 < 0)

95 
îr‹
;

97  
fd
;

99 
îr‹
:

100 
	`˛o£
(
fd
);

101  
ªt
;

102 
	}
}

104 
ölöe
 *
	$shm©
 (
__shmid
, c⁄° *
__shmaddr
, 
__shmÊg
)

106 
size_t
 *
±r
, 
size
 = 
	`io˘l
(
__shmid
, 
ASHMEM_GET_SIZE
, 
NULL
);

107 
±r
 = 
	`mm≠
(
NULL
, 
size
 + (
size_t
), 
PROT_READ
 | 
PROT_WRITE
, 
MAP_SHARED
, 
__shmid
, 0);

108 *
±r
 = 
size
;

109  &
±r
[1];

110 
	}
}

112 
ölöe
 
	$shmdt
 (c⁄° *
__shmaddr
)

114 
size_t
 *
±r
, 
size
;

115 
±r
 = (
size_t
 *)
__shmaddr
;

116 
±r
--;

117 
size
 = *
±r
;

118  
	`munm≠
((*)
±r
, 
size
 + (
size_t
));

119 
	}
}

121 
	#SPLICE_DEF_SIZE
 (64*1024)

	)

124 
	mIOPRIO_CLASS_NONE
,

125 
	mIOPRIO_CLASS_RT
,

126 
	mIOPRIO_CLASS_BE
,

127 
	mIOPRIO_CLASS_IDLE
,

131 
	mIOPRIO_WHO_PROCESS
 = 1,

132 
	mIOPRIO_WHO_PGRP
,

133 
	mIOPRIO_WHO_USER
,

136 
	#IOPRIO_BITS
 16

	)

137 
	#IOPRIO_CLASS_SHIFT
 13

	)

139 
ölöe
 
	$i›rio_£t
(
which
, 
who
, 
i›rio_˛ass
, 
i›rio
)

144 i‡(!
i›rio_˛ass
)

145 
i›rio_˛ass
 = 
IOPRIO_CLASS_BE
;

147 
i›rio
 |
i›rio_˛ass
 << 
IOPRIO_CLASS_SHIFT
;

148  
	`sysˇŒ
(
__NR_i›rio_£t
, 
which
, 
who
, 
i›rio
);

149 
	}
}

151 #i‚de‡
BLKGETSIZE64


152 
	#BLKGETSIZE64
 
	`_IOR
(0x12,114,
size_t
)

	)

155 #i‚de‡
BLKFLSBUF


156 
	#BLKFLSBUF
 
	`_IO
(0x12,97)

	)

159 #i‚de‡
BLKDISCARD


160 
	#BLKDISCARD
 
	`_IO
(0x12,119)

	)

163 
ölöe
 
	$blockdev_övÆid©e_ˇche
(
fio_fûe
 *
f
)

165  
	`io˘l
(
f
->
fd
, 
BLKFLSBUF
);

166 
	}
}

168 
ölöe
 
	$blockdev_size
(
fio_fûe
 *
f
, *
byãs
)

170 i‡(!
	`io˘l
(
f
->
fd
, 
BLKGETSIZE64
, 
byãs
))

173  
î∫o
;

174 
	}
}

176 
ölöe
 
	$os_phys_mem
()

178 
∑gesize
, 
∑ges
;

180 
∑gesize
 = 
	`sysc⁄f
(
_SC_PAGESIZE
);

181 
∑ges
 = 
	`sysc⁄f
(
_SC_PHYS_PAGES
);

182 i‡(
∑ges
 =-1 || 
∑gesize
 == -1)

185  (Ë
∑ges
 * (Ë
∑gesize
;

186 
	}
}

188 °ru˘ { 
	mr
[3]; } 
	tos_øndom_°©e_t
;

190 
ölöe
 
	$os_øndom_£ed
(
£ed
, 
os_øndom_°©e_t
 *
rs
)

192 
rs
->
r
[0] = 
£ed
 & 0xffff;

193 
£ed
 >>= 16;

194 
rs
->
r
[1] = 
£ed
 & 0xffff;

195 
£ed
 >>= 16;

196 
rs
->
r
[2] = 
£ed
 & 0xffff;

197 
	`£ed48
(
rs
->
r
);

198 
	}
}

200 
ölöe
 
	$os_øndom_l⁄g
(
os_øndom_°©e_t
 *
rs
)

202  
	`ƒ™d48
(
rs
->
r
);

203 
	}
}

205 #ifde‡
O_NOATIME


206 
	#FIO_O_NOATIME
 
O_NOATIME


	)

208 
	#FIO_O_NOATIME
 0

	)

211 
	#fio_sw≠16
(
x
Ë
	`__bsw≠_16
(x)

	)

212 
	#fio_sw≠32
(
x
Ë
	`__bsw≠_32
(x)

	)

213 
	#fio_sw≠64
(
x
Ë
	`__bsw≠_64
(x)

	)

215 
	#CACHE_LINE_FILE
 \

216 "/sys/devi˚s/sy°em/˝u/˝u0/ˇche/ödex0/cohîícy_löe_size"

	)

218 
ölöe
 
	$¨ch_ˇche_löe_size
()

220 
size
[32];

221 
fd
, 
ªt
;

223 
fd
 = 
	`›í
(
CACHE_LINE_FILE
, 
O_RDONLY
);

224 i‡(
fd
 < 0)

227 
ªt
 = 
	`ªad
(
fd
, 
size
, (size));

229 
	`˛o£
(
fd
);

231 i‡(
ªt
 <= 0)

234  
	`©oi
(
size
);

235 
	}
}

237 
ölöe
 
	$gë_fs_size
(c⁄° *
∑th
)

239 
ªt
;

240 
°©fs
 
s
;

242 i‡(
	`°©fs
(
∑th
, &
s
) < 0)

245 
ªt
 = 
s
.
f_bsize
;

246 
ªt
 *(Ë
s
.
f_b‰ì
;

247  
ªt
;

248 
	}
}

250 
ölöe
 
	$os_åim
(
fd
, 
°¨t
,

251 
Àn
)

253 
uöt64_t
 
ønge
[2];

255 
ønge
[0] = 
°¨t
;

256 
ønge
[1] = 
Àn
;

258 i‡(!
	`io˘l
(
fd
, 
BLKDISCARD
, 
ønge
))

261  
î∫o
;

262 
	}
}

	@/home/terekhov/tmp/fio/fio/os/os-freebsd.h

1 #i‚de‡
FIO_OS_FREEBSD_H


2 
	#FIO_OS_FREEBSD_H


	)

4 
	#FIO_OS
 
os_‰ìbsd


	)

6 
	~<î∫o.h
>

7 
	~<sys/sys˘l.h
>

8 
	~<sys/disk.h
>

9 
	~<sys/thr.h
>

10 
	~<sys/sockë.h
>

11 
	~<sys/∑øm.h
>

12 
	~<sys/˝u£t.h
>

14 
	~"../fûe.h
"

16 
	#FIO_HAVE_ODIRECT


	)

17 
	#FIO_USE_GENERIC_RAND


	)

18 
	#FIO_USE_GENERIC_INIT_RANDOM_STATE


	)

19 
	#FIO_HAVE_CHARDEV_SIZE


	)

20 
	#FIO_HAVE_GETTID


	)

21 
	#FIO_HAVE_CPU_AFFINITY


	)

23 
	#OS_MAP_ANON
 
MAP_ANON


	)

25 
	#fio_sw≠16
(
x
Ë
	`bsw≠16
(x)

	)

26 
	#fio_sw≠32
(
x
Ë
	`bsw≠32
(x)

	)

27 
	#fio_sw≠64
(
x
Ë
	`bsw≠64
(x)

	)

29 
off_t
 
	toff64_t
;

31 
˝u£t_t
 
	tos_˝u_mask_t
;

33 
	#fio_˝u_˛ór
(
mask
, 
˝u
Ë(Ë
	`CPU_CLR
((˝u), (mask))

	)

34 
	#fio_˝u_£t
(
mask
, 
˝u
Ë(Ë
	`CPU_SET
((˝u), (mask))

	)

35 
	#fio_˝u_is£t
(
mask
, 
˝u
Ë
	`CPU_ISSET
((˝u), (mask))

	)

36 
	#fio_˝u_cou¡
(
mask
Ë
	`CPU_COUNT
((mask))

	)

38 
ölöe
 
	$fio_˝u£t_öô
(
os_˝u_mask_t
 *
mask
)

40 
	`CPU_ZERO
(
mask
);

42 
	}
}

44 
ölöe
 
	$fio_˝u£t_exô
(
os_˝u_mask_t
 *
mask
)

47 
	}
}

49 
ölöe
 
	$fio_£èfföôy
(
pid
, 
os_˝u_mask_t
 
˝umask
)

51  
	`˝u£t_£èfföôy
(
CPU_LEVEL_WHICH
, 
CPU_WHICH_TID
, 
pid
, (
˝umask
), &cpumask);

52 
	}
}

54 
ölöe
 
	$fio_gëafföôy
(
pid
, 
os_˝u_mask_t
 *
˝umask
)

56  
	`˝u£t_gëafföôy
(
CPU_LEVEL_WHICH
, 
CPU_WHICH_PID
, 
pid
, (
˝umask
), cpumask);

57 
	}
}

59 
	#FIO_MAX_CPUS
 
CPU_SETSIZE


	)

61 
ölöe
 
	$blockdev_size
(
fio_fûe
 *
f
, *
byãs
)

63 
off_t
 
size
;

65 i‡(!
	`io˘l
(
f
->
fd
, 
DIOCGMEDIASIZE
, &
size
)) {

66 *
byãs
 = 
size
;

70 *
byãs
 = 0;

71  
î∫o
;

72 
	}
}

74 
ölöe
 
	$ch¨dev_size
(
fio_fûe
 *
f
, *
byãs
)

76  
	`blockdev_size
(
f
, 
byãs
);

77 
	}
}

79 
ölöe
 
	$blockdev_övÆid©e_ˇche
(
fio_fûe
 *
f
)

81  
EINVAL
;

82 
	}
}

84 
ölöe
 
	$os_phys_mem
()

86 
mib
[2] = { 
CTL_HW
, 
HW_PHYSMEM
 };

87 
mem
;

88 
size_t
 
Àn
 = (
mem
);

90 
	`sys˘l
(
mib
, 2, &
mem
, &
Àn
, 
NULL
, 0);

91  
mem
;

92 
	}
}

94 
ölöe
 
	$gëtid
()

96 
lwpid
;

98 
	`thr_£lf
(&
lwpid
);

99  (Ë
lwpid
;

100 
	}
}

102 #ifde‡
MADV_FREE


103 
	#FIO_MADV_FREE
 
MADV_FREE


	)

	@/home/terekhov/tmp/fio/fio/os/os-hpux.h

1 #i‚de‡
FIO_OS_HPUX_H


2 
	#FIO_OS_HPUX_H


	)

4 
	#FIO_OS
 
os_hpux


	)

6 
	~<î∫o.h
>

7 
	~<uni°d.h
>

8 
	~<sys/io˘l.h
>

9 
	~<sys/f˙é.h
>

10 
	~<sys/Ádvi£.h
>

11 
	~<sys/mm™.h
>

12 
	~<sys/mp˘l.h
>

13 
	~<sys/diskio.h
>

14 
	~<sys/∑øm.h
>

15 
	~<sys/p°©.h
>

16 
	~<time.h
>

17 
	~<aio.h
>

18 
	~<¨m.h
>

20 
	~"../fûe.h
"

22 
	#FIO_HAVE_ODIRECT


	)

23 
	#FIO_USE_GENERIC_RAND


	)

24 
	#FIO_USE_GENERIC_INIT_RANDOM_STATE


	)

25 
	#FIO_HAVE_PSHARED_MUTEX


	)

26 
	#FIO_HAVE_CHARDEV_SIZE


	)

28 
	#OS_MAP_ANON
 
MAP_ANONYMOUS


	)

29 
	#OS_MSG_DONTWAIT
 0

	)

31 
	#POSIX_MADV_DONTNEED
 
MADV_DONTNEED


	)

32 
	#POSIX_MADV_SEQUENTIAL
 
MADV_SEQUENTIAL


	)

33 
	#POSIX_MADV_RANDOM
 
MADV_RANDOM


	)

34 
	#posix_madvi£
(
±r
, 
sz
, 
höt
Ë
	`madvi£
(’å), (sz), (höt))

	)

36 #i‚de‡
MSG_WAITALL


37 
	#MSG_WAITALL
 0x40

	)

40 
	#FIO_USE_GENERIC_SWAP


	)

42 
	#FIO_OS_HAVE_AIOCB_TYPEDEF


	)

43 
aiocb64
 
	tos_aiocb_t
;

45 
ölöe
 
	$blockdev_övÆid©e_ˇche
(
fio_fûe
 *
f
)

47  
EINVAL
;

48 
	}
}

50 
ölöe
 
	$blockdev_size
(
fio_fûe
 *
f
, *
byãs
)

52 
disk_des¸ibe_ty≥_ext_t
 
dext
;

54 i‡(!
	`io˘l
(
f
->
fd
, 
DIOC_DESCRIBE_EXT
, &
dext
)) {

55 
lba
;

57 
lba
 = ((
uöt64_t
Ë
dext
.
maxsva_high
 << 32Ë| dext.
maxsva_low
;

58 *
byãs
 = 
lba
 * 
dext
.
lgblksz
;

62 *
byãs
 = 0;

63  
î∫o
;

64 
	}
}

66 
ölöe
 
	$ch¨dev_size
(
fio_fûe
 *
f
, *
byãs
)

68  
	`blockdev_size
(
f
, 
byãs
);

69 
	}
}

71 
ölöe
 
	$os_phys_mem
()

73 
ªt
;

74 
p°_°©ic
 
p°
;

75 
p°un
 
pu
;

77 
pu
.
p°_°©ic
 = &
p°
;

78 i‡(
	`p°©
(
PSTAT_STATIC
, 
pu
, (
p°
), 0, 0) == -1)

81 
ªt
 = 
p°
.
physiˇl_mem‹y
;

82 
ªt
 *
p°
.
∑ge_size
;

83  
ªt
;

84 
	}
}

86 
	#FIO_HAVE_CPU_ONLINE_SYSCONF


	)

88 
ölöe
 
	$˝us_⁄löe
()

90  
	`mp˘l
(
MPC_GETNUMSPUS
, 0, 
NULL
);

91 
	}
}

	@/home/terekhov/tmp/fio/fio/os/os-linux.h

1 #i‚de‡
FIO_OS_LINUX_H


2 
	#FIO_OS_LINUX_H


	)

4 
	#FIO_OS
 
os_löux


	)

6 
	~<sys/io˘l.h
>

7 
	~<sys/uio.h
>

8 
	~<sys/sysˇŒ.h
>

9 
	~<sys/vfs.h
>

10 
	~<sys/mm™.h
>

11 
	~<uni°d.h
>

12 
	~<f˙é.h
>

13 
	~<î∫o.h
>

14 
	~<sched.h
>

15 
	~<löux/uni°d.h
>

16 
	~<löux/øw.h
>

17 
	~<löux/maj‹.h
>

19 
	~"böje˘.h
"

20 
	~"../fûe.h
"

22 
	#FIO_HAVE_CPU_AFFINITY


	)

23 
	#FIO_HAVE_DISK_UTIL


	)

24 
	#FIO_HAVE_SGIO


	)

25 
	#FIO_HAVE_IOPRIO


	)

26 
	#FIO_HAVE_IOSCHED_SWITCH


	)

27 
	#FIO_HAVE_ODIRECT


	)

28 
	#FIO_HAVE_HUGETLB


	)

29 
	#FIO_HAVE_RAWBIND


	)

30 
	#FIO_HAVE_BLKTRACE


	)

31 
	#FIO_HAVE_PSHARED_MUTEX


	)

32 
	#FIO_HAVE_CL_SIZE


	)

33 
	#FIO_HAVE_CGROUPS


	)

34 
	#FIO_HAVE_FS_STAT


	)

35 
	#FIO_HAVE_TRIM


	)

36 
	#FIO_HAVE_BINJECT


	)

37 
	#FIO_HAVE_GETTID


	)

38 
	#FIO_USE_GENERIC_INIT_RANDOM_STATE


	)

40 #ifde‡
MAP_HUGETLB


41 
	#FIO_HAVE_MMAP_HUGE


	)

44 
	#OS_MAP_ANON
 
MAP_ANONYMOUS


	)

46 
˝u_£t_t
 
	tos_˝u_mask_t
;

48 
dønd48_d©a
 
	tos_øndom_°©e_t
;

50 #ifde‡
CONFIG_3ARG_AFFINITY


51 
	#fio_£èfföôy
(
pid
, 
˝umask
) \

52 
	`sched_£èfföôy
((
pid
), (
˝umask
), &(˝umask))

	)

53 
	#fio_gëafföôy
(
pid
, 
±r
) \

54 
	`sched_gëafföôy
((
pid
), (
˝u_£t_t
), (
±r
))

	)

55 #ñi‡
deföed
(
CONFIG_2ARG_AFFINITY
)

56 
	#fio_£èfföôy
(
pid
, 
˝umask
) \

57 
	`sched_£èfföôy
((
pid
), &(
˝umask
))

	)

58 
	#fio_gëafföôy
(
pid
, 
±r
) \

59 
	`sched_gëafföôy
((
pid
), (
±r
))

	)

62 
	#fio_˝u_˛ór
(
mask
, 
˝u
Ë(Ë
	`CPU_CLR
((˝u), (mask))

	)

63 
	#fio_˝u_£t
(
mask
, 
˝u
Ë(Ë
	`CPU_SET
((˝u), (mask))

	)

64 
	#fio_˝u_is£t
(
mask
, 
˝u
Ë
	`CPU_ISSET
((˝u), (mask))

	)

65 
	#fio_˝u_cou¡
(
mask
Ë
	`CPU_COUNT
((mask))

	)

67 
ölöe
 
	$fio_˝u£t_öô
(
os_˝u_mask_t
 *
mask
)

69 
	`CPU_ZERO
(
mask
);

71 
	}
}

73 
ölöe
 
	$fio_˝u£t_exô
(
os_˝u_mask_t
 *
mask
)

76 
	}
}

78 
	#FIO_MAX_CPUS
 
CPU_SETSIZE


	)

81 
	mIOPRIO_CLASS_NONE
,

82 
	mIOPRIO_CLASS_RT
,

83 
	mIOPRIO_CLASS_BE
,

84 
	mIOPRIO_CLASS_IDLE
,

88 
	mIOPRIO_WHO_PROCESS
 = 1,

89 
	mIOPRIO_WHO_PGRP
,

90 
	mIOPRIO_WHO_USER
,

93 
	#IOPRIO_BITS
 16

	)

94 
	#IOPRIO_CLASS_SHIFT
 13

	)

96 
ölöe
 
	$i›rio_£t
(
which
, 
who
, 
i›rio_˛ass
, 
i›rio
)

101 i‡(!
i›rio_˛ass
)

102 
i›rio_˛ass
 = 
IOPRIO_CLASS_BE
;

104 
i›rio
 |
i›rio_˛ass
 << 
IOPRIO_CLASS_SHIFT
;

105  
	`sysˇŒ
(
__NR_i›rio_£t
, 
which
, 
who
, 
i›rio
);

106 
	}
}

108 
ölöe
 
	$gëtid
()

110  
	`sysˇŒ
(
__NR_gëtid
);

111 
	}
}

113 
	#SPLICE_DEF_SIZE
 (64*1024)

	)

115 #i‚de‡
BLKGETSIZE64


116 
	#BLKGETSIZE64
 
	`_IOR
(0x12,114,
size_t
)

	)

119 #i‚de‡
BLKFLSBUF


120 
	#BLKFLSBUF
 
	`_IO
(0x12,97)

	)

123 #i‚de‡
BLKDISCARD


124 
	#BLKDISCARD
 
	`_IO
(0x12,119)

	)

127 
ölöe
 
	$blockdev_övÆid©e_ˇche
(
fio_fûe
 *
f
)

129  
	`io˘l
(
f
->
fd
, 
BLKFLSBUF
);

130 
	}
}

132 
ölöe
 
	$blockdev_size
(
fio_fûe
 *
f
, *
byãs
)

134 i‡(!
	`io˘l
(
f
->
fd
, 
BLKGETSIZE64
, 
byãs
))

137  
î∫o
;

138 
	}
}

140 
ölöe
 
	$os_phys_mem
()

142 
∑gesize
, 
∑ges
;

144 
∑gesize
 = 
	`sysc⁄f
(
_SC_PAGESIZE
);

145 
∑ges
 = 
	`sysc⁄f
(
_SC_PHYS_PAGES
);

146 i‡(
∑ges
 =-1 || 
∑gesize
 == -1)

149  (Ë
∑ges
 * (Ë
∑gesize
;

150 
	}
}

152 
ölöe
 
	$os_øndom_£ed
(
£ed
, 
os_øndom_°©e_t
 *
rs
)

154 
	`§™d48_r
(
£ed
, 
rs
);

155 
	}
}

157 
ölöe
 
	$os_øndom_l⁄g
(
os_øndom_°©e_t
 *
rs
)

159 
vÆ
;

161 
	`Ã™d48_r
(
rs
, &
vÆ
);

162  
vÆ
;

163 
	}
}

165 
ölöe
 
	$fio_lookup_øw
(
dev_t
 
dev
, *
majdev
, *
mödev
)

167 
øw_c⁄fig_ªque°
 
rq
;

168 
fd
;

170 i‡(
	`maj‹
(
dev
Ë!
RAW_MAJOR
)

176 
fd
 = 
	`›í
("/dev/øw˘l", 
O_RDONLY
);

177 i‡(
fd
 < 0) {

178 
fd
 = 
	`›í
("/dev/øw/øw˘l", 
O_RDONLY
);

179 i‡(
fd
 < 0)

183 
rq
.
øw_mö‹
 = 
	`mö‹
(
dev
);

184 i‡(
	`io˘l
(
fd
, 
RAW_GETBIND
, &
rq
) < 0) {

185 
	`˛o£
(
fd
);

189 
	`˛o£
(
fd
);

190 *
majdev
 = 
rq
.
block_maj‹
;

191 *
mödev
 = 
rq
.
block_mö‹
;

193 
	}
}

195 #ifde‡
O_NOATIME


196 
	#FIO_O_NOATIME
 
O_NOATIME


	)

198 
	#FIO_O_NOATIME
 0

	)

201 #ifde‡
O_ATOMIC


202 
	#OS_O_ATOMIC
 
O_ATOMIC


	)

204 
	#OS_O_ATOMIC
 040000000

	)

207 #ifde‡
MADV_REMOVE


208 
	#FIO_MADV_FREE
 
MADV_REMOVE


	)

211 
	#fio_sw≠16
(
x
Ë
	`__bsw≠_16
(x)

	)

212 
	#fio_sw≠32
(
x
Ë
	`__bsw≠_32
(x)

	)

213 
	#fio_sw≠64
(
x
Ë
	`__bsw≠_64
(x)

	)

215 
	#CACHE_LINE_FILE
 \

216 "/sys/devi˚s/sy°em/˝u/˝u0/ˇche/ödex0/cohîícy_löe_size"

	)

218 
ölöe
 
	$¨ch_ˇche_löe_size
()

220 
size
[32];

221 
fd
, 
ªt
;

223 
fd
 = 
	`›í
(
CACHE_LINE_FILE
, 
O_RDONLY
);

224 i‡(
fd
 < 0)

227 
ªt
 = 
	`ªad
(
fd
, 
size
, (size));

229 
	`˛o£
(
fd
);

231 i‡(
ªt
 <= 0)

234  
	`©oi
(
size
);

235 
	}
}

237 
ölöe
 
	$gë_fs_size
(c⁄° *
∑th
)

239 
ªt
;

240 
°©fs
 
s
;

242 i‡(
	`°©fs
(
∑th
, &
s
) < 0)

245 
ªt
 = 
s
.
f_bsize
;

246 
ªt
 *(Ë
s
.
f_b‰ì
;

247  
ªt
;

248 
	}
}

250 
ölöe
 
	$os_åim
(
fd
, 
°¨t
,

251 
Àn
)

253 
uöt64_t
 
ønge
[2];

255 
ønge
[0] = 
°¨t
;

256 
ønge
[1] = 
Àn
;

258 i‡(!
	`io˘l
(
fd
, 
BLKDISCARD
, 
ønge
))

261  
î∫o
;

262 
	}
}

264 #ifde‡
CONFIG_SCHED_IDLE


265 
ölöe
 
	$fio_£t_sched_idÀ
()

267 
sched_∑øm
 
p
 = { .
sched_¥i‹ôy
 = 0, };

268  
	`sched_£tscheduÀr
(
	`gëtid
(), 
SCHED_IDLE
, &
p
);

269 
	}
}

	@/home/terekhov/tmp/fio/fio/os/os-mac.h

1 #i‚de‡
FIO_OS_APPLE_H


2 
	#FIO_OS_APPLE_H


	)

4 
	#FIO_OS
 
os_mac


	)

6 
	~<î∫o.h
>

7 
	~<f˙é.h
>

8 
	~<sys/disk.h
>

9 
	~<sys/sys˘l.h
>

10 
	~<sys/time.h
>

11 
	~<uni°d.h
>

12 
	~<sig«l.h
>

13 
	~<mach/mach_öô.h
>

14 
	~<machöe/ídün.h
>

15 
	~<libkîn/OSByãOrdî.h
>

17 
	~"../fûe.h
"

19 
	#FIO_USE_GENERIC_RAND


	)

20 
	#FIO_USE_GENERIC_INIT_RANDOM_STATE


	)

21 
	#FIO_HAVE_GETTID


	)

22 
	#FIO_HAVE_CHARDEV_SIZE


	)

24 
	#OS_MAP_ANON
 
MAP_ANON


	)

26 
	#fio_sw≠16
(
x
Ë
	`OSSw≠I¡16
(x)

	)

27 
	#fio_sw≠32
(
x
Ë
	`OSSw≠I¡32
(x)

	)

28 
	#fio_sw≠64
(
x
Ë
	`OSSw≠I¡64
(x)

	)

34 
	#FIO_MAX_JOBS
 128

	)

36 
off_t
 
	toff64_t
;

42 
	#MAX_TIMERS
 64

	)

44 
	t˛ockid_t
;

45 
	ttimî_t
;

47 
	sôimî•ec
 {

48 
time•ec
 
	mô_vÆue
;

49 
time•ec
 
	mô_öãrvÆ
;

52 
sigevít
 
	gfio_timîs
[
MAX_TIMERS
];

53 
	gnum_timîs
 = 0;

55 
	$sig_Ærm
(
signum
)

57 
sigvÆ
 
sv
;

59 
i
 = 0; i < 
num_timîs
; i++) {

60 i‡(
fio_timîs
[
i
].
sigev_nŸify_fun˘i⁄
 =
NULL
)

63 i‡(
fio_timîs
[
i
].
sigev_nŸify
 =
SIGEV_THREAD
)

64 
fio_timîs
[
i
].
	`sigev_nŸify_fun˘i⁄
(
sv
);

65 i‡(
fio_timîs
[
i
].
sigev_nŸify
 =
SIGEV_SIGNAL
)

66 
	`kûl
(
	`gëpid
(), 
fio_timîs
[
i
].
sigev_signo
);

68 
	}
}

70 
ölöe
 
	$timî_£âime
(
timî_t
 
timîid
, 
Êags
,

71 c⁄° 
ôimî•ec
 *
vÆue
,

72 
ôimî•ec
 *
ovÆue
)

74 
siga˘i⁄
 
ß
;

75 
ôimîvÆ
 
tv
;

76 
ôimîvÆ
 
tv_out
;

77 
rc
;

79 
tv
.
ô_öãrvÆ
.
tv_£c
 = 
vÆue
->it_interval.tv_sec;

80 
tv
.
ô_öãrvÆ
.
tv_u£c
 = 
vÆue
->ô_öãrvÆ.
tv_n£c
 / 1000;

82 
tv
.
ô_vÆue
.
tv_£c
 = 
vÆue
->it_value.tv_sec;

83 
tv
.
ô_vÆue
.
tv_u£c
 = 
vÆue
->ô_vÆue.
tv_n£c
 / 1000;

85 
ß
.
ß_h™dÀr
 = 
sig_Ærm
;

86 
	`sigem±y£t
(&
ß
.
ß_mask
);

87 
ß
.
ß_Êags
 = 0;

89 
rc
 = 
	`siga˘i⁄
(
SIGALRM
, &
ß
, 
NULL
);

91 i‡(!
rc
)

92 
rc
 = 
	`£tôimî
(
ITIMER_REAL
, &
tv
, &
tv_out
);

94 i‡(!
rc
 && 
ovÆue
 !
NULL
) {

95 
ovÆue
->
ô_öãrvÆ
.
tv_£c
 = 
tv_out
.it_interval.tv_sec;

96 
ovÆue
->
ô_öãrvÆ
.
tv_n£c
 = 
tv_out
.ô_öãrvÆ.
tv_u£c
 * 1000;

97 
ovÆue
->
ô_vÆue
.
tv_£c
 = 
tv_out
.it_value.tv_sec;

98 
ovÆue
->
ô_vÆue
.
tv_n£c
 = 
tv_out
.ô_vÆue.
tv_u£c
 * 1000;

101  
rc
;

102 
	}
}

104 
ölöe
 
	$timî_dñëe
(
timî_t
 
timî
)

107 
	}
}

109 
	#FIO_OS_DIRECTIO


	)

110 
ölöe
 
	$fio_£t_odúe˘
(
fd
)

112 i‡(
	`f˙é
(
fd
, 
F_NOCACHE
, 1) == -1)

113  
î∫o
;

115 
	}
}

117 
ölöe
 
	$blockdev_size
(
fio_fûe
 *
f
, *
byãs
)

119 
uöt32_t
 
block_size
;

120 
uöt64_t
 
block_cou¡
;

122 i‡(
	`io˘l
(
f
->
fd
, 
DKIOCGETBLOCKCOUNT
, &
block_cou¡
) == -1)

123  
î∫o
;

124 i‡(
	`io˘l
(
f
->
fd
, 
DKIOCGETBLOCKSIZE
, &
block_size
) == -1)

125  
î∫o
;

127 *
byãs
 = 
block_size
;

128 *
byãs
 *
block_cou¡
;

130 
	}
}

132 
ölöe
 
	$ch¨dev_size
(
fio_fûe
 *
f
, *
byãs
)

138 i‡(!
	`blockdev_size
(
f
, 
byãs
))

141 *
byãs
 = -1ULL;

143 
	}
}

145 
ölöe
 
	$blockdev_övÆid©e_ˇche
(
fio_fûe
 *
f
)

147  
EINVAL
;

148 
	}
}

150 
ölöe
 
	$os_phys_mem
()

152 
mib
[2] = { 
CTL_HW
, 
HW_PHYSMEM
 };

153 
mem
;

154 
size_t
 
Àn
 = (
mem
);

156 
	`sys˘l
(
mib
, 2, &
mem
, &
Àn
, 
NULL
, 0);

157  
mem
;

158 
	}
}

160 
ölöe
 
	$gëtid
()

162  
	`mach_thªad_£lf
();

163 
	}
}

169 
fd©async
(
fd
);

	@/home/terekhov/tmp/fio/fio/os/os-netbsd.h

1 #i‚de‡
FIO_OS_NETBSD_H


2 
	#FIO_OS_NETBSD_H


	)

4 
	#FIO_OS
 
os_√tbsd


	)

6 
	~<î∫o.h
>

7 
	~<lwp.h
>

8 
	~<sys/∑øm.h
>

10 
	#rb_node
 
_rb_node


	)

11 
	~<sys/sys˘l.h
>

12 #unde‡
rb_node


13 #unde‡
rb_À·


14 #unde‡
rb_right


16 
	~"../fûe.h
"

18 
	#FIO_HAVE_ODIRECT


	)

19 
	#FIO_USE_GENERIC_BDEV_SIZE


	)

20 
	#FIO_USE_GENERIC_RAND


	)

21 
	#FIO_USE_GENERIC_INIT_RANDOM_STATE


	)

22 
	#FIO_HAVE_GETTID


	)

24 #unde‡
FIO_HAVE_CPU_AFFINITY


26 
	#OS_MAP_ANON
 
MAP_ANON


	)

28 #i‚de‡
PTHREAD_STACK_MIN


29 
	#PTHREAD_STACK_MIN
 4096

	)

32 
	#fio_sw≠16
(
x
Ë
	`bsw≠16
(x)

	)

33 
	#fio_sw≠32
(
x
Ë
	`bsw≠32
(x)

	)

34 
	#fio_sw≠64
(
x
Ë
	`bsw≠64
(x)

	)

36 
off_t
 
	toff64_t
;

38 
ölöe
 
	$blockdev_övÆid©e_ˇche
(
fio_fûe
 *
f
)

40  
EINVAL
;

41 
	}
}

43 
ölöe
 
	$os_phys_mem
()

45 
mib
[2] = { 
CTL_HW
, 
HW_PHYSMEM64
 };

46 
uöt64_t
 
mem
;

47 
size_t
 
Àn
 = (
mem
);

49 
	`sys˘l
(
mib
, 2, &
mem
, &
Àn
, 
NULL
, 0);

50  
mem
;

51 
	}
}

53 
ölöe
 
	$gëtid
()

55  (Ë
	`_lwp_£lf
();

56 
	}
}

58 #ifde‡
MADV_FREE


59 
	#FIO_MADV_FREE
 
MADV_FREE


	)

63 
	#gë›t_l⁄g_⁄ly
 
gë›t_l⁄g


	)

	@/home/terekhov/tmp/fio/fio/os/os-openbsd.h

1 #i‚de‡
FIO_OS_OPENBSD_H


2 
	#FIO_OS_OPENBSD_H


	)

4 
	#FIO_OS
 
os_›íbsd


	)

6 
	~<î∫o.h
>

7 
	~<sys/∑øm.h
>

9 
	~<sys/sys˘l.h
>

10 #unde‡
RB_BLACK


11 #unde‡
RB_RED


12 #unde‡
RB_ROOT


14 
	~"../fûe.h
"

16 #unde‡
FIO_HAVE_ODIRECT


17 
	#FIO_USE_GENERIC_BDEV_SIZE


	)

18 
	#FIO_USE_GENERIC_RAND


	)

19 
	#FIO_USE_GENERIC_INIT_RANDOM_STATE


	)

20 
	#FIO_HAVE_GETTID


	)

22 #unde‡
FIO_HAVE_CPU_AFFINITY


24 
	#OS_MAP_ANON
 
MAP_ANON


	)

26 #i‚de‡
PTHREAD_STACK_MIN


27 
	#PTHREAD_STACK_MIN
 4096

	)

30 
	#fio_sw≠16
(
x
Ë
	`bsw≠16
(x)

	)

31 
	#fio_sw≠32
(
x
Ë
	`bsw≠32
(x)

	)

32 
	#fio_sw≠64
(
x
Ë
	`bsw≠64
(x)

	)

34 
off_t
 
	toff64_t
;

36 
ölöe
 
	$blockdev_övÆid©e_ˇche
(
fio_fûe
 *
f
)

38  
EINVAL
;

39 
	}
}

41 
ölöe
 
	$os_phys_mem
()

43 
mib
[2] = { 
CTL_HW
, 
HW_PHYSMEM64
 };

44 
uöt64_t
 
mem
;

45 
size_t
 
Àn
 = (
mem
);

47 
	`sys˘l
(
mib
, 2, &
mem
, &
Àn
, 
NULL
, 0);

48  
mem
;

49 
	}
}

51 
ölöe
 
	$gëtid
()

53  (Ë
	`±hªad_£lf
();

54 
	}
}

56 #ifde‡
MADV_FREE


57 
	#FIO_MADV_FREE
 
MADV_FREE


	)

	@/home/terekhov/tmp/fio/fio/os/os-solaris.h

1 #i‚de‡
FIO_OS_SOLARIS_H


2 
	#FIO_OS_SOLARIS_H


	)

4 
	#FIO_OS
 
os_sﬁ¨is


	)

6 
	~<î∫o.h
>

7 
	~<mÆloc.h
>

8 
	~<uni°d.h
>

9 
	~<sys/ty≥s.h
>

10 
	~<sys/f˙é.h
>

11 
	~<sys/p£t.h
>

12 
	~<sys/mm™.h
>

13 
	~<sys/dkio.h
>

14 
	~<sys/byã‹dî.h
>

16 
	~"../fûe.h
"

18 
	#FIO_HAVE_CPU_AFFINITY


	)

19 
	#FIO_HAVE_PSHARED_MUTEX


	)

20 
	#FIO_HAVE_CHARDEV_SIZE


	)

21 
	#FIO_USE_GENERIC_BDEV_SIZE


	)

22 
	#FIO_USE_GENERIC_INIT_RANDOM_STATE


	)

23 
	#FIO_HAVE_GETTID


	)

25 
	#OS_MAP_ANON
 
MAP_ANON


	)

26 
	#OS_RAND_MAX
 2147483648UL

	)

28 
	#fio_sw≠16
(
x
Ë
	`BSWAP_16
(x)

	)

29 
	#fio_sw≠32
(
x
Ë
	`BSWAP_32
(x)

	)

30 
	#fio_sw≠64
(
x
Ë
	`BSWAP_64
(x)

	)

32 
	ssﬁ¨is_ønd_£ed
 {

33 
	mr
[3];

36 #i‚de‡
POSIX_MADV_SEQUENTIAL


37 
	#posix_madvi£
 
madvi£


	)

38 
	#POSIX_MADV_SEQUENTIAL
 
MADV_SEQUENTIAL


	)

39 
	#POSIX_MADV_DONTNEED
 
MADV_DONTNEED


	)

40 
	#POSIX_MADV_RANDOM
 
MADV_RANDOM


	)

43 
	#os_˘ime_r
(
x
, 
y
, 
z
Ë
	`˘ime_r
((x), (y), (z))

	)

44 
	#FIO_OS_HAS_CTIME_R


	)

46 
p£tid_t
 
	tos_˝u_mask_t
;

47 
sﬁ¨is_ønd_£ed
 
	tos_øndom_°©e_t
;

49 
ölöe
 
	$ch¨dev_size
(
fio_fûe
 *
f
, *
byãs
)

51 
dk_möfo
 
öfo
;

53 *
byãs
 = 0;

55 i‡(
	`io˘l
(
f
->
fd
, 
DKIOCGMEDIAINFO
, &
öfo
) < 0)

56  
î∫o
;

58 *
byãs
 = 
öfo
.
dki_lbsize
 * info.
dki_ˇ∑côy
;

60 
	}
}

62 
ölöe
 
	$blockdev_övÆid©e_ˇche
(
fio_fûe
 *
f
)

65 
	}
}

67 
ölöe
 
	$os_phys_mem
()

70 
	}
}

72 
ölöe
 
	$os_øndom_£ed
(
£ed
, 
os_øndom_°©e_t
 *
rs
)

74 
rs
->
r
[0] = 
£ed
 & 0xffff;

75 
£ed
 >>= 16;

76 
rs
->
r
[1] = 
£ed
 & 0xffff;

77 
£ed
 >>= 16;

78 
rs
->
r
[2] = 
£ed
 & 0xffff;

79 
	`£ed48
(
rs
->
r
);

80 
	}
}

82 
ölöe
 
	$os_øndom_l⁄g
(
os_øndom_°©e_t
 *
rs
)

84  
	`ƒ™d48
(
rs
->
r
);

85 
	}
}

87 
	#FIO_OS_DIRECTIO


	)

88 
dúe˘io
(, );

89 
ölöe
 
	$fio_£t_odúe˘
(
fd
)

91 i‡(
	`dúe˘io
(
fd
, 
DIRECTIO_ON
) < 0)

92  
î∫o
;

95 
	}
}

100 
	#fio_£èfföôy
(
pid
, 
˝umask
) \

101 
	`p£t_böd
((
˝umask
), 
P_PID
, (
pid
), 
NULL
)

	)

102 
	#fio_gëafföôy
(
pid
, 
±r
Ë({ 0; })

	)

104 
	#fio_˝u_˛ór
(
mask
, 
˝u
Ë
	`p£t_assign
(
PS_NONE
, (˝u), 
NULL
)

	)

105 
	#fio_˝u_£t
(
mask
, 
˝u
Ë
	`p£t_assign
(*(mask), (˝u), 
NULL
)

	)

107 
ölöe
 
	$fio_˝u_is£t
(
os_˝u_mask_t
 *
mask
, 
˝u
)

109 c⁄° 
max_˝us
 = 
	`sysc⁄f
(
_SC_NPROCESSORS_ONLN
);

110 
num_˝us
;

111 
¥o˚ss‹id_t
 *
˝us
;

112 
i
, 
ªt
;

114 
˝us
 = 
	`mÆloc
((*˝usË* 
max_˝us
);

116 i‡(
	`p£t_öfo
(*
mask
, 
NULL
, &
num_˝us
, 
˝us
) < 0) {

117 
	`‰ì
(
˝us
);

121 
ªt
 = 0;

122 
i
 = 0; i < 
num_˝us
; i++) {

123 i‡(
˝us
[
i
] =
˝u
) {

124 
ªt
 = 1;

129 
	`‰ì
(
˝us
);

130  
ªt
;

131 
	}
}

133 
ölöe
 
	$fio_˝u_cou¡
(
os_˝u_mask_t
 *
mask
)

135 
num_˝us
;

137 i‡(
	`p£t_öfo
(*
mask
, 
NULL
, &
num_˝us
, NULL) < 0)

140  
num_˝us
;

141 
	}
}

143 
ölöe
 
	$fio_˝u£t_öô
(
os_˝u_mask_t
 *
mask
)

145 i‡(
	`p£t_¸óã
(
mask
) < 0)

149 
	}
}

151 
ölöe
 
	$fio_˝u£t_exô
(
os_˝u_mask_t
 *
mask
)

153 i‡(
	`p£t_de°roy
(*
mask
) < 0)

157 
	}
}

159 
ölöe
 
	$gëtid
()

161  
	`±hªad_£lf
();

162 
	}
}

167 
	#FIO_MAX_CPUS
 16384

	)

169 #ifde‡
MADV_FREE


170 
	#FIO_MADV_FREE
 
MADV_FREE


	)

	@/home/terekhov/tmp/fio/fio/os/os-windows.h

1 #i‚de‡
FIO_OS_WINDOWS_H


2 
	#FIO_OS_WINDOWS_H


	)

4 
	#FIO_OS
 
os_wödows


	)

6 
	~<sys/ty≥s.h
>

7 
	~<sys/shm.h
>

8 
	~<sys/°©.h
>

9 
	~<î∫o.h
>

10 
	~<wösock2.h
>

11 
	~<wödows.h
>

12 
	~<pßpi.h
>

13 
	~<°dlib.h
>

15 
	~"../smÆloc.h
"

16 
	~"../fûe.h
"

17 
	~"../log.h
"

18 
	~"../lib/hweight.h
"

20 
	~"wödows/posix.h
"

22 #i‚de‡
PTHREAD_STACK_MIN


23 
	#PTHREAD_STACK_MIN
 65535

	)

26 
	#FIO_HAVE_ODIRECT


	)

27 
	#FIO_HAVE_CPU_AFFINITY


	)

28 
	#FIO_HAVE_CHARDEV_SIZE


	)

29 
	#FIO_HAVE_GETTID


	)

30 
	#FIO_USE_GENERIC_RAND


	)

32 
	#FIO_PREFERRED_ENGINE
 "wödowßio"

	)

33 
	#FIO_PREFERRED_CLOCK_SOURCE
 
CS_CGETTIME


	)

34 
	#FIO_OS_PATH_SEPARATOR
 "\\"

	)

36 
	#FIO_MAX_CPUS
 
MAXIMUM_PROCESSORS


	)

38 
	#OS_MAP_ANON
 
MAP_ANON


	)

40 
	#fio_sw≠16
(
x
Ë
	`_byãsw≠_ush‹t
(x)

	)

41 
	#fio_sw≠32
(
x
Ë
	`_byãsw≠_ul⁄g
(x)

	)

42 
	#fio_sw≠64
(
x
Ë
	`_byãsw≠_uöt64
(x)

	)

44 
DWORD_PTR
 
	tos_˝u_mask_t
;

46 
	#_SC_PAGESIZE
 0x1

	)

47 
	#_SC_NPROCESSORS_ONLN
 0x2

	)

48 
	#_SC_PHYS_PAGES
 0x4

	)

50 
	#SA_RESTART
 0

	)

51 
	#SIGPIPE
 0

	)

58 
	#O_DIRECT
 0x1000000

	)

59 
	#O_SYNC
 0x2000000

	)

62 
	#POSIX_MADV_DONTNEED
 0

	)

63 
	#POSIX_MADV_SEQUENTIAL
 0

	)

64 
	#POSIX_MADV_RANDOM
 0

	)

66 
	#F_SETFL
 0x1

	)

67 
	#F_GETFL
 0x2

	)

68 
	#O_NONBLOCK
 
FIONBIO


	)

71 
	#OS_MSG_DONTWAIT
 0

	)

73 
	#POLLOUT
 1

	)

74 
	#POLLIN
 2

	)

75 
	#POLLERR
 0

	)

76 
	#POLLHUP
 1

	)

78 
	#SIGCONT
 0

	)

79 
	#SIGUSR1
 1

	)

80 
	#SIGUSR2
 2

	)

82 
	tsig£t_t
;

83 
	tsigöfo_t
;

85 
	ssiga˘i⁄


87 (*
	mß_h™dÀr
)();

88 
sig£t_t
 
	mß_mask
;

89 
	mß_Êags
;

90 * (*
	mß_siga˘i⁄
)(, 
	msigöfo_t
 *, *);

93 
sysc⁄f
(
«me
);

95 
kûl
(
pid_t
 
pid
, 
sig
);

96 
pid_t
 
£tsid
();

97 
£tgid
(
gid_t
 
gid
);

98 
£tuid
(
uid_t
 
uid
);

99 
ni˚
(
ö¸
);

100 
siga˘i⁄
(
sig
, c⁄° siga˘i⁄ *
a˘
,

101 
siga˘i⁄
 *
ﬂ˘
);

102 
fsync
(
fûdes
);

103 
f‹k
();

104 
f˙é
(
fûdes
, 
cmd
, ...);

105 
fd©async
(
fûdes
);

106 
l°©
(c⁄° * 
∑th
, 
°©
 * 
buf
);

107 
uid_t
 
gëeuid
();

108 
«no¶ìp
(c⁄° 
time•ec
 *
rqç
, time•e¯*
rmç
);

109 
ssize_t
 
¥ód
(
fûdes
, *
buf
, 
size_t
 
nbyã
, 
off_t
 
off£t
);

110 
ssize_t
 
pwrôe
(
fûdes
, c⁄° *
buf
, 
size_t
 
nbyã
,

111 
off_t
 
off£t
);

112 
td_fûl_ønd_£eds
(
thªad_d©a
 *);

114 
ölöe
 
	$blockdev_size
(
fio_fûe
 *
f
, *
byãs
)

116 
rc
 = 0;

117 
HANDLE
 
hFûe
;

118 
GET_LENGTH_INFORMATION
 
öfo
;

119 
DWORD
 
outByãs
;

121 i‡(
f
->
hFûe
 =
NULL
) {

122 
hFûe
 = 
	`Cª©eFûe
(
f
->
fûe_«me
, 
GENERIC_READ
, 
FILE_SHARE_READ
 | 
FILE_SHARE_WRITE
,

123 
NULL
, 
OPEN_EXISTING
, 0, NULL);

125 
hFûe
 = 
f
->hFile;

128 i‡(
	`Devi˚IoC⁄åﬁ
(
hFûe
, 
IOCTL_DISK_GET_LENGTH_INFO
, 
NULL
, 0, &
öfo
, (öfo), &
outByãs
, NULL))

129 *
byãs
 = 
öfo
.
Lígth
.
QuadP¨t
;

131 
rc
 = 
EIO
;

135 i‡(
hFûe
 !
INVALID_HANDLE_VALUE
 && 
f
->hFûê=
NULL
)

136 
	`Clo£H™dÀ
(
hFûe
);

138  
rc
;

139 
	}
}

141 
ölöe
 
	$ch¨dev_size
(
fio_fûe
 *
f
, *
byãs
)

143  
	`blockdev_size
(
f
, 
byãs
);

144 
	}
}

146 
ölöe
 
	$blockdev_övÆid©e_ˇche
(
fio_fûe
 *
f
)

151 
	}
}

153 
ölöe
 
	$os_phys_mem
()

155 
∑gesize
, 
∑ges
;

157 
∑gesize
 = 
	`sysc⁄f
(
_SC_PAGESIZE
);

158 
∑ges
 = 
	`sysc⁄f
(
_SC_PHYS_PAGES
);

159 i‡(
∑ges
 =-1 || 
∑gesize
 == -1)

162  (Ë
∑ges
 * (Ë
∑gesize
;

163 
	}
}

165 
ölöe
 
	$gëtid
()

167  
	`GëCuºítThªadId
();

168 
	}
}

170 
ölöe
 
	$fio_£èfföôy
(
pid
, 
os_˝u_mask_t
 
˝umask
)

172 
HANDLE
 
h
;

173 
BOOL
 
bSuc˚ss
 = 
FALSE
;

175 
h
 = 
	`O≥nThªad
(
THREAD_QUERY_INFORMATION
 | 
THREAD_SET_INFORMATION
, 
TRUE
, 
pid
);

176 i‡(
h
 !
NULL
) {

177 
bSuc˚ss
 = 
	`SëThªadAfföôyMask
(
h
, 
˝umask
);

178 i‡(!
bSuc˚ss
)

179 
	`log_îr
("fio_£èfföôy faûed: faûedÅÿ£àthªadáfföôy (pid %d, mask %.16Œx)\n", 
pid
, 
˝umask
);

181 
	`Clo£H™dÀ
(
h
);

183 
	`log_îr
("fio_£èfföôy faûed: faûedÅÿgë h™dÀ f‹Öid %d\n", 
pid
);

186  (
bSuc˚ss
)? 0 : -1;

187 
	}
}

189 
ölöe
 
	$fio_gëafföôy
(
pid
, 
os_˝u_mask_t
 *
mask
)

191 
os_˝u_mask_t
 
sy°emMask
;

193 
HANDLE
 
h
 = 
	`O≥nPro˚ss
(
PROCESS_QUERY_INFORMATION
, 
TRUE
, 
pid
);

195 i‡(
h
 !
NULL
) {

196 
	`GëPro˚ssAfföôyMask
(
h
, 
mask
, &
sy°emMask
);

197 
	`Clo£H™dÀ
(
h
);

199 
	`log_îr
("fio_gëafföôy faûed: faûedÅÿgë h™dÀ f‹Öid %d\n", 
pid
);

201 
	}
}

203 
ölöe
 
	$fio_˝u_˛ór
(
os_˝u_mask_t
 *
mask
, 
˝u
)

205 *
mask
 ^1 << (
˝u
-1);

206 
	}
}

208 
ölöe
 
	$fio_˝u_£t
(
os_˝u_mask_t
 *
mask
, 
˝u
)

210 *
mask
 |1 << 
˝u
;

211 
	}
}

213 
ölöe
 
	$fio_˝u_is£t
(
os_˝u_mask_t
 *
mask
, 
˝u
)

215  (*
mask
 & (1U << 
˝u
));

216 
	}
}

218 
ölöe
 
	$fio_˝u_cou¡
(
os_˝u_mask_t
 *
mask
)

220  
	`hweight64
(*
mask
);

221 
	}
}

223 
ölöe
 
	$fio_˝u£t_öô
(
os_˝u_mask_t
 *
mask
)

225 *
mask
 = 0;

227 
	}
}

229 
ölöe
 
	$fio_˝u£t_exô
(
os_˝u_mask_t
 *
mask
)

232 
	}
}

234 
ölöe
 
	$öô_øndom_°©e
(
thªad_d©a
 *
td
, *
ønd_£eds
, 
size
)

236 
HCRYPTPROV
 
hCry±Prov
;

238 i‡(!
	`Cry±AcquúeC⁄ãxt
(&
hCry±Prov
, 
NULL
, NULL, 
PROV_RSA_FULL
, 
CRYPT_VERIFYCONTEXT
))

240 
î∫o
 = 
	`GëLa°Eº‹
();

241 
	`log_îr
("Cry±AcquúeC⁄ãxt(ËÁûed:Éº‹ %d\n", 
î∫o
);

245 i‡(!
	`Cry±GíR™dom
(
hCry±Prov
, 
size
, (
BYTE
*)
ønd_£eds
)) {

246 
î∫o
 = 
	`GëLa°Eº‹
();

247 
	`log_îr
("Cry±GíR™dom(ËÁûed,Éº‹ %d\n", 
î∫o
);

248 
	`Cry±Rñó£C⁄ãxt
(
hCry±Prov
, 0);

252 
	`Cry±Rñó£C⁄ãxt
(
hCry±Prov
, 0);

253 
	`td_fûl_ønd_£eds
(
td
);

255 
	}
}

258 
ölöe
 
	$fio_£t_sched_idÀ
()

261  (
	`SëThªadPri‹ôy
(
	`GëCuºítThªad
(), 
THREAD_PRIORITY_IDLE
))? 0 : -1;

262 
	}
}

	@/home/terekhov/tmp/fio/fio/os/os.h

1 #i‚de‡
FIO_OS_H


2 
	#FIO_OS_H


	)

4 
	~<sys/ty≥s.h
>

5 
	~<sys/sockë.h
>

6 
	~<f˙é.h
>

7 
	~<±hªad.h
>

8 
	~<uni°d.h
>

9 
	~<°dlib.h
>

11 
	~"../¨ch/¨ch.h
"

14 
	mos_löux
 = 1,

15 
	mos_aix
,

16 
	mos_‰ìbsd
,

17 
	mos_hpux
,

18 
	mos_mac
,

19 
	mos_√tbsd
,

20 
	mos_›íbsd
,

21 
	mos_sﬁ¨is
,

22 
	mos_wödows
,

23 
	mos_™droid
,

25 
	mos_ƒ
,

28 #i‡
deföed
(
__ANDROID__
)

29 
	~"os-™droid.h
"

30 #ñi‡
deföed
(
__löux__
)

31 
	~"os-löux.h
"

32 #ñi‡
deföed
(
__FªeBSD__
)

33 
	~"os-‰ìbsd.h
"

34 #ñi‡
deföed
(
__O≥nBSD__
)

35 
	~"os-›íbsd.h
"

36 #ñi‡
deföed
(
__NëBSD__
)

37 
	~"os-√tbsd.h
"

38 #ñi‡
deföed
(
__sun__
)

39 
	~"os-sﬁ¨is.h
"

40 #ñi‡
deföed
(
__APPLE__
)

41 
	~"os-mac.h
"

42 #ñi‡
deföed
(
_AIX
)

43 
	~"os-aix.h
"

44 #ñi‡
deföed
(
__hpux
)

45 
	~"os-hpux.h
"

46 #ñi‡
deföed
(
WIN32
)

47 
	~"os-wödows.h
"

52 #ifde‡
CONFIG_POSIXAIO


53 
	~<aio.h
>

54 #i‚de‡
FIO_OS_HAVE_AIOCB_TYPEDEF


55 
aiocb
 
	tos_aiocb_t
;

59 #ifde‡
FIO_HAVE_SGIO


60 
	~<löux/fs.h
>

61 
	~<scsi/sg.h
>

64 #i‚de‡
CONFIG_STRSEP


65 
	~"../lib/°r£p.h
"

68 #ifde‡
MSG_DONTWAIT


69 
	#OS_MSG_DONTWAIT
 
MSG_DONTWAIT


	)

72 #i‚de‡
POSIX_FADV_DONTNEED


73 
	#POSIX_FADV_DONTNEED
 (0)

	)

74 
	#POSIX_FADV_SEQUENTIAL
 (0)

	)

75 
	#POSIX_FADV_RANDOM
 (0)

	)

78 #i‚de‡
FIO_HAVE_CPU_AFFINITY


79 
	#fio_£èfföôy
(
pid
, 
mask
Ë(0)

	)

80 
	#fio_gëafföôy
(
pid
, 
mask
Ëdÿ{ } 0)

	)

81 
	#fio_˝u_˛ór
(
mask
, 
˝u
Ëdÿ{ } 0)

	)

82 
	#fio_˝u£t_exô
(
mask
Ë(-1)

	)

83 
	#fio_˝us_•lô
(
mask
, 
˝u
Ë(0)

	)

84 
	tos_˝u_mask_t
;

86 
fio_˝us_•lô
(
os_˝u_mask_t
 *
mask
, 
˝u
);

89 #i‚de‡
FIO_HAVE_IOPRIO


90 
	#i›rio_£t
(
which
, 
who
, 
¥io˛ass
, 
¥io
Ë(0)

	)

93 #i‚de‡
FIO_HAVE_ODIRECT


94 
	#OS_O_DIRECT
 0

	)

96 
	#OS_O_DIRECT
 
O_DIRECT


	)

99 #ifde‡
OS_O_ATOMIC


100 
	#FIO_O_ATOMIC
 
OS_O_ATOMIC


	)

102 
	#FIO_O_ATOMIC
 0

	)

105 #i‚de‡
FIO_HAVE_HUGETLB


106 
	#SHM_HUGETLB
 0

	)

107 
	#MAP_HUGETLB
 0

	)

108 #i‚de‡
FIO_HUGE_PAGE


109 
	#FIO_HUGE_PAGE
 0

	)

112 #i‚de‡
FIO_HUGE_PAGE


113 
	#FIO_HUGE_PAGE
 4194304

	)

117 #i‚de‡
FIO_HAVE_MMAP_HUGE


118 
	#MAP_HUGETLB
 0

	)

121 #i‚de‡
FIO_O_NOATIME


122 
	#FIO_O_NOATIME
 0

	)

125 #i‚de‡
OS_RAND_MAX


126 
	#OS_RAND_MAX
 
RAND_MAX


	)

129 #i‚de‡
FIO_HAVE_RAWBIND


130 
	#fio_lookup_øw
(
dev
, 
majdev
, 
mödev
Ë1

	)

133 #i‚de‡
FIO_PREFERRED_ENGINE


134 
	#FIO_PREFERRED_ENGINE
 "sync"

	)

137 #i‚de‡
FIO_OS_PATH_SEPARATOR


138 
	#FIO_OS_PATH_SEPARATOR
 "/"

	)

141 #i‚de‡
FIO_PREFERRED_CLOCK_SOURCE


142 #ifde‡
CONFIG_CLOCK_GETTIME


143 
	#FIO_PREFERRED_CLOCK_SOURCE
 
CS_CGETTIME


	)

145 
	#FIO_PREFERRED_CLOCK_SOURCE
 
CS_GTOD


	)

149 #i‚de‡
FIO_MAX_JOBS


150 
	#FIO_MAX_JOBS
 2048

	)

153 #i‚de‡
CONFIG_SOCKLEN_T


154 
	tsockÀn_t
;

157 #i‚de‡
FIO_OS_HAS_CTIME_R


158 
	#os_˘ime_r
(
x
, 
y
, 
z
Ë(Ë
	`˘ime_r
((x), (y))

	)

161 #ifde‡
FIO_USE_GENERIC_SWAP


162 
ölöe
 
uöt16_t
 
	$fio_sw≠16
(
uöt16_t
 
vÆ
)

164  (
vÆ
 << 8) | (val >> 8);

165 
	}
}

167 
ölöe
 
uöt32_t
 
	$fio_sw≠32
(
uöt32_t
 
vÆ
)

169 
vÆ
 = ((val & 0xff00ff00UL) >> 8) | ((val & 0x00ff00ffUL) << 8);

171  (
vÆ
 >> 16) | (val << 16);

172 
	}
}

174 
ölöe
 
uöt64_t
 
	$fio_sw≠64
(
uöt64_t
 
vÆ
)

176 
vÆ
 = ((val & 0xff00ff00ff00ff00ULL) >> 8) |

177 ((
vÆ
 & 0x00ff00ff00ff00ffULL) << 8);

178 
vÆ
 = ((val & 0xffff0000ffff0000ULL) >> 16) |

179 ((
vÆ
 & 0x0000ffff0000ffffULL) << 16);

181  (
vÆ
 >> 32) | (val << 32);

182 
	}
}

185 #i‚de‡
FIO_HAVE_BYTEORDER_FUNCS


186 #ifde‡
CONFIG_LITTLE_ENDIAN


187 
	#__À16_to_˝u
(
x
Ë(x)

	)

188 
	#__À32_to_˝u
(
x
Ë(x)

	)

189 
	#__À64_to_˝u
(
x
Ë(x)

	)

190 
	#__˝u_to_À16
(
x
Ë(x)

	)

191 
	#__˝u_to_À32
(
x
Ë(x)

	)

192 
	#__˝u_to_À64
(
x
Ë(x)

	)

194 
	#__À16_to_˝u
(
x
Ë
	`fio_sw≠16
(x)

	)

195 
	#__À32_to_˝u
(
x
Ë
	`fio_sw≠32
(x)

	)

196 
	#__À64_to_˝u
(
x
Ë
	`fio_sw≠64
(x)

	)

197 
	#__˝u_to_À16
(
x
Ë
	`fio_sw≠16
(x)

	)

198 
	#__˝u_to_À32
(
x
Ë
	`fio_sw≠32
(x)

	)

199 
	#__˝u_to_À64
(
x
Ë
	`fio_sw≠64
(x)

	)

203 #ifde‡
FIO_INTERNAL


204 
	#À16_to_˝u
(
vÆ
) ({ \

205 
	`__À16_to_˝u
(
vÆ
); \

206 })

	)

207 
	#À32_to_˝u
(
vÆ
) ({ \

208 
	`__À32_to_˝u
(
vÆ
); \

209 })

	)

210 
	#À64_to_˝u
(
vÆ
) ({ \

211 
	`__À64_to_˝u
(
vÆ
); \

212 })

	)

215 
	#˝u_to_À16
(
vÆ
) ({ \

216 
	`__˝u_to_À16
(
vÆ
); \

217 })

	)

218 
	#˝u_to_À32
(
vÆ
) ({ \

219 
	`__˝u_to_À32
(
vÆ
); \

220 })

	)

221 
	#˝u_to_À64
(
vÆ
) ({ \

222 
	`__˝u_to_À64
(
vÆ
); \

223 })

	)

225 #i‚de‡
FIO_HAVE_BLKTRACE


226 
ölöe
 
	$is_blkåa˚
(c⁄° *
‚ame
, *
√ed_sw≠
)

229 
	}
}

230 
	gthªad_d©a
;

231 
ölöe
 
	$lﬂd_blkåa˚
(
thªad_d©a
 *
td
, c⁄° *
‚ame
,

232 
√ed_sw≠
)

235 
	}
}

238 
	#FIO_DEF_CL_SIZE
 128

	)

240 
ölöe
 
	$os_ˇche_löe_size
()

242 #ifde‡
FIO_HAVE_CL_SIZE


243 
ªt
 = 
	`¨ch_ˇche_löe_size
();

245 i‡(
ªt
 <= 0)

246  
FIO_DEF_CL_SIZE
;

248  
ªt
;

250  
FIO_DEF_CL_SIZE
;

252 
	}
}

254 #ifde‡
FIO_USE_GENERIC_BDEV_SIZE


255 
ölöe
 
	$blockdev_size
(
fio_fûe
 *
f
, *
byãs
)

257 
off_t
 
íd
;

259 *
byãs
 = 0;

261 
íd
 = 
	`l£ek
(
f
->
fd
, 0, 
SEEK_END
);

262 i‡(
íd
 < 0)

263  
î∫o
;

265 *
byãs
 = 
íd
;

267 
	}
}

270 #ifde‡
FIO_USE_GENERIC_RAND


271 
	tos_øndom_°©e_t
;

273 
ölöe
 
	$os_øndom_£ed
(
£ed
, 
os_øndom_°©e_t
 *
rs
)

275 
	`§™d
(
£ed
);

276 
	}
}

278 
ölöe
 
	$os_øndom_l⁄g
(
os_øndom_°©e_t
 *
rs
)

280 
vÆ
;

282 
vÆ
 = 
	`ønd_r
(
rs
);

283  
vÆ
;

284 
	}
}

287 #ifde‡
FIO_USE_GENERIC_INIT_RANDOM_STATE


288 
td_fûl_ønd_£eds
(
thªad_d©a
 *
td
);

293 
ölöe
 
	$öô_øndom_°©e
(
thªad_d©a
 *
td
, *
ønd_£eds
, 
size
)

295 
fd
;

297 
fd
 = 
	`›í
("/dev/uøndom", 
O_RDONLY
);

298 i‡(
fd
 == -1) {

302 i‡(
	`ªad
(
fd
, 
ønd_£eds
, 
size
) < size) {

303 
	`˛o£
(
fd
);

307 
	`˛o£
(
fd
);

308 
	`td_fûl_ønd_£eds
(
td
);

310 
	}
}

313 #i‚de‡
FIO_HAVE_FS_STAT


314 
ölöe
 
	$gë_fs_size
(c⁄° *
∑th
)

317 
	}
}

320 #i‚de‡
FIO_HAVE_CPU_ONLINE_SYSCONF


321 
ölöe
 
	$˝us_⁄löe
()

323  
	`sysc⁄f
(
_SC_NPROCESSORS_ONLN
);

324 
	}
}

327 #i‚de‡
CPU_COUNT


328 #ifde‡
FIO_HAVE_CPU_AFFINITY


329 
ölöe
 
	$CPU_COUNT
(
os_˝u_mask_t
 *
mask
)

331 
max_˝us
 = 
	`˝us_⁄löe
();

332 
ƒ_˝us
, 
i
;

334 
i
 = 0, 
ƒ_˝us
 = 0; i < 
max_˝us
; i++)

335 i‡(
	`fio_˝u_is£t
(
mask
, 
i
))

336 
ƒ_˝us
++;

338  
ƒ_˝us
;

339 
	}
}

343 #i‚de‡
FIO_HAVE_GETTID


344 
ölöe
 
	$gëtid
()

346  
	`gëpid
();

347 
	}
}

	@/home/terekhov/tmp/fio/fio/os/windows/posix.c

6 
	~<¨∑/öë.h
>

7 
	~<√töë/ö.h
>

8 
	~<wödows.h
>

9 
	~<°ddef.h
>

10 
	~<°rög.h
>

11 
	~<°dlib.h
>

12 
	~<uni°d.h
>

13 
	~<dúít.h
>

14 
	~<±hªad.h
>

15 
	~<time.h
>

16 
	~<£m≠h‹e.h
>

17 
	~<sys/shm.h
>

18 
	~<sys/mm™.h
>

19 
	~<sys/uio.h
>

20 
	~<sys/ªsour˚.h
>

21 
	~<sys/pﬁl.h
>

22 
	~<sys/waô.h
>

23 
	~<£tjmp.h
>

25 
	~"../os-wödows.h
"

26 
	~"../../lib/hweight.h
"

28 
mtime_sö˚_now
(
timevÆ
 *);

29 
fio_gëtime
(
timevÆ
 *, *);

32 
HRESULT
 
WINAPI
 
SåögCchC›yA
(

33 *
pszDe°
,

34 
size_t
 
cchDe°
,

35 c⁄° *
pszSrc
);

37 
HRESULT
 
WINAPI
 
SåögCchPrötfA
(

38 *
pszDe°
,

39 
size_t
 
cchDe°
,

40 c⁄° *
pszF‹m©
,

43 
v•rötf_s
(

44 *
buf„r
,

45 
size_t
 
numbîOfEÀmíts
,

46 c⁄° *
f‹m©
,

47 
va_li°
 
¨g±r
);

49 
	$wö_to_posix_îr‹
(
DWORD
 
wöîr
)

51 
wöîr
)

53 
ERROR_FILE_NOT_FOUND
:  
ENOENT
;

54 
ERROR_PATH_NOT_FOUND
:  
ENOENT
;

55 
ERROR_ACCESS_DENIED
:  
EACCES
;

56 
ERROR_INVALID_HANDLE
:  
EBADF
;

57 
ERROR_NOT_ENOUGH_MEMORY
:  
ENOMEM
;

58 
ERROR_INVALID_DATA
:  
EINVAL
;

59 
ERROR_OUTOFMEMORY
:  
ENOMEM
;

60 
ERROR_INVALID_DRIVE
:  
ENODEV
;

61 
ERROR_NOT_SAME_DEVICE
:  
EXDEV
;

62 
ERROR_WRITE_PROTECT
:  
EROFS
;

63 
ERROR_BAD_UNIT
:  
ENODEV
;

64 
ERROR_SHARING_VIOLATION
:  
EACCES
;

65 
ERROR_LOCK_VIOLATION
:  
EACCES
;

66 
ERROR_SHARING_BUFFER_EXCEEDED
:  
ENOLCK
;

67 
ERROR_HANDLE_DISK_FULL
:  
ENOSPC
;

68 
ERROR_NOT_SUPPORTED
:  
ENOSYS
;

69 
ERROR_FILE_EXISTS
:  
EEXIST
;

70 
ERROR_CANNOT_MAKE
:  
EPERM
;

71 
ERROR_INVALID_PARAMETER
:  
EINVAL
;

72 
ERROR_NO_PROC_SLOTS
:  
EAGAIN
;

73 
ERROR_BROKEN_PIPE
:  
EPIPE
;

74 
ERROR_OPEN_FAILED
:  
EIO
;

75 
ERROR_NO_MORE_SEARCH_HANDLES
:  
ENFILE
;

76 
ERROR_CALL_NOT_IMPLEMENTED
:  
ENOSYS
;

77 
ERROR_INVALID_NAME
:  
ENOENT
;

78 
ERROR_WAIT_NO_CHILDREN
:  
ECHILD
;

79 
ERROR_CHILD_NOT_COMPLETE
:  
EBUSY
;

80 
ERROR_DIR_NOT_EMPTY
:  
ENOTEMPTY
;

81 
ERROR_SIGNAL_REFUSED
:  
EIO
;

82 
ERROR_BAD_PATHNAME
:  
ENOENT
;

83 
ERROR_SIGNAL_PENDING
:  
EBUSY
;

84 
ERROR_MAX_THRDS_REACHED
:  
EAGAIN
;

85 
ERROR_BUSY
:  
EBUSY
;

86 
ERROR_ALREADY_EXISTS
:  
EEXIST
;

87 
ERROR_NO_SIGNAL_SENT
:  
EIO
;

88 
ERROR_FILENAME_EXCED_RANGE
:  
EINVAL
;

89 
ERROR_META_EXPANSION_TOO_LONG
:  
EINVAL
;

90 
ERROR_INVALID_SIGNAL_NUMBER
:  
EINVAL
;

91 
ERROR_THREAD_1_INACTIVE
:  
EINVAL
;

92 
ERROR_BAD_PIPE
:  
EINVAL
;

93 
ERROR_PIPE_BUSY
:  
EBUSY
;

94 
ERROR_NO_DATA
:  
EPIPE
;

95 
ERROR_MORE_DATA
:  
EAGAIN
;

96 
ERROR_DIRECTORY
:  
ENOTDIR
;

97 
ERROR_PIPE_CONNECTED
:  
EBUSY
;

98 
ERROR_NO_TOKEN
:  
EINVAL
;

99 
ERROR_PROCESS_ABORTED
:  
EFAULT
;

100 
ERROR_BAD_DEVICE
:  
ENODEV
;

101 
ERROR_BAD_USERNAME
:  
EINVAL
;

102 
ERROR_OPEN_FILES
:  
EAGAIN
;

103 
ERROR_ACTIVE_CONNECTIONS
:  
EAGAIN
;

104 
ERROR_DEVICE_IN_USE
:  
EAGAIN
;

105 
ERROR_INVALID_AT_INTERRUPT_TIME
:  
EINTR
;

106 
ERROR_IO_DEVICE
:  
EIO
;

107 
ERROR_NOT_OWNER
:  
EPERM
;

108 
ERROR_END_OF_MEDIA
:  
ENOSPC
;

109 
ERROR_EOM_OVERFLOW
:  
ENOSPC
;

110 
ERROR_BEGINNING_OF_MEDIA
:  
ESPIPE
;

111 
ERROR_SETMARK_DETECTED
:  
ESPIPE
;

112 
ERROR_NO_DATA_DETECTED
:  
ENOSPC
;

113 
ERROR_POSSIBLE_DEADLOCK
:  
EDEADLOCK
;

114 
ERROR_CRC
:  
EIO
;

115 
ERROR_NEGATIVE_SEEK
:  
EINVAL
;

116 
ERROR_DISK_FULL
:  
ENOSPC
;

117 
ERROR_NOACCESS
:  
EFAULT
;

118 
ERROR_FILE_INVALID
:  
ENXIO
;

121  
wöîr
;

122 
	}
}

124 
	$GëNumLogiˇlPro˚ss‹s
()

126 
SYSTEM_LOGICAL_PROCESSOR_INFORMATION
 *
¥o˚ss‹_öfo
 = 
NULL
;

127 
DWORD
 
Àn
 = 0;

128 
DWORD
 
num_¥o˚ss‹s
 = 0;

129 
DWORD
 
îr‹
 = 0;

130 
DWORD
 
i
;

132 !
	`GëLogiˇlPro˚ss‹Inf‹m©i⁄
(
¥o˚ss‹_öfo
, &
Àn
)) {

133 
îr‹
 = 
	`GëLa°Eº‹
();

134 i‡(
îr‹
 =
ERROR_INSUFFICIENT_BUFFER
)

135 
¥o˚ss‹_öfo
 = 
	`mÆloc
(
Àn
);

137 
	`log_îr
("Eº‹: GëLogiˇlPro˚ss‹Inf‹m©i⁄ faûed: %d\n", 
îr‹
);

141 i‡(
¥o˚ss‹_öfo
 =
NULL
) {

142 
	`log_îr
("Error: failedÅoállocate memory for GetLogicalProcessorInformation");

147 
i
 = 0; i < 
Àn
 / (
SYSTEM_LOGICAL_PROCESSOR_INFORMATION
); i++)

149 i‡(
¥o˚ss‹_öfo
[
i
].
Rñ©i⁄shù
 =
Rñ©i⁄Pro˚ss‹C‹e
)

150 
num_¥o˚ss‹s
 +
	`hweight64
(
¥o˚ss‹_öfo
[
i
].
Pro˚ss‹Mask
);

153 
	`‰ì
(
¥o˚ss‹_öfo
);

154  
num_¥o˚ss‹s
;

155 
	}
}

157 
	$sysc⁄f
(
«me
)

159 
vÆ
 = -1;

160 
vÆ2
 = -1;

161 
SYSTEM_INFO
 
sysInfo
;

162 
MEMORYSTATUSEX
 
°©us
;

164 
«me
)

166 
_SC_NPROCESSORS_ONLN
:

167 
vÆ
 = 
	`GëNumLogiˇlPro˚ss‹s
();

168 i‡(
vÆ
 == -1)

169 
	`log_îr
("sysconf(_SC_NPROCESSORS_ONLN) failed\n");

173 
_SC_PAGESIZE
:

174 
	`GëSy°emInfo
(&
sysInfo
);

175 
vÆ
 = 
sysInfo
.
dwPageSize
;

178 
_SC_PHYS_PAGES
:

179 
°©us
.
dwLígth
 = (status);

180 
vÆ2
 = 
	`sysc⁄f
(
_SC_PAGESIZE
);

181 i‡(
	`GlobÆMem‹ySètusEx
(&
°©us
Ë&& 
vÆ2
 != -1)

182 
vÆ
 = 
°©us
.
uŒTŸÆPhys
 / 
vÆ2
;

184 
	`log_îr
("sysconf(_SC_PHYS_PAGES) failed\n");

187 
	`log_îr
("sysc⁄f(%dËi†nŸ im∂emíãd\n", 
«me
);

191  
vÆ
;

192 
	}
}

194 *
	gdl_îr‹
 = 
NULL
;

196 
	$dl˛o£
(*
h™dÀ
)

198  !
	`FªeLibøry
((
HMODULE
)
h™dÀ
);

199 
	}
}

201 *
	$dl›í
(c⁄° *
fûe
, 
mode
)

203 
HMODULE
 
hMod
;

205 
hMod
 = 
	`LﬂdLibøry
(
fûe
);

206 i‡(
hMod
 =
INVALID_HANDLE_VALUE
)

207 
dl_îr‹
 = (*)"LoadLibrary failed";

209 
dl_îr‹
 = 
NULL
;

211  
hMod
;

212 
	}
}

214 *
	$dlsym
(*
h™dÀ
, c⁄° *
«me
)

216 
FARPROC
 
‚På
;

218 
‚På
 = 
	`GëProcAddªss
((
HMODULE
)
h™dÀ
, 
«me
);

219 i‡(
‚På
 =
NULL
)

220 
dl_îr‹
 = (*)"GetProcAddress failed";

222 
dl_îr‹
 = 
NULL
;

224  
‚På
;

225 
	}
}

227 *
	$dÀº‹
()

229  
dl_îr‹
;

230 
	}
}

232 
	$gëtimeofday
(
timevÆ
 *
ª°ri˘
 
ç
, *ª°ri˘ 
tzp
)

234 
FILETIME
 
fûeTime
;

235 
uöt64_t
 
unix_time
, 
wödows_time
;

236 c⁄° 
uöt64_t
 
MILLISECONDS_BETWEEN_1601_AND_1970
 = 11644473600000;

239 ()
tzp
;

246 
	`GëSy°emTimeAsFûeTime
(&
fûeTime
);

247 
wödows_time
 = ((
uöt64_t
)
fûeTime
.
dwHighD©eTime
 << 32Ë+ fûeTime.
dwLowD©eTime
;

249 
unix_time
 = (((
wödows_time
)/10000Ë- 
MILLISECONDS_BETWEEN_1601_AND_1970
);

251 
ç
->
tv_£c
 = 
unix_time
 / 1000;

252 
ç
->
tv_u£c
 = (
unix_time
 % 1000) * 1000;

254 
	}
}

256 
	$siga˘i⁄
(
sig
, c⁄° 
siga˘i⁄
 *
a˘
,

257 
siga˘i⁄
 *
ﬂ˘
)

259 
rc
 = 0;

260 (*
¥ev_h™dÀr
)();

262 
¥ev_h™dÀr
 = 
	`sig«l
(
sig
, 
a˘
->
ß_h™dÀr
);

263 i‡(
ﬂ˘
 !
NULL
)

264 
ﬂ˘
->
ß_h™dÀr
 = 
¥ev_h™dÀr
;

266 i‡(
¥ev_h™dÀr
 =
SIG_ERR
)

267 
rc
 = -1;

269  
rc
;

270 
	}
}

272 
	$l°©
(c⁄° * 
∑th
, 
°©
 * 
buf
)

274  
	`°©
(
∑th
, 
buf
);

275 
	}
}

277 *
	$mm≠
(*
addr
, 
size_t
 
Àn
, 
¥Ÿ
, 
Êags
,

278 
fûdes
, 
off_t
 
off
)

280 
DWORD
 
vaPrŸ
 = 0;

281 * 
ÆlocAddr
 = 
NULL
;

283 i‡(
¥Ÿ
 & 
PROT_NONE
)

284 
vaPrŸ
 |
PAGE_NOACCESS
;

286 i‡((
¥Ÿ
 & 
PROT_READ
Ë&& !’rŸ & 
PROT_WRITE
))

287 
vaPrŸ
 |
PAGE_READONLY
;

289 i‡(
¥Ÿ
 & 
PROT_WRITE
)

290 
vaPrŸ
 |
PAGE_READWRITE
;

292 i‡((
Êags
 & 
MAP_ANON
Ë| (Êag†& 
MAP_ANONYMOUS
))

294 
ÆlocAddr
 = 
	`VútuÆAŒoc
(
addr
, 
Àn
, 
MEM_COMMIT
, 
vaPrŸ
);

295 i‡(
ÆlocAddr
 =
NULL
)

296 
î∫o
 = 
	`wö_to_posix_îr‹
(
	`GëLa°Eº‹
());

299  
ÆlocAddr
;

300 
	}
}

302 
	$munm≠
(*
addr
, 
size_t
 
Àn
)

304 i‡(!
	`VútuÆFªe
(
addr
, 0, 
MEM_RELEASE
)) {

305 
î∫o
 = 
	`wö_to_posix_îr‹
(
	`GëLa°Eº‹
());

310 
	}
}

312 
	$f‹k
()

314 
	`log_îr
("%†i†nŸ im∂emíãd\n", 
__func__
);

315 
î∫o
 = 
ENOSYS
;

317 
	}
}

319 
pid_t
 
	$£tsid
()

321 
	`log_îr
("%†i†nŸ im∂emíãd\n", 
__func__
);

322 
î∫o
 = 
ENOSYS
;

324 
	}
}

326 
HANDLE
 
	glog_fûe
 = 
INVALID_HANDLE_VALUE
;

328 
	$›ílog
(c⁄° *
idít
, 
log›t
, 
Ácûôy
)

330 i‡(
log_fûe
 =
INVALID_HANDLE_VALUE
)

331 
log_fûe
 = 
	`Cª©eFûeA
("sy¶og.txt", 
GENERIC_WRITE
, 
FILE_SHARE_READ
 | 
FILE_SHARE_WRITE
, 
NULL
, 
OPEN_ALWAYS
, 0, NULL);

332 
	}
}

334 
	$˛o£log
()

336 
	`Clo£H™dÀ
(
log_fûe
);

337 
log_fûe
 = 
INVALID_HANDLE_VALUE
;

338 
	}
}

340 
	$sy¶og
(
¥i‹ôy
, c⁄° *
mesßge
, ... )

342 
va_li°
 
v
;

343 
Àn
;

344 *
ouçut
;

345 
DWORD
 
byãs_wrôãn
;

347 i‡(
log_fûe
 =
INVALID_HANDLE_VALUE
) {

348 
log_fûe
 = 
	`Cª©eFûeA
("sy¶og.txt", 
GENERIC_WRITE
, 
FILE_SHARE_READ
 | 
FILE_SHARE_WRITE
, 
NULL
, 
OPEN_ALWAYS
, 0, NULL);

351 i‡(
log_fûe
 =
INVALID_HANDLE_VALUE
) {

352 
	`log_îr
("syslog: failedÅo openÜog file\n");

356 
	`va_°¨t
(
v
, 
mesßge
);

357 
Àn
 = 
	`_vs˝rötf
(
mesßge
, 
v
);

358 
ouçut
 = 
	`mÆloc
(
Àn
 + ());

359 
	`v•rötf
(
ouçut
, 
mesßge
, 
v
);

360 
	`WrôeFûe
(
log_fûe
, 
ouçut
, 
Àn
, &
byãs_wrôãn
, 
NULL
);

361 
	`va_íd
(
v
);

362 
	`‰ì
(
ouçut
);

363 
	}
}

365 
	$kûl
(
pid_t
 
pid
, 
sig
)

367 
î∫o
 = 
ESRCH
;

369 
	}
}

375 
	$f˙é
(
fûdes
, 
cmd
, ...)

382 
va_li°
 
≠
;

383 
vÆ
, 
›t
, 
°©us
;

385 i‡(
cmd
 =
F_GETFL
)

387 i‡(
cmd
 !
F_SETFL
) {

388 
î∫o
 = 
EINVAL
;

392 
	`va_°¨t
(
≠
, 1);

394 
›t
 = 
	`va_¨g
(
≠
, );

395 i‡(
›t
 & 
O_NONBLOCK
)

396 
vÆ
 = 1;

398 
vÆ
 = 0;

400 
°©us
 = 
	`io˘lsockë
((
SOCKET
)
fûdes
, 
›t
, &
vÆ
);

402 i‡(
°©us
 =
SOCKET_ERROR
) {

403 
î∫o
 = 
EINVAL
;

404 
vÆ
 = -1;

407 
	`va_íd
(
≠
);

409  
vÆ
;

412 
	}
}

419 
	$˛ock_gëtime
(
˛ockid_t
 
˛ock_id
, 
time•ec
 *
ç
)

421 
rc
 = 0;

423 i‡(
˛ock_id
 =
CLOCK_MONOTONIC
)

425 
LARGE_INTEGER
 
‰eq
 = {{0,0}};

426 
LARGE_INTEGER
 
cou¡s
;

427 
uöt64_t
 
t
;

429 
	`QuîyPîf‹m™˚Cou¡î
(&
cou¡s
);

430 i‡(
‰eq
.
QuadP¨t
 == 0)

431 
	`QuîyPîf‹m™˚Fªquícy
(&
‰eq
);

433 
ç
->
tv_£c
 = 
cou¡s
.
QuadP¨t
 / 
‰eq
.QuadPart;

436 
t
 = 
ç
->
tv_£c
 * 
‰eq
.
QuadP¨t
;

437 
t
 = 
cou¡s
.
QuadP¨t
 -Å;

441 
t
 *= 1000000000;

442 
ç
->
tv_n£c
 = 
t
 / 
‰eq
.
QuadP¨t
;

444 i‡(
˛ock_id
 =
CLOCK_REALTIME
)

448 
timevÆ
 
tv
;

449 
	`gëtimeofday
(&
tv
, 
NULL
);

450 
ç
->
tv_£c
 = 
tv
.tv_sec;

451 
ç
->
tv_n£c
 = 
tv
.
tv_u£c
 * 1000;

453 
î∫o
 = 
EINVAL
;

454 
rc
 = -1;

457  
rc
;

458 
	}
}

460 
	$mlock
(c⁄° * 
addr
, 
size_t
 
Àn
)

462 
SIZE_T
 
mö
, 
max
;

463 
BOOL
 
suc˚ss
;

464 
HANDLE
 
¥o˚ss
 = 
	`GëCuºítPro˚ss
();

466 
suc˚ss
 = 
	`GëPro˚ssW‹kögSëSize
(
¥o˚ss
, &
mö
, &
max
);

467 i‡(!
suc˚ss
) {

468 
î∫o
 = 
	`wö_to_posix_îr‹
(
	`GëLa°Eº‹
());

472 
mö
 +
Àn
;

473 
max
 +
Àn
;

474 
suc˚ss
 = 
	`SëPro˚ssW‹kögSëSize
(
¥o˚ss
, 
mö
, 
max
);

475 i‡(!
suc˚ss
) {

476 
î∫o
 = 
	`wö_to_posix_îr‹
(
	`GëLa°Eº‹
());

480 
suc˚ss
 = 
	`VútuÆLock
((
LPVOID
)
addr
, 
Àn
);

481 i‡(!
suc˚ss
) {

482 
î∫o
 = 
	`wö_to_posix_îr‹
(
	`GëLa°Eº‹
());

487 
	}
}

489 
	$mu∆ock
(c⁄° * 
addr
, 
size_t
 
Àn
)

491 
BOOL
 
suc˚ss
 = 
	`VútuÆU∆ock
((
LPVOID
)
addr
, 
Àn
);

492 i‡(!
suc˚ss
) {

493 
î∫o
 = 
	`wö_to_posix_îr‹
(
	`GëLa°Eº‹
());

498 
	}
}

500 
pid_t
 
	$waôpid
(
pid_t
 
pid
, *
°©_loc
, 
›ti⁄s
)

502 
	`log_îr
("%†i†nŸ im∂emíãd\n", 
__func__
);

503 
î∫o
 = 
ENOSYS
;

505 
	}
}

507 
	$u¶ìp
(
u£c⁄ds_t
 
u£c⁄ds
)

509 
	`SÀï
(
u£c⁄ds
 / 1000);

511 
	}
}

513 *
	$ba£«me
(*
∑th
)

515 
«me
[
MAX_PATH
];

516 
i
;

518 i‡(
∑th
 =
NULL
 || 
	`°æí
(path) == 0)

521 
i
 = 
	`°æí
(
∑th
) - 1;

523 
∑th
[
i
] != '\\' &&Öath[i] != '/' && i >= 0)

524 
i
--;

526 
	`°∫˝y
(
«me
, 
∑th
 + 
i
 + 1, 
MAX_PATH
);

528  
«me
;

529 
	}
}

531 
	$fsync
(
fûdes
)

533 
HANDLE
 
hFûe
 = (HANDLE)
	`_gë_osfh™dÀ
(
fûdes
);

534 i‡(!
	`FlushFûeBuf„rs
(
hFûe
)) {

535 
î∫o
 = 
	`wö_to_posix_îr‹
(
	`GëLa°Eº‹
());

540 
	}
}

542 
	gnFûeM≠pögs
 = 0;

543 
HANDLE
 
	gfûeM≠pögs
[1024];

545 
	$shmgë
(
key_t
 
key
, 
size_t
 
size
, 
shmÊg
)

547 
m≠id
 = -1;

548 
uöt32_t
 
size_low
 = 
size
 & 0xFFFFFFFF;

549 
uöt32_t
 
size_high
 = ((
uöt64_t
)
size
) >> 32;

550 
HANDLE
 
hM≠pög
 = 
	`Cª©eFûeM≠pög
(
INVALID_HANDLE_VALUE
, 
NULL
, (
PAGE_EXECUTE_READWRITE
 | 
SEC_RESERVE
), 
size_high
, 
size_low
, NULL);

551 i‡(
hM≠pög
 !
NULL
) {

552 
fûeM≠pögs
[
nFûeM≠pögs
] = 
hM≠pög
;

553 
m≠id
 = 
nFûeM≠pögs
;

554 
nFûeM≠pögs
++;

556 
î∫o
 = 
ENOSYS
;

559  
m≠id
;

560 
	}
}

562 *
	$shm©
(
shmid
, c⁄° *
shmaddr
, 
shmÊg
)

564 * 
m≠Addr
;

565 
MEMORY_BASIC_INFORMATION
 
memInfo
;

566 
m≠Addr
 = 
	`M≠VõwOfFûe
(
fûeM≠pögs
[
shmid
], 
FILE_MAP_ALL_ACCESS
, 0, 0, 0);

567 i‡(
m≠Addr
 =
NULL
) {

568 
î∫o
 = 
	`wö_to_posix_îr‹
(
	`GëLa°Eº‹
());

572 i‡(
	`VútuÆQuîy
(
m≠Addr
, &
memInfo
, (memInfo)) == 0) {

573 
î∫o
 = 
	`wö_to_posix_îr‹
(
	`GëLa°Eº‹
());

577 
m≠Addr
 = 
	`VútuÆAŒoc
(m≠Addr, 
memInfo
.
Regi⁄Size
, 
MEM_COMMIT
, 
PAGE_READWRITE
);

578 i‡(
m≠Addr
 =
NULL
) {

579 
î∫o
 = 
	`wö_to_posix_îr‹
(
	`GëLa°Eº‹
());

583  
m≠Addr
;

584 
	}
}

586 
	$shmdt
(c⁄° *
shmaddr
)

588 i‡(!
	`Unm≠VõwOfFûe
(
shmaddr
)) {

589 
î∫o
 = 
	`wö_to_posix_îr‹
(
	`GëLa°Eº‹
());

594 
	}
}

596 
	$shm˘l
(
shmid
, 
cmd
, 
shmid_ds
 *
buf
)

598 i‡(
cmd
 =
IPC_RMID
) {

599 
fûeM≠pögs
[
shmid
] = 
INVALID_HANDLE_VALUE
;

602 
	`log_îr
("%†i†nŸ im∂emíãd\n", 
__func__
);

604 
î∫o
 = 
ENOSYS
;

606 
	}
}

608 
	$£tuid
(
uid_t
 
uid
)

610 
	`log_îr
("%†i†nŸ im∂emíãd\n", 
__func__
);

611 
î∫o
 = 
ENOSYS
;

613 
	}
}

615 
	$£tgid
(
gid_t
 
gid
)

617 
	`log_îr
("%†i†nŸ im∂emíãd\n", 
__func__
);

618 
î∫o
 = 
ENOSYS
;

620 
	}
}

622 
	$ni˚
(
ö¸
)

624 i‡(
ö¸
 != 0) {

625 
î∫o
 = 
EINVAL
;

630 
	}
}

632 
	$gërußge
(
who
, 
rußge
 *
r_ußge
)

634 c⁄° 
uöt64_t
 
SECONDS_BETWEEN_1601_AND_1970
 = 11644473600;

635 
FILETIME
 
cTime
, 
eTime
, 
kTime
, 
uTime
;

636 
time_t
 
time
;

637 
HANDLE
 
h
;

639 
	`mem£t
(
r_ußge
, 0, (*r_usage));

641 i‡(
who
 =
RUSAGE_SELF
) {

642 
h
 = 
	`GëCuºítPro˚ss
();

643 
	`GëPro˚ssTimes
(
h
, &
cTime
, &
eTime
, &
kTime
, &
uTime
);

644 } i‡(
who
 =
RUSAGE_THREAD
) {

645 
h
 = 
	`GëCuºítThªad
();

646 
	`GëThªadTimes
(
h
, &
cTime
, &
eTime
, &
kTime
, &
uTime
);

648 
	`log_îr
("fio: gërußgê%d i†nŸ im∂emíãd\n", 
who
);

652 
time
 = ((
uöt64_t
)
uTime
.
dwHighD©eTime
 << 32Ë+ uTime.
dwLowD©eTime
;

655 
time
 = (
time_t
)((—ime)/10000000Ë- 
SECONDS_BETWEEN_1601_AND_1970
);

656 
r_ußge
->
ru_utime
.
tv_£c
 = 
time
;

658 
r_ußge
->
ru_utime
.
tv_u£c
 = 0;

659 
time
 = ((
uöt64_t
)
kTime
.
dwHighD©eTime
 << 32Ë+ kTime.
dwLowD©eTime
;

662 
time
 = (
time_t
)((—ime)/10000000Ë- 
SECONDS_BETWEEN_1601_AND_1970
);

663 
r_ußge
->
ru_°ime
.
tv_£c
 = 
time
;

664 
r_ußge
->
ru_°ime
.
tv_u£c
 = 0;

666 
	}
}

668 
	$posix_madvi£
(*
addr
, 
size_t
 
Àn
, 
advi˚
)

670 
	`log_îr
("%†i†nŸ im∂emíãd\n", 
__func__
);

671  
ENOSYS
;

672 
	}
}

675 
	$msync
(*
addr
, 
size_t
 
Àn
, 
Êags
)

677 
î∫o
 = 
ENOSYS
;

679 
	}
}

681 
	$fd©async
(
fûdes
)

683  
	`fsync
(
fûdes
);

684 
	}
}

686 
ssize_t
 
	$pwrôe
(
fûdes
, c⁄° *
buf
, 
size_t
 
nbyã
,

687 
off_t
 
off£t
)

689 
öt64_t
 
pos
 = 
	`_ãŒi64
(
fûdes
);

690 
ssize_t
 
Àn
 = 
	`_wrôe
(
fûdes
, 
buf
, 
nbyã
);

691 
	`_l£eki64
(
fûdes
, 
pos
, 
SEEK_SET
);

692  
Àn
;

693 
	}
}

695 
ssize_t
 
	$¥ód
(
fûdes
, *
buf
, 
size_t
 
nbyã
, 
off_t
 
off£t
)

697 
öt64_t
 
pos
 = 
	`_ãŒi64
(
fûdes
);

698 
ssize_t
 
Àn
 = 
	`ªad
(
fûdes
, 
buf
, 
nbyã
);

699 
	`_l£eki64
(
fûdes
, 
pos
, 
SEEK_SET
);

700  
Àn
;

701 
	}
}

703 
ssize_t
 
	$ªadv
(
fûdes
, c⁄° 
iovec
 *
iov
, 
iov˙t
)

705 
	`log_îr
("%†i†nŸ im∂emíãd\n", 
__func__
);

706 
î∫o
 = 
ENOSYS
;

708 
	}
}

710 
ssize_t
 
	$wrôev
(
fûdes
, c⁄° 
iovec
 *
iov
, 
iov˙t
)

712 
i
;

713 
DWORD
 
byãs_wrôãn
 = 0;

714 
i
 = 0; i < 
iov˙t
; i++)

716 
Àn
 = 
	`£nd
((
SOCKET
)
fûdes
, 
iov
[
i
].
iov_ba£
, iov[i].
iov_Àn
, 0);

717 i‡(
Àn
 =
SOCKET_ERROR
)

719 
DWORD
 
îr
 = 
	`GëLa°Eº‹
();

720 
î∫o
 = 
	`wö_to_posix_îr‹
(
îr
);

721 
byãs_wrôãn
 = -1;

724 
byãs_wrôãn
 +
Àn
;

727  
byãs_wrôãn
;

728 
	}
}

730 
	$°πﬁl
(c⁄° *
ª°ri˘
 
°r
, **ª°ri˘ 
íd±r
,

731 
ba£
)

733  
	`_°πoi64
(
°r
, 
íd±r
, 
ba£
);

734 
	}
}

736 
	$pﬁl
(
pﬁlfd
 
fds
[], 
nfds_t
 
nfds
, 
timeout
)

738 
timevÆ
 
tv
;

739 
timevÆ
 *
to
 = 
NULL
;

740 
fd_£t
 
ªadfds
, 
wrôefds
, 
ex˚±fds
;

741 
i
;

742 
rc
;

744 i‡(
timeout
 != -1) {

745 
to
 = &
tv
;

746 
to
->
tv_£c
 = 
timeout
 / 1000;

747 
to
->
tv_u£c
 = (
timeout
 % 1000) * 1000;

750 
	`FD_ZERO
(&
ªadfds
);

751 
	`FD_ZERO
(&
wrôefds
);

752 
	`FD_ZERO
(&
ex˚±fds
);

754 
i
 = 0; i < 
nfds
; i++)

756 i‡(
fds
[
i
].
fd
 < 0) {

757 
fds
[
i
].
ªvíts
 = 0;

761 i‡(
fds
[
i
].
evíts
 & 
POLLIN
)

762 
	`FD_SET
(
fds
[
i
].
fd
, &
ªadfds
);

764 i‡(
fds
[
i
].
evíts
 & 
POLLOUT
)

765 
	`FD_SET
(
fds
[
i
].
fd
, &
wrôefds
);

767 
	`FD_SET
(
fds
[
i
].
fd
, &
ex˚±fds
);

769 
rc
 = 
	`£À˘
(
nfds
, &
ªadfds
, &
wrôefds
, &
ex˚±fds
, 
to
);

771 i‡(
rc
 !
SOCKET_ERROR
) {

772 
i
 = 0; i < 
nfds
; i++)

774 i‡(
fds
[
i
].
fd
 < 0) {

778 i‡((
fds
[
i
].
evíts
 & 
POLLIN
Ë&& 
	`FD_ISSET
(fds[i].
fd
, &
ªadfds
))

779 
fds
[
i
].
ªvíts
 |
POLLIN
;

781 i‡((
fds
[
i
].
evíts
 & 
POLLOUT
Ë&& 
	`FD_ISSET
(fds[i].
fd
, &
wrôefds
))

782 
fds
[
i
].
ªvíts
 |
POLLOUT
;

784 i‡(
	`FD_ISSET
(
fds
[
i
].
fd
, &
ex˚±fds
))

785 
fds
[
i
].
ªvíts
 |
POLLHUP
;

788  
rc
;

789 
	}
}

791 
	$«no¶ìp
(c⁄° 
time•ec
 *
rqç
, time•e¯*
rmç
)

793 
timevÆ
 
tv
;

794 
DWORD
 
ms_ªmaöög
;

795 
DWORD
 
ms_tŸÆ
 = (
rqç
->
tv_£c
 * 1000Ë+ (rqç->
tv_n£c
 / 1000000.0);

797 i‡(
ms_tŸÆ
 == 0)

798 
ms_tŸÆ
 = 1;

800 
ms_ªmaöög
 = 
ms_tŸÆ
;

805 
	`fio_gëtime
(&
tv
, 
NULL
);

806 
	`SÀï
(
ms_ªmaöög
);

807 
ms_ªmaöög
 = 
ms_tŸÆ
 - 
	`mtime_sö˚_now
(&
tv
);

808 } 
ms_ªmaöög
 > 0 && ms_ªmaöög < 
ms_tŸÆ
);

811 i‡(
rmç
 !
NULL
) {

812 
rmç
->
tv_£c
 = 0;

813 
rmç
->
tv_n£c
 = 0;

817 
	}
}

819 
DIR
 *
	$›ídú
(c⁄° *
dú«me
)

821 
dúít_˘x
 *
dc
 = 
NULL
;

824 
HANDLE
 
fûe
 = 
	`Cª©eFûeA
(
dú«me
, 0, 
FILE_SHARE_READ
 | 
FILE_SHARE_WRITE
, 
NULL
, 
OPEN_EXISTING
, 
FILE_FLAG_BACKUP_SEMANTICS
, NULL);

825 i‡(
fûe
 !
INVALID_HANDLE_VALUE
) {

826 
	`Clo£H™dÀ
(
fûe
);

827 
dc
 = (
dúít_˘x
*)
	`mÆloc
((dirent_ctx));

828 
	`SåögCchC›yA
(
dc
->
dú«me
, 
MAX_PATH
, dirname);

829 
dc
->
föd_h™dÀ
 = 
INVALID_HANDLE_VALUE
;

831 
DWORD
 
îr‹
 = 
	`GëLa°Eº‹
();

832 i‡(
îr‹
 =
ERROR_FILE_NOT_FOUND
)

833 
î∫o
 = 
ENOENT
;

835 i‡(
îr‹
 =
ERROR_PATH_NOT_FOUND
)

836 
î∫o
 = 
ENOTDIR
;

837 i‡(
îr‹
 =
ERROR_TOO_MANY_OPEN_FILES
)

838 
î∫o
 = 
ENFILE
;

839 i‡(
îr‹
 =
ERROR_ACCESS_DENIED
)

840 
î∫o
 = 
EACCES
;

842 
î∫o
 = 
îr‹
;

845  
dc
;

846 
	}
}

848 
	$˛o£dú
(
DIR
 *
dúp
)

850 i‡(
dúp
 !
NULL
 && dúp->
föd_h™dÀ
 !
INVALID_HANDLE_VALUE
)

851 
	`FödClo£
(
dúp
->
föd_h™dÀ
);

853 
	`‰ì
(
dúp
);

855 
	}
}

857 
dúít
 *
	$ªaddú
(
DIR
 *
dúp
)

859 
dúít
 
de
;

860 
WIN32_FIND_DATA
 
föd_d©a
;

862 i‡(
dúp
 =
NULL
)

863  
NULL
;

865 i‡(
dúp
->
föd_h™dÀ
 =
INVALID_HANDLE_VALUE
) {

866 
£¨ch_∑âîn
[
MAX_PATH
];

867 
	`SåögCchPrötfA
(
£¨ch_∑âîn
, 
MAX_PATH
, "%s\\*", 
dúp
->
dú«me
);

868 
dúp
->
föd_h™dÀ
 = 
	`FödFú°FûeA
(
£¨ch_∑âîn
, &
föd_d©a
);

869 i‡(
dúp
->
föd_h™dÀ
 =
INVALID_HANDLE_VALUE
)

870  
NULL
;

872 i‡(!
	`FödNextFûe
(
dúp
->
föd_h™dÀ
, &
föd_d©a
))

873  
NULL
;

876 
	`SåögCchC›yA
(
de
.
d_«me
, 
MAX_PATH
, 
föd_d©a
.
cFûeName
);

877 
de
.
d_öo
 = 0;

879  &
de
;

880 
	}
}

882 
uid_t
 
	$gëeuid
()

884 
	`log_îr
("%†i†nŸ im∂emíãd\n", 
__func__
);

885 
î∫o
 = 
ENOSYS
;

887 
	}
}

889 
ö_addr_t
 
	$öë_√tw‹k
(c⁄° *
˝
)

891 
ö_addr_t
 
hbo
;

892 
ö_addr_t
 
nbo
 = 
	`öë_addr
(
˝
);

893 
hbo
 = ((
nbo
 & 0xFF) << 24) + ((nbo & 0xFF00) << 8) + ((nbo & 0xFF0000) >> 8) + ((nbo & 0xFF000000) >> 24);

894  
hbo
;

895 
	}
}

897 c⁄° * 
	$öë_¡›
(
af
, c⁄° *
ª°ri˘
 
§c
,

898 *
ª°ri˘
 
d°
, 
sockÀn_t
 
size
)

900 
INT
 
°©us
 = 
SOCKET_ERROR
;

901 
WSADATA
 
wsd
;

902 *
ªt
 = 
NULL
;

904 i‡(
af
 !
AF_INET
 &&á‡!
AF_INET6
) {

905 
î∫o
 = 
EAFNOSUPPORT
;

906  
NULL
;

909 
	`WSASèπup
(
	`MAKEWORD
(2,2), &
wsd
);

911 i‡(
af
 =
AF_INET
) {

912 
sockaddr_ö
 
si
;

913 
DWORD
 
Àn
 = 
size
;

914 
	`mem£t
(&
si
, 0, (si));

915 
si
.
sö_Ámûy
 = 
af
;

916 
	`mem˝y
(&
si
.
sö_addr
, 
§c
, (si.sin_addr));

917 
°©us
 = 
	`WSAAddªssToSåög
((
sockaddr
*)&
si
, (si), 
NULL
, 
d°
, &
Àn
);

918 } i‡(
af
 =
AF_INET6
) {

919 
sockaddr_ö6
 
si6
;

920 
DWORD
 
Àn
 = 
size
;

921 
	`mem£t
(&
si6
, 0, (si6));

922 
si6
.
sö6_Ámûy
 = 
af
;

923 
	`mem˝y
(&
si6
.
sö6_addr
, 
§c
, (si6.sin6_addr));

924 
°©us
 = 
	`WSAAddªssToSåög
((
sockaddr
*)&
si6
, (si6), 
NULL
, 
d°
, &
Àn
);

927 i‡(
°©us
 !
SOCKET_ERROR
)

928 
ªt
 = 
d°
;

930 
î∫o
 = 
ENOSPC
;

932 
	`WSACÀ™up
();

934  
ªt
;

935 
	}
}

937 
	$öë_±⁄
(
af
, c⁄° *
ª°ri˘
 
§c
, *ª°ri˘ 
d°
)

939 
INT
 
°©us
 = 
SOCKET_ERROR
;

940 
WSADATA
 
wsd
;

941 
ªt
 = 1;

943 i‡(
af
 !
AF_INET
 &&á‡!
AF_INET6
) {

944 
î∫o
 = 
EAFNOSUPPORT
;

948 
	`WSASèπup
(
	`MAKEWORD
(2,2), &
wsd
);

950 i‡(
af
 =
AF_INET
) {

951 
sockaddr_ö
 
si
;

952 
INT
 
Àn
 = (
si
);

953 
	`mem£t
(&
si
, 0, (si));

954 
si
.
sö_Ámûy
 = 
af
;

955 
°©us
 = 
	`WSASåögToAddªssA
((*)
§c
, 
af
, 
NULL
, (
sockaddr
*)&
si
, &
Àn
);

956 i‡(
°©us
 !
SOCKET_ERROR
)

957 
	`mem˝y
(
d°
, &
si
.
sö_addr
, (si.sin_addr));

958 } i‡(
af
 =
AF_INET6
) {

959 
sockaddr_ö6
 
si6
;

960 
INT
 
Àn
 = (
si6
);

961 
	`mem£t
(&
si6
, 0, (si6));

962 
si6
.
sö6_Ámûy
 = 
af
;

963 
°©us
 = 
	`WSASåögToAddªssA
((*)
§c
, 
af
, 
NULL
, (
sockaddr
*)&
si6
, &
Àn
);

964 i‡(
°©us
 !
SOCKET_ERROR
)

965 
	`mem˝y
(
d°
, &
si6
.
sö6_addr
, (si6.sin6_addr));

968 i‡(
°©us
 =
SOCKET_ERROR
) {

969 
î∫o
 = 
ENOSPC
;

970 
ªt
 = 0;

973 
	`WSACÀ™up
();

975  
ªt
;

976 
	}
}

	@/home/terekhov/tmp/fio/fio/os/windows/posix.h

1 #i‚de‡
FIO_WINDOWS_POSIX_H


2 
	#FIO_WINDOWS_POSIX_H


	)

4 
off_t
 
	toff64_t
;

5 
	t˛ockid_t
;

7 
˛ock_gëtime
(
˛ockid_t
 
˛ock_id
, 
time•ec
 *
ç
);

8 
öë_©⁄
(c⁄° *, 
ö_addr
 *);

9 
wö_to_posix_îr‹
(
DWORD
 
wöîr
);

	@/home/terekhov/tmp/fio/fio/os/windows/posix/include/arpa/inet.h

1 #i‚de‡
ARPA_INET_H


2 
	#ARPA_INET_H


	)

4 
	~<ws2t˝ù.h
>

5 
	~<öây≥s.h
>

7 
	tsockÀn_t
;

8 
	tö_addr_t
;

11 
	#EAI_SYSTEM
 
EAI_FAIL


	)

13 
ö_addr_t
 
öë_√tw‹k
(c⁄° *
˝
);

15 c⁄° *
öë_¡›
(
af
, c⁄° *
ª°ri˘
 
§c
,

16 *
ª°ri˘
 
d°
, 
sockÀn_t
 
size
);

17 
öë_±⁄
(
af
, c⁄° *
ª°ri˘
 
§c
, *ª°ri˘ 
d°
);

	@/home/terekhov/tmp/fio/fio/os/windows/posix/include/asm/types.h

1 #i‚de‡
ASM_TYPES_H


2 
	#ASM_TYPES_H


	)

4 
	t__u16
;

5 
	t__u32
;

6 
	t__u64
;

	@/home/terekhov/tmp/fio/fio/os/windows/posix/include/dirent.h

1 #i‚de‡
DIRENT_H


2 
	#DIRENT_H


	)

4 
	~<wösock2.h
>

6 
	sdúít


8 
öo_t
 
	md_öo
;

9 
	md_«me
[
MAX_PATH
];

12 
	sdúít_˘x


14 
HANDLE
 
	mföd_h™dÀ
;

15 
	mdú«me
[
MAX_PATH
];

18 
dúít_˘x
 
	tDIR
;

20 
DIR
 *
›ídú
(c⁄° *
dú«me
);

21 
dúít
 *
ªaddú
(
DIR
 *
dúp
);

22 
˛o£dú
(
DIR
 *
dúp
);

	@/home/terekhov/tmp/fio/fio/os/windows/posix/include/dlfcn.h

1 #i‚de‡
DLFCN_H


2 
	#DLFCN_H


	)

4 
	#RTLD_LAZY
 1

	)

6 *
dl›í
(c⁄° *
fûe
, 
mode
);

7 
dl˛o£
(*
h™dÀ
);

8 *
dlsym
(*
ª°ri˘
 
h™dÀ
, c⁄° *ª°ri˘ 
«me
);

9 *
dÀº‹
();

	@/home/terekhov/tmp/fio/fio/os/windows/posix/include/libgen.h

1 #i‚de‡
LIBGEN_H


2 
	#LIBGEN_H


	)

4 *
ba£«me
(*
∑th
);

	@/home/terekhov/tmp/fio/fio/os/windows/posix/include/netdb.h

1 #i‚de‡
NETDB_H


2 
	#NETDB_H


	)

	@/home/terekhov/tmp/fio/fio/os/windows/posix/include/netinet/in.h

1 #i‚de‡
NETINET_IN_H


2 
	#NETINET_IN_H


	)

4 
	~<öây≥s.h
>

5 
	~<sys/un.h
>

	@/home/terekhov/tmp/fio/fio/os/windows/posix/include/netinet/tcp.h

1 #i‚de‡
NETINET_TCP_H


2 
	#NETINET_TCP_H


	)

	@/home/terekhov/tmp/fio/fio/os/windows/posix/include/poll.h

1 #i‚de‡
POLL_H


2 
	#POLL_H


	)

	@/home/terekhov/tmp/fio/fio/os/windows/posix/include/semaphore.h

1 #i‚de‡
SEMAPHORE_H


2 
	#SEMAPHORE_H


	)

	@/home/terekhov/tmp/fio/fio/os/windows/posix/include/sys/ipc.h

1 #i‚de‡
SYS_IPC_H


2 
	#SYS_IPC_H


	)

	@/home/terekhov/tmp/fio/fio/os/windows/posix/include/sys/mman.h

1 #i‚de‡
SYS_MMAN_H


2 
	#SYS_MMAN_H


	)

4 
	~<sys/ty≥s.h
>

6 
	#PROT_NONE
 0x1

	)

7 
	#PROT_READ
 0x2

	)

8 
	#PROT_WRITE
 0x4

	)

10 
	#MAP_ANON
 0x1

	)

11 
	#MAP_ANONYMOUS
 
MAP_ANON


	)

12 
	#MAP_FIXED
 0x2

	)

13 
	#MAP_HASSEMAPHORE
 0x4

	)

14 
	#MAP_INHERIT
 0x8

	)

15 
	#MAP_NOCORE
 0x10

	)

16 
	#MAP_NOSYNC
 0x20

	)

17 
	#MAP_PREFAULT_READ
 0x40

	)

18 
	#MAP_PRIVATE
 0x80

	)

19 
	#MAP_SHARED
 0x100

	)

20 
	#MAP_STACK
 0x200

	)

22 
	#MAP_FAILED
 
NULL


	)

24 
	#MS_ASYNC
 0x1

	)

25 
	#MS_SYNC
 0x2

	)

26 
	#MS_INVALIDATE
 0x3

	)

28 
posix_madvi£
(*
addr
, 
size_t
 
Àn
, 
advi˚
);

29 *
mm≠
(*
addr
, 
size_t
 
Àn
, 
¥Ÿ
, 
Êags
,

30 
fûdes
, 
off_t
 
off
);

31 
munm≠
(*
addr
, 
size_t
 
Àn
);

32 
msync
(*
addr
, 
size_t
 
Àn
, 
Êags
);

33 
mu∆ock
(c⁄° * 
addr
, 
size_t
 
Àn
);

34 
mlock
(c⁄° *
addr
, 
size_t
 
Àn
);

	@/home/terekhov/tmp/fio/fio/os/windows/posix/include/sys/poll.h

1 #i‚de‡
SYS_POLL_H


2 
	#SYS_POLL_H


	)

4 
	tnfds_t
;

6 
	spﬁlfd


8 
	mfd
;

9 
	mevíts
;

10 
	mªvíts
;

13 
pﬁl
(
pﬁlfd
 
fds
[], 
nfds_t
 
nfds
, 
timeout
);

	@/home/terekhov/tmp/fio/fio/os/windows/posix/include/sys/resource.h

1 #i‚de‡
SYS_RESOURCE_H


2 
	#SYS_RESOURCE_H


	)

4 
	#RUSAGE_SELF
 0

	)

5 
	#RUSAGE_THREAD
 1

	)

7 
	srußge


9 
timevÆ
 
	mru_utime
;

10 
timevÆ
 
	mru_°ime
;

11 
	mru_nvcsw
;

12 
	mru_möÊt
;

13 
	mru_majÊt
;

14 
	mru_nivcsw
;

17 
gërußge
(
who
, 
rußge
 *
r_ußge
);

	@/home/terekhov/tmp/fio/fio/os/windows/posix/include/sys/shm.h

1 #i‚de‡
SYS_SHM_H


2 
	#SYS_SHM_H


	)

4 
	#IPC_RMID
 0x1

	)

5 
	#IPC_CREAT
 0x2

	)

6 
	#IPC_PRIVATE
 0x4

	)

8 
	tuid_t
;

9 
	tgid_t
;

11 
	tshm©t_t
;

12 
	tkey_t
;

14 
	sùc_≥rm


16 
uid_t
 
	muid
;

17 
gid_t
 
	mgid
;

18 
uid_t
 
	mcuid
;

19 
gid_t
 
	mcgid
;

20 
mode_t
 
	mmode
;

24 
	sshmid_ds


26 
ùc_≥rm
 
	mshm_≥rm
;

27 
size_t
 
	mshm_£gsz
;

28 
pid_t
 
	mshm_Õid
;

29 
pid_t
 
	mshm_˝id
;

30 
shm©t_t
 
	mshm_«âch
;

31 
time_t
 
	mshm_©ime
;

32 
time_t
 
	mshm_dtime
;

33 
time_t
 
	mshm_˘ime
;

36 
shm˘l
(
shmid
, 
cmd
, 
shmid_ds
 *
buf
);

37 
shmgë
(
key_t
 
key
, 
size_t
 
size
, 
shmÊg
);

38 *
shm©
(
shmid
, c⁄° *
shmaddr
, 
shmÊg
);

39 
shmdt
(c⁄° *
shmaddr
);

	@/home/terekhov/tmp/fio/fio/os/windows/posix/include/sys/socket.h

1 #i‚de‡
SYS_SOCKET_H


2 
	#SYS_SOCKET_H


	)

	@/home/terekhov/tmp/fio/fio/os/windows/posix/include/sys/uio.h

1 #i‚de‡
SYS_UIO_H


2 
	#SYS_UIO_H


	)

4 
	~<öây≥s.h
>

5 
	~<uni°d.h
>

7 
	siovec


9 *
	miov_ba£
;

10 
size_t
 
	miov_Àn
;

13 
ssize_t
 
ªadv
(
fûdes
, c⁄° 
iovec
 *
iov
, 
iov˙t
);

14 
ssize_t
 
wrôev
(
fûdes
, c⁄° 
iovec
 *
iov
, 
iov˙t
);

	@/home/terekhov/tmp/fio/fio/os/windows/posix/include/sys/un.h

1 #i‚de‡
SYS_UN_H


2 
	#SYS_UN_H


	)

4 
	tß_Ámûy_t
;

5 
	tö_p‹t_t
;

7 
	ssockaddr_un


9 
ß_Ámûy_t
 
	msun_Ámûy
;

10 
	msun_∑th
[260];

	@/home/terekhov/tmp/fio/fio/os/windows/posix/include/sys/wait.h

1 #i‚de‡
SYS_WAIT_H


2 
	#SYS_WAIT_H


	)

4 
	#WIFSIGNALED
(
a
Ë0

	)

5 
	#WIFEXITED
(
a
Ë0

	)

6 
	#WTERMSIG
(
a
Ë0

	)

7 
	#WEXITSTATUS
(
a
Ë0

	)

8 
	#WNOHANG
 1

	)

10 
pid_t
 
waôpid
’id_t, *
°©_loc
, 
›ti⁄s
);

	@/home/terekhov/tmp/fio/fio/os/windows/posix/include/syslog.h

1 #i‚de‡
SYSLOG_H


2 
	#SYSLOG_H


	)

4 
sy¶og
();

6 
	#LOG_INFO
 0x1

	)

7 
	#LOG_ERROR
 0x2

	)

8 
	#LOG_WARN
 0x4

	)

10 
	#LOG_NDELAY
 0x1

	)

11 
	#LOG_NOWAIT
 0x2

	)

12 
	#LOG_PID
 0x4

	)

13 
	#LOG_USER
 0x8

	)

15 
˛o£log
();

16 
›ílog
(c⁄° *
idít
, 
log›t
, 
Ácûôy
);

	@/home/terekhov/tmp/fio/fio/parse.c

4 
	~<°dio.h
>

5 
	~<°dlib.h
>

6 
	~<uni°d.h
>

7 
	~<˘y≥.h
>

8 
	~<°rög.h
>

9 
	~<î∫o.h
>

10 
	~<limôs.h
>

11 
	~<°dlib.h
>

12 
	~<m©h.h
>

13 
	~<Êﬂt.h
>

15 
	~"∑r£.h
"

16 
	~"debug.h
"

17 
	~"›ti⁄s.h
"

18 
	~"mömax.h
"

19 
	~"lib/õì754.h
"

21 
fio_›ti⁄
 *
	g__fio_›ti⁄s
;

23 
	$vp_cmp
(c⁄° *
p1
, c⁄° *
p2
)

25 c⁄° 
vÆue_∑ú
 *
vp1
 = 
p1
;

26 c⁄° 
vÆue_∑ú
 *
vp2
 = 
p2
;

28  
	`°æí
(
vp2
->
ivÆ
Ë- såÀn(
vp1
->ival);

29 
	}
}

31 
	$posvÆ_s‹t
(
fio_›ti⁄
 *
o
, 
vÆue_∑ú
 *
vpm≠
)

33 c⁄° 
vÆue_∑ú
 *
vp
;

34 
íåõs
;

36 
	`mem£t
(
vpm≠
, 0, 
PARSE_MAX_VP
 * (
vÆue_∑ú
));

38 
íåõs
 = 0;É¡rõ†< 
PARSE_MAX_VP
;Éntries++) {

39 
vp
 = &
o
->
posvÆ
[
íåõs
];

40 i‡(!
vp
->
ivÆ
 || vp->ival[0] == '\0')

43 
	`mem˝y
(&
vpm≠
[
íåõs
], 
vp
, (*vp));

46 
	`qs‹t
(
vpm≠
, 
íåõs
, (
vÆue_∑ú
), 
vp_cmp
);

47 
	}
}

49 
show_›ti⁄_ønge
(
fio_›ti⁄
 *
o
,

50 (*
loggî
)(c⁄° *
f‹m©
, ...))

52 i‡(
o
->
ty≥
 =
FIO_OPT_FLOAT_LIST
) {

53 i‡(
o
->
möÂ
 =
DBL_MIN
 && o->
maxÂ
 =
DBL_MAX
)

56 
	`loggî
("%20s: mö=%f", "ønge", 
o
->
möÂ
);

57 i‡(
o
->
maxÂ
 !
DBL_MAX
)

58 
	`loggî
(", max=%f", 
o
->
maxÂ
);

59 
	`loggî
("\n");

60 } i‡(!
o
->
posvÆ
[0].
ivÆ
) {

61 i‡(!
o
->
mövÆ
 && !o->
maxvÆ
)

64 
	`loggî
("%20s: mö=%d", "ønge", 
o
->
mövÆ
);

65 i‡(
o
->
maxvÆ
)

66 
	`loggî
(", max=%d", 
o
->
maxvÆ
);

67 
	`loggî
("\n");

69 
	}
}

71 
	$show_›ti⁄_vÆues
(
fio_›ti⁄
 *
o
)

73 
i
;

75 
i
 = 0; i < 
PARSE_MAX_VP
; i++) {

76 c⁄° 
vÆue_∑ú
 *
vp
 = &
o
->
posvÆ
[
i
];

78 i‡(!
vp
->
ivÆ
)

81 
	`log_öfo
("%20s: %-10s", 
i
 =0 ? "vÆid vÆues" : "", 
vp
->
ivÆ
);

82 i‡(
vp
->
hñp
)

83 
	`log_öfo
(" %s", 
vp
->
hñp
);

84 
	`log_öfo
("\n");

87 i‡(
i
)

88 
	`log_öfo
("\n");

89 
	}
}

91 
	$show_›ti⁄_hñp
(
fio_›ti⁄
 *
o
, 
is_îr
)

93 c⁄° *
ty≥hñp
[] = {

107 (*
loggî
)(c⁄° *
f‹m©
, ...);

109 i‡(
is_îr
)

110 
loggî
 = 
log_îr
;

112 
loggî
 = 
log_öfo
;

114 i‡(
o
->
Æüs
)

115 
	`loggî
("%20s: %s\n", "Æüs", 
o
->
Æüs
);

117 
	`loggî
("%20s: %s\n", "ty≥", 
ty≥hñp
[
o
->
ty≥
]);

118 
	`loggî
("%20s: %s\n", "deÁu…", 
o
->
def
 ? o->def : "no default");

119 i‡(
o
->
¥of_«me
)

120 
	`loggî
("%20s: o∆y f‹Örofûê'%s'\n", "vÆid", 
o
->
¥of_«me
);

121 
	`show_›ti⁄_ønge
(
o
, 
loggî
);

122 
	`show_›ti⁄_vÆues
(
o
);

123 
	}
}

125 
	$gë_mu…_time
(c⁄° *
°r
, 
Àn
,

126 
is_£c⁄ds
)

128 c⁄° *
p
 = 
°r
;

129 *
c
;

130 
mu…
 = 1;

135 (
p
 - 
°r
Ë<
Àn
) {

136 i‡(!
	`isdigô
((Ë*
p
) && (*p != '+') && (*p != '-'))

138 
p
++;

141 i‡(!
	`ißÕha
((Ë*
p
)) {

142 i‡(
is_£c⁄ds
)

148 
c
 = 
	`°rdup
(
p
);

149 
i
 = 0; i < 
	`°æí
(
c
); i++)

150 
c
[
i
] = 
	`tﬁowî
(c[i]);

152 i‡(!
	`°∫cmp
("us", 
c
, 2) || !strncmp("usec", c, 4))

153 
mu…
 = 1;

154 i‡(!
	`°∫cmp
("ms", 
c
, 2) || !strncmp("msec", c, 4))

155 
mu…
 = 1000;

156 i‡(!
	`°rcmp
("s", 
c
))

157 
mu…
 = 1000000;

158 i‡(!
	`°rcmp
("m", 
c
))

159 
mu…
 = 60 * 1000000UL;

160 i‡(!
	`°rcmp
("h", 
c
))

161 
mu…
 = 60 * 60 * 1000000UL;

162 i‡(!
	`°rcmp
("d", 
c
))

163 
mu…
 = 24 * 60 * 60 * 1000000UL;

165 
	`‰ì
(
c
);

166  
mu…
;

167 
	}
}

169 
	$is_£∑øt‹
(
c
)

171 
c
) {

180 
	}
}

182 
	$__gë_mu…_byãs
(c⁄° *
p
, *
d©a
,

183 *
≥r˚¡
)

185 
kb_ba£
 = 
	`fio_gë_kb_ba£
(
d©a
);

186 
ªt
 = 1;

187 
i
, 
pow
 = 0, 
mu…
 = 
kb_ba£
;

188 *
c
;

190 i‡(!
p
)

193 
c
 = 
	`°rdup
(
p
);

195 
i
 = 0; i < 
	`°æí
(
c
); i++) {

196 
c
[
i
] = 
	`tﬁowî
(c[i]);

197 i‡(
	`is_£∑øt‹
(
c
[
i
])) {

198 
c
[
i
] = '\0';

203 i‡(!
	`°∫cmp
("pib", 
c
, 3)) {

204 
pow
 = 5;

205 
mu…
 = 1000;

206 } i‡(!
	`°∫cmp
("tib", 
c
, 3)) {

207 
pow
 = 4;

208 
mu…
 = 1000;

209 } i‡(!
	`°∫cmp
("gib", 
c
, 3)) {

210 
pow
 = 3;

211 
mu…
 = 1000;

212 } i‡(!
	`°∫cmp
("mib", 
c
, 3)) {

213 
pow
 = 2;

214 
mu…
 = 1000;

215 } i‡(!
	`°∫cmp
("kib", 
c
, 3)) {

216 
pow
 = 1;

217 
mu…
 = 1000;

218 } i‡(!
	`°∫cmp
("p", 
c
, 1) || !strncmp("pb", c, 2))

219 
pow
 = 5;

220 i‡(!
	`°∫cmp
("t", 
c
, 1) || !strncmp("tb", c, 2))

221 
pow
 = 4;

222 i‡(!
	`°∫cmp
("g", 
c
, 1) || !strncmp("gb", c, 2))

223 
pow
 = 3;

224 i‡(!
	`°∫cmp
("m", 
c
, 1) || !strncmp("mb", c, 2))

225 
pow
 = 2;

226 i‡(!
	`°∫cmp
("k", 
c
, 1) || !strncmp("kb", c, 2))

227 
pow
 = 1;

228 i‡(!
	`°∫cmp
("%", 
c
, 1)) {

229 *
≥r˚¡
 = 1;

230 
	`‰ì
(
c
);

231  
ªt
;

234 
pow
--)

235 
ªt
 *(Ë
mu…
;

237 
	`‰ì
(
c
);

238  
ªt
;

239 
	}
}

241 
	$gë_mu…_byãs
(c⁄° *
°r
, 
Àn
, *
d©a
,

242 *
≥r˚¡
)

244 c⁄° *
p
 = 
°r
;

245 
digô_£í
 = 0;

247 i‡(
Àn
 < 2)

248  
	`__gë_mu…_byãs
(
°r
, 
d©a
, 
≥r˚¡
);

253 (
p
 - 
°r
Ë<
Àn
) {

254 i‡(!
	`isdigô
((Ë*
p
) &&

255 (((*
p
 !'+'Ë&& (*∞!'-')Ë|| 
digô_£í
))

257 
digô_£í
 |
	`isdigô
((Ë*
p
);

258 
p
++;

261 i‡(!
	`ißÕha
((Ë*
p
) && (*p != '%'))

262 
p
 = 
NULL
;

264  
	`__gë_mu…_byãs
(
p
, 
d©a
, 
≥r˚¡
);

265 
	}
}

270 
	$°r_to_Êﬂt
(c⁄° *
°r
, *
vÆ
)

272  (1 =
	`ssˇnf
(
°r
, "%lf", 
vÆ
));

273 
	}
}

278 
	$°r_to_decimÆ
(c⁄° *
°r
, *
vÆ
, 
kûo
, *
d©a
,

279 
is_£c⁄ds
)

281 
Àn
, 
ba£
;

283 
Àn
 = 
	`°æí
(
°r
);

284 i‡(!
Àn
)

287 i‡(
	`°r°r
(
°r
, "0x") || strstr(str, "0X"))

288 
ba£
 = 16;

290 
ba£
 = 10;

292 *
vÆ
 = 
	`°πﬁl
(
°r
, 
NULL
, 
ba£
);

293 i‡(*
vÆ
 =
LONG_MAX
 && 
î∫o
 =
ERANGE
)

296 i‡(
kûo
) {

297 
mu…
;

298 
≥rc
 = 0;

300 
mu…
 = 
	`gë_mu…_byãs
(
°r
, 
Àn
, 
d©a
, &
≥rc
);

301 i‡(
≥rc
)

302 *
vÆ
 = -1ULL - *val;

304 *
vÆ
 *
mu…
;

306 *
vÆ
 *
	`gë_mu…_time
(
°r
, 
Àn
, 
is_£c⁄ds
);

309 
	}
}

311 
	$check_°r_byãs
(c⁄° *
p
, *
vÆ
, *
d©a
)

313  
	`°r_to_decimÆ
(
p
, 
vÆ
, 1, 
d©a
, 0);

314 
	}
}

316 
	$check_°r_time
(c⁄° *
p
, *
vÆ
, 
is_£c⁄ds
)

318  
	`°r_to_decimÆ
(
p
, 
vÆ
, 0, 
NULL
, 
is_£c⁄ds
);

319 
	}
}

321 
	$°rù_bœnk_‰⁄t
(**
p
)

323 *
s
 = *
p
;

325 i‡(!
	`°æí
(
s
))

327 
	`is•a˚
((Ë*
s
))

328 
s
++;

330 *
p
 = 
s
;

331 
	}
}

333 
	$°rù_bœnk_íd
(*
p
)

335 *
°¨t
 = 
p
, *
s
;

337 i‡(!
	`°æí
(
p
))

340 
s
 = 
	`°rchr
(
p
, ';');

341 i‡(
s
)

342 *
s
 = '\0';

343 
s
 = 
	`°rchr
(
p
, '#');

344 i‡(
s
)

345 *
s
 = '\0';

346 i‡(
s
)

347 
p
 = 
s
;

349 
s
 = 
p
 + 
	`°æí
(p);

350 (
	`is•a˚
((Ë*
s
Ë|| 
	`is˙ål
((Ë*s)Ë&& (†> 
°¨t
))

351 
s
--;

353 *(
s
 + 1) = '\0';

354 
	}
}

356 
	$check_ønge_byãs
(c⁄° *
°r
, *
vÆ
, *
d©a
)

358 
__vÆ
;

360 i‡(!
	`°r_to_decimÆ
(
°r
, &
__vÆ
, 1, 
d©a
, 0)) {

361 *
vÆ
 = 
__vÆ
;

366 
	}
}

368 
	$check_öt
(c⁄° *
p
, *
vÆ
)

370 i‡(!
	`°æí
(
p
))

372 i‡(
	`°r°r
(
p
, "0x") || strstr(p, "0X")) {

373 i‡(
	`ssˇnf
(
p
, "%x", 
vÆ
) == 1)

376 i‡(
	`ssˇnf
(
p
, "%u", 
vÆ
) == 1)

381 
	}
}

383 
	$›t_Àn
(c⁄° *
°r
)

385 *
po°fix
;

387 
po°fix
 = 
	`°rchr
(
°r
, ':');

388 i‡(!
po°fix
)

389  
	`°æí
(
°r
);

391  ()(
po°fix
 - 
°r
);

392 
	}
}

394 
	$°r_m©ch_Àn
(c⁄° 
vÆue_∑ú
 *
vp
, c⁄° *
°r
)

396  
	`max
(
	`°æí
(
vp
->
ivÆ
), 
	`›t_Àn
(
°r
));

397 
	}
}

399 
	#vÆ_°‹e
(
±r
, 
vÆ
, 
off
, 
‹
, 
d©a
, 
o
) \

401 
±r
 = 
	`td_v¨
((
d©a
), (
o
), (
off
)); \

402 i‡((
‹
)) \

403 *
±r
 |(
vÆ
); \

405 *
±r
 = (
vÆ
); \

406 } 0)

	)

408 
	$__h™dÀ_›ti⁄
(
fio_›ti⁄
 *
o
, c⁄° *
±r
, *
d©a
,

409 
fú°
, 
m‹e
, 
cuº
)

411 
û
=0, *
ûp
;

412 
fio_Â64_t
 *
Êp
;

413 
uŒ
, *
uŒp
;

414 
ul1
, 
ul2
;

415 
uf
;

416 **
˝
 = 
NULL
;

417 
ªt
 = 0, 
is_time
 = 0;

418 c⁄° 
vÆue_∑ú
 *
vp
;

419 
vÆue_∑ú
 
posvÆ
[
PARSE_MAX_VP
];

420 
i
, 
Æl_skù≥d
 = 1;

422 
	`d¥öt
(
FD_PARSE
, "__h™dÀ_›ti⁄=%s,Åy≥=%d,Öå=%s\n", 
o
->
«me
,

423 
o
->
ty≥
, 
±r
);

425 i‡(!
±r
 && 
o
->
ty≥
 !
FIO_OPT_STR_SET
 && o->ty≥ !
FIO_OPT_STR
) {

426 
	`log_îr
("O±i⁄ %†ªquúe†™árgumít\n", 
o
->
«me
);

430 
o
->
ty≥
) {

431 
FIO_OPT_STR
:

432 
FIO_OPT_STR_MULTI
: {

433 
fio_›t_°r_‚
 *
‚
 = 
o
->
cb
;

435 
	`posvÆ_s‹t
(
o
, 
posvÆ
);

437 
ªt
 = 1;

438 
i
 = 0; i < 
PARSE_MAX_VP
; i++) {

439 
vp
 = &
posvÆ
[
i
];

440 i‡(!
vp
->
ivÆ
 || vp->ival[0] == '\0')

442 
Æl_skù≥d
 = 0;

443 i‡(!
	`°∫cmp
(
vp
->
ivÆ
, 
±r
, 
	`°r_m©ch_Àn
(vp,Ötr))) {

444 
ªt
 = 0;

445 i‡(
o
->
off1
)

446 
	`vÆ_°‹e
(
ûp
, 
vp
->
ovÆ
, 
o
->
off1
, vp->
‹vÆ
, 
d©a
, o);

451 i‡(
ªt
 && !
Æl_skù≥d
)

452 
	`show_›ti⁄_vÆues
(
o
);

453 i‡(
‚
)

454 
ªt
 = 
	`‚
(
d©a
, 
±r
);

457 
FIO_OPT_STR_VAL_TIME
:

458 
is_time
 = 1;

459 
FIO_OPT_INT
:

460 
FIO_OPT_STR_VAL
: {

461 
fio_›t_°r_vÆ_‚
 *
‚
 = 
o
->
cb
;

462 
tmp
[128], *
p
;

464 
	`°∫˝y
(
tmp
, 
±r
, (tmp) - 1);

465 
p
 = 
	`°rchr
(
tmp
, ',');

466 i‡(
p
)

467 *
p
 = '\0';

469 i‡(
is_time
)

470 
ªt
 = 
	`check_°r_time
(
tmp
, &
uŒ
, 
o
->
is_£c⁄ds
);

472 
ªt
 = 
	`check_°r_byãs
(
tmp
, &
uŒ
, 
d©a
);

474 
	`d¥öt
(
FD_PARSE
, "Ñë=%d, out=%Œu\n", 
ªt
, 
uŒ
);

476 i‡(
ªt
)

479 i‡(
o
->
maxvÆ
 && 
uŒ
 > o->maxval) {

480 
	`log_îr
("max value out ofÑange: %llu"

481 " (%u max)\n", 
uŒ
, 
o
->
maxvÆ
);

484 i‡(
o
->
mövÆ
 && 
uŒ
 < o->minval) {

485 
	`log_îr
("min value out ofÑange: %llu"

486 " (%u mö)\n", 
uŒ
, 
o
->
mövÆ
);

489 i‡(
o
->
posvÆ
[0].
ivÆ
) {

490 
	`posvÆ_s‹t
(
o
, 
posvÆ
);

492 
ªt
 = 1;

493 
i
 = 0; i < 
PARSE_MAX_VP
; i++) {

494 
vp
 = &
posvÆ
[
i
];

495 i‡(!
vp
->
ivÆ
 || vp->ival[0] == '\0')

497 i‡(
vp
->
ovÆ
 =
uŒ
) {

498 
ªt
 = 0;

502 i‡(
ªt
) {

503 
	`log_îr
("fio: vÆuê%ŒuÇŸáŒowed:\n", 
uŒ
);

504 
	`show_›ti⁄_vÆues
(
o
);

509 i‡(
‚
)

510 
ªt
 = 
	`‚
(
d©a
, &
uŒ
);

512 i‡(
o
->
ty≥
 =
FIO_OPT_INT
) {

513 i‡(
fú°
)

514 
	`vÆ_°‹e
(
ûp
, 
uŒ
, 
o
->
off1
, 0, 
d©a
, o);

515 i‡(
cuº
 == 1) {

516 i‡(
o
->
off2
)

517 
	`vÆ_°‹e
(
ûp
, 
uŒ
, 
o
->
off2
, 0, 
d©a
, o);

519 i‡(
cuº
 == 2) {

520 i‡(
o
->
off3
)

521 
	`vÆ_°‹e
(
ûp
, 
uŒ
, 
o
->
off3
, 0, 
d©a
, o);

523 i‡(!
m‹e
) {

524 i‡(
cuº
 < 1) {

525 i‡(
o
->
off2
)

526 
	`vÆ_°‹e
(
ûp
, 
uŒ
, 
o
->
off2
, 0, 
d©a
, o);

528 i‡(
cuº
 < 2) {

529 i‡(
o
->
off3
)

530 
	`vÆ_°‹e
(
ûp
, 
uŒ
, 
o
->
off3
, 0, 
d©a
, o);

534 i‡(
fú°
)

535 
	`vÆ_°‹e
(
uŒp
, 
uŒ
, 
o
->
off1
, 0, 
d©a
, o);

536 i‡(!
m‹e
) {

537 i‡(
o
->
off2
)

538 
	`vÆ_°‹e
(
uŒp
, 
uŒ
, 
o
->
off2
, 0, 
d©a
, o);

544 
FIO_OPT_FLOAT_LIST
: {

545 *
˝2
;

547 i‡(
fú°
) {

552 i‡(
o
->
off2
) {

553 
ul2
 = 0;

554 
ûp
 = 
	`td_v¨
(
d©a
, 
o
, o->
off2
);

555 *
ûp
 = 
ul2
;

558 
Êp
 = 
	`td_v¨
(
d©a
, 
o
, o->
off1
);

559 
i
 = 0; i < 
o
->
maxÀn
; i++)

560 
Êp
[
i
].
u
.
f
 = 0.0;

562 i‡(
cuº
 >
o
->
maxÀn
) {

563 
	`log_îr
("theÜistÉxceeding maxÜength %d\n",

564 
o
->
maxÀn
);

567 i‡(!
	`°r_to_Êﬂt
(
±r
, &
uf
)) {

568 
	`log_îr
("nŸá flﬂtögÖoöàvÆue: %s\n", 
±r
);

571 i‡(
uf
 > 
o
->
maxÂ
) {

572 
	`log_îr
("value out ofÑange: %f"

573 " (øngêmax: %f)\n", 
uf
, 
o
->
maxÂ
);

576 i‡(
uf
 < 
o
->
möÂ
) {

577 
	`log_îr
("value out ofÑange: %f"

578 " (øngêmö: %f)\n", 
uf
, 
o
->
möÂ
);

582 
Êp
 = 
	`td_v¨
(
d©a
, 
o
, o->
off1
);

583 
Êp
[
cuº
].
u
.
f
 = 
uf
;

585 
	`d¥öt
(
FD_PARSE
, " out=%f\n", 
uf
);

592 
˝2
 = 
	`°rchr
(
±r
, '.');

593 i‡(
˝2
 !
NULL
) {

594 
Àn
 = 0;

596 *++
˝2
 != '\0' && *cp2 >= '0' && *cp2 <= '9')

597 
Àn
++;

599 i‡(
o
->
off2
) {

600 
ûp
 = 
	`td_v¨
(
d©a
, 
o
, o->
off2
);

601 i‡(
Àn
 > *
ûp
)

602 *
ûp
 = 
Àn
;

608 
FIO_OPT_STR_STORE
: {

609 
fio_›t_°r_‚
 *
‚
 = 
o
->
cb
;

611 i‡(!
	`°æí
(
±r
))

614 i‡(
o
->
off1
) {

615 
˝
 = 
	`td_v¨
(
d©a
, 
o
, o->
off1
);

616 *
˝
 = 
	`°rdup
(
±r
);

619 i‡(
‚
)

620 
ªt
 = 
	`‚
(
d©a
, 
±r
);

621 i‡(
o
->
posvÆ
[0].
ivÆ
) {

622 
	`posvÆ_s‹t
(
o
, 
posvÆ
);

624 
ªt
 = 1;

625 
i
 = 0; i < 
PARSE_MAX_VP
; i++) {

626 
vp
 = &
posvÆ
[
i
];

627 i‡(!
vp
->
ivÆ
 || vp->ivÆ[0] ='\0' || !
˝
)

629 
Æl_skù≥d
 = 0;

630 i‡(!
	`°∫cmp
(
vp
->
ivÆ
, 
±r
, 
	`°r_m©ch_Àn
(vp,Ötr))) {

631 *
ª°
;

633 
ªt
 = 0;

634 i‡(
vp
->
cb
)

635 
‚
 = 
vp
->
cb
;

636 
ª°
 = 
	`°r°r
(*
˝
 ?: 
±r
, ":");

637 i‡(
ª°
) {

638 i‡(*
˝
)

639 *
ª°
 = '\0';

640 
±r
 = 
ª°
 + 1;

642 
±r
 = 
NULL
;

648 i‡(!
Æl_skù≥d
) {

649 i‡(
ªt
 && !*
˝
)

650 
	`show_›ti⁄_vÆues
(
o
);

651 i‡(
ªt
 && *
˝
)

652 
ªt
 = 0;

653 i‡(
‚
 && 
±r
)

654 
ªt
 = 
	`‚
(
d©a
, 
±r
);

659 
FIO_OPT_RANGE
: {

660 
tmp
[128];

661 *
p1
, *
p2
;

663 
	`°∫˝y
(
tmp
, 
±r
, (tmp) - 1);

666 
p1
 = 
	`°rchr
(
tmp
, ',');

667 i‡(
p1
)

668 *
p1
 = '\0';

670 
p1
 = 
	`°rchr
(
tmp
, '-');

671 i‡(!
p1
) {

672 
p1
 = 
	`°rchr
(
tmp
, ':');

673 i‡(!
p1
) {

674 
ªt
 = 1;

679 
p2
 = 
p1
 + 1;

680 *
p1
 = '\0';

681 
p1
 = 
tmp
;

683 
ªt
 = 1;

684 i‡(!
	`check_ønge_byãs
(
p1
, &
ul1
, 
d©a
) &&

685 !
	`check_ønge_byãs
(
p2
, &
ul2
, 
d©a
)) {

686 
ªt
 = 0;

687 i‡(
ul1
 > 
ul2
) {

688 
foo
 = 
ul1
;

690 
ul1
 = 
ul2
;

691 
ul2
 = 
foo
;

694 i‡(
fú°
) {

695 
	`vÆ_°‹e
(
ûp
, 
ul1
, 
o
->
off1
, 0, 
d©a
, o);

696 
	`vÆ_°‹e
(
ûp
, 
ul2
, 
o
->
off2
, 0, 
d©a
, o);

698 i‡(
cuº
 == 1) {

699 i‡(
o
->
off3
 && o->
off4
) {

700 
	`vÆ_°‹e
(
ûp
, 
ul1
, 
o
->
off3
, 0, 
d©a
, o);

701 
	`vÆ_°‹e
(
ûp
, 
ul2
, 
o
->
off4
, 0, 
d©a
, o);

704 i‡(
cuº
 == 2) {

705 i‡(
o
->
off5
 && o->
off6
) {

706 
	`vÆ_°‹e
(
ûp
, 
ul1
, 
o
->
off5
, 0, 
d©a
, o);

707 
	`vÆ_°‹e
(
ûp
, 
ul2
, 
o
->
off6
, 0, 
d©a
, o);

710 i‡(!
m‹e
) {

711 i‡(
cuº
 < 1) {

712 i‡(
o
->
off3
 && o->
off4
) {

713 
	`vÆ_°‹e
(
ûp
, 
ul1
, 
o
->
off3
, 0, 
d©a
, o);

714 
	`vÆ_°‹e
(
ûp
, 
ul2
, 
o
->
off4
, 0, 
d©a
, o);

717 i‡(
cuº
 < 2) {

718 i‡(
o
->
off5
 && o->
off6
) {

719 
	`vÆ_°‹e
(
ûp
, 
ul1
, 
o
->
off5
, 0, 
d©a
, o);

720 
	`vÆ_°‹e
(
ûp
, 
ul2
, 
o
->
off6
, 0, 
d©a
, o);

728 
FIO_OPT_BOOL
:

729 
FIO_OPT_STR_SET
: {

730 
fio_›t_öt_‚
 *
‚
 = 
o
->
cb
;

732 i‡(
±r
)

733 
ªt
 = 
	`check_öt
(
±r
, &
û
);

734 i‡(
o
->
ty≥
 =
FIO_OPT_BOOL
)

735 
ªt
 = 1;

737 
û
 = 1;

739 
	`d¥öt
(
FD_PARSE
, "Ñë=%d, out=%d\n", 
ªt
, 
û
);

741 i‡(
ªt
)

744 i‡(
o
->
maxvÆ
 && 
û
 > () o->maxval) {

745 
	`log_îr
("max value out ofÑange: %d (%d max)\n",

746 
û
, 
o
->
maxvÆ
);

749 i‡(
o
->
mövÆ
 && 
û
 < o->minval) {

750 
	`log_îr
("min value out ofÑange: %d (%d min)\n",

751 
û
, 
o
->
mövÆ
);

755 i‡(
o
->
√g
)

756 
û
 = !il;

758 i‡(
‚
)

759 
ªt
 = 
	`‚
(
d©a
, &
û
);

761 i‡(
fú°
)

762 
	`vÆ_°‹e
(
ûp
, 
û
, 
o
->
off1
, 0, 
d©a
, o);

763 i‡(!
m‹e
) {

764 i‡(
o
->
off2
)

765 
	`vÆ_°‹e
(
ûp
, 
û
, 
o
->
off2
, 0, 
d©a
, o);

770 
FIO_OPT_DEPRECATED
:

771 
	`log_öfo
("O±i⁄ %†i†dïªˇãd\n", 
o
->
«me
);

772 
ªt
 = 1;

775 
	`log_îr
("Bad o±i⁄Åy≥ %u\n", 
o
->
ty≥
);

776 
ªt
 = 1;

779 i‡(
ªt
)

780  
ªt
;

782 i‡(
o
->
vîify
) {

783 
ªt
 = 
o
->
	`vîify
(o, 
d©a
);

784 i‡(
ªt
) {

785 
	`log_îr
("Correct format for offending option\n");

786 
	`log_îr
("%20s: %s\n", 
o
->
«me
, o->
hñp
);

787 
	`show_›ti⁄_hñp
(
o
, 1);

791  
ªt
;

792 
	}
}

794 
	$h™dÀ_›ti⁄
(
fio_›ti⁄
 *
o
, c⁄° *
__±r
, *
d©a
)

796 *
o_±r
, *
±r
, *
±r2
;

797 
ªt
, 
d⁄e
;

799 
	`d¥öt
(
FD_PARSE
, "h™dÀ_›ti⁄=%s,Öå=%s\n", 
o
->
«me
, 
__±r
);

801 
o_±r
 = 
±r
 = 
NULL
;

802 i‡(
__±r
)

803 
o_±r
 = 
±r
 = 
	`°rdup
(
__±r
);

810 
d⁄e
 = 0;

811 
ªt
 = 1;

813 
__ªt
;

815 
±r2
 = 
NULL
;

816 i‡(
±r
 &&

817 (
o
->
ty≥
 !
FIO_OPT_STR_STORE
) &&

818 (
o
->
ty≥
 !
FIO_OPT_STR
) &&

819 (
o
->
ty≥
 !
FIO_OPT_FLOAT_LIST
)) {

820 
±r2
 = 
	`°rchr
(
±r
, ',');

821 i‡(
±r2
 && *(ptr2 + 1) == '\0')

822 *
±r2
 = '\0';

823 i‡(
o
->
ty≥
 !
FIO_OPT_STR_MULTI
 && o->ty≥ !
FIO_OPT_RANGE
) {

824 i‡(!
±r2
)

825 
±r2
 = 
	`°rchr
(
±r
, ':');

826 i‡(!
±r2
)

827 
±r2
 = 
	`°rchr
(
±r
, '-');

829 } i‡(
±r
 && 
o
->
ty≥
 =
FIO_OPT_FLOAT_LIST
) {

830 
±r2
 = 
	`°rchr
(
±r
, ':');

838 
__ªt
 = 
	`__h™dÀ_›ti⁄
(
o
, 
±r
, 
d©a
, !
d⁄e
, !!
±r2
, done);

839 i‡(
ªt
)

840 
ªt
 = 
__ªt
;

842 i‡(!
±r2
)

845 
±r
 = 
±r2
 + 1;

846 
d⁄e
++;

849 i‡(
o_±r
)

850 
	`‰ì
(
o_±r
);

851  
ªt
;

852 
	}
}

854 
fio_›ti⁄
 *
	$gë_›ti⁄
(*
›t
,

855 
fio_›ti⁄
 *
›ti⁄s
, **
po°
)

857 
fio_›ti⁄
 *
o
;

858 *
ªt
;

860 
ªt
 = 
	`°rchr
(
›t
, '=');

861 i‡(
ªt
) {

862 *
po°
 = 
ªt
;

863 *
ªt
 = '\0';

864 
ªt
 = 
›t
;

865 (*
po°
)++;

866 
	`°rù_bœnk_íd
(
ªt
);

867 
o
 = 
	`föd_›ti⁄
(
›ti⁄s
, 
ªt
);

869 
o
 = 
	`föd_›ti⁄
(
›ti⁄s
, 
›t
);

870 *
po°
 = 
NULL
;

873  
o
;

874 
	}
}

876 
	$›t_cmp
(c⁄° *
p1
, c⁄° *
p2
)

878 
fio_›ti⁄
 *
o
;

879 *
s
, *
foo
;

880 
¥io1
, 
¥io2
;

882 
¥io1
 = 
¥io2
 = 0;

884 i‡(*(**)
p1
) {

885 
s
 = 
	`°rdup
(*((**Ë
p1
));

886 
o
 = 
	`gë_›ti⁄
(
s
, 
__fio_›ti⁄s
, &
foo
);

887 i‡(
o
)

888 
¥io1
 = 
o
->
¥io
;

889 
	`‰ì
(
s
);

891 i‡(*(**)
p2
) {

892 
s
 = 
	`°rdup
(*((**Ë
p2
));

893 
o
 = 
	`gë_›ti⁄
(
s
, 
__fio_›ti⁄s
, &
foo
);

894 i‡(
o
)

895 
¥io2
 = 
o
->
¥io
;

896 
	`‰ì
(
s
);

899  
¥io2
 - 
¥io1
;

900 
	}
}

902 
	$s‹t_›ti⁄s
(**
›ts
, 
fio_›ti⁄
 *
›ti⁄s
, 
num_›ts
)

904 
__fio_›ti⁄s
 = 
›ti⁄s
;

905 
	`qs‹t
(
›ts
, 
num_›ts
, (*), 
›t_cmp
);

906 
__fio_›ti⁄s
 = 
NULL
;

907 
	}
}

909 
	$∑r£_cmd_›ti⁄
(c⁄° *
›t
, c⁄° *
vÆ
,

910 
fio_›ti⁄
 *
›ti⁄s
, *
d©a
)

912 
fio_›ti⁄
 *
o
;

914 
o
 = 
	`föd_›ti⁄
(
›ti⁄s
, 
›t
);

915 i‡(!
o
) {

916 
	`log_îr
("Bad o±i⁄ <%s>\n", 
›t
);

920 i‡(!
	`h™dÀ_›ti⁄
(
o
, 
vÆ
, 
d©a
))

923 
	`log_îr
("fio: faûedÖ¨sög %s=%s\n", 
›t
, 
vÆ
);

925 
	}
}

927 
	$∑r£_›ti⁄
(*
›t
, c⁄° *
öput
,

928 
fio_›ti⁄
 *
›ti⁄s
, fio_›ti⁄ **
o
, *
d©a
,

929 
dump_cmdlöe
)

931 *
po°
;

933 i‡(!
›t
) {

934 
	`log_îr
("fio: faûedÖ¨sög %s\n", 
öput
);

935 *
o
 = 
NULL
;

939 *
o
 = 
	`gë_›ti⁄
(
›t
, 
›ti⁄s
, &
po°
);

940 i‡(!*
o
) {

941 i‡(
po°
) {

942 
Àn
 = 
	`°æí
(
›t
);

943 i‡(
›t
 + 
Àn
 + 1 !
po°
)

944 
	`memmove
(
›t
 + 
Àn
 + 1, 
po°
, 
	`°æí
(post));

945 
›t
[
Àn
] = '=';

950 i‡(
	`h™dÀ_›ti⁄
(*
o
, 
po°
, 
d©a
)) {

951 
	`log_îr
("fio: faûedÖ¨sög %s\n", 
öput
);

955 i‡(
dump_cmdlöe
) {

956 c⁄° *
dñim
;

958 i‡(!
	`°rcmp
("des¸ùti⁄", (*
o
)->
«me
))

959 
dñim
 = "\"";

961 
dñim
 = "";

963 
	`log_öfo
("--%s%s", (*
o
)->
«me
, 
po°
 ? "" : " ");

964 i‡(
po°
)

965 
	`log_öfo
("=%s%s%†", 
dñim
, 
po°
, delim);

969 
	}
}

975 
	$°rög_di°™˚
(c⁄° *
s1
, c⁄° *
s2
)

977 
s1_Àn
 = 
	`°æí
(
s1
);

978 
s2_Àn
 = 
	`°æí
(
s2
);

979 *
p
, *
q
, *
r
;

980 
i
, 
j
;

982 
p
 = 
	`mÆloc
((Ë* (
s2_Àn
 + 1));

983 
q
 = 
	`mÆloc
((Ë* (
s2_Àn
 + 1));

985 
p
[0] = 0;

986 
i
 = 1; i <
s2_Àn
; i++)

987 
p
[
i
] =Ö[i - 1] + 1;

989 
i
 = 1; i <
s1_Àn
; i++) {

990 
q
[0] = 
p
[0] + 1;

991 
j
 = 1; j <
s2_Àn
; j++) {

992 
sub
 = 
p
[
j
 - 1];

994 i‡(
s1
[
i
 - 1] !
s2
[
j
 - 1])

995 
sub
++;

997 
q
[
j
] = 
	`mö
(
p
[j] + 1, mö(q[j - 1] + 1, 
sub
));

999 
r
 = 
p
;

1000 
p
 = 
q
;

1001 
q
 = 
r
;

1004 
i
 = 
p
[
s2_Àn
];

1005 
	`‰ì
(
p
);

1006 
	`‰ì
(
q
);

1007  
i
;

1008 
	}
}

1010 
fio_›ti⁄
 *
	$föd_chûd
(
fio_›ti⁄
 *
›ti⁄s
,

1011 
fio_›ti⁄
 *
o
)

1013 
fio_›ti⁄
 *
__o
;

1015 
__o
 = 
›ti⁄s
 + 1; __o->
«me
; __o++)

1016 i‡(
__o
->
∑ª¡
 && !
	`°rcmp
(__o->∑ª¡, 
o
->
«me
))

1017  
__o
;

1019  
NULL
;

1020 
	}
}

1022 
	$__¥öt_›ti⁄
(
fio_›ti⁄
 *
o
, fio_›ti⁄ *
‹g
,

1023 
Àvñ
)

1025 
«me
[256], *
p
;

1026 
dïth
;

1028 i‡(!
o
)

1030 i‡(!
‹g
)

1031 
‹g
 = 
o
;

1033 
p
 = 
«me
;

1034 
dïth
 = 
Àvñ
;

1035 
dïth
--)

1036 
p
 +
	`•rötf
(p, "%s", " ");

1038 
	`•rötf
(
p
, "%s", 
o
->
«me
);

1040 
	`log_öfo
("%-24s: %s\n", 
«me
, 
o
->
hñp
);

1041 
	}
}

1043 
	$¥öt_›ti⁄
(
fio_›ti⁄
 *
o
)

1045 
fio_›ti⁄
 *
∑ª¡
;

1046 
fio_›ti⁄
 *
__o
;

1047 
¥öãd
;

1048 
Àvñ
;

1050 
	`__¥öt_›ti⁄
(
o
, 
NULL
, 0);

1051 
∑ª¡
 = 
o
;

1052 
Àvñ
 = 0;

1054 
Àvñ
++;

1055 
¥öãd
 = 0;

1057 (
__o
 = 
	`föd_chûd
(
o
, 
∑ª¡
)Ë!
NULL
) {

1058 
	`__¥öt_›ti⁄
(
__o
, 
o
, 
Àvñ
);

1059 
o
 = 
__o
;

1060 
¥öãd
++;

1063 
∑ª¡
 = 
o
;

1064 } 
¥öãd
);

1065 
	}
}

1067 
	$show_cmd_hñp
(
fio_›ti⁄
 *
›ti⁄s
, c⁄° *
«me
)

1069 
fio_›ti⁄
 *
o
, *
˛o£°
;

1070 
be°_di°
 = -1U;

1071 
found
 = 0;

1072 
show_Æl
 = 0;

1074 i‡(!
«me
 || !
	`°rcmp
(name, "all"))

1075 
show_Æl
 = 1;

1077 
˛o£°
 = 
NULL
;

1078 
be°_di°
 = -1;

1079 
o
 = &
›ti⁄s
[0]; o->
«me
; o++) {

1080 
m©ch
 = 0;

1082 i‡(
o
->
ty≥
 =
FIO_OPT_DEPRECATED
)

1084 i‡(!
exec_¥ofûe
 && 
o
->
¥of_«me
)

1086 i‡(
exec_¥ofûe
 && !(
o
->
¥of_«me
 && !
	`°rcmp
(exec_profile, o->prof_name)))

1089 i‡(
«me
) {

1090 i‡(!
	`°rcmp
(
«me
, 
o
->name) ||

1091 (
o
->
Æüs
 && !
	`°rcmp
(
«me
, o->alias)))

1092 
m©ch
 = 1;

1094 
di°
;

1096 
di°
 = 
	`°rög_di°™˚
(
«me
, 
o
->name);

1097 i‡(
di°
 < 
be°_di°
) {

1098 
be°_di°
 = 
di°
;

1099 
˛o£°
 = 
o
;

1104 i‡(
show_Æl
 || 
m©ch
) {

1105 
found
 = 1;

1106 i‡(
m©ch
)

1107 
	`log_öfo
("%20s: %s\n", 
o
->
«me
, o->
hñp
);

1108 i‡(
show_Æl
) {

1109 i‡(!
o
->
∑ª¡
)

1110 
	`¥öt_›ti⁄
(
o
);

1115 i‡(!
m©ch
)

1118 
	`show_›ti⁄_hñp
(
o
, 0);

1121 i‡(
found
)

1124 
	`log_îr
("Nÿsuch comm™d: %s", 
«me
);

1130 i‡(
˛o£°
 && 
be°_di°
 < 3) {

1131 
	`log_öfo
(" - showing closest match\n");

1132 
	`log_öfo
("%20s: %s\n", 
˛o£°
->
«me
, clo£°->
hñp
);

1133 
	`show_›ti⁄_hñp
(
˛o£°
, 0);

1135 
	`log_öfo
("\n");

1138 
	}
}

1143 
	$fûl_deÁu…_›ti⁄s
(*
d©a
, 
fio_›ti⁄
 *
›ti⁄s
)

1145 
fio_›ti⁄
 *
o
;

1147 
	`d¥öt
(
FD_PARSE
, "filling default options\n");

1149 
o
 = &
›ti⁄s
[0]; o->
«me
; o++)

1150 i‡(
o
->
def
)

1151 
	`h™dÀ_›ti⁄
(
o
, o->
def
, 
d©a
);

1152 
	}
}

1154 
	$›ti⁄_öô
(
fio_›ti⁄
 *
o
)

1156 i‡(
o
->
ty≥
 =
FIO_OPT_DEPRECATED
)

1158 i‡(
o
->
ty≥
 =
FIO_OPT_BOOL
) {

1159 
o
->
mövÆ
 = 0;

1160 
o
->
maxvÆ
 = 1;

1162 i‡(
o
->
ty≥
 =
FIO_OPT_INT
) {

1163 i‡(!
o
->
maxvÆ
)

1164 
o
->
maxvÆ
 = 
UINT_MAX
;

1166 i‡(
o
->
ty≥
 =
FIO_OPT_FLOAT_LIST
) {

1167 
o
->
möÂ
 = 
DBL_MIN
;

1168 
o
->
maxÂ
 = 
DBL_MAX
;

1170 i‡(
o
->
ty≥
 =
FIO_OPT_STR_SET
 && o->
def
) {

1171 
	`log_îr
("Option %s: string set option with"

1172 " deÁu… wû»Æway†bêåue\n", 
o
->
«me
);

1174 i‡(!
o
->
cb
 && !o->
off1
)

1175 
	`log_îr
("O±i⁄ %s:Çeôhî cbÇ‹ off£àgiví\n", 
o
->
«me
);

1176 i‡(!
o
->
ˇãg‹y
) {

1177 
	`log_öfo
("O±i⁄ %s:Çÿˇãg‹y deföed. SëtögÅÿmisc\n", 
o
->
«me
);

1178 
o
->
ˇãg‹y
 = 
FIO_OPT_C_GENERAL
;

1179 
o
->
group
 = 
FIO_OPT_G_INVALID
;

1181 i‡(
o
->
ty≥
 =
FIO_OPT_STR
 || o->ty≥ =
FIO_OPT_STR_STORE
 ||

1182 
o
->
ty≥
 =
FIO_OPT_STR_MULTI
)

1184 i‡(
o
->
cb
 && (o->
off1
 || o->
off2
 || o->
off3
 || o->
off4
))

1185 
	`log_îr
("O±i⁄ %s: bŸh cbánd off£àgiví\n", 
o
->
«me
);

1186 
	}
}

1192 
	$›ti⁄s_öô
(
fio_›ti⁄
 *
›ti⁄s
)

1194 
fio_›ti⁄
 *
o
;

1196 
	`d¥öt
(
FD_PARSE
, "init options\n");

1198 
o
 = &
›ti⁄s
[0]; o->
«me
; o++) {

1199 
	`›ti⁄_öô
(
o
);

1200 i‡(
o
->
övî£
)

1201 
o
->
öv_›t
 = 
	`föd_›ti⁄
(
›ti⁄s
, o->
övî£
);

1203 
	}
}

1205 
	$›ti⁄s_‰ì
(
fio_›ti⁄
 *
›ti⁄s
, *
d©a
)

1207 
fio_›ti⁄
 *
o
;

1208 **
±r
;

1210 
	`d¥öt
(
FD_PARSE
, "free options\n");

1212 
o
 = &
›ti⁄s
[0]; o->
«me
; o++) {

1213 i‡(
o
->
ty≥
 !
FIO_OPT_STR_STORE
 || !o->
off1
)

1216 
±r
 = 
	`td_v¨
(
d©a
, 
o
, o->
off1
);

1217 i‡(*
±r
) {

1218 
	`‰ì
(*
±r
);

1219 *
±r
 = 
NULL
;

1222 
	}
}

	@/home/terekhov/tmp/fio/fio/parse.h

1 #i‚de‡
FIO_PARSE_H


2 
	#FIO_PARSE_H


	)

4 
	~"Êi°.h
"

9 
	efio_›t_ty≥
 {

10 
	mFIO_OPT_INVALID
 = 0,

11 
	mFIO_OPT_STR
,

12 
	mFIO_OPT_STR_MULTI
,

13 
	mFIO_OPT_STR_VAL
,

14 
	mFIO_OPT_STR_VAL_TIME
,

15 
	mFIO_OPT_STR_STORE
,

16 
	mFIO_OPT_RANGE
,

17 
	mFIO_OPT_INT
,

18 
	mFIO_OPT_BOOL
,

19 
	mFIO_OPT_FLOAT_LIST
,

20 
	mFIO_OPT_STR_SET
,

21 
	mFIO_OPT_DEPRECATED
,

27 
	svÆue_∑ú
 {

28 c⁄° *
	mivÆ
;

29 
	movÆ
;

30 c⁄° *
	mhñp
;

31 
	m‹vÆ
;

32 *
	mcb
;

35 
	#OPT_LEN_MAX
 4096

	)

36 
	#PARSE_MAX_VP
 24

	)

41 
	sfio_›ti⁄
 {

42 c⁄° *
	m«me
;

43 c⁄° *
	m ame
;

44 c⁄° *
	mÆüs
;

45 
fio_›t_ty≥
 
	mty≥
;

46 
	moff1
;

47 
	moff2
;

48 
	moff3
;

49 
	moff4
;

50 
	moff5
;

51 
	moff6
;

52 
	mmaxvÆ
;

53 
	mmövÆ
;

54 
	mmaxÂ
;

55 
	mmöÂ
;

56 
	möãrvÆ
;

57 
	mmaxÀn
;

58 
	m√g
;

59 
	m¥io
;

60 *
	mcb
;

61 c⁄° *
	mhñp
;

62 c⁄° *
	mdef
;

63 
vÆue_∑ú
 
	mposvÆ
[
PARSE_MAX_VP
];

64 c⁄° *
	m∑ª¡
;

65 
	mhide
;

66 
	mhide_⁄_£t
;

67 c⁄° *
	mövî£
;

68 
fio_›ti⁄
 *
	möv_›t
;

69 (*
	mvîify
)(
	mfio_›ti⁄
 *, *);

70 c⁄° *
	m¥of_«me
;

71 *
	m¥of_›ts
;

72 
	mˇãg‹y
;

73 
	mgroup
;

74 *
	mgui_d©a
;

75 
	mis_£c⁄ds
;

78 (
	t°r_cb_‚
)(*, *);

80 
	`∑r£_›ti⁄
(*, c⁄° *, 
fio_›ti⁄
 *, fio_option **, *, );

81 
	`s‹t_›ti⁄s
(**, 
fio_›ti⁄
 *, );

82 
	`∑r£_cmd_›ti⁄
(c⁄° *
t
, c⁄° *
l
, 
fio_›ti⁄
 *, *);

83 
	`show_cmd_hñp
(
fio_›ti⁄
 *, const *);

84 
	`fûl_deÁu…_›ti⁄s
(*, 
fio_›ti⁄
 *);

85 
	`›ti⁄_öô
(
fio_›ti⁄
 *);

86 
	`›ti⁄s_öô
(
fio_›ti⁄
 *);

87 
	`›ti⁄s_‰ì
(
fio_›ti⁄
 *, *);

89 
	`°rù_bœnk_‰⁄t
(**);

90 
	`°rù_bœnk_íd
(*);

91 
	`°r_to_decimÆ
(const *, *, , *, );

92 
	`check_°r_byãs
(c⁄° *
p
, *
vÆ
, *
d©a
);

93 
	`check_°r_time
(c⁄° *
p
, *
vÆ
, );

94 
	`°r_to_Êﬂt
(c⁄° *
°r
, *
vÆ
);

99 (
	tfio_›t_°r_‚
)(*, const *);

100 (
	tfio_›t_°r_vÆ_‚
)(*, *);

101 (
	tfio_›t_öt_‚
)(*, *);

102 (
	tfio_›t_°r_£t_‚
)(*);

104 
	#__td_v¨
(
°¨t
, 
off£t
Ë((*Ë°¨à+ (off£t))

	)

106 
thªad_›ti⁄s
;

107 
ölöe
 *
	$td_v¨
(
thªad_›ti⁄s
 *
to
, 
fio_›ti⁄
 *
o
,

108 
off£t
)

110 i‡(
o
->
¥of_›ts
)

111  
	`__td_v¨
(
o
->
¥of_›ts
, 
off£t
);

113  
	`__td_v¨
(
to
, 
off£t
);

114 
	}
}

116 
ölöe
 
	$∑r£_is_≥r˚¡
(
vÆ
)

118  
vÆ
 <= -1ULL && val >= (-1ULL - 100ULL);

119 
	}
}

	@/home/terekhov/tmp/fio/fio/printing.c

1 
	~<gtk/gtk.h
>

2 
	~<ˇúo.h
>

4 
	~"gfio.h
"

5 
	~"ˇúo_ãxt_hñ≥rs.h
"

6 
	~"¥ötög.h
"

9 
	s¥ötög_∑ømëîs
 {

10 
gdoubÀ
 
	mwidth
, 
	mheight
, 
	mxdpi
, 
	mydpi
;

11 
GtkPrötSëtögs
 *
	m£âögs
;

12 
GtkPageSëup
 *
	m∑ge_£tup
;

13 } 
	g¥öt_∑øms
 = { 0 };

15 
	$begö_¥öt
(
GtkPrötO≥øti⁄
 *
›î©i⁄
,

16 
GtkPrötC⁄ãxt
 *
c⁄ãxt
, 
gpoöãr
 
d©a
)

18 
¥öt_∑øms
.
∑ge_£tup
 = 
	`gtk_¥öt_c⁄ãxt_gë_∑ge_£tup
(
c⁄ãxt
);

20 
¥öt_∑øms
.
width
 = 
	`gtk_¥öt_c⁄ãxt_gë_width
(
c⁄ãxt
);

21 
¥öt_∑øms
.
height
 = 
	`gtk_¥öt_c⁄ãxt_gë_height
(
c⁄ãxt
);

22 
¥öt_∑øms
.
xdpi
 = 
	`gtk_¥öt_c⁄ãxt_gë_dpi_x
(
c⁄ãxt
);

23 
¥öt_∑øms
.
ydpi
 = 
	`gtk_¥öt_c⁄ãxt_gë_dpi_y
(
c⁄ãxt
);

26 
	`gtk_¥öt_›î©i⁄_£t_n_∑ges
(
›î©i⁄
, 1);

27 
	}
}

29 
	$ªsu…s_døw_∑ge
(
GtkPrötO≥øti⁄
 *
›î©i⁄
,

30 
GtkPrötC⁄ãxt
 *
c⁄ãxt
, 
göt
 
∑ge_ƒ
,

31 
gpoöãr
 
d©a
)

33 
ˇúo_t
 *
¸
;

34 
°r
[20];

35 
x
, 
y
;

37 
¸
 = 
	`gtk_¥öt_c⁄ãxt_gë_ˇúo_c⁄ãxt
(
c⁄ãxt
);

39 
	`ˇúo_£t_sour˚_rgb
(
¸
, 0, 0, 0);

40 
	`ˇúo_£t_löe_width
(
¸
, 5.0);

41 
	`ˇúo_move_to
(
¸
, 0.0, 0.0);

42 
	`ˇúo_löe_to
(
¸
, 
¥öt_∑øms
.
width
,Öröt_∑øms.
height
);

43 
	`ˇúo_move_to
(
¸
, 0.0, 
¥öt_∑øms
.
height
);

44 
	`ˇúo_löe_to
(
¸
, 
¥öt_∑øms
.
width
, 0.0);

45 
	`ˇúo_°roke
(
¸
);

47 
x
 = 
¥öt_∑øms
.
width
 / 4.0;

48 
y
 = 
¥öt_∑øms
.
height
 / 5.0;

49 
	`•rötf
(
°r
, "(%g,%g)", 
x
, 
y
);

50 
	`døw_right_ju°ifõd_ãxt
(
¸
, "S™s", 
x
, 
y
, 12.0, 
°r
);

51 
	`ˇúo_£t_sour˚_rgb
(
¸
, 0, 0, 0);

52 
	`ˇúo_£t_löe_width
(
¸
, 2.0);

53 
	`ˇúo_move_to
(
¸
, 
x
, 
y
 - 30.0);

54 
	`ˇúo_löe_to
(
¸
, 
x
, 
y
 + 30.0);

55 
	`ˇúo_move_to
(
¸
, 
x
 - 30, 
y
);

56 
	`ˇúo_löe_to
(
¸
, 
x
 + 30, 
y
);

58 
y
 *= 4.0;

59 
x
 *= 2.0;

60 
	`•rötf
(
°r
, "(%g,%g)", 
x
, 
y
);

61 
	`døw_right_ju°ifõd_ãxt
(
¸
, "S™s", 
x
, 
y
, 12.0, 
°r
);

62 
	`ˇúo_£t_sour˚_rgb
(
¸
, 0, 0, 0);

63 
	`ˇúo_£t_löe_width
(
¸
, 2.0);

64 
	`ˇúo_move_to
(
¸
, 
x
, 
y
 - 30.0);

65 
	`ˇúo_löe_to
(
¸
, 
x
, 
y
 + 30.0);

66 
	`ˇúo_move_to
(
¸
, 
x
 - 30, 
y
);

67 
	`ˇúo_löe_to
(
¸
, 
x
 + 30, 
y
);

68 
	`ˇúo_°roke
(
¸
);

69 
	}
}

71 
	$¥ötög_îr‹_dülog
(
GtkWidgë
 *
wödow
, 
GEº‹
 *
¥öt_îr‹
)

73 
GtkWidgë
 *
îr‹_dülog
;

75 
	`¥ötf
("printing_error_dialog called\n");

76 
	`¥ötf
("îr‹ mesßgê%s\n", 
¥öt_îr‹
->
mesßge
);

77 
îr‹_dülog
 = 
	`gtk_mesßge_dülog_√w
(
	`GTK_WINDOW
(
wödow
),

78 
GTK_DIALOG_DESTROY_WITH_PARENT
, 
GTK_MESSAGE_ERROR
,

79 
GTK_BUTTONS_CLOSE
, "PrintÉrror:\n%s",

80 
¥öt_îr‹
->
mesßge
);

81 
	`g_sig«l_c⁄√˘
(
îr‹_dülog
, "response",

82 
	`G_CALLBACK
(
gtk_widgë_de°roy
), 
NULL
);

83 
	`gtk_widgë_show
(
îr‹_dülog
);

84 
	}
}

86 
	$ªsu…s_¥öt_d⁄e
(
GtkPrötO≥øti⁄
 *
›î©i⁄
,

87 
GtkPrötO≥øti⁄Resu…
 
ªsu…
, 
gpoöãr
 
d©a
)

89 
GEº‹
 *
¥öt_îr‹
;

90 
gui_íåy
 *
ge
 = 
d©a
;

92 i‡(
ªsu…
 !
GTK_PRINT_OPERATION_RESULT_ERROR
)

95 
	`gtk_¥öt_›î©i⁄_gë_îr‹
(
›î©i⁄
, &
¥öt_îr‹
);

96 
	`¥ötög_îr‹_dülog
(
ge
->
ªsu…s_wödow
, 
¥öt_îr‹
);

97 
	`g_îr‹_‰ì
(
¥öt_îr‹
);

98 
	}
}

100 
	$gfio_¥öt_ªsu…s
(
gui_íåy
 *
ge
)

102 
GtkPrötO≥øti⁄
 *
¥öt
;

103 
GtkPrötO≥øti⁄Resu…
 
ªs
;

104 
GEº‹
 *
¥öt_îr‹
;

106 
¥öt
 = 
	`gtk_¥öt_›î©i⁄_√w
();

107 i‡(
¥öt_∑øms
.
£âögs
 !
NULL
)

108 
	`gtk_¥öt_›î©i⁄_£t_¥öt_£âögs
(
¥öt
, 
¥öt_∑øms
.
£âögs
);

110 i‡(
¥öt_∑øms
.
∑ge_£tup
 !
NULL
)

111 
	`gtk_¥öt_›î©i⁄_£t_deÁu…_∑ge_£tup
(
¥öt
, 
¥öt_∑øms
.
∑ge_£tup
);

113 
	`g_sig«l_c⁄√˘
(
¥öt
, "begö_¥öt", 
	`G_CALLBACK
(
begö_¥öt
), 
NULL
);

114 
	`g_sig«l_c⁄√˘
(
¥öt
, "døw_∑ge", 
	`G_CALLBACK
(
ªsu…s_døw_∑ge
), 
NULL
);

115 
	`g_sig«l_c⁄√˘
(
¥öt
, "d⁄e", 
	`G_CALLBACK
(
ªsu…s_¥öt_d⁄e
), 
NULL
);

116 
	`gtk_¥öt_›î©i⁄_£t_Ælow_async
(
¥öt
, 
TRUE
);

117 
ªs
 = 
	`gtk_¥öt_›î©i⁄_run
(
¥öt
, 
GTK_PRINT_OPERATION_ACTION_PRINT_DIALOG
,

118 
	`GTK_WINDOW
(
ge
->
ªsu…s_wödow
), &
¥öt_îr‹
);

128 i‡(
ªs
 =
GTK_PRINT_OPERATION_RESULT_ERROR
) {

129 
	`¥ötög_îr‹_dülog
(
ge
->
ªsu…s_wödow
, 
¥öt_îr‹
);

130 
	`g_îr‹_‰ì
(
¥öt_îr‹
);

132 i‡(
ªs
 =
GTK_PRINT_OPERATION_RESULT_APPLY
) {

133 i‡(
¥öt_∑øms
.
£âögs
 !
NULL
)

134 
	`g_obje˘_uƒef
(
¥öt_∑øms
.
£âögs
);

135 
¥öt_∑øms
.
£âögs
 = 
	`g_obje˘_ªf
(
	`gtk_¥öt_›î©i⁄_gë_¥öt_£âögs
(
¥öt
));

138 
	`g_obje˘_uƒef
(
¥öt
);

139 
	}
}

	@/home/terekhov/tmp/fio/fio/printing.h

1 #i‚de‡
PRINTING_H


2 
	#PRINTING_H


	)

4 
gfio_¥öt_ªsu…s
(
gui_íåy
 *
ge
);

	@/home/terekhov/tmp/fio/fio/profile.c

1 
	~"fio.h
"

2 
	~"¥ofûe.h
"

3 
	~"debug.h
"

4 
	~"Êi°.h
"

5 
	~"›ti⁄s.h
"

7 
FLIST_HEAD
(
¥ofûe_li°
);

9 
¥ofûe_›s
 *
	$föd_¥ofûe
(c⁄° *
¥ofûe
)

11 
¥ofûe_›s
 *
›s
 = 
NULL
;

12 
Êi°_hód
 *
n
;

14 
	`Êi°_f‹_óch
(
n
, &
¥ofûe_li°
) {

15 
›s
 = 
	`Êi°_íåy
(
n
, 
¥ofûe_›s
, 
li°
);

16 i‡(!
	`°rcmp
(
¥ofûe
, 
›s
->
«me
))

19 
›s
 = 
NULL
;

22  
›s
;

23 
	}
}

25 
	$lﬂd_¥ofûe
(c⁄° *
¥ofûe
)

27 
¥ofûe_›s
 *
›s
;

29 
	`d¥öt
(
FD_PROFILE
, "lﬂdögÖrofûê'%s'\n", 
¥ofûe
);

31 
›s
 = 
	`föd_¥ofûe
(
¥ofûe
);

32 i‡(
›s
) {

33 i‡(
›s
->
	`¥ï_cmd
()) {

34 
	`log_îr
("fio:Örofûê%†¥ï faûed\n", 
¥ofûe
);

37 
	`add_job_›ts
(
›s
->
cmdlöe
, 
FIO_CLIENT_TYPE_CLI
);

41 
	`log_îr
("fio:Örofûê'%s'ÇŸ found\n", 
¥ofûe
);

43 
	}
}

45 
	$add_¥ofûe_›ti⁄s
(
¥ofûe_›s
 *
›s
)

47 
fio_›ti⁄
 *
o
;

49 i‡(!
›s
->
›ti⁄s
)

52 
o
 = 
›s
->
›ti⁄s
;

53 
o
->
«me
) {

54 
o
->
¥of_«me
 = 
›s
->
«me
;

55 
o
->
¥of_›ts
 = 
›s
->
›t_d©a
;

56 i‡(
	`add_›ti⁄
(
o
))

58 
o
++;

62 
	}
}

64 
	$ªgi°î_¥ofûe
(
¥ofûe_›s
 *
›s
)

66 
ªt
;

68 
	`d¥öt
(
FD_PROFILE
, "ªgi°îÖrofûê'%s'\n", 
›s
->
«me
);

70 
ªt
 = 
	`add_¥ofûe_›ti⁄s
(
›s
);

71 i‡(!
ªt
) {

72 
	`Êi°_add_èû
(&
›s
->
li°
, &
¥ofûe_li°
);

73 
	`add_›t_posvÆ
("¥ofûe", 
›s
->
«me
, ops->
desc
);

77 
	`övÆid©e_¥ofûe_›ti⁄s
(
›s
->
«me
);

78  
ªt
;

79 
	}
}

81 
	$uƒegi°î_¥ofûe
(
¥ofûe_›s
 *
›s
)

83 
	`d¥öt
(
FD_PROFILE
, "uƒegi°îÖrofûê'%s'\n", 
›s
->
«me
);

84 
	`Êi°_dñ
(&
›s
->
li°
);

85 
	`övÆid©e_¥ofûe_›ti⁄s
(
›s
->
«me
);

86 
	`dñ_›t_posvÆ
("¥ofûe", 
›s
->
«me
);

87 
	}
}

89 
	$¥ofûe_add_hooks
(
thªad_d©a
 *
td
)

91 
¥ofûe_›s
 *
›s
;

93 i‡(!
exec_¥ofûe
)

96 
›s
 = 
	`föd_¥ofûe
(
exec_¥ofûe
);

97 i‡(!
›s
)

100 i‡(
›s
->
io_›s
) {

101 
td
->
¥of_io_›s
 = *
›s
->
io_›s
;

102 
td
->
Êags
 |
TD_F_PROFILE_OPS
;

104 
	}
}

106 
	$¥ofûe_td_öô
(
thªad_d©a
 *
td
)

108 
¥of_io_›s
 *
›s
 = &
td
->prof_io_ops;

110 i‡(
›s
->
td_öô
)

111  
›s
->
	`td_öô
(
td
);

114 
	}
}

116 
	$¥ofûe_td_exô
(
thªad_d©a
 *
td
)

118 
¥of_io_›s
 *
›s
 = &
td
->prof_io_ops;

120 i‡(
›s
->
td_exô
)

121 
›s
->
	`td_exô
(
td
);

122 
	}
}

	@/home/terekhov/tmp/fio/fio/profile.h

1 #i‚de‡
FIO_PROFILE_H


2 
	#FIO_PROFILE_H


	)

4 
	~"Êi°.h
"

9 
	s¥of_io_›s
 {

10 (*
	mtd_öô
)(
	mthªad_d©a
 *);

11 (*
	mtd_exô
)(
	mthªad_d©a
 *);

13 (*
	mfûl_io_u_off
)(
	mthªad_d©a
 *, 
	mio_u
 *, *);

14 (*
	mfûl_io_u_size
)(
	mthªad_d©a
 *, 
	mio_u
 *, );

15 
	mfio_fûe
 *(*
	mgë_√xt_fûe
)(
	mthªad_d©a
 *);

17 (*
	mio_u_œt
)(
	mthªad_d©a
 *, 
	muöt64_t
);

20 
	s¥ofûe_›s
 {

21 
Êi°_hód
 
	mli°
;

22 
	m«me
[32];

23 
	mdesc
[64];

24 
	mÊags
;

29 
fio_›ti⁄
 *
	m›ti⁄s
;

30 *
	m›t_d©a
;

35 (*
	m¥ï_cmd
)();

40 c⁄° **
	mcmdlöe
;

42 
¥of_io_›s
 *
	mio_›s
;

45 
ªgi°î_¥ofûe
(
¥ofûe_›s
 *);

46 
uƒegi°î_¥ofûe
(
¥ofûe_›s
 *);

47 
lﬂd_¥ofûe
(const *);

48 
¥ofûe_›s
 *
föd_¥ofûe
(const *);

49 
¥ofûe_add_hooks
(
thªad_d©a
 *);

51 
¥ofûe_td_öô
(
thªad_d©a
 *);

52 
¥ofûe_td_exô
(
thªad_d©a
 *);

	@/home/terekhov/tmp/fio/fio/profiles/act.c

1 
	~"../fio.h
"

2 
	~"../¥ofûe.h
"

3 
	~"../∑r£.h
"

8 
	#R_LOAD
 2000

	)

9 
	#W_LOAD
 1000

	)

11 
	#SAMPLE_SEC
 3600

	)

13 
	sa˘_∑ss_¸ôîü
 {

14 
	mmax_u£c
;

15 
	mmax_≥rm
;

17 
	#ACT_MAX_CRIT
 3

	)

19 
a˘_∑ss_¸ôîü
 
	ga˘_∑ss
[
ACT_MAX_CRIT
] = {

21 .
max_u£c
 = 1000,

22 .
	gmax_≥rm
 = 50,

25 .
	gmax_u£c
 = 8000,

26 .
	gmax_≥rm
 = 10,

29 .
	gmax_u£c
 = 64000,

30 .
	gmax_≥rm
 = 1,

34 
	sa˘_¶i˚
 {

35 
uöt64_t
 
	mœt_buckës
[
ACT_MAX_CRIT
];

36 
uöt64_t
 
	mtŸÆ_ios
;

39 
	sa˘_run_d©a
 {

40 
fio_muãx
 *
	mmuãx
;

41 
	m≥ndög
;

43 
a˘_¶i˚
 *
	m¶i˚s
;

44 
	mƒ_¶i˚s
;

46 
a˘_run_d©a
 *
	ga˘_run_d©a
;

48 
	sa˘_¥of_d©a
 {

49 
timevÆ
 
	mßm∂e_tv
;

50 
a˘_¶i˚
 *
	m¶i˚s
;

51 
	mcur_¶i˚
;

52 
	mƒ_¶i˚s
;

55 *
	gdevi˚_«mes
;

56 
	glﬂd
;

57 
	g¥ï
;

58 
	gthªads_≥r_queue
;

59 
	gnum_ªad_blocks
;

60 
	gwrôe_size
;

61 
	gã°_duøti⁄
;

63 
	#ACT_MAX_OPTS
 128

	)

64 c⁄° *
	ga˘_›ts
[
ACT_MAX_OPTS
] = {

70 
NULL
,

72 
	g›t_idx
 = 5;

73 
	g‹g_idx
;

75 
	$a˘_add_›t
(c⁄° *
f‹m©
, ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 1, 2)));

77 
	sa˘_›ti⁄s
 {

78 
∑d
;

79 *
devi˚_«mes
;

80 
lﬂd
;

81 
¥ï
;

82 
thªads_≥r_queue
;

83 
num_ªad_blocks
;

84 
wrôe_size
;

85 
ã°_duøti⁄
;

88 
a˘_›ti⁄s
áct_options;

90 
fio_›ti⁄
 
›ti⁄s
[] = {

92 .
«me
 = "device-names",

93 .
 ame
 = "device-names",

94 .
ty≥
 = 
FIO_OPT_STR_STORE
,

95 .
off1
 = 
	`off£tof
(
a˘_›ti⁄s
, 
devi˚_«mes
),

96 .
hñp
 = "DevicesÅo use",

97 .
ˇãg‹y
 = 
FIO_OPT_C_PROFILE
,

98 .
group
 = 
FIO_OPT_G_ACT
,

101 .
«me
 = "load",

102 .
 ame
 = "Load multiplier",

103 .
ty≥
 = 
FIO_OPT_INT
,

104 .
off1
 = 
	`off£tof
(
a˘_›ti⁄s
, 
lﬂd
),

105 .
hñp
 = "ACTÜoad multipler (default 1x)",

106 .
def
 = "1",

107 .
ˇãg‹y
 = 
FIO_OPT_C_PROFILE
,

108 .
group
 = 
FIO_OPT_G_ACT
,

111 .
«me
 = "test-duration",

112 .
 ame
 = "Test duration",

113 .
ty≥
 = 
FIO_OPT_STR_VAL_TIME
,

114 .
off1
 = 
	`off£tof
(
a˘_›ti⁄s
, 
ã°_duøti⁄
),

115 .
hñp
 = "HowÜongÅheÉntireÅestÅakesÅoÑun",

116 .
def
 = "24h",

117 .
ˇãg‹y
 = 
FIO_OPT_C_PROFILE
,

118 .
group
 = 
FIO_OPT_G_ACT
,

121 .
«me
 = "threads-per-queue",

122 .
 ame
 = "Number ofÑead IOÅhreadsÖer device",

123 .
ty≥
 = 
FIO_OPT_INT
,

124 .
off1
 = 
	`off£tof
(
a˘_›ti⁄s
, 
thªads_≥r_queue
),

125 .
hñp
 = "Number ofÑead IOÅhreadsÖer device",

126 .
def
 = "8",

127 .
ˇãg‹y
 = 
FIO_OPT_C_PROFILE
,

128 .
group
 = 
FIO_OPT_G_ACT
,

131 .
«me
 = "read-req-num-512-blocks",

132 .
 ame
 = "Number of 512b blocksÅoÑead",

133 .
ty≥
 = 
FIO_OPT_INT
,

134 .
off1
 = 
	`off£tof
(
a˘_›ti⁄s
, 
num_ªad_blocks
),

135 .
hñp
 = "Number of 512b blocksÅoÑeadátÅheÅime",

136 .
def
 = "3",

137 .
ˇãg‹y
 = 
FIO_OPT_C_PROFILE
,

138 .
group
 = 
FIO_OPT_G_ACT
,

141 .
«me
 = "large-block-op-kbytes",

142 .
 ame
 = "Size ofÜarge block ops (writes)",

143 .
ty≥
 = 
FIO_OPT_INT
,

144 .
off1
 = 
	`off£tof
(
a˘_›ti⁄s
, 
wrôe_size
),

145 .
hñp
 = "Size ofÜarge block ops (writes)",

146 .
def
 = "128k",

147 .
ˇãg‹y
 = 
FIO_OPT_C_PROFILE
,

148 .
group
 = 
FIO_OPT_G_ACT
,

151 .
«me
 = "prep",

152 .
 ame
 = "Run ACTÖrepÖhase",

153 .
ty≥
 = 
FIO_OPT_STR_SET
,

154 .
off1
 = 
	`off£tof
(
a˘_›ti⁄s
, 
¥ï
),

155 .
hñp
 = "SetÅoÑun ACTÖrepÖhase",

156 .
ˇãg‹y
 = 
FIO_OPT_C_PROFILE
,

157 .
group
 = 
FIO_OPT_G_ACT
,

160 .
«me
 = 
NULL
,

162 
	}
};

164 
	$a˘_add_›t
(c⁄° *
°r
, ...)

166 
buf„r
[512];

167 
va_li°
 
¨gs
;

168 
size_t
 
Àn
;

170 i‡(
›t_idx
 =
ACT_MAX_OPTS
) {

171 
	`log_îr
("act: ACT_MAX_OPTS isÅoo small\n");

175 
	`va_°¨t
(
¨gs
, 
°r
);

176 
Àn
 = 
	`v¢¥ötf
(
buf„r
, (buf„r), 
°r
, 
¨gs
);

177 
	`va_íd
(
¨gs
);

179 i‡(
Àn
)

180 
a˘_›ts
[
›t_idx
++] = 
	`°rdup
(
buf„r
);

183 
	}
}

185 
	$a˘_add_rw
(c⁄° *
dev
, 
ªads
)

187 i‡(
	`a˘_add_›t
("«me˜˘-%s-%s", 
ªads
 ? "ªad" : "wrôe", 
dev
))

189 i‡(
	`a˘_add_›t
("fûíame=%s", 
dev
))

191 i‡(
	`a˘_add_›t
("rw=%s", 
ªads
 ? "randread" : "randwrite"))

193 i‡(
ªads
) {

194 
æﬂd
 = 
lﬂd
 * 
R_LOAD
 / 
thªads_≥r_queue
;

196 i‡(
	`a˘_add_›t
("numjobs=%u", 
thªads_≥r_queue
))

198 i‡(
	`a˘_add_›t
("øã_i›s=%u", 
æﬂd
))

200 i‡(
	`a˘_add_›t
("bs=%u", 
num_ªad_blocks
 * 512))

203 c⁄° 
rsize
 = 
wrôe_size
 / (
num_ªad_blocks
 * 512);

204 
wlﬂd
 = (
lﬂd
 * 
W_LOAD
 + 
rsize
 - 1) /Ñsize;

206 i‡(
	`a˘_add_›t
("øã_i›s=%u", 
wlﬂd
))

208 i‡(
	`a˘_add_›t
("bs=%u", 
wrôe_size
))

213 
	}
}

215 
	$a˘_add_dev_¥ï
(c⁄° *
dev
)

218 i‡(
	`a˘_add_›t
("«me˜˘-¥ï-zî€s-%s", 
dev
))

220 i‡(
	`a˘_add_›t
("fûíame=%s", 
dev
))

222 i‡(
	`a˘_add_›t
("bs=1M"))

224 i‡(
	`a˘_add_›t
("zero_buffers"))

226 i‡(
	`a˘_add_›t
("rw=write"))

230 i‡(
	`a˘_add_›t
("«me˜˘-¥ï-ß…-%s", 
dev
))

232 i‡(
	`a˘_add_›t
("stonewall"))

234 i‡(
	`a˘_add_›t
("fûíame=%s", 
dev
))

236 i‡(
	`a˘_add_›t
("bs=4k"))

238 i‡(
	`a˘_add_›t
("ioengine=libaio"))

240 i‡(
	`a˘_add_›t
("iodepth=64"))

242 i‡(
	`a˘_add_›t
("rw=randwrite"))

246 
	}
}

248 
	$a˘_add_dev
(c⁄° *
dev
)

250 i‡(
¥ï
)

251  
	`a˘_add_dev_¥ï
(
dev
);

253 i‡(
	`a˘_add_›t
("ru¡ime=%Œus", 
ã°_duøti⁄
))

255 i‡(
	`a˘_add_›t
("time_based=1"))

258 i‡(
	`a˘_add_rw
(
dev
, 1))

260 i‡(
	`a˘_add_rw
(
dev
, 0))

264 
	}
}

269 
	$a˘_¥ï_cmdlöe
()

271 i‡(!
devi˚_«mes
) {

272 
	`log_îr
("act: youÇeedÅo set IOÅarget(s) withÅhe "

277 
‹g_idx
 = 
›t_idx
;

280 *
dev
;

282 
dev
 = 
	`°r£p
(&
devi˚_«mes
, ",");

283 i‡(!
dev
)

286 i‡(
	`a˘_add_dev
(
dev
)) {

287 
	`log_îr
("act: failedádding deviceÅoÅhe mix\n");

293 
	}
}

295 
	$a˘_io_u_œt
(
thªad_d©a
 *
td
, 
uöt64_t
 
u£c
)

297 
a˘_¥of_d©a
 *
≠d
 = 
td
->
¥of_d©a
;

298 
a˘_¶i˚
 *
¶i˚
;

299 
i
, 
ªt
 = 0;

300 
≥rm
;

302 i‡(
¥ï
)

309 i‡(
≠d
->
cur_¶i˚
 >≠d->
ƒ_¶i˚s
)

312 
¶i˚
 = &
≠d
->
¶i˚s
[≠d->
cur_¶i˚
];

313 
¶i˚
->
tŸÆ_ios
++;

315 
i
 = 
ACT_MAX_CRIT
 - 1; i >= 0; i--) {

316 i‡(
u£c
 > 
a˘_∑ss
[
i
].
max_u£c
) {

317 
¶i˚
->
œt_buckës
[
i
]++;

322 i‡(
	`time_sö˚_now
(&
≠d
->
ßm∂e_tv
Ë< 
SAMPLE_SEC
)

326 
i
 = 0; i < 
ACT_MAX_CRIT
; i++) {

327 
≥rm
 = (1000.0 * 
¶i˚
->
œt_buckës
[
i
]Ë/ sli˚->
tŸÆ_ios
;

328 i‡(
≥rm
 < 
a˘_∑ss
[
i
].
max_≥rm
)

331 
	`log_îr
("a˘: %f%%Éx˚ed†∑s†¸ôîü o‡%f%%\n", 
≥rm
 / 10.0, (Ë
a˘_∑ss
[
i
].
max_≥rm
 / 10.0);

332 
ªt
 = 1;

336 
	`fio_gëtime
(&
≠d
->
ßm∂e_tv
, 
NULL
);

337 
≠d
->
cur_¶i˚
++;

338  
ªt
;

339 
	}
}

341 
	$gë_a˘_ªf
()

343 
	`fio_muãx_down
(
a˘_run_d©a
->
muãx
);

344 
a˘_run_d©a
->
≥ndög
++;

345 
	`fio_muãx_up
(
a˘_run_d©a
->
muãx
);

346 
	}
}

348 
	$show_¶i˚
(
a˘_¶i˚
 *
¶i˚
, 
¶i˚_num
)

350 
i
, 
Áûed
 = 0;

352 
	`log_öfo
(" %2u", 
¶i˚_num
);

354 
i
 = 0; i < 
ACT_MAX_CRIT
; i++) {

355 
≥rc
 = 0.0;

357 i‡(
¶i˚
->
tŸÆ_ios
)

358 
≥rc
 = 100.0 * (Ë
¶i˚
->
œt_buckës
[
i
] / (Ë¶i˚->
tŸÆ_ios
;

359 i‡((
≥rc
 * 10.0Ë>
a˘_∑ss
[
i
].
max_≥rm
)

360 
Áûed
++;

361 
	`log_öfo
("\t%2.2f", 
≥rc
);

363 
i
 = 0; i < 
ACT_MAX_CRIT
; i++) {

364 
≥rc
 = 0.0;

366 i‡(
¶i˚
->
tŸÆ_ios
)

367 
≥rc
 = 100.0 * (Ë
¶i˚
->
œt_buckës
[
i
] / (Ë¶i˚->
tŸÆ_ios
;

368 
	`log_öfo
("\t%2.2f", 
≥rc
);

370 
	`log_öfo
("\n");

372  
Áûed
;

373 
	}
}

375 
	$a˘_show_Æl_°©s
()

377 
i
, 
Áûs
 = 0;

379 
	`log_öfo
("Årans device\n");

380 
	`log_öfo
(" %%>(ms) %%>(ms)\n");

381 
	`log_öfo
(" slice");

383 
i
 = 0; i < 
ACT_MAX_CRIT
; i++)

384 
	`log_öfo
("\à%2u", 
a˘_∑ss
[
i
].
max_u£c
 / 1000);

385 
i
 = 0; i < 
ACT_MAX_CRIT
; i++)

386 
	`log_öfo
("\à%2u", 
a˘_∑ss
[
i
].
max_u£c
 / 1000);

388 
	`log_öfo
("\n");

389 
	`log_öfo
(" ----- ----- ----- ------ ----- ----- ------\n");

391 
i
 = 0; i < 
a˘_run_d©a
->
ƒ_¶i˚s
; i++)

392 
Áûs
 +
	`show_¶i˚
(&
a˘_run_d©a
->
¶i˚s
[
i
], i + 1);

394 
	`log_öfo
("\«˘:Åe° com∂ëe, devi˚(s): %s\n", 
Áûs
 ? "FAILED" : "PASSED");

395 
	}
}

397 
	$put_a˘_ªf
(
thªad_d©a
 *
td
)

399 
a˘_¥of_d©a
 *
≠d
 = 
td
->
¥of_d©a
;

400 
i
, 
¶i˚
;

402 
	`fio_muãx_down
(
a˘_run_d©a
->
muãx
);

404 i‡(!
a˘_run_d©a
->
¶i˚s
) {

405 
a˘_run_d©a
->
¶i˚s
 = 
	`ˇŒoc
(
≠d
->
ƒ_¶i˚s
, (
a˘_¶i˚
));

406 
a˘_run_d©a
->
ƒ_¶i˚s
 = 
≠d
->nr_slices;

409 
¶i˚
 = 0; sli˚ < 
≠d
->
ƒ_¶i˚s
; slice++) {

410 
a˘_¶i˚
 *
d°
 = &
a˘_run_d©a
->
¶i˚s
[
¶i˚
];

411 
a˘_¶i˚
 *
§c
 = &
≠d
->
¶i˚s
[
¶i˚
];

413 
d°
->
tŸÆ_ios
 +
§c
->total_ios;

415 
i
 = 0; i < 
ACT_MAX_CRIT
; i++)

416 
d°
->
œt_buckës
[
i
] +
§c
->lat_buckets[i];

419 i‡(!--
a˘_run_d©a
->
≥ndög
)

420 
	`a˘_show_Æl_°©s
();

422 
	`fio_muãx_up
(
a˘_run_d©a
->
muãx
);

423 
	}
}

425 
	$a˘_td_öô
(
thªad_d©a
 *
td
)

427 
a˘_¥of_d©a
 *
≠d
;

428 
ƒ_¶i˚s
;

430 
	`gë_a˘_ªf
();

432 
≠d
 = 
	`ˇŒoc
(1, (*apd));

433 
ƒ_¶i˚s
 = (
ã°_duøti⁄
 + 
SAMPLE_SEC
 - 1) / SAMPLE_SEC;

434 
≠d
->
¶i˚s
 = 
	`ˇŒoc
(
ƒ_¶i˚s
, (
a˘_¶i˚
));

435 
≠d
->
ƒ_¶i˚s
 =Çr_slices;

436 
	`fio_gëtime
(&
≠d
->
ßm∂e_tv
, 
NULL
);

437 
td
->
¥of_d©a
 = 
≠d
;

439 
	}
}

441 
	$a˘_td_exô
(
thªad_d©a
 *
td
)

443 
a˘_¥of_d©a
 *
≠d
 = 
td
->
¥of_d©a
;

445 
	`put_a˘_ªf
(
td
);

446 
	`‰ì
(
≠d
->
¶i˚s
);

447 
	`‰ì
(
≠d
);

448 
td
->
¥of_d©a
 = 
NULL
;

449 
	}
}

451 
¥of_io_›s
 
	ga˘_io_›s
 = {

452 .
td_öô
 = 
a˘_td_öô
,

453 .
	gtd_exô
 = 
a˘_td_exô
,

454 .
	gio_u_œt
 = 
a˘_io_u_œt
,

457 
¥ofûe_›s
 
	ga˘_¥ofûe
 = {

458 .
«me
 = "act",

459 .
	gdesc
 = "ACT AerospikeÜike benchmark",

460 .
	g›ti⁄s
 = 
›ti⁄s
,

461 .
	g›t_d©a
 = &
a˘_›ti⁄s
,

462 .
	g¥ï_cmd
 = 
a˘_¥ï_cmdlöe
,

463 .
	gcmdlöe
 = 
a˘_›ts
,

464 .
	gio_›s
 = &
a˘_io_›s
,

467 
fio_öô
 
	$a˘_ªgi°î
()

469 
a˘_run_d©a
 = 
	`ˇŒoc
(1, (*act_run_data));

470 
a˘_run_d©a
->
muãx
 = 
	`fio_muãx_öô
(
FIO_MUTEX_UNLOCKED
);

472 i‡(
	`ªgi°î_¥ofûe
(&
a˘_¥ofûe
))

473 
	`log_îr
("fio: failedÅoÑegisterÖrofile 'act'\n");

474 
	}
}

476 
fio_exô
 
	$a˘_uƒegi°î
()

478 
‹g_idx
 && org_idx < 
›t_idx
)

479 
	`‰ì
((*Ë
a˘_›ts
[++
‹g_idx
]);

481 
	`uƒegi°î_¥ofûe
(&
a˘_¥ofûe
);

482 
	`fio_muãx_ªmove
(
a˘_run_d©a
->
muãx
);

483 
	`‰ì
(
a˘_run_d©a
->
¶i˚s
);

484 
	`‰ì
(
a˘_run_d©a
);

485 
a˘_run_d©a
 = 
NULL
;

486 
	}
}

	@/home/terekhov/tmp/fio/fio/profiles/tiobench.c

1 
	~"../fio.h
"

2 
	~"../¥ofûe.h
"

3 
	~"../∑r£.h
"

5 
	gsize
;

6 
	glo›s
 = 1;

7 
	gbs
 = 4096;

8 
	g¡hªads
 = 1;

9 *
	gdú
;

11 
	gsz_idx
[80], 
	gbs_idx
[80], 
	glo›_idx
[80], 
	gdú_idx
[80], 
	gt_idx
[80];

13 c⁄° *
	gtb_›ts
[] = {

14 "buf„ªd=0", 
sz_idx
, 
bs_idx
, 
lo›_idx
, 
dú_idx
, 
t_idx
,

21 "«meÙ™dªad", "°⁄ewÆl", "rwÙ™dªad", 
NULL
,

24 
	stiobích_›ti⁄s
 {

25 
	m∑d
;

26 
	msize
;

27 
	mlo›s
;

28 
	mbs
;

29 
	m¡hªads
;

30 *
	mdú
;

33 
tiobích_›ti⁄s
 
	gtiobích_›ti⁄s
;

35 
fio_›ti⁄
 
	g›ti⁄s
[] = {

37 .
«me
 = "size",

38 .
	g ame
 = "Tiobench size",

39 .
	gty≥
 = 
FIO_OPT_STR_VAL
,

40 .
	goff1
 = 
off£tof
(
tiobích_›ti⁄s
, 
size
),

41 .
	ghñp
 = "Size in MB",

42 .
	gˇãg‹y
 = 
FIO_OPT_C_PROFILE
,

43 .
	ggroup
 = 
FIO_OPT_G_TIOBENCH
,

46 .
	g«me
 = "block",

47 .
	g ame
 = "Tiobench block",

48 .
	gty≥
 = 
FIO_OPT_INT
,

49 .
	goff1
 = 
off£tof
(
tiobích_›ti⁄s
, 
bs
),

50 .
	ghñp
 = "Block size in bytes",

51 .
	gdef
 = "4k",

52 .
	gˇãg‹y
 = 
FIO_OPT_C_PROFILE
,

53 .
	ggroup
 = 
FIO_OPT_G_TIOBENCH
,

56 .
	g«me
 = "numruns",

57 .
	g ame
 = "TiobenchÇumruns",

58 .
	gty≥
 = 
FIO_OPT_INT
,

59 .
	goff1
 = 
off£tof
(
tiobích_›ti⁄s
, 
lo›s
),

60 .
	ghñp
 = "Number ofÑuns",

61 .
	gˇãg‹y
 = 
FIO_OPT_C_PROFILE
,

62 .
	ggroup
 = 
FIO_OPT_G_TIOBENCH
,

65 .
	g«me
 = "dir",

66 .
	g ame
 = "Tiobench directory",

67 .
	gty≥
 = 
FIO_OPT_STR_STORE
,

68 .
	goff1
 = 
off£tof
(
tiobích_›ti⁄s
, 
dú
),

69 .
	ghñp
 = "Test directory",

70 .
	gˇãg‹y
 = 
FIO_OPT_C_PROFILE
,

71 .
	ggroup
 = 
FIO_OPT_G_TIOBENCH
,

74 .
	g«me
 = "threads",

75 .
	g ame
 = "TiobenchÅhreads",

76 .
	gty≥
 = 
FIO_OPT_INT
,

77 .
	goff1
 = 
off£tof
(
tiobích_›ti⁄s
, 
¡hªads
),

78 .
	ghñp
 = "Number of Threads",

79 .
	gˇãg‹y
 = 
FIO_OPT_C_PROFILE
,

80 .
	ggroup
 = 
FIO_OPT_G_TIOBENCH
,

83 .
	g«me
 = 
NULL
,

90 
	$tb_¥ï_cmdlöe
()

95 
size
 *= 1024 * 1024ULL;

96 i‡(
size
)

97 
	`•rötf
(
sz_idx
, "size=%Œu", 
size
);

99 
	`°r˝y
(
sz_idx
, "size=4*1024*$mb_memory");

101 
	`•rötf
(
bs_idx
, "bs=%u", 
bs
);

102 
	`•rötf
(
lo›_idx
, "lo›s=%u", 
lo›s
);

104 i‡(
dú
)

105 
	`•rötf
(
dú_idx
, "dúe˘‹y=%s", 
dú
);

107 
	`•rötf
(
dú_idx
, "directory=./");

109 
	`•rötf
(
t_idx
, "numjobs=%u", 
¡hªads
);

111 
	}
}

113 
¥ofûe_›s
 
	gtiobích_¥ofûe
 = {

114 .
«me
 = "tiobench",

115 .
	gdesc
 = "tiotest/tiobench benchmark",

116 .
	g¥ï_cmd
 = 
tb_¥ï_cmdlöe
,

117 .
	gcmdlöe
 = 
tb_›ts
,

118 .
	g›ti⁄s
 = 
›ti⁄s
,

119 .
	g›t_d©a
 = &
tiobích_›ti⁄s
,

122 
fio_öô
 
	$tiobích_ªgi°î
()

124 i‡(
	`ªgi°î_¥ofûe
(&
tiobích_¥ofûe
))

125 
	`log_îr
("fio: failedÅoÑegisterÖrofile 'tiobench'\n");

126 
	}
}

128 
fio_exô
 
	$tiobích_uƒegi°î
()

130 
	`uƒegi°î_¥ofûe
(&
tiobích_¥ofûe
);

131 
	}
}

	@/home/terekhov/tmp/fio/fio/server.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°d¨g.h
>

4 
	~<uni°d.h
>

5 
	~<limôs.h
>

6 
	~<î∫o.h
>

7 
	~<sys/pﬁl.h
>

8 
	~<sys/ty≥s.h
>

9 
	~<sys/waô.h
>

10 
	~<sys/sockë.h
>

11 
	~<sys/°©.h
>

12 
	~<sys/un.h
>

13 
	~<sys/uio.h
>

14 
	~<√töë/ö.h
>

15 
	~<¨∑/öë.h
>

16 
	~<√tdb.h
>

17 
	~<sy¶og.h
>

18 
	~<sig«l.h
>

19 #ifde‡
CONFIG_ZLIB


20 
	~<zlib.h
>

23 
	~"fio.h
"

24 
	~"£rvî.h
"

25 
	~"¸c/¸c16.h
"

26 
	~"lib/õì754.h
"

28 
	gfio_√t_p‹t
 = 
FIO_NET_PORT
;

30 
	gexô_backíd
 = 0;

32 
	g£rvî_fd
 = -1;

33 *
	gfio_£rvî_¨g
;

34 *
	gböd_sock
;

35 
sockaddr_ö
 
	gßddr_ö
;

36 
sockaddr_ö6
 
	gßddr_ö6
;

37 
	gu£_ùv6
;

38 #ifde‡
CONFIG_ZLIB


39 
	ghas_zlib
 = 1;

41 
	ghas_zlib
 = 0;

43 
	gu£_zlib
;

45 
	sfio_f‹k_ôem
 {

46 
Êi°_hód
 
	mli°
;

47 
	mexôvÆ
;

48 
	msig«l
;

49 
	mexôed
;

50 
pid_t
 
	mpid
;

53 c⁄° *
	gfio_£rvî_›s
[
FIO_NET_CMD_NR
] = {

74 c⁄° *
	$fio_£rvî_›
(
›
)

76 
buf
[32];

78 i‡(
›
 < 
FIO_NET_CMD_NR
)

79  
fio_£rvî_›s
[
›
];

81 
	`•rötf
(
buf
, "UNKNOWN/%d", 
›
);

82  
buf
;

83 
	}
}

85 
ssize_t
 
	$iov_tŸÆ_Àn
(c⁄° 
iovec
 *
iov
, 
cou¡
)

87 
ssize_t
 
ªt
 = 0;

89 
cou¡
--) {

90 
ªt
 +
iov
->
iov_Àn
;

91 
iov
++;

94  
ªt
;

95 
	}
}

97 
	$fio_£ndv_d©a
(
sk
, 
iovec
 *
iov
, 
cou¡
)

99 
ssize_t
 
tŸÆ_Àn
 = 
	`iov_tŸÆ_Àn
(
iov
, 
cou¡
);

100 
ssize_t
 
ªt
;

103 
ªt
 = 
	`wrôev
(
sk
, 
iov
, 
cou¡
);

104 i‡(
ªt
 > 0) {

105 
tŸÆ_Àn
 -
ªt
;

106 i‡(!
tŸÆ_Àn
)

109 
ªt
) {

110 i‡(
ªt
 >
iov
->
iov_Àn
) {

111 
ªt
 -
iov
->
iov_Àn
;

112 
iov
++;

115 
iov
->
iov_ba£
 +
ªt
;

116 
iov
->
iov_Àn
 -
ªt
;

117 
ªt
 = 0;

119 } i‡(!
ªt
)

121 i‡(
î∫o
 =
EAGAIN
 ||Éºnÿ=
EINTR
)

125 } !
exô_backíd
);

127 i‡(!
tŸÆ_Àn
)

130 i‡(
î∫o
)

131  -
î∫o
;

134 
	}
}

136 
	$fio_£nd_d©a
(
sk
, c⁄° *
p
, 
Àn
)

138 
iovec
 
iov
 = { .
iov_ba£
 = (*Ë
p
, .
iov_Àn
 = 
Àn
 };

140 
	`as£π
(
Àn
 <(
fio_√t_cmd
Ë+ 
FIO_SERVER_MAX_FRAGMENT_PDU
);

142  
	`fio_£ndv_d©a
(
sk
, &
iov
, 1);

143 
	}
}

145 
	$fio_ªcv_d©a
(
sk
, *
p
, 
Àn
)

148 
ªt
 = 
	`ªcv
(
sk
, 
p
, 
Àn
, 
MSG_WAITALL
);

150 i‡(
ªt
 > 0) {

151 
Àn
 -
ªt
;

152 i‡(!
Àn
)

154 
p
 +
ªt
;

156 } i‡(!
ªt
)

158 i‡(
î∫o
 =
EAGAIN
 ||Éºnÿ=
EINTR
)

162 } !
exô_backíd
);

164 i‡(!
Àn
)

168 
	}
}

170 
	$vîify_c⁄vît_cmd
(
fio_√t_cmd
 *
cmd
)

172 
uöt16_t
 
¸c
;

174 
cmd
->
cmd_¸c16
 = 
	`À16_to_˝u
(cmd->cmd_crc16);

175 
cmd
->
pdu_¸c16
 = 
	`À16_to_˝u
(cmd->pdu_crc16);

177 
¸c
 = 
	`fio_¸c16
(
cmd
, 
FIO_NET_CMD_CRC_SZ
);

178 i‡(
¸c
 !
cmd
->
cmd_¸c16
) {

179 
	`log_îr
("fio: server bad crc on command (got %x, wanted %x)\n",

180 
cmd
->
cmd_¸c16
, 
¸c
);

184 
cmd
->
vîsi⁄
 = 
	`À16_to_˝u
(cmd->version);

185 
cmd
->
›code
 = 
	`À16_to_˝u
(cmd->opcode);

186 
cmd
->
Êags
 = 
	`À32_to_˝u
(cmd->flags);

187 
cmd
->
èg
 = 
	`À64_to_˝u
(cmd->tag);

188 
cmd
->
pdu_Àn
 = 
	`À32_to_˝u
(cmd->pdu_len);

190 
cmd
->
vîsi⁄
) {

191 
FIO_SERVER_VER
:

194 
	`log_îr
("fio: bad sîvî cmd vîsi⁄ %d\n", 
cmd
->
vîsi⁄
);

198 i‡(
cmd
->
pdu_Àn
 > 
FIO_SERVER_MAX_FRAGMENT_PDU
) {

199 
	`log_îr
("fio: comm™dÖaylﬂdÅoÿœrge: %u\n", 
cmd
->
pdu_Àn
);

204 
	}
}

209 
fio_√t_cmd
 *
	$fio_√t_ªcv_cmd
(
sk
)

211 
fio_√t_cmd
 
cmd
, *
tmp
, *
cmdªt
 = 
NULL
;

212 
size_t
 
cmd_size
 = 0, 
pdu_off£t
 = 0;

213 
uöt16_t
 
¸c
;

214 
ªt
, 
fú°
 = 1;

215 *
pdu
 = 
NULL
;

218 
ªt
 = 
	`fio_ªcv_d©a
(
sk
, &
cmd
, (cmd));

219 i‡(
ªt
)

223 
ªt
 = 
	`vîify_c⁄vît_cmd
(&
cmd
);

224 i‡(
ªt
)

227 i‡(
fú°
) {

229 
cmd_size
 = (
cmd
Ë+ cmd.
pdu_Àn
 + 1;

230 
	`as£π
(!
cmdªt
);

232 
cmd_size
 +
cmd
.
pdu_Àn
;

234 i‡(
cmd_size
 / 1024 > 
FIO_SERVER_MAX_CMD_MB
 * 1024) {

235 
	`log_îr
("fio: cmd+pduÅoÿœrgê(%Œu)\n", (Ë
cmd_size
);

236 
ªt
 = 1;

240 
tmp
 = 
	`ªÆloc
(
cmdªt
, 
cmd_size
);

241 i‡(!
tmp
) {

242 
	`log_îr
("fio: server failedállocating cmd\n");

243 
ªt
 = 1;

246 
cmdªt
 = 
tmp
;

248 i‡(
fú°
)

249 
	`mem˝y
(
cmdªt
, &
cmd
, (cmd));

250 i‡(
cmdªt
->
›code
 !
cmd
.opcode) {

251 
	`log_îr
("fio: fragment opcode mismatch (%d != %d)\n",

252 
cmdªt
->
›code
, 
cmd
.opcode);

253 
ªt
 = 1;

257 i‡(!
cmd
.
pdu_Àn
)

261 
pdu
 = (*Ë
cmdªt
->
∑ylﬂd
 + 
pdu_off£t
;

262 
ªt
 = 
	`fio_ªcv_d©a
(
sk
, 
pdu
, 
cmd
.
pdu_Àn
);

263 i‡(
ªt
)

267 
¸c
 = 
	`fio_¸c16
(
pdu
, 
cmd
.
pdu_Àn
);

268 i‡(
¸c
 !
cmd
.
pdu_¸c16
) {

269 
	`log_îr
("fio: server bad crc onÖayload ");

270 
	`log_îr
("(gŸ %x, w™ãd %x)\n", 
cmd
.
pdu_¸c16
, 
¸c
);

271 
ªt
 = 1;

275 
pdu_off£t
 +
cmd
.
pdu_Àn
;

276 i‡(!
fú°
)

277 
cmdªt
->
pdu_Àn
 +
cmd
.pdu_len;

278 
fú°
 = 0;

279 } 
cmd
.
Êags
 & 
FIO_NET_CMD_F_MORE
);

281 i‡(
ªt
) {

282 
	`‰ì
(
cmdªt
);

283 
cmdªt
 = 
NULL
;

284 } i‡(
cmdªt
) {

286 i‡(
cmdªt
->
pdu_Àn
) {

287 i‡(
cmdªt
->
›code
 =
FIO_NET_CMD_TEXT
) {

288 
cmd_ãxt_pdu
 *
pdu
 = (cmd_ãxt_pdu *Ë
cmdªt
->
∑ylﬂd
;

289 *
buf
 = (*Ë
pdu
->buf;

291 
buf
[
pdu
->
buf_Àn
] = '\0';

292 } i‡(
cmdªt
->
›code
 =
FIO_NET_CMD_JOB
) {

293 
cmd_job_pdu
 *
pdu
 = (cmd_job_pdu *Ë
cmdªt
->
∑ylﬂd
;

294 *
buf
 = (*Ë
pdu
->buf;

295 
Àn
 = 
	`À32_to_˝u
(
pdu
->
buf_Àn
);

297 
buf
[
Àn
] = '\0';

302 
cmdªt
->
Êags
 &~
FIO_NET_CMD_F_MORE
;

305  
cmdªt
;

306 
	}
}

308 
	$add_ª∂y
(
uöt64_t
 
èg
, 
Êi°_hód
 *
li°
)

310 
fio_√t_cmd_ª∂y
 *
ª∂y
;

312 
ª∂y
 = (
fio_√t_cmd_ª∂y
 *Ë(
uöçå_t
Ë
èg
;

313 
	`Êi°_add_èû
(&
ª∂y
->
li°
,Üist);

314 
	}
}

316 
uöt64_t
 
	$Æloc_ª∂y
(
uöt64_t
 
èg
, 
uöt16_t
 
›code
)

318 
fio_√t_cmd_ª∂y
 *
ª∂y
;

320 
ª∂y
 = 
	`ˇŒoc
(1, (*reply));

321 
	`INIT_FLIST_HEAD
(&
ª∂y
->
li°
);

322 
	`gëtimeofday
(&
ª∂y
->
tv
, 
NULL
);

323 
ª∂y
->
ßved_èg
 = 
èg
;

324 
ª∂y
->
›code
 = opcode;

326  (
uöçå_t
Ë
ª∂y
;

327 
	}
}

329 
	$‰ì_ª∂y
(
uöt64_t
 
èg
)

331 
fio_√t_cmd_ª∂y
 *
ª∂y
;

333 
ª∂y
 = (
fio_√t_cmd_ª∂y
 *Ë(
uöçå_t
Ë
èg
;

334 
	`‰ì
(
ª∂y
);

335 
	}
}

337 
	$fio_√t_cmd_¸c_pdu
(
fio_√t_cmd
 *
cmd
, c⁄° *
pdu
)

339 
uöt32_t
 
pdu_Àn
;

341 
cmd
->
cmd_¸c16
 = 
	`__˝u_to_À16
(
	`fio_¸c16
(cmd, 
FIO_NET_CMD_CRC_SZ
));

343 
pdu_Àn
 = 
	`À32_to_˝u
(
cmd
->pdu_len);

344 
cmd
->
pdu_¸c16
 = 
	`__˝u_to_À16
(
	`fio_¸c16
(
pdu
, 
pdu_Àn
));

345 
	}
}

347 
	$fio_√t_cmd_¸c
(
fio_√t_cmd
 *
cmd
)

349 
	`fio_√t_cmd_¸c_pdu
(
cmd
, cmd->
∑ylﬂd
);

350 
	}
}

352 
	$fio_√t_£nd_cmd
(
fd
, 
uöt16_t
 
›code
, c⁄° *
buf
, 
off_t
 
size
,

353 
uöt64_t
 *
èg±r
, 
Êi°_hód
 *
li°
)

355 
fio_√t_cmd
 *
cmd
 = 
NULL
;

356 
size_t
 
this_Àn
, 
cur_Àn
 = 0;

357 
uöt64_t
 
èg
;

358 
ªt
;

360 i‡(
li°
) {

361 
	`as£π
(
èg±r
);

362 
èg
 = *
èg±r
 = 
	`Æloc_ª∂y
(*èg±r, 
›code
);

364 
èg
 = 
èg±r
 ? *tagptr : 0;

367 
this_Àn
 = 
size
;

368 i‡(
this_Àn
 > 
FIO_SERVER_MAX_FRAGMENT_PDU
)

369 
this_Àn
 = 
FIO_SERVER_MAX_FRAGMENT_PDU
;

371 i‡(!
cmd
 || 
cur_Àn
 < (*cmdË+ 
this_Àn
) {

372 i‡(
cmd
)

373 
	`‰ì
(
cmd
);

375 
cur_Àn
 = (*
cmd
Ë+ 
this_Àn
;

376 
cmd
 = 
	`mÆloc
(
cur_Àn
);

379 
	`fio_öô_√t_cmd
(
cmd
, 
›code
, 
buf
, 
this_Àn
, 
èg
);

381 i‡(
this_Àn
 < 
size
)

382 
cmd
->
Êags
 = 
	`__˝u_to_À32
(
FIO_NET_CMD_F_MORE
);

384 
	`fio_√t_cmd_¸c
(
cmd
);

386 
ªt
 = 
	`fio_£nd_d©a
(
fd
, 
cmd
, (*cmdË+ 
this_Àn
);

387 
size
 -
this_Àn
;

388 
buf
 +
this_Àn
;

389 } !
ªt
 && 
size
);

391 i‡(
li°
) {

392 i‡(
ªt
)

393 
	`‰ì_ª∂y
(
èg
);

395 
	`add_ª∂y
(
èg
, 
li°
);

398 i‡(
cmd
)

399 
	`‰ì
(
cmd
);

401  
ªt
;

402 
	}
}

404 
	$fio_√t_£nd_sim∂e_°ack_cmd
(
sk
, 
uöt16_t
 
›code
, 
uöt64_t
 
èg
)

406 
fio_√t_cmd
 
cmd
;

408 
	`fio_öô_√t_cmd
(&
cmd
, 
›code
, 
NULL
, 0, 
èg
);

409 
	`fio_√t_cmd_¸c
(&
cmd
);

411  
	`fio_£nd_d©a
(
sk
, &
cmd
, (cmd));

412 
	}
}

418 
	$fio_√t_£nd_sim∂e_cmd
(
sk
, 
uöt16_t
 
›code
, 
uöt64_t
 
èg
,

419 
Êi°_hód
 *
li°
)

421 
ªt
;

423 i‡(
li°
)

424 
èg
 = 
	`Æloc_ª∂y
—ag, 
›code
);

426 
ªt
 = 
	`fio_√t_£nd_sim∂e_°ack_cmd
(
sk
, 
›code
, 
èg
);

427 i‡(
ªt
) {

428 i‡(
li°
)

429 
	`‰ì_ª∂y
(
èg
);

431  
ªt
;

434 i‡(
li°
)

435 
	`add_ª∂y
(
èg
, 
li°
);

438 
	}
}

440 
	$fio_√t_£nd_quô
(
sk
)

442 
	`d¥öt
(
FD_NET
, "server: sending quit\n");

444  
	`fio_√t_£nd_sim∂e_cmd
(
sk
, 
FIO_NET_CMD_QUIT
, 0, 
NULL
);

445 
	}
}

447 
	$fio_√t_£nd_ack
(
sk
, 
fio_√t_cmd
 *
cmd
, 
îr‹
,

448 
sig«l
)

450 
cmd_íd_pdu
 
ïdu
;

451 
uöt64_t
 
èg
 = 0;

453 i‡(
cmd
)

454 
èg
 = 
cmd
->tag;

456 
ïdu
.
îr‹
 = 
	`__˝u_to_À32
(error);

457 
ïdu
.
sig«l
 = 
	`__˝u_to_À32
(signal);

458  
	`fio_√t_£nd_cmd
(
sk
, 
FIO_NET_CMD_STOP
, &
ïdu
, ”pdu), &
èg
, 
NULL
);

459 
	}
}

461 
	$fio_√t_£nd_°›
(
sk
, 
îr‹
, 
sig«l
)

463 
	`d¥öt
(
FD_NET
, "£rvî: sídög st› (%d, %d)\n", 
îr‹
, 
sig«l
);

464  
	`fio_√t_£nd_ack
(
sk
, 
NULL
, 
îr‹
, 
sig«l
);

465 
	}
}

467 
	$fio_£rvî_add_f‹k_ôem
(
pid_t
 
pid
, 
Êi°_hód
 *
li°
)

469 
fio_f‹k_ôem
 *
ffi
;

471 
ffi
 = 
	`mÆloc
((*ffi));

472 
ffi
->
exôvÆ
 = 0;

473 
ffi
->
sig«l
 = 0;

474 
ffi
->
exôed
 = 0;

475 
ffi
->
pid
 =Öid;

476 
	`Êi°_add_èû
(&
ffi
->
li°
,Üist);

477 
	}
}

479 
	$fio_£rvî_add_c⁄n_pid
(
Êi°_hód
 *
c⁄n_li°
, 
pid_t
 
pid
)

481 
	`d¥öt
(
FD_NET
, "£rvî: f‹ked of‡c⁄√˘i⁄ job (pid=%u)\n", (Ë
pid
);

482 
	`fio_£rvî_add_f‹k_ôem
(
pid
, 
c⁄n_li°
);

483 
	}
}

485 
	$fio_£rvî_add_job_pid
(
Êi°_hód
 *
job_li°
, 
pid_t
 
pid
)

487 
	`d¥öt
(
FD_NET
, "£rvî: f‹ked of‡job job (pid=%u)\n", (Ë
pid
);

488 
	`fio_£rvî_add_f‹k_ôem
(
pid
, 
job_li°
);

489 
	}
}

491 
	$fio_£rvî_check_f‹k_ôem
(
fio_f‹k_ôem
 *
ffi
)

493 
ªt
, 
°©us
;

495 
ªt
 = 
	`waôpid
(
ffi
->
pid
, &
°©us
, 
WNOHANG
);

496 i‡(
ªt
 < 0) {

497 i‡(
î∫o
 =
ECHILD
) {

498 
	`log_îr
("fio: c⁄√˘i⁄Öid %u dißµóªd\n", (Ë
ffi
->
pid
);

499 
ffi
->
exôed
 = 1;

501 
	`log_îr
("fio: waôpid: %s\n", 
	`°ªº‹
(
î∫o
));

502 } i‡(
ªt
 =
ffi
->
pid
) {

503 i‡(
	`WIFSIGNALED
(
°©us
)) {

504 
ffi
->
sig«l
 = 
	`WTERMSIG
(
°©us
);

505 
ffi
->
exôed
 = 1;

507 i‡(
	`WIFEXITED
(
°©us
)) {

508 i‡(
	`WEXITSTATUS
(
°©us
))

509 
ffi
->
exôvÆ
 = 
	`WEXITSTATUS
(
°©us
);

510 
ffi
->
exôed
 = 1;

513 
	}
}

515 
	$fio_£rvî_f‹k_ôem_d⁄e
(
fio_f‹k_ôem
 *
ffi
)

517 
	`d¥öt
(
FD_NET
, "pid %uÉxôed, sig=%u,ÉxôvÆ=%d\n", (Ë
ffi
->
pid
, ffi->
sig«l
, ffi->
exôvÆ
);

522 
	`fio_√t_£nd_°›
(
£rvî_fd
, 
ffi
->
exôvÆ
, ffi->
sig«l
);

523 
	`fio_√t_£nd_quô
(
£rvî_fd
);

524 
	`Êi°_dñ
(&
ffi
->
li°
);

525 
	`‰ì
(
ffi
);

526 
	}
}

528 
	$fio_£rvî_check_f‹k_ôems
(
Êi°_hód
 *
li°
)

530 
Êi°_hód
 *
íåy
, *
tmp
;

531 
fio_f‹k_ôem
 *
ffi
;

533 
	`Êi°_f‹_óch_ß„
(
íåy
, 
tmp
, 
li°
) {

534 
ffi
 = 
	`Êi°_íåy
(
íåy
, 
fio_f‹k_ôem
, 
li°
);

536 
	`fio_£rvî_check_f‹k_ôem
(
ffi
);

538 i‡(
ffi
->
exôed
)

539 
	`fio_£rvî_f‹k_ôem_d⁄e
(
ffi
);

541 
	}
}

543 
	$fio_£rvî_check_jobs
(
Êi°_hód
 *
job_li°
)

545 
	`fio_£rvî_check_f‹k_ôems
(
job_li°
);

546 
	}
}

548 
	$fio_£rvî_check_c⁄ns
(
Êi°_hód
 *
c⁄n_li°
)

550 
	`fio_£rvî_check_f‹k_ôems
(
c⁄n_li°
);

551 
	}
}

553 
	$h™dÀ_run_cmd
(
Êi°_hód
 *
job_li°
, 
fio_√t_cmd
 *
cmd
)

555 
pid_t
 
pid
;

556 
ªt
;

558 
	`£t_gíesis_time
();

560 
pid
 = 
	`f‹k
();

561 i‡(
pid
) {

562 
	`fio_£rvî_add_job_pid
(
job_li°
, 
pid
);

566 
ªt
 = 
	`fio_backíd
();

567 
	`‰ì_thªads_shm
();

568 
	`_exô
(
ªt
);

569 
	}
}

571 
	$h™dÀ_job_cmd
(
fio_√t_cmd
 *
cmd
)

573 
cmd_job_pdu
 *
pdu
 = (cmd_job_pdu *Ë
cmd
->
∑ylﬂd
;

574 *
buf
 = 
pdu
->buf;

575 
cmd_°¨t_pdu
 
•du
;

577 
pdu
->
buf_Àn
 = 
	`À32_to_˝u
(pdu->buf_len);

578 
pdu
->
˛õ¡_ty≥
 = 
	`À32_to_˝u
(pdu->client_type);

580 i‡(
	`∑r£_jobs_öi
(
buf
, 1, 0, 
pdu
->
˛õ¡_ty≥
)) {

581 
	`fio_√t_£nd_quô
(
£rvî_fd
);

585 
•du
.
jobs
 = 
	`˝u_to_À32
(
thªad_numbî
);

586 
•du
.
°©_ouçuts
 = 
	`˝u_to_À32
(
°©_numbî
);

587 
	`fio_√t_£nd_cmd
(
£rvî_fd
, 
FIO_NET_CMD_START
, &
•du
, (•du), 
NULL
, NULL);

589 
	}
}

591 
	$h™dÀ_joblöe_cmd
(
fio_√t_cmd
 *
cmd
)

593 *
pdu
 = 
cmd
->
∑ylﬂd
;

594 
cmd_sögÀ_löe_pdu
 *
c¶p
;

595 
cmd_löe_pdu
 *
˛p
;

596 
off£t
;

597 
cmd_°¨t_pdu
 
•du
;

598 **
¨gv
;

599 
i
;

601 
˛p
 = 
pdu
;

602 
˛p
->
löes
 = 
	`À16_to_˝u
(clp->lines);

603 
˛p
->
˛õ¡_ty≥
 = 
	`À16_to_˝u
(clp->client_type);

604 
¨gv
 = 
	`mÆloc
(
˛p
->
löes
 * (*));

605 
off£t
 = (*
˛p
);

607 
	`d¥öt
(
FD_NET
, "£rvî: %d comm™dÜöê¨gs\n", 
˛p
->
löes
);

609 
i
 = 0; i < 
˛p
->
löes
; i++) {

610 
c¶p
 = 
pdu
 + 
off£t
;

611 
¨gv
[
i
] = (*Ë
c¶p
->
ãxt
;

613 
off£t
 +(*
c¶p
Ë+ 
	`À16_to_˝u
(c¶p->
Àn
);

614 
	`d¥öt
(
FD_NET
, "£rvî: %d: %s\n", 
i
, 
¨gv
[i]);

617 i‡(
	`∑r£_cmd_löe
(
˛p
->
löes
, 
¨gv
, cÕ->
˛õ¡_ty≥
)) {

618 
	`fio_√t_£nd_quô
(
£rvî_fd
);

619 
	`‰ì
(
¨gv
);

623 
	`‰ì
(
¨gv
);

625 
•du
.
jobs
 = 
	`˝u_to_À32
(
thªad_numbî
);

626 
•du
.
°©_ouçuts
 = 
	`˝u_to_À32
(
°©_numbî
);

627 
	`fio_√t_£nd_cmd
(
£rvî_fd
, 
FIO_NET_CMD_START
, &
•du
, (•du), 
NULL
, NULL);

629 
	}
}

631 
	$h™dÀ_¥obe_cmd
(
fio_√t_cmd
 *
cmd
)

633 
cmd_˛õ¡_¥obe_pdu
 *
pdu
 = (cmd_˛õ¡_¥obe_pdu *Ë
cmd
->
∑ylﬂd
;

634 
cmd_¥obe_ª∂y_pdu
 
¥obe
;

635 
uöt64_t
 
èg
 = 
cmd
->tag;

637 
	`d¥öt
(
FD_NET
, "server: sendingÖrobeÑeply\n");

639 
	`mem£t
(&
¥obe
, 0, (probe));

640 
	`gëho°«me
((*Ë
¥obe
.
ho°«me
, (probe.hostname));

641 #ifde‡
CONFIG_BIG_ENDIAN


642 
¥obe
.
bigídün
 = 1;

644 
	`°∫˝y
((*Ë
¥obe
.
fio_vîsi⁄
, 
fio_vîsi⁄_°rög
, (probe.fio_version));

646 
¥obe
.
os
 = 
FIO_OS
;

647 
¥obe
.
¨ch
 = 
FIO_ARCH
;

648 
¥obe
.
bµ
 = (*);

649 
¥obe
.
˝us
 = 
	`__˝u_to_À32
(
	`˝us_⁄löe
());

654 i‡(
has_zlib
 && 
	`À64_to_˝u
(
pdu
->
Êags
Ë& 
FIO_PROBE_FLAG_ZLIB
) {

655 
¥obe
.
Êags
 = 
	`__˝u_to_À64
(
FIO_PROBE_FLAG_ZLIB
);

656 
u£_zlib
 = 1;

658 
¥obe
.
Êags
 = 0;

659 
u£_zlib
 = 0;

662  
	`fio_√t_£nd_cmd
(
£rvî_fd
, 
FIO_NET_CMD_PROBE
, &
¥obe
, ’robe), &
èg
, 
NULL
);

663 
	}
}

665 
	$h™dÀ_£nd_ëa_cmd
(
fio_√t_cmd
 *
cmd
)

667 
jobs_ëa
 *
je
;

668 
size_t
 
size
;

669 
uöt64_t
 
èg
 = 
cmd
->tag;

670 
i
;

672 i‡(!
thªad_numbî
)

675 
size
 = (*
je
Ë+ 
thªad_numbî
 * () + 1;

676 
je
 = 
	`mÆloc
(
size
);

677 
	`mem£t
(
je
, 0, 
size
);

679 i‡(!
	`ˇlc_thªad_°©us
(
je
, 1)) {

680 
	`‰ì
(
je
);

684 
	`d¥öt
(
FD_NET
, "server sending status\n");

686 
je
->
ƒ_ru¬ög
 = 
	`˝u_to_À32
(je->nr_running);

687 
je
->
ƒ_ømp
 = 
	`˝u_to_À32
(je->nr_ramp);

688 
je
->
ƒ_≥ndög
 = 
	`˝u_to_À32
(je->nr_pending);

689 
je
->
ƒ_£âög_up
 = 
	`˝u_to_À32
(je->nr_setting_up);

690 
je
->
fûes_›í
 = 
	`˝u_to_À32
(je->files_open);

692 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

693 
je
->
m_øã
[
i
] = 
	`˝u_to_À32
(je->m_rate[i]);

694 
je
->
t_øã
[
i
] = 
	`˝u_to_À32
(je->t_rate[i]);

695 
je
->
m_i›s
[
i
] = 
	`˝u_to_À32
(je->m_iops[i]);

696 
je
->
t_i›s
[
i
] = 
	`˝u_to_À32
(je->t_iops[i]);

697 
je
->
øã
[
i
] = 
	`˝u_to_À32
(je->rate[i]);

698 
je
->
i›s
[
i
] = 
	`˝u_to_À32
(je->iops[i]);

701 
je
->
ñ≠£d_£c
 = 
	`˝u_to_À64
(je->elapsed_sec);

702 
je
->
ëa_£c
 = 
	`˝u_to_À64
(je->eta_sec);

703 
je
->
ƒ_thªads
 = 
	`˝u_to_À32
(je->nr_threads);

704 
je
->
is_pow2
 = 
	`˝u_to_À32
(je->is_pow2);

705 
je
->
unô_ba£
 = 
	`˝u_to_À32
(je->unit_base);

707 
	`fio_√t_£nd_cmd
(
£rvî_fd
, 
FIO_NET_CMD_ETA
, 
je
, 
size
, &
èg
, 
NULL
);

708 
	`‰ì
(
je
);

710 
	}
}

712 
	$£nd_upd©e_job_ª∂y
(
fd
, 
uöt64_t
 
__èg
, 
îr‹
)

714 
uöt64_t
 
èg
 = 
__èg
;

715 
uöt32_t
 
pdu_îr‹
;

717 
pdu_îr‹
 = 
	`__˝u_to_À32
(
îr‹
);

718  
	`fio_√t_£nd_cmd
(
fd
, 
FIO_NET_CMD_UPDATE_JOB
, &
pdu_îr‹
, ’du_îr‹), &
èg
, 
NULL
);

719 
	}
}

721 
	$h™dÀ_upd©e_job_cmd
(
fio_√t_cmd
 *
cmd
)

723 
cmd_add_job_pdu
 *
pdu
 = (cmd_add_job_pdu *Ë
cmd
->
∑ylﬂd
;

724 
thªad_d©a
 *
td
;

725 
uöt32_t
 
äumbî
;

727 
äumbî
 = 
	`À32_to_˝u
(
pdu
->
thªad_numbî
);

729 
	`d¥öt
(
FD_NET
, "£rvî: upd©ög o±i⁄†f‹ job %u\n", 
äumbî
);

731 i‡(!
äumbî
 ||Ånumbî > 
thªad_numbî
) {

732 
	`£nd_upd©e_job_ª∂y
(
£rvî_fd
, 
cmd
->
èg
, 
ENODEV
);

736 
td
 = &
thªads
[
äumbî
 - 1];

737 
	`c⁄vît_thªad_›ti⁄s_to_˝u
(&
td
->
o
, &
pdu
->
t›
);

738 
	`£nd_upd©e_job_ª∂y
(
£rvî_fd
, 
cmd
->
èg
, 0);

740 
	}
}

742 
	$h™dÀ_comm™d
(
Êi°_hód
 *
job_li°
, 
fio_√t_cmd
 *
cmd
)

744 
ªt
;

746 
	`d¥öt
(
FD_NET
, "server: got op [%s],Ödu=%u,Åag=%llx\n",

747 
	`fio_£rvî_›
(
cmd
->
›code
), cmd->
pdu_Àn
,

748 (Ë
cmd
->
èg
);

750 
cmd
->
›code
) {

751 
FIO_NET_CMD_QUIT
:

752 
	`fio_ãrmö©e_thªads
(
TERMINATE_ALL
);

754 
FIO_NET_CMD_EXIT
:

755 
exô_backíd
 = 1;

757 
FIO_NET_CMD_JOB
:

758 
ªt
 = 
	`h™dÀ_job_cmd
(
cmd
);

760 
FIO_NET_CMD_JOBLINE
:

761 
ªt
 = 
	`h™dÀ_joblöe_cmd
(
cmd
);

763 
FIO_NET_CMD_PROBE
:

764 
ªt
 = 
	`h™dÀ_¥obe_cmd
(
cmd
);

766 
FIO_NET_CMD_SEND_ETA
:

767 
ªt
 = 
	`h™dÀ_£nd_ëa_cmd
(
cmd
);

769 
FIO_NET_CMD_RUN
:

770 
ªt
 = 
	`h™dÀ_run_cmd
(
job_li°
, 
cmd
);

772 
FIO_NET_CMD_UPDATE_JOB
:

773 
ªt
 = 
	`h™dÀ_upd©e_job_cmd
(
cmd
);

776 
	`log_îr
("fio: unknow¿›code: %s\n", 
	`fio_£rvî_›
(
cmd
->
›code
));

777 
ªt
 = 1;

780  
ªt
;

781 
	}
}

783 
	$h™dÀ_c⁄√˘i⁄
(
sk
)

785 
fio_√t_cmd
 *
cmd
 = 
NULL
;

786 
	`FLIST_HEAD
(
job_li°
);

787 
ªt
 = 0;

789 
	`ª£t_fio_°©e
();

790 
£rvî_fd
 = 
sk
;

793 !
exô_backíd
) {

794 
pﬁlfd
 
pfd
 = {

795 .
fd
 = 
sk
,

796 .
evíts
 = 
POLLIN
,

799 
ªt
 = 0;

801 
timeout
 = 1000;

803 i‡(!
	`Êi°_em±y
(&
job_li°
))

804 
timeout
 = 100;

806 
ªt
 = 
	`pﬁl
(&
pfd
, 1, 
timeout
);

807 i‡(
ªt
 < 0) {

808 i‡(
î∫o
 =
EINTR
)

810 
	`log_îr
("fio:Öﬁl: %s\n", 
	`°ªº‹
(
î∫o
));

812 } i‡(!
ªt
) {

813 
	`fio_£rvî_check_jobs
(&
job_li°
);

817 i‡(
pfd
.
ªvíts
 & 
POLLIN
)

819 i‡(
pfd
.
ªvíts
 & (
POLLERR
|
POLLHUP
)) {

820 
ªt
 = 1;

823 } !
exô_backíd
);

825 
	`fio_£rvî_check_jobs
(&
job_li°
);

827 i‡(
ªt
 < 0)

830 
cmd
 = 
	`fio_√t_ªcv_cmd
(
sk
);

831 i‡(!
cmd
) {

832 
ªt
 = -1;

836 
ªt
 = 
	`h™dÀ_comm™d
(&
job_li°
, 
cmd
);

837 i‡(
ªt
)

840 
	`‰ì
(
cmd
);

841 
cmd
 = 
NULL
;

844 i‡(
cmd
)

845 
	`‰ì
(
cmd
);

847 
	`˛o£
(
sk
);

848 
	`_exô
(
ªt
);

849 
	}
}

851 
	$ac˚±_lo›
(
li°í_sk
)

853 
sockaddr_ö
 
addr
;

854 
sockaddr_ö6
 
addr6
;

855 
sockÀn_t
 
Àn
 = 
u£_ùv6
 ? (
addr6
Ë: (
addr
);

856 
pﬁlfd
 
pfd
;

857 
ªt
 = 0, 
sk
, 
exôvÆ
 = 0;

858 
	`FLIST_HEAD
(
c⁄n_li°
);

860 
	`d¥öt
(
FD_NET
, "serverÉnterácceptÜoop\n");

862 
	`fio_£t_fd_n⁄blockög
(
li°í_sk
, "server");

864 !
exô_backíd
) {

865 c⁄° *
‰om
;

866 
buf
[64];

867 
pid_t
 
pid
;

869 
pfd
.
fd
 = 
li°í_sk
;

870 
pfd
.
evíts
 = 
POLLIN
;

872 
timeout
 = 1000;

874 i‡(!
	`Êi°_em±y
(&
c⁄n_li°
))

875 
timeout
 = 100;

877 
ªt
 = 
	`pﬁl
(&
pfd
, 1, 
timeout
);

878 i‡(
ªt
 < 0) {

879 i‡(
î∫o
 =
EINTR
)

881 
	`log_îr
("fio:Öﬁl: %s\n", 
	`°ªº‹
(
î∫o
));

883 } i‡(!
ªt
) {

884 
	`fio_£rvî_check_c⁄ns
(&
c⁄n_li°
);

888 i‡(
pfd
.
ªvíts
 & 
POLLIN
)

890 } !
exô_backíd
);

892 
	`fio_£rvî_check_c⁄ns
(&
c⁄n_li°
);

894 i‡(
exô_backíd
 || 
ªt
 < 0)

897 i‡(
u£_ùv6
)

898 
sk
 = 
	`ac˚±
(
li°í_sk
, (
sockaddr
 *Ë&
addr6
, &
Àn
);

900 
sk
 = 
	`ac˚±
(
li°í_sk
, (
sockaddr
 *Ë&
addr
, &
Àn
);

902 i‡(
sk
 < 0) {

903 
	`log_îr
("fio:ác˚±: %s\n", 
	`°ªº‹
(
î∫o
));

907 i‡(
u£_ùv6
)

908 
‰om
 = 
	`öë_¡›
(
AF_INET6
, (
sockaddr
 *Ë&
addr6
.
sö6_addr
, 
buf
, (buf));

910 
‰om
 = 
	`öë_¡›
(
AF_INET
, (
sockaddr
 *Ë&
addr
.
sö_addr
, 
buf
, (buf));

912 
	`d¥öt
(
FD_NET
, "£rvî: c⁄√˘ from %s\n", 
‰om
);

914 
pid
 = 
	`f‹k
();

915 i‡(
pid
) {

916 
	`˛o£
(
sk
);

917 
	`fio_£rvî_add_c⁄n_pid
(&
c⁄n_li°
, 
pid
);

922 
	`h™dÀ_c⁄√˘i⁄
(
sk
);

925  
exôvÆ
;

926 
	}
}

928 
	$fio_£rvî_ãxt_ouçut
(
Àvñ
, c⁄° *
buf
, 
size_t
 
Àn
)

930 
cmd_ãxt_pdu
 *
pdu
;

931 
éí
;

932 
timevÆ
 
tv
;

934 i‡(
£rvî_fd
 == -1)

935  
	`log_loˇl_buf
(
buf
, 
Àn
);

937 
éí
 = (*
pdu
Ë+ 
Àn
;

938 
pdu
 = 
	`mÆloc
(
éí
);

940 
pdu
->
Àvñ
 = 
	`__˝u_to_À32
(level);

941 
pdu
->
buf_Àn
 = 
	`__˝u_to_À32
(
Àn
);

943 
	`gëtimeofday
(&
tv
, 
NULL
);

944 
pdu
->
log_£c
 = 
	`__˝u_to_À64
(
tv
.
tv_£c
);

945 
pdu
->
log_u£c
 = 
	`__˝u_to_À64
(
tv
.
tv_u£c
);

947 
	`mem˝y
(
pdu
->
buf
, buf, 
Àn
);

949 
	`fio_√t_£nd_cmd
(
£rvî_fd
, 
FIO_NET_CMD_TEXT
, 
pdu
, 
éí
, 
NULL
, NULL);

950 
	`‰ì
(
pdu
);

951  
Àn
;

952 
	}
}

954 
	$c⁄vît_io_°©
(
io_°©
 *
d°
, io_°© *
§c
)

956 
d°
->
max_vÆ
 = 
	`˝u_to_À64
(
§c
->max_val);

957 
d°
->
mö_vÆ
 = 
	`˝u_to_À64
(
§c
->min_val);

958 
d°
->
ßm∂es
 = 
	`˝u_to_À64
(
§c
->samples);

963 
d°
->
món
.
u
.
i
 = 
	`__˝u_to_À64
(
	`fio_doubÀ_to_uöt64
(
§c
->món.u.
f
));

964 
d°
->
S
.
u
.
i
 = 
	`__˝u_to_À64
(
	`fio_doubÀ_to_uöt64
(
§c
->S.u.
f
));

965 
	}
}

967 
	$c⁄vît_gs
(
group_run_°©s
 *
d°
, group_run_°©†*
§c
)

969 
i
;

971 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

972 
d°
->
max_run
[
i
] = 
	`˝u_to_À64
(
§c
->max_run[i]);

973 
d°
->
mö_run
[
i
] = 
	`˝u_to_À64
(
§c
->min_run[i]);

974 
d°
->
max_bw
[
i
] = 
	`˝u_to_À64
(
§c
->max_bw[i]);

975 
d°
->
mö_bw
[
i
] = 
	`˝u_to_À64
(
§c
->min_bw[i]);

976 
d°
->
io_kb
[
i
] = 
	`˝u_to_À64
(
§c
->io_kb[i]);

977 
d°
->
agg
[
i
] = 
	`˝u_to_À64
(
§c
->agg[i]);

980 
d°
->
kb_ba£
 = 
	`˝u_to_À32
(
§c
->kb_base);

981 
d°
->
unô_ba£
 = 
	`˝u_to_À32
(
§c
->unit_base);

982 
d°
->
groupid
 = 
	`˝u_to_À32
(
§c
->groupid);

983 
d°
->
unifõd_rw_ªp
 = 
	`˝u_to_À32
(
§c
->unified_rw_rep);

984 
	}
}

990 
	$fio_£rvî_£nd_ts
(
thªad_°©
 *
ts
, 
group_run_°©s
 *
rs
)

992 
cmd_ts_pdu
 
p
;

993 
i
, 
j
;

995 
	`d¥öt
(
FD_NET
, "server sendingÉnd stats\n");

997 
	`mem£t
(&
p
, 0, (p));

999 
	`°∫˝y
(
p
.
ts
.
«me
,Ås->«me, 
FIO_JOBNAME_SIZE
 - 1);

1000 
	`°∫˝y
(
p
.
ts
.
vîr‹
,Ås->vîr‹, 
FIO_VERROR_SIZE
 - 1);

1001 
	`°∫˝y
(
p
.
ts
.
des¸ùti⁄
,Ås->des¸ùti⁄, 
FIO_JOBDESC_SIZE
 - 1);

1003 
p
.
ts
.
îr‹
 = 
	`˝u_to_À32
(ts->error);

1004 
p
.
ts
.
thªad_numbî
 = 
	`˝u_to_À32
(ts->thread_number);

1005 
p
.
ts
.
groupid
 = 
	`˝u_to_À32
(ts->groupid);

1006 
p
.
ts
.
pid
 = 
	`˝u_to_À32
(ts->pid);

1007 
p
.
ts
.
membîs
 = 
	`˝u_to_À32
(ts->members);

1008 
p
.
ts
.
unifõd_rw_ªp
 = 
	`˝u_to_À32
(ts->unified_rw_rep);

1010 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

1011 
	`c⁄vît_io_°©
(&
p
.
ts
.
˛©_°©
[
i
], &ts->clat_stat[i]);

1012 
	`c⁄vît_io_°©
(&
p
.
ts
.
¶©_°©
[
i
], &ts->slat_stat[i]);

1013 
	`c⁄vît_io_°©
(&
p
.
ts
.
œt_°©
[
i
], &ts->lat_stat[i]);

1014 
	`c⁄vît_io_°©
(&
p
.
ts
.
bw_°©
[
i
], &ts->bw_stat[i]);

1017 
p
.
ts
.
u§_time
 = 
	`˝u_to_À64
(ts->usr_time);

1018 
p
.
ts
.
sys_time
 = 
	`˝u_to_À64
(ts->sys_time);

1019 
p
.
ts
.
˘x
 = 
	`˝u_to_À64
(ts->ctx);

1020 
p
.
ts
.
möf
 = 
	`˝u_to_À64
(ts->minf);

1021 
p
.
ts
.
majf
 = 
	`˝u_to_À64
(ts->majf);

1022 
p
.
ts
.
˛©_≥r˚¡ûes
 = 
	`˝u_to_À64
(ts->clat_percentiles);

1024 
i
 = 0; i < 
FIO_IO_U_LIST_MAX_LEN
; i++) {

1025 
fio_Â64_t
 *
§c
 = &
ts
->
≥r˚¡ûe_li°
[
i
];

1026 
fio_Â64_t
 *
d°
 = &
p
.
ts
.
≥r˚¡ûe_li°
[
i
];

1028 
d°
->
u
.
i
 = 
	`__˝u_to_À64
(
	`fio_doubÀ_to_uöt64
(
§c
->u.
f
));

1031 
i
 = 0; i < 
FIO_IO_U_MAP_NR
; i++) {

1032 
p
.
ts
.
io_u_m≠
[
i
] = 
	`˝u_to_À32
(ts->io_u_map[i]);

1033 
p
.
ts
.
io_u_submô
[
i
] = 
	`˝u_to_À32
(ts->io_u_submit[i]);

1034 
p
.
ts
.
io_u_com∂ëe
[
i
] = 
	`˝u_to_À32
(ts->io_u_complete[i]);

1037 
i
 = 0; i < 
FIO_IO_U_LAT_U_NR
; i++) {

1038 
p
.
ts
.
io_u_œt_u
[
i
] = 
	`˝u_to_À32
(ts->io_u_lat_u[i]);

1039 
p
.
ts
.
io_u_œt_m
[
i
] = 
	`˝u_to_À32
(ts->io_u_lat_m[i]);

1042 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++)

1043 
j
 = 0; j < 
FIO_IO_U_PLAT_NR
; j++)

1044 
p
.
ts
.
io_u_∂©
[
i
][
j
] = 
	`˝u_to_À32
(ts->io_u_plat[i][j]);

1046 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

1047 
p
.
ts
.
tŸÆ_io_u
[
i
] = 
	`˝u_to_À64
(ts->total_io_u[i]);

1048 
p
.
ts
.
sh‹t_io_u
[
i
] = 
	`˝u_to_À64
(ts->short_io_u[i]);

1051 
p
.
ts
.
tŸÆ_submô
 = 
	`˝u_to_À64
(ts->total_submit);

1052 
p
.
ts
.
tŸÆ_com∂ëe
 = 
	`˝u_to_À64
(ts->total_complete);

1054 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

1055 
p
.
ts
.
io_byãs
[
i
] = 
	`˝u_to_À64
(ts->io_bytes[i]);

1056 
p
.
ts
.
ru¡ime
[
i
] = 
	`˝u_to_À64
(ts->runtime[i]);

1059 
p
.
ts
.
tŸÆ_run_time
 = 
	`˝u_to_À64
(ts->total_run_time);

1060 
p
.
ts
.
c⁄töue_⁄_îr‹
 = 
	`˝u_to_À16
(ts->continue_on_error);

1061 
p
.
ts
.
tŸÆ_îr_cou¡
 = 
	`˝u_to_À64
(ts->total_err_count);

1062 
p
.
ts
.
fú°_îr‹
 = 
	`˝u_to_À32
(ts->first_error);

1063 
p
.
ts
.
kb_ba£
 = 
	`˝u_to_À32
(ts->kb_base);

1064 
p
.
ts
.
unô_ba£
 = 
	`˝u_to_À32
(ts->unit_base);

1066 
p
.
ts
.
œãncy_dïth
 = 
	`˝u_to_À32
(ts->latency_depth);

1067 
p
.
ts
.
œãncy_èrgë
 = 
	`˝u_to_À64
(ts->latency_target);

1068 
p
.
ts
.
œãncy_wödow
 = 
	`˝u_to_À64
(ts->latency_window);

1069 
p
.
ts
.
œãncy_≥r˚¡ûe
.
u
.
i
 = 
	`__˝u_to_À64
(
	`fio_doubÀ_to_uöt64
—s->œãncy_≥r˚¡ûe.u.
f
));

1071 
	`c⁄vît_gs
(&
p
.
rs
,Ñs);

1073 
	`fio_√t_£nd_cmd
(
£rvî_fd
, 
FIO_NET_CMD_TS
, &
p
, ’), 
NULL
, NULL);

1074 
	}
}

1076 
	$fio_£rvî_£nd_gs
(
group_run_°©s
 *
rs
)

1078 
group_run_°©s
 
gs
;

1080 
	`d¥öt
(
FD_NET
, "server sending groupÑun stats\n");

1082 
	`c⁄vît_gs
(&
gs
, 
rs
);

1083 
	`fio_√t_£nd_cmd
(
£rvî_fd
, 
FIO_NET_CMD_GS
, &
gs
, (gs), 
NULL
, NULL);

1084 
	}
}

1086 
	$c⁄vît_agg
(
disk_utû_agg
 *
d°
, disk_utû_agg *
§c
)

1088 
i
;

1090 
i
 = 0; i < 2; i++) {

1091 
d°
->
ios
[
i
] = 
	`˝u_to_À32
(
§c
->ios[i]);

1092 
d°
->
mîges
[
i
] = 
	`˝u_to_À32
(
§c
->merges[i]);

1093 
d°
->
£˘‹s
[
i
] = 
	`˝u_to_À64
(
§c
->sectors[i]);

1094 
d°
->
ticks
[
i
] = 
	`˝u_to_À32
(
§c
->ticks[i]);

1097 
d°
->
io_ticks
 = 
	`˝u_to_À32
(
§c
->io_ticks);

1098 
d°
->
time_ö_queue
 = 
	`˝u_to_À32
(
§c
->time_in_queue);

1099 
d°
->
¶avecou¡
 = 
	`˝u_to_À32
(
§c
->slavecount);

1100 
d°
->
max_utû
.
u
.
i
 = 
	`__˝u_to_À64
(
	`fio_doubÀ_to_uöt64
(
§c
->max_utû.u.
f
));

1101 
	}
}

1103 
	$c⁄vît_dus
(
disk_utû_°©
 *
d°
, disk_utû_°© *
§c
)

1105 
i
;

1107 
d°
->
«me
[
FIO_DU_NAME_SZ
 - 1] = '\0';

1108 
	`°∫˝y
((*Ë
d°
->
«me
, (*Ë
§c
->«me, 
FIO_DU_NAME_SZ
 - 1);

1110 
i
 = 0; i < 2; i++) {

1111 
d°
->
s
.
ios
[
i
] = 
	`˝u_to_À32
(
§c
->s.ios[i]);

1112 
d°
->
s
.
mîges
[
i
] = 
	`˝u_to_À32
(
§c
->s.merges[i]);

1113 
d°
->
s
.
£˘‹s
[
i
] = 
	`˝u_to_À64
(
§c
->s.sectors[i]);

1114 
d°
->
s
.
ticks
[
i
] = 
	`˝u_to_À32
(
§c
->s.ticks[i]);

1117 
d°
->
s
.
io_ticks
 = 
	`˝u_to_À32
(
§c
->s.io_ticks);

1118 
d°
->
s
.
time_ö_queue
 = 
	`˝u_to_À32
(
§c
->s.time_in_queue);

1119 
d°
->
s
.
m£c
 = 
	`˝u_to_À64
(
§c
->s.msec);

1120 
	}
}

1122 
	$fio_£rvî_£nd_du
()

1124 
disk_utû
 *
du
;

1125 
Êi°_hód
 *
íåy
;

1126 
cmd_du_pdu
 
pdu
;

1128 
	`d¥öt
(
FD_NET
, "£rvî: sídög disk_utû %d\n", !
	`Êi°_em±y
(&
disk_li°
));

1130 
	`mem£t
(&
pdu
, 0, (pdu));

1132 
	`Êi°_f‹_óch
(
íåy
, &
disk_li°
) {

1133 
du
 = 
	`Êi°_íåy
(
íåy
, 
disk_utû
, 
li°
);

1135 
	`c⁄vît_dus
(&
pdu
.
dus
, &
du
->dus);

1136 
	`c⁄vît_agg
(&
pdu
.
agg
, &
du
->agg);

1138 
	`fio_√t_£nd_cmd
(
£rvî_fd
, 
FIO_NET_CMD_DU
, &
pdu
, ’du), 
NULL
, NULL);

1140 
	}
}

1145 
	$fio_£nd_cmd_ext_pdu
(
sk
, 
uöt16_t
 
›code
, c⁄° *
buf
,

1146 
off_t
 
size
, 
uöt64_t
 
èg
, 
uöt32_t
 
Êags
)

1148 
fio_√t_cmd
 
cmd
;

1149 
iovec
 
iov
[2];

1151 
iov
[0].
iov_ba£
 = (*Ë&
cmd
;

1152 
iov
[0].
iov_Àn
 = (
cmd
);

1153 
iov
[1].
iov_ba£
 = (*Ë
buf
;

1154 
iov
[1].
iov_Àn
 = 
size
;

1156 
	`__fio_öô_√t_cmd
(&
cmd
, 
›code
, 
size
, 
èg
);

1157 
cmd
.
Êags
 = 
	`__˝u_to_À32
(flags);

1158 
	`fio_√t_cmd_¸c_pdu
(&
cmd
, 
buf
);

1160  
	`fio_£ndv_d©a
(
sk
, 
iov
, 2);

1161 
	}
}

1163 
	$fio_£nd_iﬁog_gz
(
cmd_iﬁog_pdu
 *
pdu
, 
io_log
 *
log
)

1165 
ªt
 = 0;

1166 #ifde‡
CONFIG_ZLIB


1167 
z_°ªam
 
°ªam
;

1168 *
out_pdu
;

1175 
out_pdu
 = 
	`mÆloc
(
FIO_SERVER_MAX_FRAGMENT_PDU
);

1177 
°ªam
.
zÆloc
 = 
Z_NULL
;

1178 
°ªam
.
z‰ì
 = 
Z_NULL
;

1179 
°ªam
.
›aque
 = 
Z_NULL
;

1181 i‡(
	`deÊ©eInô
(&
°ªam
, 
Z_DEFAULT_COMPRESSION
Ë!
Z_OK
) {

1182 
ªt
 = 1;

1183 
îr
;

1186 
°ªam
.
√xt_ö
 = (*Ë
log
->log;

1187 
°ªam
.
avaû_ö
 = 
log
->
ƒ_ßm∂es
 * (
io_ßm∂e
);

1190 
this_Àn
, 
Êags
 = 0;

1191 
ªt
;

1193 
°ªam
.
avaû_out
 = 
FIO_SERVER_MAX_FRAGMENT_PDU
;

1194 
°ªam
.
√xt_out
 = 
out_pdu
;

1195 
ªt
 = 
	`deÊ©e
(&
°ªam
, 
Z_FINISH
);

1197 i‡(
ªt
 < 0)

1198 
îr_zlib
;

1200 
this_Àn
 = 
FIO_SERVER_MAX_FRAGMENT_PDU
 - 
°ªam
.
avaû_out
;

1202 i‡(
°ªam
.
avaû_ö
)

1203 
Êags
 = 
FIO_NET_CMD_F_MORE
;

1205 
ªt
 = 
	`fio_£nd_cmd_ext_pdu
(
£rvî_fd
, 
FIO_NET_CMD_IOLOG
,

1206 
out_pdu
, 
this_Àn
, 0, 
Êags
);

1207 i‡(
ªt
)

1208 
îr_zlib
;

1209 } 
°ªam
.
avaû_ö
);

1211 
îr_zlib
:

1212 
	`deÊ©eEnd
(&
°ªam
);

1213 
îr
:

1214 
	`‰ì
(
out_pdu
);

1216  
ªt
;

1217 
	}
}

1219 
	$fio_£nd_iﬁog
(
thªad_d©a
 *
td
, 
io_log
 *
log
, c⁄° *
«me
)

1221 
cmd_iﬁog_pdu
 
pdu
;

1222 
i
, 
ªt
 = 0;

1224 
pdu
.
thªad_numbî
 = 
	`˝u_to_À32
(
td
->thread_number);

1225 
pdu
.
ƒ_ßm∂es
 = 
	`__˝u_to_À32
(
log
->nr_samples);

1226 
pdu
.
log_ty≥
 = 
	`˝u_to_À32
(
log
->log_type);

1227 
pdu
.
com¥es£d
 = 
	`˝u_to_À32
(
u£_zlib
);

1229 
	`°∫˝y
((*Ë
pdu
.
«me
,Çame, 
FIO_NET_NAME_MAX
);

1230 
pdu
.
«me
[
FIO_NET_NAME_MAX
 - 1] = '\0';

1232 
i
 = 0; i < 
log
->
ƒ_ßm∂es
; i++) {

1233 
io_ßm∂e
 *
s
 = &
log
->log[
i
];

1235 
s
->
time
 = 
	`˝u_to_À64
(s->time);

1236 
s
->
vÆ
 = 
	`˝u_to_À64
(s->val);

1237 
s
->
ddú
 = 
	`˝u_to_À32
(s->ddir);

1238 
s
->
bs
 = 
	`˝u_to_À32
(s->bs);

1244 
ªt
 = 
	`fio_£nd_cmd_ext_pdu
(
£rvî_fd
, 
FIO_NET_CMD_IOLOG
, &
pdu
,

1245 (
pdu
), 0, 
FIO_NET_CMD_F_MORE
);

1246 i‡(
ªt
)

1247  
ªt
;

1252 i‡(
u£_zlib
)

1253  
	`fio_£nd_iﬁog_gz
(&
pdu
, 
log
);

1255  
	`fio_£nd_cmd_ext_pdu
(
£rvî_fd
, 
FIO_NET_CMD_IOLOG
, 
log
->log,

1256 
log
->
ƒ_ßm∂es
 * (
io_ßm∂e
), 0, 0);

1257 
	}
}

1259 
	$fio_£rvî_£nd_add_job
(
thªad_d©a
 *
td
)

1261 
cmd_add_job_pdu
 
pdu
;

1263 
	`mem£t
(&
pdu
, 0, (pdu));

1264 
pdu
.
thªad_numbî
 = 
	`˝u_to_À32
(
td
->thread_number);

1265 
pdu
.
groupid
 = 
	`˝u_to_À32
(
td
->groupid);

1266 
	`c⁄vît_thªad_›ti⁄s_to_√t
(&
pdu
.
t›
, &
td
->
o
);

1268 
	`fio_√t_£nd_cmd
(
£rvî_fd
, 
FIO_NET_CMD_ADD_JOB
, &
pdu
, ’du), 
NULL
, NULL);

1269 
	}
}

1271 
	$fio_£rvî_£nd_°¨t
(
thªad_d©a
 *
td
)

1273 
	`as£π
(
£rvî_fd
 != -1);

1275 
	`fio_√t_£nd_sim∂e_cmd
(
£rvî_fd
, 
FIO_NET_CMD_SERVER_START
, 0, 
NULL
);

1276 
	}
}

1278 
	$fio_öô_£rvî_ù
()

1280 
sockaddr
 *
addr
;

1281 
sockÀn_t
 
sockÀn
;

1282 
buf
[80];

1283 c⁄° *
°r
;

1284 
sk
, 
›t
;

1286 i‡(
u£_ùv6
)

1287 
sk
 = 
	`sockë
(
AF_INET6
, 
SOCK_STREAM
, 0);

1289 
sk
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0);

1291 i‡(
sk
 < 0) {

1292 
	`log_îr
("fio: sockë: %s\n", 
	`°ªº‹
(
î∫o
));

1296 
›t
 = 1;

1297 i‡(
	`£tsock›t
(
sk
, 
SOL_SOCKET
, 
SO_REUSEADDR
, (*)&
›t
, (opt)) < 0) {

1298 
	`log_îr
("fio: sësock›t: %s\n", 
	`°ªº‹
(
î∫o
));

1299 
	`˛o£
(
sk
);

1302 #ifde‡
SO_REUSEPORT


1303 i‡(
	`£tsock›t
(
sk
, 
SOL_SOCKET
, 
SO_REUSEPORT
, &
›t
, (opt)) < 0) {

1304 
	`log_îr
("fio: sësock›t: %s\n", 
	`°ªº‹
(
î∫o
));

1305 
	`˛o£
(
sk
);

1310 i‡(
u£_ùv6
) {

1311 c⁄° *
§c
 = &
ßddr_ö6
.
sö6_addr
;

1313 
addr
 = (
sockaddr
 *Ë&
ßddr_ö6
;

1314 
sockÀn
 = (
ßddr_ö6
);

1315 
ßddr_ö6
.
sö6_Ámûy
 = 
AF_INET6
;

1316 
°r
 = 
	`öë_¡›
(
AF_INET6
, 
§c
, 
buf
, (buf));

1318 c⁄° *
§c
 = &
ßddr_ö
.
sö_addr
;

1320 
addr
 = (
sockaddr
 *Ë&
ßddr_ö
;

1321 
sockÀn
 = (
ßddr_ö
);

1322 
ßddr_ö
.
sö_Ámûy
 = 
AF_INET
;

1323 
°r
 = 
	`öë_¡›
(
AF_INET
, 
§c
, 
buf
, (buf));

1326 i‡(
	`böd
(
sk
, 
addr
, 
sockÀn
) < 0) {

1327 
	`log_îr
("fio: böd: %s\n", 
	`°ªº‹
(
î∫o
));

1328 
	`log_öfo
("fio: faûed wôh IPv%¯%s\n", 
u£_ùv6
 ? '6' : '4', 
°r
);

1329 
	`˛o£
(
sk
);

1333  
sk
;

1334 
	}
}

1336 
	$fio_öô_£rvî_sock
()

1338 
sockaddr_un
 
addr
;

1339 
sockÀn_t
 
Àn
;

1340 
mode_t
 
mode
;

1341 
sk
;

1343 
sk
 = 
	`sockë
(
AF_UNIX
, 
SOCK_STREAM
, 0);

1344 i‡(
sk
 < 0) {

1345 
	`log_îr
("fio: sockë: %s\n", 
	`°ªº‹
(
î∫o
));

1349 
mode
 = 
	`umask
(000);

1351 
	`mem£t
(&
addr
, 0, (addr));

1352 
addr
.
sun_Ámûy
 = 
AF_UNIX
;

1353 
	`°∫˝y
(
addr
.
sun_∑th
, 
böd_sock
, (addr.sun_path) - 1);

1355 
Àn
 = (
addr
.
sun_Ámûy
Ë+ 
	`°æí
(
böd_sock
) + 1;

1357 i‡(
	`böd
(
sk
, (
sockaddr
 *Ë&
addr
, 
Àn
) < 0) {

1358 
	`log_îr
("fio: böd: %s\n", 
	`°ªº‹
(
î∫o
));

1359 
	`˛o£
(
sk
);

1363 
	`umask
(
mode
);

1364  
sk
;

1365 
	}
}

1367 
	$fio_öô_£rvî_c⁄√˘i⁄
()

1369 
böd_°r
[128];

1370 
sk
;

1372 
	`d¥öt
(
FD_NET
, "starting server\n");

1374 i‡(!
böd_sock
)

1375 
sk
 = 
	`fio_öô_£rvî_ù
();

1377 
sk
 = 
	`fio_öô_£rvî_sock
();

1379 i‡(
sk
 < 0)

1380  
sk
;

1382 
	`mem£t
(
böd_°r
, 0, (bind_str));

1384 i‡(!
böd_sock
) {

1385 *
p
, 
p‹t
[16];

1386 c⁄° *
§c
;

1387 
af
;

1389 i‡(
u£_ùv6
) {

1390 
af
 = 
AF_INET6
;

1391 
§c
 = &
ßddr_ö6
.
sö6_addr
;

1393 
af
 = 
AF_INET
;

1394 
§c
 = &
ßddr_ö
.
sö_addr
;

1397 
p
 = (*Ë
	`öë_¡›
(
af
, 
§c
, 
böd_°r
, (bind_str));

1399 
	`•rötf
(
p‹t
, ",%u", 
fio_√t_p‹t
);

1400 i‡(
p
)

1401 
	`°rˇt
(
p
, 
p‹t
);

1403 
	`°∫˝y
(
böd_°r
, 
p‹t
, (bind_str) - 1);

1405 
	`°∫˝y
(
böd_°r
, 
böd_sock
, (bind_str) - 1);

1407 
	`log_öfo
("fio: sîvîÜi°íög o¿%s\n", 
böd_°r
);

1409 i‡(
	`li°í
(
sk
, 0) < 0) {

1410 
	`log_îr
("fio:Üi°í: %s\n", 
	`°ªº‹
(
î∫o
));

1411 
	`˛o£
(
sk
);

1415  
sk
;

1416 
	}
}

1418 
	$fio_£rvî_∑r£_ho°
(c⁄° *
ho°
, 
ùv6
, 
ö_addr
 *
öp
,

1419 
ö6_addr
 *
öp6
)

1422 
ªt
 = 0;

1424 i‡(
ùv6
)

1425 
ªt
 = 
	`öë_±⁄
(
AF_INET6
, 
ho°
, 
öp6
);

1427 
ªt
 = 
	`öë_±⁄
(
AF_INET
, 
ho°
, 
öp
);

1429 i‡(
ªt
 != 1) {

1430 
addröfo
 
höts
, *
ªs
;

1432 
	`mem£t
(&
höts
, 0, (hints));

1433 
höts
.
ai_Ámûy
 = 
ùv6
 ? 
AF_INET6
 : 
AF_INET
;

1434 
höts
.
ai_sockty≥
 = 
SOCK_STREAM
;

1436 
ªt
 = 
	`gëaddröfo
(
ho°
, 
NULL
, &
höts
, &
ªs
);

1437 i‡(
ªt
) {

1438 
	`log_îr
("fio: faûedÅÿªsﬁvê<%s> (%s)\n", 
ho°
,

1439 
	`gai_°ªº‹
(
ªt
));

1443 i‡(
ùv6
)

1444 
	`mem˝y
(
öp6
, &((
sockaddr_ö6
 *Ë
ªs
->
ai_addr
)->
sö6_addr
, (*inp6));

1446 
	`mem˝y
(
öp
, &((
sockaddr_ö
 *Ë
ªs
->
ai_addr
)->
sö_addr
, (*inp));

1448 
ªt
 = 1;

1449 
	`‰ìaddröfo
(
ªs
);

1452  !(
ªt
 == 1);

1453 
	}
}

1467 
	$fio_£rvî_∑r£_°rög
(c⁄° *
°r
, **
±r
, *
is_sock
,

1468 *
p‹t
, 
ö_addr
 *
öp
,

1469 
ö6_addr
 *
öp6
, *
ùv6
)

1471 c⁄° *
ho°
 = 
°r
;

1472 *
p‹ç
;

1473 
Õ‹t
 = 0;

1475 *
±r
 = 
NULL
;

1476 *
is_sock
 = 0;

1477 *
p‹t
 = 
fio_√t_p‹t
;

1478 *
ùv6
 = 0;

1480 i‡(!
	`°∫cmp
(
°r
, "sock:", 5)) {

1481 *
±r
 = 
	`°rdup
(
°r
 + 5);

1482 *
is_sock
 = 1;

1490 i‡(!
	`°∫cmp
(
ho°
, "ip:", 3))

1491 
ho°
 += 3;

1492 i‡(!
	`°∫cmp
(
ho°
, "ip4:", 4))

1493 
ho°
 += 4;

1494 i‡(!
	`°∫cmp
(
ho°
, "ip6:", 4)) {

1495 
ho°
 += 4;

1496 *
ùv6
 = 1;

1497 } i‡(
ho°
[0] == ':') {

1499 
ho°
++;

1500 
Õ‹t
 = 
	`©oi
(
ho°
);

1501 i‡(!
Õ‹t
 ||Üport > 65535) {

1502 
	`log_îr
("fio: bad sîvîÖ‹à%u\n", 
Õ‹t
);

1506 *
p‹t
 = 
Õ‹t
;

1513 i‡(!
Õ‹t
) {

1514 
p‹ç
 = 
	`°rchr
(
ho°
, ',');

1515 i‡(
p‹ç
) {

1516 *
p‹ç
 = '\0';

1517 
p‹ç
++;

1518 
Õ‹t
 = 
	`©oi
(
p‹ç
);

1519 i‡(!
Õ‹t
 ||Üport > 65535) {

1520 
	`log_îr
("fio: bad sîvîÖ‹à%u\n", 
Õ‹t
);

1526 i‡(
Õ‹t
)

1527 *
p‹t
 = 
Õ‹t
;

1529 i‡(!
	`°æí
(
ho°
))

1532 *
±r
 = 
	`°rdup
(
ho°
);

1534 i‡(
	`fio_£rvî_∑r£_ho°
(*
±r
, *
ùv6
, 
öp
, 
öp6
)) {

1535 
	`‰ì
(*
±r
);

1536 *
±r
 = 
NULL
;

1540 i‡(*
p‹t
 == 0)

1541 *
p‹t
 = 
fio_√t_p‹t
;

1544 
	}
}

1558 
	$fio_h™dÀ_£rvî_¨g
()

1560 
p‹t
 = 
fio_√t_p‹t
;

1561 
is_sock
, 
ªt
 = 0;

1563 
ßddr_ö
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(
INADDR_ANY
);

1565 i‡(!
fio_£rvî_¨g
)

1566 
out
;

1568 
ªt
 = 
	`fio_£rvî_∑r£_°rög
(
fio_£rvî_¨g
, &
böd_sock
, &
is_sock
,

1569 &
p‹t
, &
ßddr_ö
.
sö_addr
,

1570 &
ßddr_ö6
.
sö6_addr
, &
u£_ùv6
);

1572 i‡(!
is_sock
 && 
böd_sock
) {

1573 
	`‰ì
(
böd_sock
);

1574 
böd_sock
 = 
NULL
;

1577 
out
:

1578 
fio_√t_p‹t
 = 
p‹t
;

1579 
ßddr_ö
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

1580 
ßddr_ö6
.
sö6_p‹t
 = 
	`ht⁄s
(
p‹t
);

1581  
ªt
;

1582 
	}
}

1584 
	$sig_öt
(
sig
)

1586 i‡(
böd_sock
)

1587 
	`u∆ök
(
böd_sock
);

1588 
	}
}

1590 
	$£t_sig_h™dÀrs
()

1592 
siga˘i⁄
 
a˘
;

1594 
	`mem£t
(&
a˘
, 0, (act));

1595 
a˘
.
ß_h™dÀr
 = 
sig_öt
;

1596 
a˘
.
ß_Êags
 = 
SA_RESTART
;

1597 
	`siga˘i⁄
(
SIGINT
, &
a˘
, 
NULL
);

1598 
	}
}

1600 
	$fio_£rvî
()

1602 
sk
, 
ªt
;

1604 
	`d¥öt
(
FD_NET
, "starting server\n");

1606 i‡(
	`fio_h™dÀ_£rvî_¨g
())

1609 
sk
 = 
	`fio_öô_£rvî_c⁄√˘i⁄
();

1610 i‡(
sk
 < 0)

1613 
	`£t_sig_h™dÀrs
();

1615 
ªt
 = 
	`ac˚±_lo›
(
sk
);

1617 
	`˛o£
(
sk
);

1619 i‡(
fio_£rvî_¨g
) {

1620 
	`‰ì
(
fio_£rvî_¨g
);

1621 
fio_£rvî_¨g
 = 
NULL
;

1623 i‡(
böd_sock
)

1624 
	`‰ì
(
böd_sock
);

1626  
ªt
;

1627 
	}
}

1629 
	$fio_£rvî_gŸ_sig«l
(
sig«l
)

1631 i‡(
sig«l
 =
SIGPIPE
)

1632 
£rvî_fd
 = -1;

1634 
	`log_öfo
("\nfio:Åîmö©ög o¿sig«»%d\n", 
sig«l
);

1635 
exô_backíd
 = 1;

1637 
	}
}

1639 
	$check_exi°ög_pidfûe
(c⁄° *
pidfûe
)

1641 
°©
 
sb
;

1642 
buf
[16];

1643 
pid_t
 
pid
;

1644 
FILE
 *
f
;

1646 i‡(
	`°©
(
pidfûe
, &
sb
))

1649 
f
 = 
	`f›í
(
pidfûe
, "r");

1650 i‡(!
f
)

1653 i‡(
	`‰ód
(
buf
, 
sb
.
°_size
, 1, 
f
) <= 0) {

1654 
	`f˛o£
(
f
);

1657 
	`f˛o£
(
f
);

1659 
pid
 = 
	`©oi
(
buf
);

1660 i‡(
	`kûl
(
pid
, 
SIGCONT
) < 0)

1661  
î∫o
 !
ESRCH
;

1664 
	}
}

1666 
	$wrôe_pid
(
pid_t
 
pid
, c⁄° *
pidfûe
)

1668 
FILE
 *
Âid
;

1670 
Âid
 = 
	`f›í
(
pidfûe
, "w");

1671 i‡(!
Âid
) {

1672 
	`log_îr
("fio: faûed o≥nögÖid fûê%s\n", 
pidfûe
);

1676 
	`Ârötf
(
Âid
, "%u\n", (Ë
pid
);

1677 
	`f˛o£
(
Âid
);

1679 
	}
}

1684 
	$fio_°¨t_£rvî
(*
pidfûe
)

1686 
pid_t
 
pid
;

1687 
ªt
;

1689 #i‡
	`deföed
(
WIN32
)

1690 
WSADATA
 
wsd
;

1691 
	`WSASèπup
(
	`MAKEWORD
(2, 2), &
wsd
);

1694 i‡(!
pidfûe
)

1695  
	`fio_£rvî
();

1697 i‡(
	`check_exi°ög_pidfûe
(
pidfûe
)) {

1698 
	`log_îr
("fio:Öidfile %sÉxistsánd serveráppearsálive\n",

1699 
pidfûe
);

1700 
	`‰ì
(
pidfûe
);

1704 
pid
 = 
	`f‹k
();

1705 i‡(
pid
 < 0) {

1706 
	`log_îr
("fio: faûed sîvî f‹k: %s", 
	`°ªº‹
(
î∫o
));

1707 
	`‰ì
(
pidfûe
);

1709 } i‡(
pid
) {

1710 
ªt
 = 
	`wrôe_pid
(
pid
, 
pidfûe
);

1712 
	`‰ì
(
pidfûe
);

1713 
	`exô
(
ªt
);

1716 
	`£tsid
();

1717 
	`›ílog
("fio", 
LOG_NDELAY
|
LOG_NOWAIT
|
LOG_PID
, 
LOG_USER
);

1718 
log_sy¶og
 = 1;

1719 
	`˛o£
(
STDIN_FILENO
);

1720 
	`˛o£
(
STDOUT_FILENO
);

1721 
	`˛o£
(
STDERR_FILENO
);

1722 
f_out
 = 
NULL
;

1723 
f_îr
 = 
NULL
;

1725 
ªt
 = 
	`fio_£rvî
();

1727 
	`˛o£log
();

1728 
	`u∆ök
(
pidfûe
);

1729 
	`‰ì
(
pidfûe
);

1730  
ªt
;

1731 
	}
}

1733 
	$fio_£rvî_£t_¨g
(c⁄° *
¨g
)

1735 
fio_£rvî_¨g
 = 
	`°rdup
(
¨g
);

1736 
	}
}

	@/home/terekhov/tmp/fio/fio/server.h

1 #i‚de‡
FIO_SERVER_H


2 
	#FIO_SERVER_H


	)

4 
	~<öây≥s.h
>

5 
	~<°rög.h
>

6 
	~<sys/time.h
>

7 
	~<√töë/ö.h
>

9 
	~"°©.h
"

10 
	~"os/os.h
"

11 
	~"diskutû.h
"

13 
	#FIO_NET_PORT
 8765

	)

18 
	sfio_√t_cmd
 {

19 
uöt16_t
 
	mvîsi⁄
;

20 
uöt16_t
 
	m›code
;

21 
uöt32_t
 
	mÊags
;

22 
uöt64_t
 
	mèg
;

23 
uöt32_t
 
	mpdu_Àn
;

28 
uöt16_t
 
	mcmd_¸c16
;

29 
uöt16_t
 
	mpdu_¸c16
;

30 
uöt8_t
 
	m∑ylﬂd
[];

33 
	sfio_√t_cmd_ª∂y
 {

34 
Êi°_hód
 
	mli°
;

35 
timevÆ
 
	mtv
;

36 
uöt64_t
 
	mßved_èg
;

37 
uöt16_t
 
	m›code
;

41 
	mFIO_SERVER_VER
 = 34,

43 
	mFIO_SERVER_MAX_FRAGMENT_PDU
 = 1024,

44 
	mFIO_SERVER_MAX_CMD_MB
 = 2048,

46 
	mFIO_NET_CMD_QUIT
 = 1,

47 
	mFIO_NET_CMD_EXIT
 = 2,

48 
	mFIO_NET_CMD_JOB
 = 3,

49 
	mFIO_NET_CMD_JOBLINE
 = 4,

50 
	mFIO_NET_CMD_TEXT
 = 5,

51 
	mFIO_NET_CMD_TS
 = 6,

52 
	mFIO_NET_CMD_GS
 = 7,

53 
	mFIO_NET_CMD_SEND_ETA
 = 8,

54 
	mFIO_NET_CMD_ETA
 = 9,

55 
	mFIO_NET_CMD_PROBE
 = 10,

56 
	mFIO_NET_CMD_START
 = 11,

57 
	mFIO_NET_CMD_STOP
 = 12,

58 
	mFIO_NET_CMD_DU
 = 13,

59 
	mFIO_NET_CMD_SERVER_START
 = 14,

60 
	mFIO_NET_CMD_ADD_JOB
 = 15,

61 
	mFIO_NET_CMD_RUN
 = 16,

62 
	mFIO_NET_CMD_IOLOG
 = 17,

63 
	mFIO_NET_CMD_UPDATE_JOB
 = 18,

64 
	mFIO_NET_CMD_NR
 = 19,

66 
	mFIO_NET_CMD_F_MORE
 = 1UL << 0,

69 
	mFIO_NET_CMD_CRC_SZ
 = (
fio_√t_cmd
) -

70 2 * (
uöt16_t
),

72 
	mFIO_NET_NAME_MAX
 = 256,

74 
	mFIO_NET_CLIENT_TIMEOUT
 = 5000,

76 
	mFIO_PROBE_FLAG_ZLIB
 = 1UL << 0,

79 
	scmd_ts_pdu
 {

80 
thªad_°©
 
	mts
;

81 
group_run_°©s
 
	mrs
;

84 
	scmd_du_pdu
 {

85 
disk_utû_°©
 
	mdus
;

86 
disk_utû_agg
 
	magg
;

89 
	scmd_˛õ¡_¥obe_pdu
 {

90 
uöt64_t
 
	mÊags
;

93 
	scmd_¥obe_ª∂y_pdu
 {

94 
uöt8_t
 
	mho°«me
[64];

95 
uöt8_t
 
	mbigídün
;

96 
uöt8_t
 
	mfio_vîsi⁄
[32];

97 
uöt8_t
 
	mos
;

98 
uöt8_t
 
	m¨ch
;

99 
uöt8_t
 
	mbµ
;

100 
uöt32_t
 
	m˝us
;

101 
uöt64_t
 
	mÊags
;

104 
	scmd_sögÀ_löe_pdu
 {

105 
uöt16_t
 
	mÀn
;

106 
uöt8_t
 
	mãxt
[];

109 
	scmd_löe_pdu
 {

110 
uöt16_t
 
	mlöes
;

111 
uöt16_t
 
	m˛õ¡_ty≥
;

112 
cmd_sögÀ_löe_pdu
 
	m›ti⁄s
[];

115 
	scmd_job_pdu
 {

116 
uöt32_t
 
	mbuf_Àn
;

117 
uöt32_t
 
	m˛õ¡_ty≥
;

118 
uöt8_t
 
	mbuf
[0];

121 
	scmd_°¨t_pdu
 {

122 
uöt32_t
 
	mjobs
;

123 
uöt32_t
 
	m°©_ouçuts
;

126 
	scmd_íd_pdu
 {

127 
uöt32_t
 
	mîr‹
;

128 
uöt32_t
 
	msig«l
;

131 
	scmd_add_job_pdu
 {

132 
uöt32_t
 
	mthªad_numbî
;

133 
uöt32_t
 
	mgroupid
;

134 
thªad_›ti⁄s_∑ck
 
	mt›
;

137 
	scmd_ãxt_pdu
 {

138 
uöt32_t
 
	mÀvñ
;

139 
uöt32_t
 
	mbuf_Àn
;

140 
uöt64_t
 
	mlog_£c
;

141 
uöt64_t
 
	mlog_u£c
;

142 
uöt8_t
 
	mbuf
[0];

145 
	scmd_iﬁog_pdu
 {

146 
uöt32_t
 
	mthªad_numbî
;

147 
uöt32_t
 
	mƒ_ßm∂es
;

148 
uöt32_t
 
	mlog_ty≥
;

149 
uöt32_t
 
	mcom¥es£d
;

150 
uöt8_t
 
	m«me
[
FIO_NET_NAME_MAX
];

151 
io_ßm∂e
 
	mßm∂es
[0];

154 
fio_°¨t_£rvî
(*);

155 
fio_£rvî_ãxt_ouçut
(, c⁄° *, 
size_t
);

156 
fio_√t_£nd_cmd
(, 
uöt16_t
, c⁄° *, 
off_t
, 
uöt64_t
 *, 
Êi°_hód
 *);

157 
fio_√t_£nd_sim∂e_cmd
(, 
uöt16_t
, 
uöt64_t
, 
Êi°_hód
 *);

158 
fio_£rvî_£t_¨g
(const *);

159 
fio_£rvî_∑r£_°rög
(c⁄° *, **, *, *, 
ö_addr
 *, 
ö6_addr
 *, *);

160 
fio_£rvî_∑r£_ho°
(c⁄° *, , 
ö_addr
 *, 
ö6_addr
 *);

161 c⁄° *
fio_£rvî_›
();

162 
fio_£rvî_gŸ_sig«l
();

164 
	gthªad_°©
;

165 
	ggroup_run_°©s
;

166 
fio_£rvî_£nd_ts
(
thªad_°©
 *, 
group_run_°©s
 *);

167 
fio_£rvî_£nd_gs
(
group_run_°©s
 *);

168 
fio_£rvî_£nd_du
();

169 
fio_£rvî_idÀ_lo›
();

171 
fio_˛õ¡s_c⁄√˘
();

172 
fio_˛õ¡s_£nd_öi
(const *);

173 
fio_˛õ¡_add_cmd_›ti⁄
(*, const *);

174 
fio_˛õ¡_add_öi_fûe
(*, const *);

176 
fio_ªcv_d©a
(
sk
, *
p
, 
Àn
);

177 
fio_£nd_d©a
(
sk
, c⁄° *
p
, 
Àn
);

178 
fio_√t_cmd_¸c
(
fio_√t_cmd
 *);

179 
fio_√t_cmd_¸c_pdu
(
fio_√t_cmd
 *, const *);

180 
fio_√t_cmd
 *
fio_√t_ªcv_cmd
(
sk
);

182 
fio_£nd_iﬁog
(
thªad_d©a
 *, 
io_log
 *, const *);

183 
fio_£rvî_£nd_add_job
(
thªad_d©a
 *);

184 
fio_£rvî_£nd_°¨t
(
thªad_d©a
 *);

185 
fio_√t_£nd_°›
(
sk
, 
îr‹
, 
sig«l
);

186 
fio_√t_£nd_quô
(
sk
);

188 
exô_backíd
;

189 
fio_√t_p‹t
;

191 
ölöe
 
	$__fio_öô_√t_cmd
(
fio_√t_cmd
 *
cmd
, 
uöt16_t
 
›code
,

192 
uöt32_t
 
pdu_Àn
, 
uöt64_t
 
èg
)

194 
	`mem£t
(
cmd
, 0, (*cmd));

196 
cmd
->
vîsi⁄
 = 
	`__˝u_to_À16
(
FIO_SERVER_VER
);

197 
cmd
->
›code
 = 
	`˝u_to_À16
(opcode);

198 
cmd
->
èg
 = 
	`˝u_to_À64
(tag);

199 
cmd
->
pdu_Àn
 = 
	`˝u_to_À32
(pdu_len);

200 
	}
}

203 
ölöe
 
	$fio_öô_√t_cmd
(
fio_√t_cmd
 *
cmd
, 
uöt16_t
 
›code
,

204 c⁄° *
pdu
, 
uöt32_t
 
pdu_Àn
,

205 
uöt64_t
 
èg
)

207 
	`__fio_öô_√t_cmd
(
cmd
, 
›code
, 
pdu_Àn
, 
èg
);

209 i‡(
pdu
)

210 
	`mem˝y
(&
cmd
->
∑ylﬂd
, 
pdu
, 
pdu_Àn
);

211 
	}
}

	@/home/terekhov/tmp/fio/fio/smalloc.c

5 
	~<sys/mm™.h
>

6 
	~<°dio.h
>

7 
	~<°dlib.h
>

8 
	~<as£π.h
>

9 
	~<°rög.h
>

10 
	~<uni°d.h
>

11 
	~<öây≥s.h
>

12 
	~<sys/ty≥s.h
>

13 
	~<limôs.h
>

14 
	~<f˙é.h
>

16 
	~"muãx.h
"

17 
	~"¨ch/¨ch.h
"

18 
	~"os/os.h
"

19 
	~"smÆloc.h
"

21 
	#SMALLOC_REDZONE


	)

23 
	#SMALLOC_BPB
 32

	)

24 
	#SMALLOC_BPI
 ((Ë* 8)

	)

25 
	#SMALLOC_BPL
 (
SMALLOC_BPB
 * 
SMALLOC_BPI
)

	)

27 
	#INITIAL_SIZE
 8192*1024

	)

28 
	#MAX_POOLS
 128

	)

30 
	#SMALLOC_PRE_RED
 0xdódbìfU

	)

31 
	#SMALLOC_POST_RED
 0x5Ø55Ø5U

	)

33 
	gsmÆloc_poﬁ_size
 = 
INITIAL_SIZE
;

34 c⁄° 
	göt_mask
 = () - 1;

36 
	spoﬁ
 {

37 
fio_muãx
 *
	mlock
;

38 *
	mm≠
;

39 *
	mbôm≠
;

40 
size_t
 
	m‰ì_blocks
;

41 
size_t
 
	mƒ_blocks
;

42 
size_t
 
	m√xt_n⁄_fuŒ
;

43 
size_t
 
	mmm≠_size
;

46 
	sblock_hdr
 {

47 
size_t
 
	msize
;

48 #ifde‡
SMALLOC_REDZONE


49 
	m¥îed
;

53 
poﬁ
 
	gmp
[
MAX_POOLS
];

54 
	gƒ_poﬁs
;

55 
	gœ°_poﬁ
;

56 
fio_rwlock
 *
	glock
;

58 
ölöe
 
	$poﬁ_lock
(
poﬁ
 *pool)

60 
	`fio_muãx_down
(
poﬁ
->
lock
);

61 
	}
}

63 
ölöe
 
	$poﬁ_u∆ock
(
poﬁ
 *pool)

65 
	`fio_muãx_up
(
poﬁ
->
lock
);

66 
	}
}

68 
ölöe
 
	$globÆ_ªad_lock
()

70 
	`fio_rwlock_ªad
(
lock
);

71 
	}
}

73 
ölöe
 
	$globÆ_ªad_u∆ock
()

75 
	`fio_rwlock_u∆ock
(
lock
);

76 
	}
}

78 
ölöe
 
	$globÆ_wrôe_lock
()

80 
	`fio_rwlock_wrôe
(
lock
);

81 
	}
}

83 
ölöe
 
	$globÆ_wrôe_u∆ock
()

85 
	`fio_rwlock_u∆ock
(
lock
);

86 
	}
}

88 
ölöe
 
	$±r_vÆid
(
poﬁ
 *poﬁ, *
±r
)

90 
poﬁ_size
 = 
poﬁ
->
ƒ_blocks
 * 
SMALLOC_BPL
;

92  (
±r
 >
poﬁ
->
m≠
Ë&& (±∏<Öoﬁ->m≠ + 
poﬁ_size
);

93 
	}
}

95 
ölöe
 
size_t
 
	$size_to_blocks
(
size_t
 
size
)

97  (
size
 + 
SMALLOC_BPB
 - 1) / SMALLOC_BPB;

98 
	}
}

100 
blocks_ôî
(
poﬁ
 *poﬁ, 
poﬁ_idx
,

101 
idx
, 
size_t
 
ƒ_blocks
,

102 (*
func
)(*
m≠
, 
mask
))

105 
ƒ_blocks
) {

106 
this_blocks
, 
mask
;

107 *
m≠
;

109 i‡(
poﬁ_idx
 >
poﬁ
->
ƒ_blocks
)

112 
m≠
 = &
poﬁ
->
bôm≠
[
poﬁ_idx
];

114 
this_blocks
 = 
ƒ_blocks
;

115 i‡(
this_blocks
 + 
idx
 > 
SMALLOC_BPI
) {

116 
this_blocks
 = 
SMALLOC_BPI
 - 
idx
;

117 
idx
 = 
SMALLOC_BPI
 - 
this_blocks
;

120 i‡(
this_blocks
 =
SMALLOC_BPI
)

121 
mask
 = -1U;

123 
mask
 = ((1U << 
this_blocks
Ë- 1Ë<< 
idx
;

125 i‡(!
	`func
(
m≠
, 
mask
))

128 
ƒ_blocks
 -
this_blocks
;

129 
idx
 = 0;

130 
poﬁ_idx
++;

134 
	}
}

136 
	$mask_cmp
(*
m≠
, 
mask
)

138  !(*
m≠
 & 
mask
);

139 
	}
}

141 
	$mask_˛ór
(*
m≠
, 
mask
)

143 
	`as£π
((*
m≠
 & 
mask
) == mask);

144 *
m≠
 &~
mask
;

146 
	}
}

148 
	$mask_£t
(*
m≠
, 
mask
)

150 
	`as£π
(!(*
m≠
 & 
mask
));

151 *
m≠
 |
mask
;

153 
	}
}

155 
	$blocks_‰ì
(
poﬁ
 *poﬁ, 
poﬁ_idx
,

156 
idx
, 
size_t
 
ƒ_blocks
)

158  
	`blocks_ôî
(
poﬁ
, 
poﬁ_idx
, 
idx
, 
ƒ_blocks
, 
mask_cmp
);

159 
	}
}

161 
	$£t_blocks
(
poﬁ
 *poﬁ, 
poﬁ_idx
,

162 
idx
, 
size_t
 
ƒ_blocks
)

164 
	`blocks_ôî
(
poﬁ
, 
poﬁ_idx
, 
idx
, 
ƒ_blocks
, 
mask_£t
);

165 
	}
}

167 
	$˛ór_blocks
(
poﬁ
 *poﬁ, 
poﬁ_idx
,

168 
idx
, 
size_t
 
ƒ_blocks
)

170 
	`blocks_ôî
(
poﬁ
, 
poﬁ_idx
, 
idx
, 
ƒ_blocks
, 
mask_˛ór
);

171 
	}
}

173 
	$föd_√xt_zîo
(
w‹d
, 
°¨t
)

175 
	`as£π
(
w‹d
 != -1U);

176 
w‹d
 >>
°¨t
;

177  
	`ffz
(
w‹d
Ë+ 
°¨t
;

178 
	}
}

180 
	$add_poﬁ
(
poﬁ
 *poﬁ, 
Æloc_size
)

182 
bôm≠_blocks
;

183 *
±r
;

185 #ifde‡
SMALLOC_REDZONE


186 
Æloc_size
 += ();

188 
Æloc_size
 +(
block_hdr
);

189 i‡(
Æloc_size
 < 
INITIAL_SIZE
)

190 
Æloc_size
 = 
INITIAL_SIZE
;

193 
Æloc_size
 = (Æloc_sizê+ 
SMALLOC_BPL
 - 1) & ~(SMALLOC_BPL - 1);

194 
bôm≠_blocks
 = 
Æloc_size
 / 
SMALLOC_BPL
;

195 
Æloc_size
 +
bôm≠_blocks
 * ();

196 
poﬁ
->
mm≠_size
 = 
Æloc_size
;

198 
poﬁ
->
ƒ_blocks
 = 
bôm≠_blocks
;

199 
poﬁ
->
‰ì_blocks
 = 
bôm≠_blocks
 * 
SMALLOC_BPB
;

201 
±r
 = 
	`mm≠
(
NULL
, 
Æloc_size
, 
PROT_READ
|
PROT_WRITE
,

202 
MAP_SHARED
 | 
OS_MAP_ANON
, -1, 0);

203 i‡(
±r
 =
MAP_FAILED
)

204 
out_Áû
;

206 
	`mem£t
(
±r
, 0, 
Æloc_size
);

207 
poﬁ
->
m≠
 = 
±r
;

208 
poﬁ
->
bôm≠
 = (*Ë
±r
 + (poﬁ->
ƒ_blocks
 * 
SMALLOC_BPL
);

210 
poﬁ
->
lock
 = 
	`fio_muãx_öô
(
FIO_MUTEX_UNLOCKED
);

211 i‡(!
poﬁ
->
lock
)

212 
out_Áû
;

214 
ƒ_poﬁs
++;

216 
out_Áû
:

217 
	`Ârötf
(
°dîr
, "smalloc: failedáddingÖool\n");

218 i‡(
poﬁ
->
m≠
)

219 
	`munm≠
(
poﬁ
->
m≠
,Öoﬁ->
mm≠_size
);

221 
	}
}

223 
	$söô
()

225 
ªt
;

227 
lock
 = 
	`fio_rwlock_öô
();

228 
ªt
 = 
	`add_poﬁ
(&
mp
[0], 
INITIAL_SIZE
);

229 
	`as£π
(!
ªt
);

230 
	}
}

232 
	$˛ónup_poﬁ
(
poﬁ
 *pool)

238 
	`munm≠
(
poﬁ
->
m≠
,Öoﬁ->
mm≠_size
);

240 i‡(
poﬁ
->
lock
)

241 
	`fio_muãx_ªmove
(
poﬁ
->
lock
);

242 
	}
}

244 
	$s˛ónup
()

246 
i
;

248 
i
 = 0; i < 
ƒ_poﬁs
; i++)

249 
	`˛ónup_poﬁ
(&
mp
[
i
]);

251 i‡(
lock
)

252 
	`fio_rwlock_ªmove
(
lock
);

253 
	}
}

255 #ifde‡
SMALLOC_REDZONE


256 *
	$po°ªd_±r
(
block_hdr
 *
hdr
)

258 
uöçå_t
 
±r
;

260 
±r
 = (
uöçå_t
Ë
hdr
 + hdr->
size
 - ();

261 
±r
 = (±∏+ 
öt_mask
) & ~int_mask;

263  (*Ë
±r
;

264 
	}
}

266 
	$fûl_ªdz⁄e
(
block_hdr
 *
hdr
)

268 *
po°ªd
 = 
	`po°ªd_±r
(
hdr
);

270 
hdr
->
¥îed
 = 
SMALLOC_PRE_RED
;

271 *
po°ªd
 = 
SMALLOC_POST_RED
;

272 
	}
}

274 
	$s‰ì_check_ªdz⁄e
(
block_hdr
 *
hdr
)

276 *
po°ªd
 = 
	`po°ªd_±r
(
hdr
);

278 i‡(
hdr
->
¥îed
 !
SMALLOC_PRE_RED
) {

279 
	`Ârötf
(
°dîr
, "smallocÖreÑedzone destroyed!\n");

280 
	`Ârötf
(
°dîr
, "Ötr=%p,Örered=%x,Éxpected %x\n",

281 
hdr
, hdr->
¥îed
, 
SMALLOC_PRE_RED
);

282 
	`as£π
(0);

284 i‡(*
po°ªd
 !
SMALLOC_POST_RED
) {

285 
	`Ârötf
(
°dîr
, "smallocÖostÑedzone destroyed!\n");

286 
	`Ârötf
(
°dîr
, "Ötr=%p,Öostred=%x,Éxpected %x\n",

287 
hdr
, *
po°ªd
, 
SMALLOC_POST_RED
);

288 
	`as£π
(0);

290 
	}
}

292 
	$fûl_ªdz⁄e
(
block_hdr
 *
hdr
)

294 
	}
}

296 
	$s‰ì_check_ªdz⁄e
(
block_hdr
 *
hdr
)

298 
	}
}

301 
	$s‰ì_poﬁ
(
poﬁ
 *poﬁ, *
±r
)

303 
block_hdr
 *
hdr
;

304 
i
, 
idx
;

305 
off£t
;

307 i‡(!
±r
)

310 
±r
 -(*
hdr
);

311 
hdr
 = 
±r
;

313 
	`as£π
(
	`±r_vÆid
(
poﬁ
, 
±r
));

315 
	`s‰ì_check_ªdz⁄e
(
hdr
);

317 
off£t
 = 
±r
 - 
poﬁ
->
m≠
;

318 
i
 = 
off£t
 / 
SMALLOC_BPL
;

319 
idx
 = (
off£t
 % 
SMALLOC_BPL
Ë/ 
SMALLOC_BPB
;

321 
	`poﬁ_lock
(
poﬁ
);

322 
	`˛ór_blocks
(
poﬁ
, 
i
, 
idx
, 
	`size_to_blocks
(
hdr
->
size
));

323 i‡(
i
 < 
poﬁ
->
√xt_n⁄_fuŒ
)

324 
poﬁ
->
√xt_n⁄_fuŒ
 = 
i
;

325 
poﬁ
->
‰ì_blocks
 +
	`size_to_blocks
(
hdr
->
size
);

326 
	`poﬁ_u∆ock
(
poﬁ
);

327 
	}
}

329 
	$s‰ì
(*
±r
)

331 
poﬁ
 *poﬁ = 
NULL
;

332 
i
;

334 i‡(!
±r
)

337 
	`globÆ_ªad_lock
();

339 
i
 = 0; i < 
ƒ_poﬁs
; i++) {

340 i‡(
	`±r_vÆid
(&
mp
[
i
], 
±r
)) {

341 
poﬁ
 = &
mp
[
i
];

346 
	`globÆ_ªad_u∆ock
();

348 
	`as£π
(
poﬁ
);

349 
	`s‰ì_poﬁ
(
poﬁ
, 
±r
);

350 
	}
}

352 *
	$__smÆloc_poﬁ
(
poﬁ
 *poﬁ, 
size_t
 
size
)

354 
size_t
 
ƒ_blocks
;

355 
i
;

356 
off£t
;

357 
œ°_idx
;

358 *
ªt
 = 
NULL
;

360 
	`poﬁ_lock
(
poﬁ
);

362 
ƒ_blocks
 = 
	`size_to_blocks
(
size
);

363 i‡(
ƒ_blocks
 > 
poﬁ
->
‰ì_blocks
)

364 
Áû
;

366 
i
 = 
poﬁ
->
√xt_n⁄_fuŒ
;

367 
œ°_idx
 = 0;

368 
off£t
 = -1U;

369 
i
 < 
poﬁ
->
ƒ_blocks
) {

370 
idx
;

372 i‡(
poﬁ
->
bôm≠
[
i
] == -1U) {

373 
i
++;

374 
poﬁ
->
√xt_n⁄_fuŒ
 = 
i
;

375 
œ°_idx
 = 0;

379 
idx
 = 
	`föd_√xt_zîo
(
poﬁ
->
bôm≠
[
i
], 
œ°_idx
);

380 i‡(!
	`blocks_‰ì
(
poﬁ
, 
i
, 
idx
, 
ƒ_blocks
)) {

381 
idx
 +
ƒ_blocks
;

382 i‡(
idx
 < 
SMALLOC_BPI
)

383 
œ°_idx
 = 
idx
;

385 
œ°_idx
 = 0;

386 
idx
 >
SMALLOC_BPI
) {

387 
i
++;

388 
idx
 -
SMALLOC_BPI
;

393 
	`£t_blocks
(
poﬁ
, 
i
, 
idx
, 
ƒ_blocks
);

394 
off£t
 = 
i
 * 
SMALLOC_BPL
 + 
idx
 * 
SMALLOC_BPB
;

398 i‡(
i
 < 
poﬁ
->
ƒ_blocks
) {

399 
poﬁ
->
‰ì_blocks
 -
ƒ_blocks
;

400 
ªt
 = 
poﬁ
->
m≠
 + 
off£t
;

402 
Áû
:

403 
	`poﬁ_u∆ock
(
poﬁ
);

404  
ªt
;

405 
	}
}

407 *
	$smÆloc_poﬁ
(
poﬁ
 *poﬁ, 
size_t
 
size
)

409 
size_t
 
Æloc_size
 = 
size
 + (
block_hdr
);

410 *
±r
;

416 #ifde‡
SMALLOC_REDZONE


417 
Æloc_size
 += ();

418 
Æloc_size
 = (Æloc_sizê+ 
öt_mask
) & ~int_mask;

421 
±r
 = 
	`__smÆloc_poﬁ
(
poﬁ
, 
Æloc_size
);

422 i‡(
±r
) {

423 
block_hdr
 *
hdr
 = 
±r
;

425 
hdr
->
size
 = 
Æloc_size
;

426 
	`fûl_ªdz⁄e
(
hdr
);

428 
±r
 +(*
hdr
);

429 
	`mem£t
(
±r
, 0, 
size
);

432  
±r
;

433 
	}
}

435 *
	$smÆloc
(
size_t
 
size
)

437 
i
;

439 i‡(
size
 != () size)

440  
NULL
;

442 
	`globÆ_wrôe_lock
();

443 
i
 = 
œ°_poﬁ
;

446 ; 
i
 < 
ƒ_poﬁs
; i++) {

447 *
±r
 = 
	`smÆloc_poﬁ
(&
mp
[
i
], 
size
);

449 i‡(
±r
) {

450 
œ°_poﬁ
 = 
i
;

451 
	`globÆ_wrôe_u∆ock
();

452  
±r
;

455 i‡(
œ°_poﬁ
) {

456 
œ°_poﬁ
 = 0;

460 i‡(
ƒ_poﬁs
 + 1 > 
MAX_POOLS
)

463 
i
 = 
ƒ_poﬁs
;

464 i‡(
	`add_poﬁ
(&
mp
[
ƒ_poﬁs
], 
size
))

465 
out
;

469 
out
:

470 
	`globÆ_wrôe_u∆ock
();

471  
NULL
;

472 
	}
}

474 *
	$smÆloc_°rdup
(c⁄° *
°r
)

476 *
±r
;

478 
±r
 = 
	`smÆloc
(
	`°æí
(
°r
) + 1);

479 
	`°r˝y
(
±r
, 
°r
);

480  
±r
;

481 
	}
}

	@/home/terekhov/tmp/fio/fio/smalloc.h

1 #i‚de‡
FIO_SMALLOC_H


2 
	#FIO_SMALLOC_H


	)

4 *
smÆloc
(
size_t
);

5 
s‰ì
(*);

6 *
smÆloc_°rdup
(const *);

7 
söô
();

8 
s˛ónup
();

10 
smÆloc_poﬁ_size
;

	@/home/terekhov/tmp/fio/fio/stat.c

1 
	~<°dio.h
>

2 
	~<°rög.h
>

3 
	~<sys/time.h
>

4 
	~<sys/ty≥s.h
>

5 
	~<sys/°©.h
>

6 
	~<dúít.h
>

7 
	~<libgí.h
>

8 
	~<m©h.h
>

10 
	~"fio.h
"

11 
	~"diskutû.h
"

12 
	~"lib/õì754.h
"

13 
	~"js⁄.h
"

14 
	~"lib/gërußge.h
"

15 
	~"idÀtime.h
"

17 
fio_muãx
 *
	g°©_muãx
;

19 
	$upd©e_rußge_°©
(
thªad_d©a
 *
td
)

21 
thªad_°©
 *
ts
 = &
td
->ts;

23 
	`fio_gërußge
(&
td
->
ru_íd
);

24 
ts
->
u§_time
 +
	`mtime_sö˚
(&
td
->
ru_°¨t
.
ru_utime
,

25 &
td
->
ru_íd
.
ru_utime
);

26 
ts
->
sys_time
 +
	`mtime_sö˚
(&
td
->
ru_°¨t
.
ru_°ime
,

27 &
td
->
ru_íd
.
ru_°ime
);

28 
ts
->
˘x
 +
td
->
ru_íd
.
ru_nvcsw
 +Åd->ru_íd.
ru_nivcsw


29 - (
td
->
ru_°¨t
.
ru_nvcsw
 +Åd->ru_°¨t.
ru_nivcsw
);

30 
ts
->
möf
 +
td
->
ru_íd
.
ru_möÊt
 -Åd->
ru_°¨t
.ru_minflt;

31 
ts
->
majf
 +
td
->
ru_íd
.
ru_majÊt
 -Åd->
ru_°¨t
.ru_majflt;

33 
	`mem˝y
(&
td
->
ru_°¨t
, &td->
ru_íd
, (td->ru_end));

34 
	}
}

45 
	$∂©_vÆ_to_idx
(
vÆ
)

47 
msb
, 
îr‹_bôs
, 
ba£
, 
off£t
, 
idx
;

50 i‡(
vÆ
 == 0)

51 
msb
 = 0;

53 
msb
 = ((
vÆ
)*8Ë- 
	`__buûtö_˛z
(val) - 1;

59 i‡(
msb
 <
FIO_IO_U_PLAT_BITS
)

60  
vÆ
;

63 
îr‹_bôs
 = 
msb
 - 
FIO_IO_U_PLAT_BITS
;

66 
ba£
 = (
îr‹_bôs
 + 1Ë<< 
FIO_IO_U_PLAT_BITS
;

72 
off£t
 = (
FIO_IO_U_PLAT_VAL
 - 1Ë& (
vÆ
 >> 
îr‹_bôs
);

75 
idx
 = (
ba£
 + 
off£t
Ë< (
FIO_IO_U_PLAT_NR
 - 1) ?

76 (
ba£
 + 
off£t
Ë: (
FIO_IO_U_PLAT_NR
 - 1);

78  
idx
;

79 
	}
}

85 
	$∂©_idx_to_vÆ
(
idx
)

87 
îr‹_bôs
, 
k
, 
ba£
;

89 
	`as£π
(
idx
 < 
FIO_IO_U_PLAT_NR
);

93 i‡(
idx
 < (
FIO_IO_U_PLAT_VAL
 << 1))

94  
idx
;

97 
îr‹_bôs
 = (
idx
 >> 
FIO_IO_U_PLAT_BITS
) - 1;

98 
ba£
 = 1 << (
îr‹_bôs
 + 
FIO_IO_U_PLAT_BITS
);

101 
k
 = 
idx
 % 
FIO_IO_U_PLAT_VAL
;

104  
ba£
 + ((
k
 + 0.5Ë* (1 << 
îr‹_bôs
));

105 
	}
}

107 
	$doubÀ_cmp
(c⁄° *
a
, c⁄° *
b
)

109 c⁄° 
fio_Â64_t
 
Á
 = *(c⁄° fio_Â64_à*Ë
a
;

110 c⁄° 
fio_Â64_t
 
fb
 = *(c⁄° fio_Â64_à*Ë
b
;

111 
cmp
 = 0;

113 i‡(
Á
.
u
.
f
 > 
fb
.u.f)

114 
cmp
 = 1;

115 i‡(
Á
.
u
.
f
 < 
fb
.u.f)

116 
cmp
 = -1;

118  
cmp
;

119 
	}
}

121 
	$ˇlc_˛©_≥r˚¡ûes
(*
io_u_∂©
, 
ƒ
,

122 
fio_Â64_t
 *
∂i°
, **
ouçut
,

123 *
maxv
, *
möv
)

125 
sum
 = 0;

126 
Àn
, 
i
, 
j
 = 0;

127 
ovÆ_Àn
 = 0;

128 *
ovÆs
 = 
NULL
;

129 
is_œ°
;

131 *
möv
 = -1U;

132 *
maxv
 = 0;

134 
Àn
 = 0;

135 
Àn
 < 
FIO_IO_U_LIST_MAX_LEN
 && 
∂i°
[Àn].
u
.
f
 != 0.0)

136 
Àn
++;

138 i‡(!
Àn
)

146 i‡(
Àn
 > 1)

147 
	`qs‹t
((*)
∂i°
, 
Àn
, ’li°[0]), 
doubÀ_cmp
);

152 
is_œ°
 = 0;

153 
i
 = 0; i < 
FIO_IO_U_PLAT_NR
 && !
is_œ°
; i++) {

154 
sum
 +
io_u_∂©
[
i
];

155 
sum
 >(
∂i°
[
j
].
u
.
f
 / 100.0 * 
ƒ
)) {

156 
	`as£π
(
∂i°
[
j
].
u
.
f
 <= 100.0);

158 i‡(
j
 =
ovÆ_Àn
) {

159 
ovÆ_Àn
 += 100;

160 
ovÆs
 = 
	`ªÆloc
(ovÆs, 
ovÆ_Àn
 * ());

163 
ovÆs
[
j
] = 
	`∂©_idx_to_vÆ
(
i
);

164 i‡(
ovÆs
[
j
] < *
möv
)

165 *
möv
 = 
ovÆs
[
j
];

166 i‡(
ovÆs
[
j
] > *
maxv
)

167 *
maxv
 = 
ovÆs
[
j
];

169 
is_œ°
 = (
j
 =
Àn
 - 1);

170 i‡(
is_œ°
)

173 
j
++;

177 *
ouçut
 = 
ovÆs
;

178  
Àn
;

179 
	}
}

184 
	$show_˛©_≥r˚¡ûes
(*
io_u_∂©
, 
ƒ
,

185 
fio_Â64_t
 *
∂i°
, 
¥ecisi⁄
)

187 
Àn
, 
j
 = 0, 
möv
, 
maxv
;

188 *
ovÆs
;

189 
is_œ°
, 
≥r_löe
, 
sˇÀ_down
;

190 
fmt
[32];

192 
Àn
 = 
	`ˇlc_˛©_≥r˚¡ûes
(
io_u_∂©
, 
ƒ
, 
∂i°
, &
ovÆs
, &
maxv
, &
möv
);

193 i‡(!
Àn
)

194 
out
;

200 i‡(
möv
 > 2000 && 
maxv
 > 99999) {

201 
sˇÀ_down
 = 1;

202 
	`log_öfo
(" clatÖercentiles (msec):\n |");

204 
sˇÀ_down
 = 0;

205 
	`log_öfo
(" clatÖercentiles (usec):\n |");

208 
	`¢¥ötf
(
fmt
, (fmt), "%%1.%uf", 
¥ecisi⁄
);

209 
≥r_löe
 = (80 - 7Ë/ (
¥ecisi⁄
 + 14);

211 
j
 = 0; j < 
Àn
; j++) {

212 
fbuf
[16], *
±r
 = fbuf;

215 i‡(
j
 !0 && (j % 
≥r_löe
) == 0)

216 
	`log_öfo
(" |");

219 
is_œ°
 = (
j
 =
Àn
 - 1);

221 i‡(
∂i°
[
j
].
u
.
f
 < 10.0)

222 
±r
 +
	`•rötf
(
fbuf
, " ");

224 
	`¢¥ötf
(
±r
, (
fbuf
), 
fmt
, 
∂i°
[
j
].
u
.
f
);

226 i‡(
sˇÀ_down
)

227 
ovÆs
[
j
] = (ovals[j] + 999) / 1000;

229 
	`log_öfo
(" %°h=[%5u]%c", 
fbuf
, 
ovÆs
[
j
], 
is_œ°
 ? '\n' : ',');

231 i‡(
is_œ°
)

234 i‡((
j
 % 
≥r_löe
) ==Öer_line - 1)

235 
	`log_öfo
("\n");

238 
out
:

239 i‡(
ovÆs
)

240 
	`‰ì
(
ovÆs
);

241 
	}
}

243 
	$ˇlc_œt
(
io_°©
 *
is
, *
mö
, *
max
,

244 *
món
, *
dev
)

246 
n
 = (Ë
is
->
ßm∂es
;

248 i‡(
n
 == 0)

251 *
mö
 = 
is
->
mö_vÆ
;

252 *
max
 = 
is
->
max_vÆ
;

253 *
món
 = 
is
->món.
u
.
f
;

255 i‡(
n
 > 1.0)

256 *
dev
 = 
	`sqπ
(
is
->
S
.
u
.
f
 / (
n
 - 1.0));

258 *
dev
 = 0;

261 
	}
}

263 
	$show_group_°©s
(
group_run_°©s
 *
rs
)

265 *
p1
, *
p2
, *
p3
, *
p4
;

266 c⁄° *
ddú_°r
[] = { " READ", " WRITE" , " TRIM"};

267 
i
;

269 
	`log_öfo
("\nRu¿°©u†grou∞%d (Æ»jobs):\n", 
rs
->
groupid
);

271 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

272 c⁄° 
i2p
 = 
	`is_powî_of_2
(
rs
->
kb_ba£
);

274 i‡(!
rs
->
max_run
[
i
])

277 
p1
 = 
	`num2°r
(
rs
->
io_kb
[
i
], 6,Ñs->
kb_ba£
, 
i2p
, 8);

278 
p2
 = 
	`num2°r
(
rs
->
agg
[
i
], 6,Ñs->
kb_ba£
, 
i2p
,Ñs->
unô_ba£
);

279 
p3
 = 
	`num2°r
(
rs
->
mö_bw
[
i
], 6,Ñs->
kb_ba£
, 
i2p
,Ñs->
unô_ba£
);

280 
p4
 = 
	`num2°r
(
rs
->
max_bw
[
i
], 6,Ñs->
kb_ba£
, 
i2p
,Ñs->
unô_ba£
);

282 
	`log_öfo
("%s: io=%s,ággrb=%s/s, minb=%s/s, maxb=%s/s,"

284 
rs
->
unifõd_rw_ªp
 ? " MIXED" : 
ddú_°r
[
i
],

285 
p1
, 
p2
, 
p3
, 
p4
,

286 (Ë
rs
->
mö_run
[
i
],

287 (Ë
rs
->
max_run
[
i
]);

289 
	`‰ì
(
p1
);

290 
	`‰ì
(
p2
);

291 
	`‰ì
(
p3
);

292 
	`‰ì
(
p4
);

294 
	}
}

296 
	$°©_ˇlc_di°
(*
m≠
, 
tŸÆ
, *
io_u_di°
)

298 
i
;

303 
i
 = 0; i < 
FIO_IO_U_MAP_NR
; i++) {

304 i‡(
tŸÆ
) {

305 
io_u_di°
[
i
] = (Ë
m≠
[i] / (Ë
tŸÆ
;

306 
io_u_di°
[
i
] *= 100.0;

307 i‡(
io_u_di°
[
i
] < 0.1 && 
m≠
[i])

308 
io_u_di°
[
i
] = 0.1;

310 
io_u_di°
[
i
] = 0.0;

312 
	}
}

314 
	$°©_ˇlc_œt
(
thªad_°©
 *
ts
, *
d°
,

315 *
§c
, 
ƒ
)

317 
tŸÆ
 = 
	`ddú_rw_sum
(
ts
->
tŸÆ_io_u
);

318 
i
;

323 
i
 = 0; i < 
ƒ
; i++) {

324 i‡(
tŸÆ
) {

325 
d°
[
i
] = (Ë
§c
[i] / (Ë
tŸÆ
;

326 
d°
[
i
] *= 100.0;

327 i‡(
d°
[
i
] < 0.01 && 
§c
[i])

328 
d°
[
i
] = 0.01;

330 
d°
[
i
] = 0.0;

332 
	}
}

334 
	$°©_ˇlc_œt_u
(
thªad_°©
 *
ts
, *
io_u_œt
)

336 
	`°©_ˇlc_œt
(
ts
, 
io_u_œt
,Ås->
io_u_œt_u
, 
FIO_IO_U_LAT_U_NR
);

337 
	}
}

339 
	$°©_ˇlc_œt_m
(
thªad_°©
 *
ts
, *
io_u_œt
)

341 
	`°©_ˇlc_œt
(
ts
, 
io_u_œt
,Ås->
io_u_œt_m
, 
FIO_IO_U_LAT_M_NR
);

342 
	}
}

344 
	$di•œy_œt
(c⁄° *
«me
, 
mö
, 
max
,

345 
món
, 
dev
)

347 c⁄° *
ba£
 = "(usec)";

348 *
möp
, *
maxp
;

350 i‡(!
	`u£c_to_m£c
(&
mö
, &
max
, &
món
, &
dev
))

351 
ba£
 = "(msec)";

353 
möp
 = 
	`num2°r
(
mö
, 6, 1, 0, 0);

354 
maxp
 = 
	`num2°r
(
max
, 6, 1, 0, 0);

356 
	`log_öfo
(" %s %s: min=%s, max=%s,ávg=%5.02f,"

357 " stdev=%5.02f\n", 
«me
, 
ba£
, 
möp
, 
maxp
, 
món
, 
dev
);

359 
	`‰ì
(
möp
);

360 
	`‰ì
(
maxp
);

361 
	}
}

363 
	$show_ddú_°©us
(
group_run_°©s
 *
rs
, 
thªad_°©
 *
ts
,

364 
ddú
)

366 c⁄° *
ddú_°r
[] = { "read ", "write", "trim" };

367 
mö
, 
max
, 
ru¡
;

368 
bw
, 
i›s
;

369 
món
, 
dev
;

370 *
io_p
, *
bw_p
, *
i›s_p
;

371 
i2p
;

373 
	`as£π
(
	`ddú_rw
(
ddú
));

375 i‡(!
ts
->
ru¡ime
[
ddú
])

378 
i2p
 = 
	`is_powî_of_2
(
rs
->
kb_ba£
);

379 
ru¡
 = 
ts
->
ru¡ime
[
ddú
];

381 
bw
 = (1000 * 
ts
->
io_byãs
[
ddú
]Ë/ 
ru¡
;

382 
io_p
 = 
	`num2°r
(
ts
->
io_byãs
[
ddú
], 6, 1, 
i2p
, 8);

383 
bw_p
 = 
	`num2°r
(
bw
, 6, 1, 
i2p
, 
ts
->
unô_ba£
);

385 
i›s
 = (1000 * (
uöt64_t
)
ts
->
tŸÆ_io_u
[
ddú
]Ë/ 
ru¡
;

386 
i›s_p
 = 
	`num2°r
(
i›s
, 6, 1, 0, 0);

388 
	`log_öfo
(" %s: io=%s, bw=%s/s, iops=%s,Ñunt=%6llumsec\n",

389 
rs
->
unifõd_rw_ªp
 ? "mixed" : 
ddú_°r
[
ddú
],

390 
io_p
, 
bw_p
, 
i›s_p
,

391 (Ë
ts
->
ru¡ime
[
ddú
]);

393 
	`‰ì
(
io_p
);

394 
	`‰ì
(
bw_p
);

395 
	`‰ì
(
i›s_p
);

397 i‡(
	`ˇlc_œt
(&
ts
->
¶©_°©
[
ddú
], &
mö
, &
max
, &
món
, &
dev
))

398 
	`di•œy_œt
("¶©", 
mö
, 
max
, 
món
, 
dev
);

399 i‡(
	`ˇlc_œt
(&
ts
->
˛©_°©
[
ddú
], &
mö
, &
max
, &
món
, &
dev
))

400 
	`di•œy_œt
("˛©", 
mö
, 
max
, 
món
, 
dev
);

401 i‡(
	`ˇlc_œt
(&
ts
->
œt_°©
[
ddú
], &
mö
, &
max
, &
món
, &
dev
))

402 
	`di•œy_œt
("Ü©", 
mö
, 
max
, 
món
, 
dev
);

404 i‡(
ts
->
˛©_≥r˚¡ûes
) {

405 
	`show_˛©_≥r˚¡ûes
(
ts
->
io_u_∂©
[
ddú
],

406 
ts
->
˛©_°©
[
ddú
].
ßm∂es
,

407 
ts
->
≥r˚¡ûe_li°
,

408 
ts
->
≥r˚¡ûe_¥ecisi⁄
);

410 i‡(
	`ˇlc_œt
(&
ts
->
bw_°©
[
ddú
], &
mö
, &
max
, &
món
, &
dev
)) {

411 
p_of_agg
 = 100.0, 
fkb_ba£
 = ()
rs
->
kb_ba£
;

412 c⁄° *
bw_°r
 = (
rs
->
unô_ba£
 == 1 ? "Kbit" : "KB");

414 i‡(
rs
->
unô_ba£
 == 1) {

415 
mö
 *= 8.0;

416 
max
 *= 8.0;

417 
món
 *= 8.0;

418 
dev
 *= 8.0;

421 i‡(
rs
->
agg
[
ddú
]) {

422 
p_of_agg
 = 
món
 * 100 / (Ë
rs
->
agg
[
ddú
];

423 i‡(
p_of_agg
 > 100.0)

424 
p_of_agg
 = 100.0;

427 i‡(
món
 > 
fkb_ba£
 * fkb_base) {

428 
mö
 /
fkb_ba£
;

429 
max
 /
fkb_ba£
;

430 
món
 /
fkb_ba£
;

431 
dev
 /
fkb_ba£
;

432 
bw_°r
 = (
rs
->
unô_ba£
 == 1 ? "Mbit" : "MB");

435 
	`log_öfo
(" bw (%-4s/s): min=%5lu, max=%5lu,Öer=%3.2f%%,"

436 "ávg=%5.02f, stdev=%5.02f\n", 
bw_°r
, 
mö
, 
max
,

437 
p_of_agg
, 
món
, 
dev
);

439 
	}
}

441 
	$show_œt
(*
io_u_œt
, 
ƒ
, c⁄° **
ønges
,

442 c⁄° *
msg
)

444 
√w_löe
 = 1, 
i
, 
löe
 = 0, 
shown
 = 0;

446 
i
 = 0; i < 
ƒ
; i++) {

447 i‡(
io_u_œt
[
i
] <= 0.0)

449 
shown
 = 1;

450 i‡(
√w_löe
) {

451 i‡(
löe
)

452 
	`log_öfo
("\n");

453 
	`log_öfo
("Ü© (%sË: ", 
msg
);

454 
√w_löe
 = 0;

455 
löe
 = 0;

457 i‡(
löe
)

458 
	`log_öfo
(", ");

459 
	`log_öfo
("%s%3.2f%%", 
ønges
[
i
], 
io_u_œt
[i]);

460 
löe
++;

461 i‡(
löe
 == 5)

462 
√w_löe
 = 1;

465 i‡(
shown
)

466 
	`log_öfo
("\n");

468  
shown
;

469 
	}
}

471 
	$show_œt_u
(*
io_u_œt_u
)

473 c⁄° *
ønges
[] = { "2=", "4=", "10=", "20=", "50=", "100=",

476 
	`show_œt
(
io_u_œt_u
, 
FIO_IO_U_LAT_U_NR
, 
ønges
, "usec");

477 
	}
}

479 
	$show_œt_m
(*
io_u_œt_m
)

481 c⁄° *
ønges
[] = { "2=", "4=", "10=", "20=", "50=", "100=",

485 
	`show_œt
(
io_u_œt_m
, 
FIO_IO_U_LAT_M_NR
, 
ønges
, "msec");

486 
	}
}

488 
	$show_œãncõs
(
thªad_°©
 *
ts
)

490 
io_u_œt_u
[
FIO_IO_U_LAT_U_NR
];

491 
io_u_œt_m
[
FIO_IO_U_LAT_M_NR
];

493 
	`°©_ˇlc_œt_u
(
ts
, 
io_u_œt_u
);

494 
	`°©_ˇlc_œt_m
(
ts
, 
io_u_œt_m
);

496 
	`show_œt_u
(
io_u_œt_u
);

497 
	`show_œt_m
(
io_u_œt_m
);

498 
	}
}

500 
	$show_thªad_°©us_n‹mÆ
(
thªad_°©
 *
ts
,

501 
group_run_°©s
 *
rs
)

503 
u§_˝u
, 
sys_˝u
;

504 
ru¡ime
;

505 
io_u_di°
[
FIO_IO_U_MAP_NR
];

506 
time_t
 
time_p
;

507 
time_buf
[64];

509 i‡(!(
ts
->
io_byãs
[
DDIR_READ
] +Ås->io_byãs[
DDIR_WRITE
] +

510 
ts
->
io_byãs
[
DDIR_TRIM
]Ë&& !—s->
tŸÆ_io_u
[
DDIR_READ
] +

511 
ts
->
tŸÆ_io_u
[
DDIR_WRITE
] +Ås->tŸÆ_io_u[
DDIR_TRIM
]))

514 
	`time
(&
time_p
);

515 
	`os_˘ime_r
((c⁄° 
time_t
 *Ë&
time_p
, 
time_buf
, (time_buf));

517 i‡(!
ts
->
îr‹
) {

518 
	`log_öfo
("%s: (groupid=%d, jobs=%d):Érr=%2d:Öid=%d: %s",

519 
ts
->
«me
,Ås->
groupid
,Ås->
membîs
,

520 
ts
->
îr‹
, (Ëts->
pid
, 
time_buf
);

522 
	`log_öfo
("%s: (groupid=%d, jobs=%d):Érr=%2d (%s):Öid=%d: %s",

523 
ts
->
«me
,Ås->
groupid
,Ås->
membîs
,

524 
ts
->
îr‹
,Ås->
vîr‹
, (Ëts->
pid
,

525 
time_buf
);

528 i‡(
	`°æí
(
ts
->
des¸ùti⁄
))

529 
	`log_öfo
(" Des¸ùti⁄ : [%s]\n", 
ts
->
des¸ùti⁄
);

531 i‡(
ts
->
io_byãs
[
DDIR_READ
])

532 
	`show_ddú_°©us
(
rs
, 
ts
, 
DDIR_READ
);

533 i‡(
ts
->
io_byãs
[
DDIR_WRITE
])

534 
	`show_ddú_°©us
(
rs
, 
ts
, 
DDIR_WRITE
);

535 i‡(
ts
->
io_byãs
[
DDIR_TRIM
])

536 
	`show_ddú_°©us
(
rs
, 
ts
, 
DDIR_TRIM
);

538 
	`show_œãncõs
(
ts
);

540 
ru¡ime
 = 
ts
->
tŸÆ_run_time
;

541 i‡(
ru¡ime
) {

542 
ru¡
 = (Ë
ru¡ime
;

544 
u§_˝u
 = (Ë
ts
->
u§_time
 * 100 / 
ru¡
;

545 
sys_˝u
 = (Ë
ts
->
sys_time
 * 100 / 
ru¡
;

547 
u§_˝u
 = 0;

548 
sys_˝u
 = 0;

551 
	`log_öfo
(" cpu : usr=%3.2f%%, sys=%3.2f%%, ctx=%llu,"

552 " majf=%Œu, möf=%Œu\n", 
u§_˝u
, 
sys_˝u
,

553 (Ë
ts
->
˘x
,

554 (Ë
ts
->
majf
,

555 (Ë
ts
->
möf
);

557 
	`°©_ˇlc_di°
(
ts
->
io_u_m≠
, 
	`ddú_rw_sum
—s->
tŸÆ_io_u
), 
io_u_di°
);

558 
	`log_öfo
(" IO depths : 1=%3.1f%%, 2=%3.1f%%, 4=%3.1f%%, 8=%3.1f%%,"

559 " 16=%3.1f%%, 32=%3.1f%%, >=64=%3.1f%%\n", 
io_u_di°
[0],

560 
io_u_di°
[1], io_u_dist[2],

561 
io_u_di°
[3], io_u_dist[4],

562 
io_u_di°
[5], io_u_dist[6]);

564 
	`°©_ˇlc_di°
(
ts
->
io_u_submô
,Ås->
tŸÆ_submô
, 
io_u_di°
);

565 
	`log_öfo
(" submit : 0=%3.1f%%, 4=%3.1f%%, 8=%3.1f%%, 16=%3.1f%%,"

566 " 32=%3.1f%%, 64=%3.1f%%, >=64=%3.1f%%\n", 
io_u_di°
[0],

567 
io_u_di°
[1], io_u_dist[2],

568 
io_u_di°
[3], io_u_dist[4],

569 
io_u_di°
[5], io_u_dist[6]);

570 
	`°©_ˇlc_di°
(
ts
->
io_u_com∂ëe
,Ås->
tŸÆ_com∂ëe
, 
io_u_di°
);

571 
	`log_öfo
(" complete : 0=%3.1f%%, 4=%3.1f%%, 8=%3.1f%%, 16=%3.1f%%,"

572 " 32=%3.1f%%, 64=%3.1f%%, >=64=%3.1f%%\n", 
io_u_di°
[0],

573 
io_u_di°
[1], io_u_dist[2],

574 
io_u_di°
[3], io_u_dist[4],

575 
io_u_di°
[5], io_u_dist[6]);

576 
	`log_öfo
(" issued :Åotal=r=%llu/w=%llu/d=%llu,"

578 (Ë
ts
->
tŸÆ_io_u
[0],

579 (Ë
ts
->
tŸÆ_io_u
[1],

580 (Ë
ts
->
tŸÆ_io_u
[2],

581 (Ë
ts
->
sh‹t_io_u
[0],

582 (Ë
ts
->
sh‹t_io_u
[1],

583 (Ë
ts
->
sh‹t_io_u
[2]);

584 i‡(
ts
->
c⁄töue_⁄_îr‹
) {

585 
	`log_öfo
("Érrors :Åotal=%llu, first_error=%d/<%s>\n",

586 ()
ts
->
tŸÆ_îr_cou¡
,

587 
ts
->
fú°_îr‹
,

588 
	`°ªº‹
(
ts
->
fú°_îr‹
));

590 i‡(
ts
->
œãncy_dïth
) {

591 
	`log_öfo
("Üatency :Åarget=%llu, window=%llu,Öercentile=%.2f%%, depth=%u\n",

592 ()
ts
->
œãncy_èrgë
,

593 ()
ts
->
œãncy_wödow
,

594 
ts
->
œãncy_≥r˚¡ûe
.
u
.
f
,

595 
ts
->
œãncy_dïth
);

597 
	}
}

599 
	$show_ddú_°©us_ãr£
(
thªad_°©
 *
ts
,

600 
group_run_°©s
 *
rs
, 
ddú
)

602 
mö
, 
max
;

603 
bw
, 
i›s
;

604 *
ovÆs
 = 
NULL
;

605 
món
, 
dev
;

606 
Àn
, 
möv
, 
maxv
;

607 
i
;

609 
	`as£π
(
	`ddú_rw
(
ddú
));

611 
i›s
 = 
bw
 = 0;

612 i‡(
ts
->
ru¡ime
[
ddú
]) {

613 
uöt64_t
 
ru¡
 = 
ts
->
ru¡ime
[
ddú
];

615 
bw
 = ((1000 * 
ts
->
io_byãs
[
ddú
]Ë/ 
ru¡
) / 1024;

616 
i›s
 = (1000 * (
uöt64_t
Ë
ts
->
tŸÆ_io_u
[
ddú
]Ë/ 
ru¡
;

619 
	`log_öfo
(";%llu;%llu;%llu;%llu",

620 (Ë
ts
->
io_byãs
[
ddú
] >> 10, 
bw
, 
i›s
,

621 (Ë
ts
->
ru¡ime
[
ddú
]);

623 i‡(
	`ˇlc_œt
(&
ts
->
¶©_°©
[
ddú
], &
mö
, &
max
, &
món
, &
dev
))

624 
	`log_öfo
(";%lu;%lu;%f;%f", 
mö
, 
max
, 
món
, 
dev
);

626 
	`log_öfo
(";%lu;%lu;%f;%f", 0UL, 0UL, 0.0, 0.0);

628 i‡(
	`ˇlc_œt
(&
ts
->
˛©_°©
[
ddú
], &
mö
, &
max
, &
món
, &
dev
))

629 
	`log_öfo
(";%lu;%lu;%f;%f", 
mö
, 
max
, 
món
, 
dev
);

631 
	`log_öfo
(";%lu;%lu;%f;%f", 0UL, 0UL, 0.0, 0.0);

633 i‡(
ts
->
˛©_≥r˚¡ûes
) {

634 
Àn
 = 
	`ˇlc_˛©_≥r˚¡ûes
(
ts
->
io_u_∂©
[
ddú
],

635 
ts
->
˛©_°©
[
ddú
].
ßm∂es
,

636 
ts
->
≥r˚¡ûe_li°
, &
ovÆs
, &
maxv
,

637 &
möv
);

639 
Àn
 = 0;

641 
i
 = 0; i < 
FIO_IO_U_LIST_MAX_LEN
; i++) {

642 i‡(
i
 >
Àn
) {

643 
	`log_öfo
(";0%%=0");

646 
	`log_öfo
(";%f%%=%u", 
ts
->
≥r˚¡ûe_li°
[
i
].
u
.
f
, 
ovÆs
[i]);

649 i‡(
	`ˇlc_œt
(&
ts
->
œt_°©
[
ddú
], &
mö
, &
max
, &
món
, &
dev
))

650 
	`log_öfo
(";%lu;%lu;%f;%f", 
mö
, 
max
, 
món
, 
dev
);

652 
	`log_öfo
(";%lu;%lu;%f;%f", 0UL, 0UL, 0.0, 0.0);

654 i‡(
ovÆs
)

655 
	`‰ì
(
ovÆs
);

657 i‡(
	`ˇlc_œt
(&
ts
->
bw_°©
[
ddú
], &
mö
, &
max
, &
món
, &
dev
)) {

658 
p_of_agg
 = 100.0;

660 i‡(
rs
->
agg
[
ddú
]) {

661 
p_of_agg
 = 
món
 * 100 / (Ë
rs
->
agg
[
ddú
];

662 i‡(
p_of_agg
 > 100.0)

663 
p_of_agg
 = 100.0;

666 
	`log_öfo
(";%lu;%lu;%f%%;%f;%f", 
mö
, 
max
, 
p_of_agg
, 
món
, 
dev
);

668 
	`log_öfo
(";%lu;%lu;%f%%;%f;%f", 0UL, 0UL, 0.0, 0.0, 0.0);

669 
	}
}

671 
	$add_ddú_°©us_js⁄
(
thªad_°©
 *
ts
,

672 
group_run_°©s
 *
rs
, 
ddú
, 
js⁄_obje˘
 *
∑ª¡
)

674 
mö
, 
max
;

675 
bw
, 
i›s
;

676 *
ovÆs
 = 
NULL
;

677 
món
, 
dev
;

678 
Àn
, 
möv
, 
maxv
;

679 
i
;

680 c⁄° *
ddú«me
[] = {"read", "write", "trim"};

681 
js⁄_obje˘
 *
dú_obje˘
, *
tmp_obje˘
, *
≥r˚¡ûe_obje˘
;

682 
buf
[120];

683 
p_of_agg
 = 100.0;

685 
	`as£π
(
	`ddú_rw
(
ddú
));

687 i‡(
ts
->
unifõd_rw_ªp
 && 
ddú
 !
DDIR_READ
)

690 
dú_obje˘
 = 
	`js⁄_¸óã_obje˘
();

691 
	`js⁄_obje˘_add_vÆue_obje˘
(
∑ª¡
,

692 
ts
->
unifõd_rw_ªp
 ? "mixed" : 
ddú«me
[
ddú
], 
dú_obje˘
);

694 
i›s
 = 
bw
 = 0;

695 i‡(
ts
->
ru¡ime
[
ddú
]) {

696 
uöt64_t
 
ru¡
 = 
ts
->
ru¡ime
[
ddú
];

698 
bw
 = ((1000 * 
ts
->
io_byãs
[
ddú
]Ë/ 
ru¡
) / 1024;

699 
i›s
 = (1000 * (
uöt64_t
Ë
ts
->
tŸÆ_io_u
[
ddú
]Ë/ 
ru¡
;

702 
	`js⁄_obje˘_add_vÆue_öt
(
dú_obje˘
, "io_byãs", 
ts
->
io_byãs
[
ddú
] >> 10);

703 
	`js⁄_obje˘_add_vÆue_öt
(
dú_obje˘
, "bw", 
bw
);

704 
	`js⁄_obje˘_add_vÆue_öt
(
dú_obje˘
, "i›s", 
i›s
);

705 
	`js⁄_obje˘_add_vÆue_öt
(
dú_obje˘
, "ru¡ime", 
ts
->
ru¡ime
[
ddú
]);

707 i‡(!
	`ˇlc_œt
(&
ts
->
¶©_°©
[
ddú
], &
mö
, &
max
, &
món
, &
dev
)) {

708 
mö
 = 
max
 = 0;

709 
món
 = 
dev
 = 0.0;

711 
tmp_obje˘
 = 
	`js⁄_¸óã_obje˘
();

712 
	`js⁄_obje˘_add_vÆue_obje˘
(
dú_obje˘
, "¶©", 
tmp_obje˘
);

713 
	`js⁄_obje˘_add_vÆue_öt
(
tmp_obje˘
, "mö", 
mö
);

714 
	`js⁄_obje˘_add_vÆue_öt
(
tmp_obje˘
, "max", 
max
);

715 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
tmp_obje˘
, "món", 
món
);

716 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
tmp_obje˘
, "°ddev", 
dev
);

718 i‡(!
	`ˇlc_œt
(&
ts
->
˛©_°©
[
ddú
], &
mö
, &
max
, &
món
, &
dev
)) {

719 
mö
 = 
max
 = 0;

720 
món
 = 
dev
 = 0.0;

722 
tmp_obje˘
 = 
	`js⁄_¸óã_obje˘
();

723 
	`js⁄_obje˘_add_vÆue_obje˘
(
dú_obje˘
, "˛©", 
tmp_obje˘
);

724 
	`js⁄_obje˘_add_vÆue_öt
(
tmp_obje˘
, "mö", 
mö
);

725 
	`js⁄_obje˘_add_vÆue_öt
(
tmp_obje˘
, "max", 
max
);

726 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
tmp_obje˘
, "món", 
món
);

727 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
tmp_obje˘
, "°ddev", 
dev
);

729 i‡(
ts
->
˛©_≥r˚¡ûes
) {

730 
Àn
 = 
	`ˇlc_˛©_≥r˚¡ûes
(
ts
->
io_u_∂©
[
ddú
],

731 
ts
->
˛©_°©
[
ddú
].
ßm∂es
,

732 
ts
->
≥r˚¡ûe_li°
, &
ovÆs
, &
maxv
,

733 &
möv
);

735 
Àn
 = 0;

737 
≥r˚¡ûe_obje˘
 = 
	`js⁄_¸óã_obje˘
();

738 
	`js⁄_obje˘_add_vÆue_obje˘
(
tmp_obje˘
, "≥r˚¡ûe", 
≥r˚¡ûe_obje˘
);

739 
i
 = 0; i < 
FIO_IO_U_LIST_MAX_LEN
; i++) {

740 i‡(
i
 >
Àn
) {

741 
	`js⁄_obje˘_add_vÆue_öt
(
≥r˚¡ûe_obje˘
, "0.00", 0);

744 
	`¢¥ötf
(
buf
, (buf), "%f", 
ts
->
≥r˚¡ûe_li°
[
i
].
u
.
f
);

745 
	`js⁄_obje˘_add_vÆue_öt
(
≥r˚¡ûe_obje˘
, (c⁄° *)
buf
, 
ovÆs
[
i
]);

748 i‡(!
	`ˇlc_œt
(&
ts
->
œt_°©
[
ddú
], &
mö
, &
max
, &
món
, &
dev
)) {

749 
mö
 = 
max
 = 0;

750 
món
 = 
dev
 = 0.0;

752 
tmp_obje˘
 = 
	`js⁄_¸óã_obje˘
();

753 
	`js⁄_obje˘_add_vÆue_obje˘
(
dú_obje˘
, "œt", 
tmp_obje˘
);

754 
	`js⁄_obje˘_add_vÆue_öt
(
tmp_obje˘
, "mö", 
mö
);

755 
	`js⁄_obje˘_add_vÆue_öt
(
tmp_obje˘
, "max", 
max
);

756 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
tmp_obje˘
, "món", 
món
);

757 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
tmp_obje˘
, "°ddev", 
dev
);

758 i‡(
ovÆs
)

759 
	`‰ì
(
ovÆs
);

761 i‡(
	`ˇlc_œt
(&
ts
->
bw_°©
[
ddú
], &
mö
, &
max
, &
món
, &
dev
)) {

762 i‡(
rs
->
agg
[
ddú
]) {

763 
p_of_agg
 = 
món
 * 100 / (Ë
rs
->
agg
[
ddú
];

764 i‡(
p_of_agg
 > 100.0)

765 
p_of_agg
 = 100.0;

768 
mö
 = 
max
 = 0;

769 
p_of_agg
 = 
món
 = 
dev
 = 0.0;

771 
	`js⁄_obje˘_add_vÆue_öt
(
dú_obje˘
, "bw_mö", 
mö
);

772 
	`js⁄_obje˘_add_vÆue_öt
(
dú_obje˘
, "bw_max", 
max
);

773 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
dú_obje˘
, "bw_agg", 
p_of_agg
);

774 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
dú_obje˘
, "bw_món", 
món
);

775 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
dú_obje˘
, "bw_dev", 
dev
);

776 
	}
}

778 
	$show_thªad_°©us_ãr£_v2
(
thªad_°©
 *
ts
,

779 
group_run_°©s
 *
rs
)

781 
io_u_di°
[
FIO_IO_U_MAP_NR
];

782 
io_u_œt_u
[
FIO_IO_U_LAT_U_NR
];

783 
io_u_œt_m
[
FIO_IO_U_LAT_M_NR
];

784 
u§_˝u
, 
sys_˝u
;

785 
i
;

788 
	`log_öfo
("2;%s;%d;%d", 
ts
->
«me
,Ås->
groupid
,Ås->
îr‹
);

790 
	`show_ddú_°©us_ãr£
(
ts
, 
rs
, 
DDIR_READ
);

792 
	`show_ddú_°©us_ãr£
(
ts
, 
rs
, 
DDIR_WRITE
);

794 
	`show_ddú_°©us_ãr£
(
ts
, 
rs
, 
DDIR_TRIM
);

797 i‡(
ts
->
tŸÆ_run_time
) {

798 
ru¡
 = (Ë
ts
->
tŸÆ_run_time
;

800 
u§_˝u
 = (Ë
ts
->
u§_time
 * 100 / 
ru¡
;

801 
sys_˝u
 = (Ë
ts
->
sys_time
 * 100 / 
ru¡
;

803 
u§_˝u
 = 0;

804 
sys_˝u
 = 0;

807 
	`log_öfo
(";%f%%;%f%%;%Œu;%Œu;%Œu", 
u§_˝u
, 
sys_˝u
,

808 (Ë
ts
->
˘x
,

809 (Ë
ts
->
majf
,

810 (Ë
ts
->
möf
);

813 
	`°©_ˇlc_di°
(
ts
->
io_u_m≠
, 
	`ddú_rw_sum
—s->
tŸÆ_io_u
), 
io_u_di°
);

814 
	`°©_ˇlc_œt_u
(
ts
, 
io_u_œt_u
);

815 
	`°©_ˇlc_œt_m
(
ts
, 
io_u_œt_m
);

818 
	`log_öfo
(";%3.1f%%;%3.1f%%;%3.1f%%;%3.1f%%;%3.1f%%;%3.1f%%;%3.1f%%",

819 
io_u_di°
[0], io_u_dist[1], io_u_dist[2], io_u_dist[3],

820 
io_u_di°
[4], io_u_dist[5], io_u_dist[6]);

823 
i
 = 0; i < 
FIO_IO_U_LAT_U_NR
; i++)

824 
	`log_öfo
(";%3.2f%%", 
io_u_œt_u
[
i
]);

826 
i
 = 0; i < 
FIO_IO_U_LAT_M_NR
; i++)

827 
	`log_öfo
(";%3.2f%%", 
io_u_œt_m
[
i
]);

829 i‡(
ts
->
c⁄töue_⁄_îr‹
)

830 
	`log_öfo
(";%Œu;%d", (Ë
ts
->
tŸÆ_îr_cou¡
,Ås->
fú°_îr‹
);

831 
	`log_öfo
("\n");

834 i‡(
	`°æí
(
ts
->
des¸ùti⁄
))

835 
	`log_öfo
(";%s", 
ts
->
des¸ùti⁄
);

837 
	`log_öfo
("\n");

838 
	}
}

840 
	$show_thªad_°©us_ãr£_v3_v4
(
thªad_°©
 *
ts
,

841 
group_run_°©s
 *
rs
, 
vî
)

843 
io_u_di°
[
FIO_IO_U_MAP_NR
];

844 
io_u_œt_u
[
FIO_IO_U_LAT_U_NR
];

845 
io_u_œt_m
[
FIO_IO_U_LAT_M_NR
];

846 
u§_˝u
, 
sys_˝u
;

847 
i
;

850 
	`log_öfo
("%d;%s;%s;%d;%d", 
vî
, 
fio_vîsi⁄_°rög
,

851 
ts
->
«me
,Ås->
groupid
,Ås->
îr‹
);

853 
	`show_ddú_°©us_ãr£
(
ts
, 
rs
, 
DDIR_READ
);

855 
	`show_ddú_°©us_ãr£
(
ts
, 
rs
, 
DDIR_WRITE
);

857 i‡(
vî
 == 4)

858 
	`show_ddú_°©us_ãr£
(
ts
, 
rs
, 
DDIR_TRIM
);

861 i‡(
ts
->
tŸÆ_run_time
) {

862 
ru¡
 = (Ë
ts
->
tŸÆ_run_time
;

864 
u§_˝u
 = (Ë
ts
->
u§_time
 * 100 / 
ru¡
;

865 
sys_˝u
 = (Ë
ts
->
sys_time
 * 100 / 
ru¡
;

867 
u§_˝u
 = 0;

868 
sys_˝u
 = 0;

871 
	`log_öfo
(";%f%%;%f%%;%Œu;%Œu;%Œu", 
u§_˝u
, 
sys_˝u
,

872 (Ë
ts
->
˘x
,

873 (Ë
ts
->
majf
,

874 (Ë
ts
->
möf
);

877 
	`°©_ˇlc_di°
(
ts
->
io_u_m≠
, 
	`ddú_rw_sum
—s->
tŸÆ_io_u
), 
io_u_di°
);

878 
	`°©_ˇlc_œt_u
(
ts
, 
io_u_œt_u
);

879 
	`°©_ˇlc_œt_m
(
ts
, 
io_u_œt_m
);

882 
	`log_öfo
(";%3.1f%%;%3.1f%%;%3.1f%%;%3.1f%%;%3.1f%%;%3.1f%%;%3.1f%%",

883 
io_u_di°
[0], io_u_dist[1], io_u_dist[2], io_u_dist[3],

884 
io_u_di°
[4], io_u_dist[5], io_u_dist[6]);

887 
i
 = 0; i < 
FIO_IO_U_LAT_U_NR
; i++)

888 
	`log_öfo
(";%3.2f%%", 
io_u_œt_u
[
i
]);

890 
i
 = 0; i < 
FIO_IO_U_LAT_M_NR
; i++)

891 
	`log_öfo
(";%3.2f%%", 
io_u_œt_m
[
i
]);

894 i‡(
is_backíd
)

895 
	`show_disk_utû
(1, 
NULL
);

898 i‡(
ts
->
c⁄töue_⁄_îr‹
)

899 
	`log_öfo
(";%Œu;%d", (Ë
ts
->
tŸÆ_îr_cou¡
,Ås->
fú°_îr‹
);

902 i‡(
	`°æí
(
ts
->
des¸ùti⁄
))

903 
	`log_öfo
(";%s", 
ts
->
des¸ùti⁄
);

905 
	`log_öfo
("\n");

906 
	}
}

908 
js⁄_obje˘
 *
	$show_thªad_°©us_js⁄
(
thªad_°©
 *
ts
,

909 
group_run_°©s
 *
rs
)

911 
js⁄_obje˘
 *
roŸ
, *
tmp
;

912 
io_u_di°
[
FIO_IO_U_MAP_NR
];

913 
io_u_œt_u
[
FIO_IO_U_LAT_U_NR
];

914 
io_u_œt_m
[
FIO_IO_U_LAT_M_NR
];

915 
u§_˝u
, 
sys_˝u
;

916 
i
;

918 
roŸ
 = 
	`js⁄_¸óã_obje˘
();

919 
	`js⁄_obje˘_add_vÆue_°rög
(
roŸ
, "job«me", 
ts
->
«me
);

920 
	`js⁄_obje˘_add_vÆue_öt
(
roŸ
, "groupid", 
ts
->
groupid
);

921 
	`js⁄_obje˘_add_vÆue_öt
(
roŸ
, "îr‹", 
ts
->
îr‹
);

923 
	`add_ddú_°©us_js⁄
(
ts
, 
rs
, 
DDIR_READ
, 
roŸ
);

924 
	`add_ddú_°©us_js⁄
(
ts
, 
rs
, 
DDIR_WRITE
, 
roŸ
);

925 
	`add_ddú_°©us_js⁄
(
ts
, 
rs
, 
DDIR_TRIM
, 
roŸ
);

928 i‡(
ts
->
tŸÆ_run_time
) {

929 
ru¡
 = (Ë
ts
->
tŸÆ_run_time
;

931 
u§_˝u
 = (Ë
ts
->
u§_time
 * 100 / 
ru¡
;

932 
sys_˝u
 = (Ë
ts
->
sys_time
 * 100 / 
ru¡
;

934 
u§_˝u
 = 0;

935 
sys_˝u
 = 0;

937 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
roŸ
, "u§_˝u", 
u§_˝u
);

938 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
roŸ
, "sys_˝u", 
sys_˝u
);

939 
	`js⁄_obje˘_add_vÆue_öt
(
roŸ
, "˘x", 
ts
->
˘x
);

940 
	`js⁄_obje˘_add_vÆue_öt
(
roŸ
, "majf", 
ts
->
majf
);

941 
	`js⁄_obje˘_add_vÆue_öt
(
roŸ
, "möf", 
ts
->
möf
);

945 
	`°©_ˇlc_di°
(
ts
->
io_u_m≠
, 
	`ddú_rw_sum
—s->
tŸÆ_io_u
), 
io_u_di°
);

946 
	`°©_ˇlc_œt_u
(
ts
, 
io_u_œt_u
);

947 
	`°©_ˇlc_œt_m
(
ts
, 
io_u_œt_m
);

949 
tmp
 = 
	`js⁄_¸óã_obje˘
();

950 
	`js⁄_obje˘_add_vÆue_obje˘
(
roŸ
, "iodïth_Àvñ", 
tmp
);

952 
i
 = 0; i < 7; i++) {

953 
«me
[20];

954 i‡(
i
 < 6)

955 
	`¢¥ötf
(
«me
, 20, "%d", 1 << 
i
);

957 
	`¢¥ötf
(
«me
, 20, ">=%d", 1 << 
i
);

958 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
tmp
, (c⁄° *)
«me
, 
io_u_di°
[
i
]);

961 
tmp
 = 
	`js⁄_¸óã_obje˘
();

962 
	`js⁄_obje˘_add_vÆue_obje˘
(
roŸ
, "œãncy_us", 
tmp
);

964 
i
 = 0; i < 
FIO_IO_U_LAT_U_NR
; i++) {

965 c⁄° *
ønges
[] = { "2", "4", "10", "20", "50", "100",

967 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
tmp
, 
ønges
[
i
], 
io_u_œt_u
[i]);

970 
tmp
 = 
	`js⁄_¸óã_obje˘
();

971 
	`js⁄_obje˘_add_vÆue_obje˘
(
roŸ
, "œãncy_ms", 
tmp
);

972 
i
 = 0; i < 
FIO_IO_U_LAT_M_NR
; i++) {

973 c⁄° *
ønges
[] = { "2", "4", "10", "20", "50", "100",

976 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
tmp
, 
ønges
[
i
], 
io_u_œt_m
[i]);

980 i‡(
ts
->
c⁄töue_⁄_îr‹
) {

981 
	`js⁄_obje˘_add_vÆue_öt
(
roŸ
, "tŸÆ_îr", 
ts
->
tŸÆ_îr_cou¡
);

982 
	`js⁄_obje˘_add_vÆue_öt
(
roŸ
, "fú°_îr‹", 
ts
->
fú°_îr‹
);

985 i‡(
ts
->
œãncy_dïth
) {

986 
	`js⁄_obje˘_add_vÆue_öt
(
roŸ
, "œãncy_dïth", 
ts
->
œãncy_dïth
);

987 
	`js⁄_obje˘_add_vÆue_öt
(
roŸ
, "œãncy_èrgë", 
ts
->
œãncy_èrgë
);

988 
	`js⁄_obje˘_add_vÆue_Êﬂt
(
roŸ
, "œãncy_≥r˚¡ûe", 
ts
->
œãncy_≥r˚¡ûe
.
u
.
f
);

989 
	`js⁄_obje˘_add_vÆue_öt
(
roŸ
, "œãncy_wödow", 
ts
->
œãncy_wödow
);

993 i‡(
	`°æí
(
ts
->
des¸ùti⁄
))

994 
	`js⁄_obje˘_add_vÆue_°rög
(
roŸ
, "desc", 
ts
->
des¸ùti⁄
);

996  
roŸ
;

997 
	}
}

999 
	$show_thªad_°©us_ãr£
(
thªad_°©
 *
ts
,

1000 
group_run_°©s
 *
rs
)

1002 i‡(
ãr£_vîsi⁄
 == 2)

1003 
	`show_thªad_°©us_ãr£_v2
(
ts
, 
rs
);

1004 i‡(
ãr£_vîsi⁄
 == 3 ||Åerse_version == 4)

1005 
	`show_thªad_°©us_ãr£_v3_v4
(
ts
, 
rs
, 
ãr£_vîsi⁄
);

1007 
	`log_îr
("fio: badÅî£ vîsi⁄!? %d\n", 
ãr£_vîsi⁄
);

1008 
	}
}

1010 
js⁄_obje˘
 *
	$show_thªad_°©us
(
thªad_°©
 *
ts
,

1011 
group_run_°©s
 *
rs
)

1013 i‡(
ouçut_f‹m©
 =
FIO_OUTPUT_TERSE
)

1014 
	`show_thªad_°©us_ãr£
(
ts
, 
rs
);

1015 i‡(
ouçut_f‹m©
 =
FIO_OUTPUT_JSON
)

1016  
	`show_thªad_°©us_js⁄
(
ts
, 
rs
);

1018 
	`show_thªad_°©us_n‹mÆ
(
ts
, 
rs
);

1019  
NULL
;

1020 
	}
}

1022 
	$sum_°©
(
io_°©
 *
d°
, io_°© *
§c
, 
ƒ
)

1024 
món
, 
S
;

1026 i‡(
§c
->
ßm∂es
 == 0)

1029 
d°
->
mö_vÆ
 = 
	`mö
(d°->mö_vÆ, 
§c
->min_val);

1030 
d°
->
max_vÆ
 = 
	`max
(d°->max_vÆ, 
§c
->max_val);

1037 i‡(
ƒ
 == 1) {

1038 
món
 = 
§c
->món.
u
.
f
;

1039 
S
 = 
§c
->S.
u
.
f
;

1041 
dñè
 = 
§c
->
món
.
u
.
f
 - 
d°
->mean.u.f;

1043 
món
 = ((
§c
->món.
u
.
f
 * src->
ßm∂es
) +

1044 (
d°
->
món
.
u
.
f
 * d°->
ßm∂es
)) /

1045 (
d°
->
ßm∂es
 + 
§c
->samples);

1047 
S
 = 
§c
->S.
u
.
f
 + 
d°
->S.u.‡+ 
	`pow
(
dñè
, 2.0) *

1048 (
d°
->
ßm∂es
 * 
§c
->samples) /

1049 (
d°
->
ßm∂es
 + 
§c
->samples);

1052 
d°
->
ßm∂es
 +
§c
->samples;

1053 
d°
->
món
.
u
.
f
 = mean;

1054 
d°
->
S
.
u
.
f
 = S;

1055 
	}
}

1057 
	$sum_group_°©s
(
group_run_°©s
 *
d°
, group_run_°©†*
§c
)

1059 
i
;

1061 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

1062 i‡(
d°
->
max_run
[
i
] < 
§c
->max_run[i])

1063 
d°
->
max_run
[
i
] = 
§c
->max_run[i];

1064 i‡(
d°
->
mö_run
[
i
] && d°->mö_run[i] > 
§c
->min_run[i])

1065 
d°
->
mö_run
[
i
] = 
§c
->min_run[i];

1066 i‡(
d°
->
max_bw
[
i
] < 
§c
->max_bw[i])

1067 
d°
->
max_bw
[
i
] = 
§c
->max_bw[i];

1068 i‡(
d°
->
mö_bw
[
i
] && d°->mö_bw[i] > 
§c
->min_bw[i])

1069 
d°
->
mö_bw
[
i
] = 
§c
->min_bw[i];

1071 
d°
->
io_kb
[
i
] +
§c
->io_kb[i];

1072 
d°
->
agg
[
i
] +
§c
->agg[i];

1075 
	}
}

1077 
	$sum_thªad_°©s
(
thªad_°©
 *
d°
, thªad_°© *
§c
, 
ƒ
)

1079 
l
, 
k
;

1081 
l
 = 0;Ü < 
DDIR_RWDIR_CNT
;Ü++) {

1082 i‡(!
d°
->
unifõd_rw_ªp
) {

1083 
	`sum_°©
(&
d°
->
˛©_°©
[
l
], &
§c
->˛©_°©[l], 
ƒ
);

1084 
	`sum_°©
(&
d°
->
¶©_°©
[
l
], &
§c
->¶©_°©[l], 
ƒ
);

1085 
	`sum_°©
(&
d°
->
œt_°©
[
l
], &
§c
->œt_°©[l], 
ƒ
);

1086 
	`sum_°©
(&
d°
->
bw_°©
[
l
], &
§c
->bw_°©[l], 
ƒ
);

1088 
d°
->
io_byãs
[
l
] +
§c
->io_bytes[l];

1090 i‡(
d°
->
ru¡ime
[
l
] < 
§c
->runtime[l])

1091 
d°
->
ru¡ime
[
l
] = 
§c
->runtime[l];

1093 
	`sum_°©
(&
d°
->
˛©_°©
[0], &
§c
->˛©_°©[
l
], 
ƒ
);

1094 
	`sum_°©
(&
d°
->
¶©_°©
[0], &
§c
->¶©_°©[
l
], 
ƒ
);

1095 
	`sum_°©
(&
d°
->
œt_°©
[0], &
§c
->œt_°©[
l
], 
ƒ
);

1096 
	`sum_°©
(&
d°
->
bw_°©
[0], &
§c
->bw_°©[
l
], 
ƒ
);

1098 
d°
->
io_byãs
[0] +
§c
->io_byãs[
l
];

1100 i‡(
d°
->
ru¡ime
[0] < 
§c
->ru¡ime[
l
])

1101 
d°
->
ru¡ime
[0] = 
§c
->ru¡ime[
l
];

1105 
d°
->
u§_time
 +
§c
->usr_time;

1106 
d°
->
sys_time
 +
§c
->sys_time;

1107 
d°
->
˘x
 +
§c
->ctx;

1108 
d°
->
majf
 +
§c
->majf;

1109 
d°
->
möf
 +
§c
->minf;

1111 
k
 = 0; k < 
FIO_IO_U_MAP_NR
; k++)

1112 
d°
->
io_u_m≠
[
k
] +
§c
->io_u_map[k];

1113 
k
 = 0; k < 
FIO_IO_U_MAP_NR
; k++)

1114 
d°
->
io_u_submô
[
k
] +
§c
->io_u_submit[k];

1115 
k
 = 0; k < 
FIO_IO_U_MAP_NR
; k++)

1116 
d°
->
io_u_com∂ëe
[
k
] +
§c
->io_u_complete[k];

1117 
k
 = 0; k < 
FIO_IO_U_LAT_U_NR
; k++)

1118 
d°
->
io_u_œt_u
[
k
] +
§c
->io_u_lat_u[k];

1119 
k
 = 0; k < 
FIO_IO_U_LAT_M_NR
; k++)

1120 
d°
->
io_u_œt_m
[
k
] +
§c
->io_u_lat_m[k];

1122 
k
 = 0; k < 
DDIR_RWDIR_CNT
; k++) {

1123 i‡(!
d°
->
unifõd_rw_ªp
) {

1124 
d°
->
tŸÆ_io_u
[
k
] +
§c
->total_io_u[k];

1125 
d°
->
sh‹t_io_u
[
k
] +
§c
->short_io_u[k];

1127 
d°
->
tŸÆ_io_u
[0] +
§c
->tŸÆ_io_u[
k
];

1128 
d°
->
sh‹t_io_u
[0] +
§c
->sh‹t_io_u[
k
];

1132 
k
 = 0; k < 
DDIR_RWDIR_CNT
; k++) {

1133 
m
;

1135 
m
 = 0; m < 
FIO_IO_U_PLAT_NR
; m++) {

1136 i‡(!
d°
->
unifõd_rw_ªp
)

1137 
d°
->
io_u_∂©
[
k
][
m
] +
§c
->io_u_plat[k][m];

1139 
d°
->
io_u_∂©
[0][
m
] +
§c
->io_u_∂©[
k
][m];

1143 
d°
->
tŸÆ_run_time
 +
§c
->total_run_time;

1144 
d°
->
tŸÆ_submô
 +
§c
->total_submit;

1145 
d°
->
tŸÆ_com∂ëe
 +
§c
->total_complete;

1146 
	}
}

1148 
	$öô_group_run_°©
(
group_run_°©s
 *
gs
)

1150 
i
;

1151 
	`mem£t
(
gs
, 0, (*gs));

1153 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++)

1154 
gs
->
mö_bw
[
i
] = gs->
mö_run
[i] = ~0UL;

1155 
	}
}

1157 
	$öô_thªad_°©
(
thªad_°©
 *
ts
)

1159 
j
;

1161 
	`mem£t
(
ts
, 0, (*ts));

1163 
j
 = 0; j < 
DDIR_RWDIR_CNT
; j++) {

1164 
ts
->
œt_°©
[
j
].
mö_vÆ
 = -1UL;

1165 
ts
->
˛©_°©
[
j
].
mö_vÆ
 = -1UL;

1166 
ts
->
¶©_°©
[
j
].
mö_vÆ
 = -1UL;

1167 
ts
->
bw_°©
[
j
].
mö_vÆ
 = -1UL;

1169 
ts
->
groupid
 = -1;

1170 
	}
}

1172 
	$__show_run_°©s
()

1174 
group_run_°©s
 *
run°©s
, *
rs
;

1175 
thªad_d©a
 *
td
;

1176 
thªad_°©
 *
thªad°©s
, *
ts
;

1177 
i
, 
j
, 
ƒ_ts
, 
œ°_ts
, 
idx
;

1178 
kb_ba£_w¨√d
 = 0;

1179 
unô_ba£_w¨√d
 = 0;

1180 
js⁄_obje˘
 *
roŸ
 = 
NULL
;

1181 
js⁄_¨øy
 *
¨øy
 = 
NULL
;

1183 
run°©s
 = 
	`mÆloc
((
group_run_°©s
Ë* (
groupid
 + 1));

1185 
i
 = 0; i < 
groupid
 + 1; i++)

1186 
	`öô_group_run_°©
(&
run°©s
[
i
]);

1192 
ƒ_ts
 = 0;

1193 
œ°_ts
 = -1;

1194 
	`f‹_óch_td
(
td
, 
i
) {

1195 i‡(!
td
->
o
.
group_ªp‹tög
) {

1196 
ƒ_ts
++;

1199 i‡(
œ°_ts
 =
td
->
groupid
)

1202 
œ°_ts
 = 
td
->
groupid
;

1203 
ƒ_ts
++;

1206 
thªad°©s
 = 
	`mÆloc
(
ƒ_ts
 * (
thªad_°©
));

1208 
i
 = 0; i < 
ƒ_ts
; i++)

1209 
	`öô_thªad_°©
(&
thªad°©s
[
i
]);

1211 
j
 = 0;

1212 
œ°_ts
 = -1;

1213 
idx
 = 0;

1214 
	`f‹_óch_td
(
td
, 
i
) {

1215 i‡(
idx
 && (!
td
->
o
.
group_ªp‹tög
 ||

1216 (
td
->
o
.
group_ªp‹tög
 && 
œ°_ts
 !td->
groupid
))) {

1217 
idx
 = 0;

1218 
j
++;

1221 
œ°_ts
 = 
td
->
groupid
;

1223 
ts
 = &
thªad°©s
[
j
];

1225 
ts
->
˛©_≥r˚¡ûes
 = 
td
->
o
.clat_percentiles;

1226 
ts
->
≥r˚¡ûe_¥ecisi⁄
 = 
td
->
o
.percentile_precision;

1227 
	`mem˝y
(
ts
->
≥r˚¡ûe_li°
, 
td
->
o
.percentile_list, (td->o.percentile_list));

1229 
idx
++;

1230 
ts
->
membîs
++;

1232 i‡(
ts
->
groupid
 == -1) {

1236 
	`°∫˝y
(
ts
->
«me
, 
td
->
o
.«me, 
FIO_JOBNAME_SIZE
 - 1);

1237 i‡(
td
->
o
.
des¸ùti⁄
)

1238 
	`°∫˝y
(
ts
->
des¸ùti⁄
, 
td
->
o
.description,

1239 
FIO_JOBDESC_SIZE
 - 1);

1241 
	`mem£t
(
ts
->
des¸ùti⁄
, 0, 
FIO_JOBDESC_SIZE
);

1247 
ts
->
thªad_numbî
 = 
td
->thread_number;

1248 
ts
->
groupid
 = 
td
->groupid;

1253 
ts
->
pid
 = 
td
->pid;

1255 
ts
->
kb_ba£
 = 
td
->
o
.kb_base;

1256 
ts
->
unô_ba£
 = 
td
->
o
.unit_base;

1257 
ts
->
unifõd_rw_ªp
 = 
td
->
o
.unified_rw_rep;

1258 } i‡(
ts
->
kb_ba£
 !
td
->
o
.kb_ba£ && !
kb_ba£_w¨√d
) {

1259 
	`log_öfo
("fio: kb_base differs for jobs in group, using"

1260 " %uá†thêba£\n", 
ts
->
kb_ba£
);

1261 
kb_ba£_w¨√d
 = 1;

1262 } i‡(
ts
->
unô_ba£
 !
td
->
o
.unô_ba£ && !
unô_ba£_w¨√d
) {

1263 
	`log_öfo
("fio: unit_base differs for jobs in group, using"

1264 " %uá†thêba£\n", 
ts
->
unô_ba£
);

1265 
unô_ba£_w¨√d
 = 1;

1268 
ts
->
c⁄töue_⁄_îr‹
 = 
td
->
o
.continue_on_error;

1269 
ts
->
tŸÆ_îr_cou¡
 +
td
->total_err_count;

1270 
ts
->
fú°_îr‹
 = 
td
->first_error;

1271 i‡(!
ts
->
îr‹
) {

1272 i‡(!
td
->
îr‹
 &&Åd->
o
.
c⁄töue_⁄_îr‹
 &&

1273 
td
->
fú°_îr‹
) {

1274 
ts
->
îr‹
 = 
td
->
fú°_îr‹
;

1275 
ts
->
vîr‹
[(ts->verror) - 1] = '\0';

1276 
	`°∫˝y
(
ts
->
vîr‹
, 
td
->verror, (ts->verror) - 1);

1277 } i‡(
td
->
îr‹
) {

1278 
ts
->
îr‹
 = 
td
->error;

1279 
ts
->
vîr‹
[(ts->verror) - 1] = '\0';

1280 
	`°∫˝y
(
ts
->
vîr‹
, 
td
->verror, (ts->verror) - 1);

1284 
ts
->
œãncy_dïth
 = 
td
->
œãncy_qd
;

1285 
ts
->
œãncy_èrgë
 = 
td
->
o
.latency_target;

1286 
ts
->
œãncy_≥r˚¡ûe
 = 
td
->
o
.latency_percentile;

1287 
ts
->
œãncy_wödow
 = 
td
->
o
.latency_window;

1289 
	`sum_thªad_°©s
(
ts
, &
td
->ts, 
idx
);

1292 
i
 = 0; i < 
ƒ_ts
; i++) {

1293 
bw
;

1295 
ts
 = &
thªad°©s
[
i
];

1296 
rs
 = &
run°©s
[
ts
->
groupid
];

1297 
rs
->
kb_ba£
 = 
ts
->kb_base;

1298 
rs
->
unô_ba£
 = 
ts
->unit_base;

1299 
rs
->
unifõd_rw_ªp
 +
ts
->unified_rw_rep;

1301 
j
 = 0; j < 
DDIR_RWDIR_CNT
; j++) {

1302 i‡(!
ts
->
ru¡ime
[
j
])

1304 i‡(
ts
->
ru¡ime
[
j
] < 
rs
->
mö_run
[j] || !rs->min_run[j])

1305 
rs
->
mö_run
[
j
] = 
ts
->
ru¡ime
[j];

1306 i‡(
ts
->
ru¡ime
[
j
] > 
rs
->
max_run
[j])

1307 
rs
->
max_run
[
j
] = 
ts
->
ru¡ime
[j];

1309 
bw
 = 0;

1310 i‡(
ts
->
ru¡ime
[
j
]) {

1311 
ru¡
 = 
ts
->
ru¡ime
[
j
];

1312 
kb
;

1314 
kb
 = 
ts
->
io_byãs
[
j
] / 
rs
->
kb_ba£
;

1315 
bw
 = 
kb
 * 1000 / 
ru¡
;

1317 i‡(
bw
 < 
rs
->
mö_bw
[
j
])

1318 
rs
->
mö_bw
[
j
] = 
bw
;

1319 i‡(
bw
 > 
rs
->
max_bw
[
j
])

1320 
rs
->
max_bw
[
j
] = 
bw
;

1322 
rs
->
io_kb
[
j
] +
ts
->
io_byãs
[j] /Ñs->
kb_ba£
;

1326 
i
 = 0; i < 
groupid
 + 1; i++) {

1327 
ddú
;

1329 
rs
 = &
run°©s
[
i
];

1331 
ddú
 = 0; ddú < 
DDIR_RWDIR_CNT
; ddir++) {

1332 i‡(
rs
->
max_run
[
ddú
])

1333 
rs
->
agg
[
ddú
] = (rs->
io_kb
[ddir] * 1000) /

1334 
rs
->
max_run
[
ddú
];

1341 i‡(
ouçut_f‹m©
 =
FIO_OUTPUT_NORMAL
)

1342 
	`log_öfo
("\n");

1343 i‡(
ouçut_f‹m©
 =
FIO_OUTPUT_JSON
) {

1344 
roŸ
 = 
	`js⁄_¸óã_obje˘
();

1345 
	`js⁄_obje˘_add_vÆue_°rög
(
roŸ
, "fiÿvîsi⁄", 
fio_vîsi⁄_°rög
);

1346 
¨øy
 = 
	`js⁄_¸óã_¨øy
();

1347 
	`js⁄_obje˘_add_vÆue_¨øy
(
roŸ
, "jobs", 
¨øy
);

1350 
i
 = 0; i < 
ƒ_ts
; i++) {

1351 
ts
 = &
thªad°©s
[
i
];

1352 
rs
 = &
run°©s
[
ts
->
groupid
];

1354 i‡(
is_backíd
)

1355 
	`fio_£rvî_£nd_ts
(
ts
, 
rs
);

1356 i‡(
ouçut_f‹m©
 =
FIO_OUTPUT_TERSE
)

1357 
	`show_thªad_°©us_ãr£
(
ts
, 
rs
);

1358 i‡(
ouçut_f‹m©
 =
FIO_OUTPUT_JSON
) {

1359 
js⁄_obje˘
 *
tmp
 = 
	`show_thªad_°©us_js⁄
(
ts
, 
rs
);

1360 
	`js⁄_¨øy_add_vÆue_obje˘
(
¨øy
, 
tmp
);

1362 
	`show_thªad_°©us_n‹mÆ
(
ts
, 
rs
);

1364 i‡(
ouçut_f‹m©
 =
FIO_OUTPUT_JSON
) {

1366 
	`show_disk_utû
(1, 
roŸ
);

1368 
	`show_idÀ_¥of_°©s
(
FIO_OUTPUT_JSON
, 
roŸ
);

1370 
	`js⁄_¥öt_obje˘
(
roŸ
);

1371 
	`log_öfo
("\n");

1372 
	`js⁄_‰ì_obje˘
(
roŸ
);

1375 
i
 = 0; i < 
groupid
 + 1; i++) {

1376 
rs
 = &
run°©s
[
i
];

1378 
rs
->
groupid
 = 
i
;

1379 i‡(
is_backíd
)

1380 
	`fio_£rvî_£nd_gs
(
rs
);

1381 i‡(
ouçut_f‹m©
 =
FIO_OUTPUT_NORMAL
)

1382 
	`show_group_°©s
(
rs
);

1385 i‡(
is_backíd
)

1386 
	`fio_£rvî_£nd_du
();

1387 i‡(
ouçut_f‹m©
 =
FIO_OUTPUT_NORMAL
) {

1388 
	`show_disk_utû
(0, 
NULL
);

1389 
	`show_idÀ_¥of_°©s
(
FIO_OUTPUT_NORMAL
, 
NULL
);

1392 i‡–!(
ouçut_f‹m©
 =
FIO_OUTPUT_TERSE
Ë&& 
≠≥nd_ãr£_ouçut
) {

1393 
	`log_öfo
("\nAdditional Terse Output:\n");

1395 
i
 = 0; i < 
ƒ_ts
; i++) {

1396 
ts
 = &
thªad°©s
[
i
];

1397 
rs
 = &
run°©s
[
ts
->
groupid
];

1398 
	`show_thªad_°©us_ãr£
(
ts
, 
rs
);

1402 
	`log_öfo_Êush
();

1403 
	`‰ì
(
run°©s
);

1404 
	`‰ì
(
thªad°©s
);

1405 
	}
}

1407 
	$show_run_°©s
()

1409 
	`fio_muãx_down
(
°©_muãx
);

1410 
	`__show_run_°©s
();

1411 
	`fio_muãx_up
(
°©_muãx
);

1412 
	}
}

1414 *
	$__show_ru¬ög_run_°©s
(
fio_unu£d
 *
¨g
)

1416 
thªad_d©a
 *
td
;

1417 *
π
;

1418 
timevÆ
 
tv
;

1419 
i
;

1421 
π
 = 
	`mÆloc
(
thªad_numbî
 * ());

1422 
	`fio_gëtime
(&
tv
, 
NULL
);

1424 
	`f‹_óch_td
(
td
, 
i
) {

1425 
π
[
i
] = 
	`mtime_sö˚
(&
td
->
°¨t
, &
tv
);

1426 i‡(
	`td_ªad
(
td
Ë&&Åd->
io_byãs
[
DDIR_READ
])

1427 
td
->
ts
.
ru¡ime
[
DDIR_READ
] +
π
[
i
];

1428 i‡(
	`td_wrôe
(
td
Ë&&Åd->
io_byãs
[
DDIR_WRITE
])

1429 
td
->
ts
.
ru¡ime
[
DDIR_WRITE
] +
π
[
i
];

1430 i‡(
	`td_åim
(
td
Ë&&Åd->
io_byãs
[
DDIR_TRIM
])

1431 
td
->
ts
.
ru¡ime
[
DDIR_TRIM
] +
π
[
i
];

1433 
td
->
upd©e_rußge
 = 1;

1434 
td
->
ts
.
io_byãs
[
DDIR_READ
] =Åd->io_bytes[DDIR_READ];

1435 
td
->
ts
.
io_byãs
[
DDIR_WRITE
] =Åd->io_bytes[DDIR_WRITE];

1436 
td
->
ts
.
io_byãs
[
DDIR_TRIM
] =Åd->io_bytes[DDIR_TRIM];

1437 
td
->
ts
.
tŸÆ_run_time
 = 
	`mtime_sö˚
(&td->
ïoch
, &
tv
);

1440 
	`f‹_óch_td
(
td
, 
i
) {

1441 i‡(
td
->
rußge_£m
) {

1442 
td
->
upd©e_rußge
 = 1;

1443 
	`fio_muãx_down
(
td
->
rußge_£m
);

1445 
td
->
upd©e_rußge
 = 0;

1448 
	`__show_run_°©s
();

1450 
	`f‹_óch_td
(
td
, 
i
) {

1451 i‡(
	`td_ªad
(
td
Ë&&Åd->
io_byãs
[
DDIR_READ
])

1452 
td
->
ts
.
ru¡ime
[
DDIR_READ
] -
π
[
i
];

1453 i‡(
	`td_wrôe
(
td
Ë&&Åd->
io_byãs
[
DDIR_WRITE
])

1454 
td
->
ts
.
ru¡ime
[
DDIR_WRITE
] -
π
[
i
];

1455 i‡(
	`td_åim
(
td
Ë&&Åd->
io_byãs
[
DDIR_TRIM
])

1456 
td
->
ts
.
ru¡ime
[
DDIR_TRIM
] -
π
[
i
];

1459 
	`‰ì
(
π
);

1460 
	`fio_muãx_up
(
°©_muãx
);

1461  
NULL
;

1462 
	}
}

1469 
	$show_ru¬ög_run_°©s
()

1471 
±hªad_t
 
thªad
;

1473 
	`fio_muãx_down
(
°©_muãx
);

1475 i‡(!
	`±hªad_¸óã
(&
thªad
, 
NULL
, 
__show_ru¬ög_run_°©s
, NULL)) {

1476 
îr
;

1478 
îr
 = 
	`±hªad_dëach
(
thªad
);

1479 i‡(
îr
)

1480 
	`log_îr
("fio: DUÅhªad dëach faûed: %s\n", 
	`°ªº‹
(
îr
));

1485 
	`fio_muãx_up
(
°©_muãx
);

1486 
	}
}

1488 
	g°©us_öãrvÆ_öô
;

1489 
timevÆ
 
	g°©us_time
;

1490 
	g°©us_fûe_dißbÀd
;

1492 
	#FIO_STATUS_FILE
 "fio-dump-°©us"

	)

1494 
	$check_°©us_fûe
()

1496 
°©
 
sb
;

1497 c⁄° *
ãmp_dú
;

1498 
fio_°©us_fûe_∑th
[
PATH_MAX
];

1500 i‡(
°©us_fûe_dißbÀd
)

1503 
ãmp_dú
 = 
	`gëív
("TMPDIR");

1504 i‡(
ãmp_dú
 =
NULL
) {

1505 
ãmp_dú
 = 
	`gëív
("TEMP");

1506 i‡(
ãmp_dú
 && 
	`°æí
—emp_dúË>
PATH_MAX
)

1507 
ãmp_dú
 = 
NULL
;

1509 i‡(
ãmp_dú
 =
NULL
)

1510 
ãmp_dú
 = "/tmp";

1512 
	`¢¥ötf
(
fio_°©us_fûe_∑th
, (fio_°©us_fûe_∑th), "%s/%s", 
ãmp_dú
, 
FIO_STATUS_FILE
);

1514 i‡(
	`°©
(
fio_°©us_fûe_∑th
, &
sb
))

1517 i‡(
	`u∆ök
(
fio_°©us_fûe_∑th
) < 0) {

1518 
	`log_îr
("fio: faûedÅÿu∆ök %s: %s\n", 
fio_°©us_fûe_∑th
,

1519 
	`°ªº‹
(
î∫o
));

1520 
	`log_îr
("fio: disabling status file updates\n");

1521 
°©us_fûe_dißbÀd
 = 1;

1525 
	}
}

1527 
	$check_f‹_ru¬ög_°©s
()

1529 i‡(
°©us_öãrvÆ
) {

1530 i‡(!
°©us_öãrvÆ_öô
) {

1531 
	`fio_gëtime
(&
°©us_time
, 
NULL
);

1532 
°©us_öãrvÆ_öô
 = 1;

1533 } i‡(
	`mtime_sö˚_now
(&
°©us_time
Ë>
°©us_öãrvÆ
) {

1534 
	`show_ru¬ög_run_°©s
();

1535 
	`fio_gëtime
(&
°©us_time
, 
NULL
);

1539 i‡(
	`check_°©us_fûe
()) {

1540 
	`show_ru¬ög_run_°©s
();

1543 
	}
}

1545 
ölöe
 
	$add_°©_ßm∂e
(
io_°©
 *
is
, 
d©a
)

1547 
vÆ
 = 
d©a
;

1548 
dñè
;

1550 i‡(
d©a
 > 
is
->
max_vÆ
)

1551 
is
->
max_vÆ
 = 
d©a
;

1552 i‡(
d©a
 < 
is
->
mö_vÆ
)

1553 
is
->
mö_vÆ
 = 
d©a
;

1555 
dñè
 = 
vÆ
 - 
is
->
món
.
u
.
f
;

1556 i‡(
dñè
) {

1557 
is
->
món
.
u
.
f
 +
dñè
 / (is->
ßm∂es
 + 1.0);

1558 
is
->
S
.
u
.
f
 +
dñè
 * (
vÆ
 - is->
món
.u.f);

1561 
is
->
ßm∂es
++;

1562 
	}
}

1564 
	$__add_log_ßm∂e
(
io_log
 *
iﬁog
, 
vÆ
,

1565 
fio_ddú
 
ddú
, 
bs
,

1566 
t
)

1568 c⁄° 
ƒ_ßm∂es
 = 
iﬁog
->nr_samples;

1570 i‡(
iﬁog
->
dißbÀd
)

1573 i‡(!
iﬁog
->
ƒ_ßm∂es
)

1574 
iﬁog
->
avg_œ°
 = 
t
;

1576 i‡(
iﬁog
->
ƒ_ßm∂es
 =iﬁog->
max_ßm∂es
) {

1577 
√w_size
 = (
io_ßm∂e
Ë* 
iﬁog
->
max_ßm∂es
*2;

1578 *
√w_log
;

1580 
√w_log
 = 
	`ªÆloc
(
iﬁog
->
log
, 
√w_size
);

1581 i‡(!
√w_log
) {

1582 
	`log_îr
("fio: failedÉxtending iolog! Will stopÜogging.\n");

1583 
iﬁog
->
dißbÀd
 = 1;

1586 
iﬁog
->
log
 = 
√w_log
;

1587 
iﬁog
->
max_ßm∂es
 <<= 1;

1590 
iﬁog
->
log
[
ƒ_ßm∂es
].
vÆ
 = val;

1591 
iﬁog
->
log
[
ƒ_ßm∂es
].
time
 = 
t
;

1592 
iﬁog
->
log
[
ƒ_ßm∂es
].
ddú
 = ddir;

1593 
iﬁog
->
log
[
ƒ_ßm∂es
].
bs
 = bs;

1594 
iﬁog
->
ƒ_ßm∂es
++;

1595 
	}
}

1597 
ölöe
 
	$ª£t_io_°©
(
io_°©
 *
ios
)

1599 
ios
->
max_vÆ
 = ios->
mö_vÆ
 = ios->
ßm∂es
 = 0;

1600 
ios
->
món
.
u
.
f
 = ios->
S
.u.f = 0;

1601 
	}
}

1603 
	$ª£t_io_°©s
(
thªad_d©a
 *
td
)

1605 
thªad_°©
 *
ts
 = &
td
->ts;

1606 
i
, 
j
;

1608 
i
 = 0; i < 
DDIR_RWDIR_CNT
; i++) {

1609 
	`ª£t_io_°©
(&
ts
->
˛©_°©
[
i
]);

1610 
	`ª£t_io_°©
(&
ts
->
¶©_°©
[
i
]);

1611 
	`ª£t_io_°©
(&
ts
->
œt_°©
[
i
]);

1612 
	`ª£t_io_°©
(&
ts
->
bw_°©
[
i
]);

1613 
	`ª£t_io_°©
(&
ts
->
i›s_°©
[
i
]);

1615 
ts
->
io_byãs
[
i
] = 0;

1616 
ts
->
ru¡ime
[
i
] = 0;

1618 
j
 = 0; j < 
FIO_IO_U_PLAT_NR
; j++)

1619 
ts
->
io_u_∂©
[
i
][
j
] = 0;

1622 
i
 = 0; i < 
FIO_IO_U_MAP_NR
; i++) {

1623 
ts
->
io_u_m≠
[
i
] = 0;

1624 
ts
->
io_u_submô
[
i
] = 0;

1625 
ts
->
io_u_com∂ëe
[
i
] = 0;

1626 
ts
->
io_u_œt_u
[
i
] = 0;

1627 
ts
->
io_u_œt_m
[
i
] = 0;

1628 
ts
->
tŸÆ_submô
 = 0;

1629 
ts
->
tŸÆ_com∂ëe
 = 0;

1632 
i
 = 0; i < 3; i++) {

1633 
ts
->
tŸÆ_io_u
[
i
] = 0;

1634 
ts
->
sh‹t_io_u
[
i
] = 0;

1636 
	}
}

1638 
	$_add_°©_to_log
(
io_log
 *
iﬁog
, 
ñ≠£d
)

1645 i‡(
iﬁog
->
avg_wödow
[
DDIR_READ
].
ßm∂es
) {

1646 
mr
;

1648 
mr
 = 
iﬁog
->
avg_wödow
[
DDIR_READ
].
món
.
u
.
f
 + 0.50;

1649 
	`__add_log_ßm∂e
(
iﬁog
, 
mr
, 
DDIR_READ
, 0, 
ñ≠£d
);

1651 i‡(
iﬁog
->
avg_wödow
[
DDIR_WRITE
].
ßm∂es
) {

1652 
mw
;

1654 
mw
 = 
iﬁog
->
avg_wödow
[
DDIR_WRITE
].
món
.
u
.
f
 + 0.50;

1655 
	`__add_log_ßm∂e
(
iﬁog
, 
mw
, 
DDIR_WRITE
, 0, 
ñ≠£d
);

1657 i‡(
iﬁog
->
avg_wödow
[
DDIR_TRIM
].
ßm∂es
) {

1658 
mw
;

1660 
mw
 = 
iﬁog
->
avg_wödow
[
DDIR_TRIM
].
món
.
u
.
f
 + 0.50;

1661 
	`__add_log_ßm∂e
(
iﬁog
, 
mw
, 
DDIR_TRIM
, 0, 
ñ≠£d
);

1664 
	`ª£t_io_°©
(&
iﬁog
->
avg_wödow
[
DDIR_READ
]);

1665 
	`ª£t_io_°©
(&
iﬁog
->
avg_wödow
[
DDIR_WRITE
]);

1666 
	`ª£t_io_°©
(&
iﬁog
->
avg_wödow
[
DDIR_TRIM
]);

1667 
	}
}

1669 
	$add_log_ßm∂e
(
thªad_d©a
 *
td
, 
io_log
 *
iﬁog
,

1670 
vÆ
, 
fio_ddú
 
ddú
,

1671 
bs
)

1673 
ñ≠£d
, 
this_wödow
;

1675 i‡(!
	`ddú_rw
(
ddú
))

1678 
ñ≠£d
 = 
	`mtime_sö˚_now
(&
td
->
ïoch
);

1683 i‡(!
iﬁog
->
avg_m£c
) {

1684 
	`__add_log_ßm∂e
(
iﬁog
, 
vÆ
, 
ddú
, 
bs
, 
ñ≠£d
);

1692 
	`add_°©_ßm∂e
(&
iﬁog
->
avg_wödow
[
ddú
], 
vÆ
);

1698 
this_wödow
 = 
ñ≠£d
 - 
iﬁog
->
avg_œ°
;

1699 i‡(
this_wödow
 < 
iﬁog
->
avg_m£c
)

1702 
	`_add_°©_to_log
(
iﬁog
, 
ñ≠£d
);

1704 
iﬁog
->
avg_œ°
 = 
ñ≠£d
;

1705 
	}
}

1707 
	$föÆize_logs
(
thªad_d©a
 *
td
)

1709 
ñ≠£d
;

1711 
ñ≠£d
 = 
	`mtime_sö˚_now
(&
td
->
ïoch
);

1713 i‡(
td
->
˛©_log
)

1714 
	`_add_°©_to_log
(
td
->
˛©_log
, 
ñ≠£d
);

1715 i‡(
td
->
¶©_log
)

1716 
	`_add_°©_to_log
(
td
->
¶©_log
, 
ñ≠£d
);

1717 i‡(
td
->
œt_log
)

1718 
	`_add_°©_to_log
(
td
->
œt_log
, 
ñ≠£d
);

1719 i‡(
td
->
bw_log
)

1720 
	`_add_°©_to_log
(
td
->
bw_log
, 
ñ≠£d
);

1721 i‡(
td
->
i›s_log
)

1722 
	`_add_°©_to_log
(
td
->
i›s_log
, 
ñ≠£d
);

1723 
	}
}

1725 
	$add_agg_ßm∂e
(
vÆ
, 
fio_ddú
 
ddú
, 
bs
)

1727 
io_log
 *
iﬁog
;

1729 i‡(!
	`ddú_rw
(
ddú
))

1732 
iﬁog
 = 
agg_io_log
[
ddú
];

1733 
	`__add_log_ßm∂e
(
iﬁog
, 
vÆ
, 
ddú
, 
bs
, 
	`mtime_sö˚_gíesis
());

1734 
	}
}

1736 
	$add_˛©_≥r˚¡ûe_ßm∂e
(
thªad_°©
 *
ts
,

1737 
u£c
, 
fio_ddú
 
ddú
)

1739 
idx
 = 
	`∂©_vÆ_to_idx
(
u£c
);

1740 
	`as£π
(
idx
 < 
FIO_IO_U_PLAT_NR
);

1742 
ts
->
io_u_∂©
[
ddú
][
idx
]++;

1743 
	}
}

1745 
	$add_˛©_ßm∂e
(
thªad_d©a
 *
td
, 
fio_ddú
 
ddú
,

1746 
u£c
, 
bs
)

1748 
thªad_°©
 *
ts
 = &
td
->ts;

1750 i‡(!
	`ddú_rw
(
ddú
))

1753 
	`add_°©_ßm∂e
(&
ts
->
˛©_°©
[
ddú
], 
u£c
);

1755 i‡(
td
->
˛©_log
)

1756 
	`add_log_ßm∂e
(
td
,Åd->
˛©_log
, 
u£c
, 
ddú
, 
bs
);

1758 i‡(
ts
->
˛©_≥r˚¡ûes
)

1759 
	`add_˛©_≥r˚¡ûe_ßm∂e
(
ts
, 
u£c
, 
ddú
);

1760 
	}
}

1762 
	$add_¶©_ßm∂e
(
thªad_d©a
 *
td
, 
fio_ddú
 
ddú
,

1763 
u£c
, 
bs
)

1765 
thªad_°©
 *
ts
 = &
td
->ts;

1767 i‡(!
	`ddú_rw
(
ddú
))

1770 
	`add_°©_ßm∂e
(&
ts
->
¶©_°©
[
ddú
], 
u£c
);

1772 i‡(
td
->
¶©_log
)

1773 
	`add_log_ßm∂e
(
td
,Åd->
¶©_log
, 
u£c
, 
ddú
, 
bs
);

1774 
	}
}

1776 
	$add_œt_ßm∂e
(
thªad_d©a
 *
td
, 
fio_ddú
 
ddú
,

1777 
u£c
, 
bs
)

1779 
thªad_°©
 *
ts
 = &
td
->ts;

1781 i‡(!
	`ddú_rw
(
ddú
))

1784 
	`add_°©_ßm∂e
(&
ts
->
œt_°©
[
ddú
], 
u£c
);

1786 i‡(
td
->
œt_log
)

1787 
	`add_log_ßm∂e
(
td
,Åd->
œt_log
, 
u£c
, 
ddú
, 
bs
);

1788 
	}
}

1790 
	$add_bw_ßm∂e
(
thªad_d©a
 *
td
, 
fio_ddú
 
ddú
, 
bs
,

1791 
timevÆ
 *
t
)

1793 
thªad_°©
 *
ts
 = &
td
->ts;

1794 
•ít
, 
øã
;

1796 i‡(!
	`ddú_rw
(
ddú
))

1799 
•ít
 = 
	`mtime_sö˚
(&
td
->
bw_ßm∂e_time
, 
t
);

1800 i‡(
•ít
 < 
td
->
o
.
bw_avg_time
)

1806 
ddú
 = 
DDIR_READ
; ddú < 
DDIR_RWDIR_CNT
; ddir++) {

1807 
uöt64_t
 
dñè
;

1809 
dñè
 = 
td
->
this_io_byãs
[
ddú
] -Åd->
°©_io_byãs
[ddir];

1810 i‡(!
dñè
)

1813 i‡(
•ít
)

1814 
øã
 = 
dñè
 * 1000 / 
•ít
 / 1024;

1816 
øã
 = 0;

1818 
	`add_°©_ßm∂e
(&
ts
->
bw_°©
[
ddú
], 
øã
);

1820 i‡(
td
->
bw_log
)

1821 
	`add_log_ßm∂e
(
td
,Åd->
bw_log
, 
øã
, 
ddú
, 
bs
);

1823 
td
->
°©_io_byãs
[
ddú
] =Åd->
this_io_byãs
[ddir];

1826 
	`fio_gëtime
(&
td
->
bw_ßm∂e_time
, 
NULL
);

1827 
	}
}

1829 
	$add_i›s_ßm∂e
(
thªad_d©a
 *
td
, 
fio_ddú
 
ddú
, 
bs
,

1830 
timevÆ
 *
t
)

1832 
thªad_°©
 *
ts
 = &
td
->ts;

1833 
•ít
, 
i›s
;

1835 i‡(!
	`ddú_rw
(
ddú
))

1838 
•ít
 = 
	`mtime_sö˚
(&
td
->
i›s_ßm∂e_time
, 
t
);

1839 i‡(
•ít
 < 
td
->
o
.
i›s_avg_time
)

1845 
ddú
 = 
DDIR_READ
; ddú < 
DDIR_RWDIR_CNT
; ddir++) {

1846 
uöt64_t
 
dñè
;

1848 
dñè
 = 
td
->
this_io_blocks
[
ddú
] -Åd->
°©_io_blocks
[ddir];

1849 i‡(!
dñè
)

1852 i‡(
•ít
)

1853 
i›s
 = (
dñè
 * 1000Ë/ 
•ít
;

1855 
i›s
 = 0;

1857 
	`add_°©_ßm∂e
(&
ts
->
i›s_°©
[
ddú
], 
i›s
);

1859 i‡(
td
->
i›s_log
)

1860 
	`add_log_ßm∂e
(
td
,Åd->
i›s_log
, 
i›s
, 
ddú
, 
bs
);

1862 
td
->
°©_io_blocks
[
ddú
] =Åd->
this_io_blocks
[ddir];

1865 
	`fio_gëtime
(&
td
->
i›s_ßm∂e_time
, 
NULL
);

1866 
	}
}

1868 
	$°©_öô
()

1870 
°©_muãx
 = 
	`fio_muãx_öô
(
FIO_MUTEX_UNLOCKED
);

1871 
	}
}

1873 
	$°©_exô
()

1879 
	`fio_muãx_down
(
°©_muãx
);

1880 
	`fio_muãx_ªmove
(
°©_muãx
);

1881 
	}
}

	@/home/terekhov/tmp/fio/fio/stat.h

1 #i‚de‡
FIO_STAT_H


2 
	#FIO_STAT_H


	)

4 
	~"iﬁog.h
"

6 
	sgroup_run_°©s
 {

7 
uöt64_t
 
	mmax_run
[
DDIR_RWDIR_CNT
], 
	mmö_run
[DDIR_RWDIR_CNT];

8 
uöt64_t
 
	mmax_bw
[
DDIR_RWDIR_CNT
], 
	mmö_bw
[DDIR_RWDIR_CNT];

9 
uöt64_t
 
	mio_kb
[
DDIR_RWDIR_CNT
];

10 
uöt64_t
 
	magg
[
DDIR_RWDIR_CNT
];

11 
uöt32_t
 
	mkb_ba£
;

12 
uöt32_t
 
	munô_ba£
;

13 
uöt32_t
 
	mgroupid
;

14 
uöt32_t
 
	munifõd_rw_ªp
;

20 
	#FIO_IO_U_MAP_NR
 7

	)

21 
	#FIO_IO_U_LAT_U_NR
 10

	)

22 
	#FIO_IO_U_LAT_M_NR
 12

	)

108 
	#FIO_IO_U_PLAT_BITS
 6

	)

109 
	#FIO_IO_U_PLAT_VAL
 (1 << 
FIO_IO_U_PLAT_BITS
)

	)

110 
	#FIO_IO_U_PLAT_GROUP_NR
 19

	)

111 
	#FIO_IO_U_PLAT_NR
 (
FIO_IO_U_PLAT_GROUP_NR
 * 
FIO_IO_U_PLAT_VAL
)

	)

112 
	#FIO_IO_U_LIST_MAX_LEN
 20

	)

115 
	#MAX_PATTERN_SIZE
 512

	)

116 
	#FIO_JOBNAME_SIZE
 128

	)

117 
	#FIO_JOBDESC_SIZE
 256

	)

118 
	#FIO_VERROR_SIZE
 128

	)

120 
	sthªad_°©
 {

121 
	m«me
[
FIO_JOBNAME_SIZE
];

122 
	mvîr‹
[
FIO_VERROR_SIZE
];

123 
uöt32_t
 
	mîr‹
;

124 
uöt32_t
 
	mthªad_numbî
;

125 
uöt32_t
 
	mgroupid
;

126 
uöt32_t
 
	mpid
;

127 
	mdes¸ùti⁄
[
FIO_JOBDESC_SIZE
];

128 
uöt32_t
 
	mmembîs
;

129 
uöt32_t
 
	munifõd_rw_ªp
;

134 
io_°©
 
	m˛©_°©
[
DDIR_RWDIR_CNT
];

135 
io_°©
 
	m¶©_°©
[
DDIR_RWDIR_CNT
];

136 
io_°©
 
	mœt_°©
[
DDIR_RWDIR_CNT
];

137 
io_°©
 
	mbw_°©
[
DDIR_RWDIR_CNT
];

138 
io_°©
 
	mi›s_°©
[
DDIR_RWDIR_CNT
];

143 
uöt64_t
 
	mu§_time
;

144 
uöt64_t
 
	msys_time
;

145 
uöt64_t
 
	m˘x
;

146 
uöt64_t
 
	mmöf
, 
	mmajf
;

151 
uöt64_t
 
	m˛©_≥r˚¡ûes
;

152 
uöt64_t
 
	m≥r˚¡ûe_¥ecisi⁄
;

153 
fio_Â64_t
 
	m≥r˚¡ûe_li°
[
FIO_IO_U_LIST_MAX_LEN
];

155 
uöt32_t
 
	mio_u_m≠
[
FIO_IO_U_MAP_NR
];

156 
uöt32_t
 
	mio_u_submô
[
FIO_IO_U_MAP_NR
];

157 
uöt32_t
 
	mio_u_com∂ëe
[
FIO_IO_U_MAP_NR
];

158 
uöt32_t
 
	mio_u_œt_u
[
FIO_IO_U_LAT_U_NR
];

159 
uöt32_t
 
	mio_u_œt_m
[
FIO_IO_U_LAT_M_NR
];

160 
uöt32_t
 
	mio_u_∂©
[
DDIR_RWDIR_CNT
][
FIO_IO_U_PLAT_NR
];

161 
uöt64_t
 
	mtŸÆ_io_u
[3];

162 
uöt64_t
 
	msh‹t_io_u
[3];

163 
uöt64_t
 
	mtŸÆ_submô
;

164 
uöt64_t
 
	mtŸÆ_com∂ëe
;

166 
uöt64_t
 
	mio_byãs
[
DDIR_RWDIR_CNT
];

167 
uöt64_t
 
	mru¡ime
[
DDIR_RWDIR_CNT
];

168 
uöt64_t
 
	mtŸÆ_run_time
;

173 
uöt16_t
 
	mc⁄töue_⁄_îr‹
;

174 
uöt64_t
 
	mtŸÆ_îr_cou¡
;

175 
uöt32_t
 
	mfú°_îr‹
;

177 
uöt32_t
 
	mkb_ba£
;

178 
uöt32_t
 
	munô_ba£
;

180 
uöt32_t
 
	mœãncy_dïth
;

181 
uöt64_t
 
	mœãncy_èrgë
;

182 
fio_Â64_t
 
	mœãncy_≥r˚¡ûe
;

183 
uöt64_t
 
	mœãncy_wödow
;

186 
	sjobs_ëa
 {

187 
uöt32_t
 
	mƒ_ru¬ög
;

188 
uöt32_t
 
	mƒ_ømp
;

189 
uöt32_t
 
	mƒ_≥ndög
;

190 
uöt32_t
 
	mƒ_£âög_up
;

191 
uöt32_t
 
	mfûes_›í
;

192 
uöt32_t
 
	mm_øã
[
DDIR_RWDIR_CNT
], 
	mt_øã
[DDIR_RWDIR_CNT];

193 
uöt32_t
 
	mm_i›s
[
DDIR_RWDIR_CNT
], 
	mt_i›s
[DDIR_RWDIR_CNT];

194 
uöt32_t
 
	møã
[
DDIR_RWDIR_CNT
];

195 
uöt32_t
 
	mi›s
[
DDIR_RWDIR_CNT
];

196 
uöt64_t
 
	mñ≠£d_£c
;

197 
uöt64_t
 
	mëa_£c
;

198 
uöt32_t
 
	mis_pow2
;

199 
uöt32_t
 
	munô_ba£
;

204 
uöt32_t
 
	mƒ_thªads
;

205 
uöt8_t
 
	mrun_°r
[];

208 
°©_öô
();

209 
°©_exô
();

211 
js⁄_obje˘
 * 
show_thªad_°©us
(
thªad_°©
 *
ts
, 
group_run_°©s
 *
rs
);

212 
show_group_°©s
(
group_run_°©s
 *
rs
);

213 
ˇlc_thªad_°©us
(
jobs_ëa
 *
je
, 
f‹˚
);

214 
di•œy_thªad_°©us
(
jobs_ëa
 *
je
);

215 
show_run_°©s
();

216 
show_ru¬ög_run_°©s
();

217 
check_f‹_ru¬ög_°©s
();

218 
sum_thªad_°©s
(
thªad_°©
 *
d°
, thªad_°© *
§c
, 
ƒ
);

219 
sum_group_°©s
(
group_run_°©s
 *
d°
, group_run_°©†*
§c
);

220 
öô_thªad_°©
(
thªad_°©
 *
ts
);

221 
öô_group_run_°©
(
group_run_°©s
 *
gs
);

222 
ëa_to_°r
(*
°r
, 
ëa_£c
);

223 
ˇlc_œt
(
io_°©
 *
is
, *
mö
, *
max
, *
món
, *
dev
);

224 
ˇlc_˛©_≥r˚¡ûes
(*
io_u_∂©
, 
ƒ
, 
fio_Â64_t
 *
∂i°
, **
ouçut
, *
maxv
, *
möv
);

225 
°©_ˇlc_œt_m
(
thªad_°©
 *
ts
, *
io_u_œt
);

226 
°©_ˇlc_œt_u
(
thªad_°©
 *
ts
, *
io_u_œt
);

227 
°©_ˇlc_di°
(*
m≠
, 
tŸÆ
, *
io_u_di°
);

228 
ª£t_io_°©s
(
thªad_d©a
 *);

230 
ölöe
 
	$u£c_to_m£c
(*
mö
, *
max
,

231 *
món
, *
dev
)

233 i‡(*
mö
 > 1000 && *
max
 > 1000 && *
món
 > 1000.0 && *
dev
 > 1000.0) {

234 *
mö
 /= 1000;

235 *
max
 /= 1000;

236 *
món
 /= 1000.0;

237 *
dev
 /= 1000.0;

242 
	}
}

	@/home/terekhov/tmp/fio/fio/t/axmap.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<f˙é.h
>

4 
	~<°rög.h
>

5 
	~<uni°d.h
>

6 
	~<öây≥s.h
>

8 
	~"../lib/lf§.h
"

9 
	~"../lib/axm≠.h
"

11 *
	$smÆloc
(
size_t
 
size
)

13  
	`mÆloc
(
size
);

14 
	}
}

16 
	$s‰ì
(*
±r
)

18 
	`‰ì
(
±r
);

19 
	}
}

21 
	$ã°_ªguœr
(
size_t
 
size
, 
£ed
)

23 
fio_lf§
 
lf§
;

24 
axm≠
 *
m≠
;

25 
size_t
 
osize
;

26 
uöt64_t
 
ff
;

27 
îr
;

29 
	`¥ötf
("Usög %ŒuÉ¡rõs...", (Ë
size
);

30 
	`fÊush
(
°dout
);

32 
	`lf§_öô
(&
lf§
, 
size
, 
£ed
, seed & 0xF);

33 
m≠
 = 
	`axm≠_√w
(
size
);

34 
osize
 = 
size
;

35 
îr
 = 0;

37 
size
--) {

38 
uöt64_t
 
vÆ
;

40 i‡(
	`lf§_√xt
(&
lf§
, &
vÆ
, 
osize
)) {

41 
	`¥ötf
("lfsr: shortÜoop\n");

42 
îr
 = 1;

45 i‡(
	`axm≠_is£t
(
m≠
, 
vÆ
)) {

46 
	`¥ötf
("bitálready set\n");

47 
îr
 = 1;

50 
	`axm≠_£t
(
m≠
, 
vÆ
);

51 i‡(!
	`axm≠_is£t
(
m≠
, 
vÆ
)) {

52 
	`¥ötf
("bitÇot set\n");

53 
îr
 = 1;

58 i‡(
îr
)

59  
îr
;

61 
ff
 = 
	`axm≠_√xt_‰ì
(
m≠
, 
osize
);

62 i‡(
ff
 !(
uöt64_t
) -1ULL) {

63 
	`¥ötf
("axm≠_√xt_‰ì brokí: gŸ %Œu\n", (Ë
ff
);

67 
	`¥ötf
("pass!\n");

68 
	`axm≠_‰ì
(
m≠
);

70 
	}
}

72 
	$ã°_mu…i
(
size_t
 
size
, 
bô_off
)

74 
m≠_size
 = 
size
;

75 
axm≠
 *
m≠
;

76 
uöt64_t
 
vÆ
 = 
bô_off
;

77 
i
, 
îr
;

79 
	`¥ötf
("Te° mu…ò%ŒuÉ¡rõ†%u off£t...", (Ë
size
, 
bô_off
);

80 
	`fÊush
(
°dout
);

82 
m≠
 = 
	`axm≠_√w
(
m≠_size
);

83 
vÆ
 + 128 <
m≠_size
) {

84 
îr
 = 0;

85 
i
 = 
vÆ
; i < val + 128; i++) {

86 i‡(
	`axm≠_is£t
(
m≠
, 
vÆ
 + 
i
)) {

87 
	`¥ötf
("bitálready set\n");

88 
îr
 = 1;

93 i‡(
îr
)

96 
îr
 = 
	`axm≠_£t_ƒ
(
m≠
, 
vÆ
, 128);

97 i‡(
îr
 != 128) {

98 
	`¥ötf
("⁄ly së %u bôs\n", 
îr
);

102 
îr
 = 0;

103 
i
 = 0; i < 128; i++) {

104 i‡(!
	`axm≠_is£t
(
m≠
, 
vÆ
 + 
i
)) {

105 
	`¥ötf
("bôÇŸ së: %Œu\n", (Ë
vÆ
 + 
i
);

106 
îr
 = 1;

111 
vÆ
 += 128;

112 i‡(
îr
)

116 i‡(!
îr
)

117 
	`¥ötf
("pass!\n");

119 
	`axm≠_‰ì
(
m≠
);

120  
îr
;

121 
	}
}

123 
	$maö
(
¨gc
, *
¨gv
[])

125 
size_t
 
size
 = (1UL << 23) - 200;

126 
£ed
 = 1;

128 i‡(
¨gc
 > 1) {

129 
size
 = 
	`°πoul
(
¨gv
[1], 
NULL
, 10);

130 i‡(
¨gc
 > 2)

131 
£ed
 = 
	`°πoul
(
¨gv
[2], 
NULL
, 10);

134 i‡(
	`ã°_ªguœr
(
size
, 
£ed
))

136 i‡(
	`ã°_mu…i
(
size
, 0))

138 i‡(
	`ã°_mu…i
(
size
, 17))

142 
	}
}

	@/home/terekhov/tmp/fio/fio/t/genzipf.c

15 
	~<°dio.h
>

16 
	~<°dlib.h
>

17 
	~<f˙é.h
>

18 
	~<°rög.h
>

19 
	~<uni°d.h
>

21 
	~"../lib/zùf.h
"

22 
	~"../Êi°.h
"

23 
	~"../hash.h
"

25 
	#DEF_NR
 1000000

	)

26 
	#DEF_NR_OUTPUT
 23

	)

28 
	snode
 {

29 
Êi°_hód
 
	mli°
;

30 
	mvÆ
;

31 
	mhôs
;

34 
Êi°_hód
 *
	ghash
;

35 
	ghash_bôs
 = 24;

36 
	ghash_size
 = 1 << 24;

39 
	mTYPE_NONE
 = 0,

40 
	mTYPE_ZIPF
,

41 
	mTYPE_PARETO
,

43 c⁄° *
	gdi°_ty≥s
[] = { "None", "Zipf", "Pareto" };

45 
	gdi°_ty≥
 = 
TYPE_ZIPF
;

46 
	ggb_size
 = 500;

47 
	gblock_size
 = 4096;

48 
	gouçut_ƒ™ges
 = 
DEF_NR_OUTPUT
;

49 
	g≥r˚¡age
;

50 
	gdi°_vÆ
;

51 
	gouçut_csv
 = 0;

53 
	#DEF_ZIPF_VAL
 1.2

	)

54 
	#DEF_PARETO_VAL
 0.3

	)

56 
node
 *
	$hash_lookup
(
vÆ
)

58 
Êi°_hód
 *
l
 = &
hash
[
	`hash_l⁄g
(
vÆ
, 
hash_bôs
)];

59 
Êi°_hód
 *
íåy
;

60 
node
 *
n
;

62 
	`Êi°_f‹_óch
(
íåy
, 
l
) {

63 
n
 = 
	`Êi°_íåy
(
íåy
, 
node
, 
li°
);

64 i‡(
n
->
vÆ
 == val)

65  
n
;

68  
NULL
;

69 
	}
}

71 
node
 *
	$hash_ö£π
(
node
 *
n
, 
vÆ
)

73 
Êi°_hód
 *
l
 = &
hash
[
	`hash_l⁄g
(
vÆ
, 
hash_bôs
)];

75 
n
->
vÆ
 = val;

76 
n
->
hôs
 = 1;

77 
	`Êi°_add_èû
(&
n
->
li°
, 
l
);

78  
n
;

79 
	}
}

81 
	$ußge
()

83 
	`¥ötf
("genzipf:Åest zipf/pareto values for fio input\n");

84 
	`¥ötf
("\t-h\tThis help screen\n");

85 
	`¥ötf
("\t-p\tGenerate size of data setÅhatáre hit byÅhisÖercentage\n");

86 
	`¥ötf
("\t-t\tDistributionÅype (zipf orÖareto)\n");

87 
	`¥ötf
("\t-i\tDistributionálgorithm input (zipfÅheta orÖaretoÖower)\n");

88 
	`¥ötf
("\t-b\tBlock size ofá givenÑange (in bytes)\n");

89 
	`¥ötf
("\t-g\tSize of data set (in gigabytes)\n");

90 
	`¥ötf
("\t-o\tNumber of output columns\n");

91 
	`¥ötf
("\t-c\tOutputÑanges in CSV format\n");

92 
	}
}

94 
	$∑r£_›ti⁄s
(
¨gc
, *
¨gv
[])

96 c⁄° *
›t°rög
 = "t:g:i:o:b:p:ch";

97 
c
, 
di°_vÆ_£t
 = 0;

99 (
c
 = 
	`gë›t
(
¨gc
, 
¨gv
, 
›t°rög
)) != -1) {

100 
c
) {

102 
	`ußge
();

105 
≥r˚¡age
 = 
	`©of
(
›èrg
);

108 
block_size
 = 
	`°πoul
(
›èrg
, 
NULL
, 10);

111 i‡(!
	`°∫cmp
(
›èrg
, "zipf", 4))

112 
di°_ty≥
 = 
TYPE_ZIPF
;

113 i‡(!
	`°∫cmp
(
›èrg
, "pareto", 6))

114 
di°_ty≥
 = 
TYPE_PARETO
;

116 
	`¥ötf
("wr⁄g di°Åy≥: %s\n", 
›èrg
);

121 
gb_size
 = 
	`°πoul
(
›èrg
, 
NULL
, 10);

124 
di°_vÆ
 = 
	`©of
(
›èrg
);

125 
di°_vÆ_£t
 = 1;

128 
ouçut_ƒ™ges
 = 
	`°πoul
(
›èrg
, 
NULL
, 10);

131 
ouçut_csv
 = 1;

134 
	`¥ötf
("bad o±i⁄ %c\n", 
c
);

139 i‡(
di°_ty≥
 =
TYPE_PARETO
) {

140 i‡((
di°_vÆ
 >= 1.00 || dist_val < 0.00)) {

141 
	`¥ötf
("pareto input must be > 0.00ánd < 1.00\n");

144 i‡(!
di°_vÆ_£t
)

145 
di°_vÆ
 = 
DEF_PARETO_VAL
;

146 } i‡(
di°_ty≥
 =
TYPE_ZIPF
) {

147 i‡(
di°_vÆ
 == 1.0) {

148 
	`¥ötf
("zipf input must be differentÅhan 1.0\n");

151 i‡(!
di°_vÆ_£t
)

152 
di°_vÆ
 = 
DEF_ZIPF_VAL
;

156 
	}
}

158 
	souçut_sum
 {

159 
	mouçut
;

160 
	mƒ™ges
;

163 
	$node_cmp
(c⁄° *
p1
, c⁄° *
p2
)

165 c⁄° 
node
 *
n1
 = 
p1
;

166 c⁄° 
node
 *
n2
 = 
p2
;

168  
n2
->
hôs
 - 
n1
->hits;

169 
	}
}

171 
	$maö
(
¨gc
, *
¨gv
[])

173 
off£t
;

174 
i
, 
j
, 
k
, 
ƒ_vÆs
, 
cur_vÆs
, 
öãrvÆ
, 
tŸÆ_vÆs
, 
¬odes
;

175 
ƒ™ges
;

176 
ouçut_sum
 *
ouçut_sums
;

177 
node
 *
nodes
;

178 
≥rc
, 
≥rc_i
;

179 
zùf_°©e
 
zs
;

181 i‡(
	`∑r£_›ti⁄s
(
¨gc
, 
¨gv
))

184 if–!
ouçut_csv
 )

185 
	`¥ötf
("Gíî©ög %†di°ributi⁄ wôh %‡öpuà™d %lu GB sizê™d %lu block_size.\n", 
di°_ty≥s
[
di°_ty≥
], 
di°_vÆ
, 
gb_size
, 
block_size
);

187 
ƒ™ges
 = 
gb_size
 * 1024 * 1024 * 1024ULL;

188 
ƒ™ges
 /
block_size
;

190 i‡(
di°_ty≥
 =
TYPE_ZIPF
)

191 
	`zùf_öô
(&
zs
, 
ƒ™ges
, 
di°_vÆ
, 1);

193 
	`∑ªto_öô
(&
zs
, 
ƒ™ges
, 
di°_vÆ
, 1);

195 
hash_bôs
 = 0;

196 
hash_size
 = 
ƒ™ges
;

197 (
hash_size
 >>= 1) != 0)

198 
hash_bôs
++;

200 
hash_size
 = 1 << 
hash_bôs
;

202 
hash
 = 
	`mÆloc
(
hash_size
 * (
Êi°_hód
));

203 
i
 = 0; i < 
hash_size
; i++)

204 
	`INIT_FLIST_HEAD
(&
hash
[
i
]);

206 
nodes
 = 
	`mÆloc
(
ƒ™ges
 * (
node
));

208 
ƒ_vÆs
 = 
i
 = 
j
 = 0; i < 
ƒ™ges
; i++) {

209 
node
 *
n
;

211 i‡(
di°_ty≥
 =
TYPE_ZIPF
)

212 
off£t
 = 
	`zùf_√xt
(&
zs
);

214 
off£t
 = 
	`∑ªto_√xt
(&
zs
);

216 
n
 = 
	`hash_lookup
(
off£t
);

217 i‡(
n
)

218 
n
->
hôs
++;

220 
	`hash_ö£π
(&
nodes
[
j
], 
off£t
);

221 
j
++;

224 
ƒ_vÆs
++;

227 
	`qs‹t
(
nodes
, 
j
, (
node
), 
node_cmp
);

228 
¬odes
 = 
j
;

229 
ƒ_vÆs
 = 
¬odes
;

231 i‡(
ouçut_csv
) {

232 
	`¥ötf
("rank, count\n");

233 
k
 = 0; k < 
¬odes
; k++)

234 
	`¥ötf
("%lu, %lu\n", 
k
, 
nodes
[k].
hôs
);

236 
öãrvÆ
 = (
ƒ_vÆs
 + 
ouçut_ƒ™ges
 - 1) / output_nranges;

238 
ouçut_sums
 = 
	`mÆloc
(
ouçut_ƒ™ges
 * (
ouçut_sum
));

239 
i
 = 0; i < 
ouçut_ƒ™ges
; i++) {

240 
ouçut_sums
[
i
].
ouçut
 = 0.0;

241 
ouçut_sums
[
i
].
ƒ™ges
 = 1;

244 
tŸÆ_vÆs
 = 
i
 = 
j
 = 
cur_vÆs
 = 0;

246 
k
 = 0; k < 
¬odes
; k++) {

247 
ouçut_sum
 *
os
 = &
ouçut_sums
[
j
];

248 
node
 *nodê&
nodes
[
k
];

250 i‡(
i
 >
öãrvÆ
) {

251 
os
->
ouçut
 =

252 ()(
cur_vÆs
 + 1Ë/ ()
ƒ™ges
;

253 
os
->
ouçut
 *= 100.0;

254 
j
++;

255 
cur_vÆs
 = 
node
->
hôs
;

256 
öãrvÆ
 +=

257 (
ƒ_vÆs
 + 
ouçut_ƒ™ges
 -

258 1Ë/ 
ouçut_ƒ™ges
;

260 
cur_vÆs
 +
node
->
hôs
;

261 
os
->
ƒ™ges
 +
node
->
hôs
;

264 
i
++;

265 
tŸÆ_vÆs
 +
node
->
hôs
;

267 i‡(
≥r˚¡age
) {

268 
blocks
 =

269 
≥r˚¡age
 * 
ƒ™ges
 / 100;

271 i‡(
tŸÆ_vÆs
 >
blocks
) {

272 
cs
 =

273 
i
 * 
block_size
 / (1024 * 1024);

274 
p
 = 'M';

276 i‡(
cs
 > 1024.0) {

277 
cs
 /= 1024.0;

278 
p
 = 'G';

280 i‡(
cs
 > 1024.0) {

281 
cs
 /= 1024.0;

282 
p
 = 'T';

285 
	`¥ötf
("%.2f%% o‡hô†ßtisfõd i¿%.3f%cB o‡ˇche\n", 
≥r˚¡age
, 
cs
, 
p
);

286 
≥r˚¡age
 = 0.0;

291 
≥rc_i
 = 100.0 / ()
ouçut_ƒ™ges
;

292 
≥rc
 = 0.0;

294 
	`¥ötf
("\n Rows Hits No Hits Size\n");

295 
	`¥ötf
("--------------------------------------------------------\n");

296 
i
 = 0; i < 
j
; i++) {

297 
ouçut_sum
 *
os
 = &
ouçut_sums
[
i
];

298 
gb
 = ()
os
->
ƒ™ges
 * 
block_size
 / 1024.0;

299 
p
 = 'K';

301 i‡(
gb
 > 1024.0) {

302 
p
 = 'M';

303 
gb
 /= 1024.0;

305 i‡(
gb
 > 1024.0) {

306 
p
 = 'G';

307 
gb
 /= 1024.0;

310 
≥rc
 +
≥rc_i
;

311 
	`¥ötf
("%s %6.2f%%\t%6.2f%%\t\t%8u\t%6.2f%c\n",

312 
i
 ? "|->" : "T›", 
≥rc
, 
os
->
ouçut
, os->
ƒ™ges
,

313 
gb
, 
p
);

316 
	`‰ì
(
ouçut_sums
);

319 
	`‰ì
(
hash
);

320 
	`‰ì
(
nodes
);

322 
	}
}

	@/home/terekhov/tmp/fio/fio/t/ieee754.c

1 
	~<°dio.h
>

2 
	~"../lib/õì754.h
"

4 
	gvÆues
[] = { -17.23, 17.23, 123.4567, 98765.4321, 0.0 };

6 
	$maö
(
¨gc
, *
¨gv
[])

8 
uöt64_t
 
i
;

9 
f
;

10 
j
;

12 
j
 = 0;

14 
i
 = 
	`fio_doubÀ_to_uöt64
(
vÆues
[
j
]);

15 
f
 = 
	`fio_uöt64_to_doubÀ
(
i
);

16 
	`¥ötf
("%‡-> %f\n", 
vÆues
[
j
], 
f
);

17 
j
++;

18 } 
vÆues
[
j
] != 0.0);

21 
	}
}

	@/home/terekhov/tmp/fio/fio/t/lfsr-test.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<time.h
>

4 
	~<m©h.h
>

5 
	~<°rög.h
>

6 
	~<uni°d.h
>

7 
	~<sys/ty≥s.h
>

8 
	~<sys/°©.h
>

10 
	~"../lib/lf§.h
"

12 
	$ußge
()

14 
	`¥ötf
("Usage:Üfsr-test 0x<numbers> [seed] [spin] [verify]\n");

15 
	`¥ötf
("-------------------------------------------------------------\n");

16 
	`¥ötf
("*numbers: how manyÑandomÇumbersÅoÖroduce (in hex)\n"

23 
	}
}

25 
	$maö
(
¨gc
, *
¨gv
[])

27 
r
;

28 
time•ec
 
°¨t
, 
íd
;

29 
fio_lf§
 *
Ê
;

30 
vîify
 = 0;

31 
•ö
 = 0;

32 
uöt64_t
 
£ed
 = 0;

33 
uöt64_t
 
numbîs
;

34 
uöt64_t
 
v_size
;

35 
uöt64_t
 
i
;

36 *
v
 = 
NULL
, *
v_°¨t
;

37 
tŸÆ
, 
món
;

40 
¨gc
) {

41 5: i‡(
	`°∫cmp
(
¨gv
[4], "verify", 7) == 0)

42 
vîify
 = 1;

43 4: 
•ö
 = 
	`©oi
(
¨gv
[3]);

44 3: 
£ed
 = 
	`©ﬁ
(
¨gv
[2]);

45 2: 
numbîs
 = 
	`°πﬁ
(
¨gv
[1], 
NULL
, 16);

47 : 
	`ußge
();

52 
Ê
 = 
	`mÆloc
((
fio_lf§
));

53 i‡(!
Ê
) {

54 
	`≥º‹
("malloc");

58 
r
 = 
	`lf§_öô
(
Ê
, 
numbîs
, 
£ed
, 
•ö
);

59 i‡(
r
) {

60 
	`¥ötf
("Initialization failed.\n");

61  
r
;

65 
	`¥ötf
("LFSR specs\n");

66 
	`¥ötf
("==========================\n");

67 
	`¥ötf
("Sizêi† %u\n", 64 - 
	`__buûtö_˛zl
(
Ê
->
ˇched_bô
));

68 
	`¥ötf
("Max vÆ i† %lu\n", 
Ê
->
max_vÆ
);

69 
	`¥ötf
("XOR-mask i† 0x%lX\n", 
Ê
->
x‹mask
);

70 
	`¥ötf
("Sìd i† %lu\n", 
Ê
->
œ°_vÆ
);

71 
	`¥ötf
("Spö i† %u\n", 
Ê
->
•ö
);

72 
	`¥ötf
("Cy˛êÀngth i†%lu\n", 
Ê
->
cy˛e_Àngth
);

75 i‡(
vîify
) {

76 
v_size
 = 
numbîs
 * (
uöt8_t
);

77 
v
 = 
	`mÆloc
(
v_size
);

78 
	`mem£t
(
v
, 0, 
v_size
);

79 
	`¥ötf
("\nVîifiˇti⁄ÅabÀ i†%l‡KBs\n", ()(
v_size
) / 1024);

81 
v_°¨t
 = 
v
;

88 
	`Ârötf
(
°dîr
, "\nTest initiated... ");

89 
	`˛ock_gëtime
(
CLOCK_PROCESS_CPUTIME_ID
, &
°¨t
);

90 !
	`lf§_√xt
(
Ê
, &
i
, fl->
max_vÆ
)) {

91 i‡(
vîify
)

92 *(
uöt8_t
 *)(
v
 + 
i
) += 1;

94 
	`˛ock_gëtime
(
CLOCK_PROCESS_CPUTIME_ID
, &
íd
);

95 
	`Ârötf
(
°dîr
, "finished.\n");

99 
r
 = 0;

100 i‡(
vîify
) {

101 
	`Ârötf
(
°dîr
, "VerifyingÑesults... ");

102 
i
 = 0; i < 
numbîs
; i++) {

103 i‡(*(
uöt8_t
 *)(
v
 + 
i
) != 1) {

104 
	`Ârötf
(
°dîr
, "failed (%lu = %d).\n",

105 
i
, *(
uöt8_t
 *)(
v
 + i));

106 
r
 = 1;

110 i‡(!
r
)

111 
	`Ârötf
(
°dîr
, "OK!\n");

115 
tŸÆ
 = (
íd
.
tv_£c
 - 
°¨t
.tv_£cË* 
	`pow
(10,9) +

116 
íd
.
tv_n£c
 - 
°¨t
.tv_nsec;

117 
món
 = 
tŸÆ
 / 
Ê
->
num_vÆs
;

119 
	`¥ötf
("\nTimeÑesults ");

120 i‡(
vîify
)

121 
	`¥ötf
("(slower dueÅo verification)");

122 
	`¥ötf
("\n==============================\n");

123 
	`¥ötf
("Eœp£d: %l‡s\n", 
tŸÆ
 / 
	`pow
(10,9));

124 
	`¥ötf
("Món: %l‡ns\n", 
món
);

126 
	`‰ì
(
v_°¨t
);

127 
	`‰ì
(
Ê
);

128  
r
;

129 
	}
}

	@/home/terekhov/tmp/fio/fio/t/log.c

1 
	~<°dio.h
>

2 
	~<°d¨g.h
>

3 
	~"../mömax.h
"

5 
	$log_îr
(c⁄° *
f‹m©
, ...)

7 
buf„r
[1024];

8 
va_li°
 
¨gs
;

9 
size_t
 
Àn
;

11 
	`va_°¨t
(
¨gs
, 
f‹m©
);

12 
Àn
 = 
	`v¢¥ötf
(
buf„r
, (buf„r), 
f‹m©
, 
¨gs
);

13 
	`va_íd
(
¨gs
);

14 
Àn
 = 
	`mö
÷í, (
buf„r
) - 1);

16  
	`fwrôe
(
buf„r
, 
Àn
, 1, 
°dîr
);

17 
	}
}

19 
	$log_öfo
(c⁄° *
f‹m©
, ...)

21 
buf„r
[1024];

22 
va_li°
 
¨gs
;

23 
size_t
 
Àn
;

25 
	`va_°¨t
(
¨gs
, 
f‹m©
);

26 
Àn
 = 
	`v¢¥ötf
(
buf„r
, (buf„r), 
f‹m©
, 
¨gs
);

27 
	`va_íd
(
¨gs
);

28 
Àn
 = 
	`mö
÷í, (
buf„r
) - 1);

30  
	`fwrôe
(
buf„r
, 
Àn
, 1, 
°dout
);

31 
	}
}

	@/home/terekhov/tmp/fio/fio/t/stest.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<as£π.h
>

5 
	~"../smÆloc.h
"

6 
	~"../Êi°.h
"

8 
FILE
 *
	gf_îr
;

9 
timevÆ
 *
	gfio_tv
 = 
NULL
;

10 
	gfio_debug
 = 0;

12 
	#MAGIC1
 0xa9b1c8d2

	)

13 
	#MAGIC2
 0xf0a1e9b3

	)

15 
	#LOOPS
 32

	)

17 
	sñem
 {

18 
	mmagic1
;

19 
Êi°_hód
 
	mli°
;

20 
	mmagic2
;

23 
FLIST_HEAD
(
li°
);

25 
	$do_ønd_Ælocs
()

27 
size
, 
ƒ
, 
rounds
 = 0;

28 
tŸÆ
;

29 
ñem
 *
e
;

31 
rounds
++ < 
LOOPS
) {

32 #ifde‡
STEST_SEED


33 
	`§™d
(
MAGIC1
);

35 
ƒ
 = 
tŸÆ
 = 0;

36 
tŸÆ
 < 128*1024*1024UL) {

37 
size
 = 8 * (
ñem
Ë+ (Ë(999.0 * (
	`ønd
(Ë/ (
RAND_MAX
 + 1.0)));

38 
e
 = 
	`smÆloc
(
size
);

39 i‡(!
e
) {

40 
	`¥ötf
("Áûáà%lu, sizê%u\n", 
tŸÆ
, 
size
);

43 
e
->
magic1
 = 
MAGIC1
;

44 
e
->
magic2
 = 
MAGIC2
;

45 
tŸÆ
 +
size
;

46 
	`Êi°_add_èû
(&
e
->
li°
, &list);

47 
ƒ
++;

50 
	`¥ötf
("GŸ iãms: %u\n", 
ƒ
);

52 !
	`Êi°_em±y
(&
li°
)) {

53 
e
 = 
	`Êi°_íåy
(
li°
.
√xt
, 
ñem
,Üist);

54 
	`as£π
(
e
->
magic1
 =
MAGIC1
);

55 
	`as£π
(
e
->
magic2
 =
MAGIC2
);

56 
	`Êi°_dñ
(&
e
->
li°
);

57 
	`s‰ì
(
e
);

62 
	}
}

64 
	$do_•ecific_Æloc
(
size
)

66 *
±r
;

68 
±r
 = 
	`smÆloc
(
size
);

69 
	`s‰ì
(
±r
);

71 
	}
}

73 
	$maö
(
¨gc
, *
¨gv
[])

75 
f_îr
 = 
°dîr
;

77 
	`söô
();

79 
	`do_ønd_Ælocs
();

82 
	`do_•ecific_Æloc
(671386584);

84 
	`s˛ónup
();

86 
	}
}

88 
	$__d¥öt
(
ty≥
, c⁄° *
°r
, ...)

90 
	}
}

	@/home/terekhov/tmp/fio/fio/td_error.c

1 
	~"fio.h
"

2 
	~"io_ddú.h
"

3 
	~"td_îr‹.h
"

5 
	g__NON_FATAL_ERR
[] = { 
EIO
, 
EILSEQ
 };

7 
îr‹_ty≥_bô
 
	$td_îr‹_ty≥
(
fio_ddú
 
ddú
, 
îr
)

9 i‡(
îr
 =
EILSEQ
)

10  
ERROR_TYPE_VERIFY_BIT
;

11 i‡(
ddú
 =
DDIR_READ
)

12  
ERROR_TYPE_READ_BIT
;

13  
ERROR_TYPE_WRITE_BIT
;

14 
	}
}

16 
	$td_n⁄_Áèl_îr‹
(
thªad_d©a
 *
td
, 
îr‹_ty≥_bô
 
ëy≥
,

17 
îr
)

19 
i
;

21 i‡(!
td
->
o
.
ign‹e_îr‹
[
ëy≥
]) {

22 
td
->
o
.
ign‹e_îr‹
[
ëy≥
] = 
__NON_FATAL_ERR
;

23 
td
->
o
.
ign‹e_îr‹_ƒ
[
ëy≥
] = (
__NON_FATAL_ERR
)

27 i‡(!(
td
->
o
.
c⁄töue_⁄_îr‹
 & (1 << 
ëy≥
)))

29 
i
 = 0; i < 
td
->
o
.
ign‹e_îr‹_ƒ
[
ëy≥
]; i++)

30 i‡(
td
->
o
.
ign‹e_îr‹
[
ëy≥
][
i
] =
îr
)

34 
	}
}

36 
	$upd©e_îr‹_cou¡
(
thªad_d©a
 *
td
, 
îr
)

38 
td
->
tŸÆ_îr_cou¡
++;

39 i‡(
td
->
tŸÆ_îr_cou¡
 == 1)

40 
td
->
fú°_îr‹
 = 
îr
;

41 
	}
}

	@/home/terekhov/tmp/fio/fio/td_error.h

1 #i‚de‡
FIO_TD_ERROR_H


2 
	#FIO_TD_ERROR_H


	)

7 
	eîr‹_ty≥_bô
 {

8 
	mERROR_TYPE_READ_BIT
 = 0,

9 
	mERROR_TYPE_WRITE_BIT
 = 1,

10 
	mERROR_TYPE_VERIFY_BIT
 = 2,

11 
	mERROR_TYPE_CNT
 = 3,

14 
	eîr‹_ty≥
 {

15 
	mERROR_TYPE_NONE
 = 0,

16 
	mERROR_TYPE_READ
 = 1 << 
ERROR_TYPE_READ_BIT
,

17 
	mERROR_TYPE_WRITE
 = 1 << 
ERROR_TYPE_WRITE_BIT
,

18 
	mERROR_TYPE_VERIFY
 = 1 << 
ERROR_TYPE_VERIFY_BIT
,

19 
	mERROR_TYPE_ANY
 = 0xffff,

22 
îr‹_ty≥_bô
 
td_îr‹_ty≥
(
fio_ddú
 
ddú
, 
îr
);

23 
td_n⁄_Áèl_îr‹
(
thªad_d©a
 *
td
, 
îr‹_ty≥_bô
 
ëy≥
,

24 
îr
);

25 
upd©e_îr‹_cou¡
(
thªad_d©a
 *
td
, 
îr
);

	@/home/terekhov/tmp/fio/fio/thread_options.h

1 #i‚de‡
FIO_THREAD_OPTIONS_H


2 
	#FIO_THREAD_OPTIONS_H


	)

4 
	~"¨ch/¨ch.h
"

5 
	~"os/os.h
"

6 
	~"°©.h
"

7 
	~"gëtime.h
"

8 
	~"lib/õì754.h
"

9 
	~"td_îr‹.h
"

14 
	efio_memty≥
 {

15 
	mMEM_MALLOC
 = 0,

16 
	mMEM_SHM
,

17 
	mMEM_SHMHUGE
,

18 
	mMEM_MMAP
,

19 
	mMEM_MMAPHUGE
,

22 
	#ERROR_STR_MAX
 128

	)

24 
	#BSSPLIT_MAX
 64

	)

26 
	sbs•lô
 {

27 
uöt32_t
 
	mbs
;

28 
uöt32_t
 
	m≥rc
;

31 
	#OPT_MAGIC
 0x4f50544e

	)

33 
	sthªad_›ti⁄s
 {

34 
	mmagic
;

35 *
	mdes¸ùti⁄
;

36 *
	m«me
;

37 *
	mdúe˘‹y
;

38 *
	mfûíame
;

39 *
	mfûíame_f‹m©
;

40 *
	m›ídú
;

41 *
	mi€ngöe
;

42 *
	mmm≠fûe
;

43 
td_ddú
 
	mtd_ddú
;

44 
	mrw_£q
;

45 
	mkb_ba£
;

46 
	munô_ba£
;

47 
	mddú_£q_ƒ
;

48 
	mddú_£q_add
;

49 
	miodïth
;

50 
	miodïth_low
;

51 
	miodïth_b©ch
;

52 
	miodïth_b©ch_com∂ëe
;

54 
	msize
;

55 
	mio_limô
;

56 
	msize_≥r˚¡
;

57 
	mfûl_devi˚
;

58 
	mfûe_≠≥nd
;

59 
	mfûe_size_low
;

60 
	mfûe_size_high
;

61 
	m°¨t_off£t
;

63 
	mbs
[
DDIR_RWDIR_CNT
];

64 
	mba
[
DDIR_RWDIR_CNT
];

65 
	mmö_bs
[
DDIR_RWDIR_CNT
];

66 
	mmax_bs
[
DDIR_RWDIR_CNT
];

67 
bs•lô
 *
	mbs•lô
[
DDIR_RWDIR_CNT
];

68 
	mbs•lô_ƒ
[
DDIR_RWDIR_CNT
];

70 *
	mign‹e_îr‹
[
ERROR_TYPE_CNT
];

71 
	mign‹e_îr‹_ƒ
[
ERROR_TYPE_CNT
];

72 
	mîr‹_dump
;

74 
	mƒ_fûes
;

75 
	m›í_fûes
;

76 
fûe_lock_mode
 
	mfûe_lock_mode
;

78 
	modúe˘
;

79 
	mﬂtomic
;

80 
	mövÆid©e_ˇche
;

81 
	m¸óã_£rülize
;

82 
	m¸óã_fsync
;

83 
	m¸óã_⁄_›í
;

84 
	m¸óã_⁄ly
;

85 
	míd_fsync
;

86 
	m¥e_ªad
;

87 
	msync_io
;

88 
	mvîify
;

89 
	mdo_vîify
;

90 
	mvîifys‹t
;

91 
	mvîifys‹t_ƒ
;

92 
	mvîify_öãrvÆ
;

93 
	mvîify_off£t
;

94 
	mvîify_∑âîn
[
MAX_PATTERN_SIZE
];

95 
	mvîify_∑âîn_byãs
;

96 
	mvîify_Áèl
;

97 
	mvîify_dump
;

98 
	mvîify_async
;

99 
	mvîify_backlog
;

100 
	mvîify_b©ch
;

101 
	mex≥rimíèl_vîify
;

102 
	mu£_thªad
;

103 
	mu∆ök
;

104 
	mdo_disk_utû
;

105 
	movîride_sync
;

106 
	mønd_ª≥©abÀ
;

107 
	mÆÃ™d_ª≥©abÀ
;

108 
	mønd_£ed
;

109 
	mu£_os_ønd
;

110 
	mlog_avg_m£c
;

111 
	mn‹™domm≠
;

112 
	mso·øndomm≠
;

113 
	mbs_u«lig√d
;

114 
	mfsync_⁄_˛o£
;

115 
	mbs_is_£q_ønd
;

117 
	mvîify_⁄ly
;

119 
	møndom_di°ributi⁄
;

121 
fio_Â64_t
 
	mzùf_thëa
;

122 
fio_Â64_t
 
	m∑ªto_h
;

124 
	møndom_gíî©‹
;

126 
	m≥rc_ønd
[
DDIR_RWDIR_CNT
];

128 
	mhugïage_size
;

129 
	mrw_mö_bs
;

130 
	mthöktime
;

131 
	mthöktime_•ö
;

132 
	mthöktime_blocks
;

133 
	mfsync_blocks
;

134 
	mfd©async_blocks
;

135 
	mb¨rõr_blocks
;

136 
	m°¨t_dñay
;

137 
	m°¨t_dñay_high
;

138 
	mtimeout
;

139 
	mømp_time
;

140 
	movîwrôe
;

141 
	mbw_avg_time
;

142 
	mi›s_avg_time
;

143 
	mlo›s
;

144 
	mz⁄e_ønge
;

145 
	mz⁄e_size
;

146 
	mz⁄e_skù
;

147 
	mlockmem
;

148 
fio_memty≥
 
	mmem_ty≥
;

149 
	mmem_Æign
;

151 
	mmax_œãncy
;

153 
	m°⁄ewÆl
;

154 
	m√w_group
;

155 
	mnumjobs
;

156 
os_˝u_mask_t
 
	m˝umask
;

157 
	m˝umask_£t
;

158 
os_˝u_mask_t
 
	mvîify_˝umask
;

159 
	mvîify_˝umask_£t
;

160 
	m˝us_Ælowed_pﬁicy
;

161 *
	mnuma_˝unodes
;

162 
	mnuma_˝umask_£t
;

163 
	mnuma_mem_mode
;

164 
	mnuma_mem_¥e„r_node
;

165 *
	mnuma_memnodes
;

166 
	mnuma_memmask_£t
;

167 
	miﬁog
;

168 
	mrwmixcy˛e
;

169 
	mrwmix
[
DDIR_RWDIR_CNT
];

170 
	mni˚
;

171 
	mi›rio
;

172 
	mi›rio_˛ass
;

173 
	mfûe_£rvi˚_ty≥
;

174 
	mgroup_ªp‹tög
;

175 
	mÁdvi£_höt
;

176 
fio_ÁŒoˇã_mode
 
	mÁŒoˇã_mode
;

177 
	mzîo_buf„rs
;

178 
	mªfûl_buf„rs
;

179 
	ms¸ambÀ_buf„rs
;

180 
	mbuf„r_∑âîn
[
MAX_PATTERN_SIZE
];

181 
	mbuf„r_∑âîn_byãs
;

182 
	mcom¥ess_≥r˚¡age
;

183 
	mcom¥ess_chunk
;

184 
	mtime_ba£d
;

185 
	mdißbÀ_œt
;

186 
	mdißbÀ_˛©
;

187 
	mdißbÀ_¶©
;

188 
	mdißbÀ_bw
;

189 
	munifõd_rw_ªp
;

190 
	mgtod_ªdu˚
;

191 
	mgtod_˝u
;

192 
	mgtod_ofÊﬂd
;

193 
fio_cs
 
	m˛ocksour˚
;

194 
	mno_°Æl
;

195 
	måim_≥r˚¡age
;

196 
	måim_b©ch
;

197 
	måim_zîo
;

198 
	måim_backlog
;

199 
	m˛©_≥r˚¡ûes
;

200 
	m≥r˚¡ûe_¥ecisi⁄
;

201 
fio_Â64_t
 
	m≥r˚¡ûe_li°
[
FIO_IO_U_LIST_MAX_LEN
];

203 *
	mªad_iﬁog_fûe
;

204 *
	mwrôe_iﬁog_fûe
;

205 *
	mbw_log_fûe
;

206 *
	mœt_log_fûe
;

207 *
	mi›s_log_fûe
;

208 *
	mª∂ay_ªdúe˘
;

213 *
	mexec_¥îun
;

214 *
	mexec_po°run
;

216 
	møã
[
DDIR_RWDIR_CNT
];

217 
	møãmö
[
DDIR_RWDIR_CNT
];

218 
	møãcy˛e
;

219 
	møã_i›s
[
DDIR_RWDIR_CNT
];

220 
	møã_i›s_mö
[
DDIR_RWDIR_CNT
];

222 *
	mioscheduÀr
;

227 
îr‹_ty≥
 
	mc⁄töue_⁄_îr‹
;

232 *
	m¥ofûe
;

237 *
	mcgroup
;

238 
	mcgroup_weight
;

239 
	mcgroup_nodñëe
;

241 
	muid
;

242 
	mgid
;

244 
	mÊow_id
;

245 
	mÊow
;

246 
	mÊow_w©îm¨k
;

247 
	mÊow_¶ìp
;

249 
	moff£t_ö¸emít
;

250 
	mnumbî_ios
;

252 
	msync_fûe_ønge
;

254 
	mœãncy_èrgë
;

255 
	mœãncy_wödow
;

256 
fio_Â64_t
 
	mœãncy_≥r˚¡ûe
;

259 
	#FIO_TOP_STR_MAX
 256

	)

261 
	sthªad_›ti⁄s_∑ck
 {

262 
uöt8_t
 
	mdes¸ùti⁄
[
FIO_TOP_STR_MAX
];

263 
uöt8_t
 
	m«me
[
FIO_TOP_STR_MAX
];

264 
uöt8_t
 
	mdúe˘‹y
[
FIO_TOP_STR_MAX
];

265 
uöt8_t
 
	mfûíame
[
FIO_TOP_STR_MAX
];

266 
uöt8_t
 
	mfûíame_f‹m©
[
FIO_TOP_STR_MAX
];

267 
uöt8_t
 
	m›ídú
[
FIO_TOP_STR_MAX
];

268 
uöt8_t
 
	mi€ngöe
[
FIO_TOP_STR_MAX
];

269 
uöt8_t
 
	mmm≠fûe
[
FIO_TOP_STR_MAX
];

270 
uöt32_t
 
	mtd_ddú
;

271 
uöt32_t
 
	mrw_£q
;

272 
uöt32_t
 
	mkb_ba£
;

273 
uöt32_t
 
	munô_ba£
;

274 
uöt32_t
 
	mddú_£q_ƒ
;

275 
uöt64_t
 
	mddú_£q_add
;

276 
uöt32_t
 
	miodïth
;

277 
uöt32_t
 
	miodïth_low
;

278 
uöt32_t
 
	miodïth_b©ch
;

279 
uöt32_t
 
	miodïth_b©ch_com∂ëe
;

281 
uöt64_t
 
	msize
;

282 
uöt64_t
 
	mio_limô
;

283 
uöt32_t
 
	msize_≥r˚¡
;

284 
uöt32_t
 
	mfûl_devi˚
;

285 
uöt32_t
 
	mfûe_≠≥nd
;

286 
uöt64_t
 
	mfûe_size_low
;

287 
uöt64_t
 
	mfûe_size_high
;

288 
uöt64_t
 
	m°¨t_off£t
;

290 
uöt32_t
 
	mbs
[
DDIR_RWDIR_CNT
];

291 
uöt32_t
 
	mba
[
DDIR_RWDIR_CNT
];

292 
uöt32_t
 
	mmö_bs
[
DDIR_RWDIR_CNT
];

293 
uöt32_t
 
	mmax_bs
[
DDIR_RWDIR_CNT
];

294 
bs•lô
 
	mbs•lô
[
DDIR_RWDIR_CNT
][
BSSPLIT_MAX
];

295 
uöt32_t
 
	mbs•lô_ƒ
[
DDIR_RWDIR_CNT
];

297 
uöt32_t
 
	mign‹e_îr‹
[
ERROR_TYPE_CNT
][
ERROR_STR_MAX
];

298 
uöt32_t
 
	mign‹e_îr‹_ƒ
[
ERROR_TYPE_CNT
];

299 
uöt32_t
 
	mîr‹_dump
;

301 
uöt32_t
 
	mƒ_fûes
;

302 
uöt32_t
 
	m›í_fûes
;

303 
uöt32_t
 
	mfûe_lock_mode
;

305 
uöt32_t
 
	modúe˘
;

306 
uöt32_t
 
	mﬂtomic
;

307 
uöt32_t
 
	mövÆid©e_ˇche
;

308 
uöt32_t
 
	m¸óã_£rülize
;

309 
uöt32_t
 
	m¸óã_fsync
;

310 
uöt32_t
 
	m¸óã_⁄_›í
;

311 
uöt32_t
 
	m¸óã_⁄ly
;

312 
uöt32_t
 
	míd_fsync
;

313 
uöt32_t
 
	m¥e_ªad
;

314 
uöt32_t
 
	msync_io
;

315 
uöt32_t
 
	mvîify
;

316 
uöt32_t
 
	mdo_vîify
;

317 
uöt32_t
 
	mvîifys‹t
;

318 
uöt32_t
 
	mvîifys‹t_ƒ
;

319 
uöt32_t
 
	mvîify_öãrvÆ
;

320 
uöt32_t
 
	mvîify_off£t
;

321 
uöt8_t
 
	mvîify_∑âîn
[
MAX_PATTERN_SIZE
];

322 
uöt32_t
 
	mvîify_∑âîn_byãs
;

323 
uöt32_t
 
	mvîify_Áèl
;

324 
uöt32_t
 
	mvîify_dump
;

325 
uöt32_t
 
	mvîify_async
;

326 
uöt64_t
 
	mvîify_backlog
;

327 
uöt32_t
 
	mvîify_b©ch
;

328 
uöt32_t
 
	mex≥rimíèl_vîify
;

329 
uöt32_t
 
	mu£_thªad
;

330 
uöt32_t
 
	mu∆ök
;

331 
uöt32_t
 
	mdo_disk_utû
;

332 
uöt32_t
 
	movîride_sync
;

333 
uöt32_t
 
	mønd_ª≥©abÀ
;

334 
uöt32_t
 
	mÆÃ™d_ª≥©abÀ
;

335 
uöt64_t
 
	mønd_£ed
;

336 
uöt32_t
 
	mu£_os_ønd
;

337 
uöt32_t
 
	mlog_avg_m£c
;

338 
uöt32_t
 
	mn‹™domm≠
;

339 
uöt32_t
 
	mso·øndomm≠
;

340 
uöt32_t
 
	mbs_u«lig√d
;

341 
uöt32_t
 
	mfsync_⁄_˛o£
;

342 
uöt32_t
 
	mbs_is_£q_ønd
;

344 
uöt32_t
 
	møndom_di°ributi⁄
;

345 
fio_Â64_t
 
	mzùf_thëa
;

346 
fio_Â64_t
 
	m∑ªto_h
;

348 
uöt32_t
 
	møndom_gíî©‹
;

350 
uöt32_t
 
	m≥rc_ønd
[
DDIR_RWDIR_CNT
];

352 
uöt32_t
 
	mhugïage_size
;

353 
uöt32_t
 
	mrw_mö_bs
;

354 
uöt32_t
 
	mthöktime
;

355 
uöt32_t
 
	mthöktime_•ö
;

356 
uöt32_t
 
	mthöktime_blocks
;

357 
uöt32_t
 
	mfsync_blocks
;

358 
uöt32_t
 
	mfd©async_blocks
;

359 
uöt32_t
 
	mb¨rõr_blocks
;

360 
uöt64_t
 
	m°¨t_dñay
;

361 
uöt64_t
 
	m°¨t_dñay_high
;

362 
uöt64_t
 
	mtimeout
;

363 
uöt64_t
 
	mømp_time
;

364 
uöt32_t
 
	movîwrôe
;

365 
uöt32_t
 
	mbw_avg_time
;

366 
uöt32_t
 
	mi›s_avg_time
;

367 
uöt32_t
 
	mlo›s
;

368 
uöt64_t
 
	mz⁄e_ønge
;

369 
uöt64_t
 
	mz⁄e_size
;

370 
uöt64_t
 
	mz⁄e_skù
;

371 
uöt64_t
 
	mlockmem
;

372 
uöt32_t
 
	mmem_ty≥
;

373 
uöt32_t
 
	mmem_Æign
;

375 
uöt32_t
 
	mmax_œãncy
;

377 
uöt32_t
 
	m°⁄ewÆl
;

378 
uöt32_t
 
	m√w_group
;

379 
uöt32_t
 
	mnumjobs
;

380 
uöt8_t
 
	m˝umask
[
FIO_TOP_STR_MAX
];

381 
uöt32_t
 
	m˝umask_£t
;

382 
uöt8_t
 
	mvîify_˝umask
[
FIO_TOP_STR_MAX
];

383 
uöt32_t
 
	mvîify_˝umask_£t
;

384 
uöt32_t
 
	m˝us_Ælowed_pﬁicy
;

385 
uöt32_t
 
	miﬁog
;

386 
uöt32_t
 
	mrwmixcy˛e
;

387 
uöt32_t
 
	mrwmix
[
DDIR_RWDIR_CNT
];

388 
uöt32_t
 
	mni˚
;

389 
uöt32_t
 
	mi›rio
;

390 
uöt32_t
 
	mi›rio_˛ass
;

391 
uöt32_t
 
	mfûe_£rvi˚_ty≥
;

392 
uöt32_t
 
	mgroup_ªp‹tög
;

393 
uöt32_t
 
	mÁdvi£_höt
;

394 
uöt32_t
 
	mÁŒoˇã_mode
;

395 
uöt32_t
 
	mzîo_buf„rs
;

396 
uöt32_t
 
	mªfûl_buf„rs
;

397 
uöt32_t
 
	ms¸ambÀ_buf„rs
;

398 
uöt8_t
 
	mbuf„r_∑âîn
[
MAX_PATTERN_SIZE
];

399 
uöt32_t
 
	mbuf„r_∑âîn_byãs
;

400 
	mcom¥ess_≥r˚¡age
;

401 
	mcom¥ess_chunk
;

402 
uöt32_t
 
	mtime_ba£d
;

403 
uöt32_t
 
	mdißbÀ_œt
;

404 
uöt32_t
 
	mdißbÀ_˛©
;

405 
uöt32_t
 
	mdißbÀ_¶©
;

406 
uöt32_t
 
	mdißbÀ_bw
;

407 
uöt32_t
 
	munifõd_rw_ªp
;

408 
uöt32_t
 
	mgtod_ªdu˚
;

409 
uöt32_t
 
	mgtod_˝u
;

410 
uöt32_t
 
	mgtod_ofÊﬂd
;

411 
uöt32_t
 
	m˛ocksour˚
;

412 
uöt32_t
 
	mno_°Æl
;

413 
uöt32_t
 
	måim_≥r˚¡age
;

414 
uöt32_t
 
	måim_b©ch
;

415 
uöt32_t
 
	måim_zîo
;

416 
uöt64_t
 
	måim_backlog
;

417 
uöt32_t
 
	m˛©_≥r˚¡ûes
;

418 
uöt32_t
 
	m≥r˚¡ûe_¥ecisi⁄
;

419 
fio_Â64_t
 
	m≥r˚¡ûe_li°
[
FIO_IO_U_LIST_MAX_LEN
];

421 
uöt8_t
 
	mªad_iﬁog_fûe
[
FIO_TOP_STR_MAX
];

422 
uöt8_t
 
	mwrôe_iﬁog_fûe
[
FIO_TOP_STR_MAX
];

423 
uöt8_t
 
	mbw_log_fûe
[
FIO_TOP_STR_MAX
];

424 
uöt8_t
 
	mœt_log_fûe
[
FIO_TOP_STR_MAX
];

425 
uöt8_t
 
	mi›s_log_fûe
[
FIO_TOP_STR_MAX
];

426 
uöt8_t
 
	mª∂ay_ªdúe˘
[
FIO_TOP_STR_MAX
];

431 
uöt8_t
 
	mexec_¥îun
[
FIO_TOP_STR_MAX
];

432 
uöt8_t
 
	mexec_po°run
[
FIO_TOP_STR_MAX
];

434 
uöt32_t
 
	møã
[
DDIR_RWDIR_CNT
];

435 
uöt32_t
 
	møãmö
[
DDIR_RWDIR_CNT
];

436 
uöt32_t
 
	møãcy˛e
;

437 
uöt32_t
 
	møã_i›s
[
DDIR_RWDIR_CNT
];

438 
uöt32_t
 
	møã_i›s_mö
[
DDIR_RWDIR_CNT
];

440 
uöt8_t
 
	mioscheduÀr
[
FIO_TOP_STR_MAX
];

445 
uöt32_t
 
	mc⁄töue_⁄_îr‹
;

450 
uöt8_t
 
	m¥ofûe
[
FIO_TOP_STR_MAX
];

455 
uöt8_t
 
	mcgroup
[
FIO_TOP_STR_MAX
];

456 
uöt32_t
 
	mcgroup_weight
;

457 
uöt32_t
 
	mcgroup_nodñëe
;

459 
uöt32_t
 
	muid
;

460 
uöt32_t
 
	mgid
;

462 
öt32_t
 
	mÊow_id
;

463 
öt32_t
 
	mÊow
;

464 
öt32_t
 
	mÊow_w©îm¨k
;

465 
uöt32_t
 
	mÊow_¶ìp
;

467 
uöt64_t
 
	moff£t_ö¸emít
;

468 
uöt64_t
 
	mnumbî_ios
;

470 
uöt32_t
 
	msync_fûe_ønge
;

472 
uöt64_t
 
	mœãncy_èrgë
;

473 
uöt64_t
 
	mœãncy_wödow
;

474 
fio_Â64_t
 
	mœãncy_≥r˚¡ûe
;

475 } 
__©åibuã__
((
∑cked
));

477 
c⁄vît_thªad_›ti⁄s_to_˝u
(
thªad_›ti⁄s
 *
o
, 
thªad_›ti⁄s_∑ck
 *
t›
);

478 
c⁄vît_thªad_›ti⁄s_to_√t
(
thªad_›ti⁄s_∑ck
 *
t›
, 
thªad_›ti⁄s
 *);

479 
fio_ã°_cc⁄v
(
thªad_›ti⁄s
 *);

480 
›ti⁄s_deÁu…_fûl
(
thªad_›ti⁄s
 *
o
);

	@/home/terekhov/tmp/fio/fio/tickmarks.c

1 
	~<°dio.h
>

2 
	~<m©h.h
>

3 
	~<mÆloc.h
>

4 
	~<°rög.h
>

13 
	~"tickm¨ks.h
"

15 
	#MAX
(
a
, 
b
Ë((◊Ë< (b)Ë? (bË: (a))

	)

17 
	$ni˚num
(
x
, 
round
)

19 
exp
;

20 
f
;

22 
exp
 = 
	`Êo‹
(
	`log10
(
x
));

23 
f
 = 
x
 / 
	`pow
(10.0, 
exp
);

24 i‡(
round
) {

25 i‡(
f
 < 1.5)

26  1.0 * 
	`pow
(10.0, 
exp
);

27 i‡(
f
 < 3.0)

28  2.0 * 
	`pow
(10.0, 
exp
);

29 i‡(
f
 < 7.0)

30  5.0 * 
	`pow
(10.0, 
exp
);

31  10.0 * 
	`pow
(10.0, 
exp
);

33 i‡(
f
 <= 1.0)

34  1.0 * 
	`pow
(10.0, 
exp
);

35 i‡(
f
 <= 2.0)

36  2.0 * 
	`pow
(10.0, 
exp
);

37 i‡(
f
 <= 5.0)

38  5.0 * 
	`pow
(10.0, 
exp
);

39  10.0 * 
	`pow
(10.0, 
exp
);

40 
	}
}

42 
	$sh‹ãn
(
tickm¨k
 *
tm
, 
¡icks
, *
powî_of_ãn
,

43 
u£_KMG_symbﬁs
, 
ba£_off£t
)

45 c⁄° 
sh‹ãn_chr
[] = { 0, 'K', 'M', 'G', 'P', 'E', 0 };

46 
i
, 
l
, 
mösh‹ãn
, 
sh‹ãn_idx
 = 0;

47 *
°r
;

49 
mösh‹ãn
 = 100;

50 
i
 = 0; i < 
¡icks
; i++) {

51 
°r
 = 
tm
[
i
].
°rög
;

52 
l
 = 
	`°æí
(
°r
);

54 i‡(
	`°rcmp
(
°r
, "0") == 0)

56 i‡(
l
 > 9 && 
	`°rcmp
(&
°r
[l - 9], "000000000") == 0) {

57 *
powî_of_ãn
 = 9;

58 
sh‹ãn_idx
 = 3;

59 } i‡(6 < 
mösh‹ãn
 && 
l
 > 6 &&

60 
	`°rcmp
(&
°r
[
l
 - 6], "000000") == 0) {

61 *
powî_of_ãn
 = 6;

62 
sh‹ãn_idx
 = 2;

63 } i‡(
l
 > 3 && 
	`°rcmp
(&
°r
[l - 3], "000") == 0) {

64 *
powî_of_ãn
 = 3;

65 
sh‹ãn_idx
 = 1;

67 *
powî_of_ãn
 = 0;

70 i‡(*
powî_of_ãn
 < 
mösh‹ãn
)

71 
mösh‹ãn
 = *
powî_of_ãn
;

74 i‡(
mösh‹ãn
 == 0)

76 i‡(!
u£_KMG_symbﬁs
)

77 
sh‹ãn_idx
 = 0;

78 i‡(
ba£_off£t
)

79 
sh‹ãn_idx
 +
ba£_off£t
;

81 
i
 = 0; i < 
¡icks
; i++) {

82 
°r
 = 
tm
[
i
].
°rög
;

83 
l
 = 
	`°æí
(
°r
);

84 
°r
[
l
 - 
mösh‹ãn
] = 
sh‹ãn_chr
[
sh‹ãn_idx
];

85 i‡(
sh‹ãn_idx
)

86 
°r
[
l
 - 
mösh‹ãn
 + 1] = '\0';

88 
	}
}

90 
	$ˇlc_tickm¨ks
(
mö
, 
max
, 
¡icks
, 
tickm¨k
 **
tm
,

91 *
powî_of_ãn
, 
u£_KMG_symbﬁs
, 
ba£_off£t
)

93 
°r
[100];

94 
n‰ac
;

95 
d
;

96 
gøphmö
, 
gøphmax
;

97 
ønge
, 
x
;

98 
cou¡
, 
i
;

101 
ønge
 = 
	`ni˚num
(
max
 - 
mö
, 0);

102 
d
 = 
	`ni˚num
(
ønge
 / (
¡icks
 - 1), 1);

103 
gøphmö
 = 
	`Êo‹
(
mö
 / 
d
) * d;

104 
gøphmax
 = 
	`˚û
(
max
 / 
d
) * d;

105 
n‰ac
 = 
	`MAX
(-
	`Êo‹
(
	`log10
(
d
)), 0);

106 
	`¢¥ötf
(
°r
, (°r)-1, "%%.%df", 
n‰ac
);

108 
cou¡
 = ((
gøphmax
 + 0.5 * 
d
Ë- 
gøphmö
) / d + 1;

109 *
tm
 = 
	`mÆloc
((**tmË* 
cou¡
);

111 
i
 = 0;

112 
x
 = 
gøphmö
; x < 
gøphmax
 + 0.5 * 
d
; x += d) {

113 (*
tm
)[
i
].
vÆue
 = 
x
;

114 
	`•rötf
((*
tm
)[
i
].
°rög
, 
°r
, 
x
);

115 
i
++;

117 
	`sh‹ãn
(*
tm
, 
i
, 
powî_of_ãn
, 
u£_KMG_symbﬁs
, 
ba£_off£t
);

118  
i
;

119 
	}
}

123 
	$ã°_ønge
(
x
, 
y
)

125 
¡icks
, 
i
;

127 
tickm¨k
 *
tm
 = 
NULL
;

128 
	`¥ötf
("Te°ögÑ™gê%g - %g\n", 
x
, 
y
);

129 
¡icks
 = 
	`ˇlc_tickm¨ks
(
x
, 
y
, 10, &
tm
);

131 
i
 = 0; i < 
¡icks
; i++)

132 
	`¥ötf
(" (%sË%g\n", 
tm
[
i
].
°rög
,Åm[i].
vÆue
);

134 
	`¥ötf
("\n\n");

135 
	`‰ì
(
tm
);

136 
	}
}

138 
	$maö
(
¨gc
, *
¨gv
[])

140 
	`ã°_ønge
(0.0005, 0.008);

141 
	`ã°_ønge
(0.5, 0.8);

142 
	`ã°_ønge
(5.5, 8.8);

143 
	`ã°_ønge
(50.5, 80.8);

144 
	`ã°_ønge
(-20, 20.8);

145 
	`ã°_ønge
(-30, 700.8);

146 
	}
}

	@/home/terekhov/tmp/fio/fio/tickmarks.h

1 #i‚de‡
TICKMARKS_H


2 
	#TICKMARKS_H


	)

4 
	stickm¨k
 {

5 
	mvÆue
;

6 
	m°rög
[20];

9 
ˇlc_tickm¨ks
(
mö
, 
max
, 
¡icks
, 
tickm¨k
 **
tm
,

10 *
powî_of_ãn
, 
u£_KMG_symbﬁs
, 
ba£_off
);

	@/home/terekhov/tmp/fio/fio/time.c

1 
	~<time.h
>

2 
	~<sys/time.h
>

4 
	~"fio.h
"

6 
timevÆ
 
	ggíesis
;

7 
	gns_gønuœrôy
;

12 
	$u£c_•ö
(
u£c
)

14 
timevÆ
 
°¨t
;

16 
	`fio_gëtime
(&
°¨t
, 
NULL
);

17 
	`utime_sö˚_now
(&
°¨t
Ë< 
u£c
)

18 
n›
;

19 
	}
}

21 
	$u£c_¶ìp
(
thªad_d©a
 *
td
, 
u£c
)

23 
time•ec
 
ªq
;

24 
timevÆ
 
tv
;

27 
ts
 = 
u£c
;

29 i‡(
u£c
 < 
ns_gønuœrôy
) {

30 
	`u£c_•ö
(
u£c
);

34 
ts
 = 
u£c
 - 
ns_gønuœrôy
;

36 i‡(
ts
 >= 1000000) {

37 
ªq
.
tv_£c
 = 
ts
 / 1000000;

38 
ts
 -1000000 * 
ªq
.
tv_£c
;

40 
ªq
.
tv_£c
 = 0;

42 
ªq
.
tv_n£c
 = 
ts
 * 1000;

43 
	`fio_gëtime
(&
tv
, 
NULL
);

45 i‡(
	`«no¶ìp
(&
ªq
, 
NULL
) < 0)

48 
ts
 = 
	`utime_sö˚_now
(&
tv
);

49 i‡(
ts
 >
u£c
)

52 
u£c
 -
ts
;

53 } !
td
->
ãrmö©e
);

54 
	}
}

56 
uöt64_t
 
	$mtime_sö˚_gíesis
()

58  
	`mtime_sö˚_now
(&
gíesis
);

59 
	}
}

61 
uöt64_t
 
	$utime_sö˚_gíesis
()

63  
	`utime_sö˚_now
(&
gíesis
);

64 
	}
}

66 
	$ö_ømp_time
(
thªad_d©a
 *
td
)

68  
td
->
o
.
ømp_time
 && !td->
ømp_time_ovî
;

69 
	}
}

71 
	$ømp_time_ovî
(
thªad_d©a
 *
td
)

73 
timevÆ
 
tv
;

75 i‡(!
td
->
o
.
ømp_time
 ||Åd->
ømp_time_ovî
)

78 
	`fio_gëtime
(&
tv
, 
NULL
);

79 i‡(
	`utime_sö˚
(&
td
->
ïoch
, &
tv
Ë>td->
o
.
ømp_time
) {

80 
td
->
ømp_time_ovî
 = 1;

81 
	`ª£t_Æl_°©s
(
td
);

82 
	`td_£t_run°©e
(
td
, 
TD_RAMP
);

87 
	}
}

89 
	$fio_time_öô
()

91 
i
;

93 
	`fio_˛ock_öô
();

98 
i
 = 0; i < 10; i++) {

99 
timevÆ
 
tv
;

100 
time•ec
 
ts
;

101 
ñ≠£d
;

103 
	`fio_gëtime
(&
tv
, 
NULL
);

104 
ts
.
tv_£c
 = 0;

105 
ts
.
tv_n£c
 = 1000;

107 
	`«no¶ìp
(&
ts
, 
NULL
);

108 
ñ≠£d
 = 
	`utime_sö˚_now
(&
tv
);

110 i‡(
ñ≠£d
 > 
ns_gønuœrôy
)

111 
ns_gønuœrôy
 = 
ñ≠£d
;

113 
	}
}

115 
	$£t_gíesis_time
()

117 
	`fio_gëtime
(&
gíesis
, 
NULL
);

118 
	}
}

120 
	$fûl_°¨t_time
(
timevÆ
 *
t
)

122 
	`mem˝y
(
t
, &
gíesis
, (genesis));

123 
	}
}

	@/home/terekhov/tmp/fio/fio/trim.c

4 
	~<uni°d.h
>

5 
	~<f˙é.h
>

6 
	~<°rög.h
>

7 
	~<as£π.h
>

8 
	~<±hªad.h
>

10 
	~"fio.h
"

11 
	~"åim.h
"

13 #ifde‡
FIO_HAVE_TRIM


14 
	$gë_√xt_åim
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

16 
io_põ˚
 *
ùo
;

21 i‡(
io_u
->
fûe
)

23 i‡(
	`Êi°_em±y
(&
td
->
åim_li°
))

26 
	`as£π
(
td
->
åim_íåõs
);

27 
ùo
 = 
	`Êi°_íåy
(
td
->
åim_li°
.
√xt
, 
io_põ˚
,Årim_list);

28 
	`ªmove_åim_íåy
(
td
, 
ùo
);

30 
io_u
->
off£t
 = 
ùo
->offset;

31 
io_u
->
buÊí
 = 
ùo
->
Àn
;

32 
io_u
->
fûe
 = 
ùo
->file;

38 i‡(!
td
->
o
.
åim_zîo
) {

39 i‡(
ùo
->
Êags
 & 
IP_F_ONLIST
)

40 
	`Êi°_dñ
(&
ùo
->
li°
);

42 
	`as£π
(
ùo
->
Êags
 & 
IP_F_ONRB
);

43 
	`rb_îa£
(&
ùo
->
rb_node
, &
td
->
io_hi°_åì
);

45 
td
->
io_hi°_Àn
--;

46 
	`‰ì
(
ùo
);

48 
ùo
->
Êags
 |
IP_F_TRIMMED
;

50 i‡(!
	`fio_fûe_›í
(
io_u
->
fûe
)) {

51 
r
 = 
	`td_io_›í_fûe
(
td
, 
io_u
->
fûe
);

53 i‡(
r
) {

54 
	`d¥öt
(
FD_VERIFY
, "failed file %s open\n",

55 
io_u
->
fûe
->
fûe_«me
);

60 
	`gë_fûe
(
io_u
->
fûe
);

61 
	`as£π
(
	`fio_fûe_›í
(
io_u
->
fûe
));

62 
io_u
->
ddú
 = 
DDIR_TRIM
;

63 
io_u
->
x„r_buf
 = 
NULL
;

64 
io_u
->
x„r_buÊí
 = io_u->
buÊí
;

66 
	`d¥öt
(
FD_VERIFY
, "gë_√xt_åim:Ñë io_u %p\n", 
io_u
);

68 
	}
}

70 
	$io_u_should_åim
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

72 
vÆ
;

73 
r
;

75 i‡(!
td
->
o
.
åim_≥r˚¡age
)

78 i‡(
td
->
o
.
u£_os_ønd
) {

79 
r
 = 
	`os_øndom_l⁄g
(&
td
->
åim_°©e
);

80 
vÆ
 = (
OS_RAND_MAX
 / 100ULL);

82 
r
 = 
	`__ønd
(&
td
->
__åim_°©e
);

83 
vÆ
 = (
FRAND_MAX
 / 100ULL);

86 
vÆ
 *(Ë
td
->
o
.
åim_≥r˚¡age
;

87  
r
 <
vÆ
;

88 
	}
}

	@/home/terekhov/tmp/fio/fio/trim.h

1 #i‚de‡
FIO_TRIM_H


2 
	#FIO_TRIM_H


	)

4 
	~"fio.h
"

6 #ifde‡
FIO_HAVE_TRIM


7 
__mu°_check
 
gë_√xt_åim
(
thªad_d©a
 *
td
, 
io_u
 *io_u);

8 
io_u_should_åim
(
thªad_d©a
 *
td
, 
io_u
 *io_u);

14 
ölöe
 
	$ªmove_åim_íåy
(
thªad_d©a
 *
td
, 
io_põ˚
 *
ùo
)

16 i‡(!
	`Êi°_em±y
(&
ùo
->
åim_li°
)) {

17 
	`Êi°_dñ_öô
(&
ùo
->
åim_li°
);

18 
td
->
åim_íåõs
--;

20 
	}
}

23 
ölöe
 
	$gë_√xt_åim
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

26 
	}
}

27 
ölöe
 
	$io_u_should_åim
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

30 
	}
}

31 
ölöe
 
	$ªmove_åim_íåy
(
thªad_d©a
 *
td
, 
io_põ˚
 *
ùo
)

33 
	}
}

	@/home/terekhov/tmp/fio/fio/verify.c

4 
	~<uni°d.h
>

5 
	~<f˙é.h
>

6 
	~<°rög.h
>

7 
	~<as£π.h
>

8 
	~<±hªad.h
>

9 
	~<libgí.h
>

11 
	~"fio.h
"

12 
	~"vîify.h
"

13 
	~"åim.h
"

14 
	~"lib/ønd.h
"

15 
	~"lib/hweight.h
"

17 
	~"¸c/md5.h
"

18 
	~"¸c/¸c64.h
"

19 
	~"¸c/¸c32.h
"

20 
	~"¸c/¸c32c.h
"

21 
	~"¸c/¸c16.h
"

22 
	~"¸c/¸c7.h
"

23 
	~"¸c/sha256.h
"

24 
	~"¸c/sha512.h
"

25 
	~"¸c/sha1.h
"

26 
	~"¸c/xxhash.h
"

28 
p›uœã_hdr
(
thªad_d©a
 *
td
, 
io_u
 *io_u,

29 
vîify_hódî
 *
hdr
, 
hódî_num
,

30 
hódî_Àn
);

32 
	$fûl_∑âîn
(
thªad_d©a
 *
td
, *
p
, 
Àn
,

33 *
∑âîn
, 
∑âîn_byãs
)

35 
∑âîn_byãs
) {

37 
	`as£π
(0);

40 
	`d¥öt
(
FD_VERIFY
, "fû»vîifyÖ©ã∫ b=0Üí=%u\n", 
Àn
);

41 
	`mem£t
(
p
, 
∑âîn
[0], 
Àn
);

44 
i
 = 0, 
size
 = 0;

45 *
b
 = 
p
;

47 
	`d¥öt
(
FD_VERIFY
, "fill verifyÖattern b=%dÜen=%u\n",

48 
∑âîn_byãs
, 
Àn
);

50 
i
 < 
Àn
) {

51 
size
 = 
∑âîn_byãs
;

52 i‡(
size
 > (
Àn
 - 
i
))

53 
size
 = 
Àn
 - 
i
;

54 
	`mem˝y
(
b
+
i
, 
∑âîn
, 
size
);

55 
i
 +
size
;

60 
	}
}

62 
	$fûl_buf„r_∑âîn
(
thªad_d©a
 *
td
, *
p
, 
Àn
)

64 
	`fûl_∑âîn
(
td
, 
p
, 
Àn
,Åd->
o
.
buf„r_∑âîn
,Åd->o.
buf„r_∑âîn_byãs
);

65 
	}
}

67 
	$fûl_vîify_∑âîn
(
thªad_d©a
 *
td
, *
p
, 
Àn
,

68 
io_u
 *io_u, 
£ed
, 
u£_£ed
)

70 i‡(!
td
->
o
.
vîify_∑âîn_byãs
) {

71 
	`d¥öt
(
FD_VERIFY
, "fû»øndom byã†Àn=%u\n", 
Àn
);

73 i‡(
u£_£ed
)

74 
	`__fûl_øndom_buf
(
p
, 
Àn
, 
£ed
);

76 
io_u
->
ønd_£ed
 = 
	`fûl_øndom_buf
(&
td
->
__vîify_°©e
, 
p
, 
Àn
);

80 i‡(
io_u
->
buf_fûÀd_Àn
 >
Àn
) {

81 
	`d¥öt
(
FD_VERIFY
, "usingálready filled verifyÖattern b=%dÜen=%u\n",

82 
td
->
o
.
vîify_∑âîn_byãs
, 
Àn
);

86 
	`fûl_∑âîn
(
td
, 
p
, 
Àn
,Åd->
o
.
vîify_∑âîn
,Åd->o.
vîify_∑âîn_byãs
);

88 
io_u
->
buf_fûÀd_Àn
 = 
Àn
;

89 
	}
}

91 
	$gë_hdr_öc
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

93 
hdr_öc
;

95 
hdr_öc
 = 
io_u
->
buÊí
;

96 i‡(
td
->
o
.
vîify_öãrvÆ
 &&Åd->o.vîify_öãrvÆ <
io_u
->
buÊí
)

97 
hdr_öc
 = 
td
->
o
.
vîify_öãrvÆ
;

99  
hdr_öc
;

100 
	}
}

102 
	$fûl_∑âîn_hódîs
(
thªad_d©a
 *
td
, 
io_u
 *io_u,

103 
£ed
, 
u£_£ed
)

105 
hdr_öc
, 
hódî_num
;

106 
vîify_hódî
 *
hdr
;

107 *
p
 = 
io_u
->
buf
;

109 
	`fûl_vîify_∑âîn
(
td
, 
p
, 
io_u
->
buÊí
, io_u, 
£ed
, 
u£_£ed
);

111 
hdr_öc
 = 
	`gë_hdr_öc
(
td
, 
io_u
);

112 
hódî_num
 = 0;

113 ; 
p
 < 
io_u
->
buf
 + io_u->
buÊí
;Ö +
hdr_öc
) {

114 
hdr
 = 
p
;

115 
	`p›uœã_hdr
(
td
, 
io_u
, 
hdr
, 
hódî_num
, 
hdr_öc
);

116 
hódî_num
++;

118 
	}
}

120 
	$memswp
(*
buf1
, *
buf2
, 
Àn
)

122 
sw≠
[200];

124 
	`as£π
(
Àn
 <(
sw≠
));

126 
	`mem˝y
(&
sw≠
, 
buf1
, 
Àn
);

127 
	`mem˝y
(
buf1
, 
buf2
, 
Àn
);

128 
	`mem˝y
(
buf2
, &
sw≠
, 
Àn
);

129 
	}
}

131 
	$hexdump
(*
buf„r
, 
Àn
)

133 *
p
 = 
buf„r
;

134 
i
;

136 
i
 = 0; i < 
Àn
; i++)

137 
	`log_îr
("%02x", 
p
[
i
]);

138 
	`log_îr
("\n");

139 
	}
}

144 
ölöe
 
	$__hdr_size
(
vîify_ty≥
)

146 
Àn
 = 0;

148 
vîify_ty≥
) {

149 
VERIFY_NONE
:

150 
VERIFY_NULL
:

151 
Àn
 = 0;

153 
VERIFY_MD5
:

154 
Àn
 = (
vhdr_md5
);

156 
VERIFY_CRC64
:

157 
Àn
 = (
vhdr_¸c64
);

159 
VERIFY_CRC32C
:

160 
VERIFY_CRC32
:

161 
VERIFY_CRC32C_INTEL
:

162 
Àn
 = (
vhdr_¸c32
);

164 
VERIFY_CRC16
:

165 
Àn
 = (
vhdr_¸c16
);

167 
VERIFY_CRC7
:

168 
Àn
 = (
vhdr_¸c7
);

170 
VERIFY_SHA256
:

171 
Àn
 = (
vhdr_sha256
);

173 
VERIFY_SHA512
:

174 
Àn
 = (
vhdr_sha512
);

176 
VERIFY_XXHASH
:

177 
Àn
 = (
vhdr_xxhash
);

179 
VERIFY_META
:

180 
Àn
 = (
vhdr_mëa
);

182 
VERIFY_SHA1
:

183 
Àn
 = (
vhdr_sha1
);

185 
VERIFY_PATTERN
:

186 
Àn
 = 0;

189 
	`log_îr
("fio: unknown verify header!\n");

190 
	`as£π
(0);

193  
Àn
 + (
vîify_hódî
);

194 
	}
}

196 
ölöe
 
	$hdr_size
(
vîify_hódî
 *
hdr
)

198  
	`__hdr_size
(
hdr
->
vîify_ty≥
);

199 
	}
}

201 *
	$hdr_¥iv
(
vîify_hódî
 *
hdr
)

203 *
¥iv
 = 
hdr
;

205  
¥iv
 + (
vîify_hódî
);

206 
	}
}

212 
	svc⁄t
 {

216 
io_u
 *
	mio_u
;

217 
	mhdr_num
;

218 
thªad_d©a
 *
	mtd
;

223 c⁄° *
	m«me
;

224 *
	mgood_¸c
;

225 *
	mbad_¸c
;

226 
	m¸c_Àn
;

229 
	#DUMP_BUF_SZ
 255

	)

230 
	gdump_buf_w¨√d
;

232 
	$dump_buf
(*
buf
, 
Àn
, 
off£t
,

233 c⁄° *
ty≥
, 
fio_fûe
 *
f
)

235 *
±r
, 
‚ame
[
DUMP_BUF_SZ
];

236 
size_t
 
buf_À·
 = 
DUMP_BUF_SZ
;

237 
ªt
, 
fd
;

239 
±r
 = 
	`°rdup
(
f
->
fûe_«me
);

241 
‚ame
[
DUMP_BUF_SZ
 - 1] = '\0';

242 
	`°∫˝y
(
‚ame
, 
	`ba£«me
(
±r
), 
DUMP_BUF_SZ
 - 1);

244 
buf_À·
 -
	`°æí
(
‚ame
);

245 i‡(
buf_À·
 <= 0) {

246 i‡(!
dump_buf_w¨√d
) {

247 
	`log_îr
("fio: verify failure dump bufferÅoo small\n");

248 
dump_buf_w¨√d
 = 1;

250 
	`‰ì
(
±r
);

254 
	`¢¥ötf
(
‚ame
 + 
	`°æí
(‚ame), 
buf_À·
, ".%Œu.%s", 
off£t
, 
ty≥
);

256 
fd
 = 
	`›í
(
‚ame
, 
O_CREAT
 | 
O_TRUNC
 | 
O_WRONLY
, 0644);

257 i‡(
fd
 < 0) {

258 
	`≥º‹
("open verify buf file");

262 
Àn
) {

263 
ªt
 = 
	`wrôe
(
fd
, 
buf
, 
Àn
);

264 i‡(!
ªt
)

266 i‡(
ªt
 < 0) {

267 
	`≥º‹
("write verify buf file");

270 
Àn
 -
ªt
;

271 
buf
 +
ªt
;

274 
	`˛o£
(
fd
);

275 
	`log_îr
(" %†d©®dum≥dá†%s\n", 
ty≥
, 
‚ame
);

276 
	`‰ì
(
±r
);

277 
	}
}

283 
	$dump_vîify_buf„rs
(
vîify_hódî
 *
hdr
, 
vc⁄t
 *
vc
)

285 
thªad_d©a
 *
td
 = 
vc
->td;

286 
io_u
 *io_u = 
vc
->io_u;

287 
hdr_off£t
;

288 
io_u
 
dummy
;

289 *
buf
;

291 i‡(!
td
->
o
.
vîify_dump
)

297 
hdr_off£t
 = 
vc
->
hdr_num
 * 
hdr
->
Àn
;

299 
	`dump_buf
(
io_u
->
buf
 + 
hdr_off£t
, 
hdr
->
Àn
, io_u->
off£t
 + hdr_offset,

300 "ª˚ived", 
vc
->
io_u
->
fûe
);

305 
buf
 = 
	`mÆloc
(
io_u
->
buÊí
);

306 
dummy
 = *
io_u
;

307 
dummy
.
buf
 = buf;

308 
dummy
.
ønd_£ed
 = 
hdr
->rand_seed;

309 
dummy
.
buf_fûÀd_Àn
 = 0;

310 
dummy
.
buÊí
 = 
io_u
->buflen;

312 
	`fûl_∑âîn_hódîs
(
td
, &
dummy
, 
hdr
->
ønd_£ed
, 1);

314 
	`dump_buf
(
buf
 + 
hdr_off£t
, 
hdr
->
Àn
, 
io_u
->
off£t
 + hdr_offset,

315 "ex≥˘ed", 
vc
->
io_u
->
fûe
);

316 
	`‰ì
(
buf
);

317 
	}
}

319 
	$log_vîify_Áûuª
(
vîify_hódî
 *
hdr
, 
vc⁄t
 *
vc
)

321 
off£t
;

323 
off£t
 = 
vc
->
io_u
->offset;

324 
off£t
 +
vc
->
hdr_num
 * 
hdr
->
Àn
;

325 
	`log_îr
("%.8s: verify failedát file %s offset %llu,Üength %u\n",

326 
vc
->
«me
, vc->
io_u
->
fûe
->
fûe_«me
, 
off£t
, 
hdr
->
Àn
);

328 i‡(
vc
->
good_¸c
 && vc->
bad_¸c
) {

329 
	`log_îr
(" Expected CRC: ");

330 
	`hexdump
(
vc
->
good_¸c
, vc->
¸c_Àn
);

331 
	`log_îr
(" Received CRC: ");

332 
	`hexdump
(
vc
->
bad_¸c
, vc->
¸c_Àn
);

335 
	`dump_vîify_buf„rs
(
hdr
, 
vc
);

336 
	}
}

341 
ölöe
 *
	$io_u_vîify_off
(
vîify_hódî
 *
hdr
, 
vc⁄t
 *
vc
)

343  
vc
->
io_u
->
buf
 + vc->
hdr_num
 * 
hdr
->
Àn
 + 
	`hdr_size
(hdr);

344 
	}
}

346 
	$vîify_io_u_∑âîn
(
vîify_hódî
 *
hdr
, 
vc⁄t
 *
vc
)

348 
thªad_d©a
 *
td
 = 
vc
->td;

349 
io_u
 *io_u = 
vc
->io_u;

350 *
buf
, *
∑âîn
;

351 
hódî_size
 = 
	`__hdr_size
(
td
->
o
.
vîify
);

352 
Àn
, 
mod
, 
i
, 
size
, 
∑âîn_size
;

354 
∑âîn
 = 
td
->
o
.
vîify_∑âîn
;

355 
∑âîn_size
 = 
td
->
o
.
vîify_∑âîn_byãs
;

356 i‡(
∑âîn_size
 <= 1)

357 
∑âîn_size
 = 
MAX_PATTERN_SIZE
;

358 
buf
 = (*Ë
hdr
 + 
hódî_size
;

359 
Àn
 = 
	`gë_hdr_öc
(
td
, 
io_u
Ë- 
hódî_size
;

360 
mod
 = 
hódî_size
 % 
∑âîn_size
;

362 
i
 = 0; i < 
Àn
; i +
size
) {

363 
size
 = 
∑âîn_size
 - 
mod
;

364 i‡(
size
 > (
Àn
 - 
i
))

365 
size
 = 
Àn
 - 
i
;

366 i‡(
	`memcmp
(
buf
 + 
i
, 
∑âîn
 + 
mod
, 
size
))

369 
mod
 = 0;

372 ; 
i
 < 
Àn
; i++) {

373 i‡(
buf
[
i
] !
∑âîn
[
mod
]) {

374 
bôs
;

376 
bôs
 = 
	`hweight8
(
buf
[
i
] ^ 
∑âîn
[
mod
]);

377 
	`log_îr
("fio: gotÖattern %x, wanted %x. Bad bits %d\n",

378 
buf
[
i
], 
∑âîn
[
mod
], 
bôs
);

379 
	`log_îr
("fio: badÖ©ã∫ block off£à%u\n", 
i
);

380 
	`dump_vîify_buf„rs
(
hdr
, 
vc
);

381  
EILSEQ
;

383 
mod
++;

384 i‡(
mod
 =
td
->
o
.
vîify_∑âîn_byãs
)

385 
mod
 = 0;

389 
	}
}

391 
	$vîify_io_u_mëa
(
vîify_hódî
 *
hdr
, 
vc⁄t
 *
vc
)

393 
thªad_d©a
 *
td
 = 
vc
->td;

394 
vhdr_mëa
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

395 
io_u
 *io_u = 
vc
->io_u;

396 
ªt
 = 
EILSEQ
;

398 
	`d¥öt
(
FD_VERIFY
, "më®vîify io_u %p,Üí %u\n", 
io_u
, 
hdr
->
Àn
);

400 i‡(
vh
->
off£t
 =
io_u
->off£à+ 
vc
->
hdr_num
 * 
td
->
o
.
vîify_öãrvÆ
)

401 
ªt
 = 0;

403 i‡(
td
->
o
.
vîify_∑âîn_byãs
)

404 
ªt
 |
	`vîify_io_u_∑âîn
(
hdr
, 
vc
);

414 i‡(
	`td_wrôe
(
td
Ë|| 
	`td_rw
(td))

415 i‡(!
td
->
o
.
vîify_⁄ly
 ||Åd->o.
lo›s
 == 0)

416 i‡(
vh
->
numbîio
 !
io_u
->numberio)

417 
ªt
 = 
EILSEQ
;

419 i‡(!
ªt
)

422 
vc
->
«me
 = "meta";

423 
	`log_vîify_Áûuª
(
hdr
, 
vc
);

424  
ªt
;

425 
	}
}

427 
	$vîify_io_u_xxhash
(
vîify_hódî
 *
hdr
, 
vc⁄t
 *
vc
)

429 *
p
 = 
	`io_u_vîify_off
(
hdr
, 
vc
);

430 
vhdr_xxhash
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

431 
uöt32_t
 
hash
;

432 *
°©e
;

434 
	`d¥öt
(
FD_VERIFY
, "xxhash vîify io_u %p,Üí %u\n", 
vc
->
io_u
, 
hdr
->
Àn
);

436 
°©e
 = 
	`XXH32_öô
(1);

437 
	`XXH32_upd©e
(
°©e
, 
p
, 
hdr
->
Àn
 - 
	`hdr_size
(hdr));

438 
hash
 = 
	`XXH32_dige°
(
°©e
);

440 i‡(
vh
->
hash
 == hash)

443 
vc
->
«me
 = "xxhash";

444 
vc
->
good_¸c
 = &
vh
->
hash
;

445 
vc
->
bad_¸c
 = &
hash
;

446 
vc
->
¸c_Àn
 = (
hash
);

447 
	`log_vîify_Áûuª
(
hdr
, 
vc
);

448  
EILSEQ
;

449 
	}
}

451 
	$vîify_io_u_sha512
(
vîify_hódî
 *
hdr
, 
vc⁄t
 *
vc
)

453 *
p
 = 
	`io_u_vîify_off
(
hdr
, 
vc
);

454 
vhdr_sha512
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

455 
uöt8_t
 
sha512
[128];

456 
fio_sha512_˘x
 
sha512_˘x
 = {

457 .
buf
 = 
sha512
,

460 
	`d¥öt
(
FD_VERIFY
, "sha512 vîify io_u %p,Üí %u\n", 
vc
->
io_u
, 
hdr
->
Àn
);

462 
	`fio_sha512_öô
(&
sha512_˘x
);

463 
	`fio_sha512_upd©e
(&
sha512_˘x
, 
p
, 
hdr
->
Àn
 - 
	`hdr_size
(hdr));

465 i‡(!
	`memcmp
(
vh
->
sha512
, 
sha512_˘x
.
buf
, (sha512)))

468 
vc
->
«me
 = "sha512";

469 
vc
->
good_¸c
 = 
vh
->
sha512
;

470 
vc
->
bad_¸c
 = 
sha512_˘x
.
buf
;

471 
vc
->
¸c_Àn
 = (
vh
->
sha512
);

472 
	`log_vîify_Áûuª
(
hdr
, 
vc
);

473  
EILSEQ
;

474 
	}
}

476 
	$vîify_io_u_sha256
(
vîify_hódî
 *
hdr
, 
vc⁄t
 *
vc
)

478 *
p
 = 
	`io_u_vîify_off
(
hdr
, 
vc
);

479 
vhdr_sha256
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

480 
uöt8_t
 
sha256
[64];

481 
fio_sha256_˘x
 
sha256_˘x
 = {

482 .
buf
 = 
sha256
,

485 
	`d¥öt
(
FD_VERIFY
, "sha256 vîify io_u %p,Üí %u\n", 
vc
->
io_u
, 
hdr
->
Àn
);

487 
	`fio_sha256_öô
(&
sha256_˘x
);

488 
	`fio_sha256_upd©e
(&
sha256_˘x
, 
p
, 
hdr
->
Àn
 - 
	`hdr_size
(hdr));

490 i‡(!
	`memcmp
(
vh
->
sha256
, 
sha256_˘x
.
buf
, (sha256)))

493 
vc
->
«me
 = "sha256";

494 
vc
->
good_¸c
 = 
vh
->
sha256
;

495 
vc
->
bad_¸c
 = 
sha256_˘x
.
buf
;

496 
vc
->
¸c_Àn
 = (
vh
->
sha256
);

497 
	`log_vîify_Áûuª
(
hdr
, 
vc
);

498  
EILSEQ
;

499 
	}
}

501 
	$vîify_io_u_sha1
(
vîify_hódî
 *
hdr
, 
vc⁄t
 *
vc
)

503 *
p
 = 
	`io_u_vîify_off
(
hdr
, 
vc
);

504 
vhdr_sha1
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

505 
uöt32_t
 
sha1
[5];

506 
fio_sha1_˘x
 
sha1_˘x
 = {

507 .
H
 = 
sha1
,

510 
	`d¥öt
(
FD_VERIFY
, "sha1 vîify io_u %p,Üí %u\n", 
vc
->
io_u
, 
hdr
->
Àn
);

512 
	`fio_sha1_öô
(&
sha1_˘x
);

513 
	`fio_sha1_upd©e
(&
sha1_˘x
, 
p
, 
hdr
->
Àn
 - 
	`hdr_size
(hdr));

515 i‡(!
	`memcmp
(
vh
->
sha1
, 
sha1_˘x
.
H
, (sha1)))

518 
vc
->
«me
 = "sha1";

519 
vc
->
good_¸c
 = 
vh
->
sha1
;

520 
vc
->
bad_¸c
 = 
sha1_˘x
.
H
;

521 
vc
->
¸c_Àn
 = (
vh
->
sha1
);

522 
	`log_vîify_Áûuª
(
hdr
, 
vc
);

523  
EILSEQ
;

524 
	}
}

526 
	$vîify_io_u_¸c7
(
vîify_hódî
 *
hdr
, 
vc⁄t
 *
vc
)

528 *
p
 = 
	`io_u_vîify_off
(
hdr
, 
vc
);

529 
vhdr_¸c7
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

530 
c
;

532 
	`d¥öt
(
FD_VERIFY
, "¸c7 vîify io_u %p,Üí %u\n", 
vc
->
io_u
, 
hdr
->
Àn
);

534 
c
 = 
	`fio_¸c7
(
p
, 
hdr
->
Àn
 - 
	`hdr_size
(hdr));

536 i‡(
c
 =
vh
->
¸c7
)

539 
vc
->
«me
 = "crc7";

540 
vc
->
good_¸c
 = &
vh
->
¸c7
;

541 
vc
->
bad_¸c
 = &
c
;

542 
vc
->
¸c_Àn
 = 1;

543 
	`log_vîify_Áûuª
(
hdr
, 
vc
);

544  
EILSEQ
;

545 
	}
}

547 
	$vîify_io_u_¸c16
(
vîify_hódî
 *
hdr
, 
vc⁄t
 *
vc
)

549 *
p
 = 
	`io_u_vîify_off
(
hdr
, 
vc
);

550 
vhdr_¸c16
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

551 
c
;

553 
	`d¥öt
(
FD_VERIFY
, "¸c16 vîify io_u %p,Üí %u\n", 
vc
->
io_u
, 
hdr
->
Àn
);

555 
c
 = 
	`fio_¸c16
(
p
, 
hdr
->
Àn
 - 
	`hdr_size
(hdr));

557 i‡(
c
 =
vh
->
¸c16
)

560 
vc
->
«me
 = "crc16";

561 
vc
->
good_¸c
 = &
vh
->
¸c16
;

562 
vc
->
bad_¸c
 = &
c
;

563 
vc
->
¸c_Àn
 = 2;

564 
	`log_vîify_Áûuª
(
hdr
, 
vc
);

565  
EILSEQ
;

566 
	}
}

568 
	$vîify_io_u_¸c64
(
vîify_hódî
 *
hdr
, 
vc⁄t
 *
vc
)

570 *
p
 = 
	`io_u_vîify_off
(
hdr
, 
vc
);

571 
vhdr_¸c64
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

572 
c
;

574 
	`d¥öt
(
FD_VERIFY
, "¸c64 vîify io_u %p,Üí %u\n", 
vc
->
io_u
, 
hdr
->
Àn
);

576 
c
 = 
	`fio_¸c64
(
p
, 
hdr
->
Àn
 - 
	`hdr_size
(hdr));

578 i‡(
c
 =
vh
->
¸c64
)

581 
vc
->
«me
 = "crc64";

582 
vc
->
good_¸c
 = &
vh
->
¸c64
;

583 
vc
->
bad_¸c
 = &
c
;

584 
vc
->
¸c_Àn
 = 8;

585 
	`log_vîify_Áûuª
(
hdr
, 
vc
);

586  
EILSEQ
;

587 
	}
}

589 
	$vîify_io_u_¸c32
(
vîify_hódî
 *
hdr
, 
vc⁄t
 *
vc
)

591 *
p
 = 
	`io_u_vîify_off
(
hdr
, 
vc
);

592 
vhdr_¸c32
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

593 
uöt32_t
 
c
;

595 
	`d¥öt
(
FD_VERIFY
, "¸c32 vîify io_u %p,Üí %u\n", 
vc
->
io_u
, 
hdr
->
Àn
);

597 
c
 = 
	`fio_¸c32
(
p
, 
hdr
->
Àn
 - 
	`hdr_size
(hdr));

599 i‡(
c
 =
vh
->
¸c32
)

602 
vc
->
«me
 = "crc32";

603 
vc
->
good_¸c
 = &
vh
->
¸c32
;

604 
vc
->
bad_¸c
 = &
c
;

605 
vc
->
¸c_Àn
 = 4;

606 
	`log_vîify_Áûuª
(
hdr
, 
vc
);

607  
EILSEQ
;

608 
	}
}

610 
	$vîify_io_u_¸c32c
(
vîify_hódî
 *
hdr
, 
vc⁄t
 *
vc
)

612 *
p
 = 
	`io_u_vîify_off
(
hdr
, 
vc
);

613 
vhdr_¸c32
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

614 
uöt32_t
 
c
;

616 
	`d¥öt
(
FD_VERIFY
, "¸c32¯vîify io_u %p,Üí %u\n", 
vc
->
io_u
, 
hdr
->
Àn
);

618 
c
 = 
	`fio_¸c32c
(
p
, 
hdr
->
Àn
 - 
	`hdr_size
(hdr));

620 i‡(
c
 =
vh
->
¸c32
)

623 
vc
->
«me
 = "crc32c";

624 
vc
->
good_¸c
 = &
vh
->
¸c32
;

625 
vc
->
bad_¸c
 = &
c
;

626 
vc
->
¸c_Àn
 = 4;

627 
	`log_vîify_Áûuª
(
hdr
, 
vc
);

628  
EILSEQ
;

629 
	}
}

631 
	$vîify_io_u_md5
(
vîify_hódî
 *
hdr
, 
vc⁄t
 *
vc
)

633 *
p
 = 
	`io_u_vîify_off
(
hdr
, 
vc
);

634 
vhdr_md5
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

635 
uöt32_t
 
hash
[
MD5_HASH_WORDS
];

636 
fio_md5_˘x
 
md5_˘x
 = {

637 .
hash
 = hash,

640 
	`d¥öt
(
FD_VERIFY
, "md5 vîify io_u %p,Üí %u\n", 
vc
->
io_u
, 
hdr
->
Àn
);

642 
	`fio_md5_öô
(&
md5_˘x
);

643 
	`fio_md5_upd©e
(&
md5_˘x
, 
p
, 
hdr
->
Àn
 - 
	`hdr_size
(hdr));

645 i‡(!
	`memcmp
(
vh
->
md5_dige°
, 
md5_˘x
.
hash
, (hash)))

648 
vc
->
«me
 = "md5";

649 
vc
->
good_¸c
 = 
vh
->
md5_dige°
;

650 
vc
->
bad_¸c
 = 
md5_˘x
.
hash
;

651 
vc
->
¸c_Àn
 = (
hash
);

652 
	`log_vîify_Áûuª
(
hdr
, 
vc
);

653  
EILSEQ
;

654 
	}
}

659 
	$vîify_io_u_async
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

661 i‡(
io_u
->
fûe
)

662 
	`put_fûe_log
(
td
, 
io_u
->
fûe
);

664 
	`±hªad_muãx_lock
(&
td
->
io_u_lock
);

666 i‡(
io_u
->
Êags
 & 
IO_U_F_IN_CUR_DEPTH
) {

667 
td
->
cur_dïth
--;

668 
io_u
->
Êags
 &~
IO_U_F_IN_CUR_DEPTH
;

670 
	`Êi°_add_èû
(&
io_u
->
vîify_li°
, &
td
->verify_list);

671 
io_u
->
Êags
 |
IO_U_F_FREE_DEF
;

672 
	`±hªad_muãx_u∆ock
(&
td
->
io_u_lock
);

674 
	`±hªad_c⁄d_sig«l
(&
td
->
vîify_c⁄d
);

676 
	}
}

678 
	$vîify_åimmed_io_u
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

680 
zîo_buf
[1024];

681 
this_Àn
, 
Àn
;

682 
ªt
 = 0;

683 *
p
;

685 i‡(!
td
->
o
.
åim_zîo
)

688 
Àn
 = 
io_u
->
buÊí
;

689 
p
 = 
io_u
->
buf
;

691 
this_Àn
 = (
zîo_buf
);

692 i‡(
this_Àn
 > 
Àn
)

693 
this_Àn
 = 
Àn
;

694 i‡(
	`memcmp
(
p
, 
zîo_buf
, 
this_Àn
)) {

695 
ªt
 = 
EILSEQ
;

698 
Àn
 -
this_Àn
;

699 
p
 +
this_Àn
;

700 } 
Àn
);

702 i‡(!
ªt
)

705 
	`log_îr
("trim: verify failedát file %s offset %llu,Üength %lu"

707 
io_u
->
fûe
->
fûe_«me
, io_u->
off£t
, io_u->
buÊí
,

708 (Ë(
p
 - 
io_u
->
buf
));

709  
ªt
;

710 
	}
}

712 
	$vîify_hódî
(
io_u
 *io_u, 
vîify_hódî
 *
hdr
)

714 *
p
 = 
hdr
;

715 
uöt32_t
 
¸c
;

717 i‡(
hdr
->
magic
 !
FIO_HDR_MAGIC
)

719 i‡(
hdr
->
Àn
 > 
io_u
->
buÊí
)

721 i‡(
hdr
->
ønd_£ed
 !
io_u
->rand_seed)

724 
¸c
 = 
	`fio_¸c32c
(
p
, 
	`off£tof
(
vîify_hódî
, 
¸c32
));

725 i‡(
¸c
 =
hdr
->
¸c32
)

727 
	`log_îr
("fio: vîify hódî cr¯%x, cÆcuœãd %x\n", 
hdr
->
¸c32
, 
¸c
);

729 
	}
}

731 
	$vîify_io_u
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

733 
vîify_hódî
 *
hdr
;

734 
hódî_size
, 
hdr_öc
, 
hdr_num
 = 0;

735 *
p
;

736 
ªt
;

738 i‡(
td
->
o
.
vîify
 =
VERIFY_NULL
 || 
io_u
->
ddú
 !
DDIR_READ
)

740 i‡(
io_u
->
Êags
 & 
IO_U_F_TRIMMED
) {

741 
ªt
 = 
	`vîify_åimmed_io_u
(
td
, 
io_u
);

742 
d⁄e
;

745 
hdr_öc
 = 
	`gë_hdr_öc
(
td
, 
io_u
);

747 
ªt
 = 0;

748 
p
 = 
io_u
->
buf
;Ö < io_u->bu‡+ io_u->
buÊí
;

749 
p
 +
hdr_öc
, 
hdr_num
++) {

750 
vc⁄t
 
vc
 = {

751 .
io_u
 = io_u,

752 .
hdr_num
 = hdr_num,

753 .
td
 =Åd,

755 
vîify_ty≥
;

757 i‡(
ªt
 && 
td
->
o
.
vîify_Áèl
)

760 
hódî_size
 = 
	`__hdr_size
(
td
->
o
.
vîify
);

761 i‡(
td
->
o
.
vîify_off£t
)

762 
	`memswp
(
p
,Ö + 
td
->
o
.
vîify_off£t
, 
hódî_size
);

763 
hdr
 = 
p
;

769 i‡(
td
->
o
.
vîifys‹t
 || (td->
Êags
 & 
TD_F_VER_BACKLOG
))

770 
io_u
->
ønd_£ed
 = 
hdr
->rand_seed;

772 
ªt
 = 
	`vîify_hódî
(
io_u
, 
hdr
);

773 
ªt
) {

777 
	`log_îr
("verify: bad magic header %x, wanted %xát "

779 
hdr
->
magic
, 
FIO_HDR_MAGIC
,

780 
io_u
->
fûe
->
fûe_«me
,

781 
io_u
->
off£t
 + 
hdr_num
 * 
hdr
->
Àn
, hdr->len);

782  
EILSEQ
;

785 
	`log_îr
("fio: verify headerÉxceeds bufferÜength (%u "

786 "> %lu)\n", 
hdr
->
Àn
, 
io_u
->
buÊí
);

787  
EILSEQ
;

790 
	`log_îr
("vîify: bad hódîÑ™d_£ed %"
PRIu64


791 ", w™ãd %"
PRIu64
"át file %s offset %llu, "

793 
hdr
->
ønd_£ed
, 
io_u
->rand_seed,

794 
io_u
->
fûe
->
fûe_«me
,

795 
io_u
->
off£t
 + 
hdr_num
 * 
hdr
->
Àn
, hdr->len);

796  
EILSEQ
;

799  
EILSEQ
;

802 
	`log_îr
("verify: unknown headerÉrrorát file %s "

804 
io_u
->
fûe
->
fûe_«me
,

805 
io_u
->
off£t
 + 
hdr_num
 * 
hdr
->
Àn
, hdr->len);

806  
EILSEQ
;

809 i‡(
td
->
o
.
vîify
 !
VERIFY_NONE
)

810 
vîify_ty≥
 = 
td
->
o
.
vîify
;

812 
vîify_ty≥
 = 
hdr
->verify_type;

814 
vîify_ty≥
) {

815 
VERIFY_MD5
:

816 
ªt
 = 
	`vîify_io_u_md5
(
hdr
, &
vc
);

818 
VERIFY_CRC64
:

819 
ªt
 = 
	`vîify_io_u_¸c64
(
hdr
, &
vc
);

821 
VERIFY_CRC32C
:

822 
VERIFY_CRC32C_INTEL
:

823 
ªt
 = 
	`vîify_io_u_¸c32c
(
hdr
, &
vc
);

825 
VERIFY_CRC32
:

826 
ªt
 = 
	`vîify_io_u_¸c32
(
hdr
, &
vc
);

828 
VERIFY_CRC16
:

829 
ªt
 = 
	`vîify_io_u_¸c16
(
hdr
, &
vc
);

831 
VERIFY_CRC7
:

832 
ªt
 = 
	`vîify_io_u_¸c7
(
hdr
, &
vc
);

834 
VERIFY_SHA256
:

835 
ªt
 = 
	`vîify_io_u_sha256
(
hdr
, &
vc
);

837 
VERIFY_SHA512
:

838 
ªt
 = 
	`vîify_io_u_sha512
(
hdr
, &
vc
);

840 
VERIFY_XXHASH
:

841 
ªt
 = 
	`vîify_io_u_xxhash
(
hdr
, &
vc
);

843 
VERIFY_META
:

844 
ªt
 = 
	`vîify_io_u_mëa
(
hdr
, &
vc
);

846 
VERIFY_SHA1
:

847 
ªt
 = 
	`vîify_io_u_sha1
(
hdr
, &
vc
);

849 
VERIFY_PATTERN
:

850 
ªt
 = 
	`vîify_io_u_∑âîn
(
hdr
, &
vc
);

853 
	`log_îr
("Bad vîifyÅy≥ %u\n", 
hdr
->
vîify_ty≥
);

854 
ªt
 = 
EINVAL
;

857 i‡(
ªt
 && 
vîify_ty≥
 !
hdr
->verify_type)

858 
	`log_îr
("fio: verifyÅype mismatch (%u media, %u given)\n",

859 
hdr
->
vîify_ty≥
, verify_type);

862 
d⁄e
:

863 i‡(
ªt
 && 
td
->
o
.
vîify_Áèl
)

864 
td
->
ãrmö©e
 = 1;

866  
ªt
;

867 
	}
}

869 
	$fûl_mëa
(
vîify_hódî
 *
hdr
, 
thªad_d©a
 *
td
,

870 
io_u
 *io_u, 
hódî_num
)

872 
vhdr_mëa
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

874 
vh
->
thªad
 = 
td
->
thªad_numbî
;

876 
vh
->
time_£c
 = 
io_u
->
°¨t_time
.
tv_£c
;

877 
vh
->
time_u£c
 = 
io_u
->
°¨t_time
.
tv_u£c
;

879 
vh
->
numbîio
 = 
io_u
->numberio;

881 
vh
->
off£t
 = 
io_u
->off£à+ 
hódî_num
 * 
td
->
o
.
vîify_öãrvÆ
;

882 
	}
}

884 
	$fûl_xxhash
(
vîify_hódî
 *
hdr
, *
p
, 
Àn
)

886 
vhdr_xxhash
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

887 *
°©e
;

889 
°©e
 = 
	`XXH32_öô
(1);

890 
	`XXH32_upd©e
(
°©e
, 
p
, 
Àn
);

891 
vh
->
hash
 = 
	`XXH32_dige°
(
°©e
);

892 
	}
}

894 
	$fûl_sha512
(
vîify_hódî
 *
hdr
, *
p
, 
Àn
)

896 
vhdr_sha512
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

897 
fio_sha512_˘x
 
sha512_˘x
 = {

898 .
buf
 = 
vh
->
sha512
,

901 
	`fio_sha512_öô
(&
sha512_˘x
);

902 
	`fio_sha512_upd©e
(&
sha512_˘x
, 
p
, 
Àn
);

903 
	}
}

905 
	$fûl_sha256
(
vîify_hódî
 *
hdr
, *
p
, 
Àn
)

907 
vhdr_sha256
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

908 
fio_sha256_˘x
 
sha256_˘x
 = {

909 .
buf
 = 
vh
->
sha256
,

912 
	`fio_sha256_öô
(&
sha256_˘x
);

913 
	`fio_sha256_upd©e
(&
sha256_˘x
, 
p
, 
Àn
);

914 
	}
}

916 
	$fûl_sha1
(
vîify_hódî
 *
hdr
, *
p
, 
Àn
)

918 
vhdr_sha1
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

919 
fio_sha1_˘x
 
sha1_˘x
 = {

920 .
H
 = 
vh
->
sha1
,

923 
	`fio_sha1_öô
(&
sha1_˘x
);

924 
	`fio_sha1_upd©e
(&
sha1_˘x
, 
p
, 
Àn
);

925 
	}
}

927 
	$fûl_¸c7
(
vîify_hódî
 *
hdr
, *
p
, 
Àn
)

929 
vhdr_¸c7
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

931 
vh
->
¸c7
 = 
	`fio_¸c7
(
p
, 
Àn
);

932 
	}
}

934 
	$fûl_¸c16
(
vîify_hódî
 *
hdr
, *
p
, 
Àn
)

936 
vhdr_¸c16
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

938 
vh
->
¸c16
 = 
	`fio_¸c16
(
p
, 
Àn
);

939 
	}
}

941 
	$fûl_¸c32
(
vîify_hódî
 *
hdr
, *
p
, 
Àn
)

943 
vhdr_¸c32
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

945 
vh
->
¸c32
 = 
	`fio_¸c32
(
p
, 
Àn
);

946 
	}
}

948 
	$fûl_¸c32c
(
vîify_hódî
 *
hdr
, *
p
, 
Àn
)

950 
vhdr_¸c32
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

952 
vh
->
¸c32
 = 
	`fio_¸c32c
(
p
, 
Àn
);

953 
	}
}

955 
	$fûl_¸c64
(
vîify_hódî
 *
hdr
, *
p
, 
Àn
)

957 
vhdr_¸c64
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

959 
vh
->
¸c64
 = 
	`fio_¸c64
(
p
, 
Àn
);

960 
	}
}

962 
	$fûl_md5
(
vîify_hódî
 *
hdr
, *
p
, 
Àn
)

964 
vhdr_md5
 *
vh
 = 
	`hdr_¥iv
(
hdr
);

965 
fio_md5_˘x
 
md5_˘x
 = {

966 .
hash
 = (
uöt32_t
 *Ë
vh
->
md5_dige°
,

969 
	`fio_md5_öô
(&
md5_˘x
);

970 
	`fio_md5_upd©e
(&
md5_˘x
, 
p
, 
Àn
);

971 
	}
}

973 
	$p›uœã_hdr
(
thªad_d©a
 *
td
, 
io_u
 *io_u,

974 
vîify_hódî
 *
hdr
, 
hódî_num
,

975 
hódî_Àn
)

977 
d©a_Àn
;

978 *
d©a
, *
p
;

980 
p
 = (*Ë
hdr
;

982 
hdr
->
magic
 = 
FIO_HDR_MAGIC
;

983 
hdr
->
vîify_ty≥
 = 
td
->
o
.
vîify
;

984 
hdr
->
Àn
 = 
hódî_Àn
;

985 
hdr
->
ønd_£ed
 = 
io_u
->rand_seed;

986 
hdr
->
¸c32
 = 
	`fio_¸c32c
(
p
, 
	`off£tof
(
vîify_hódî
, crc32));

988 
d©a_Àn
 = 
hódî_Àn
 - 
	`hdr_size
(
hdr
);

990 
d©a
 = 
p
 + 
	`hdr_size
(
hdr
);

991 
td
->
o
.
vîify
) {

992 
VERIFY_MD5
:

993 
	`d¥öt
(
FD_VERIFY
, "fill md5 io_u %p,Üen %u\n",

994 
io_u
, 
hdr
->
Àn
);

995 
	`fûl_md5
(
hdr
, 
d©a
, 
d©a_Àn
);

997 
VERIFY_CRC64
:

998 
	`d¥öt
(
FD_VERIFY
, "fill crc64 io_u %p,Üen %u\n",

999 
io_u
, 
hdr
->
Àn
);

1000 
	`fûl_¸c64
(
hdr
, 
d©a
, 
d©a_Àn
);

1002 
VERIFY_CRC32C
:

1003 
VERIFY_CRC32C_INTEL
:

1004 
	`d¥öt
(
FD_VERIFY
, "fill crc32c io_u %p,Üen %u\n",

1005 
io_u
, 
hdr
->
Àn
);

1006 
	`fûl_¸c32c
(
hdr
, 
d©a
, 
d©a_Àn
);

1008 
VERIFY_CRC32
:

1009 
	`d¥öt
(
FD_VERIFY
, "fill crc32 io_u %p,Üen %u\n",

1010 
io_u
, 
hdr
->
Àn
);

1011 
	`fûl_¸c32
(
hdr
, 
d©a
, 
d©a_Àn
);

1013 
VERIFY_CRC16
:

1014 
	`d¥öt
(
FD_VERIFY
, "fill crc16 io_u %p,Üen %u\n",

1015 
io_u
, 
hdr
->
Àn
);

1016 
	`fûl_¸c16
(
hdr
, 
d©a
, 
d©a_Àn
);

1018 
VERIFY_CRC7
:

1019 
	`d¥öt
(
FD_VERIFY
, "fill crc7 io_u %p,Üen %u\n",

1020 
io_u
, 
hdr
->
Àn
);

1021 
	`fûl_¸c7
(
hdr
, 
d©a
, 
d©a_Àn
);

1023 
VERIFY_SHA256
:

1024 
	`d¥öt
(
FD_VERIFY
, "fill sha256 io_u %p,Üen %u\n",

1025 
io_u
, 
hdr
->
Àn
);

1026 
	`fûl_sha256
(
hdr
, 
d©a
, 
d©a_Àn
);

1028 
VERIFY_SHA512
:

1029 
	`d¥öt
(
FD_VERIFY
, "fill sha512 io_u %p,Üen %u\n",

1030 
io_u
, 
hdr
->
Àn
);

1031 
	`fûl_sha512
(
hdr
, 
d©a
, 
d©a_Àn
);

1033 
VERIFY_XXHASH
:

1034 
	`d¥öt
(
FD_VERIFY
, "fill xxhash io_u %p,Üen %u\n",

1035 
io_u
, 
hdr
->
Àn
);

1036 
	`fûl_xxhash
(
hdr
, 
d©a
, 
d©a_Àn
);

1038 
VERIFY_META
:

1039 
	`d¥öt
(
FD_VERIFY
, "fill meta io_u %p,Üen %u\n",

1040 
io_u
, 
hdr
->
Àn
);

1041 
	`fûl_mëa
(
hdr
, 
td
, 
io_u
, 
hódî_num
);

1043 
VERIFY_SHA1
:

1044 
	`d¥öt
(
FD_VERIFY
, "fill sha1 io_u %p,Üen %u\n",

1045 
io_u
, 
hdr
->
Àn
);

1046 
	`fûl_sha1
(
hdr
, 
d©a
, 
d©a_Àn
);

1048 
VERIFY_PATTERN
:

1052 
	`log_îr
("fio: bad vîifyÅy≥: %d\n", 
td
->
o
.
vîify
);

1053 
	`as£π
(0);

1055 i‡(
td
->
o
.
vîify_off£t
)

1056 
	`memswp
(
p
,Ö + 
td
->
o
.
vîify_off£t
, 
	`hdr_size
(
hdr
));

1057 
	}
}

1063 
	$p›uœã_vîify_io_u
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

1065 i‡(
td
->
o
.
vîify
 =
VERIFY_NULL
)

1068 
io_u
->
numbîio
 = 
td
->
io_issues
[io_u->
ddú
];

1070 
	`fûl_∑âîn_hódîs
(
td
, 
io_u
, 0, 0);

1071 
	}
}

1073 
	$gë_√xt_vîify
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

1075 
io_põ˚
 *
ùo
 = 
NULL
;

1080 i‡(
io_u
->
fûe
)

1083 i‡(!
	`RB_EMPTY_ROOT
(&
td
->
io_hi°_åì
)) {

1084 
rb_node
 *
n
 = 
	`rb_fú°
(&
td
->
io_hi°_åì
);

1086 
ùo
 = 
	`rb_íåy
(
n
, 
io_põ˚
, 
rb_node
);

1091 
	`ªad_b¨rõr
();

1092 i‡(
ùo
->
Êags
 & 
IP_F_IN_FLIGHT
)

1093 
nŸhög
;

1095 
	`rb_îa£
(
n
, &
td
->
io_hi°_åì
);

1096 
	`as£π
(
ùo
->
Êags
 & 
IP_F_ONRB
);

1097 
ùo
->
Êags
 &~
IP_F_ONRB
;

1098 } i‡(!
	`Êi°_em±y
(&
td
->
io_hi°_li°
)) {

1099 
ùo
 = 
	`Êi°_íåy
(
td
->
io_hi°_li°
.
√xt
, 
io_põ˚
, 
li°
);

1104 
	`ªad_b¨rõr
();

1105 i‡(
ùo
->
Êags
 & 
IP_F_IN_FLIGHT
)

1106 
nŸhög
;

1108 
	`Êi°_dñ
(&
ùo
->
li°
);

1109 
	`as£π
(
ùo
->
Êags
 & 
IP_F_ONLIST
);

1110 
ùo
->
Êags
 &~
IP_F_ONLIST
;

1113 i‡(
ùo
) {

1114 
td
->
io_hi°_Àn
--;

1116 
io_u
->
off£t
 = 
ùo
->offset;

1117 
io_u
->
buÊí
 = 
ùo
->
Àn
;

1118 
io_u
->
numbîio
 = 
ùo
->numberio;

1119 
io_u
->
fûe
 = 
ùo
->file;

1120 
io_u
->
Êags
 |
IO_U_F_VER_LIST
;

1122 i‡(
ùo
->
Êags
 & 
IP_F_TRIMMED
)

1123 
io_u
->
Êags
 |
IO_U_F_TRIMMED
;

1125 i‡(!
	`fio_fûe_›í
(
io_u
->
fûe
)) {

1126 
r
 = 
	`td_io_›í_fûe
(
td
, 
io_u
->
fûe
);

1128 i‡(
r
) {

1129 
	`d¥öt
(
FD_VERIFY
, "failed file %s open\n",

1130 
io_u
->
fûe
->
fûe_«me
);

1135 
	`gë_fûe
(
ùo
->
fûe
);

1136 
	`as£π
(
	`fio_fûe_›í
(
io_u
->
fûe
));

1137 
io_u
->
ddú
 = 
DDIR_READ
;

1138 
io_u
->
x„r_buf
 = io_u->
buf
;

1139 
io_u
->
x„r_buÊí
 = io_u->
buÊí
;

1141 
	`ªmove_åim_íåy
(
td
, 
ùo
);

1142 
	`‰ì
(
ùo
);

1143 
	`d¥öt
(
FD_VERIFY
, "gë_√xt_vîify:Ñë io_u %p\n", 
io_u
);

1145 i‡(!
td
->
o
.
vîify_∑âîn_byãs
) {

1146 
io_u
->
ønd_£ed
 = 
	`__ønd
(&
td
->
__vîify_°©e
);

1148 
io_u
->
ønd_£ed
 *
	`__ønd
(&
td
->
__vîify_°©e
);

1153 
nŸhög
:

1154 
	`d¥öt
(
FD_VERIFY
, "get_next_verify:Émpty\n");

1156 
	}
}

1158 
	$fio_vîify_öô
(
thªad_d©a
 *
td
)

1160 i‡(
td
->
o
.
vîify
 =
VERIFY_CRC32C_INTEL
 ||

1161 
td
->
o
.
vîify
 =
VERIFY_CRC32C
) {

1162 
	`¸c32c_öãl_¥obe
();

1164 
	}
}

1166 *
	$vîify_async_thªad
(*
d©a
)

1168 
thªad_d©a
 *
td
 = 
d©a
;

1169 
io_u
 *io_u;

1170 
ªt
 = 0;

1172 i‡(
td
->
o
.
vîify_˝umask_£t
 &&

1173 
	`fio_£èfföôy
(
td
->
pid
,Åd->
o
.
vîify_˝umask
)) {

1174 
	`log_îr
("fio: failed setting verifyÅhreadáffinity\n");

1175 
d⁄e
;

1179 
	`FLIST_HEAD
(
li°
);

1181 
	`ªad_b¨rõr
();

1182 i‡(
td
->
vîify_thªad_exô
)

1185 
	`±hªad_muãx_lock
(&
td
->
io_u_lock
);

1187 
	`Êi°_em±y
(&
td
->
vîify_li°
) &&

1188 !
td
->
vîify_thªad_exô
) {

1189 
ªt
 = 
	`±hªad_c⁄d_waô
(&
td
->
vîify_c⁄d
,

1190 &
td
->
io_u_lock
);

1191 i‡(
ªt
) {

1192 
	`±hªad_muãx_u∆ock
(&
td
->
io_u_lock
);

1197 
	`Êi°_•li˚_öô
(&
td
->
vîify_li°
, &
li°
);

1198 
	`±hªad_muãx_u∆ock
(&
td
->
io_u_lock
);

1200 i‡(
	`Êi°_em±y
(&
li°
))

1203 !
	`Êi°_em±y
(&
li°
)) {

1204 
io_u
 = 
	`Êi°_íåy
(
li°
.
√xt
, io_u, 
vîify_li°
);

1205 
	`Êi°_dñ
(&
io_u
->
vîify_li°
);

1207 
ªt
 = 
	`vîify_io_u
(
td
, 
io_u
);

1208 
	`put_io_u
(
td
, 
io_u
);

1209 i‡(!
ªt
)

1211 i‡(
	`td_n⁄_Áèl_îr‹
(
td
, 
ERROR_TYPE_VERIFY_BIT
, 
ªt
)) {

1212 
	`upd©e_îr‹_cou¡
(
td
, 
ªt
);

1213 
	`td_˛ór_îr‹
(
td
);

1214 
ªt
 = 0;

1217 } !
ªt
);

1219 i‡(
ªt
) {

1220 
	`td_vîr‹
(
td
, 
ªt
, "async_verify");

1221 i‡(
td
->
o
.
vîify_Áèl
)

1222 
td
->
ãrmö©e
 = 1;

1225 
d⁄e
:

1226 
	`±hªad_muãx_lock
(&
td
->
io_u_lock
);

1227 
td
->
ƒ_vîify_thªads
--;

1228 
	`±hªad_muãx_u∆ock
(&
td
->
io_u_lock
);

1230 
	`±hªad_c⁄d_sig«l
(&
td
->
‰ì_c⁄d
);

1231  
NULL
;

1232 
	}
}

1234 
	$vîify_async_öô
(
thªad_d©a
 *
td
)

1236 
i
, 
ªt
;

1237 
±hªad_©å_t
 
©å
;

1239 
	`±hªad_©å_öô
(&
©å
);

1240 
	`±hªad_©å_£t°acksize
(&
©å
, 
PTHREAD_STACK_MIN
);

1242 
td
->
vîify_thªad_exô
 = 0;

1244 
td
->
vîify_thªads
 = 
	`mÆloc
((
±hªad_t
Ë*Åd->
o
.
vîify_async
);

1245 
i
 = 0; i < 
td
->
o
.
vîify_async
; i++) {

1246 
ªt
 = 
	`±hªad_¸óã
(&
td
->
vîify_thªads
[
i
], &
©å
,

1247 
vîify_async_thªad
, 
td
);

1248 i‡(
ªt
) {

1249 
	`log_îr
("fio:ásync verify creation failed: %s\n",

1250 
	`°ªº‹
(
ªt
));

1253 
ªt
 = 
	`±hªad_dëach
(
td
->
vîify_thªads
[
i
]);

1254 i‡(
ªt
) {

1255 
	`log_îr
("fio:ásync verifyÅhread detach failed: %s\n",

1256 
	`°ªº‹
(
ªt
));

1259 
td
->
ƒ_vîify_thªads
++;

1262 
	`±hªad_©å_de°roy
(&
©å
);

1264 i‡(
i
 !
td
->
o
.
vîify_async
) {

1265 
	`log_îr
("fio: o∆y %d vîifyÅhªad†°¨ãd,Éxôög\n", 
i
);

1266 
td
->
vîify_thªad_exô
 = 1;

1267 
	`wrôe_b¨rõr
();

1268 
	`±hªad_c⁄d_brﬂdˇ°
(&
td
->
vîify_c⁄d
);

1273 
	}
}

1275 
	$vîify_async_exô
(
thªad_d©a
 *
td
)

1277 
td
->
vîify_thªad_exô
 = 1;

1278 
	`wrôe_b¨rõr
();

1279 
	`±hªad_c⁄d_brﬂdˇ°
(&
td
->
vîify_c⁄d
);

1281 
	`±hªad_muãx_lock
(&
td
->
io_u_lock
);

1283 
td
->
ƒ_vîify_thªads
)

1284 
	`±hªad_c⁄d_waô
(&
td
->
‰ì_c⁄d
, &td->
io_u_lock
);

1286 
	`±hªad_muãx_u∆ock
(&
td
->
io_u_lock
);

1287 
	`‰ì
(
td
->
vîify_thªads
);

1288 
td
->
vîify_thªads
 = 
NULL
;

1289 
	}
}

	@/home/terekhov/tmp/fio/fio/verify.h

1 #i‚de‡
FIO_VERIFY_H


2 
	#FIO_VERIFY_H


	)

4 
	~<°döt.h
>

6 
	#FIO_HDR_MAGIC
 0xacˇ

	)

9 
	mVERIFY_NONE
 = 0,

10 
	mVERIFY_MD5
,

11 
	mVERIFY_CRC64
,

12 
	mVERIFY_CRC32
,

13 
	mVERIFY_CRC32C
,

14 
	mVERIFY_CRC32C_INTEL
,

15 
	mVERIFY_CRC16
,

16 
	mVERIFY_CRC7
,

17 
	mVERIFY_SHA256
,

18 
	mVERIFY_SHA512
,

19 
	mVERIFY_XXHASH
,

20 
	mVERIFY_META
,

21 
	mVERIFY_SHA1
,

22 
	mVERIFY_PATTERN
,

23 
	mVERIFY_NULL
,

31 
	svîify_hódî
 {

32 
uöt16_t
 
	mmagic
;

33 
uöt16_t
 
	mvîify_ty≥
;

34 
uöt32_t
 
	mÀn
;

35 
uöt64_t
 
	mønd_£ed
;

36 
uöt32_t
 
	m¸c32
;

39 
	svhdr_md5
 {

40 
uöt32_t
 
	mmd5_dige°
[4];

42 
	svhdr_sha512
 {

43 
uöt8_t
 
	msha512
[128];

45 
	svhdr_sha256
 {

46 
uöt8_t
 
	msha256
[64];

48 
	svhdr_sha1
 {

49 
uöt32_t
 
	msha1
[5];

51 
	svhdr_¸c64
 {

52 
uöt64_t
 
	m¸c64
;

54 
	svhdr_¸c32
 {

55 
uöt32_t
 
	m¸c32
;

57 
	svhdr_¸c16
 {

58 
uöt16_t
 
	m¸c16
;

60 
	svhdr_¸c7
 {

61 
uöt8_t
 
	m¸c7
;

63 
	svhdr_mëa
 {

64 
uöt64_t
 
	moff£t
;

65 
	mthªad
;

66 
	mnumbîio
;

67 
	mtime_£c
;

68 
	mtime_u£c
;

70 
	svhdr_xxhash
 {

71 
uöt32_t
 
	mhash
;

77 
p›uœã_vîify_io_u
(
thªad_d©a
 *, 
io_u
 *);

78 
__mu°_check
 
gë_√xt_vîify
(
thªad_d©a
 *
td
, 
io_u
 *);

79 
__mu°_check
 
vîify_io_u
(
thªad_d©a
 *, 
io_u
 *);

80 
vîify_io_u_async
(
thªad_d©a
 *, 
io_u
 *);

81 
fûl_vîify_∑âîn
(
thªad_d©a
 *
td
, *
p
, 
Àn
, 
io_u
 *io_u, 
£ed
, 
u£_£ed
);

82 
fûl_buf„r_∑âîn
(
thªad_d©a
 *
td
, *
p
, 
Àn
);

83 
fio_vîify_öô
(
thªad_d©a
 *
td
);

88 
vîify_async_öô
(
thªad_d©a
 *);

89 
vîify_async_exô
(
thªad_d©a
 *);

	@../arch/arch.h

1 #i‚de‡
ARCH_H


2 
	#ARCH_H


	)

5 
	m¨ch_x86_64
 = 1,

6 
	m¨ch_i386
,

7 
	m¨ch_µc
,

8 
	m¨ch_ü64
,

9 
	m¨ch_s390
,

10 
	m¨ch_Æpha
,

11 
	m¨ch_•¨c
,

12 
	m¨ch_•¨c64
,

13 
	m¨ch_¨m
,

14 
	m¨ch_sh
,

15 
	m¨ch_hµa
,

16 
	m¨ch_mùs
,

18 
	m¨ch_gíîic
,

20 
	m¨ch_ƒ
,

24 
	mARCH_FLAG_1
 = 1 << 0,

25 
	mARCH_FLAG_2
 = 1 << 1,

26 
	mARCH_FLAG_3
 = 1 << 2,

27 
	mARCH_FLAG_4
 = 1 << 3,

30 
¨ch_Êags
;

32 #i‡
deföed
(
__i386__
)

33 
	~"¨ch-x86.h
"

34 #ñi‡
deföed
(
__x86_64__
)

35 
	~"¨ch-x86_64.h
"

36 #ñi‡
deföed
(
__powîpc__
Ë|| deföed(
__powîpc64__
Ë|| deföed(
__µc__
)

37 
	~"¨ch-µc.h
"

38 #ñi‡
deföed
(
__ü64__
)

39 
	~"¨ch-ü64.h
"

40 #ñi‡
deföed
(
__Æpha__
)

41 
	~"¨ch-Æpha.h
"

42 #ñi‡
deföed
(
__s390x__
Ë|| deföed(
__s390__
)

43 
	~"¨ch-s390.h
"

44 #ñi‡
deföed
(
__•¨c__
)

45 
	~"¨ch-•¨c.h
"

46 #ñi‡
deföed
(
__•¨c64__
)

47 
	~"¨ch-•¨c64.h
"

48 #ñi‡
deföed
(
__¨m__
)

49 
	~"¨ch-¨m.h
"

50 #ñi‡
deföed
(
__mùs__
Ë|| deföed(
__mùs64__
)

51 
	~"¨ch-mùs.h
"

52 #ñi‡
deföed
(
__sh__
)

53 
	~"¨ch-sh.h
"

54 #ñi‡
deföed
(
__hµa__
)

55 
	~"¨ch-hµa.h
"

58 
	~"¨ch-gíîic.h
"

61 #ifde‡
ARCH_HAVE_FFZ


62 
	#ffz
(
bômask
Ë
	`¨ch_ffz
(bômask)

	)

64 
	~"../lib/ffz.h
"

67 #i‚de‡
ARCH_HAVE_INIT


68 
ölöe
 
	$¨ch_öô
(*
ívp
[])

71 
	}
}

	@../compiler/compiler.h

1 #i‚de‡
FIO_COMPILER_H


2 
	#FIO_COMPILER_H


	)

4 #i‡
__GNUC__
 >= 4

5 
	~"compûî-gcc4.h
"

6 #ñi‡
__GNUC__
 == 3

7 
	~"compûî-gcc3.h
"

9 #îr‹ 
Compûî
 
too
 
ﬁd
, 
√ed
 
gcc
 
©
 
Àa°
 gcc 3.x

12 #i‚de‡
__mu°_check


13 
	#__mu°_check


	)

19 
	#fio_unu£d
 
	`__©åibuã__
((
__unu£d__
))

	)

20 
	#fio_öô
 
	`__©åibuã__
((
c⁄°ru˘‹
))

	)

21 
	#fio_exô
 
	`__©åibuã__
((
de°ru˘‹
))

	)

23 
	#fio_u∆ikñy
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 0)

	)

	@../crc/crc16.h

15 #i‚de‡
__CRC16_H


16 
	#__CRC16_H


	)

18 c⁄° 
¸c16_èbÀ
[256];

20 
fio_¸c16
(c⁄° *
buf„r
, 
Àn
);

22 
ölöe
 
	$¸c16_byã
(
¸c
,

23 c⁄° 
d©a
)

25  (
¸c
 >> 8Ë^ 
¸c16_èbÀ
[(¸¯^ 
d©a
) & 0xff];

26 
	}
}

	@../crc/crc32.h

18 #i‚de‡
CRC32_H


19 
	#CRC32_H


	)

21 
uöt32_t
 
fio_¸c32
(const * const, );

	@../crc/crc32c.h

18 #i‚de‡
CRC32C_H


19 
	#CRC32C_H


	)

21 
	~"../¨ch/¨ch.h
"

23 
uöt32_t
 
¸c32c_sw
(const *, );

24 
¸c32c_öãl_avaûabÀ
;

26 #ifde‡
ARCH_HAVE_SSE4_2


27 
uöt32_t
 
¸c32c_öãl
(const *, );

28 
¸c32c_öãl_¥obe
();

30 
	#¸c32c_öãl
 
¸c32c_sw


	)

31 
ölöe
 
	$¸c32c_öãl_¥obe
()

33 
	}
}

36 
ölöe
 
uöt32_t
 
	$fio_¸c32c
(c⁄° *
buf
, 
Àn
)

38 i‡(
¸c32c_öãl_avaûabÀ
)

39  
	`¸c32c_öãl
(
buf
, 
Àn
);

41  
	`¸c32c_sw
(
buf
, 
Àn
);

42 
	}
}

	@../crc/crc64.h

1 #i‚de‡
CRC64_H


2 
	#CRC64_H


	)

4 
fio_¸c64
(const *, );

	@../crc/crc7.h

1 #i‚de‡
CRC7_H


2 
	#CRC7_H


	)

4 c⁄° 
¸c7_syndrome_èbÀ
[256];

6 
ölöe
 
	$¸c7_byã
(
¸c
, 
d©a
)

8  
¸c7_syndrome_èbÀ
[(
¸c
 << 1Ë^ 
d©a
];

9 
	}
}

11 
fio_¸c7
(c⁄° *
buf„r
, 
Àn
);

	@../crc/md5.h

1 #i‚de‡
MD5_H


2 
	#MD5_H


	)

4 
	~<°döt.h
>

6 
	#MD5_DIGEST_SIZE
 16

	)

7 
	#MD5_HMAC_BLOCK_SIZE
 64

	)

8 
	#MD5_BLOCK_WORDS
 16

	)

9 
	#MD5_HASH_WORDS
 4

	)

11 
	#F1
(
x
, 
y
, 
z
Ë(z ^ (x & (y ^ z)))

	)

12 
	#F2
(
x
, 
y
, 
z
Ë
	`F1
(z, x, y)

	)

13 
	#F3
(
x
, 
y
, 
z
Ë(x ^ y ^ z)

	)

14 
	#F4
(
x
, 
y
, 
z
Ë(y ^ (x | ~z))

	)

16 
	#MD5STEP
(
f
, 
w
, 
x
, 
y
, 
z
, 
ö
, 
s
) \

17 (
w
 +
	`f
(
x
, 
y
, 
z
Ë+ 
ö
, w = (w<<
s
 | w>>(32-s)Ë+ x)

	)

19 
	sfio_md5_˘x
 {

20 
uöt32_t
 *
	mhash
;

21 
uöt32_t
 
	mblock
[
MD5_BLOCK_WORDS
];

22 
uöt64_t
 
	mbyã_cou¡
;

25 
fio_md5_upd©e
(
fio_md5_˘x
 *, c⁄° 
uöt8_t
 *, );

26 
fio_md5_öô
(
fio_md5_˘x
 *);

	@../crc/sha1.h

1 #i‚de‡
FIO_SHA1


2 
	#FIO_SHA1


	)

10 
	sfio_sha1_˘x
 {

11 
uöt32_t
 *
	mH
;

12 
	mW
[16];

13 
	msize
;

16 
fio_sha1_öô
(
fio_sha1_˘x
 *);

17 
fio_sha1_upd©e
(
fio_sha1_˘x
 *, c⁄° *
d©aIn
, 
Àn
);

18 
fio_sha1_föÆ
(
hashout
[20], 
fio_sha1_˘x
 *);

	@../crc/sha256.h

1 #i‚de‡
FIO_SHA256_H


2 
	#FIO_SHA256_H


	)

4 
	sfio_sha256_˘x
 {

5 
uöt32_t
 
	mcou¡
[2];

6 
uöt32_t
 
	m°©e
[8];

7 
uöt8_t
 *
	mbuf
;

10 
fio_sha256_öô
(
fio_sha256_˘x
 *);

11 
fio_sha256_upd©e
(
fio_sha256_˘x
 *, c⁄° 
uöt8_t
 *, );

	@../crc/sha512.h

1 #i‚de‡
FIO_SHA512_H


2 
	#FIO_SHA512_H


	)

4 
	sfio_sha512_˘x
 {

5 
uöt64_t
 
	m°©e
[8];

6 
uöt32_t
 
	mcou¡
[4];

7 
uöt8_t
 *
	mbuf
;

8 
uöt64_t
 
	mW
[80];

11 
fio_sha512_öô
(
fio_sha512_˘x
 *);

12 
fio_sha512_upd©e
(
fio_sha512_˘x
 *, c⁄° 
uöt8_t
 *, );

	@../crc/xxhash.h

60 #¥agm®
⁄˚


62 #i‡
deföed
 (
__˝lu•lus
)

66 
	~<öây≥s.h
>

68 
	sXXH_°©e32_t


70 
uöt64_t
 
tŸÆ_Àn
;

71 
uöt32_t
 
£ed
;

72 
uöt32_t
 
v1
;

73 
uöt32_t
 
v2
;

74 
uöt32_t
 
v3
;

75 
uöt32_t
 
v4
;

76 
memsize
;

77 
mem‹y
[16];

83 íum { 
XXH_OK
=0, 
XXH_ERROR
 } 
	tXXH_îr‹code
;

91 
XXH32
 (c⁄° * 
öput
, 
Àn
, 
£ed
);

110 * 
XXH32_öô
 (
£ed
);

111 
XXH_îr‹code
 
XXH32_upd©e
 (* 
°©e
, c⁄° * 
öput
, 
Àn
);

112 
XXH32_dige°
 (* 
°©e
);

137 
XXH32_sizeofSèã
();

138 
XXH_îr‹code
 
XXH32_ª£tSèã
(* 
°©e
, 
£ed
);

140 
	#XXH32_SIZEOFSTATE
 48

	)

141 °ru˘ { 
Œ
[(
XXH32_SIZEOFSTATE
+(()-1))/()]; } 
	tXXH32_°©eS∑˚_t
;

154 
XXH32_öãrmedüãDige°
 (* 
°©e
);

169 
	#XXH32_„ed
 
XXH32_upd©e


	)

170 
	#XXH32_ªsu…
 
XXH32_dige°


	)

171 
	#XXH32_gëI¡îmedüãResu…
 
XXH32_öãrmedüãDige°


	)

175 #i‡
deföed
 (
__˝lu•lus
)

	@../file.h

1 #i‚de‡
FIO_FILE_H


2 
	#FIO_FILE_H


	)

4 
	~<°rög.h
>

5 
	~"compûî/compûî.h
"

6 
	~"io_ddú.h
"

7 
	~"Êi°.h
"

8 
	~"lib/zùf.h
"

9 
	~"lib/axm≠.h
"

10 
	~"lib/lf§.h
"

15 
	efio_fûëy≥
 {

16 
	mFIO_TYPE_FILE
 = 1,

17 
	mFIO_TYPE_BD
,

18 
	mFIO_TYPE_CHAR
,

19 
	mFIO_TYPE_PIPE
,

22 
	efio_fûe_Êags
 {

23 
	mFIO_FILE_›í
 = 1 << 0,

24 
	mFIO_FILE_˛osög
 = 1 << 1,

25 
	mFIO_FILE_exãnd
 = 1 << 2,

26 
	mFIO_FILE_d⁄e
 = 1 << 3,

27 
	mFIO_FILE_size_known
 = 1 << 4,

28 
	mFIO_FILE_hashed
 = 1 << 5,

29 
	mFIO_FILE_∑πül_mm≠
 = 1 << 6,

32 
	efûe_lock_mode
 {

33 
	mFILE_LOCK_NONE
,

34 
	mFILE_LOCK_EXCLUSIVE
,

35 
	mFILE_LOCK_READWRITE
,

43 
	mFIO_FSERVICE_RANDOM
 = 1,

44 
	mFIO_FSERVICE_RR
 = 2,

45 
	mFIO_FSERVICE_SEQ
 = 3,

52 
	efio_ÁŒoˇã_mode
 {

53 
	mFIO_FALLOCATE_NONE
 = 1,

54 
	mFIO_FALLOCATE_POSIX
 = 2,

55 
	mFIO_FALLOCATE_KEEP_SIZE
 = 3,

62 
	sfio_fûe
 {

63 
Êi°_hód
 
	mhash_li°
;

64 
fio_fûëy≥
 
	mfûëy≥
;

66 
	mfd
;

67 
	mshadow_fd
;

68 #ifde‡
WIN32


69 
HANDLE
 
	mhFûe
;

70 
HANDLE
 
	mioCP
;

76 *
	mfûe_«me
;

77 
	mmaj‹
, 
	mmö‹
;

78 
	mfûío
;

80 *
	mmm≠_±r
;

81 
size_t
 
	mmm≠_sz
;

82 
off_t
 
	mmm≠_off
;

87 
uöt64_t
 
	mªÆ_fûe_size
;

88 
uöt64_t
 
	mfûe_off£t
;

89 
uöt64_t
 
	mio_size
;

91 
uöt64_t
 
	mœ°_pos
;

92 
uöt64_t
 
	mœ°_°¨t
;

94 
uöt64_t
 
	mfú°_wrôe
;

95 
uöt64_t
 
	mœ°_wrôe
;

100 
uöt64_t
 
	mígöe_d©a
;

106 
fio_muãx
 *
	mlock
;

107 
fio_rwlock
 *
	mrwlock
;

113 
axm≠
 *
	mio_axm≠
;

115 
fio_lf§
 
	mlf§
;

120 
zùf_°©e
 
	mzùf
;

122 
	mª„ªn˚s
;

123 
fio_fûe_Êags
 
	mÊags
;

125 
disk_utû
 *
	mdu
;

128 
	sfûe_«me
 {

129 
Êi°_hód
 
	mli°
;

130 *
	mfûíame
;

133 
	#FILE_FLAG_FNS
(
«me
) \

134 
ölöe
 
fio_fûe_£t_
##
	`«me
(
fio_fûe
 *
f
) \

136 (
f
)->
Êags
 = (
fio_fûe_Êags
Ë((f)->Êag†| 
FIO_FILE_
##
«me
); \

138 
ölöe
 
fio_fûe_˛ór_
##
	`«me
(
fio_fûe
 *
f
) \

140 (
f
)->
Êags
 = (
fio_fûe_Êags
Ë((f)->Êag†& ~
FIO_FILE_
##
«me
); \

142 
ölöe
 
fio_fûe_
##
	`«me
(
fio_fûe
 *
f
) \

144  ((
f
)->
Êags
 & 
FIO_FILE_
##
«me
) != 0; \

145 }

	)

147 
FILE_FLAG_FNS
(
›í
);

148 
FILE_FLAG_FNS
(
˛osög
);

149 
FILE_FLAG_FNS
(
exãnd
);

150 
FILE_FLAG_FNS
(
d⁄e
);

151 
FILE_FLAG_FNS
(
size_known
);

152 
FILE_FLAG_FNS
(
hashed
);

153 
FILE_FLAG_FNS
(
∑πül_mm≠
);

154 #unde‡
FILE_FLAG_FNS


159 
	gthªad_d©a
;

160 
˛o£_fûes
(
thªad_d©a
 *);

161 
˛o£_™d_‰ì_fûes
(
thªad_d©a
 *);

162 
uöt64_t
 
gë_°¨t_off£t
(
thªad_d©a
 *, 
fio_fûe
 *);

163 
__mu°_check
 
£tup_fûes
(
thªad_d©a
 *);

164 
__mu°_check
 
fûe_övÆid©e_ˇche
(
thªad_d©a
 *, 
fio_fûe
 *);

165 
__mu°_check
 
gíîic_›í_fûe
(
thªad_d©a
 *, 
fio_fûe
 *);

166 
__mu°_check
 
gíîic_˛o£_fûe
(
thªad_d©a
 *, 
fio_fûe
 *);

167 
__mu°_check
 
gíîic_gë_fûe_size
(
thªad_d©a
 *, 
fio_fûe
 *);

168 
__mu°_check
 
fûe_lookup_›í
(
fio_fûe
 *
f
, 
Êags
);

169 
__mu°_check
 
¥e_ªad_fûes
(
thªad_d©a
 *);

170 
add_fûe
(
thªad_d©a
 *, const *, , );

171 
add_fûe_ex˛usive
(
thªad_d©a
 *, const *);

172 
gë_fûe
(
fio_fûe
 *);

173 
__mu°_check
 
put_fûe
(
thªad_d©a
 *, 
fio_fûe
 *);

174 
put_fûe_log
(
thªad_d©a
 *, 
fio_fûe
 *);

175 
lock_fûe
(
thªad_d©a
 *, 
fio_fûe
 *, 
fio_ddú
);

176 
u∆ock_fûe
(
thªad_d©a
 *, 
fio_fûe
 *);

177 
u∆ock_fûe_Æl
(
thªad_d©a
 *, 
fio_fûe
 *);

178 
add_dú_fûes
(
thªad_d©a
 *, const *);

179 
öô_øndom_m≠
(
thªad_d©a
 *);

180 
dup_fûes
(
thªad_d©a
 *, thread_data *);

181 
gë_fûío
(
thªad_d©a
 *, const *);

182 
‰ì_ªÀa£_fûes
(
thªad_d©a
 *);

183 
fûe£tup_mem_‰ì
();

184 
fio_fûe_ª£t
(
thªad_d©a
 *, 
fio_fûe
 *);

185 
fio_fûes_d⁄e
(
thªad_d©a
 *);

	@../filehash.h

1 #i‚de‡
FIO_FILE_HASH_H


2 
	#FIO_FILE_HASH_H


	)

4 
fûe_hash_size
;

6 
fûe_hash_öô
(*);

7 
fûe_hash_exô
();

8 
fio_fûe
 *
lookup_fûe_hash
(const *);

9 
fio_fûe
 *
add_fûe_hash
(fio_file *);

10 
ªmove_fûe_hash
(
fio_fûe
 *);

11 
fio_fûe_hash_lock
();

12 
fio_fûe_hash_u∆ock
();

	@../fio.h

1 #i‚de‡
FIO_H


2 
	#FIO_H


	)

4 
	~<sched.h
>

5 
	~<limôs.h
>

6 
	~<±hªad.h
>

7 
	~<sys/time.h
>

8 
	~<sys/ªsour˚.h
>

9 
	~<î∫o.h
>

10 
	~<°dlib.h
>

11 
	~<°dio.h
>

12 
	~<uni°d.h
>

13 
	~<°rög.h
>

14 
	~<öây≥s.h
>

15 
	~<as£π.h
>

17 
	~"compûî/compûî.h
"

18 
	~"thªad_›ti⁄s.h
"

19 
	~"Êi°.h
"

20 
	~"fifo.h
"

21 
	~"¨ch/¨ch.h
"

22 
	~"os/os.h
"

23 
	~"muãx.h
"

24 
	~"log.h
"

25 
	~"debug.h
"

26 
	~"fûe.h
"

27 
	~"io_ddú.h
"

28 
	~"i€ngöe.h
"

29 
	~"iﬁog.h
"

30 
	~"hñ≥rs.h
"

31 
	~"›ti⁄s.h
"

32 
	~"¥ofûe.h
"

33 
	~"fio_time.h
"

34 
	~"gëtime.h
"

35 
	~"lib/gë›t.h
"

36 
	~"lib/ønd.h
"

37 
	~"lib/rbåì.h
"

38 
	~"˛õ¡.h
"

39 
	~"£rvî.h
"

40 
	~"°©.h
"

41 
	~"Êow.h
"

42 
	~"io_u_queue.h
"

44 #ifde‡
CONFIG_SOLARISAIO


45 
	~<sys/asynch.h
>

48 #ifde‡
CONFIG_LIBNUMA


49 
	~<löux/mempﬁicy.h
>

50 
	~<numa.h
>

55 
	#MPOL_LOCAL
 
MPOL_MAX


	)

62 
	mRW_SEQ_SEQ
 = 0,

63 
	mRW_SEQ_IDENT
,

67 
	mTD_F_VER_BACKLOG
 = 1,

68 
	mTD_F_TRIM_BACKLOG
 = 2,

69 
	mTD_F_READ_IOLOG
 = 4,

70 
	mTD_F_REFILL_BUFFERS
 = 8,

71 
	mTD_F_SCRAMBLE_BUFFERS
 = 16,

72 
	mTD_F_VER_NONE
 = 32,

73 
	mTD_F_PROFILE_OPS
 = 64,

74 
	mTD_F_COMPRESS
 = 128,

75 
	mTD_F_NOIO
 = 256,

79 
	mFIO_RAND_BS_OFF
 = 0,

80 
	mFIO_RAND_VER_OFF
,

81 
	mFIO_RAND_MIX_OFF
,

82 
	mFIO_RAND_FILE_OFF
,

83 
	mFIO_RAND_BLOCK_OFF
,

84 
	mFIO_RAND_FILE_SIZE_OFF
,

85 
	mFIO_RAND_TRIM_OFF
,

86 
	mFIO_RAND_BUF_OFF
,

87 
	mFIO_RAND_SEQ_RAND_READ_OFF
,

88 
	mFIO_RAND_SEQ_RAND_WRITE_OFF
,

89 
	mFIO_RAND_SEQ_RAND_TRIM_OFF
,

90 
	mFIO_RAND_START_DELAY
,

91 
	mFIO_RAND_NR_OFFS
,

97 
	sthªad_d©a
 {

98 
thªad_›ti⁄s
 
	mo
;

99 
	mÊags
;

100 *
	meo
;

101 
	mvîr‹
[
FIO_VERROR_SIZE
];

102 
±hªad_t
 
	mthªad
;

103 
	mthªad_numbî
;

104 
	mgroupid
;

105 
thªad_°©
 
	mts
;

107 
	m˛õ¡_ty≥
;

109 
io_log
 *
	m¶©_log
;

110 
io_log
 *
	m˛©_log
;

111 
io_log
 *
	mœt_log
;

112 
io_log
 *
	mbw_log
;

113 
io_log
 *
	mi›s_log
;

115 
uöt64_t
 
	m°©_io_byãs
[
DDIR_RWDIR_CNT
];

116 
timevÆ
 
	mbw_ßm∂e_time
;

118 
uöt64_t
 
	m°©_io_blocks
[
DDIR_RWDIR_CNT
];

119 
timevÆ
 
	mi›s_ßm∂e_time
;

121 vﬁ©ûê
	mupd©e_rußge
;

122 
fio_muãx
 *
	mrußge_£m
;

123 
rußge
 
	mru_°¨t
;

124 
rußge
 
	mru_íd
;

126 
fio_fûe
 **
	mfûes
;

127 *
	mfûe_locks
;

128 
	mfûes_size
;

129 
	mfûes_ödex
;

130 
	mƒ_›í_fûes
;

131 
	mƒ_d⁄e_fûes
;

132 
	mƒ_n‹mÆ_fûes
;

134 
	m√xt_fûe
;

135 
os_øndom_°©e_t
 
	m√xt_fûe_°©e
;

136 
‰™d_°©e
 
	m__√xt_fûe_°©e
;

138 
	mîr‹
;

139 
	msig
;

140 
	md⁄e
;

141 
pid_t
 
	mpid
;

142 *
	m‹ig_buf„r
;

143 
size_t
 
	m‹ig_buf„r_size
;

144 vﬁ©ûê
	mãrmö©e
;

145 vﬁ©ûê
	mrun°©e
;

146 
	mœ°_was_sync
;

147 
fio_ddú
 
	mœ°_ddú
;

149 
	mmm≠fd
;

151 *
	miﬁog_buf
;

152 
FILE
 *
	miﬁog_f
;

154 *
	msysfs_roŸ
;

156 
	mønd_£eds
[
FIO_RAND_NR_OFFS
];

159 
os_øndom_°©e_t
 
	mb§™ge_°©e
;

160 
‰™d_°©e
 
	m__b§™ge_°©e
;

163 
os_øndom_°©e_t
 
	mvîify_°©e
;

164 
‰™d_°©e
 
	m__vîify_°©e
;

167 
os_øndom_°©e_t
 
	måim_°©e
;

168 
‰™d_°©e
 
	m__åim_°©e
;

171 
os_øndom_°©e_t
 
	mdñay_°©e
;

172 
‰™d_°©e
 
	m__dñay_°©e
;

175 
‰™d_°©e
 
	mbuf_°©e
;

177 
	mvîify_b©ch
;

178 
	måim_b©ch
;

180 
	mshm_id
;

186 
i€ngöe_›s
 *
	mio_›s
;

191 
	mcur_dïth
;

196 
	mio_u_queued
;

201 
	mio_u_ö_Êight
;

206 
io_u_rög
 
	mio_u_ªqueues
;

207 
io_u_queue
 
	mio_u_‰ìli°
;

208 
io_u_queue
 
	mio_u_Æl
;

209 
±hªad_muãx_t
 
	mio_u_lock
;

210 
±hªad_c⁄d_t
 
	m‰ì_c⁄d
;

215 
Êi°_hód
 
	mvîify_li°
;

216 
±hªad_t
 *
	mvîify_thªads
;

217 
	mƒ_vîify_thªads
;

218 
±hªad_c⁄d_t
 
	mvîify_c⁄d
;

219 
	mvîify_thªad_exô
;

224 
uöt64_t
 
	møã_bps
[
DDIR_RWDIR_CNT
];

225 
	møã_≥ndög_u¶ìp
[
DDIR_RWDIR_CNT
];

226 
	møã_byãs
[
DDIR_RWDIR_CNT
];

227 
	møã_blocks
[
DDIR_RWDIR_CNT
];

228 
timevÆ
 
	mœ°øã
[
DDIR_RWDIR_CNT
];

230 
uöt64_t
 
	mtŸÆ_io_size
;

231 
uöt64_t
 
	mfûl_devi˚_size
;

233 
	mio_issues
[
DDIR_RWDIR_CNT
];

234 
uöt64_t
 
	mio_blocks
[
DDIR_RWDIR_CNT
];

235 
uöt64_t
 
	mthis_io_blocks
[
DDIR_RWDIR_CNT
];

236 
uöt64_t
 
	mio_byãs
[
DDIR_RWDIR_CNT
];

237 
uöt64_t
 
	mio_skù_byãs
;

238 
uöt64_t
 
	mthis_io_byãs
[
DDIR_RWDIR_CNT
];

239 
uöt64_t
 
	mz⁄e_byãs
;

240 
fio_muãx
 *
	mmuãx
;

246 
os_øndom_°©e_t
 
	møndom_°©e
;

247 
‰™d_°©e
 
	m__øndom_°©e
;

250 
timevÆ
 
	m°¨t
;

251 
timevÆ
 
	mïoch
;

252 
timevÆ
 
	mœ°_issue
;

253 
timevÆ
 
	mtv_ˇche
;

254 
	mtv_ˇche_ƒ
;

255 
	mtv_ˇche_mask
;

256 
	mømp_time_ovî
;

261 
timevÆ
 
	mœãncy_ts
;

262 
	mœãncy_qd
;

263 
	mœãncy_qd_high
;

264 
	mœãncy_qd_low
;

265 
	mœãncy_Áûed
;

266 
uöt64_t
 
	mœãncy_ios
;

267 
	mœãncy_íd_run
;

273 
os_øndom_°©e_t
 
	mrwmix_°©e
;

274 
‰™d_°©e
 
	m__rwmix_°©e
;

276 
	mrwmix_issues
;

277 
fio_ddú
 
	mrwmix_ddú
;

278 
	mddú_£q_ƒ
;

284 
os_øndom_°©e_t
 
	m£q_ønd_°©e
[
DDIR_RWDIR_CNT
];

285 
‰™d_°©e
 
	m__£q_ønd_°©e
[
DDIR_RWDIR_CNT
];

292 
rb_roŸ
 
	mio_hi°_åì
;

293 
Êi°_hód
 
	mio_hi°_li°
;

294 
	mio_hi°_Àn
;

299 
Êi°_hód
 
	mio_log_li°
;

304 
Êi°_hód
 
	måim_li°
;

305 
	måim_íåõs
;

307 
Êi°_hód
 
	m√xt_ønd_li°
;

312 
	mfûe_£rvi˚_ƒ
;

313 
	mfûe_£rvi˚_À·
;

314 
fio_fûe
 *
	mfûe_£rvi˚_fûe
;

316 
	msync_fûe_ønge_ƒ
;

322 
os_øndom_°©e_t
 
	mfûe_size_°©e
;

323 
‰™d_°©e
 
	m__fûe_size_°©e
;

329 
	mtŸÆ_îr_cou¡
;

330 
	mfú°_îr‹
;

332 
fio_Êow
 *
	mÊow
;

337 
¥of_io_›s
 
	m¥of_io_›s
;

338 *
	m¥of_d©a
;

340 *
	mpö√d_mem
;

347 
	mFIO_ETA_AUTO
,

348 
	mFIO_ETA_ALWAYS
,

349 
	mFIO_ETA_NEVER
,

352 
	#__td_vîr‹
(
td
, 
îr
, 
msg
, 
func
) \

354 
____e
 = (
îr
); \

355 i‡((
td
)->
îr‹
) \

357 (
td
)->
îr‹
 = 
____e
; \

358 i‡(!(
td
)->
fú°_îr‹
) \

359 
	`¢¥ötf
(
td
->
vîr‹
, —d->vîr‹), "fûe:%s:%d, func=%s,Éº‹=%s", 
__FILE__
, 
__LINE__
, (
func
), (
msg
)); \

360 } 0)

	)

363 
	#td_˛ór_îr‹
(
td
) \

364 (
td
)->
îr‹
 = 0;

	)

365 
	#td_vîr‹
(
td
, 
îr
, 
func
) \

366 
	`__td_vîr‹
((
td
), (
îr
), 
	`°ªº‹
(”º)), (
func
))

	)

367 
	#td_vmsg
(
td
, 
îr
, 
msg
, 
func
) \

368 
	`__td_vîr‹
((
td
), (
îr
), (
msg
), (
func
))

	)

370 
	#__fio_°rögify_1
(
x
Ë#x

	)

371 
	#__fio_°rögify
(
x
Ë
	`__fio_°rögify_1
(x)

	)

373 
exôÆl_⁄_ãrmö©e
;

374 
thªad_numbî
;

375 
°©_numbî
;

376 
shm_id
;

377 
groupid
;

378 
ouçut_f‹m©
;

379 
≠≥nd_ãr£_ouçut
;

380 
ãmp_°Æl_ts
;

381 
uöçå_t
 
∑ge_mask
, 
∑ge_size
;

382 
ªad_⁄ly
;

383 
ëa_¥öt
;

384 
ëa_√w_löe
;

385 
d⁄e_£cs
;

386 *
job_£˘i⁄
;

387 
fio_gtod_ofÊﬂd
;

388 
fio_gtod_˝u
;

389 
fio_cs
 
fio_˛ock_sour˚
;

390 
fio_˛ock_sour˚_£t
;

391 
w¨nögs_Áèl
;

392 
ãr£_vîsi⁄
;

393 
is_backíd
;

394 
ƒ_˛õ¡s
;

395 
log_sy¶og
;

396 
°©us_öãrvÆ
;

397 c⁄° 
fio_vîsi⁄_°rög
[];

399 
thªad_d©a
 *
thªads
;

401 
ölöe
 
	$fio_ro_check
(
thªad_d©a
 *
td
, 
io_u
 *io_u)

403 
	`as£π
(!(
io_u
->
ddú
 =
DDIR_WRITE
 && !
	`td_wrôe
(
td
)));

404 
	}
}

406 
	#REAL_MAX_JOBS
 2048

	)

408 
ölöe
 
	$should_fsync
(
thªad_d©a
 *
td
)

410 i‡(
td
->
œ°_was_sync
)

412 i‡(
	`td_wrôe
(
td
Ë|| 
	`td_rw
—dË||Åd->
o
.
ovîride_sync
)

416 
	}
}

421 
__mu°_check
 
fio_öô_›ti⁄s
();

422 
__mu°_check
 
∑r£_›ti⁄s
(, **);

423 
∑r£_jobs_öi
(*, , , );

424 
∑r£_cmd_löe
(, **, );

425 
fio_backíd
();

426 
ª£t_fio_°©e
();

427 
˛ór_io_°©e
(
thªad_d©a
 *);

428 
fio_›ti⁄s_∑r£
(
thªad_d©a
 *, **, , );

429 
fio_keyw‹ds_öô
();

430 
fio_cmd_›ti⁄_∑r£
(
thªad_d©a
 *, const *, *);

431 
fio_cmd_i€ngöe_›ti⁄_∑r£
(
thªad_d©a
 *, const *, *);

432 
fio_fûl_deÁu…_›ti⁄s
(
thªad_d©a
 *);

433 
fio_show_›ti⁄_hñp
(const *);

434 
fio_›ti⁄s_£t_i€ngöe_›ts
(
›ti⁄
 *
l⁄g_›ti⁄s
, 
thªad_d©a
 *
td
);

435 
fio_›ti⁄s_dup_™d_öô
(
›ti⁄
 *);

436 
fio_›ti⁄s_mem_du≥
(
thªad_d©a
 *);

437 
›ti⁄s_mem_du≥
(*
d©a
, 
fio_›ti⁄
 *
›ti⁄s
);

438 
td_fûl_ønd_£eds
(
thªad_d©a
 *);

439 
add_job_›ts
(const **, );

440 *
num2°r
(, , , , );

441 
i€ngöe_lﬂd
(
thªad_d©a
 *);

442 
∑r£_dryrun
();

443 
fio_ru¬ög_‹_≥ndög_io_thªads
();

444 
fio_£t_fd_n⁄blockög
(, const *);

446 
uöçå_t
 
∑ge_mask
;

447 
uöçå_t
 
∑ge_size
;

448 
öôülize_fio
(*
ívp
[]);

450 
	#FIO_GETOPT_JOB
 0x89000000

	)

451 
	#FIO_GETOPT_IOENGINE
 0x98000000

	)

452 
	#FIO_NR_OPTIONS
 (
FIO_MAX_OPTS
 + 128)

	)

457 
¥öt_thªad_°©us
();

458 
¥öt_°©us_öô
();

459 *
fio_uöt_to_kmg
(
vÆ
);

468 
	mTD_NOT_CREATED
 = 0,

469 
	mTD_CREATED
,

470 
	mTD_INITIALIZED
,

471 
	mTD_RAMP
,

472 
	mTD_SETTING_UP
,

473 
	mTD_RUNNING
,

474 
	mTD_PRE_READING
,

475 
	mTD_VERIFYING
,

476 
	mTD_FSYNCING
,

477 
	mTD_FINISHING
,

478 
	mTD_EXITED
,

479 
	mTD_REAPED
,

482 
td_£t_run°©e
(
thªad_d©a
 *, );

483 
td_bump_run°©e
(
thªad_d©a
 *, );

484 
td_ª°‹e_run°©e
(
thªad_d©a
 *, );

486 
	#TERMINATE_ALL
 (-1)

	)

487 
fio_ãrmö©e_thªads
();

492 
__mu°_check
 
fio_pö_mem‹y
(
thªad_d©a
 *);

493 
fio_u≈ö_mem‹y
(
thªad_d©a
 *);

494 
__mu°_check
 
Æloˇã_io_mem
(
thªad_d©a
 *);

495 
‰ì_io_mem
(
thªad_d©a
 *);

496 
‰ì_thªads_shm
();

501 
ª£t_Æl_°©s
(
thªad_d©a
 *);

506 #ifde‡
FIO_HAVE_BLKTRACE


507 
is_blkåa˚
(const *, *);

508 
lﬂd_blkåa˚
(
thªad_d©a
 *, const *, );

514 
œt_èrgë_check
(
thªad_d©a
 *);

515 
œt_èrgë_öô
(
thªad_d©a
 *);

516 
œt_èrgë_ª£t
(
thªad_d©a
 *);

518 
	#f‹_óch_td
(
td
, 
i
) \

519 (
i
Ë0, (
td
Ë&
thªads
[0]; (iË< (Ë
thªad_numbî
; (i)++, (td)++)

	)

520 
	#f‹_óch_fûe
(
td
, 
f
, 
i
) \

521 i‡((
td
)->
fûes_ödex
) \

522 (
i
Ë0, (
f
Ë(
td
)->
fûes
[0]; \

523 (
i
Ë< (
td
)->
o
.
ƒ_fûes
 && ((
f
Ë—d)->
fûes
[i]Ë!
NULL
; \

524 (
i
)++)

	)

526 
	#fio_as£π
(
td
, 
c⁄d
) do { \

527 i‡(!(
c⁄d
)) { \

528 *
__foo
 = 
NULL
; \

529 
	`Ârötf
(
°dîr
, "fûe:%s:%d,ás£π %†Áûed\n", 
__FILE__
, 
__LINE__
, #cond); \

530 
	`td_£t_run°©e
((
td
), 
TD_EXITED
); \

531 (
td
)->
îr‹
 = 
EFAULT
; \

532 *
__foo
 = 0; \

534 } 0)

	)

536 
ölöe
 
	$fio_fûl_issue_time
(
thªad_d©a
 *
td
)

538 i‡(
td
->
o
.
ªad_iﬁog_fûe
 ||

539 !
td
->
o
.
dißbÀ_˛©
 || !td->o.
dißbÀ_¶©
 || !td->o.
dißbÀ_bw
)

543 
	}
}

545 
ölöe
 
	$__should_check_øã
(
thªad_d©a
 *
td
,

546 
fio_ddú
 
ddú
)

548 
thªad_›ti⁄s
 *
o
 = &
td
->o;

553 i‡(
o
->
øã
[
ddú
] || o->
øãmö
[ddú] || o->
øã_i›s
[ddir] ||

554 
o
->
øã_i›s_mö
[
ddú
])

558 
	}
}

560 
ölöe
 
	$should_check_øã
(
thªad_d©a
 *
td
,

561 
uöt64_t
 *
byãs_d⁄e
)

563 
ªt
 = 0;

565 i‡(
byãs_d⁄e
[
DDIR_READ
])

566 
ªt
 |
	`__should_check_øã
(
td
, 
DDIR_READ
);

567 i‡(
byãs_d⁄e
[
DDIR_WRITE
])

568 
ªt
 |
	`__should_check_øã
(
td
, 
DDIR_WRITE
);

569 i‡(
byãs_d⁄e
[
DDIR_TRIM
])

570 
ªt
 |
	`__should_check_øã
(
td
, 
DDIR_TRIM
);

572  
ªt
;

573 
	}
}

575 
ölöe
 
	$td_max_bs
(
thªad_d©a
 *
td
)

577 
max_bs
;

579 
max_bs
 = 
	`max
(
td
->
o
.max_bs[
DDIR_READ
],Åd->o.max_bs[
DDIR_WRITE
]);

580  
	`max
(
td
->
o
.
max_bs
[
DDIR_TRIM
], max_bs);

581 
	}
}

583 
ölöe
 
	$td_mö_bs
(
thªad_d©a
 *
td
)

585 
mö_bs
;

587 
mö_bs
 = 
	`mö
(
td
->
o
.mö_bs[
DDIR_READ
],Åd->o.mö_bs[
DDIR_WRITE
]);

588  
	`mö
(
td
->
o
.
mö_bs
[
DDIR_TRIM
], min_bs);

589 
	}
}

591 
ölöe
 
	$is_powî_of_2
(
vÆ
)

593  (
vÆ
 != 0 && ((val & (val - 1)) == 0));

594 
	}
}

600 
ölöe
 
	$td_io_u_lock
(
thªad_d©a
 *
td
)

602 i‡(
td
->
o
.
vîify_async
)

603 
	`±hªad_muãx_lock
(&
td
->
io_u_lock
);

604 
	}
}

606 
ölöe
 
	$td_io_u_u∆ock
(
thªad_d©a
 *
td
)

608 i‡(
td
->
o
.
vîify_async
)

609 
	`±hªad_muãx_u∆ock
(&
td
->
io_u_lock
);

610 
	}
}

612 
ölöe
 
	$td_io_u_‰ì_nŸify
(
thªad_d©a
 *
td
)

614 i‡(
td
->
o
.
vîify_async
)

615 
	`±hªad_c⁄d_sig«l
(&
td
->
‰ì_c⁄d
);

616 
	}
}

618 c⁄° *
fio_gë_¨ch_°rög
();

619 c⁄° *
fio_gë_os_°rög
();

621 #ifde‡
FIO_INTERNAL


622 
	#ARRAY_SIZE
(
x
Ë(((x)Ë/ (((x)[0])))

	)

626 
	mFIO_OUTPUT_TERSE
 = 0,

627 
	mFIO_OUTPUT_JSON
,

628 
	mFIO_OUTPUT_NORMAL
,

632 
	mFIO_RAND_DIST_RANDOM
 = 0,

633 
	mFIO_RAND_DIST_ZIPF
,

634 
	mFIO_RAND_DIST_PARETO
,

638 
	mFIO_RAND_GEN_TAUSWORTHE
 = 0,

639 
	mFIO_RAND_GEN_LFSR
,

643 
	mFIO_CPUS_SHARED
 = 0,

644 
	mFIO_CPUS_SPLIT
,

	@../fio_time.h

1 #i‚de‡
FIO_TIME_H


2 
	#FIO_TIME_H


	)

4 
uöt64_t
 
utime_sö˚
(
timevÆ
 *, timeval *);

5 
uöt64_t
 
utime_sö˚_now
(
timevÆ
 *);

6 
uöt64_t
 
mtime_sö˚
(
timevÆ
 *, timeval *);

7 
uöt64_t
 
mtime_sö˚_now
(
timevÆ
 *);

8 
uöt64_t
 
time_sö˚_now
(
timevÆ
 *);

9 
uöt64_t
 
mtime_sö˚_gíesis
();

10 
uöt64_t
 
utime_sö˚_gíesis
();

11 
u£c_•ö
();

12 
u£c_¶ìp
(
thªad_d©a
 *, );

13 
fûl_°¨t_time
(
timevÆ
 *);

14 
£t_gíesis_time
();

15 
ømp_time_ovî
(
thªad_d©a
 *);

16 
ö_ømp_time
(
thªad_d©a
 *);

17 
fio_time_öô
();

	@../flist.h

1 #i‚de‡
_LINUX_FLIST_H


2 
	#_LINUX_FLIST_H


	)

4 
	~<°dlib.h
>

6 #unde‡
off£tof


7 #ifde‡
__compûî_off£tof


8 
	#off£tof
(
TYPE
,
MEMBER
Ë
	`__compûî_off£tof
(TYPE,MEMBER)

	)

10 
	#off£tof
(
TYPE
, 
MEMBER
Ë((
size_t
Ë&((TYPE *)0)->MEMBER)

	)

13 
	#c⁄èöî_of
(
±r
, 
ty≥
, 
membî
) ({ \

14 c⁄° 
	`ty≥of
–((
ty≥
 *)0)->
membî
 ) *
__m±r
 = (
±r
); \

15 (
ty≥
 *)–(*)
__m±r
 - 
	`off£tof
—y≥,
membî
Ë);})

	)

27 
	sÊi°_hód
 {

28 
Êi°_hód
 *
	m√xt
, *
	m¥ev
;

31 
	#FLIST_HEAD_INIT
(
«me
Ë{ &“ame), &“ameË}

	)

33 
	#FLIST_HEAD
(
«me
) \

34 
Êi°_hód
 
«me
 = 
	`FLIST_HEAD_INIT
“ame)

	)

36 
	#INIT_FLIST_HEAD
(
±r
) do { \

37 (
±r
)->
√xt
 = (±r); (±r)->
¥ev
 = (ptr); \

38 } 0)

	)

46 
ölöe
 
	$__Êi°_add
(
Êi°_hód
 *
√w_íåy
,

47 
Êi°_hód
 *
¥ev
,

48 
Êi°_hód
 *
√xt
)

50 
√xt
->
¥ev
 = 
√w_íåy
;

51 
√w_íåy
->
√xt
 =Çext;

52 
√w_íåy
->
¥ev
 =Örev;

53 
¥ev
->
√xt
 = 
√w_íåy
;

54 
	}
}

64 
ölöe
 
	$Êi°_add
(
Êi°_hód
 *
√w_íåy
,

65 
Êi°_hód
 *
hód
)

67 
	`__Êi°_add
(
√w_íåy
, 
hód
, hód->
√xt
);

68 
	}
}

70 
ölöe
 
	$Êi°_add_èû
(
Êi°_hód
 *
√w_íåy
,

71 
Êi°_hód
 *
hód
)

73 
	`__Êi°_add
(
√w_íåy
, 
hód
->
¥ev
, head);

74 
	}
}

83 
ölöe
 
	$__Êi°_dñ
(
Êi°_hód
 *
¥ev
,

84 
Êi°_hód
 * 
√xt
)

86 
√xt
->
¥ev
 =Örev;

87 
¥ev
->
√xt
 =Çext;

88 
	}
}

96 
ölöe
 
	$Êi°_dñ
(
Êi°_hód
 *
íåy
)

98 
	`__Êi°_dñ
(
íåy
->
¥ev
,É¡ry->
√xt
);

99 
íåy
->
√xt
 = 
NULL
;

100 
íåy
->
¥ev
 = 
NULL
;

101 
	}
}

107 
ölöe
 
	$Êi°_dñ_öô
(
Êi°_hód
 *
íåy
)

109 
	`__Êi°_dñ
(
íåy
->
¥ev
,É¡ry->
√xt
);

110 
	`INIT_FLIST_HEAD
(
íåy
);

111 
	}
}

117 
ölöe
 
	$Êi°_em±y
(c⁄° 
Êi°_hód
 *
hód
)

119  
hód
->
√xt
 == head;

120 
	}
}

122 
ölöe
 
	$__Êi°_•li˚
(c⁄° 
Êi°_hód
 *
li°
,

123 
Êi°_hód
 *
¥ev
,

124 
Êi°_hód
 *
√xt
)

126 
Êi°_hód
 *
fú°
 = 
li°
->
√xt
;

127 
Êi°_hód
 *
œ°
 = 
li°
->
¥ev
;

129 
fú°
->
¥ev
 =Örev;

130 
¥ev
->
√xt
 = 
fú°
;

132 
œ°
->
√xt
 =Çext;

133 
√xt
->
¥ev
 = 
œ°
;

134 
	}
}

136 
ölöe
 
	$Êi°_•li˚
(c⁄° 
Êi°_hód
 *
li°
,

137 
Êi°_hód
 *
hód
)

139 i‡(!
	`Êi°_em±y
(
li°
))

140 
	`__Êi°_•li˚
(
li°
, 
hód
, hód->
√xt
);

141 
	}
}

143 
ölöe
 
	$Êi°_•li˚_öô
(
Êi°_hód
 *
li°
,

144 
Êi°_hód
 *
hód
)

146 i‡(!
	`Êi°_em±y
(
li°
)) {

147 
	`__Êi°_•li˚
(
li°
, 
hód
, hód->
√xt
);

148 
	`INIT_FLIST_HEAD
(
li°
);

150 
	}
}

158 
	#Êi°_íåy
(
±r
, 
ty≥
, 
membî
) \

159 
	`c⁄èöî_of
(
±r
, 
ty≥
, 
membî
)

	)

166 
	#Êi°_f‹_óch
(
pos
, 
hód
) \

167 
pos
 = (
hód
)->
√xt
;Öo†!(hód);Öo†pos->√xt)

	)

175 
	#Êi°_f‹_óch_ß„
(
pos
, 
n
, 
hód
) \

176 
pos
 = (
hód
)->
√xt
, 
n
 =Öos->next;Öos != (head); \

177 
pos
 = 
n
,Ç =Öos->
√xt
)

	)

179 
Êi°_s‹t
(*
¥iv
, 
Êi°_hód
 *
hód
,

180 (*
cmp
)(*
¥iv
, 
Êi°_hód
 *
a
, Êi°_hód *
b
));

	@../gettime.h

1 #i‚de‡
FIO_GETTIME_H


2 
	#FIO_GETTIME_H


	)

7 
	efio_cs
 {

8 
	mCS_GTOD
 = 1,

9 
	mCS_CGETTIME
,

10 
	mCS_CPUCLOCK
,

11 
	mCS_INVAL
,

14 
fio_gëtime
(
timevÆ
 *, *);

15 
fio_gtod_öô
();

16 
fio_˛ock_öô
();

17 
fio_°¨t_gtod_thªad
();

18 
fio_m⁄Ÿ⁄ic_˛ockã°
();

19 
fio_loˇl_˛ock_öô
();

21 
timevÆ
 *
fio_tv
;

	@../hash.h

1 #i‚de‡
_LINUX_HASH_H


2 
	#_LINUX_HASH_H


	)

4 
	~<öây≥s.h
>

5 
	~"¨ch/¨ch.h
"

21 #i‡
BITS_PER_LONG
 == 32

23 
	#GOLDEN_RATIO_PRIME
 0x9e370001UL

	)

24 #ñi‡
BITS_PER_LONG
 == 64

26 
	#GOLDEN_RATIO_PRIME
 0x9e37fffffffc0001UL

	)

28 #îr‹ 
Deföe
 
GOLDEN_RATIO_PRIME
 
your
 
w‹dsize
.

31 
	#GR_PRIME_64
 0x9e37fffffffc0001ULL

	)

33 
ölöe
 
	$__hash_l⁄g
(
vÆ
)

35 
hash
 = 
vÆ
;

37 #i‡
BITS_PER_LONG
 == 64

39 
n
 = 
hash
;

40 
n
 <<= 18;

41 
hash
 -
n
;

42 
n
 <<= 33;

43 
hash
 -
n
;

44 
n
 <<= 3;

45 
hash
 +
n
;

46 
n
 <<= 3;

47 
hash
 -
n
;

48 
n
 <<= 4;

49 
hash
 +
n
;

50 
n
 <<= 2;

51 
hash
 +
n
;

54 
hash
 *
GOLDEN_RATIO_PRIME
;

57  
hash
;

58 
	}
}

60 
ölöe
 
	$hash_l⁄g
(
vÆ
, 
bôs
)

63  
	`__hash_l⁄g
(
vÆ
Ë>> (
BITS_PER_LONG
 - 
bôs
);

64 
	}
}

66 
ölöe
 
uöt64_t
 
	$__hash_u64
(
uöt64_t
 
vÆ
)

68  
vÆ
 * 
GR_PRIME_64
;

69 
	}
}

71 
ölöe
 
	$hash_±r
(*
±r
, 
bôs
)

73  
	`hash_l⁄g
((
uöçå_t
)
±r
, 
bôs
);

74 
	}
}

80 
	#JHASH_INITVAL
 
GOLDEN_RATIO_PRIME


	)

82 
ölöe
 
uöt32_t
 
	$rﬁ32
(
uöt32_t
 
w‹d
, uöt32_à
shi·
)

84  (
w‹d
 << 
shi·
) | (word >> (32 - shift));

85 
	}
}

88 
	#__jhash_mix
(
a
, 
b
, 
c
) \

90 
a
 -
c
;á ^
	`rﬁ32
(c, 4); c +
b
; \

91 
b
 -
a
; b ^
	`rﬁ32
◊, 6);á +
c
; \

92 
c
 -
b
; c ^
	`rﬁ32
(b, 8); b +
a
; \

93 
a
 -
c
;á ^
	`rﬁ32
(c, 16); c +
b
; \

94 
b
 -
a
; b ^
	`rﬁ32
◊, 19);á +
c
; \

95 
c
 -
b
; c ^
	`rﬁ32
(b, 4); b +
a
; \

96 }

	)

99 
	#__jhash_föÆ
(
a
, 
b
, 
c
) \

101 
c
 ^
b
; c -
	`rﬁ32
(b, 14); \

102 
a
 ^
c
;á -
	`rﬁ32
(c, 11); \

103 
b
 ^
a
; b -
	`rﬁ32
(a, 25); \

104 
c
 ^
b
; c -
	`rﬁ32
(b, 16); \

105 
a
 ^
c
;á -
	`rﬁ32
(c, 4); \

106 
b
 ^
a
; b -
	`rﬁ32
(a, 14); \

107 
c
 ^
b
; c -
	`rﬁ32
(b, 24); \

108 }

	)

110 
ölöe
 
uöt32_t
 
	$jhash
(c⁄° *
key
, 
uöt32_t
 
Àngth
, uöt32_à
öôvÆ
)

112 c⁄° 
uöt8_t
 *
k
 = 
key
;

113 
uöt32_t
 
a
, 
b
, 
c
;

116 
a
 = 
b
 = 
c
 = 
JHASH_INITVAL
 + 
Àngth
 + 
öôvÆ
;

119 
Àngth
 > 12) {

120 
a
 +*
k
;

121 
b
 +*(
k
 + 4);

122 
c
 +*(
k
 + 8);

123 
	`__jhash_mix
(
a
, 
b
, 
c
);

124 
Àngth
 -= 12;

125 
k
 += 12;

130 
Àngth
) {

131 12: 
c
 +(
uöt32_t
Ë
k
[11] << 24;

132 11: 
c
 +(
uöt32_t
Ë
k
[10] << 16;

133 10: 
c
 +(
uöt32_t
Ë
k
[9] << 8;

134 9: 
c
 +
k
[8];

135 8: 
b
 +(
uöt32_t
Ë
k
[7] << 24;

136 7: 
b
 +(
uöt32_t
Ë
k
[6] << 16;

137 6: 
b
 +(
uöt32_t
Ë
k
[5] << 8;

138 5: 
b
 +
k
[4];

139 4: 
a
 +(
uöt32_t
Ë
k
[3] << 24;

140 3: 
a
 +(
uöt32_t
Ë
k
[2] << 16;

141 2: 
a
 +(
uöt32_t
Ë
k
[1] << 8;

142 1: 
a
 +
k
[0];

143 
	`__jhash_föÆ
(
a
, 
b
, 
c
);

148  
c
;

149 
	}
}

	@../lib/axmap.h

1 #i‚de‡
FIO_BITMAP_H


2 
	#FIO_BITMAP_H


	)

4 
	~<öây≥s.h
>

6 
	gaxm≠
;

7 
axm≠
 *
axm≠_√w
(
ƒ_bôs
);

8 
axm≠_‰ì
(
axm≠
 *
bm
);

10 
axm≠_˛ór
(
axm≠
 *axm≠, 
uöt64_t
 
bô_ƒ
);

11 
axm≠_£t
(
axm≠
 *axm≠, 
uöt64_t
 
bô_ƒ
);

12 
axm≠_£t_ƒ
(
axm≠
 *axm≠, 
uöt64_t
 
bô_ƒ
, 
ƒ_bôs
);

13 
axm≠_is£t
(
axm≠
 *axm≠, 
uöt64_t
 
bô_ƒ
);

14 
uöt64_t
 
axm≠_fú°_‰ì
(
axm≠
 *axmap);

15 
uöt64_t
 
axm≠_√xt_‰ì
(
axm≠
 *axm≠, uöt64_à
bô_ƒ
);

16 
axm≠_ª£t
(
axm≠
 *axmap);

	@../lib/bswap.h

1 #i‚de‡
FIO_BSWAP_H


2 
	#FIO_BSWAP_H


	)

4 
	~<öây≥s.h
>

6 #ifde‡
CONFIG_LITTLE_ENDIAN


7 
ölöe
 
uöt32_t
 
	$__be32_to_˝u
(
uöt32_t
 
vÆ
)

9 
uöt32_t
 
c1
, 
c2
, 
c3
, 
c4
;

11 
c1
 = (
vÆ
 >> 24) & 0xff;

12 
c2
 = (
vÆ
 >> 16) & 0xff;

13 
c3
 = (
vÆ
 >> 8) & 0xff;

14 
c4
 = 
vÆ
 & 0xff;

16  
c1
 | 
c2
 << 8 | 
c3
 << 16 | 
c4
 << 24;

17 
	}
}

19 
ölöe
 
uöt64_t
 
	$__be64_to_˝u
(
uöt64_t
 
vÆ
)

21 
uöt64_t
 
c1
, 
c2
, 
c3
, 
c4
, 
c5
, 
c6
, 
c7
, 
c8
;

23 
c1
 = (
vÆ
 >> 56) & 0xff;

24 
c2
 = (
vÆ
 >> 48) & 0xff;

25 
c3
 = (
vÆ
 >> 40) & 0xff;

26 
c4
 = (
vÆ
 >> 32) & 0xff;

27 
c5
 = (
vÆ
 >> 24) & 0xff;

28 
c6
 = (
vÆ
 >> 16) & 0xff;

29 
c7
 = (
vÆ
 >> 8) & 0xff;

30 
c8
 = 
vÆ
 & 0xff;

32  
c1
 | 
c2
 << 8 | 
c3
 << 16 | 
c4
 << 24 | 
c5
 << 32 | 
c6
 << 40 | 
c7
 << 48 | 
c8
 << 56;

33 
	}
}

35 
ölöe
 
uöt64_t
 
	$__be64_to_˝u
(
uöt64_t
 
vÆ
)

37  
vÆ
;

38 
	}
}

40 
ölöe
 
uöt32_t
 
	$__be32_to_˝u
(
uöt32_t
 
vÆ
)

42  
vÆ
;

43 
	}
}

	@../lib/ffz.h

1 #i‚de‡
FIO_FFZ_H


2 
	#FIO_FFZ_H


	)

4 
ölöe
 
	$__ffs
(
w‹d
)

6 
r
 = 0;

8 #i‡
BITS_PER_LONG
 == 64

9 i‡((
w‹d
 & 0xffffffff) == 0) {

10 
r
 += 32;

11 
w‹d
 >>= 32;

14 i‡(!(
w‹d
 & 0xffff)) {

15 
w‹d
 >>= 16;

16 
r
 += 16;

18 i‡(!(
w‹d
 & 0xff)) {

19 
w‹d
 >>= 8;

20 
r
 += 8;

22 i‡(!(
w‹d
 & 0xf)) {

23 
w‹d
 >>= 4;

24 
r
 += 4;

26 i‡(!(
w‹d
 & 3)) {

27 
w‹d
 >>= 2;

28 
r
 += 2;

30 i‡(!(
w‹d
 & 1)) {

31 
w‹d
 >>= 1;

32 
r
 += 1;

35  
r
;

36 
	}
}

38 
ölöe
 
	$ffz
(
bômask
)

40  
	`__ffs
(~
bômask
);

41 
	}
}

	@../lib/hweight.h

1 #i‚de‡
FIO_HWEIGHT_H


2 
	#FIO_HWEIGHT_H


	)

4 
	~<öây≥s.h
>

6 
hweight8
(
uöt8_t
 
w
);

7 
hweight32
(
uöt32_t
 
w
);

8 
hweight64
(
uöt64_t
 
w
);

	@../lib/ieee754.h

1 #i‚de‡
FIO_IEEE754_H


2 
	#FIO_IEEE754_H


	)

4 
	~<öây≥s.h
>

6 
uöt64_t
 
∑ck754
(
f
, 
bôs
, 
expbôs
);

7 
u≈ack754
(
uöt64_t
 
i
, 
bôs
, 
expbôs
);

9 
	#fio_doubÀ_to_uöt64
(
vÆ
Ë
	`∑ck754
((vÆ), 64, 11)

	)

10 
	#fio_uöt64_to_doubÀ
(
vÆ
Ë
	`u≈ack754
((vÆ), 64, 11)

	)

12 
	sfio_Â64
 {

14 
uöt64_t
 
	mi
;

15 
	mf
;

16 
uöt8_t
 
	mfûÀr
[16];

17 } 
	mu
;

18 } 
	tfio_Â64_t
;

	@../lib/lfsr.h

1 #i‚de‡
FIO_LFSR_H


2 
	#FIO_LFSR_H


	)

4 
	~<öây≥s.h
>

6 
	#FIO_MAX_TAPS
 6

	)

8 
	slf§_èps
 {

9 
	mÀngth
;

10 
	mèps
[
FIO_MAX_TAPS
];

14 
	sfio_lf§
 {

15 
uöt64_t
 
	mx‹mask
;

16 
uöt64_t
 
	mœ°_vÆ
;

17 
uöt64_t
 
	mˇched_bô
;

18 
uöt64_t
 
	mmax_vÆ
;

19 
uöt64_t
 
	mnum_vÆs
;

20 
uöt64_t
 
	mcy˛e_Àngth
;

21 
uöt64_t
 
	mˇched_cy˛e_Àngth
;

22 
	m•ö
;

25 
lf§_√xt
(
fio_lf§
 *
Ê
, 
uöt64_t
 *
off
, uint64_t);

26 
lf§_öô
(
fio_lf§
 *
Ê
, 
uöt64_t
 
size
,

27 
£ed
, 
•ö
);

28 
lf§_ª£t
(
fio_lf§
 *
Ê
, 
£ed
);

	@../lib/strsep.h

1 #i‚de‡
FIO_STRSEP_LIB_H


2 
	#FIO_STRSEP_LIB_H


	)

4 *
°r£p
(**, const *);

	@../lib/zipf.h

1 #i‚de‡
FIO_ZIPF_H


2 
	#FIO_ZIPF_H


	)

4 
	~<öây≥s.h
>

5 
	~"ønd.h
"

7 
	szùf_°©e
 {

8 
uöt64_t
 
	mƒ™ges
;

9 
	mthëa
;

10 
	mzëa2
;

11 
	mzë™
;

12 
	m∑ªto_pow
;

13 
‰™d_°©e
 
	mønd
;

14 
uöt64_t
 
	mønd_off
;

17 
zùf_öô
(
zùf_°©e
 *
zs
, 
ƒ™ges
, 
thëa
, 
£ed
);

18 
zùf_√xt
(
zùf_°©e
 *
zs
);

20 
∑ªto_öô
(
zùf_°©e
 *
zs
, 
ƒ™ges
, 
h
, 
£ed
);

21 
∑ªto_√xt
(
zùf_°©e
 *
zs
);

	@../log.h

1 #i‚de‡
FIO_LOG_H


2 
	#FIO_LOG_H


	)

4 
	~<°dio.h
>

5 
	~<°d¨g.h
>

7 
FILE
 *
f_out
;

8 
FILE
 *
f_îr
;

10 
	$log_îr
(c⁄° *
f‹m©
, ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 1, 2)));

11 
	$log_öfo
(c⁄° *
f‹m©
, ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 1, 2)));

12 
	`log_vÆi°
(c⁄° *
°r
, 
va_li°
);

13 
	`log_loˇl_buf
(c⁄° *
buf
, 
size_t
);

14 
	`log_öfo_Êush
();

17 
FIO_LOG_DEBUG
 = 1,

18 
FIO_LOG_INFO
 = 2,

19 
FIO_LOG_ERR
 = 3,

20 
FIO_LOG_NR
 = 4,

23 c⁄° *
	`log_gë_Àvñ
(
Àvñ
);

	@../minmax.h

1 #i‚de‡
FIO_MIN_MAX_H


2 
	#FIO_MIN_MAX_H


	)

4 #i‚de‡
mö


5 
	#mö
(
a
, 
b
Ë(◊Ë< (bË? (aË: (b))

	)

7 #i‚de‡
max


8 
	#max
(
a
, 
b
Ë(◊Ë> (bË? (aË: (b))

	)

	@../parse.h

1 #i‚de‡
FIO_PARSE_H


2 
	#FIO_PARSE_H


	)

4 
	~"Êi°.h
"

9 
	efio_›t_ty≥
 {

10 
	mFIO_OPT_INVALID
 = 0,

11 
	mFIO_OPT_STR
,

12 
	mFIO_OPT_STR_MULTI
,

13 
	mFIO_OPT_STR_VAL
,

14 
	mFIO_OPT_STR_VAL_TIME
,

15 
	mFIO_OPT_STR_STORE
,

16 
	mFIO_OPT_RANGE
,

17 
	mFIO_OPT_INT
,

18 
	mFIO_OPT_BOOL
,

19 
	mFIO_OPT_FLOAT_LIST
,

20 
	mFIO_OPT_STR_SET
,

21 
	mFIO_OPT_DEPRECATED
,

27 
	svÆue_∑ú
 {

28 c⁄° *
	mivÆ
;

29 
	movÆ
;

30 c⁄° *
	mhñp
;

31 
	m‹vÆ
;

32 *
	mcb
;

35 
	#OPT_LEN_MAX
 4096

	)

36 
	#PARSE_MAX_VP
 24

	)

41 
	sfio_›ti⁄
 {

42 c⁄° *
	m«me
;

43 c⁄° *
	m ame
;

44 c⁄° *
	mÆüs
;

45 
fio_›t_ty≥
 
	mty≥
;

46 
	moff1
;

47 
	moff2
;

48 
	moff3
;

49 
	moff4
;

50 
	moff5
;

51 
	moff6
;

52 
	mmaxvÆ
;

53 
	mmövÆ
;

54 
	mmaxÂ
;

55 
	mmöÂ
;

56 
	möãrvÆ
;

57 
	mmaxÀn
;

58 
	m√g
;

59 
	m¥io
;

60 *
	mcb
;

61 c⁄° *
	mhñp
;

62 c⁄° *
	mdef
;

63 
vÆue_∑ú
 
	mposvÆ
[
PARSE_MAX_VP
];

64 c⁄° *
	m∑ª¡
;

65 
	mhide
;

66 
	mhide_⁄_£t
;

67 c⁄° *
	mövî£
;

68 
fio_›ti⁄
 *
	möv_›t
;

69 (*
	mvîify
)(
	mfio_›ti⁄
 *, *);

70 c⁄° *
	m¥of_«me
;

71 *
	m¥of_›ts
;

72 
	mˇãg‹y
;

73 
	mgroup
;

74 *
	mgui_d©a
;

75 
	mis_£c⁄ds
;

78 (
	t°r_cb_‚
)(*, *);

80 
	`∑r£_›ti⁄
(*, c⁄° *, 
fio_›ti⁄
 *, fio_option **, *, );

81 
	`s‹t_›ti⁄s
(**, 
fio_›ti⁄
 *, );

82 
	`∑r£_cmd_›ti⁄
(c⁄° *
t
, c⁄° *
l
, 
fio_›ti⁄
 *, *);

83 
	`show_cmd_hñp
(
fio_›ti⁄
 *, const *);

84 
	`fûl_deÁu…_›ti⁄s
(*, 
fio_›ti⁄
 *);

85 
	`›ti⁄_öô
(
fio_›ti⁄
 *);

86 
	`›ti⁄s_öô
(
fio_›ti⁄
 *);

87 
	`›ti⁄s_‰ì
(
fio_›ti⁄
 *, *);

89 
	`°rù_bœnk_‰⁄t
(**);

90 
	`°rù_bœnk_íd
(*);

91 
	`°r_to_decimÆ
(const *, *, , *, );

92 
	`check_°r_byãs
(c⁄° *
p
, *
vÆ
, *
d©a
);

93 
	`check_°r_time
(c⁄° *
p
, *
vÆ
, );

94 
	`°r_to_Êﬂt
(c⁄° *
°r
, *
vÆ
);

99 (
	tfio_›t_°r_‚
)(*, const *);

100 (
	tfio_›t_°r_vÆ_‚
)(*, *);

101 (
	tfio_›t_öt_‚
)(*, *);

102 (
	tfio_›t_°r_£t_‚
)(*);

104 
	#__td_v¨
(
°¨t
, 
off£t
Ë((*Ë°¨à+ (off£t))

	)

106 
thªad_›ti⁄s
;

107 
ölöe
 *
	$td_v¨
(
thªad_›ti⁄s
 *
to
, 
fio_›ti⁄
 *
o
,

108 
off£t
)

110 i‡(
o
->
¥of_›ts
)

111  
	`__td_v¨
(
o
->
¥of_›ts
, 
off£t
);

113  
	`__td_v¨
(
to
, 
off£t
);

114 
	}
}

116 
ölöe
 
	$∑r£_is_≥r˚¡
(
vÆ
)

118  
vÆ
 <= -1ULL && val >= (-1ULL - 100ULL);

119 
	}
}

	@../profile.h

1 #i‚de‡
FIO_PROFILE_H


2 
	#FIO_PROFILE_H


	)

4 
	~"Êi°.h
"

9 
	s¥of_io_›s
 {

10 (*
	mtd_öô
)(
	mthªad_d©a
 *);

11 (*
	mtd_exô
)(
	mthªad_d©a
 *);

13 (*
	mfûl_io_u_off
)(
	mthªad_d©a
 *, 
	mio_u
 *, *);

14 (*
	mfûl_io_u_size
)(
	mthªad_d©a
 *, 
	mio_u
 *, );

15 
	mfio_fûe
 *(*
	mgë_√xt_fûe
)(
	mthªad_d©a
 *);

17 (*
	mio_u_œt
)(
	mthªad_d©a
 *, 
	muöt64_t
);

20 
	s¥ofûe_›s
 {

21 
Êi°_hód
 
	mli°
;

22 
	m«me
[32];

23 
	mdesc
[64];

24 
	mÊags
;

29 
fio_›ti⁄
 *
	m›ti⁄s
;

30 *
	m›t_d©a
;

35 (*
	m¥ï_cmd
)();

40 c⁄° **
	mcmdlöe
;

42 
¥of_io_›s
 *
	mio_›s
;

45 
ªgi°î_¥ofûe
(
¥ofûe_›s
 *);

46 
uƒegi°î_¥ofûe
(
¥ofûe_›s
 *);

47 
lﬂd_¥ofûe
(const *);

48 
¥ofûe_›s
 *
föd_¥ofûe
(const *);

49 
¥ofûe_add_hooks
(
thªad_d©a
 *);

51 
¥ofûe_td_öô
(
thªad_d©a
 *);

52 
¥ofûe_td_exô
(
thªad_d©a
 *);

	@../smalloc.h

1 #i‚de‡
FIO_SMALLOC_H


2 
	#FIO_SMALLOC_H


	)

4 *
smÆloc
(
size_t
);

5 
s‰ì
(*);

6 *
smÆloc_°rdup
(const *);

7 
söô
();

8 
s˛ónup
();

10 
smÆloc_poﬁ_size
;

	@../verify.h

1 #i‚de‡
FIO_VERIFY_H


2 
	#FIO_VERIFY_H


	)

4 
	~<°döt.h
>

6 
	#FIO_HDR_MAGIC
 0xacˇ

	)

9 
	mVERIFY_NONE
 = 0,

10 
	mVERIFY_MD5
,

11 
	mVERIFY_CRC64
,

12 
	mVERIFY_CRC32
,

13 
	mVERIFY_CRC32C
,

14 
	mVERIFY_CRC32C_INTEL
,

15 
	mVERIFY_CRC16
,

16 
	mVERIFY_CRC7
,

17 
	mVERIFY_SHA256
,

18 
	mVERIFY_SHA512
,

19 
	mVERIFY_XXHASH
,

20 
	mVERIFY_META
,

21 
	mVERIFY_SHA1
,

22 
	mVERIFY_PATTERN
,

23 
	mVERIFY_NULL
,

31 
	svîify_hódî
 {

32 
uöt16_t
 
	mmagic
;

33 
uöt16_t
 
	mvîify_ty≥
;

34 
uöt32_t
 
	mÀn
;

35 
uöt64_t
 
	mønd_£ed
;

36 
uöt32_t
 
	m¸c32
;

39 
	svhdr_md5
 {

40 
uöt32_t
 
	mmd5_dige°
[4];

42 
	svhdr_sha512
 {

43 
uöt8_t
 
	msha512
[128];

45 
	svhdr_sha256
 {

46 
uöt8_t
 
	msha256
[64];

48 
	svhdr_sha1
 {

49 
uöt32_t
 
	msha1
[5];

51 
	svhdr_¸c64
 {

52 
uöt64_t
 
	m¸c64
;

54 
	svhdr_¸c32
 {

55 
uöt32_t
 
	m¸c32
;

57 
	svhdr_¸c16
 {

58 
uöt16_t
 
	m¸c16
;

60 
	svhdr_¸c7
 {

61 
uöt8_t
 
	m¸c7
;

63 
	svhdr_mëa
 {

64 
uöt64_t
 
	moff£t
;

65 
	mthªad
;

66 
	mnumbîio
;

67 
	mtime_£c
;

68 
	mtime_u£c
;

70 
	svhdr_xxhash
 {

71 
uöt32_t
 
	mhash
;

77 
p›uœã_vîify_io_u
(
thªad_d©a
 *, 
io_u
 *);

78 
__mu°_check
 
gë_√xt_vîify
(
thªad_d©a
 *
td
, 
io_u
 *);

79 
__mu°_check
 
vîify_io_u
(
thªad_d©a
 *, 
io_u
 *);

80 
vîify_io_u_async
(
thªad_d©a
 *, 
io_u
 *);

81 
fûl_vîify_∑âîn
(
thªad_d©a
 *
td
, *
p
, 
Àn
, 
io_u
 *io_u, 
£ed
, 
u£_£ed
);

82 
fûl_buf„r_∑âîn
(
thªad_d©a
 *
td
, *
p
, 
Àn
);

83 
fio_vîify_öô
(
thªad_d©a
 *
td
);

88 
vîify_async_öô
(
thªad_d©a
 *);

89 
vîify_async_exô
(
thªad_d©a
 *);

	@/usr/include/aio.h

22 #i‚de‡
_AIO_H


23 
	#_AIO_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<sys/ty≥s.h
>

27 
	#__√ed_sigevít_t


	)

28 
	~<bôs/sigöfo.h
>

29 
	#__√ed_time•ec


	)

30 
	~<time.h
>

32 
__BEGIN_DECLS


35 
	saiocb


37 
	maio_fûdes
;

38 
	maio_lio_›code
;

39 
	maio_ªq¥io
;

40 vﬁ©ûê*
	maio_buf
;

41 
size_t
 
	maio_nbyãs
;

42 
sigevít
 
	maio_sigevít
;

45 
aiocb
 *
	m__√xt_¥io
;

46 
	m__abs_¥io
;

47 
	m__pﬁicy
;

48 
	m__îr‹_code
;

49 
__ssize_t
 
	m__ªtu∫_vÆue
;

51 #i‚de‡
__USE_FILE_OFFSET64


52 
__off_t
 
	maio_off£t
;

53 
	m__∑d
[ (
__off64_t
Ë-  (
__off_t
)];

55 
__off64_t
 
	maio_off£t
;

57 
	m__unu£d
[32];

62 #ifde‡
__USE_LARGEFILE64


63 
	saiocb64


65 
	maio_fûdes
;

66 
	maio_lio_›code
;

67 
	maio_ªq¥io
;

68 vﬁ©ûê*
	maio_buf
;

69 
size_t
 
	maio_nbyãs
;

70 
sigevít
 
	maio_sigevít
;

73 
aiocb
 *
	m__√xt_¥io
;

74 
	m__abs_¥io
;

75 
	m__pﬁicy
;

76 
	m__îr‹_code
;

77 
__ssize_t
 
	m__ªtu∫_vÆue
;

79 
__off64_t
 
	maio_off£t
;

80 
	m__unu£d
[32];

85 #ifde‡
__USE_GNU


88 
	saioöô


90 
	maio_thªads
;

91 
	maio_num
;

92 
	maio_locks
;

93 
	maio_u£dba
;

94 
	maio_debug
;

95 
	maio_numu£rs
;

96 
	maio_idÀ_time
;

98 
	maio_ª£rved
;

106 
	mAIO_CANCELED
,

107 
	#AIO_CANCELED
 
AIO_CANCELED


	)

108 
	mAIO_NOTCANCELED
,

109 
	#AIO_NOTCANCELED
 
AIO_NOTCANCELED


	)

110 
	mAIO_ALLDONE


111 
	#AIO_ALLDONE
 
AIO_ALLDONE


	)

118 
	mLIO_READ
,

119 
	#LIO_READ
 
LIO_READ


	)

120 
	mLIO_WRITE
,

121 
	#LIO_WRITE
 
LIO_WRITE


	)

122 
	mLIO_NOP


123 
	#LIO_NOP
 
LIO_NOP


	)

130 
	mLIO_WAIT
,

131 
	#LIO_WAIT
 
LIO_WAIT


	)

132 
	mLIO_NOWAIT


133 
	#LIO_NOWAIT
 
LIO_NOWAIT


	)

138 #ifde‡
__USE_GNU


139 
	$aio_öô
 (c⁄° 
aioöô
 *
__öô
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

143 #i‚de‡
__USE_FILE_OFFSET64


145 
	$aio_ªad
 (
aiocb
 *
__aiocbp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

147 
	$aio_wrôe
 (
aiocb
 *
__aiocbp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

150 
	$lio_li°io
 (
__mode
,

151 
aiocb
 *c⁄° 
__li°
[
__ª°ri˘_¨r
],

152 
__√¡
, 
sigevít
 *
__ª°ri˘
 
__sig
)

153 
__THROW
 
	`__n⁄nuŒ
 ((2));

156 
	$aio_îr‹
 (c⁄° 
aiocb
 *
__aiocbp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

158 
__ssize_t
 
	$aio_ªtu∫
 (
aiocb
 *
__aiocbp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

162 
	$aio_ˇn˚l
 (
__fûdes
, 
aiocb
 *
__aiocbp
Ë
__THROW
;

169 
	$aio_su•íd
 (c⁄° 
aiocb
 *c⁄° 
__li°
[], 
__√¡
,

170 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

171 
	`__n⁄nuŒ
 ((1));

175 
	$aio_fsync
 (
__›î©i⁄
, 
aiocb
 *
__aiocbp
)

176 
__THROW
 
	`__n⁄nuŒ
 ((2));

178 #ifde‡
__REDIRECT_NTH


179 
	`__REDIRECT_NTH
 (
aio_ªad
, (
aiocb
 *
__aiocbp
), 
aio_ªad64
)

180 
	`__n⁄nuŒ
 ((1));

181 
	`__REDIRECT_NTH
 (
aio_wrôe
, (
aiocb
 *
__aiocbp
), 
aio_wrôe64
)

182 
	`__n⁄nuŒ
 ((1));

184 
	`__REDIRECT_NTH
 (
lio_li°io
,

185 (
__mode
,

186 
aiocb
 *c⁄° 
__li°
[
__ª°ri˘_¨r
],

187 
__√¡
, 
sigevít
 *
__ª°ri˘
 
__sig
),

188 
lio_li°io64
Ë
	`__n⁄nuŒ
 ((2));

190 
	`__REDIRECT_NTH
 (
aio_îr‹
, (c⁄° 
aiocb
 *
__aiocbp
),

191 
aio_îr‹64
Ë
	`__n⁄nuŒ
 ((1));

192 
__ssize_t
 
	`__REDIRECT_NTH
 (
aio_ªtu∫
, (
aiocb
 *
__aiocbp
),

193 
aio_ªtu∫64
Ë
	`__n⁄nuŒ
 ((1));

195 
	`__REDIRECT_NTH
 (
aio_ˇn˚l
,

196 (
__fûdes
, 
aiocb
 *
__aiocbp
),

197 
aio_ˇn˚l64
);

199 
	`__REDIRECT_NTH
 (
aio_su•íd
,

200 (c⁄° 
aiocb
 *c⁄° 
__li°
[], 
__√¡
,

201 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
),

202 
aio_su•íd64
Ë
	`__n⁄nuŒ
 ((1));

204 
	`__REDIRECT_NTH
 (
aio_fsync
,

205 (
__›î©i⁄
, 
aiocb
 *
__aiocbp
),

206 
aio_fsync64
Ë
	`__n⁄nuŒ
 ((2));

209 
	#aio_ªad
 
aio_ªad64


	)

210 
	#aio_wrôe
 
aio_wrôe64


	)

211 
	#lio_li°io
 
lio_li°io64


	)

212 
	#aio_îr‹
 
aio_îr‹64


	)

213 
	#aio_ªtu∫
 
aio_ªtu∫64


	)

214 
	#aio_ˇn˚l
 
aio_ˇn˚l64


	)

215 
	#aio_su•íd
 
aio_su•íd64


	)

216 
	#aio_fsync
 
aio_fsync64


	)

220 #ifde‡
__USE_LARGEFILE64


221 
	$aio_ªad64
 (
aiocb64
 *
__aiocbp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

222 
	$aio_wrôe64
 (
aiocb64
 *
__aiocbp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

224 
	$lio_li°io64
 (
__mode
,

225 
aiocb64
 *c⁄° 
__li°
[
__ª°ri˘_¨r
],

226 
__√¡
, 
sigevít
 *
__ª°ri˘
 
__sig
)

227 
__THROW
 
	`__n⁄nuŒ
 ((2));

229 
	$aio_îr‹64
 (c⁄° 
aiocb64
 *
__aiocbp
)

230 
__THROW
 
	`__n⁄nuŒ
 ((1));

231 
__ssize_t
 
	$aio_ªtu∫64
 (
aiocb64
 *
__aiocbp
)

232 
__THROW
 
	`__n⁄nuŒ
 ((1));

234 
	$aio_ˇn˚l64
 (
__fûdes
, 
aiocb64
 *
__aiocbp
Ë
__THROW
;

236 
	$aio_su•íd64
 (c⁄° 
aiocb64
 *c⁄° 
__li°
[], 
__√¡
,

237 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

238 
__THROW
 
	`__n⁄nuŒ
 ((1));

240 
	$aio_fsync64
 (
__›î©i⁄
, 
aiocb64
 *
__aiocbp
)

241 
__THROW
 
	`__n⁄nuŒ
 ((2));

244 
__END_DECLS


	@/usr/include/arpa/inet.h

18 #i‚de‡
_ARPA_INET_H


19 
	#_ARPA_INET_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<√töë/ö.h
>

25 #i‚de‡
__sockÀn_t_deföed


26 
__sockÀn_t
 
	tsockÀn_t
;

27 
	#__sockÀn_t_deföed


	)

30 
__BEGIN_DECLS


34 
ö_addr_t
 
	$öë_addr
 (c⁄° *
__˝
Ë
__THROW
;

37 
ö_addr_t
 
	$öë_ aof
 (
ö_addr
 
__ö
Ë
__THROW
;

41 
ö_addr
 
	$öë_makóddr
 (
ö_addr_t
 
__√t
, in_addr_à
__ho°
)

42 
__THROW
;

45 
ö_addr_t
 
	$öë_√tof
 (
ö_addr
 
__ö
Ë
__THROW
;

49 
ö_addr_t
 
	$öë_√tw‹k
 (c⁄° *
__˝
Ë
__THROW
;

53 *
	$öë_¡ﬂ
 (
ö_addr
 
__ö
Ë
__THROW
;

58 
	$öë_±⁄
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

59 *
__ª°ri˘
 
__buf
Ë
__THROW
;

64 c⁄° *
	$öë_¡›
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

65 *
__ª°ri˘
 
__buf
, 
sockÀn_t
 
__Àn
)

66 
__THROW
;

70 #ifde‡
__USE_MISC


73 
	$öë_©⁄
 (c⁄° *
__˝
, 
ö_addr
 *
__öp
Ë
__THROW
;

77 *
	$öë_√è
 (
ö_addr_t
 
__√t
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

82 *
	$öë_√t_¡›
 (
__af
, c⁄° *
__˝
, 
__bôs
,

83 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

88 
	$öë_√t_±⁄
 (
__af
, c⁄° *
__˝
,

89 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

94 
	$öë_nßp_addr
 (c⁄° *
__˝
,

95 *
__buf
, 
__Àn
Ë
__THROW
;

99 *
	$öë_nßp_¡ﬂ
 (
__Àn
, c⁄° *
__˝
,

100 *
__buf
Ë
__THROW
;

103 
__END_DECLS


	@/usr/include/asm/byteorder.h

1 #i‚de‡
_ASM_X86_BYTEORDER_H


2 
	#_ASM_X86_BYTEORDER_H


	)

4 
	~<löux/byã‹dî/lôée_ídün.h
>

	@/usr/include/asm/types.h

1 #i‚de‡
_ASM_X86_TYPES_H


2 
	#_ASM_X86_TYPES_H


	)

4 
	~<asm-gíîic/ty≥s.h
>

	@/usr/include/assert.h

22 #ifdef 
_ASSERT_H


24 #unde‡
_ASSERT_H


25 #unde‡
as£π


26 #unde‡
__ASSERT_VOID_CAST


28 #ifdef 
__USE_GNU


29 #unde‡
as£π_≥º‹


34 
	#_ASSERT_H
 1

	)

35 
	~<„©uªs.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

38 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

40 
	#__ASSERT_VOID_CAST
 ()

	)

48 #ifdef 
NDEBUG


50 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

58 #ifdef 
__USE_GNU


59 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

64 
__BEGIN_DECLS


67 
	$__as£π_Áû
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
,

68 
__löe
, c⁄° *
__fun˘i⁄
)

69 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

72 
	$__as£π_≥º‹_Áû
 (
__î∫um
, c⁄° *
__fûe
,

73 
__löe
, c⁄° *
__fun˘i⁄
)

74 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

79 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

80 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

83 
__END_DECLS


85 
	#as£π
(
ex¥
) \

86 ((
ex¥
) \

87 ? 
	`__ASSERT_VOID_CAST
 (0) \

88 : 
	`__as£π_Áû
 (
	`__STRING
(
ex¥
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

90 #ifdef 
__USE_GNU


91 
	#as£π_≥º‹
(
î∫um
) \

92 (!(
î∫um
) \

93 ? 
	`__ASSERT_VOID_CAST
 (0) \

94 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

102 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

103 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

105 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

106 
	#__ASSERT_FUNCTION
 
__func__


	)

108 
	#__ASSERT_FUNCTION
 ((c⁄° *Ë0)

	)

115 #i‡
deföed
 
__USE_ISOC11
 && !deföed 
__˝lu•lus


117 #unde‡
°©ic_as£π


118 
	#°©ic_as£π
 
_Sètic_as£π


	)

	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

104 
__BEGIN_NAMESPACE_STD


110 
__ex˘y≥
 (
iß um
);

111 
__ex˘y≥
 (
ißÕha
);

112 
__ex˘y≥
 (
is˙ål
);

113 
__ex˘y≥
 (
isdigô
);

114 
__ex˘y≥
 (
i¶owî
);

115 
__ex˘y≥
 (
isgøph
);

116 
__ex˘y≥
 (
i•röt
);

117 
__ex˘y≥
 (
i•un˘
);

118 
__ex˘y≥
 (
is•a˚
);

119 
__ex˘y≥
 (
isuµî
);

120 
__ex˘y≥
 (
isxdigô
);

124 
	$tﬁowî
 (
__c
Ë
__THROW
;

127 
	$touµî
 (
__c
Ë
__THROW
;

129 
__END_NAMESPACE_STD


133 #ifdef 
__USE_ISOC99


134 
__BEGIN_NAMESPACE_C99


136 
	`__ex˘y≥
 (
isbœnk
);

138 
__END_NAMESPACE_C99


141 #ifde‡
__USE_GNU


143 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

146 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


150 
	$ißscii
 (
__c
Ë
__THROW
;

154 
	$tﬂscii
 (
__c
Ë
__THROW
;

158 
	`__ex˘y≥
 (
_touµî
);

159 
	`__ex˘y≥
 (
_tﬁowî
);

163 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

164 (
__exãnsi⁄__
 \

165 ({ 
__ªs
; \

166 i‡( (
c
) > 1) \

168 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

170 
__c
 = (
c
); \

171 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

174 
__ªs
 = 
f
 
¨gs
; \

177 
__ªs
 = (
a
)[(Ë(
c
)]; \

178 
__ªs
; 
	}
}))

	)

180 #i‡!
deföed
 
__NO_CTYPE


181 #ifde‡
__is˘y≥_f


182 
	$__is˘y≥_f
 (
Ænum
)

183 
	$__is˘y≥_f
 (
Æpha
)

184 
	$__is˘y≥_f
 (
˙ål
)

185 
	$__is˘y≥_f
 (
digô
)

186 
	$__is˘y≥_f
 (
lowî
)

187 
	$__is˘y≥_f
 (
gøph
)

188 
	$__is˘y≥_f
 (
¥öt
)

189 
	$__is˘y≥_f
 (
pun˘
)

190 
	$__is˘y≥_f
 (
•a˚
)

191 
	$__is˘y≥_f
 (
uµî
)

192 
	$__is˘y≥_f
 (
xdigô
)

193 #ifde‡
__USE_ISOC99


194 
	$__is˘y≥_f
 (
bœnk
)

196 #ñi‡
deföed
 
__is˘y≥


197 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

198 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

199 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

200 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

201 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

202 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

203 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

204 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

205 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

206 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

207 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

208 #ifde‡
__USE_ISOC99


209 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

213 #ifde‡
__USE_EXTERN_INLINES


214 
__exã∫_ölöe
 

215 
	`__NTH
 (
	$tﬁowî
 (
__c
))

217  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

218 
	}
}

220 
__exã∫_ölöe
 

221 
__NTH
 (
	$touµî
 (
__c
))

223  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

224 
	}
}

227 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


228 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

229 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

232 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


233 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

234 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

236 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

237 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

243 #ifde‡
__USE_XOPEN2K8


257 
	~<xloˇÀ.h
>

261 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

262 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

264 
	#__ex˘y≥_l
(
«me
) \

265 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

271 
__ex˘y≥_l
 (
iß um_l
);

272 
__ex˘y≥_l
 (
ißÕha_l
);

273 
__ex˘y≥_l
 (
is˙ål_l
);

274 
__ex˘y≥_l
 (
isdigô_l
);

275 
__ex˘y≥_l
 (
i¶owî_l
);

276 
__ex˘y≥_l
 (
isgøph_l
);

277 
__ex˘y≥_l
 (
i•röt_l
);

278 
__ex˘y≥_l
 (
i•un˘_l
);

279 
__ex˘y≥_l
 (
is•a˚_l
);

280 
__ex˘y≥_l
 (
isuµî_l
);

281 
__ex˘y≥_l
 (
isxdigô_l
);

283 
__ex˘y≥_l
 (
isbœnk_l
);

287 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

288 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

291 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

292 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


295 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

296 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

297 
	#__touµî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

299 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

300 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

304 #i‚de‡
__NO_CTYPE


305 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

306 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

307 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

308 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

309 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

310 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

311 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

312 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

313 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

314 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

315 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

317 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


320 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

321 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

324 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

325 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

326 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

327 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

328 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

329 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

330 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

331 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

332 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

333 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

334 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

336 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

338 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


339 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

340 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

347 
__END_DECLS


	@/usr/include/dirent.h

22 #i‚def 
_DIRENT_H


23 
	#_DIRENT_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifde‡
__USE_XOPEN


32 #i‚de‡
__öo_t_deföed


33 #i‚de‡
__USE_FILE_OFFSET64


34 
__öo_t
 
	töo_t
;

36 
__öo64_t
 
	töo_t
;

38 
	#__öo_t_deföed


	)

40 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


41 
__öo64_t
 
	töo64_t
;

42 
	#__öo64_t_deföed


	)

61 
	~<bôs/dúít.h
>

63 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
Ë&& !deföed 
d_fûío


64 
	#d_öo
 
d_fûío


	)

81 #ifde‡
_DIRENT_HAVE_D_NAMLEN


82 
	#_D_EXACT_NAMLEN
(
d
Ë((d)->
d_«mÀn
)

	)

83 
	#_D_ALLOC_NAMLEN
(
d
Ë(
	`_D_EXACT_NAMLEN
 (dË+ 1)

	)

85 
	#_D_EXACT_NAMLEN
(
d
Ë(
	`°æí
 ((d)->
d_«me
))

	)

86 #ifde‡
_DIRENT_HAVE_D_RECLEN


87 
	#_D_ALLOC_NAMLEN
(
d
Ë(((*Ë(dË+ (d)->
d_ª˛í
Ë- &(d)->
d_«me
[0])

	)

89 
	#_D_ALLOC_NAMLEN
(
d
Ë( (d)->
d_«me
 > 1 ?  (d)->d_name : \

90 
	`_D_EXACT_NAMLEN
 (
d
Ë+ 1)

	)

95 #ifde‡
__USE_BSD


99 
	mDT_UNKNOWN
 = 0,

100 
	#DT_UNKNOWN
 
DT_UNKNOWN


	)

101 
	mDT_FIFO
 = 1,

102 
	#DT_FIFO
 
DT_FIFO


	)

103 
	mDT_CHR
 = 2,

104 
	#DT_CHR
 
DT_CHR


	)

105 
	mDT_DIR
 = 4,

106 
	#DT_DIR
 
DT_DIR


	)

107 
	mDT_BLK
 = 6,

108 
	#DT_BLK
 
DT_BLK


	)

109 
	mDT_REG
 = 8,

110 
	#DT_REG
 
DT_REG


	)

111 
	mDT_LNK
 = 10,

112 
	#DT_LNK
 
DT_LNK


	)

113 
	mDT_SOCK
 = 12,

114 
	#DT_SOCK
 
DT_SOCK


	)

115 
	mDT_WHT
 = 14

116 
	#DT_WHT
 
DT_WHT


	)

120 
	#IFTODT
(
mode
Ë(((modeË& 0170000Ë>> 12)

	)

121 
	#DTTOIF
(
dúty≥
Ë((dúty≥Ë<< 12)

	)

127 
__dú°ªam
 
	tDIR
;

134 
DIR
 *
	$›ídú
 (c⁄° *
__«me
Ë
	`__n⁄nuŒ
 ((1));

136 #ifde‡
__USE_XOPEN2K8


141 
DIR
 *
	`fd›ídú
 (
__fd
);

149 
	$˛o£dú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

161 #i‚de‡
__USE_FILE_OFFSET64


162 
dúít
 *
	$ªaddú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

164 #ifde‡
__REDIRECT


165 
dúít
 *
	`__REDIRECT
 (
ªaddú
, (
DIR
 *
__dúp
), 
ªaddú64
)

166 
	`__n⁄nuŒ
 ((1));

168 
	#ªaddú
 
ªaddú64


	)

172 #ifde‡
__USE_LARGEFILE64


173 
dúít64
 *
	$ªaddú64
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

176 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


182 #i‚de‡
__USE_FILE_OFFSET64


183 
	$ªaddú_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

184 
dúít
 *
__ª°ri˘
 
__íåy
,

185 
dúít
 **
__ª°ri˘
 
__ªsu…
)

186 
	`__n⁄nuŒ
 ((1, 2, 3));

188 #ifde‡
__REDIRECT


189 
	`__REDIRECT
 (
ªaddú_r
,

190 (
DIR
 *
__ª°ri˘
 
__dúp
,

191 
dúít
 *
__ª°ri˘
 
__íåy
,

192 
dúít
 **
__ª°ri˘
 
__ªsu…
),

193 
ªaddú64_r
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

195 
	#ªaddú_r
 
ªaddú64_r


	)

199 #ifde‡
__USE_LARGEFILE64


200 
	$ªaddú64_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

201 
dúít64
 *
__ª°ri˘
 
__íåy
,

202 
dúít64
 **
__ª°ri˘
 
__ªsu…
)

203 
	`__n⁄nuŒ
 ((1, 2, 3));

208 
	$ªwöddú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

210 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


211 
	~<bôs/ty≥s.h
>

214 
	$£ekdú
 (
DIR
 *
__dúp
, 
__pos
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
	$ãŒdú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

220 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


223 
	$dúfd
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 #i‡
deföed
 
__OPTIMIZE__
 && deföed 
_DIR_dúfd


226 
	#dúfd
(
dúp
Ë
	`_DIR_dúfd
 (dúp)

	)

229 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC


230 #i‚de‡
MAXNAMLEN


232 
	~<bôs/posix1_lim.h
>

235 #ifde‡
NAME_MAX


236 
	#MAXNAMLEN
 
NAME_MAX


	)

238 
	#MAXNAMLEN
 255

	)

243 
	#__√ed_size_t


	)

244 
	~<°ddef.h
>

253 #i‚de‡
__USE_FILE_OFFSET64


254 
	`sˇndú
 (c⁄° *
__ª°ri˘
 
__dú
,

255 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

256 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

257 (*
__cmp
Ë(c⁄° 
dúít
 **,

258 c⁄° 
dúít
 **))

259 
	`__n⁄nuŒ
 ((1, 2));

261 #ifde‡
__REDIRECT


262 
	`__REDIRECT
 (
sˇndú
,

263 (c⁄° *
__ª°ri˘
 
__dú
,

264 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

265 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

266 (*
__cmp
Ë(c⁄° 
dúít
 **,

267 c⁄° 
dúít
 **)),

268 
sˇndú64
Ë
	`__n⁄nuŒ
 ((1, 2));

270 
	#sˇndú
 
sˇndú64


	)

274 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


277 
	`sˇndú64
 (c⁄° *
__ª°ri˘
 
__dú
,

278 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

279 (*
__£À˘‹
Ë(c⁄° 
dúít64
 *),

280 (*
__cmp
Ë(c⁄° 
dúít64
 **,

281 c⁄° 
dúít64
 **))

282 
	`__n⁄nuŒ
 ((1, 2));

285 #ifde‡
__USE_GNU


291 #i‚de‡
__USE_FILE_OFFSET64


292 
	`sˇndú©
 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

293 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

294 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

295 (*
__cmp
Ë(c⁄° 
dúít
 **,

296 c⁄° 
dúít
 **))

297 
	`__n⁄nuŒ
 ((2, 3));

299 #ifde‡
__REDIRECT


300 
	`__REDIRECT
 (
sˇndú©
,

301 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

302 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

303 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

304 (*
__cmp
Ë(c⁄° 
dúít
 **,

305 c⁄° 
dúít
 **)),

306 
sˇndú©64
Ë
	`__n⁄nuŒ
 ((2, 3));

308 
	#sˇndú©
 
sˇndú©64


	)

314 
	`sˇndú©64
 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

315 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

316 (*
__£À˘‹
Ë(c⁄° 
dúít64
 *),

317 (*
__cmp
Ë(c⁄° 
dúít64
 **,

318 c⁄° 
dúít64
 **))

319 
	`__n⁄nuŒ
 ((2, 3));

323 #i‚de‡
__USE_FILE_OFFSET64


324 
	$Æphas‹t
 (c⁄° 
dúít
 **
__e1
,

325 c⁄° 
dúít
 **
__e2
)

326 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

328 #ifde‡
__REDIRECT


329 
	`__REDIRECT_NTH
 (
Æphas‹t
,

330 (c⁄° 
dúít
 **
__e1
,

331 c⁄° 
dúít
 **
__e2
),

332 
Æphas‹t64
Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

334 
	#Æphas‹t
 
Æphas‹t64


	)

338 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


339 
	$Æphas‹t64
 (c⁄° 
dúít64
 **
__e1
,

340 c⁄° 
dúít64
 **
__e2
)

341 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

346 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC


351 #i‚de‡
__USE_FILE_OFFSET64


352 
__ssize_t
 
	$gëdúíåõs
 (
__fd
, *
__ª°ri˘
 
__buf
,

353 
size_t
 
__nbyãs
,

354 
__off_t
 *
__ª°ri˘
 
__ba£p
)

355 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

357 #ifde‡
__REDIRECT


358 
__ssize_t
 
	`__REDIRECT_NTH
 (
gëdúíåõs
,

359 (
__fd
, *
__ª°ri˘
 
__buf
,

360 
size_t
 
__nbyãs
,

361 
__off64_t
 *
__ª°ri˘
 
__ba£p
),

362 
gëdúíåõs64
Ë
	`__n⁄nuŒ
 ((2, 4));

364 
	#gëdúíåõs
 
gëdúíåõs64


	)

368 #ifde‡
__USE_LARGEFILE64


369 
__ssize_t
 
	$gëdúíåõs64
 (
__fd
, *
__ª°ri˘
 
__buf
,

370 
size_t
 
__nbyãs
,

371 
__off64_t
 *
__ª°ri˘
 
__ba£p
)

372 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

376 #ifde‡
__USE_GNU


378 #i‚de‡
__USE_FILE_OFFSET64


379 
	$vîsi⁄s‹t
 (c⁄° 
dúít
 **
__e1
,

380 c⁄° 
dúít
 **
__e2
)

381 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

383 #ifde‡
__REDIRECT


384 
	`__REDIRECT_NTH
 (
vîsi⁄s‹t
,

385 (c⁄° 
dúít
 **
__e1
,

386 c⁄° 
dúít
 **
__e2
),

387 
vîsi⁄s‹t64
)

388 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

390 
	#vîsi⁄s‹t
 
vîsi⁄s‹t64


	)

394 #ifde‡
__USE_LARGEFILE64


395 
	$vîsi⁄s‹t64
 (c⁄° 
dúít64
 **
__e1
,

396 c⁄° 
dúít64
 **
__e2
)

397 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

401 
__END_DECLS


	@/usr/include/dlfcn.h

19 #i‚def 
_DLFCN_H


20 
	#_DLFCN_H
 1

	)

22 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

27 
	~<bôs/dlf˙.h
>

30 #ifde‡
__USE_GNU


35 
	#RTLD_NEXT
 ((*Ë-1l)

	)

40 
	#RTLD_DEFAULT
 ((*Ë0)

	)

44 
	tLmid_t
;

47 
	#LM_ID_BASE
 0

	)

48 
	#LM_ID_NEWLM
 -1

	)

52 
__BEGIN_DECLS


56 *
	$dl›í
 (c⁄° *
__fûe
, 
__mode
Ë
__THROW
;

60 
	$dl˛o£
 (*
__h™dÀ
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

64 *
	$dlsym
 (*
__ª°ri˘
 
__h™dÀ
,

65 c⁄° *
__ª°ri˘
 
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

67 #ifde‡
__USE_GNU


69 *
	$dlm›í
 (
Lmid_t
 
__nsid
, c⁄° *
__fûe
, 
__mode
Ë
__THROW
;

73 *
	$dlvsym
 (*
__ª°ri˘
 
__h™dÀ
,

74 c⁄° *
__ª°ri˘
 
__«me
,

75 c⁄° *
__ª°ri˘
 
__vîsi⁄
)

76 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

82 *
	$dÀº‹
 (Ë
__THROW
;

85 #ifde‡
__USE_GNU


90 c⁄° *
dli_‚ame
;

91 *
dli_fba£
;

92 c⁄° *
dli_¢ame
;

93 *
dli_ßddr
;

94 } 
	tDl_öfo
;

98 
	$dœddr
 (c⁄° *
__addªss
, 
Dl_öfo
 *
__öfo
)

99 
__THROW
 
	`__n⁄nuŒ
 ((2));

102 
	$dœddr1
 (c⁄° *
__addªss
, 
Dl_öfo
 *
__öfo
,

103 **
__exåa_öfo
, 
__Êags
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

111 
RTLD_DL_SYMENT
 = 1,

114 
RTLD_DL_LINKMAP
 = 2

123 
	$dlöfo
 (*
__ª°ri˘
 
__h™dÀ
,

124 
__ªque°
, *
__ª°ri˘
 
__¨g
)

125 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

131 
RTLD_DI_LMID
 = 1,

135 
RTLD_DI_LINKMAP
 = 2,

137 
RTLD_DI_CONFIGADDR
 = 3,

144 
RTLD_DI_SERINFO
 = 4,

145 
RTLD_DI_SERINFOSIZE
 = 5,

149 
RTLD_DI_ORIGIN
 = 6,

151 
RTLD_DI_PROFILENAME
 = 7,

152 
RTLD_DI_PROFILEOUT
 = 8,

157 
RTLD_DI_TLS_MODID
 = 9,

163 
RTLD_DI_TLS_DATA
 = 10,

165 
RTLD_DI_MAX
 = 10

173 *
dls_«me
;

174 
dls_Êags
;

175 } 
	tDl_£Ω©h
;

181 
size_t
 
dls_size
;

182 
dls_˙t
;

183 
Dl_£Ω©h
 
dls_£Ω©h
[1];

184 } 
	tDl_£röfo
;

188 
__END_DECLS


	@/usr/include/elf.h

19 #i‚de‡
_ELF_H


20 
	#_ELF_H
 1

	)

22 
	~<„©uªs.h
>

24 
	g__BEGIN_DECLS


28 
	~<°döt.h
>

31 
uöt16_t
 
	tElf32_HÆf
;

32 
uöt16_t
 
	tElf64_HÆf
;

35 
uöt32_t
 
	tElf32_W‹d
;

36 
öt32_t
 
	tElf32_Sw‹d
;

37 
uöt32_t
 
	tElf64_W‹d
;

38 
öt32_t
 
	tElf64_Sw‹d
;

41 
uöt64_t
 
	tElf32_Xw‹d
;

42 
öt64_t
 
	tElf32_Sxw‹d
;

43 
uöt64_t
 
	tElf64_Xw‹d
;

44 
öt64_t
 
	tElf64_Sxw‹d
;

47 
uöt32_t
 
	tElf32_Addr
;

48 
uöt64_t
 
	tElf64_Addr
;

51 
uöt32_t
 
	tElf32_Off
;

52 
uöt64_t
 
	tElf64_Off
;

55 
uöt16_t
 
	tElf32_Se˘i⁄
;

56 
uöt16_t
 
	tElf64_Se˘i⁄
;

59 
Elf32_HÆf
 
	tElf32_Vîsym
;

60 
Elf64_HÆf
 
	tElf64_Vîsym
;

65 
	#EI_NIDENT
 (16)

	)

69 
	me_idít
[
EI_NIDENT
];

70 
Elf32_HÆf
 
	me_ty≥
;

71 
Elf32_HÆf
 
	me_machöe
;

72 
Elf32_W‹d
 
	me_vîsi⁄
;

73 
Elf32_Addr
 
	me_íåy
;

74 
Elf32_Off
 
	me_phoff
;

75 
Elf32_Off
 
	me_shoff
;

76 
Elf32_W‹d
 
	me_Êags
;

77 
Elf32_HÆf
 
	me_ehsize
;

78 
Elf32_HÆf
 
	me_phítsize
;

79 
Elf32_HÆf
 
	me_phnum
;

80 
Elf32_HÆf
 
	me_shítsize
;

81 
Elf32_HÆf
 
	me_shnum
;

82 
Elf32_HÆf
 
	me_sh°∫dx
;

83 } 
	tElf32_Ehdr
;

87 
	me_idít
[
EI_NIDENT
];

88 
Elf64_HÆf
 
	me_ty≥
;

89 
Elf64_HÆf
 
	me_machöe
;

90 
Elf64_W‹d
 
	me_vîsi⁄
;

91 
Elf64_Addr
 
	me_íåy
;

92 
Elf64_Off
 
	me_phoff
;

93 
Elf64_Off
 
	me_shoff
;

94 
Elf64_W‹d
 
	me_Êags
;

95 
Elf64_HÆf
 
	me_ehsize
;

96 
Elf64_HÆf
 
	me_phítsize
;

97 
Elf64_HÆf
 
	me_phnum
;

98 
Elf64_HÆf
 
	me_shítsize
;

99 
Elf64_HÆf
 
	me_shnum
;

100 
Elf64_HÆf
 
	me_sh°∫dx
;

101 } 
	tElf64_Ehdr
;

107 
	#EI_MAG0
 0

	)

108 
	#ELFMAG0
 0x7‡

	)

110 
	#EI_MAG1
 1

	)

111 
	#ELFMAG1
 'E'

	)

113 
	#EI_MAG2
 2

	)

114 
	#ELFMAG2
 'L'

	)

116 
	#EI_MAG3
 3

	)

117 
	#ELFMAG3
 'F'

	)

120 
	#ELFMAG
 "\177ELF"

	)

121 
	#SELFMAG
 4

	)

123 
	#EI_CLASS
 4

	)

124 
	#ELFCLASSNONE
 0

	)

125 
	#ELFCLASS32
 1

	)

126 
	#ELFCLASS64
 2

	)

127 
	#ELFCLASSNUM
 3

	)

129 
	#EI_DATA
 5

	)

130 
	#ELFDATANONE
 0

	)

131 
	#ELFDATA2LSB
 1

	)

132 
	#ELFDATA2MSB
 2

	)

133 
	#ELFDATANUM
 3

	)

135 
	#EI_VERSION
 6

	)

138 
	#EI_OSABI
 7

	)

139 
	#ELFOSABI_NONE
 0

	)

140 
	#ELFOSABI_SYSV
 0

	)

141 
	#ELFOSABI_HPUX
 1

	)

142 
	#ELFOSABI_NETBSD
 2

	)

143 
	#ELFOSABI_GNU
 3

	)

144 
	#ELFOSABI_LINUX
 
ELFOSABI_GNU


	)

145 
	#ELFOSABI_SOLARIS
 6

	)

146 
	#ELFOSABI_AIX
 7

	)

147 
	#ELFOSABI_IRIX
 8

	)

148 
	#ELFOSABI_FREEBSD
 9

	)

149 
	#ELFOSABI_TRU64
 10

	)

150 
	#ELFOSABI_MODESTO
 11

	)

151 
	#ELFOSABI_OPENBSD
 12

	)

152 
	#ELFOSABI_ARM_AEABI
 64

	)

153 
	#ELFOSABI_ARM
 97

	)

154 
	#ELFOSABI_STANDALONE
 255

	)

156 
	#EI_ABIVERSION
 8

	)

158 
	#EI_PAD
 9

	)

162 
	#ET_NONE
 0

	)

163 
	#ET_REL
 1

	)

164 
	#ET_EXEC
 2

	)

165 
	#ET_DYN
 3

	)

166 
	#ET_CORE
 4

	)

167 
	#ET_NUM
 5

	)

168 
	#ET_LOOS
 0x„00

	)

169 
	#ET_HIOS
 0x„f‡

	)

170 
	#ET_LOPROC
 0xff00

	)

171 
	#ET_HIPROC
 0xfff‡

	)

175 
	#EM_NONE
 0

	)

176 
	#EM_M32
 1

	)

177 
	#EM_SPARC
 2

	)

178 
	#EM_386
 3

	)

179 
	#EM_68K
 4

	)

180 
	#EM_88K
 5

	)

181 
	#EM_860
 7

	)

182 
	#EM_MIPS
 8

	)

183 
	#EM_S370
 9

	)

184 
	#EM_MIPS_RS3_LE
 10

	)

186 
	#EM_PARISC
 15

	)

187 
	#EM_VPP500
 17

	)

188 
	#EM_SPARC32PLUS
 18

	)

189 
	#EM_960
 19

	)

190 
	#EM_PPC
 20

	)

191 
	#EM_PPC64
 21

	)

192 
	#EM_S390
 22

	)

194 
	#EM_V800
 36

	)

195 
	#EM_FR20
 37

	)

196 
	#EM_RH32
 38

	)

197 
	#EM_RCE
 39

	)

198 
	#EM_ARM
 40

	)

199 
	#EM_FAKE_ALPHA
 41

	)

200 
	#EM_SH
 42

	)

201 
	#EM_SPARCV9
 43

	)

202 
	#EM_TRICORE
 44

	)

203 
	#EM_ARC
 45

	)

204 
	#EM_H8_300
 46

	)

205 
	#EM_H8_300H
 47

	)

206 
	#EM_H8S
 48

	)

207 
	#EM_H8_500
 49

	)

208 
	#EM_IA_64
 50

	)

209 
	#EM_MIPS_X
 51

	)

210 
	#EM_COLDFIRE
 52

	)

211 
	#EM_68HC12
 53

	)

212 
	#EM_MMA
 54

	)

213 
	#EM_PCP
 55

	)

214 
	#EM_NCPU
 56

	)

215 
	#EM_NDR1
 57

	)

216 
	#EM_STARCORE
 58

	)

217 
	#EM_ME16
 59

	)

218 
	#EM_ST100
 60

	)

219 
	#EM_TINYJ
 61

	)

220 
	#EM_X86_64
 62

	)

221 
	#EM_PDSP
 63

	)

223 
	#EM_FX66
 66

	)

224 
	#EM_ST9PLUS
 67

	)

225 
	#EM_ST7
 68

	)

226 
	#EM_68HC16
 69

	)

227 
	#EM_68HC11
 70

	)

228 
	#EM_68HC08
 71

	)

229 
	#EM_68HC05
 72

	)

230 
	#EM_SVX
 73

	)

231 
	#EM_ST19
 74

	)

232 
	#EM_VAX
 75

	)

233 
	#EM_CRIS
 76

	)

234 
	#EM_JAVELIN
 77

	)

235 
	#EM_FIREPATH
 78

	)

236 
	#EM_ZSP
 79

	)

237 
	#EM_MMIX
 80

	)

238 
	#EM_HUANY
 81

	)

239 
	#EM_PRISM
 82

	)

240 
	#EM_AVR
 83

	)

241 
	#EM_FR30
 84

	)

242 
	#EM_D10V
 85

	)

243 
	#EM_D30V
 86

	)

244 
	#EM_V850
 87

	)

245 
	#EM_M32R
 88

	)

246 
	#EM_MN10300
 89

	)

247 
	#EM_MN10200
 90

	)

248 
	#EM_PJ
 91

	)

249 
	#EM_OPENRISC
 92

	)

250 
	#EM_ARC_A5
 93

	)

251 
	#EM_XTENSA
 94

	)

252 
	#EM_AARCH64
 183

	)

253 
	#EM_TILEPRO
 188

	)

254 
	#EM_MICROBLAZE
 189

	)

255 
	#EM_TILEGX
 191

	)

256 
	#EM_NUM
 192

	)

262 
	#EM_ALPHA
 0x9026

	)

266 
	#EV_NONE
 0

	)

267 
	#EV_CURRENT
 1

	)

268 
	#EV_NUM
 2

	)

274 
Elf32_W‹d
 
	msh_«me
;

275 
Elf32_W‹d
 
	msh_ty≥
;

276 
Elf32_W‹d
 
	msh_Êags
;

277 
Elf32_Addr
 
	msh_addr
;

278 
Elf32_Off
 
	msh_off£t
;

279 
Elf32_W‹d
 
	msh_size
;

280 
Elf32_W‹d
 
	msh_lök
;

281 
Elf32_W‹d
 
	msh_öfo
;

282 
Elf32_W‹d
 
	msh_addølign
;

283 
Elf32_W‹d
 
	msh_ítsize
;

284 } 
	tElf32_Shdr
;

288 
Elf64_W‹d
 
	msh_«me
;

289 
Elf64_W‹d
 
	msh_ty≥
;

290 
Elf64_Xw‹d
 
	msh_Êags
;

291 
Elf64_Addr
 
	msh_addr
;

292 
Elf64_Off
 
	msh_off£t
;

293 
Elf64_Xw‹d
 
	msh_size
;

294 
Elf64_W‹d
 
	msh_lök
;

295 
Elf64_W‹d
 
	msh_öfo
;

296 
Elf64_Xw‹d
 
	msh_addølign
;

297 
Elf64_Xw‹d
 
	msh_ítsize
;

298 } 
	tElf64_Shdr
;

302 
	#SHN_UNDEF
 0

	)

303 
	#SHN_LORESERVE
 0xff00

	)

304 
	#SHN_LOPROC
 0xff00

	)

305 
	#SHN_BEFORE
 0xff00

	)

307 
	#SHN_AFTER
 0xff01

	)

309 
	#SHN_HIPROC
 0xff1‡

	)

310 
	#SHN_LOOS
 0xff20

	)

311 
	#SHN_HIOS
 0xff3‡

	)

312 
	#SHN_ABS
 0xfff1

	)

313 
	#SHN_COMMON
 0xfff2

	)

314 
	#SHN_XINDEX
 0xfff‡

	)

315 
	#SHN_HIRESERVE
 0xfff‡

	)

319 
	#SHT_NULL
 0

	)

320 
	#SHT_PROGBITS
 1

	)

321 
	#SHT_SYMTAB
 2

	)

322 
	#SHT_STRTAB
 3

	)

323 
	#SHT_RELA
 4

	)

324 
	#SHT_HASH
 5

	)

325 
	#SHT_DYNAMIC
 6

	)

326 
	#SHT_NOTE
 7

	)

327 
	#SHT_NOBITS
 8

	)

328 
	#SHT_REL
 9

	)

329 
	#SHT_SHLIB
 10

	)

330 
	#SHT_DYNSYM
 11

	)

331 
	#SHT_INIT_ARRAY
 14

	)

332 
	#SHT_FINI_ARRAY
 15

	)

333 
	#SHT_PREINIT_ARRAY
 16

	)

334 
	#SHT_GROUP
 17

	)

335 
	#SHT_SYMTAB_SHNDX
 18

	)

336 
	#SHT_NUM
 19

	)

337 
	#SHT_LOOS
 0x60000000

	)

338 
	#SHT_GNU_ATTRIBUTES
 0x6ffffff5

	)

339 
	#SHT_GNU_HASH
 0x6ffffff6

	)

340 
	#SHT_GNU_LIBLIST
 0x6ffffff7

	)

341 
	#SHT_CHECKSUM
 0x6ffffff8

	)

342 
	#SHT_LOSUNW
 0x6fffffÁ

	)

343 
	#SHT_SUNW_move
 0x6fffffÁ

	)

344 
	#SHT_SUNW_COMDAT
 0x6ffffffb

	)

345 
	#SHT_SUNW_symöfo
 0x6ffffffc

	)

346 
	#SHT_GNU_vîdef
 0x6ffffffd

	)

347 
	#SHT_GNU_vî√ed
 0x6fffff„

	)

348 
	#SHT_GNU_vîsym
 0x6ffffff‡

	)

349 
	#SHT_HISUNW
 0x6ffffff‡

	)

350 
	#SHT_HIOS
 0x6ffffff‡

	)

351 
	#SHT_LOPROC
 0x70000000

	)

352 
	#SHT_HIPROC
 0x7ffffff‡

	)

353 
	#SHT_LOUSER
 0x80000000

	)

354 
	#SHT_HIUSER
 0x8ffffff‡

	)

358 
	#SHF_WRITE
 (1 << 0Ë

	)

359 
	#SHF_ALLOC
 (1 << 1Ë

	)

360 
	#SHF_EXECINSTR
 (1 << 2Ë

	)

361 
	#SHF_MERGE
 (1 << 4Ë

	)

362 
	#SHF_STRINGS
 (1 << 5Ë

	)

363 
	#SHF_INFO_LINK
 (1 << 6Ë

	)

364 
	#SHF_LINK_ORDER
 (1 << 7Ë

	)

365 
	#SHF_OS_NONCONFORMING
 (1 << 8Ë

	)

367 
	#SHF_GROUP
 (1 << 9Ë

	)

368 
	#SHF_TLS
 (1 << 10Ë

	)

369 
	#SHF_MASKOS
 0x0ff00000

	)

370 
	#SHF_MASKPROC
 0xf0000000

	)

371 
	#SHF_ORDERED
 (1 << 30Ë

	)

373 
	#SHF_EXCLUDE
 (1 << 31Ë

	)

377 
	#GRP_COMDAT
 0x1

	)

383 
Elf32_W‹d
 
	m°_«me
;

384 
Elf32_Addr
 
	m°_vÆue
;

385 
Elf32_W‹d
 
	m°_size
;

386 
	m°_öfo
;

387 
	m°_Ÿhî
;

388 
Elf32_Se˘i⁄
 
	m°_shndx
;

389 } 
	tElf32_Sym
;

393 
Elf64_W‹d
 
	m°_«me
;

394 
	m°_öfo
;

395 
	m°_Ÿhî
;

396 
Elf64_Se˘i⁄
 
	m°_shndx
;

397 
Elf64_Addr
 
	m°_vÆue
;

398 
Elf64_Xw‹d
 
	m°_size
;

399 } 
	tElf64_Sym
;

406 
Elf32_HÆf
 
	msi_boundto
;

407 
Elf32_HÆf
 
	msi_Êags
;

408 } 
	tElf32_Symöfo
;

412 
Elf64_HÆf
 
	msi_boundto
;

413 
Elf64_HÆf
 
	msi_Êags
;

414 } 
	tElf64_Symöfo
;

417 
	#SYMINFO_BT_SELF
 0xfff‡

	)

418 
	#SYMINFO_BT_PARENT
 0xff„

	)

419 
	#SYMINFO_BT_LOWRESERVE
 0xff00

	)

422 
	#SYMINFO_FLG_DIRECT
 0x0001

	)

423 
	#SYMINFO_FLG_PASSTHRU
 0x0002

	)

424 
	#SYMINFO_FLG_COPY
 0x0004

	)

425 
	#SYMINFO_FLG_LAZYLOAD
 0x0008

	)

428 
	#SYMINFO_NONE
 0

	)

429 
	#SYMINFO_CURRENT
 1

	)

430 
	#SYMINFO_NUM
 2

	)

435 
	#ELF32_ST_BIND
(
vÆ
Ë(((Ë(vÆ)Ë>> 4)

	)

436 
	#ELF32_ST_TYPE
(
vÆ
Ë((vÆË& 0xf)

	)

437 
	#ELF32_ST_INFO
(
böd
, 
ty≥
Ë(((bödË<< 4Ë+ (—y≥Ë& 0xf))

	)

440 
	#ELF64_ST_BIND
(
vÆ
Ë
	`ELF32_ST_BIND
 (vÆ)

	)

441 
	#ELF64_ST_TYPE
(
vÆ
Ë
	`ELF32_ST_TYPE
 (vÆ)

	)

442 
	#ELF64_ST_INFO
(
böd
, 
ty≥
Ë
	`ELF32_ST_INFO
 ((böd), (ty≥))

	)

446 
	#STB_LOCAL
 0

	)

447 
	#STB_GLOBAL
 1

	)

448 
	#STB_WEAK
 2

	)

449 
	#STB_NUM
 3

	)

450 
	#STB_LOOS
 10

	)

451 
	#STB_GNU_UNIQUE
 10

	)

452 
	#STB_HIOS
 12

	)

453 
	#STB_LOPROC
 13

	)

454 
	#STB_HIPROC
 15

	)

458 
	#STT_NOTYPE
 0

	)

459 
	#STT_OBJECT
 1

	)

460 
	#STT_FUNC
 2

	)

461 
	#STT_SECTION
 3

	)

462 
	#STT_FILE
 4

	)

463 
	#STT_COMMON
 5

	)

464 
	#STT_TLS
 6

	)

465 
	#STT_NUM
 7

	)

466 
	#STT_LOOS
 10

	)

467 
	#STT_GNU_IFUNC
 10

	)

468 
	#STT_HIOS
 12

	)

469 
	#STT_LOPROC
 13

	)

470 
	#STT_HIPROC
 15

	)

477 
	#STN_UNDEF
 0

	)

482 
	#ELF32_ST_VISIBILITY
(
o
Ë((oË& 0x03)

	)

485 
	#ELF64_ST_VISIBILITY
(
o
Ë
	`ELF32_ST_VISIBILITY
 (o)

	)

488 
	#STV_DEFAULT
 0

	)

489 
	#STV_INTERNAL
 1

	)

490 
	#STV_HIDDEN
 2

	)

491 
	#STV_PROTECTED
 3

	)

498 
Elf32_Addr
 
	mr_off£t
;

499 
Elf32_W‹d
 
	mr_öfo
;

500 } 
	tElf32_Rñ
;

509 
Elf64_Addr
 
	mr_off£t
;

510 
Elf64_Xw‹d
 
	mr_öfo
;

511 } 
	tElf64_Rñ
;

517 
Elf32_Addr
 
	mr_off£t
;

518 
Elf32_W‹d
 
	mr_öfo
;

519 
Elf32_Sw‹d
 
	mr_addíd
;

520 } 
	tElf32_Rña
;

524 
Elf64_Addr
 
	mr_off£t
;

525 
Elf64_Xw‹d
 
	mr_öfo
;

526 
Elf64_Sxw‹d
 
	mr_addíd
;

527 } 
	tElf64_Rña
;

531 
	#ELF32_R_SYM
(
vÆ
Ë((vÆË>> 8)

	)

532 
	#ELF32_R_TYPE
(
vÆ
Ë((vÆË& 0xff)

	)

533 
	#ELF32_R_INFO
(
sym
, 
ty≥
Ë(((symË<< 8Ë+ (—y≥Ë& 0xff))

	)

535 
	#ELF64_R_SYM
(
i
Ë((iË>> 32)

	)

536 
	#ELF64_R_TYPE
(
i
Ë((iË& 0xffffffff)

	)

537 
	#ELF64_R_INFO
(
sym
,
ty≥
Ë((((
Elf64_Xw‹d
Ë(sym)Ë<< 32Ë+ (ty≥))

	)

543 
Elf32_W‹d
 
	mp_ty≥
;

544 
Elf32_Off
 
	mp_off£t
;

545 
Elf32_Addr
 
	mp_vaddr
;

546 
Elf32_Addr
 
	mp_∑ddr
;

547 
Elf32_W‹d
 
	mp_fûesz
;

548 
Elf32_W‹d
 
	mp_memsz
;

549 
Elf32_W‹d
 
	mp_Êags
;

550 
Elf32_W‹d
 
	mp_Æign
;

551 } 
	tElf32_Phdr
;

555 
Elf64_W‹d
 
	mp_ty≥
;

556 
Elf64_W‹d
 
	mp_Êags
;

557 
Elf64_Off
 
	mp_off£t
;

558 
Elf64_Addr
 
	mp_vaddr
;

559 
Elf64_Addr
 
	mp_∑ddr
;

560 
Elf64_Xw‹d
 
	mp_fûesz
;

561 
Elf64_Xw‹d
 
	mp_memsz
;

562 
Elf64_Xw‹d
 
	mp_Æign
;

563 } 
	tElf64_Phdr
;

569 
	#PN_XNUM
 0xffff

	)

573 
	#PT_NULL
 0

	)

574 
	#PT_LOAD
 1

	)

575 
	#PT_DYNAMIC
 2

	)

576 
	#PT_INTERP
 3

	)

577 
	#PT_NOTE
 4

	)

578 
	#PT_SHLIB
 5

	)

579 
	#PT_PHDR
 6

	)

580 
	#PT_TLS
 7

	)

581 
	#PT_NUM
 8

	)

582 
	#PT_LOOS
 0x60000000

	)

583 
	#PT_GNU_EH_FRAME
 0x6474e550

	)

584 
	#PT_GNU_STACK
 0x6474e551

	)

585 
	#PT_GNU_RELRO
 0x6474e552

	)

586 
	#PT_LOSUNW
 0x6fffffÁ

	)

587 
	#PT_SUNWBSS
 0x6fffffÁ

	)

588 
	#PT_SUNWSTACK
 0x6ffffffb

	)

589 
	#PT_HISUNW
 0x6fffffff

	)

590 
	#PT_HIOS
 0x6ffffff‡

	)

591 
	#PT_LOPROC
 0x70000000

	)

592 
	#PT_HIPROC
 0x7ffffff‡

	)

596 
	#PF_X
 (1 << 0Ë

	)

597 
	#PF_W
 (1 << 1Ë

	)

598 
	#PF_R
 (1 << 2Ë

	)

599 
	#PF_MASKOS
 0x0ff00000

	)

600 
	#PF_MASKPROC
 0xf0000000

	)

604 
	#NT_PRSTATUS
 1

	)

605 
	#NT_FPREGSET
 2

	)

606 
	#NT_PRPSINFO
 3

	)

607 
	#NT_PRXREG
 4

	)

608 
	#NT_TASKSTRUCT
 4

	)

609 
	#NT_PLATFORM
 5

	)

610 
	#NT_AUXV
 6

	)

611 
	#NT_GWINDOWS
 7

	)

612 
	#NT_ASRS
 8

	)

613 
	#NT_PSTATUS
 10

	)

614 
	#NT_PSINFO
 13

	)

615 
	#NT_PRCRED
 14

	)

616 
	#NT_UTSNAME
 15

	)

617 
	#NT_LWPSTATUS
 16

	)

618 
	#NT_LWPSINFO
 17

	)

619 
	#NT_PRFPXREG
 20

	)

620 
	#NT_SIGINFO
 0x53494749

	)

622 
	#NT_FILE
 0x46494c45

	)

624 
	#NT_PRXFPREG
 0x46e62b7‡

	)

625 
	#NT_PPC_VMX
 0x100

	)

626 
	#NT_PPC_SPE
 0x101

	)

627 
	#NT_PPC_VSX
 0x102

	)

628 
	#NT_386_TLS
 0x200

	)

629 
	#NT_386_IOPERM
 0x201

	)

630 
	#NT_X86_XSTATE
 0x202

	)

631 
	#NT_S390_HIGH_GPRS
 0x300

	)

632 
	#NT_S390_TIMER
 0x301

	)

633 
	#NT_S390_TODCMP
 0x302

	)

634 
	#NT_S390_TODPREG
 0x303

	)

635 
	#NT_S390_CTRS
 0x304

	)

636 
	#NT_S390_PREFIX
 0x305

	)

637 
	#NT_S390_LAST_BREAK
 0x306

	)

638 
	#NT_S390_SYSTEM_CALL
 0x307

	)

639 
	#NT_S390_TDB
 0x308

	)

640 
	#NT_ARM_VFP
 0x400

	)

641 
	#NT_ARM_TLS
 0x401

	)

642 
	#NT_ARM_HW_BREAK
 0x402

	)

643 
	#NT_ARM_HW_WATCH
 0x403

	)

647 
	#NT_VERSION
 1

	)

654 
Elf32_Sw‹d
 
	md_èg
;

657 
Elf32_W‹d
 
	md_vÆ
;

658 
Elf32_Addr
 
	md_±r
;

659 } 
	md_un
;

660 } 
	tElf32_Dyn
;

664 
Elf64_Sxw‹d
 
	md_èg
;

667 
Elf64_Xw‹d
 
	md_vÆ
;

668 
Elf64_Addr
 
	md_±r
;

669 } 
	md_un
;

670 } 
	tElf64_Dyn
;

674 
	#DT_NULL
 0

	)

675 
	#DT_NEEDED
 1

	)

676 
	#DT_PLTRELSZ
 2

	)

677 
	#DT_PLTGOT
 3

	)

678 
	#DT_HASH
 4

	)

679 
	#DT_STRTAB
 5

	)

680 
	#DT_SYMTAB
 6

	)

681 
	#DT_RELA
 7

	)

682 
	#DT_RELASZ
 8

	)

683 
	#DT_RELAENT
 9

	)

684 
	#DT_STRSZ
 10

	)

685 
	#DT_SYMENT
 11

	)

686 
	#DT_INIT
 12

	)

687 
	#DT_FINI
 13

	)

688 
	#DT_SONAME
 14

	)

689 
	#DT_RPATH
 15

	)

690 
	#DT_SYMBOLIC
 16

	)

691 
	#DT_REL
 17

	)

692 
	#DT_RELSZ
 18

	)

693 
	#DT_RELENT
 19

	)

694 
	#DT_PLTREL
 20

	)

695 
	#DT_DEBUG
 21

	)

696 
	#DT_TEXTREL
 22

	)

697 
	#DT_JMPREL
 23

	)

698 
	#DT_BIND_NOW
 24

	)

699 
	#DT_INIT_ARRAY
 25

	)

700 
	#DT_FINI_ARRAY
 26

	)

701 
	#DT_INIT_ARRAYSZ
 27

	)

702 
	#DT_FINI_ARRAYSZ
 28

	)

703 
	#DT_RUNPATH
 29

	)

704 
	#DT_FLAGS
 30

	)

705 
	#DT_ENCODING
 32

	)

706 
	#DT_PREINIT_ARRAY
 32

	)

707 
	#DT_PREINIT_ARRAYSZ
 33

	)

708 
	#DT_NUM
 34

	)

709 
	#DT_LOOS
 0x6000000d

	)

710 
	#DT_HIOS
 0x6ffff000

	)

711 
	#DT_LOPROC
 0x70000000

	)

712 
	#DT_HIPROC
 0x7ffffff‡

	)

713 
	#DT_PROCNUM
 
DT_MIPS_NUM


	)

718 
	#DT_VALRNGLO
 0x6ffffd00

	)

719 
	#DT_GNU_PRELINKED
 0x6ffffdf5

	)

720 
	#DT_GNU_CONFLICTSZ
 0x6ffffdf6

	)

721 
	#DT_GNU_LIBLISTSZ
 0x6ffffdf7

	)

722 
	#DT_CHECKSUM
 0x6ffffdf8

	)

723 
	#DT_PLTPADSZ
 0x6ffffdf9

	)

724 
	#DT_MOVEENT
 0x6ffffdÁ

	)

725 
	#DT_MOVESZ
 0x6ffffdfb

	)

726 
	#DT_FEATURE_1
 0x6ffffdf¯

	)

727 
	#DT_POSFLAG_1
 0x6ffffdfd

	)

729 
	#DT_SYMINSZ
 0x6ffffd„

	)

730 
	#DT_SYMINENT
 0x6ffffdf‡

	)

731 
	#DT_VALRNGHI
 0x6ffffdff

	)

732 
	#DT_VALTAGIDX
(
èg
Ë(
DT_VALRNGHI
 - (èg)Ë

	)

733 
	#DT_VALNUM
 12

	)

740 
	#DT_ADDRRNGLO
 0x6fff„00

	)

741 
	#DT_GNU_HASH
 0x6fff„f5

	)

742 
	#DT_TLSDESC_PLT
 0x6fff„f6

	)

743 
	#DT_TLSDESC_GOT
 0x6fff„f7

	)

744 
	#DT_GNU_CONFLICT
 0x6fff„f8

	)

745 
	#DT_GNU_LIBLIST
 0x6fff„f9

	)

746 
	#DT_CONFIG
 0x6fff„Á

	)

747 
	#DT_DEPAUDIT
 0x6fff„fb

	)

748 
	#DT_AUDIT
 0x6fff„f¯

	)

749 
	#DT_PLTPAD
 0x6fff„fd

	)

750 
	#DT_MOVETAB
 0x6fff„„

	)

751 
	#DT_SYMINFO
 0x6fff„f‡

	)

752 
	#DT_ADDRRNGHI
 0x6fff„ff

	)

753 
	#DT_ADDRTAGIDX
(
èg
Ë(
DT_ADDRRNGHI
 - (èg)Ë

	)

754 
	#DT_ADDRNUM
 11

	)

758 
	#DT_VERSYM
 0x6ffffff0

	)

760 
	#DT_RELACOUNT
 0x6ffffff9

	)

761 
	#DT_RELCOUNT
 0x6fffffÁ

	)

764 
	#DT_FLAGS_1
 0x6ffffffb

	)

765 
	#DT_VERDEF
 0x6ffffff¯

	)

767 
	#DT_VERDEFNUM
 0x6ffffffd

	)

768 
	#DT_VERNEED
 0x6fffff„

	)

770 
	#DT_VERNEEDNUM
 0x6ffffff‡

	)

771 
	#DT_VERSIONTAGIDX
(
èg
Ë(
DT_VERNEEDNUM
 - (èg)Ë

	)

772 
	#DT_VERSIONTAGNUM
 16

	)

776 
	#DT_AUXILIARY
 0x7ffffffd

	)

777 
	#DT_FILTER
 0x7ffffff‡

	)

778 
	#DT_EXTRATAGIDX
(
èg
Ë((
Elf32_W‹d
)-((
Elf32_Sw‹d
Ë—agË<<1>>1)-1)

	)

779 
	#DT_EXTRANUM
 3

	)

782 
	#DF_ORIGIN
 0x00000001

	)

783 
	#DF_SYMBOLIC
 0x00000002

	)

784 
	#DF_TEXTREL
 0x00000004

	)

785 
	#DF_BIND_NOW
 0x00000008

	)

786 
	#DF_STATIC_TLS
 0x00000010

	)

790 
	#DF_1_NOW
 0x00000001

	)

791 
	#DF_1_GLOBAL
 0x00000002

	)

792 
	#DF_1_GROUP
 0x00000004

	)

793 
	#DF_1_NODELETE
 0x00000008

	)

794 
	#DF_1_LOADFLTR
 0x00000010

	)

795 
	#DF_1_INITFIRST
 0x00000020

	)

796 
	#DF_1_NOOPEN
 0x00000040

	)

797 
	#DF_1_ORIGIN
 0x00000080

	)

798 
	#DF_1_DIRECT
 0x00000100

	)

799 
	#DF_1_TRANS
 0x00000200

	)

800 
	#DF_1_INTERPOSE
 0x00000400

	)

801 
	#DF_1_NODEFLIB
 0x00000800

	)

802 
	#DF_1_NODUMP
 0x00001000

	)

803 
	#DF_1_CONFALT
 0x00002000

	)

804 
	#DF_1_ENDFILTEE
 0x00004000

	)

805 
	#DF_1_DISPRELDNE
 0x00008000

	)

806 
	#DF_1_DISPRELPND
 0x00010000

	)

807 
	#DF_1_NODIRECT
 0x00020000

	)

808 
	#DF_1_IGNMULDEF
 0x00040000

	)

809 
	#DF_1_NOKSYMS
 0x00080000

	)

810 
	#DF_1_NOHDR
 0x00100000

	)

811 
	#DF_1_EDITED
 0x00200000

	)

812 
	#DF_1_NORELOC
 0x00400000

	)

813 
	#DF_1_SYMINTPOSE
 0x00800000

	)

814 
	#DF_1_GLOBAUDIT
 0x01000000

	)

815 
	#DF_1_SINGLETON
 0x02000000

	)

818 
	#DTF_1_PARINIT
 0x00000001

	)

819 
	#DTF_1_CONFEXP
 0x00000002

	)

822 
	#DF_P1_LAZYLOAD
 0x00000001

	)

823 
	#DF_P1_GROUPPERM
 0x00000002

	)

830 
Elf32_HÆf
 
	mvd_vîsi⁄
;

831 
Elf32_HÆf
 
	mvd_Êags
;

832 
Elf32_HÆf
 
	mvd_ndx
;

833 
Elf32_HÆf
 
	mvd_˙t
;

834 
Elf32_W‹d
 
	mvd_hash
;

835 
Elf32_W‹d
 
	mvd_aux
;

836 
Elf32_W‹d
 
	mvd_√xt
;

838 } 
	tElf32_Vîdef
;

842 
Elf64_HÆf
 
	mvd_vîsi⁄
;

843 
Elf64_HÆf
 
	mvd_Êags
;

844 
Elf64_HÆf
 
	mvd_ndx
;

845 
Elf64_HÆf
 
	mvd_˙t
;

846 
Elf64_W‹d
 
	mvd_hash
;

847 
Elf64_W‹d
 
	mvd_aux
;

848 
Elf64_W‹d
 
	mvd_√xt
;

850 } 
	tElf64_Vîdef
;

854 
	#VER_DEF_NONE
 0

	)

855 
	#VER_DEF_CURRENT
 1

	)

856 
	#VER_DEF_NUM
 2

	)

859 
	#VER_FLG_BASE
 0x1

	)

860 
	#VER_FLG_WEAK
 0x2

	)

863 
	#VER_NDX_LOCAL
 0

	)

864 
	#VER_NDX_GLOBAL
 1

	)

865 
	#VER_NDX_LORESERVE
 0xff00

	)

866 
	#VER_NDX_ELIMINATE
 0xff01

	)

872 
Elf32_W‹d
 
	mvda_«me
;

873 
Elf32_W‹d
 
	mvda_√xt
;

875 } 
	tElf32_Vîdaux
;

879 
Elf64_W‹d
 
	mvda_«me
;

880 
Elf64_W‹d
 
	mvda_√xt
;

882 } 
	tElf64_Vîdaux
;

889 
Elf32_HÆf
 
	mvn_vîsi⁄
;

890 
Elf32_HÆf
 
	mvn_˙t
;

891 
Elf32_W‹d
 
	mvn_fûe
;

893 
Elf32_W‹d
 
	mvn_aux
;

894 
Elf32_W‹d
 
	mvn_√xt
;

896 } 
	tElf32_Vî√ed
;

900 
Elf64_HÆf
 
	mvn_vîsi⁄
;

901 
Elf64_HÆf
 
	mvn_˙t
;

902 
Elf64_W‹d
 
	mvn_fûe
;

904 
Elf64_W‹d
 
	mvn_aux
;

905 
Elf64_W‹d
 
	mvn_√xt
;

907 } 
	tElf64_Vî√ed
;

911 
	#VER_NEED_NONE
 0

	)

912 
	#VER_NEED_CURRENT
 1

	)

913 
	#VER_NEED_NUM
 2

	)

919 
Elf32_W‹d
 
	mv«_hash
;

920 
Elf32_HÆf
 
	mv«_Êags
;

921 
Elf32_HÆf
 
	mv«_Ÿhî
;

922 
Elf32_W‹d
 
	mv«_«me
;

923 
Elf32_W‹d
 
	mv«_√xt
;

925 } 
	tElf32_Vî«ux
;

929 
Elf64_W‹d
 
	mv«_hash
;

930 
Elf64_HÆf
 
	mv«_Êags
;

931 
Elf64_HÆf
 
	mv«_Ÿhî
;

932 
Elf64_W‹d
 
	mv«_«me
;

933 
Elf64_W‹d
 
	mv«_√xt
;

935 } 
	tElf64_Vî«ux
;

939 
	#VER_FLG_WEAK
 0x2

	)

953 
uöt32_t
 
	ma_ty≥
;

956 
uöt32_t
 
	ma_vÆ
;

960 } 
	ma_un
;

961 } 
	tElf32_auxv_t
;

965 
uöt64_t
 
	ma_ty≥
;

968 
uöt64_t
 
	ma_vÆ
;

972 } 
	ma_un
;

973 } 
	tElf64_auxv_t
;

977 
	#AT_NULL
 0

	)

978 
	#AT_IGNORE
 1

	)

979 
	#AT_EXECFD
 2

	)

980 
	#AT_PHDR
 3

	)

981 
	#AT_PHENT
 4

	)

982 
	#AT_PHNUM
 5

	)

983 
	#AT_PAGESZ
 6

	)

984 
	#AT_BASE
 7

	)

985 
	#AT_FLAGS
 8

	)

986 
	#AT_ENTRY
 9

	)

987 
	#AT_NOTELF
 10

	)

988 
	#AT_UID
 11

	)

989 
	#AT_EUID
 12

	)

990 
	#AT_GID
 13

	)

991 
	#AT_EGID
 14

	)

992 
	#AT_CLKTCK
 17

	)

995 
	#AT_PLATFORM
 15

	)

996 
	#AT_HWCAP
 16

	)

1001 
	#AT_FPUCW
 18

	)

1004 
	#AT_DCACHEBSIZE
 19

	)

1005 
	#AT_ICACHEBSIZE
 20

	)

1006 
	#AT_UCACHEBSIZE
 21

	)

1010 
	#AT_IGNOREPPC
 22

	)

1012 
	#AT_SECURE
 23

	)

1014 
	#AT_BASE_PLATFORM
 24

	)

1016 
	#AT_RANDOM
 25

	)

1018 
	#AT_HWCAP2
 26

	)

1021 
	#AT_EXECFN
 31

	)

1025 
	#AT_SYSINFO
 32

	)

1026 
	#AT_SYSINFO_EHDR
 33

	)

1030 
	#AT_L1I_CACHESHAPE
 34

	)

1031 
	#AT_L1D_CACHESHAPE
 35

	)

1032 
	#AT_L2_CACHESHAPE
 36

	)

1033 
	#AT_L3_CACHESHAPE
 37

	)

1040 
Elf32_W‹d
 
	mn_«mesz
;

1041 
Elf32_W‹d
 
	mn_descsz
;

1042 
Elf32_W‹d
 
	mn_ty≥
;

1043 } 
	tElf32_Nhdr
;

1047 
Elf64_W‹d
 
	mn_«mesz
;

1048 
Elf64_W‹d
 
	mn_descsz
;

1049 
Elf64_W‹d
 
	mn_ty≥
;

1050 } 
	tElf64_Nhdr
;

1055 
	#ELF_NOTE_SOLARIS
 "SUNW Sﬁ¨is"

	)

1058 
	#ELF_NOTE_GNU
 "GNU"

	)

1064 
	#ELF_NOTE_PAGESIZE_HINT
 1

	)

1075 
	#NT_GNU_ABI_TAG
 1

	)

1076 
	#ELF_NOTE_ABI
 
NT_GNU_ABI_TAG


	)

1080 
	#ELF_NOTE_OS_LINUX
 0

	)

1081 
	#ELF_NOTE_OS_GNU
 1

	)

1082 
	#ELF_NOTE_OS_SOLARIS2
 2

	)

1083 
	#ELF_NOTE_OS_FREEBSD
 3

	)

1091 
	#NT_GNU_HWCAP
 2

	)

1095 
	#NT_GNU_BUILD_ID
 3

	)

1098 
	#NT_GNU_GOLD_VERSION
 4

	)

1104 
Elf32_Xw‹d
 
	mm_vÆue
;

1105 
Elf32_W‹d
 
	mm_öfo
;

1106 
Elf32_W‹d
 
	mm_poff£t
;

1107 
Elf32_HÆf
 
	mm_ª≥©
;

1108 
Elf32_HÆf
 
	mm_°ride
;

1109 } 
	tElf32_Move
;

1113 
Elf64_Xw‹d
 
	mm_vÆue
;

1114 
Elf64_Xw‹d
 
	mm_öfo
;

1115 
Elf64_Xw‹d
 
	mm_poff£t
;

1116 
Elf64_HÆf
 
	mm_ª≥©
;

1117 
Elf64_HÆf
 
	mm_°ride
;

1118 } 
	tElf64_Move
;

1121 
	#ELF32_M_SYM
(
öfo
Ë((öfoË>> 8)

	)

1122 
	#ELF32_M_SIZE
(
öfo
Ë((Ë(öfo))

	)

1123 
	#ELF32_M_INFO
(
sym
, 
size
Ë(((symË<< 8Ë+ (Ë(size))

	)

1125 
	#ELF64_M_SYM
(
öfo
Ë
	`ELF32_M_SYM
 (öfo)

	)

1126 
	#ELF64_M_SIZE
(
öfo
Ë
	`ELF32_M_SIZE
 (öfo)

	)

1127 
	#ELF64_M_INFO
(
sym
, 
size
Ë
	`ELF32_M_INFO
 (sym, size)

	)

1133 
	#EF_CPU32
 0x00810000

	)

1137 
	#R_68K_NONE
 0

	)

1138 
	#R_68K_32
 1

	)

1139 
	#R_68K_16
 2

	)

1140 
	#R_68K_8
 3

	)

1141 
	#R_68K_PC32
 4

	)

1142 
	#R_68K_PC16
 5

	)

1143 
	#R_68K_PC8
 6

	)

1144 
	#R_68K_GOT32
 7

	)

1145 
	#R_68K_GOT16
 8

	)

1146 
	#R_68K_GOT8
 9

	)

1147 
	#R_68K_GOT32O
 10

	)

1148 
	#R_68K_GOT16O
 11

	)

1149 
	#R_68K_GOT8O
 12

	)

1150 
	#R_68K_PLT32
 13

	)

1151 
	#R_68K_PLT16
 14

	)

1152 
	#R_68K_PLT8
 15

	)

1153 
	#R_68K_PLT32O
 16

	)

1154 
	#R_68K_PLT16O
 17

	)

1155 
	#R_68K_PLT8O
 18

	)

1156 
	#R_68K_COPY
 19

	)

1157 
	#R_68K_GLOB_DAT
 20

	)

1158 
	#R_68K_JMP_SLOT
 21

	)

1159 
	#R_68K_RELATIVE
 22

	)

1160 
	#R_68K_TLS_GD32
 25

	)

1161 
	#R_68K_TLS_GD16
 26

	)

1162 
	#R_68K_TLS_GD8
 27

	)

1163 
	#R_68K_TLS_LDM32
 28

	)

1164 
	#R_68K_TLS_LDM16
 29

	)

1165 
	#R_68K_TLS_LDM8
 30

	)

1166 
	#R_68K_TLS_LDO32
 31

	)

1167 
	#R_68K_TLS_LDO16
 32

	)

1168 
	#R_68K_TLS_LDO8
 33

	)

1169 
	#R_68K_TLS_IE32
 34

	)

1170 
	#R_68K_TLS_IE16
 35

	)

1171 
	#R_68K_TLS_IE8
 36

	)

1172 
	#R_68K_TLS_LE32
 37

	)

1174 
	#R_68K_TLS_LE16
 38

	)

1176 
	#R_68K_TLS_LE8
 39

	)

1178 
	#R_68K_TLS_DTPMOD32
 40

	)

1179 
	#R_68K_TLS_DTPREL32
 41

	)

1180 
	#R_68K_TLS_TPREL32
 42

	)

1182 
	#R_68K_NUM
 43

	)

1188 
	#R_386_NONE
 0

	)

1189 
	#R_386_32
 1

	)

1190 
	#R_386_PC32
 2

	)

1191 
	#R_386_GOT32
 3

	)

1192 
	#R_386_PLT32
 4

	)

1193 
	#R_386_COPY
 5

	)

1194 
	#R_386_GLOB_DAT
 6

	)

1195 
	#R_386_JMP_SLOT
 7

	)

1196 
	#R_386_RELATIVE
 8

	)

1197 
	#R_386_GOTOFF
 9

	)

1198 
	#R_386_GOTPC
 10

	)

1199 
	#R_386_32PLT
 11

	)

1200 
	#R_386_TLS_TPOFF
 14

	)

1201 
	#R_386_TLS_IE
 15

	)

1203 
	#R_386_TLS_GOTIE
 16

	)

1205 
	#R_386_TLS_LE
 17

	)

1207 
	#R_386_TLS_GD
 18

	)

1209 
	#R_386_TLS_LDM
 19

	)

1212 
	#R_386_16
 20

	)

1213 
	#R_386_PC16
 21

	)

1214 
	#R_386_8
 22

	)

1215 
	#R_386_PC8
 23

	)

1216 
	#R_386_TLS_GD_32
 24

	)

1218 
	#R_386_TLS_GD_PUSH
 25

	)

1219 
	#R_386_TLS_GD_CALL
 26

	)

1221 
	#R_386_TLS_GD_POP
 27

	)

1222 
	#R_386_TLS_LDM_32
 28

	)

1224 
	#R_386_TLS_LDM_PUSH
 29

	)

1225 
	#R_386_TLS_LDM_CALL
 30

	)

1227 
	#R_386_TLS_LDM_POP
 31

	)

1228 
	#R_386_TLS_LDO_32
 32

	)

1229 
	#R_386_TLS_IE_32
 33

	)

1231 
	#R_386_TLS_LE_32
 34

	)

1233 
	#R_386_TLS_DTPMOD32
 35

	)

1234 
	#R_386_TLS_DTPOFF32
 36

	)

1235 
	#R_386_TLS_TPOFF32
 37

	)

1236 
	#R_386_SIZE32
 38

	)

1237 
	#R_386_TLS_GOTDESC
 39

	)

1238 
	#R_386_TLS_DESC_CALL
 40

	)

1241 
	#R_386_TLS_DESC
 41

	)

1245 
	#R_386_IRELATIVE
 42

	)

1247 
	#R_386_NUM
 43

	)

1253 
	#STT_SPARC_REGISTER
 13

	)

1257 
	#EF_SPARCV9_MM
 3

	)

1258 
	#EF_SPARCV9_TSO
 0

	)

1259 
	#EF_SPARCV9_PSO
 1

	)

1260 
	#EF_SPARCV9_RMO
 2

	)

1261 
	#EF_SPARC_LEDATA
 0x800000

	)

1262 
	#EF_SPARC_EXT_MASK
 0xFFFF00

	)

1263 
	#EF_SPARC_32PLUS
 0x000100

	)

1264 
	#EF_SPARC_SUN_US1
 0x000200

	)

1265 
	#EF_SPARC_HAL_R1
 0x000400

	)

1266 
	#EF_SPARC_SUN_US3
 0x000800

	)

1270 
	#R_SPARC_NONE
 0

	)

1271 
	#R_SPARC_8
 1

	)

1272 
	#R_SPARC_16
 2

	)

1273 
	#R_SPARC_32
 3

	)

1274 
	#R_SPARC_DISP8
 4

	)

1275 
	#R_SPARC_DISP16
 5

	)

1276 
	#R_SPARC_DISP32
 6

	)

1277 
	#R_SPARC_WDISP30
 7

	)

1278 
	#R_SPARC_WDISP22
 8

	)

1279 
	#R_SPARC_HI22
 9

	)

1280 
	#R_SPARC_22
 10

	)

1281 
	#R_SPARC_13
 11

	)

1282 
	#R_SPARC_LO10
 12

	)

1283 
	#R_SPARC_GOT10
 13

	)

1284 
	#R_SPARC_GOT13
 14

	)

1285 
	#R_SPARC_GOT22
 15

	)

1286 
	#R_SPARC_PC10
 16

	)

1287 
	#R_SPARC_PC22
 17

	)

1288 
	#R_SPARC_WPLT30
 18

	)

1289 
	#R_SPARC_COPY
 19

	)

1290 
	#R_SPARC_GLOB_DAT
 20

	)

1291 
	#R_SPARC_JMP_SLOT
 21

	)

1292 
	#R_SPARC_RELATIVE
 22

	)

1293 
	#R_SPARC_UA32
 23

	)

1297 
	#R_SPARC_PLT32
 24

	)

1298 
	#R_SPARC_HIPLT22
 25

	)

1299 
	#R_SPARC_LOPLT10
 26

	)

1300 
	#R_SPARC_PCPLT32
 27

	)

1301 
	#R_SPARC_PCPLT22
 28

	)

1302 
	#R_SPARC_PCPLT10
 29

	)

1303 
	#R_SPARC_10
 30

	)

1304 
	#R_SPARC_11
 31

	)

1305 
	#R_SPARC_64
 32

	)

1306 
	#R_SPARC_OLO10
 33

	)

1307 
	#R_SPARC_HH22
 34

	)

1308 
	#R_SPARC_HM10
 35

	)

1309 
	#R_SPARC_LM22
 36

	)

1310 
	#R_SPARC_PC_HH22
 37

	)

1311 
	#R_SPARC_PC_HM10
 38

	)

1312 
	#R_SPARC_PC_LM22
 39

	)

1313 
	#R_SPARC_WDISP16
 40

	)

1314 
	#R_SPARC_WDISP19
 41

	)

1315 
	#R_SPARC_GLOB_JMP
 42

	)

1316 
	#R_SPARC_7
 43

	)

1317 
	#R_SPARC_5
 44

	)

1318 
	#R_SPARC_6
 45

	)

1319 
	#R_SPARC_DISP64
 46

	)

1320 
	#R_SPARC_PLT64
 47

	)

1321 
	#R_SPARC_HIX22
 48

	)

1322 
	#R_SPARC_LOX10
 49

	)

1323 
	#R_SPARC_H44
 50

	)

1324 
	#R_SPARC_M44
 51

	)

1325 
	#R_SPARC_L44
 52

	)

1326 
	#R_SPARC_REGISTER
 53

	)

1327 
	#R_SPARC_UA64
 54

	)

1328 
	#R_SPARC_UA16
 55

	)

1329 
	#R_SPARC_TLS_GD_HI22
 56

	)

1330 
	#R_SPARC_TLS_GD_LO10
 57

	)

1331 
	#R_SPARC_TLS_GD_ADD
 58

	)

1332 
	#R_SPARC_TLS_GD_CALL
 59

	)

1333 
	#R_SPARC_TLS_LDM_HI22
 60

	)

1334 
	#R_SPARC_TLS_LDM_LO10
 61

	)

1335 
	#R_SPARC_TLS_LDM_ADD
 62

	)

1336 
	#R_SPARC_TLS_LDM_CALL
 63

	)

1337 
	#R_SPARC_TLS_LDO_HIX22
 64

	)

1338 
	#R_SPARC_TLS_LDO_LOX10
 65

	)

1339 
	#R_SPARC_TLS_LDO_ADD
 66

	)

1340 
	#R_SPARC_TLS_IE_HI22
 67

	)

1341 
	#R_SPARC_TLS_IE_LO10
 68

	)

1342 
	#R_SPARC_TLS_IE_LD
 69

	)

1343 
	#R_SPARC_TLS_IE_LDX
 70

	)

1344 
	#R_SPARC_TLS_IE_ADD
 71

	)

1345 
	#R_SPARC_TLS_LE_HIX22
 72

	)

1346 
	#R_SPARC_TLS_LE_LOX10
 73

	)

1347 
	#R_SPARC_TLS_DTPMOD32
 74

	)

1348 
	#R_SPARC_TLS_DTPMOD64
 75

	)

1349 
	#R_SPARC_TLS_DTPOFF32
 76

	)

1350 
	#R_SPARC_TLS_DTPOFF64
 77

	)

1351 
	#R_SPARC_TLS_TPOFF32
 78

	)

1352 
	#R_SPARC_TLS_TPOFF64
 79

	)

1353 
	#R_SPARC_GOTDATA_HIX22
 80

	)

1354 
	#R_SPARC_GOTDATA_LOX10
 81

	)

1355 
	#R_SPARC_GOTDATA_OP_HIX22
 82

	)

1356 
	#R_SPARC_GOTDATA_OP_LOX10
 83

	)

1357 
	#R_SPARC_GOTDATA_OP
 84

	)

1358 
	#R_SPARC_H34
 85

	)

1359 
	#R_SPARC_SIZE32
 86

	)

1360 
	#R_SPARC_SIZE64
 87

	)

1361 
	#R_SPARC_WDISP10
 88

	)

1362 
	#R_SPARC_JMP_IREL
 248

	)

1363 
	#R_SPARC_IRELATIVE
 249

	)

1364 
	#R_SPARC_GNU_VTINHERIT
 250

	)

1365 
	#R_SPARC_GNU_VTENTRY
 251

	)

1366 
	#R_SPARC_REV32
 252

	)

1368 
	#R_SPARC_NUM
 253

	)

1372 
	#DT_SPARC_REGISTER
 0x70000001

	)

1373 
	#DT_SPARC_NUM
 2

	)

1379 
	#EF_MIPS_NOREORDER
 1

	)

1380 
	#EF_MIPS_PIC
 2

	)

1381 
	#EF_MIPS_CPIC
 4

	)

1382 
	#EF_MIPS_XGOT
 8

	)

1383 
	#EF_MIPS_64BIT_WHIRL
 16

	)

1384 
	#EF_MIPS_ABI2
 32

	)

1385 
	#EF_MIPS_ABI_ON32
 64

	)

1386 
	#EF_MIPS_ARCH
 0xf0000000

	)

1390 
	#EF_MIPS_ARCH_1
 0x00000000

	)

1391 
	#EF_MIPS_ARCH_2
 0x10000000

	)

1392 
	#EF_MIPS_ARCH_3
 0x20000000

	)

1393 
	#EF_MIPS_ARCH_4
 0x30000000

	)

1394 
	#EF_MIPS_ARCH_5
 0x40000000

	)

1395 
	#EF_MIPS_ARCH_32
 0x50000000

	)

1396 
	#EF_MIPS_ARCH_64
 0x60000000

	)

1397 
	#EF_MIPS_ARCH_32R2
 0x70000000

	)

1398 
	#EF_MIPS_ARCH_64R2
 0x80000000

	)

1402 
	#E_MIPS_ARCH_1
 
EF_MIPS_ARCH_1


	)

1403 
	#E_MIPS_ARCH_2
 
EF_MIPS_ARCH_2


	)

1404 
	#E_MIPS_ARCH_3
 
EF_MIPS_ARCH_3


	)

1405 
	#E_MIPS_ARCH_4
 
EF_MIPS_ARCH_4


	)

1406 
	#E_MIPS_ARCH_5
 
EF_MIPS_ARCH_5


	)

1407 
	#E_MIPS_ARCH_32
 
EF_MIPS_ARCH_32


	)

1408 
	#E_MIPS_ARCH_64
 
EF_MIPS_ARCH_64


	)

1412 
	#SHN_MIPS_ACOMMON
 0xff00

	)

1413 
	#SHN_MIPS_TEXT
 0xff01

	)

1414 
	#SHN_MIPS_DATA
 0xff02

	)

1415 
	#SHN_MIPS_SCOMMON
 0xff03

	)

1416 
	#SHN_MIPS_SUNDEFINED
 0xff04

	)

1420 
	#SHT_MIPS_LIBLIST
 0x70000000

	)

1421 
	#SHT_MIPS_MSYM
 0x70000001

	)

1422 
	#SHT_MIPS_CONFLICT
 0x70000002

	)

1423 
	#SHT_MIPS_GPTAB
 0x70000003

	)

1424 
	#SHT_MIPS_UCODE
 0x70000004

	)

1425 
	#SHT_MIPS_DEBUG
 0x70000005

	)

1426 
	#SHT_MIPS_REGINFO
 0x70000006

	)

1427 
	#SHT_MIPS_PACKAGE
 0x70000007

	)

1428 
	#SHT_MIPS_PACKSYM
 0x70000008

	)

1429 
	#SHT_MIPS_RELD
 0x70000009

	)

1430 
	#SHT_MIPS_IFACE
 0x7000000b

	)

1431 
	#SHT_MIPS_CONTENT
 0x7000000c

	)

1432 
	#SHT_MIPS_OPTIONS
 0x7000000d

	)

1433 
	#SHT_MIPS_SHDR
 0x70000010

	)

1434 
	#SHT_MIPS_FDESC
 0x70000011

	)

1435 
	#SHT_MIPS_EXTSYM
 0x70000012

	)

1436 
	#SHT_MIPS_DENSE
 0x70000013

	)

1437 
	#SHT_MIPS_PDESC
 0x70000014

	)

1438 
	#SHT_MIPS_LOCSYM
 0x70000015

	)

1439 
	#SHT_MIPS_AUXSYM
 0x70000016

	)

1440 
	#SHT_MIPS_OPTSYM
 0x70000017

	)

1441 
	#SHT_MIPS_LOCSTR
 0x70000018

	)

1442 
	#SHT_MIPS_LINE
 0x70000019

	)

1443 
	#SHT_MIPS_RFDESC
 0x7000001a

	)

1444 
	#SHT_MIPS_DELTASYM
 0x7000001b

	)

1445 
	#SHT_MIPS_DELTAINST
 0x7000001c

	)

1446 
	#SHT_MIPS_DELTACLASS
 0x7000001d

	)

1447 
	#SHT_MIPS_DWARF
 0x7000001ê

	)

1448 
	#SHT_MIPS_DELTADECL
 0x7000001f

	)

1449 
	#SHT_MIPS_SYMBOL_LIB
 0x70000020

	)

1450 
	#SHT_MIPS_EVENTS
 0x70000021

	)

1451 
	#SHT_MIPS_TRANSLATE
 0x70000022

	)

1452 
	#SHT_MIPS_PIXIE
 0x70000023

	)

1453 
	#SHT_MIPS_XLATE
 0x70000024

	)

1454 
	#SHT_MIPS_XLATE_DEBUG
 0x70000025

	)

1455 
	#SHT_MIPS_WHIRL
 0x70000026

	)

1456 
	#SHT_MIPS_EH_REGION
 0x70000027

	)

1457 
	#SHT_MIPS_XLATE_OLD
 0x70000028

	)

1458 
	#SHT_MIPS_PDR_EXCEPTION
 0x70000029

	)

1462 
	#SHF_MIPS_GPREL
 0x10000000

	)

1463 
	#SHF_MIPS_MERGE
 0x20000000

	)

1464 
	#SHF_MIPS_ADDR
 0x40000000

	)

1465 
	#SHF_MIPS_STRINGS
 0x80000000

	)

1466 
	#SHF_MIPS_NOSTRIP
 0x08000000

	)

1467 
	#SHF_MIPS_LOCAL
 0x04000000

	)

1468 
	#SHF_MIPS_NAMES
 0x02000000

	)

1469 
	#SHF_MIPS_NODUPE
 0x01000000

	)

1475 
	#STO_MIPS_DEFAULT
 0x0

	)

1476 
	#STO_MIPS_INTERNAL
 0x1

	)

1477 
	#STO_MIPS_HIDDEN
 0x2

	)

1478 
	#STO_MIPS_PROTECTED
 0x3

	)

1479 
	#STO_MIPS_PLT
 0x8

	)

1480 
	#STO_MIPS_SC_ALIGN_UNUSED
 0xff

	)

1483 
	#STB_MIPS_SPLIT_COMMON
 13

	)

1491 
Elf32_W‹d
 
	mgt_cuºít_g_vÆue
;

1492 
Elf32_W‹d
 
	mgt_unu£d
;

1493 } 
	mgt_hódî
;

1496 
Elf32_W‹d
 
	mgt_g_vÆue
;

1497 
Elf32_W‹d
 
	mgt_byãs
;

1498 } 
	mgt_íåy
;

1499 } 
	tElf32_g±ab
;

1505 
Elf32_W‹d
 
	mri_g¥mask
;

1506 
Elf32_W‹d
 
	mri_˝rmask
[4];

1507 
Elf32_Sw‹d
 
	mri_gp_vÆue
;

1508 } 
	tElf32_RegInfo
;

1514 
	mköd
;

1516 
	msize
;

1517 
Elf32_Se˘i⁄
 
	m£˘i⁄
;

1519 
Elf32_W‹d
 
	möfo
;

1520 } 
	tElf_O±i⁄s
;

1524 
	#ODK_NULL
 0

	)

1525 
	#ODK_REGINFO
 1

	)

1526 
	#ODK_EXCEPTIONS
 2

	)

1527 
	#ODK_PAD
 3

	)

1528 
	#ODK_HWPATCH
 4

	)

1529 
	#ODK_FILL
 5

	)

1530 
	#ODK_TAGS
 6

	)

1531 
	#ODK_HWAND
 7

	)

1532 
	#ODK_HWOR
 8

	)

1536 
	#OEX_FPU_MIN
 0x1‡

	)

1537 
	#OEX_FPU_MAX
 0x1f00

	)

1538 
	#OEX_PAGE0
 0x10000

	)

1539 
	#OEX_SMM
 0x20000

	)

1540 
	#OEX_FPDBUG
 0x40000

	)

1541 
	#OEX_PRECISEFP
 
OEX_FPDBUG


	)

1542 
	#OEX_DISMISS
 0x80000

	)

1544 
	#OEX_FPU_INVAL
 0x10

	)

1545 
	#OEX_FPU_DIV0
 0x08

	)

1546 
	#OEX_FPU_OFLO
 0x04

	)

1547 
	#OEX_FPU_UFLO
 0x02

	)

1548 
	#OEX_FPU_INEX
 0x01

	)

1552 
	#OHW_R4KEOP
 0x1

	)

1553 
	#OHW_R8KPFETCH
 0x2

	)

1554 
	#OHW_R5KEOP
 0x4

	)

1555 
	#OHW_R5KCVTL
 0x8

	)

1557 
	#OPAD_PREFIX
 0x1

	)

1558 
	#OPAD_POSTFIX
 0x2

	)

1559 
	#OPAD_SYMBOL
 0x4

	)

1565 
Elf32_W‹d
 
	mhwp_Êags1
;

1566 
Elf32_W‹d
 
	mhwp_Êags2
;

1567 } 
	tElf_O±i⁄s_Hw
;

1571 
	#OHWA0_R4KEOP_CHECKED
 0x00000001

	)

1572 
	#OHWA1_R4KEOP_CLEAN
 0x00000002

	)

1576 
	#R_MIPS_NONE
 0

	)

1577 
	#R_MIPS_16
 1

	)

1578 
	#R_MIPS_32
 2

	)

1579 
	#R_MIPS_REL32
 3

	)

1580 
	#R_MIPS_26
 4

	)

1581 
	#R_MIPS_HI16
 5

	)

1582 
	#R_MIPS_LO16
 6

	)

1583 
	#R_MIPS_GPREL16
 7

	)

1584 
	#R_MIPS_LITERAL
 8

	)

1585 
	#R_MIPS_GOT16
 9

	)

1586 
	#R_MIPS_PC16
 10

	)

1587 
	#R_MIPS_CALL16
 11

	)

1588 
	#R_MIPS_GPREL32
 12

	)

1590 
	#R_MIPS_SHIFT5
 16

	)

1591 
	#R_MIPS_SHIFT6
 17

	)

1592 
	#R_MIPS_64
 18

	)

1593 
	#R_MIPS_GOT_DISP
 19

	)

1594 
	#R_MIPS_GOT_PAGE
 20

	)

1595 
	#R_MIPS_GOT_OFST
 21

	)

1596 
	#R_MIPS_GOT_HI16
 22

	)

1597 
	#R_MIPS_GOT_LO16
 23

	)

1598 
	#R_MIPS_SUB
 24

	)

1599 
	#R_MIPS_INSERT_A
 25

	)

1600 
	#R_MIPS_INSERT_B
 26

	)

1601 
	#R_MIPS_DELETE
 27

	)

1602 
	#R_MIPS_HIGHER
 28

	)

1603 
	#R_MIPS_HIGHEST
 29

	)

1604 
	#R_MIPS_CALL_HI16
 30

	)

1605 
	#R_MIPS_CALL_LO16
 31

	)

1606 
	#R_MIPS_SCN_DISP
 32

	)

1607 
	#R_MIPS_REL16
 33

	)

1608 
	#R_MIPS_ADD_IMMEDIATE
 34

	)

1609 
	#R_MIPS_PJUMP
 35

	)

1610 
	#R_MIPS_RELGOT
 36

	)

1611 
	#R_MIPS_JALR
 37

	)

1612 
	#R_MIPS_TLS_DTPMOD32
 38

	)

1613 
	#R_MIPS_TLS_DTPREL32
 39

	)

1614 
	#R_MIPS_TLS_DTPMOD64
 40

	)

1615 
	#R_MIPS_TLS_DTPREL64
 41

	)

1616 
	#R_MIPS_TLS_GD
 42

	)

1617 
	#R_MIPS_TLS_LDM
 43

	)

1618 
	#R_MIPS_TLS_DTPREL_HI16
 44

	)

1619 
	#R_MIPS_TLS_DTPREL_LO16
 45

	)

1620 
	#R_MIPS_TLS_GOTTPREL
 46

	)

1621 
	#R_MIPS_TLS_TPREL32
 47

	)

1622 
	#R_MIPS_TLS_TPREL64
 48

	)

1623 
	#R_MIPS_TLS_TPREL_HI16
 49

	)

1624 
	#R_MIPS_TLS_TPREL_LO16
 50

	)

1625 
	#R_MIPS_GLOB_DAT
 51

	)

1626 
	#R_MIPS_COPY
 126

	)

1627 
	#R_MIPS_JUMP_SLOT
 127

	)

1629 
	#R_MIPS_NUM
 128

	)

1633 
	#PT_MIPS_REGINFO
 0x70000000

	)

1634 
	#PT_MIPS_RTPROC
 0x70000001

	)

1635 
	#PT_MIPS_OPTIONS
 0x70000002

	)

1639 
	#PF_MIPS_LOCAL
 0x10000000

	)

1643 
	#DT_MIPS_RLD_VERSION
 0x70000001

	)

1644 
	#DT_MIPS_TIME_STAMP
 0x70000002

	)

1645 
	#DT_MIPS_ICHECKSUM
 0x70000003

	)

1646 
	#DT_MIPS_IVERSION
 0x70000004

	)

1647 
	#DT_MIPS_FLAGS
 0x70000005

	)

1648 
	#DT_MIPS_BASE_ADDRESS
 0x70000006

	)

1649 
	#DT_MIPS_MSYM
 0x70000007

	)

1650 
	#DT_MIPS_CONFLICT
 0x70000008

	)

1651 
	#DT_MIPS_LIBLIST
 0x70000009

	)

1652 
	#DT_MIPS_LOCAL_GOTNO
 0x7000000®

	)

1653 
	#DT_MIPS_CONFLICTNO
 0x7000000b

	)

1654 
	#DT_MIPS_LIBLISTNO
 0x70000010

	)

1655 
	#DT_MIPS_SYMTABNO
 0x70000011

	)

1656 
	#DT_MIPS_UNREFEXTNO
 0x70000012

	)

1657 
	#DT_MIPS_GOTSYM
 0x70000013

	)

1658 
	#DT_MIPS_HIPAGENO
 0x70000014

	)

1659 
	#DT_MIPS_RLD_MAP
 0x70000016

	)

1660 
	#DT_MIPS_DELTA_CLASS
 0x70000017

	)

1661 
	#DT_MIPS_DELTA_CLASS_NO
 0x70000018

	)

1663 
	#DT_MIPS_DELTA_INSTANCE
 0x70000019

	)

1664 
	#DT_MIPS_DELTA_INSTANCE_NO
 0x7000001®

	)

1666 
	#DT_MIPS_DELTA_RELOC
 0x7000001b

	)

1667 
	#DT_MIPS_DELTA_RELOC_NO
 0x7000001¯

	)

1669 
	#DT_MIPS_DELTA_SYM
 0x7000001d

	)

1671 
	#DT_MIPS_DELTA_SYM_NO
 0x7000001ê

	)

1673 
	#DT_MIPS_DELTA_CLASSSYM
 0x70000020

	)

1675 
	#DT_MIPS_DELTA_CLASSSYM_NO
 0x70000021

	)

1677 
	#DT_MIPS_CXX_FLAGS
 0x70000022

	)

1678 
	#DT_MIPS_PIXIE_INIT
 0x70000023

	)

1679 
	#DT_MIPS_SYMBOL_LIB
 0x70000024

	)

1680 
	#DT_MIPS_LOCALPAGE_GOTIDX
 0x70000025

	)

1681 
	#DT_MIPS_LOCAL_GOTIDX
 0x70000026

	)

1682 
	#DT_MIPS_HIDDEN_GOTIDX
 0x70000027

	)

1683 
	#DT_MIPS_PROTECTED_GOTIDX
 0x70000028

	)

1684 
	#DT_MIPS_OPTIONS
 0x70000029

	)

1685 
	#DT_MIPS_INTERFACE
 0x7000002®

	)

1686 
	#DT_MIPS_DYNSTR_ALIGN
 0x7000002b

	)

1687 
	#DT_MIPS_INTERFACE_SIZE
 0x7000002¯

	)

1688 
	#DT_MIPS_RLD_TEXT_RESOLVE_ADDR
 0x7000002d

	)

1690 
	#DT_MIPS_PERF_SUFFIX
 0x7000002ê

	)

1692 
	#DT_MIPS_COMPACT_SIZE
 0x7000002‡

	)

1693 
	#DT_MIPS_GP_VALUE
 0x70000030

	)

1694 
	#DT_MIPS_AUX_DYNAMIC
 0x70000031

	)

1696 
	#DT_MIPS_PLTGOT
 0x70000032

	)

1700 
	#DT_MIPS_RWPLT
 0x70000034

	)

1701 
	#DT_MIPS_NUM
 0x35

	)

1705 
	#RHF_NONE
 0

	)

1706 
	#RHF_QUICKSTART
 (1 << 0Ë

	)

1707 
	#RHF_NOTPOT
 (1 << 1Ë

	)

1708 
	#RHF_NO_LIBRARY_REPLACEMENT
 (1 << 2Ë

	)

1709 
	#RHF_NO_MOVE
 (1 << 3)

	)

1710 
	#RHF_SGI_ONLY
 (1 << 4)

	)

1711 
	#RHF_GUARANTEE_INIT
 (1 << 5)

	)

1712 
	#RHF_DELTA_C_PLUS_PLUS
 (1 << 6)

	)

1713 
	#RHF_GUARANTEE_START_INIT
 (1 << 7)

	)

1714 
	#RHF_PIXIE
 (1 << 8)

	)

1715 
	#RHF_DEFAULT_DELAY_LOAD
 (1 << 9)

	)

1716 
	#RHF_REQUICKSTART
 (1 << 10)

	)

1717 
	#RHF_REQUICKSTARTED
 (1 << 11)

	)

1718 
	#RHF_CORD
 (1 << 12)

	)

1719 
	#RHF_NO_UNRES_UNDEF
 (1 << 13)

	)

1720 
	#RHF_RLD_ORDER_SAFE
 (1 << 14)

	)

1726 
Elf32_W‹d
 
	ml_«me
;

1727 
Elf32_W‹d
 
	ml_time_°amp
;

1728 
Elf32_W‹d
 
	ml_checksum
;

1729 
Elf32_W‹d
 
	ml_vîsi⁄
;

1730 
Elf32_W‹d
 
	ml_Êags
;

1731 } 
	tElf32_Lib
;

1735 
Elf64_W‹d
 
	ml_«me
;

1736 
Elf64_W‹d
 
	ml_time_°amp
;

1737 
Elf64_W‹d
 
	ml_checksum
;

1738 
Elf64_W‹d
 
	ml_vîsi⁄
;

1739 
Elf64_W‹d
 
	ml_Êags
;

1740 } 
	tElf64_Lib
;

1745 
	#LL_NONE
 0

	)

1746 
	#LL_EXACT_MATCH
 (1 << 0Ë

	)

1747 
	#LL_IGNORE_INT_VER
 (1 << 1Ë

	)

1748 
	#LL_REQUIRE_MINOR
 (1 << 2)

	)

1749 
	#LL_EXPORTS
 (1 << 3)

	)

1750 
	#LL_DELAY_LOAD
 (1 << 4)

	)

1751 
	#LL_DELTA
 (1 << 5)

	)

1755 
Elf32_Addr
 
	tElf32_C⁄Êi˘
;

1762 
	#EF_PARISC_TRAPNIL
 0x00010000

	)

1763 
	#EF_PARISC_EXT
 0x00020000

	)

1764 
	#EF_PARISC_LSB
 0x00040000

	)

1765 
	#EF_PARISC_WIDE
 0x00080000

	)

1766 
	#EF_PARISC_NO_KABP
 0x00100000

	)

1768 
	#EF_PARISC_LAZYSWAP
 0x00400000

	)

1769 
	#EF_PARISC_ARCH
 0x0000fff‡

	)

1773 
	#EFA_PARISC_1_0
 0x020b

	)

1774 
	#EFA_PARISC_1_1
 0x0210

	)

1775 
	#EFA_PARISC_2_0
 0x0214

	)

1779 
	#SHN_PARISC_ANSI_COMMON
 0xff00

	)

1781 
	#SHN_PARISC_HUGE_COMMON
 0xff01

	)

1785 
	#SHT_PARISC_EXT
 0x70000000

	)

1786 
	#SHT_PARISC_UNWIND
 0x70000001

	)

1787 
	#SHT_PARISC_DOC
 0x70000002

	)

1791 
	#SHF_PARISC_SHORT
 0x20000000

	)

1792 
	#SHF_PARISC_HUGE
 0x40000000

	)

1793 
	#SHF_PARISC_SBP
 0x80000000

	)

1797 
	#STT_PARISC_MILLICODE
 13

	)

1799 
	#STT_HP_OPAQUE
 (
STT_LOOS
 + 0x1)

	)

1800 
	#STT_HP_STUB
 (
STT_LOOS
 + 0x2)

	)

1804 
	#R_PARISC_NONE
 0

	)

1805 
	#R_PARISC_DIR32
 1

	)

1806 
	#R_PARISC_DIR21L
 2

	)

1807 
	#R_PARISC_DIR17R
 3

	)

1808 
	#R_PARISC_DIR17F
 4

	)

1809 
	#R_PARISC_DIR14R
 6

	)

1810 
	#R_PARISC_PCREL32
 9

	)

1811 
	#R_PARISC_PCREL21L
 10

	)

1812 
	#R_PARISC_PCREL17R
 11

	)

1813 
	#R_PARISC_PCREL17F
 12

	)

1814 
	#R_PARISC_PCREL14R
 14

	)

1815 
	#R_PARISC_DPREL21L
 18

	)

1816 
	#R_PARISC_DPREL14R
 22

	)

1817 
	#R_PARISC_GPREL21L
 26

	)

1818 
	#R_PARISC_GPREL14R
 30

	)

1819 
	#R_PARISC_LTOFF21L
 34

	)

1820 
	#R_PARISC_LTOFF14R
 38

	)

1821 
	#R_PARISC_SECREL32
 41

	)

1822 
	#R_PARISC_SEGBASE
 48

	)

1823 
	#R_PARISC_SEGREL32
 49

	)

1824 
	#R_PARISC_PLTOFF21L
 50

	)

1825 
	#R_PARISC_PLTOFF14R
 54

	)

1826 
	#R_PARISC_LTOFF_FPTR32
 57

	)

1827 
	#R_PARISC_LTOFF_FPTR21L
 58

	)

1828 
	#R_PARISC_LTOFF_FPTR14R
 62

	)

1829 
	#R_PARISC_FPTR64
 64

	)

1830 
	#R_PARISC_PLABEL32
 65

	)

1831 
	#R_PARISC_PLABEL21L
 66

	)

1832 
	#R_PARISC_PLABEL14R
 70

	)

1833 
	#R_PARISC_PCREL64
 72

	)

1834 
	#R_PARISC_PCREL22F
 74

	)

1835 
	#R_PARISC_PCREL14WR
 75

	)

1836 
	#R_PARISC_PCREL14DR
 76

	)

1837 
	#R_PARISC_PCREL16F
 77

	)

1838 
	#R_PARISC_PCREL16WF
 78

	)

1839 
	#R_PARISC_PCREL16DF
 79

	)

1840 
	#R_PARISC_DIR64
 80

	)

1841 
	#R_PARISC_DIR14WR
 83

	)

1842 
	#R_PARISC_DIR14DR
 84

	)

1843 
	#R_PARISC_DIR16F
 85

	)

1844 
	#R_PARISC_DIR16WF
 86

	)

1845 
	#R_PARISC_DIR16DF
 87

	)

1846 
	#R_PARISC_GPREL64
 88

	)

1847 
	#R_PARISC_GPREL14WR
 91

	)

1848 
	#R_PARISC_GPREL14DR
 92

	)

1849 
	#R_PARISC_GPREL16F
 93

	)

1850 
	#R_PARISC_GPREL16WF
 94

	)

1851 
	#R_PARISC_GPREL16DF
 95

	)

1852 
	#R_PARISC_LTOFF64
 96

	)

1853 
	#R_PARISC_LTOFF14WR
 99

	)

1854 
	#R_PARISC_LTOFF14DR
 100

	)

1855 
	#R_PARISC_LTOFF16F
 101

	)

1856 
	#R_PARISC_LTOFF16WF
 102

	)

1857 
	#R_PARISC_LTOFF16DF
 103

	)

1858 
	#R_PARISC_SECREL64
 104

	)

1859 
	#R_PARISC_SEGREL64
 112

	)

1860 
	#R_PARISC_PLTOFF14WR
 115

	)

1861 
	#R_PARISC_PLTOFF14DR
 116

	)

1862 
	#R_PARISC_PLTOFF16F
 117

	)

1863 
	#R_PARISC_PLTOFF16WF
 118

	)

1864 
	#R_PARISC_PLTOFF16DF
 119

	)

1865 
	#R_PARISC_LTOFF_FPTR64
 120

	)

1866 
	#R_PARISC_LTOFF_FPTR14WR
 123

	)

1867 
	#R_PARISC_LTOFF_FPTR14DR
 124

	)

1868 
	#R_PARISC_LTOFF_FPTR16F
 125

	)

1869 
	#R_PARISC_LTOFF_FPTR16WF
 126

	)

1870 
	#R_PARISC_LTOFF_FPTR16DF
 127

	)

1871 
	#R_PARISC_LORESERVE
 128

	)

1872 
	#R_PARISC_COPY
 128

	)

1873 
	#R_PARISC_IPLT
 129

	)

1874 
	#R_PARISC_EPLT
 130

	)

1875 
	#R_PARISC_TPREL32
 153

	)

1876 
	#R_PARISC_TPREL21L
 154

	)

1877 
	#R_PARISC_TPREL14R
 158

	)

1878 
	#R_PARISC_LTOFF_TP21L
 162

	)

1879 
	#R_PARISC_LTOFF_TP14R
 166

	)

1880 
	#R_PARISC_LTOFF_TP14F
 167

	)

1881 
	#R_PARISC_TPREL64
 216

	)

1882 
	#R_PARISC_TPREL14WR
 219

	)

1883 
	#R_PARISC_TPREL14DR
 220

	)

1884 
	#R_PARISC_TPREL16F
 221

	)

1885 
	#R_PARISC_TPREL16WF
 222

	)

1886 
	#R_PARISC_TPREL16DF
 223

	)

1887 
	#R_PARISC_LTOFF_TP64
 224

	)

1888 
	#R_PARISC_LTOFF_TP14WR
 227

	)

1889 
	#R_PARISC_LTOFF_TP14DR
 228

	)

1890 
	#R_PARISC_LTOFF_TP16F
 229

	)

1891 
	#R_PARISC_LTOFF_TP16WF
 230

	)

1892 
	#R_PARISC_LTOFF_TP16DF
 231

	)

1893 
	#R_PARISC_GNU_VTENTRY
 232

	)

1894 
	#R_PARISC_GNU_VTINHERIT
 233

	)

1895 
	#R_PARISC_TLS_GD21L
 234

	)

1896 
	#R_PARISC_TLS_GD14R
 235

	)

1897 
	#R_PARISC_TLS_GDCALL
 236

	)

1898 
	#R_PARISC_TLS_LDM21L
 237

	)

1899 
	#R_PARISC_TLS_LDM14R
 238

	)

1900 
	#R_PARISC_TLS_LDMCALL
 239

	)

1901 
	#R_PARISC_TLS_LDO21L
 240

	)

1902 
	#R_PARISC_TLS_LDO14R
 241

	)

1903 
	#R_PARISC_TLS_DTPMOD32
 242

	)

1904 
	#R_PARISC_TLS_DTPMOD64
 243

	)

1905 
	#R_PARISC_TLS_DTPOFF32
 244

	)

1906 
	#R_PARISC_TLS_DTPOFF64
 245

	)

1907 
	#R_PARISC_TLS_LE21L
 
R_PARISC_TPREL21L


	)

1908 
	#R_PARISC_TLS_LE14R
 
R_PARISC_TPREL14R


	)

1909 
	#R_PARISC_TLS_IE21L
 
R_PARISC_LTOFF_TP21L


	)

1910 
	#R_PARISC_TLS_IE14R
 
R_PARISC_LTOFF_TP14R


	)

1911 
	#R_PARISC_TLS_TPREL32
 
R_PARISC_TPREL32


	)

1912 
	#R_PARISC_TLS_TPREL64
 
R_PARISC_TPREL64


	)

1913 
	#R_PARISC_HIRESERVE
 255

	)

1917 
	#PT_HP_TLS
 (
PT_LOOS
 + 0x0)

	)

1918 
	#PT_HP_CORE_NONE
 (
PT_LOOS
 + 0x1)

	)

1919 
	#PT_HP_CORE_VERSION
 (
PT_LOOS
 + 0x2)

	)

1920 
	#PT_HP_CORE_KERNEL
 (
PT_LOOS
 + 0x3)

	)

1921 
	#PT_HP_CORE_COMM
 (
PT_LOOS
 + 0x4)

	)

1922 
	#PT_HP_CORE_PROC
 (
PT_LOOS
 + 0x5)

	)

1923 
	#PT_HP_CORE_LOADABLE
 (
PT_LOOS
 + 0x6)

	)

1924 
	#PT_HP_CORE_STACK
 (
PT_LOOS
 + 0x7)

	)

1925 
	#PT_HP_CORE_SHM
 (
PT_LOOS
 + 0x8)

	)

1926 
	#PT_HP_CORE_MMF
 (
PT_LOOS
 + 0x9)

	)

1927 
	#PT_HP_PARALLEL
 (
PT_LOOS
 + 0x10)

	)

1928 
	#PT_HP_FASTBIND
 (
PT_LOOS
 + 0x11)

	)

1929 
	#PT_HP_OPT_ANNOT
 (
PT_LOOS
 + 0x12)

	)

1930 
	#PT_HP_HSL_ANNOT
 (
PT_LOOS
 + 0x13)

	)

1931 
	#PT_HP_STACK
 (
PT_LOOS
 + 0x14)

	)

1933 
	#PT_PARISC_ARCHEXT
 0x70000000

	)

1934 
	#PT_PARISC_UNWIND
 0x70000001

	)

1938 
	#PF_PARISC_SBP
 0x08000000

	)

1940 
	#PF_HP_PAGE_SIZE
 0x00100000

	)

1941 
	#PF_HP_FAR_SHARED
 0x00200000

	)

1942 
	#PF_HP_NEAR_SHARED
 0x00400000

	)

1943 
	#PF_HP_CODE
 0x01000000

	)

1944 
	#PF_HP_MODIFY
 0x02000000

	)

1945 
	#PF_HP_LAZYSWAP
 0x04000000

	)

1946 
	#PF_HP_SBP
 0x08000000

	)

1953 
	#EF_ALPHA_32BIT
 1

	)

1954 
	#EF_ALPHA_CANRELAX
 2

	)

1959 
	#SHT_ALPHA_DEBUG
 0x70000001

	)

1960 
	#SHT_ALPHA_REGINFO
 0x70000002

	)

1964 
	#SHF_ALPHA_GPREL
 0x10000000

	)

1967 
	#STO_ALPHA_NOPV
 0x80

	)

1968 
	#STO_ALPHA_STD_GPLOAD
 0x88

	)

1972 
	#R_ALPHA_NONE
 0

	)

1973 
	#R_ALPHA_REFLONG
 1

	)

1974 
	#R_ALPHA_REFQUAD
 2

	)

1975 
	#R_ALPHA_GPREL32
 3

	)

1976 
	#R_ALPHA_LITERAL
 4

	)

1977 
	#R_ALPHA_LITUSE
 5

	)

1978 
	#R_ALPHA_GPDISP
 6

	)

1979 
	#R_ALPHA_BRADDR
 7

	)

1980 
	#R_ALPHA_HINT
 8

	)

1981 
	#R_ALPHA_SREL16
 9

	)

1982 
	#R_ALPHA_SREL32
 10

	)

1983 
	#R_ALPHA_SREL64
 11

	)

1984 
	#R_ALPHA_GPRELHIGH
 17

	)

1985 
	#R_ALPHA_GPRELLOW
 18

	)

1986 
	#R_ALPHA_GPREL16
 19

	)

1987 
	#R_ALPHA_COPY
 24

	)

1988 
	#R_ALPHA_GLOB_DAT
 25

	)

1989 
	#R_ALPHA_JMP_SLOT
 26

	)

1990 
	#R_ALPHA_RELATIVE
 27

	)

1991 
	#R_ALPHA_TLS_GD_HI
 28

	)

1992 
	#R_ALPHA_TLSGD
 29

	)

1993 
	#R_ALPHA_TLS_LDM
 30

	)

1994 
	#R_ALPHA_DTPMOD64
 31

	)

1995 
	#R_ALPHA_GOTDTPREL
 32

	)

1996 
	#R_ALPHA_DTPREL64
 33

	)

1997 
	#R_ALPHA_DTPRELHI
 34

	)

1998 
	#R_ALPHA_DTPRELLO
 35

	)

1999 
	#R_ALPHA_DTPREL16
 36

	)

2000 
	#R_ALPHA_GOTTPREL
 37

	)

2001 
	#R_ALPHA_TPREL64
 38

	)

2002 
	#R_ALPHA_TPRELHI
 39

	)

2003 
	#R_ALPHA_TPRELLO
 40

	)

2004 
	#R_ALPHA_TPREL16
 41

	)

2006 
	#R_ALPHA_NUM
 46

	)

2009 
	#LITUSE_ALPHA_ADDR
 0

	)

2010 
	#LITUSE_ALPHA_BASE
 1

	)

2011 
	#LITUSE_ALPHA_BYTOFF
 2

	)

2012 
	#LITUSE_ALPHA_JSR
 3

	)

2013 
	#LITUSE_ALPHA_TLS_GD
 4

	)

2014 
	#LITUSE_ALPHA_TLS_LDM
 5

	)

2017 
	#DT_ALPHA_PLTRO
 (
DT_LOPROC
 + 0)

	)

2018 
	#DT_ALPHA_NUM
 1

	)

2023 
	#EF_PPC_EMB
 0x80000000

	)

2026 
	#EF_PPC_RELOCATABLE
 0x00010000

	)

2027 
	#EF_PPC_RELOCATABLE_LIB
 0x00008000

	)

2031 
	#R_PPC_NONE
 0

	)

2032 
	#R_PPC_ADDR32
 1

	)

2033 
	#R_PPC_ADDR24
 2

	)

2034 
	#R_PPC_ADDR16
 3

	)

2035 
	#R_PPC_ADDR16_LO
 4

	)

2036 
	#R_PPC_ADDR16_HI
 5

	)

2037 
	#R_PPC_ADDR16_HA
 6

	)

2038 
	#R_PPC_ADDR14
 7

	)

2039 
	#R_PPC_ADDR14_BRTAKEN
 8

	)

2040 
	#R_PPC_ADDR14_BRNTAKEN
 9

	)

2041 
	#R_PPC_REL24
 10

	)

2042 
	#R_PPC_REL14
 11

	)

2043 
	#R_PPC_REL14_BRTAKEN
 12

	)

2044 
	#R_PPC_REL14_BRNTAKEN
 13

	)

2045 
	#R_PPC_GOT16
 14

	)

2046 
	#R_PPC_GOT16_LO
 15

	)

2047 
	#R_PPC_GOT16_HI
 16

	)

2048 
	#R_PPC_GOT16_HA
 17

	)

2049 
	#R_PPC_PLTREL24
 18

	)

2050 
	#R_PPC_COPY
 19

	)

2051 
	#R_PPC_GLOB_DAT
 20

	)

2052 
	#R_PPC_JMP_SLOT
 21

	)

2053 
	#R_PPC_RELATIVE
 22

	)

2054 
	#R_PPC_LOCAL24PC
 23

	)

2055 
	#R_PPC_UADDR32
 24

	)

2056 
	#R_PPC_UADDR16
 25

	)

2057 
	#R_PPC_REL32
 26

	)

2058 
	#R_PPC_PLT32
 27

	)

2059 
	#R_PPC_PLTREL32
 28

	)

2060 
	#R_PPC_PLT16_LO
 29

	)

2061 
	#R_PPC_PLT16_HI
 30

	)

2062 
	#R_PPC_PLT16_HA
 31

	)

2063 
	#R_PPC_SDAREL16
 32

	)

2064 
	#R_PPC_SECTOFF
 33

	)

2065 
	#R_PPC_SECTOFF_LO
 34

	)

2066 
	#R_PPC_SECTOFF_HI
 35

	)

2067 
	#R_PPC_SECTOFF_HA
 36

	)

2070 
	#R_PPC_TLS
 67

	)

2071 
	#R_PPC_DTPMOD32
 68

	)

2072 
	#R_PPC_TPREL16
 69

	)

2073 
	#R_PPC_TPREL16_LO
 70

	)

2074 
	#R_PPC_TPREL16_HI
 71

	)

2075 
	#R_PPC_TPREL16_HA
 72

	)

2076 
	#R_PPC_TPREL32
 73

	)

2077 
	#R_PPC_DTPREL16
 74

	)

2078 
	#R_PPC_DTPREL16_LO
 75

	)

2079 
	#R_PPC_DTPREL16_HI
 76

	)

2080 
	#R_PPC_DTPREL16_HA
 77

	)

2081 
	#R_PPC_DTPREL32
 78

	)

2082 
	#R_PPC_GOT_TLSGD16
 79

	)

2083 
	#R_PPC_GOT_TLSGD16_LO
 80

	)

2084 
	#R_PPC_GOT_TLSGD16_HI
 81

	)

2085 
	#R_PPC_GOT_TLSGD16_HA
 82

	)

2086 
	#R_PPC_GOT_TLSLD16
 83

	)

2087 
	#R_PPC_GOT_TLSLD16_LO
 84

	)

2088 
	#R_PPC_GOT_TLSLD16_HI
 85

	)

2089 
	#R_PPC_GOT_TLSLD16_HA
 86

	)

2090 
	#R_PPC_GOT_TPREL16
 87

	)

2091 
	#R_PPC_GOT_TPREL16_LO
 88

	)

2092 
	#R_PPC_GOT_TPREL16_HI
 89

	)

2093 
	#R_PPC_GOT_TPREL16_HA
 90

	)

2094 
	#R_PPC_GOT_DTPREL16
 91

	)

2095 
	#R_PPC_GOT_DTPREL16_LO
 92

	)

2096 
	#R_PPC_GOT_DTPREL16_HI
 93

	)

2097 
	#R_PPC_GOT_DTPREL16_HA
 94

	)

2101 
	#R_PPC_EMB_NADDR32
 101

	)

2102 
	#R_PPC_EMB_NADDR16
 102

	)

2103 
	#R_PPC_EMB_NADDR16_LO
 103

	)

2104 
	#R_PPC_EMB_NADDR16_HI
 104

	)

2105 
	#R_PPC_EMB_NADDR16_HA
 105

	)

2106 
	#R_PPC_EMB_SDAI16
 106

	)

2107 
	#R_PPC_EMB_SDA2I16
 107

	)

2108 
	#R_PPC_EMB_SDA2REL
 108

	)

2109 
	#R_PPC_EMB_SDA21
 109

	)

2110 
	#R_PPC_EMB_MRKREF
 110

	)

2111 
	#R_PPC_EMB_RELSEC16
 111

	)

2112 
	#R_PPC_EMB_RELST_LO
 112

	)

2113 
	#R_PPC_EMB_RELST_HI
 113

	)

2114 
	#R_PPC_EMB_RELST_HA
 114

	)

2115 
	#R_PPC_EMB_BIT_FLD
 115

	)

2116 
	#R_PPC_EMB_RELSDA
 116

	)

2119 
	#R_PPC_DIAB_SDA21_LO
 180

	)

2120 
	#R_PPC_DIAB_SDA21_HI
 181

	)

2121 
	#R_PPC_DIAB_SDA21_HA
 182

	)

2122 
	#R_PPC_DIAB_RELSDA_LO
 183

	)

2123 
	#R_PPC_DIAB_RELSDA_HI
 184

	)

2124 
	#R_PPC_DIAB_RELSDA_HA
 185

	)

2127 
	#R_PPC_IRELATIVE
 248

	)

2130 
	#R_PPC_REL16
 249

	)

2131 
	#R_PPC_REL16_LO
 250

	)

2132 
	#R_PPC_REL16_HI
 251

	)

2133 
	#R_PPC_REL16_HA
 252

	)

2137 
	#R_PPC_TOC16
 255

	)

2140 
	#DT_PPC_GOT
 (
DT_LOPROC
 + 0)

	)

2141 
	#DT_PPC_NUM
 1

	)

2144 
	#R_PPC64_NONE
 
R_PPC_NONE


	)

2145 
	#R_PPC64_ADDR32
 
R_PPC_ADDR32


	)

2146 
	#R_PPC64_ADDR24
 
R_PPC_ADDR24


	)

2147 
	#R_PPC64_ADDR16
 
R_PPC_ADDR16


	)

2148 
	#R_PPC64_ADDR16_LO
 
R_PPC_ADDR16_LO


	)

2149 
	#R_PPC64_ADDR16_HI
 
R_PPC_ADDR16_HI


	)

2150 
	#R_PPC64_ADDR16_HA
 
R_PPC_ADDR16_HA


	)

2151 
	#R_PPC64_ADDR14
 
R_PPC_ADDR14


	)

2152 
	#R_PPC64_ADDR14_BRTAKEN
 
R_PPC_ADDR14_BRTAKEN


	)

2153 
	#R_PPC64_ADDR14_BRNTAKEN
 
R_PPC_ADDR14_BRNTAKEN


	)

2154 
	#R_PPC64_REL24
 
R_PPC_REL24


	)

2155 
	#R_PPC64_REL14
 
R_PPC_REL14


	)

2156 
	#R_PPC64_REL14_BRTAKEN
 
R_PPC_REL14_BRTAKEN


	)

2157 
	#R_PPC64_REL14_BRNTAKEN
 
R_PPC_REL14_BRNTAKEN


	)

2158 
	#R_PPC64_GOT16
 
R_PPC_GOT16


	)

2159 
	#R_PPC64_GOT16_LO
 
R_PPC_GOT16_LO


	)

2160 
	#R_PPC64_GOT16_HI
 
R_PPC_GOT16_HI


	)

2161 
	#R_PPC64_GOT16_HA
 
R_PPC_GOT16_HA


	)

2163 
	#R_PPC64_COPY
 
R_PPC_COPY


	)

2164 
	#R_PPC64_GLOB_DAT
 
R_PPC_GLOB_DAT


	)

2165 
	#R_PPC64_JMP_SLOT
 
R_PPC_JMP_SLOT


	)

2166 
	#R_PPC64_RELATIVE
 
R_PPC_RELATIVE


	)

2168 
	#R_PPC64_UADDR32
 
R_PPC_UADDR32


	)

2169 
	#R_PPC64_UADDR16
 
R_PPC_UADDR16


	)

2170 
	#R_PPC64_REL32
 
R_PPC_REL32


	)

2171 
	#R_PPC64_PLT32
 
R_PPC_PLT32


	)

2172 
	#R_PPC64_PLTREL32
 
R_PPC_PLTREL32


	)

2173 
	#R_PPC64_PLT16_LO
 
R_PPC_PLT16_LO


	)

2174 
	#R_PPC64_PLT16_HI
 
R_PPC_PLT16_HI


	)

2175 
	#R_PPC64_PLT16_HA
 
R_PPC_PLT16_HA


	)

2177 
	#R_PPC64_SECTOFF
 
R_PPC_SECTOFF


	)

2178 
	#R_PPC64_SECTOFF_LO
 
R_PPC_SECTOFF_LO


	)

2179 
	#R_PPC64_SECTOFF_HI
 
R_PPC_SECTOFF_HI


	)

2180 
	#R_PPC64_SECTOFF_HA
 
R_PPC_SECTOFF_HA


	)

2181 
	#R_PPC64_ADDR30
 37

	)

2182 
	#R_PPC64_ADDR64
 38

	)

2183 
	#R_PPC64_ADDR16_HIGHER
 39

	)

2184 
	#R_PPC64_ADDR16_HIGHERA
 40

	)

2185 
	#R_PPC64_ADDR16_HIGHEST
 41

	)

2186 
	#R_PPC64_ADDR16_HIGHESTA
 42

	)

2187 
	#R_PPC64_UADDR64
 43

	)

2188 
	#R_PPC64_REL64
 44

	)

2189 
	#R_PPC64_PLT64
 45

	)

2190 
	#R_PPC64_PLTREL64
 46

	)

2191 
	#R_PPC64_TOC16
 47

	)

2192 
	#R_PPC64_TOC16_LO
 48

	)

2193 
	#R_PPC64_TOC16_HI
 49

	)

2194 
	#R_PPC64_TOC16_HA
 50

	)

2195 
	#R_PPC64_TOC
 51

	)

2196 
	#R_PPC64_PLTGOT16
 52

	)

2197 
	#R_PPC64_PLTGOT16_LO
 53

	)

2198 
	#R_PPC64_PLTGOT16_HI
 54

	)

2199 
	#R_PPC64_PLTGOT16_HA
 55

	)

2201 
	#R_PPC64_ADDR16_DS
 56

	)

2202 
	#R_PPC64_ADDR16_LO_DS
 57

	)

2203 
	#R_PPC64_GOT16_DS
 58

	)

2204 
	#R_PPC64_GOT16_LO_DS
 59

	)

2205 
	#R_PPC64_PLT16_LO_DS
 60

	)

2206 
	#R_PPC64_SECTOFF_DS
 61

	)

2207 
	#R_PPC64_SECTOFF_LO_DS
 62

	)

2208 
	#R_PPC64_TOC16_DS
 63

	)

2209 
	#R_PPC64_TOC16_LO_DS
 64

	)

2210 
	#R_PPC64_PLTGOT16_DS
 65

	)

2211 
	#R_PPC64_PLTGOT16_LO_DS
 66

	)

2214 
	#R_PPC64_TLS
 67

	)

2215 
	#R_PPC64_DTPMOD64
 68

	)

2216 
	#R_PPC64_TPREL16
 69

	)

2217 
	#R_PPC64_TPREL16_LO
 70

	)

2218 
	#R_PPC64_TPREL16_HI
 71

	)

2219 
	#R_PPC64_TPREL16_HA
 72

	)

2220 
	#R_PPC64_TPREL64
 73

	)

2221 
	#R_PPC64_DTPREL16
 74

	)

2222 
	#R_PPC64_DTPREL16_LO
 75

	)

2223 
	#R_PPC64_DTPREL16_HI
 76

	)

2224 
	#R_PPC64_DTPREL16_HA
 77

	)

2225 
	#R_PPC64_DTPREL64
 78

	)

2226 
	#R_PPC64_GOT_TLSGD16
 79

	)

2227 
	#R_PPC64_GOT_TLSGD16_LO
 80

	)

2228 
	#R_PPC64_GOT_TLSGD16_HI
 81

	)

2229 
	#R_PPC64_GOT_TLSGD16_HA
 82

	)

2230 
	#R_PPC64_GOT_TLSLD16
 83

	)

2231 
	#R_PPC64_GOT_TLSLD16_LO
 84

	)

2232 
	#R_PPC64_GOT_TLSLD16_HI
 85

	)

2233 
	#R_PPC64_GOT_TLSLD16_HA
 86

	)

2234 
	#R_PPC64_GOT_TPREL16_DS
 87

	)

2235 
	#R_PPC64_GOT_TPREL16_LO_DS
 88

	)

2236 
	#R_PPC64_GOT_TPREL16_HI
 89

	)

2237 
	#R_PPC64_GOT_TPREL16_HA
 90

	)

2238 
	#R_PPC64_GOT_DTPREL16_DS
 91

	)

2239 
	#R_PPC64_GOT_DTPREL16_LO_DS
 92

	)

2240 
	#R_PPC64_GOT_DTPREL16_HI
 93

	)

2241 
	#R_PPC64_GOT_DTPREL16_HA
 94

	)

2242 
	#R_PPC64_TPREL16_DS
 95

	)

2243 
	#R_PPC64_TPREL16_LO_DS
 96

	)

2244 
	#R_PPC64_TPREL16_HIGHER
 97

	)

2245 
	#R_PPC64_TPREL16_HIGHERA
 98

	)

2246 
	#R_PPC64_TPREL16_HIGHEST
 99

	)

2247 
	#R_PPC64_TPREL16_HIGHESTA
 100

	)

2248 
	#R_PPC64_DTPREL16_DS
 101

	)

2249 
	#R_PPC64_DTPREL16_LO_DS
 102

	)

2250 
	#R_PPC64_DTPREL16_HIGHER
 103

	)

2251 
	#R_PPC64_DTPREL16_HIGHERA
 104

	)

2252 
	#R_PPC64_DTPREL16_HIGHEST
 105

	)

2253 
	#R_PPC64_DTPREL16_HIGHESTA
 106

	)

2256 
	#R_PPC64_JMP_IREL
 247

	)

2257 
	#R_PPC64_IRELATIVE
 248

	)

2258 
	#R_PPC64_REL16
 249

	)

2259 
	#R_PPC64_REL16_LO
 250

	)

2260 
	#R_PPC64_REL16_HI
 251

	)

2261 
	#R_PPC64_REL16_HA
 252

	)

2264 
	#DT_PPC64_GLINK
 (
DT_LOPROC
 + 0)

	)

2265 
	#DT_PPC64_OPD
 (
DT_LOPROC
 + 1)

	)

2266 
	#DT_PPC64_OPDSZ
 (
DT_LOPROC
 + 2)

	)

2267 
	#DT_PPC64_NUM
 3

	)

2273 
	#EF_ARM_RELEXEC
 0x01

	)

2274 
	#EF_ARM_HASENTRY
 0x02

	)

2275 
	#EF_ARM_INTERWORK
 0x04

	)

2276 
	#EF_ARM_APCS_26
 0x08

	)

2277 
	#EF_ARM_APCS_FLOAT
 0x10

	)

2278 
	#EF_ARM_PIC
 0x20

	)

2279 
	#EF_ARM_ALIGN8
 0x40

	)

2280 
	#EF_ARM_NEW_ABI
 0x80

	)

2281 
	#EF_ARM_OLD_ABI
 0x100

	)

2282 
	#EF_ARM_SOFT_FLOAT
 0x200

	)

2283 
	#EF_ARM_VFP_FLOAT
 0x400

	)

2284 
	#EF_ARM_MAVERICK_FLOAT
 0x800

	)

2286 
	#EF_ARM_ABI_FLOAT_SOFT
 0x200

	)

2287 
	#EF_ARM_ABI_FLOAT_HARD
 0x400

	)

2292 
	#EF_ARM_SYMSARESORTED
 0x04

	)

2293 
	#EF_ARM_DYNSYMSUSESEGIDX
 0x08

	)

2294 
	#EF_ARM_MAPSYMSFIRST
 0x10

	)

2295 
	#EF_ARM_EABIMASK
 0XFF000000

	)

2298 
	#EF_ARM_BE8
 0x00800000

	)

2299 
	#EF_ARM_LE8
 0x00400000

	)

2301 
	#EF_ARM_EABI_VERSION
(
Êags
Ë((ÊagsË& 
EF_ARM_EABIMASK
)

	)

2302 
	#EF_ARM_EABI_UNKNOWN
 0x00000000

	)

2303 
	#EF_ARM_EABI_VER1
 0x01000000

	)

2304 
	#EF_ARM_EABI_VER2
 0x02000000

	)

2305 
	#EF_ARM_EABI_VER3
 0x03000000

	)

2306 
	#EF_ARM_EABI_VER4
 0x04000000

	)

2307 
	#EF_ARM_EABI_VER5
 0x05000000

	)

2310 
	#STT_ARM_TFUNC
 
STT_LOPROC


	)

2311 
	#STT_ARM_16BIT
 
STT_HIPROC


	)

2314 
	#SHF_ARM_ENTRYSECT
 0x10000000

	)

2315 
	#SHF_ARM_COMDEF
 0x80000000

	)

2319 
	#PF_ARM_SB
 0x10000000

	)

2321 
	#PF_ARM_PI
 0x20000000

	)

2322 
	#PF_ARM_ABS
 0x40000000

	)

2325 
	#PT_ARM_EXIDX
 (
PT_LOPROC
 + 1Ë

	)

2328 
	#SHT_ARM_EXIDX
 (
SHT_LOPROC
 + 1Ë

	)

2329 
	#SHT_ARM_PREEMPTMAP
 (
SHT_LOPROC
 + 2Ë

	)

2330 
	#SHT_ARM_ATTRIBUTES
 (
SHT_LOPROC
 + 3Ë

	)

2335 
	#R_AARCH64_NONE
 0

	)

2336 
	#R_AARCH64_ABS64
 257

	)

2337 
	#R_AARCH64_ABS32
 258

	)

2338 
	#R_AARCH64_COPY
 1024

	)

2339 
	#R_AARCH64_GLOB_DAT
 1025

	)

2340 
	#R_AARCH64_JUMP_SLOT
 1026

	)

2341 
	#R_AARCH64_RELATIVE
 1027

	)

2342 
	#R_AARCH64_TLS_DTPMOD64
 1028

	)

2343 
	#R_AARCH64_TLS_DTPREL64
 1029

	)

2344 
	#R_AARCH64_TLS_TPREL64
 1030

	)

2345 
	#R_AARCH64_TLSDESC
 1031

	)

2349 
	#R_ARM_NONE
 0

	)

2350 
	#R_ARM_PC24
 1

	)

2352 
	#R_ARM_ABS32
 2

	)

2353 
	#R_ARM_REL32
 3

	)

2354 
	#R_ARM_PC13
 4

	)

2355 
	#R_ARM_ABS16
 5

	)

2356 
	#R_ARM_ABS12
 6

	)

2357 
	#R_ARM_THM_ABS5
 7

	)

2358 
	#R_ARM_ABS8
 8

	)

2359 
	#R_ARM_SBREL32
 9

	)

2360 
	#R_ARM_THM_PC22
 10

	)

2361 
	#R_ARM_THM_PC8
 11

	)

2363 
	#R_ARM_AMP_VCALL9
 12

	)

2364 
	#R_ARM_SWI24
 13

	)

2365 
	#R_ARM_TLS_DESC
 13

	)

2366 
	#R_ARM_THM_SWI8
 14

	)

2367 
	#R_ARM_XPC25
 15

	)

2368 
	#R_ARM_THM_XPC22
 16

	)

2369 
	#R_ARM_TLS_DTPMOD32
 17

	)

2370 
	#R_ARM_TLS_DTPOFF32
 18

	)

2371 
	#R_ARM_TLS_TPOFF32
 19

	)

2372 
	#R_ARM_COPY
 20

	)

2373 
	#R_ARM_GLOB_DAT
 21

	)

2374 
	#R_ARM_JUMP_SLOT
 22

	)

2375 
	#R_ARM_RELATIVE
 23

	)

2376 
	#R_ARM_GOTOFF
 24

	)

2377 
	#R_ARM_GOTPC
 25

	)

2378 
	#R_ARM_GOT32
 26

	)

2379 
	#R_ARM_PLT32
 27

	)

2380 
	#R_ARM_CALL
 28

	)

2381 
	#R_ARM_JUMP24
 29

	)

2383 
	#R_ARM_THM_JUMP24
 30

	)

2384 
	#R_ARM_BASE_ABS
 31

	)

2385 
	#R_ARM_ALU_PCREL_7_0
 32

	)

2386 
	#R_ARM_ALU_PCREL_15_8
 33

	)

2387 
	#R_ARM_ALU_PCREL_23_15
 34

	)

2388 
	#R_ARM_LDR_SBREL_11_0
 35

	)

2389 
	#R_ARM_ALU_SBREL_19_12
 36

	)

2390 
	#R_ARM_ALU_SBREL_27_20
 37

	)

2391 
	#R_ARM_TARGET1
 38

	)

2392 
	#R_ARM_SBREL31
 39

	)

2393 
	#R_ARM_V4BX
 40

	)

2394 
	#R_ARM_TARGET2
 41

	)

2395 
	#R_ARM_PREL31
 42

	)

2396 
	#R_ARM_MOVW_ABS_NC
 43

	)

2397 
	#R_ARM_MOVT_ABS
 44

	)

2398 
	#R_ARM_MOVW_PREL_NC
 45

	)

2399 
	#R_ARM_MOVT_PREL
 46

	)

2400 
	#R_ARM_THM_MOVW_ABS_NC
 47

	)

2401 
	#R_ARM_THM_MOVT_ABS
 48

	)

2403 
	#R_ARM_THM_MOVW_PREL_NC
 49

	)

2405 
	#R_ARM_THM_MOVT_PREL
 50

	)

2407 
	#R_ARM_THM_JUMP19
 51

	)

2409 
	#R_ARM_THM_JUMP6
 52

	)

2411 
	#R_ARM_THM_ALU_PREL_11_0
 53

	)

2413 
	#R_ARM_THM_PC12
 54

	)

2415 
	#R_ARM_ABS32_NOI
 55

	)

2416 
	#R_ARM_REL32_NOI
 56

	)

2417 
	#R_ARM_ALU_PC_G0_NC
 57

	)

2418 
	#R_ARM_ALU_PC_G0
 58

	)

2419 
	#R_ARM_ALU_PC_G1_NC
 59

	)

2420 
	#R_ARM_ALU_PC_G1
 60

	)

2421 
	#R_ARM_ALU_PC_G2
 61

	)

2422 
	#R_ARM_LDR_PC_G1
 62

	)

2423 
	#R_ARM_LDR_PC_G2
 63

	)

2424 
	#R_ARM_LDRS_PC_G0
 64

	)

2426 
	#R_ARM_LDRS_PC_G1
 65

	)

2428 
	#R_ARM_LDRS_PC_G2
 66

	)

2430 
	#R_ARM_LDC_PC_G0
 67

	)

2431 
	#R_ARM_LDC_PC_G1
 68

	)

2432 
	#R_ARM_LDC_PC_G2
 69

	)

2433 
	#R_ARM_ALU_SB_G0_NC
 70

	)

2434 
	#R_ARM_ALU_SB_G0
 71

	)

2435 
	#R_ARM_ALU_SB_G1_NC
 72

	)

2436 
	#R_ARM_ALU_SB_G1
 73

	)

2437 
	#R_ARM_ALU_SB_G2
 74

	)

2438 
	#R_ARM_LDR_SB_G0
 75

	)

2440 
	#R_ARM_LDR_SB_G1
 76

	)

2442 
	#R_ARM_LDR_SB_G2
 77

	)

2444 
	#R_ARM_LDRS_SB_G0
 78

	)

2446 
	#R_ARM_LDRS_SB_G1
 79

	)

2448 
	#R_ARM_LDRS_SB_G2
 80

	)

2450 
	#R_ARM_LDC_SB_G0
 81

	)

2451 
	#R_ARM_LDC_SB_G1
 82

	)

2452 
	#R_ARM_LDC_SB_G2
 83

	)

2453 
	#R_ARM_MOVW_BREL_NC
 84

	)

2455 
	#R_ARM_MOVT_BREL
 85

	)

2457 
	#R_ARM_MOVW_BREL
 86

	)

2459 
	#R_ARM_THM_MOVW_BREL_NC
 87

	)

2461 
	#R_ARM_THM_MOVT_BREL
 88

	)

2463 
	#R_ARM_THM_MOVW_BREL
 89

	)

2465 
	#R_ARM_TLS_GOTDESC
 90

	)

2466 
	#R_ARM_TLS_CALL
 91

	)

2467 
	#R_ARM_TLS_DESCSEQ
 92

	)

2468 
	#R_ARM_THM_TLS_CALL
 93

	)

2469 
	#R_ARM_PLT32_ABS
 94

	)

2470 
	#R_ARM_GOT_ABS
 95

	)

2471 
	#R_ARM_GOT_PREL
 96

	)

2472 
	#R_ARM_GOT_BREL12
 97

	)

2474 
	#R_ARM_GOTOFF12
 98

	)

2476 
	#R_ARM_GOTRELAX
 99

	)

2477 
	#R_ARM_GNU_VTENTRY
 100

	)

2478 
	#R_ARM_GNU_VTINHERIT
 101

	)

2479 
	#R_ARM_THM_PC11
 102

	)

2480 
	#R_ARM_THM_PC9
 103

	)

2482 
	#R_ARM_TLS_GD32
 104

	)

2484 
	#R_ARM_TLS_LDM32
 105

	)

2486 
	#R_ARM_TLS_LDO32
 106

	)

2488 
	#R_ARM_TLS_IE32
 107

	)

2490 
	#R_ARM_TLS_LE32
 108

	)

2492 
	#R_ARM_TLS_LDO12
 109

	)

2494 
	#R_ARM_TLS_LE12
 110

	)

2496 
	#R_ARM_TLS_IE12GP
 111

	)

2498 
	#R_ARM_ME_TOO
 128

	)

2499 
	#R_ARM_THM_TLS_DESCSEQ
 129

	)

2500 
	#R_ARM_THM_TLS_DESCSEQ16
 129

	)

2501 
	#R_ARM_THM_TLS_DESCSEQ32
 130

	)

2502 
	#R_ARM_THM_GOT_BREL12
 131

	)

2504 
	#R_ARM_IRELATIVE
 160

	)

2505 
	#R_ARM_RXPC25
 249

	)

2506 
	#R_ARM_RSBREL32
 250

	)

2507 
	#R_ARM_THM_RPC22
 251

	)

2508 
	#R_ARM_RREL32
 252

	)

2509 
	#R_ARM_RABS22
 253

	)

2510 
	#R_ARM_RPC24
 254

	)

2511 
	#R_ARM_RBASE
 255

	)

2513 
	#R_ARM_NUM
 256

	)

2518 
	#EF_IA_64_MASKOS
 0x0000000‡

	)

2519 
	#EF_IA_64_ABI64
 0x00000010

	)

2520 
	#EF_IA_64_ARCH
 0xff000000

	)

2523 
	#PT_IA_64_ARCHEXT
 (
PT_LOPROC
 + 0Ë

	)

2524 
	#PT_IA_64_UNWIND
 (
PT_LOPROC
 + 1Ë

	)

2525 
	#PT_IA_64_HP_OPT_ANOT
 (
PT_LOOS
 + 0x12)

	)

2526 
	#PT_IA_64_HP_HSL_ANOT
 (
PT_LOOS
 + 0x13)

	)

2527 
	#PT_IA_64_HP_STACK
 (
PT_LOOS
 + 0x14)

	)

2530 
	#PF_IA_64_NORECOV
 0x80000000

	)

2533 
	#SHT_IA_64_EXT
 (
SHT_LOPROC
 + 0Ë

	)

2534 
	#SHT_IA_64_UNWIND
 (
SHT_LOPROC
 + 1Ë

	)

2537 
	#SHF_IA_64_SHORT
 0x10000000

	)

2538 
	#SHF_IA_64_NORECOV
 0x20000000

	)

2541 
	#DT_IA_64_PLT_RESERVE
 (
DT_LOPROC
 + 0)

	)

2542 
	#DT_IA_64_NUM
 1

	)

2545 
	#R_IA64_NONE
 0x00

	)

2546 
	#R_IA64_IMM14
 0x21

	)

2547 
	#R_IA64_IMM22
 0x22

	)

2548 
	#R_IA64_IMM64
 0x23

	)

2549 
	#R_IA64_DIR32MSB
 0x24

	)

2550 
	#R_IA64_DIR32LSB
 0x25

	)

2551 
	#R_IA64_DIR64MSB
 0x26

	)

2552 
	#R_IA64_DIR64LSB
 0x27

	)

2553 
	#R_IA64_GPREL22
 0x2®

	)

2554 
	#R_IA64_GPREL64I
 0x2b

	)

2555 
	#R_IA64_GPREL32MSB
 0x2¯

	)

2556 
	#R_IA64_GPREL32LSB
 0x2d

	)

2557 
	#R_IA64_GPREL64MSB
 0x2ê

	)

2558 
	#R_IA64_GPREL64LSB
 0x2‡

	)

2559 
	#R_IA64_LTOFF22
 0x32

	)

2560 
	#R_IA64_LTOFF64I
 0x33

	)

2561 
	#R_IA64_PLTOFF22
 0x3®

	)

2562 
	#R_IA64_PLTOFF64I
 0x3b

	)

2563 
	#R_IA64_PLTOFF64MSB
 0x3ê

	)

2564 
	#R_IA64_PLTOFF64LSB
 0x3‡

	)

2565 
	#R_IA64_FPTR64I
 0x43

	)

2566 
	#R_IA64_FPTR32MSB
 0x44

	)

2567 
	#R_IA64_FPTR32LSB
 0x45

	)

2568 
	#R_IA64_FPTR64MSB
 0x46

	)

2569 
	#R_IA64_FPTR64LSB
 0x47

	)

2570 
	#R_IA64_PCREL60B
 0x48

	)

2571 
	#R_IA64_PCREL21B
 0x49

	)

2572 
	#R_IA64_PCREL21M
 0x4®

	)

2573 
	#R_IA64_PCREL21F
 0x4b

	)

2574 
	#R_IA64_PCREL32MSB
 0x4¯

	)

2575 
	#R_IA64_PCREL32LSB
 0x4d

	)

2576 
	#R_IA64_PCREL64MSB
 0x4ê

	)

2577 
	#R_IA64_PCREL64LSB
 0x4‡

	)

2578 
	#R_IA64_LTOFF_FPTR22
 0x52

	)

2579 
	#R_IA64_LTOFF_FPTR64I
 0x53

	)

2580 
	#R_IA64_LTOFF_FPTR32MSB
 0x54

	)

2581 
	#R_IA64_LTOFF_FPTR32LSB
 0x55

	)

2582 
	#R_IA64_LTOFF_FPTR64MSB
 0x56

	)

2583 
	#R_IA64_LTOFF_FPTR64LSB
 0x57

	)

2584 
	#R_IA64_SEGREL32MSB
 0x5¯

	)

2585 
	#R_IA64_SEGREL32LSB
 0x5d

	)

2586 
	#R_IA64_SEGREL64MSB
 0x5ê

	)

2587 
	#R_IA64_SEGREL64LSB
 0x5‡

	)

2588 
	#R_IA64_SECREL32MSB
 0x64

	)

2589 
	#R_IA64_SECREL32LSB
 0x65

	)

2590 
	#R_IA64_SECREL64MSB
 0x66

	)

2591 
	#R_IA64_SECREL64LSB
 0x67

	)

2592 
	#R_IA64_REL32MSB
 0x6¯

	)

2593 
	#R_IA64_REL32LSB
 0x6d

	)

2594 
	#R_IA64_REL64MSB
 0x6ê

	)

2595 
	#R_IA64_REL64LSB
 0x6‡

	)

2596 
	#R_IA64_LTV32MSB
 0x74

	)

2597 
	#R_IA64_LTV32LSB
 0x75

	)

2598 
	#R_IA64_LTV64MSB
 0x76

	)

2599 
	#R_IA64_LTV64LSB
 0x77

	)

2600 
	#R_IA64_PCREL21BI
 0x79

	)

2601 
	#R_IA64_PCREL22
 0x7®

	)

2602 
	#R_IA64_PCREL64I
 0x7b

	)

2603 
	#R_IA64_IPLTMSB
 0x80

	)

2604 
	#R_IA64_IPLTLSB
 0x81

	)

2605 
	#R_IA64_COPY
 0x84

	)

2606 
	#R_IA64_SUB
 0x85

	)

2607 
	#R_IA64_LTOFF22X
 0x86

	)

2608 
	#R_IA64_LDXMOV
 0x87

	)

2609 
	#R_IA64_TPREL14
 0x91

	)

2610 
	#R_IA64_TPREL22
 0x92

	)

2611 
	#R_IA64_TPREL64I
 0x93

	)

2612 
	#R_IA64_TPREL64MSB
 0x96

	)

2613 
	#R_IA64_TPREL64LSB
 0x97

	)

2614 
	#R_IA64_LTOFF_TPREL22
 0x9®

	)

2615 
	#R_IA64_DTPMOD64MSB
 0xa6

	)

2616 
	#R_IA64_DTPMOD64LSB
 0xa7

	)

2617 
	#R_IA64_LTOFF_DTPMOD22
 0xØ

	)

2618 
	#R_IA64_DTPREL14
 0xb1

	)

2619 
	#R_IA64_DTPREL22
 0xb2

	)

2620 
	#R_IA64_DTPREL64I
 0xb3

	)

2621 
	#R_IA64_DTPREL32MSB
 0xb4

	)

2622 
	#R_IA64_DTPREL32LSB
 0xb5

	)

2623 
	#R_IA64_DTPREL64MSB
 0xb6

	)

2624 
	#R_IA64_DTPREL64LSB
 0xb7

	)

2625 
	#R_IA64_LTOFF_DTPREL22
 0xb®

	)

2630 
	#EF_SH_MACH_MASK
 0x1f

	)

2631 
	#EF_SH_UNKNOWN
 0x0

	)

2632 
	#EF_SH1
 0x1

	)

2633 
	#EF_SH2
 0x2

	)

2634 
	#EF_SH3
 0x3

	)

2635 
	#EF_SH_DSP
 0x4

	)

2636 
	#EF_SH3_DSP
 0x5

	)

2637 
	#EF_SH4AL_DSP
 0x6

	)

2638 
	#EF_SH3E
 0x8

	)

2639 
	#EF_SH4
 0x9

	)

2640 
	#EF_SH2E
 0xb

	)

2641 
	#EF_SH4A
 0xc

	)

2642 
	#EF_SH2A
 0xd

	)

2643 
	#EF_SH4_NOFPU
 0x10

	)

2644 
	#EF_SH4A_NOFPU
 0x11

	)

2645 
	#EF_SH4_NOMMU_NOFPU
 0x12

	)

2646 
	#EF_SH2A_NOFPU
 0x13

	)

2647 
	#EF_SH3_NOMMU
 0x14

	)

2648 
	#EF_SH2A_SH4_NOFPU
 0x15

	)

2649 
	#EF_SH2A_SH3_NOFPU
 0x16

	)

2650 
	#EF_SH2A_SH4
 0x17

	)

2651 
	#EF_SH2A_SH3E
 0x18

	)

2654 
	#R_SH_NONE
 0

	)

2655 
	#R_SH_DIR32
 1

	)

2656 
	#R_SH_REL32
 2

	)

2657 
	#R_SH_DIR8WPN
 3

	)

2658 
	#R_SH_IND12W
 4

	)

2659 
	#R_SH_DIR8WPL
 5

	)

2660 
	#R_SH_DIR8WPZ
 6

	)

2661 
	#R_SH_DIR8BP
 7

	)

2662 
	#R_SH_DIR8W
 8

	)

2663 
	#R_SH_DIR8L
 9

	)

2664 
	#R_SH_SWITCH16
 25

	)

2665 
	#R_SH_SWITCH32
 26

	)

2666 
	#R_SH_USES
 27

	)

2667 
	#R_SH_COUNT
 28

	)

2668 
	#R_SH_ALIGN
 29

	)

2669 
	#R_SH_CODE
 30

	)

2670 
	#R_SH_DATA
 31

	)

2671 
	#R_SH_LABEL
 32

	)

2672 
	#R_SH_SWITCH8
 33

	)

2673 
	#R_SH_GNU_VTINHERIT
 34

	)

2674 
	#R_SH_GNU_VTENTRY
 35

	)

2675 
	#R_SH_TLS_GD_32
 144

	)

2676 
	#R_SH_TLS_LD_32
 145

	)

2677 
	#R_SH_TLS_LDO_32
 146

	)

2678 
	#R_SH_TLS_IE_32
 147

	)

2679 
	#R_SH_TLS_LE_32
 148

	)

2680 
	#R_SH_TLS_DTPMOD32
 149

	)

2681 
	#R_SH_TLS_DTPOFF32
 150

	)

2682 
	#R_SH_TLS_TPOFF32
 151

	)

2683 
	#R_SH_GOT32
 160

	)

2684 
	#R_SH_PLT32
 161

	)

2685 
	#R_SH_COPY
 162

	)

2686 
	#R_SH_GLOB_DAT
 163

	)

2687 
	#R_SH_JMP_SLOT
 164

	)

2688 
	#R_SH_RELATIVE
 165

	)

2689 
	#R_SH_GOTOFF
 166

	)

2690 
	#R_SH_GOTPC
 167

	)

2692 
	#R_SH_NUM
 256

	)

2698 
	#EF_S390_HIGH_GPRS
 0x00000001

	)

2702 
	#R_390_NONE
 0

	)

2703 
	#R_390_8
 1

	)

2704 
	#R_390_12
 2

	)

2705 
	#R_390_16
 3

	)

2706 
	#R_390_32
 4

	)

2707 
	#R_390_PC32
 5

	)

2708 
	#R_390_GOT12
 6

	)

2709 
	#R_390_GOT32
 7

	)

2710 
	#R_390_PLT32
 8

	)

2711 
	#R_390_COPY
 9

	)

2712 
	#R_390_GLOB_DAT
 10

	)

2713 
	#R_390_JMP_SLOT
 11

	)

2714 
	#R_390_RELATIVE
 12

	)

2715 
	#R_390_GOTOFF32
 13

	)

2716 
	#R_390_GOTPC
 14

	)

2717 
	#R_390_GOT16
 15

	)

2718 
	#R_390_PC16
 16

	)

2719 
	#R_390_PC16DBL
 17

	)

2720 
	#R_390_PLT16DBL
 18

	)

2721 
	#R_390_PC32DBL
 19

	)

2722 
	#R_390_PLT32DBL
 20

	)

2723 
	#R_390_GOTPCDBL
 21

	)

2724 
	#R_390_64
 22

	)

2725 
	#R_390_PC64
 23

	)

2726 
	#R_390_GOT64
 24

	)

2727 
	#R_390_PLT64
 25

	)

2728 
	#R_390_GOTENT
 26

	)

2729 
	#R_390_GOTOFF16
 27

	)

2730 
	#R_390_GOTOFF64
 28

	)

2731 
	#R_390_GOTPLT12
 29

	)

2732 
	#R_390_GOTPLT16
 30

	)

2733 
	#R_390_GOTPLT32
 31

	)

2734 
	#R_390_GOTPLT64
 32

	)

2735 
	#R_390_GOTPLTENT
 33

	)

2736 
	#R_390_PLTOFF16
 34

	)

2737 
	#R_390_PLTOFF32
 35

	)

2738 
	#R_390_PLTOFF64
 36

	)

2739 
	#R_390_TLS_LOAD
 37

	)

2740 
	#R_390_TLS_GDCALL
 38

	)

2742 
	#R_390_TLS_LDCALL
 39

	)

2744 
	#R_390_TLS_GD32
 40

	)

2746 
	#R_390_TLS_GD64
 41

	)

2748 
	#R_390_TLS_GOTIE12
 42

	)

2750 
	#R_390_TLS_GOTIE32
 43

	)

2752 
	#R_390_TLS_GOTIE64
 44

	)

2754 
	#R_390_TLS_LDM32
 45

	)

2756 
	#R_390_TLS_LDM64
 46

	)

2758 
	#R_390_TLS_IE32
 47

	)

2760 
	#R_390_TLS_IE64
 48

	)

2762 
	#R_390_TLS_IEENT
 49

	)

2764 
	#R_390_TLS_LE32
 50

	)

2766 
	#R_390_TLS_LE64
 51

	)

2768 
	#R_390_TLS_LDO32
 52

	)

2770 
	#R_390_TLS_LDO64
 53

	)

2772 
	#R_390_TLS_DTPMOD
 54

	)

2773 
	#R_390_TLS_DTPOFF
 55

	)

2774 
	#R_390_TLS_TPOFF
 56

	)

2776 
	#R_390_20
 57

	)

2777 
	#R_390_GOT20
 58

	)

2778 
	#R_390_GOTPLT20
 59

	)

2779 
	#R_390_TLS_GOTIE20
 60

	)

2781 
	#R_390_IRELATIVE
 61

	)

2783 
	#R_390_NUM
 62

	)

2787 
	#R_CRIS_NONE
 0

	)

2788 
	#R_CRIS_8
 1

	)

2789 
	#R_CRIS_16
 2

	)

2790 
	#R_CRIS_32
 3

	)

2791 
	#R_CRIS_8_PCREL
 4

	)

2792 
	#R_CRIS_16_PCREL
 5

	)

2793 
	#R_CRIS_32_PCREL
 6

	)

2794 
	#R_CRIS_GNU_VTINHERIT
 7

	)

2795 
	#R_CRIS_GNU_VTENTRY
 8

	)

2796 
	#R_CRIS_COPY
 9

	)

2797 
	#R_CRIS_GLOB_DAT
 10

	)

2798 
	#R_CRIS_JUMP_SLOT
 11

	)

2799 
	#R_CRIS_RELATIVE
 12

	)

2800 
	#R_CRIS_16_GOT
 13

	)

2801 
	#R_CRIS_32_GOT
 14

	)

2802 
	#R_CRIS_16_GOTPLT
 15

	)

2803 
	#R_CRIS_32_GOTPLT
 16

	)

2804 
	#R_CRIS_32_GOTREL
 17

	)

2805 
	#R_CRIS_32_PLT_GOTREL
 18

	)

2806 
	#R_CRIS_32_PLT_PCREL
 19

	)

2808 
	#R_CRIS_NUM
 20

	)

2812 
	#R_X86_64_NONE
 0

	)

2813 
	#R_X86_64_64
 1

	)

2814 
	#R_X86_64_PC32
 2

	)

2815 
	#R_X86_64_GOT32
 3

	)

2816 
	#R_X86_64_PLT32
 4

	)

2817 
	#R_X86_64_COPY
 5

	)

2818 
	#R_X86_64_GLOB_DAT
 6

	)

2819 
	#R_X86_64_JUMP_SLOT
 7

	)

2820 
	#R_X86_64_RELATIVE
 8

	)

2821 
	#R_X86_64_GOTPCREL
 9

	)

2823 
	#R_X86_64_32
 10

	)

2824 
	#R_X86_64_32S
 11

	)

2825 
	#R_X86_64_16
 12

	)

2826 
	#R_X86_64_PC16
 13

	)

2827 
	#R_X86_64_8
 14

	)

2828 
	#R_X86_64_PC8
 15

	)

2829 
	#R_X86_64_DTPMOD64
 16

	)

2830 
	#R_X86_64_DTPOFF64
 17

	)

2831 
	#R_X86_64_TPOFF64
 18

	)

2832 
	#R_X86_64_TLSGD
 19

	)

2834 
	#R_X86_64_TLSLD
 20

	)

2836 
	#R_X86_64_DTPOFF32
 21

	)

2837 
	#R_X86_64_GOTTPOFF
 22

	)

2839 
	#R_X86_64_TPOFF32
 23

	)

2840 
	#R_X86_64_PC64
 24

	)

2841 
	#R_X86_64_GOTOFF64
 25

	)

2842 
	#R_X86_64_GOTPC32
 26

	)

2844 
	#R_X86_64_GOT64
 27

	)

2845 
	#R_X86_64_GOTPCREL64
 28

	)

2847 
	#R_X86_64_GOTPC64
 29

	)

2848 
	#R_X86_64_GOTPLT64
 30

	)

2849 
	#R_X86_64_PLTOFF64
 31

	)

2851 
	#R_X86_64_SIZE32
 32

	)

2852 
	#R_X86_64_SIZE64
 33

	)

2853 
	#R_X86_64_GOTPC32_TLSDESC
 34

	)

2854 
	#R_X86_64_TLSDESC_CALL
 35

	)

2856 
	#R_X86_64_TLSDESC
 36

	)

2857 
	#R_X86_64_IRELATIVE
 37

	)

2858 
	#R_X86_64_RELATIVE64
 38

	)

2860 
	#R_X86_64_NUM
 39

	)

2864 
	#R_MN10300_NONE
 0

	)

2865 
	#R_MN10300_32
 1

	)

2866 
	#R_MN10300_16
 2

	)

2867 
	#R_MN10300_8
 3

	)

2868 
	#R_MN10300_PCREL32
 4

	)

2869 
	#R_MN10300_PCREL16
 5

	)

2870 
	#R_MN10300_PCREL8
 6

	)

2871 
	#R_MN10300_GNU_VTINHERIT
 7

	)

2872 
	#R_MN10300_GNU_VTENTRY
 8

	)

2873 
	#R_MN10300_24
 9

	)

2874 
	#R_MN10300_GOTPC32
 10

	)

2875 
	#R_MN10300_GOTPC16
 11

	)

2876 
	#R_MN10300_GOTOFF32
 12

	)

2877 
	#R_MN10300_GOTOFF24
 13

	)

2878 
	#R_MN10300_GOTOFF16
 14

	)

2879 
	#R_MN10300_PLT32
 15

	)

2880 
	#R_MN10300_PLT16
 16

	)

2881 
	#R_MN10300_GOT32
 17

	)

2882 
	#R_MN10300_GOT24
 18

	)

2883 
	#R_MN10300_GOT16
 19

	)

2884 
	#R_MN10300_COPY
 20

	)

2885 
	#R_MN10300_GLOB_DAT
 21

	)

2886 
	#R_MN10300_JMP_SLOT
 22

	)

2887 
	#R_MN10300_RELATIVE
 23

	)

2888 
	#R_MN10300_TLS_GD
 24

	)

2889 
	#R_MN10300_TLS_LD
 25

	)

2890 
	#R_MN10300_TLS_LDO
 26

	)

2891 
	#R_MN10300_TLS_GOTIE
 27

	)

2893 
	#R_MN10300_TLS_IE
 28

	)

2895 
	#R_MN10300_TLS_LE
 29

	)

2897 
	#R_MN10300_TLS_DTPMOD
 30

	)

2898 
	#R_MN10300_TLS_DTPOFF
 31

	)

2899 
	#R_MN10300_TLS_TPOFF
 32

	)

2900 
	#R_MN10300_SYM_DIFF
 33

	)

2902 
	#R_MN10300_ALIGN
 34

	)

2904 
	#R_MN10300_NUM
 35

	)

2908 
	#R_M32R_NONE
 0

	)

2909 
	#R_M32R_16
 1

	)

2910 
	#R_M32R_32
 2

	)

2911 
	#R_M32R_24
 3

	)

2912 
	#R_M32R_10_PCREL
 4

	)

2913 
	#R_M32R_18_PCREL
 5

	)

2914 
	#R_M32R_26_PCREL
 6

	)

2915 
	#R_M32R_HI16_ULO
 7

	)

2916 
	#R_M32R_HI16_SLO
 8

	)

2917 
	#R_M32R_LO16
 9

	)

2918 
	#R_M32R_SDA16
 10

	)

2919 
	#R_M32R_GNU_VTINHERIT
 11

	)

2920 
	#R_M32R_GNU_VTENTRY
 12

	)

2922 
	#R_M32R_16_RELA
 33

	)

2923 
	#R_M32R_32_RELA
 34

	)

2924 
	#R_M32R_24_RELA
 35

	)

2925 
	#R_M32R_10_PCREL_RELA
 36

	)

2926 
	#R_M32R_18_PCREL_RELA
 37

	)

2927 
	#R_M32R_26_PCREL_RELA
 38

	)

2928 
	#R_M32R_HI16_ULO_RELA
 39

	)

2929 
	#R_M32R_HI16_SLO_RELA
 40

	)

2930 
	#R_M32R_LO16_RELA
 41

	)

2931 
	#R_M32R_SDA16_RELA
 42

	)

2932 
	#R_M32R_RELA_GNU_VTINHERIT
 43

	)

2933 
	#R_M32R_RELA_GNU_VTENTRY
 44

	)

2934 
	#R_M32R_REL32
 45

	)

2936 
	#R_M32R_GOT24
 48

	)

2937 
	#R_M32R_26_PLTREL
 49

	)

2938 
	#R_M32R_COPY
 50

	)

2939 
	#R_M32R_GLOB_DAT
 51

	)

2940 
	#R_M32R_JMP_SLOT
 52

	)

2941 
	#R_M32R_RELATIVE
 53

	)

2942 
	#R_M32R_GOTOFF
 54

	)

2943 
	#R_M32R_GOTPC24
 55

	)

2944 
	#R_M32R_GOT16_HI_ULO
 56

	)

2946 
	#R_M32R_GOT16_HI_SLO
 57

	)

2948 
	#R_M32R_GOT16_LO
 58

	)

2949 
	#R_M32R_GOTPC_HI_ULO
 59

	)

2951 
	#R_M32R_GOTPC_HI_SLO
 60

	)

2953 
	#R_M32R_GOTPC_LO
 61

	)

2955 
	#R_M32R_GOTOFF_HI_ULO
 62

	)

2957 
	#R_M32R_GOTOFF_HI_SLO
 63

	)

2959 
	#R_M32R_GOTOFF_LO
 64

	)

2960 
	#R_M32R_NUM
 256

	)

2963 
	#R_MICROBLAZE_NONE
 0

	)

2964 
	#R_MICROBLAZE_32
 1

	)

2965 
	#R_MICROBLAZE_32_PCREL
 2

	)

2966 
	#R_MICROBLAZE_64_PCREL
 3

	)

2967 
	#R_MICROBLAZE_32_PCREL_LO
 4

	)

2968 
	#R_MICROBLAZE_64
 5

	)

2969 
	#R_MICROBLAZE_32_LO
 6

	)

2970 
	#R_MICROBLAZE_SRO32
 7

	)

2971 
	#R_MICROBLAZE_SRW32
 8

	)

2972 
	#R_MICROBLAZE_64_NONE
 9

	)

2973 
	#R_MICROBLAZE_32_SYM_OP_SYM
 10

	)

2974 
	#R_MICROBLAZE_GNU_VTINHERIT
 11

	)

2975 
	#R_MICROBLAZE_GNU_VTENTRY
 12

	)

2976 
	#R_MICROBLAZE_GOTPC_64
 13

	)

2977 
	#R_MICROBLAZE_GOT_64
 14

	)

2978 
	#R_MICROBLAZE_PLT_64
 15

	)

2979 
	#R_MICROBLAZE_REL
 16

	)

2980 
	#R_MICROBLAZE_JUMP_SLOT
 17

	)

2981 
	#R_MICROBLAZE_GLOB_DAT
 18

	)

2982 
	#R_MICROBLAZE_GOTOFF_64
 19

	)

2983 
	#R_MICROBLAZE_GOTOFF_32
 20

	)

2984 
	#R_MICROBLAZE_COPY
 21

	)

2985 
	#R_MICROBLAZE_TLS
 22

	)

2986 
	#R_MICROBLAZE_TLSGD
 23

	)

2987 
	#R_MICROBLAZE_TLSLD
 24

	)

2988 
	#R_MICROBLAZE_TLSDTPMOD32
 25

	)

2989 
	#R_MICROBLAZE_TLSDTPREL32
 26

	)

2990 
	#R_MICROBLAZE_TLSDTPREL64
 27

	)

2991 
	#R_MICROBLAZE_TLSGOTTPREL32
 28

	)

2992 
	#R_MICROBLAZE_TLSTPREL32
 29

	)

2995 
	#R_TILEPRO_NONE
 0

	)

2996 
	#R_TILEPRO_32
 1

	)

2997 
	#R_TILEPRO_16
 2

	)

2998 
	#R_TILEPRO_8
 3

	)

2999 
	#R_TILEPRO_32_PCREL
 4

	)

3000 
	#R_TILEPRO_16_PCREL
 5

	)

3001 
	#R_TILEPRO_8_PCREL
 6

	)

3002 
	#R_TILEPRO_LO16
 7

	)

3003 
	#R_TILEPRO_HI16
 8

	)

3004 
	#R_TILEPRO_HA16
 9

	)

3005 
	#R_TILEPRO_COPY
 10

	)

3006 
	#R_TILEPRO_GLOB_DAT
 11

	)

3007 
	#R_TILEPRO_JMP_SLOT
 12

	)

3008 
	#R_TILEPRO_RELATIVE
 13

	)

3009 
	#R_TILEPRO_BROFF_X1
 14

	)

3010 
	#R_TILEPRO_JOFFLONG_X1
 15

	)

3011 
	#R_TILEPRO_JOFFLONG_X1_PLT
 16

	)

3012 
	#R_TILEPRO_IMM8_X0
 17

	)

3013 
	#R_TILEPRO_IMM8_Y0
 18

	)

3014 
	#R_TILEPRO_IMM8_X1
 19

	)

3015 
	#R_TILEPRO_IMM8_Y1
 20

	)

3016 
	#R_TILEPRO_MT_IMM15_X1
 21

	)

3017 
	#R_TILEPRO_MF_IMM15_X1
 22

	)

3018 
	#R_TILEPRO_IMM16_X0
 23

	)

3019 
	#R_TILEPRO_IMM16_X1
 24

	)

3020 
	#R_TILEPRO_IMM16_X0_LO
 25

	)

3021 
	#R_TILEPRO_IMM16_X1_LO
 26

	)

3022 
	#R_TILEPRO_IMM16_X0_HI
 27

	)

3023 
	#R_TILEPRO_IMM16_X1_HI
 28

	)

3024 
	#R_TILEPRO_IMM16_X0_HA
 29

	)

3025 
	#R_TILEPRO_IMM16_X1_HA
 30

	)

3026 
	#R_TILEPRO_IMM16_X0_PCREL
 31

	)

3027 
	#R_TILEPRO_IMM16_X1_PCREL
 32

	)

3028 
	#R_TILEPRO_IMM16_X0_LO_PCREL
 33

	)

3029 
	#R_TILEPRO_IMM16_X1_LO_PCREL
 34

	)

3030 
	#R_TILEPRO_IMM16_X0_HI_PCREL
 35

	)

3031 
	#R_TILEPRO_IMM16_X1_HI_PCREL
 36

	)

3032 
	#R_TILEPRO_IMM16_X0_HA_PCREL
 37

	)

3033 
	#R_TILEPRO_IMM16_X1_HA_PCREL
 38

	)

3034 
	#R_TILEPRO_IMM16_X0_GOT
 39

	)

3035 
	#R_TILEPRO_IMM16_X1_GOT
 40

	)

3036 
	#R_TILEPRO_IMM16_X0_GOT_LO
 41

	)

3037 
	#R_TILEPRO_IMM16_X1_GOT_LO
 42

	)

3038 
	#R_TILEPRO_IMM16_X0_GOT_HI
 43

	)

3039 
	#R_TILEPRO_IMM16_X1_GOT_HI
 44

	)

3040 
	#R_TILEPRO_IMM16_X0_GOT_HA
 45

	)

3041 
	#R_TILEPRO_IMM16_X1_GOT_HA
 46

	)

3042 
	#R_TILEPRO_MMSTART_X0
 47

	)

3043 
	#R_TILEPRO_MMEND_X0
 48

	)

3044 
	#R_TILEPRO_MMSTART_X1
 49

	)

3045 
	#R_TILEPRO_MMEND_X1
 50

	)

3046 
	#R_TILEPRO_SHAMT_X0
 51

	)

3047 
	#R_TILEPRO_SHAMT_X1
 52

	)

3048 
	#R_TILEPRO_SHAMT_Y0
 53

	)

3049 
	#R_TILEPRO_SHAMT_Y1
 54

	)

3050 
	#R_TILEPRO_DEST_IMM8_X1
 55

	)

3052 
	#R_TILEPRO_TLS_GD_CALL
 60

	)

3053 
	#R_TILEPRO_IMM8_X0_TLS_GD_ADD
 61

	)

3054 
	#R_TILEPRO_IMM8_X1_TLS_GD_ADD
 62

	)

3055 
	#R_TILEPRO_IMM8_Y0_TLS_GD_ADD
 63

	)

3056 
	#R_TILEPRO_IMM8_Y1_TLS_GD_ADD
 64

	)

3057 
	#R_TILEPRO_TLS_IE_LOAD
 65

	)

3058 
	#R_TILEPRO_IMM16_X0_TLS_GD
 66

	)

3059 
	#R_TILEPRO_IMM16_X1_TLS_GD
 67

	)

3060 
	#R_TILEPRO_IMM16_X0_TLS_GD_LO
 68

	)

3061 
	#R_TILEPRO_IMM16_X1_TLS_GD_LO
 69

	)

3062 
	#R_TILEPRO_IMM16_X0_TLS_GD_HI
 70

	)

3063 
	#R_TILEPRO_IMM16_X1_TLS_GD_HI
 71

	)

3064 
	#R_TILEPRO_IMM16_X0_TLS_GD_HA
 72

	)

3065 
	#R_TILEPRO_IMM16_X1_TLS_GD_HA
 73

	)

3066 
	#R_TILEPRO_IMM16_X0_TLS_IE
 74

	)

3067 
	#R_TILEPRO_IMM16_X1_TLS_IE
 75

	)

3068 
	#R_TILEPRO_IMM16_X0_TLS_IE_LO
 76

	)

3069 
	#R_TILEPRO_IMM16_X1_TLS_IE_LO
 77

	)

3070 
	#R_TILEPRO_IMM16_X0_TLS_IE_HI
 78

	)

3071 
	#R_TILEPRO_IMM16_X1_TLS_IE_HI
 79

	)

3072 
	#R_TILEPRO_IMM16_X0_TLS_IE_HA
 80

	)

3073 
	#R_TILEPRO_IMM16_X1_TLS_IE_HA
 81

	)

3074 
	#R_TILEPRO_TLS_DTPMOD32
 82

	)

3075 
	#R_TILEPRO_TLS_DTPOFF32
 83

	)

3076 
	#R_TILEPRO_TLS_TPOFF32
 84

	)

3077 
	#R_TILEPRO_IMM16_X0_TLS_LE
 85

	)

3078 
	#R_TILEPRO_IMM16_X1_TLS_LE
 86

	)

3079 
	#R_TILEPRO_IMM16_X0_TLS_LE_LO
 87

	)

3080 
	#R_TILEPRO_IMM16_X1_TLS_LE_LO
 88

	)

3081 
	#R_TILEPRO_IMM16_X0_TLS_LE_HI
 89

	)

3082 
	#R_TILEPRO_IMM16_X1_TLS_LE_HI
 90

	)

3083 
	#R_TILEPRO_IMM16_X0_TLS_LE_HA
 91

	)

3084 
	#R_TILEPRO_IMM16_X1_TLS_LE_HA
 92

	)

3086 
	#R_TILEPRO_GNU_VTINHERIT
 128

	)

3087 
	#R_TILEPRO_GNU_VTENTRY
 129

	)

3089 
	#R_TILEPRO_NUM
 130

	)

3093 
	#R_TILEGX_NONE
 0

	)

3094 
	#R_TILEGX_64
 1

	)

3095 
	#R_TILEGX_32
 2

	)

3096 
	#R_TILEGX_16
 3

	)

3097 
	#R_TILEGX_8
 4

	)

3098 
	#R_TILEGX_64_PCREL
 5

	)

3099 
	#R_TILEGX_32_PCREL
 6

	)

3100 
	#R_TILEGX_16_PCREL
 7

	)

3101 
	#R_TILEGX_8_PCREL
 8

	)

3102 
	#R_TILEGX_HW0
 9

	)

3103 
	#R_TILEGX_HW1
 10

	)

3104 
	#R_TILEGX_HW2
 11

	)

3105 
	#R_TILEGX_HW3
 12

	)

3106 
	#R_TILEGX_HW0_LAST
 13

	)

3107 
	#R_TILEGX_HW1_LAST
 14

	)

3108 
	#R_TILEGX_HW2_LAST
 15

	)

3109 
	#R_TILEGX_COPY
 16

	)

3110 
	#R_TILEGX_GLOB_DAT
 17

	)

3111 
	#R_TILEGX_JMP_SLOT
 18

	)

3112 
	#R_TILEGX_RELATIVE
 19

	)

3113 
	#R_TILEGX_BROFF_X1
 20

	)

3114 
	#R_TILEGX_JUMPOFF_X1
 21

	)

3115 
	#R_TILEGX_JUMPOFF_X1_PLT
 22

	)

3116 
	#R_TILEGX_IMM8_X0
 23

	)

3117 
	#R_TILEGX_IMM8_Y0
 24

	)

3118 
	#R_TILEGX_IMM8_X1
 25

	)

3119 
	#R_TILEGX_IMM8_Y1
 26

	)

3120 
	#R_TILEGX_DEST_IMM8_X1
 27

	)

3121 
	#R_TILEGX_MT_IMM14_X1
 28

	)

3122 
	#R_TILEGX_MF_IMM14_X1
 29

	)

3123 
	#R_TILEGX_MMSTART_X0
 30

	)

3124 
	#R_TILEGX_MMEND_X0
 31

	)

3125 
	#R_TILEGX_SHAMT_X0
 32

	)

3126 
	#R_TILEGX_SHAMT_X1
 33

	)

3127 
	#R_TILEGX_SHAMT_Y0
 34

	)

3128 
	#R_TILEGX_SHAMT_Y1
 35

	)

3129 
	#R_TILEGX_IMM16_X0_HW0
 36

	)

3130 
	#R_TILEGX_IMM16_X1_HW0
 37

	)

3131 
	#R_TILEGX_IMM16_X0_HW1
 38

	)

3132 
	#R_TILEGX_IMM16_X1_HW1
 39

	)

3133 
	#R_TILEGX_IMM16_X0_HW2
 40

	)

3134 
	#R_TILEGX_IMM16_X1_HW2
 41

	)

3135 
	#R_TILEGX_IMM16_X0_HW3
 42

	)

3136 
	#R_TILEGX_IMM16_X1_HW3
 43

	)

3137 
	#R_TILEGX_IMM16_X0_HW0_LAST
 44

	)

3138 
	#R_TILEGX_IMM16_X1_HW0_LAST
 45

	)

3139 
	#R_TILEGX_IMM16_X0_HW1_LAST
 46

	)

3140 
	#R_TILEGX_IMM16_X1_HW1_LAST
 47

	)

3141 
	#R_TILEGX_IMM16_X0_HW2_LAST
 48

	)

3142 
	#R_TILEGX_IMM16_X1_HW2_LAST
 49

	)

3143 
	#R_TILEGX_IMM16_X0_HW0_PCREL
 50

	)

3144 
	#R_TILEGX_IMM16_X1_HW0_PCREL
 51

	)

3145 
	#R_TILEGX_IMM16_X0_HW1_PCREL
 52

	)

3146 
	#R_TILEGX_IMM16_X1_HW1_PCREL
 53

	)

3147 
	#R_TILEGX_IMM16_X0_HW2_PCREL
 54

	)

3148 
	#R_TILEGX_IMM16_X1_HW2_PCREL
 55

	)

3149 
	#R_TILEGX_IMM16_X0_HW3_PCREL
 56

	)

3150 
	#R_TILEGX_IMM16_X1_HW3_PCREL
 57

	)

3151 
	#R_TILEGX_IMM16_X0_HW0_LAST_PCREL
 58

	)

3152 
	#R_TILEGX_IMM16_X1_HW0_LAST_PCREL
 59

	)

3153 
	#R_TILEGX_IMM16_X0_HW1_LAST_PCREL
 60

	)

3154 
	#R_TILEGX_IMM16_X1_HW1_LAST_PCREL
 61

	)

3155 
	#R_TILEGX_IMM16_X0_HW2_LAST_PCREL
 62

	)

3156 
	#R_TILEGX_IMM16_X1_HW2_LAST_PCREL
 63

	)

3157 
	#R_TILEGX_IMM16_X0_HW0_GOT
 64

	)

3158 
	#R_TILEGX_IMM16_X1_HW0_GOT
 65

	)

3159 
	#R_TILEGX_IMM16_X0_HW0_PLT_PCREL
 66

	)

3160 
	#R_TILEGX_IMM16_X1_HW0_PLT_PCREL
 67

	)

3161 
	#R_TILEGX_IMM16_X0_HW1_PLT_PCREL
 68

	)

3162 
	#R_TILEGX_IMM16_X1_HW1_PLT_PCREL
 69

	)

3163 
	#R_TILEGX_IMM16_X0_HW2_PLT_PCREL
 70

	)

3164 
	#R_TILEGX_IMM16_X1_HW2_PLT_PCREL
 71

	)

3165 
	#R_TILEGX_IMM16_X0_HW0_LAST_GOT
 72

	)

3166 
	#R_TILEGX_IMM16_X1_HW0_LAST_GOT
 73

	)

3167 
	#R_TILEGX_IMM16_X0_HW1_LAST_GOT
 74

	)

3168 
	#R_TILEGX_IMM16_X1_HW1_LAST_GOT
 75

	)

3169 
	#R_TILEGX_IMM16_X0_HW3_PLT_PCREL
 76

	)

3170 
	#R_TILEGX_IMM16_X1_HW3_PLT_PCREL
 77

	)

3171 
	#R_TILEGX_IMM16_X0_HW0_TLS_GD
 78

	)

3172 
	#R_TILEGX_IMM16_X1_HW0_TLS_GD
 79

	)

3173 
	#R_TILEGX_IMM16_X0_HW0_TLS_LE
 80

	)

3174 
	#R_TILEGX_IMM16_X1_HW0_TLS_LE
 81

	)

3175 
	#R_TILEGX_IMM16_X0_HW0_LAST_TLS_LE
 82

	)

3176 
	#R_TILEGX_IMM16_X1_HW0_LAST_TLS_LE
 83

	)

3177 
	#R_TILEGX_IMM16_X0_HW1_LAST_TLS_LE
 84

	)

3178 
	#R_TILEGX_IMM16_X1_HW1_LAST_TLS_LE
 85

	)

3179 
	#R_TILEGX_IMM16_X0_HW0_LAST_TLS_GD
 86

	)

3180 
	#R_TILEGX_IMM16_X1_HW0_LAST_TLS_GD
 87

	)

3181 
	#R_TILEGX_IMM16_X0_HW1_LAST_TLS_GD
 88

	)

3182 
	#R_TILEGX_IMM16_X1_HW1_LAST_TLS_GD
 89

	)

3184 
	#R_TILEGX_IMM16_X0_HW0_TLS_IE
 92

	)

3185 
	#R_TILEGX_IMM16_X1_HW0_TLS_IE
 93

	)

3186 
	#R_TILEGX_IMM16_X0_HW0_LAST_PLT_PCREL
 94

	)

3187 
	#R_TILEGX_IMM16_X1_HW0_LAST_PLT_PCREL
 95

	)

3188 
	#R_TILEGX_IMM16_X0_HW1_LAST_PLT_PCREL
 96

	)

3189 
	#R_TILEGX_IMM16_X1_HW1_LAST_PLT_PCREL
 97

	)

3190 
	#R_TILEGX_IMM16_X0_HW2_LAST_PLT_PCREL
 98

	)

3191 
	#R_TILEGX_IMM16_X1_HW2_LAST_PLT_PCREL
 99

	)

3192 
	#R_TILEGX_IMM16_X0_HW0_LAST_TLS_IE
 100

	)

3193 
	#R_TILEGX_IMM16_X1_HW0_LAST_TLS_IE
 101

	)

3194 
	#R_TILEGX_IMM16_X0_HW1_LAST_TLS_IE
 102

	)

3195 
	#R_TILEGX_IMM16_X1_HW1_LAST_TLS_IE
 103

	)

3197 
	#R_TILEGX_TLS_DTPMOD64
 106

	)

3198 
	#R_TILEGX_TLS_DTPOFF64
 107

	)

3199 
	#R_TILEGX_TLS_TPOFF64
 108

	)

3200 
	#R_TILEGX_TLS_DTPMOD32
 109

	)

3201 
	#R_TILEGX_TLS_DTPOFF32
 110

	)

3202 
	#R_TILEGX_TLS_TPOFF32
 111

	)

3203 
	#R_TILEGX_TLS_GD_CALL
 112

	)

3204 
	#R_TILEGX_IMM8_X0_TLS_GD_ADD
 113

	)

3205 
	#R_TILEGX_IMM8_X1_TLS_GD_ADD
 114

	)

3206 
	#R_TILEGX_IMM8_Y0_TLS_GD_ADD
 115

	)

3207 
	#R_TILEGX_IMM8_Y1_TLS_GD_ADD
 116

	)

3208 
	#R_TILEGX_TLS_IE_LOAD
 117

	)

3209 
	#R_TILEGX_IMM8_X0_TLS_ADD
 118

	)

3210 
	#R_TILEGX_IMM8_X1_TLS_ADD
 119

	)

3211 
	#R_TILEGX_IMM8_Y0_TLS_ADD
 120

	)

3212 
	#R_TILEGX_IMM8_Y1_TLS_ADD
 121

	)

3214 
	#R_TILEGX_GNU_VTINHERIT
 128

	)

3215 
	#R_TILEGX_GNU_VTENTRY
 129

	)

3217 
	#R_TILEGX_NUM
 130

	)

3220 
	g__END_DECLS


	@/usr/include/err.h

19 #i‚def 
_ERR_H


20 
	#_ERR_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed___va_li°


	)

25 
	~<°d¨g.h
>

26 #i‚def 
__GNUC_VA_LIST


27 
	#__gnuc_va_li°
 
__±r_t


	)

30 
__BEGIN_DECLS


34 
	$w¨n
 (c⁄° *
__f‹m©
, ...)

35 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 1, 2)));

36 
	$vw¨n
 (c⁄° *
__f‹m©
, 
__gnuc_va_li°
)

37 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 1, 0)));

40 
	$w¨nx
 (c⁄° *
__f‹m©
, ...)

41 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 1, 2)));

42 
	$vw¨nx
 (c⁄° *
__f‹m©
, 
__gnuc_va_li°
)

43 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 1, 0)));

46 
	$îr
 (
__°©us
, c⁄° *
__f‹m©
, ...)

47 
	`__©åibuã__
 ((
__n‹ëu∫__
, 
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

48 
	$vîr
 (
__°©us
, c⁄° *
__f‹m©
, 
__gnuc_va_li°
)

49 
	`__©åibuã__
 ((
__n‹ëu∫__
, 
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

50 
	$îrx
 (
__°©us
, c⁄° *
__f‹m©
, ...)

51 
	`__©åibuã__
 ((
__n‹ëu∫__
, 
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

52 
	$vîrx
 (
__°©us
, c⁄° *, 
__gnuc_va_li°
)

53 
	`__©åibuã__
 ((
__n‹ëu∫__
, 
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

55 
__END_DECLS


	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


26 #i‚def 
__√ed_Em©h


27 
	#_ERRNO_H
 1

	)

28 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


35 
	~<bôs/î∫o.h
>

36 #unde‡
__√ed_Em©h


38 #ifdef 
_ERRNO_H


45 #i‚def 
î∫o


46 
î∫o
;

49 #ifde‡
__USE_GNU


54 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

58 
	g__END_DECLS


66 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


67 #i‚de‡
__îr‹_t_deföed


68 
	tîr‹_t
;

69 
	#__îr‹_t_deföed
 1

	)

71 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

40 #i‚de‡
__mode_t_deföed


41 
__mode_t
 
	tmode_t
;

42 
	#__mode_t_deföed


	)

45 #i‚de‡
__off_t_deföed


46 #i‚de‡
__USE_FILE_OFFSET64


47 
__off_t
 
	toff_t
;

49 
__off64_t
 
	toff_t
;

51 
	#__off_t_deföed


	)

54 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


55 
__off64_t
 
	toff64_t
;

56 
	#__off64_t_deföed


	)

59 #i‚de‡
__pid_t_deföed


60 
__pid_t
 
	tpid_t
;

61 
	#__pid_t_deföed


	)

65 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


66 
	#__√ed_time•ec


	)

67 
	~<time.h
>

68 
	~<bôs/°©.h
>

70 
	#S_IFMT
 
__S_IFMT


	)

71 
	#S_IFDIR
 
__S_IFDIR


	)

72 
	#S_IFCHR
 
__S_IFCHR


	)

73 
	#S_IFBLK
 
__S_IFBLK


	)

74 
	#S_IFREG
 
__S_IFREG


	)

75 #ifde‡
__S_IFIFO


76 
	#S_IFIFO
 
__S_IFIFO


	)

78 #ifde‡
__S_IFLNK


79 
	#S_IFLNK
 
__S_IFLNK


	)

81 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


82 
	#S_IFSOCK
 
__S_IFSOCK


	)

87 
	#S_ISUID
 
__S_ISUID


	)

88 
	#S_ISGID
 
__S_ISGID


	)

90 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


92 
	#S_ISVTX
 
__S_ISVTX


	)

95 
	#S_IRUSR
 
__S_IREAD


	)

96 
	#S_IWUSR
 
__S_IWRITE


	)

97 
	#S_IXUSR
 
__S_IEXEC


	)

99 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

101 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

102 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

103 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

105 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

107 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

108 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

109 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

111 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

114 #ifdef 
__USE_MISC


115 #i‚de‡
R_OK


118 
	#R_OK
 4

	)

119 
	#W_OK
 2

	)

120 
	#X_OK
 1

	)

121 
	#F_OK
 0

	)

126 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


127 
	#SEEK_SET
 0

	)

128 
	#SEEK_CUR
 1

	)

129 
	#SEEK_END
 2

	)

138 #ifde‡
__USE_ATFILE


139 
	#AT_FDCWD
 -100

	)

142 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

143 
	#AT_REMOVEDIR
 0x200

	)

145 
	#AT_SYMLINK_FOLLOW
 0x400

	)

146 #ifde‡
__USE_GNU


147 
	#AT_NO_AUTOMOUNT
 0x800

	)

149 
	#AT_EMPTY_PATH
 0x1000

	)

151 
	#AT_EACCESS
 0x200

	)

160 
f˙é
 (
__fd
, 
__cmd
, ...);

168 #i‚de‡
__USE_FILE_OFFSET64


169 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

171 #ifde‡
__REDIRECT


172 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

173 
	`__n⁄nuŒ
 ((1));

175 
	#›í
 
›í64


	)

178 #ifde‡
__USE_LARGEFILE64


179 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

182 #ifde‡
__USE_ATFILE


192 #i‚de‡
__USE_FILE_OFFSET64


193 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

194 
	`__n⁄nuŒ
 ((2));

196 #ifde‡
__REDIRECT


197 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

198 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

200 
	#›í©
 
›í©64


	)

203 #ifde‡
__USE_LARGEFILE64


204 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

205 
	`__n⁄nuŒ
 ((2));

214 #i‚de‡
__USE_FILE_OFFSET64


215 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

217 #ifde‡
__REDIRECT


218 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

219 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

221 
	#¸ót
 
¸ót64


	)

224 #ifde‡
__USE_LARGEFILE64


225 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

228 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

229 && !
deföed
 
__USE_POSIX
))

238 
	#F_ULOCK
 0

	)

239 
	#F_LOCK
 1

	)

240 
	#F_TLOCK
 2

	)

241 
	#F_TEST
 3

	)

243 #i‚de‡
__USE_FILE_OFFSET64


244 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

246 #ifde‡
__REDIRECT


247 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

249 
	#lockf
 
lockf64


	)

252 #ifde‡
__USE_LARGEFILE64


253 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

257 #ifde‡
__USE_XOPEN2K


260 #i‚de‡
__USE_FILE_OFFSET64


261 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

262 
__advi£
Ë
__THROW
;

264 #ifde‡
__REDIRECT_NTH


265 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

266 
__off64_t
 
__Àn
, 
__advi£
),

267 
posix_Ádvi£64
);

269 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

272 #ifde‡
__USE_LARGEFILE64


273 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

274 
__advi£
Ë
__THROW
;

282 #i‚de‡
__USE_FILE_OFFSET64


283 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

285 #ifde‡
__REDIRECT


286 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

287 
__off64_t
 
__Àn
),

288 
posix_ÁŒoˇã64
);

290 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

293 #ifde‡
__USE_LARGEFILE64


294 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

300 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

301 && 
deföed
 
__va_¨g_∑ck_Àn


302 
	~<bôs/f˙é2.h
>

305 
__END_DECLS


	@/usr/include/getopt.h

19 #i‚de‡
_GETOPT_H


21 #i‚de‡
__√ed_gë›t


22 
	#_GETOPT_H
 1

	)

32 #i‡!
deföed
 
__GNU_LIBRARY__


33 
	~<˘y≥.h
>

36 #i‚de‡
__THROW


37 #i‚de‡
__GNUC_PREREQ


38 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

40 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

41 
	#__THROW
 
	`throw
 ()

	)

43 
	#__THROW


	)

47 #ifdef 
__˝lu•lus


57 *
›èrg
;

71 
›töd
;

76 
›ãº
;

80 
›t›t
;

82 #i‚de‡
__√ed_gë›t


104 
	s›ti⁄


106 c⁄° *
	g«me
;

109 
	ghas_¨g
;

110 *
	gÊag
;

111 
	gvÆ
;

116 
	#no_¨gumít
 0

	)

117 
	#ªquúed_¨gumít
 1

	)

118 
	#›ti⁄Æ_¨gumít
 2

	)

146 #ifde‡
__GNU_LIBRARY__


150 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

151 
__THROW
;

153 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

154 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


158 #ifde‡
__REDIRECT


159 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

160 c⁄° *
__sh‹t›ts
),

161 
__posix_gë›t
);

163 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

164 c⁄° *
__sh‹t›ts
Ë
__THROW
;

165 
	#gë›t
 
__posix_gë›t


	)

169 
gë›t
 ();

172 #i‚de‡
__√ed_gë›t


173 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

174 c⁄° *
__sh‹t›ts
,

175 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

176 
__THROW
;

177 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

178 c⁄° *
__sh‹t›ts
,

179 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

180 
__THROW
;

184 #ifdef 
__˝lu•lus


189 #unde‡
__√ed_gë›t


	@/usr/include/ieee754.h

18 #i‚de‡
_IEEE754_H


20 
	#_IEEE754_H
 1

	)

21 
	~<„©uªs.h
>

23 
	~<ídün.h
>

25 
__BEGIN_DECLS


27 
	uõì754_Êﬂt


29 
	mf
;

34 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


35 
	m√g©ive
:1;

36 
	mexp⁄ít
:8;

37 
	mm™tisß
:23;

39 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


40 
	mm™tisß
:23;

41 
	mexp⁄ít
:8;

42 
	m√g©ive
:1;

44 } 
	mõì
;

49 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


50 
	m√g©ive
:1;

51 
	mexp⁄ít
:8;

52 
	mquõt_«n
:1;

53 
	mm™tisß
:22;

55 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


56 
	mm™tisß
:22;

57 
	mquõt_«n
:1;

58 
	mexp⁄ít
:8;

59 
	m√g©ive
:1;

61 } 
	mõì_«n
;

64 
	#IEEE754_FLOAT_BIAS
 0x7‡

	)

67 
	uõì754_doubÀ


69 
	md
;

74 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


75 
	m√g©ive
:1;

76 
	mexp⁄ít
:11;

78 
	mm™tisß0
:20;

79 
	mm™tisß1
:32;

81 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


82 #if 
__FLOAT_WORD_ORDER
 =
__BIG_ENDIAN


83 
	mm™tisß0
:20;

84 
	mexp⁄ít
:11;

85 
	m√g©ive
:1;

86 
	mm™tisß1
:32;

89 
	mm™tisß1
:32;

90 
	mm™tisß0
:20;

91 
	mexp⁄ít
:11;

92 
	m√g©ive
:1;

95 } 
	mõì
;

100 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


101 
	m√g©ive
:1;

102 
	mexp⁄ít
:11;

103 
	mquõt_«n
:1;

105 
	mm™tisß0
:19;

106 
	mm™tisß1
:32;

108 #if 
__FLOAT_WORD_ORDER
 =
__BIG_ENDIAN


109 
	mm™tisß0
:19;

110 
	mquõt_«n
:1;

111 
	mexp⁄ít
:11;

112 
	m√g©ive
:1;

113 
	mm™tisß1
:32;

116 
	mm™tisß1
:32;

117 
	mm™tisß0
:19;

118 
	mquõt_«n
:1;

119 
	mexp⁄ít
:11;

120 
	m√g©ive
:1;

123 } 
	mõì_«n
;

126 
	#IEEE754_DOUBLE_BIAS
 0x3f‡

	)

129 
	uõì854_l⁄g_doubÀ


131 
	md
;

136 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


137 
	m√g©ive
:1;

138 
	mexp⁄ít
:15;

139 
	mem±y
:16;

140 
	mm™tisß0
:32;

141 
	mm™tisß1
:32;

143 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


144 #if 
__FLOAT_WORD_ORDER
 =
__BIG_ENDIAN


145 
	mexp⁄ít
:15;

146 
	m√g©ive
:1;

147 
	mem±y
:16;

148 
	mm™tisß0
:32;

149 
	mm™tisß1
:32;

151 
	mm™tisß1
:32;

152 
	mm™tisß0
:32;

153 
	mexp⁄ít
:15;

154 
	m√g©ive
:1;

155 
	mem±y
:16;

158 } 
	mõì
;

163 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


164 
	m√g©ive
:1;

165 
	mexp⁄ít
:15;

166 
	mem±y
:16;

167 
	m⁄e
:1;

168 
	mquõt_«n
:1;

169 
	mm™tisß0
:30;

170 
	mm™tisß1
:32;

172 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


173 #if 
__FLOAT_WORD_ORDER
 =
__BIG_ENDIAN


174 
	mexp⁄ít
:15;

175 
	m√g©ive
:1;

176 
	mem±y
:16;

177 
	mm™tisß0
:30;

178 
	mquõt_«n
:1;

179 
	m⁄e
:1;

180 
	mm™tisß1
:32;

182 
	mm™tisß1
:32;

183 
	mm™tisß0
:30;

184 
	mquõt_«n
:1;

185 
	m⁄e
:1;

186 
	mexp⁄ít
:15;

187 
	m√g©ive
:1;

188 
	mem±y
:16;

191 } 
	mõì_«n
;

194 
	#IEEE854_LONG_DOUBLE_BIAS
 0x3fff

	)

196 
	g__END_DECLS


	@/usr/include/inttypes.h

22 #i‚de‡
_INTTYPES_H


23 
	#_INTTYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<°döt.h
>

30 #i‚de‡
____gwch¨_t_deföed


31 #ifde‡
__˝lu•lus


32 
	#__gwch¨_t
 
wch¨_t


	)

33 #ñi‡
deföed
 
__WCHAR_TYPE__


34 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

36 
	#__√ed_wch¨_t


	)

37 
	~<°ddef.h
>

38 
wch¨_t
 
	t__gwch¨_t
;

40 
	#____gwch¨_t_deföed
 1

	)

43 #i‡
__WORDSIZE
 == 64

44 
	#__PRI64_PREFIX
 "l"

	)

45 
	#__PRIPTR_PREFIX
 "l"

	)

47 
	#__PRI64_PREFIX
 "Œ"

	)

48 
	#__PRIPTR_PREFIX


	)

54 
	#PRId8
 "d"

	)

55 
	#PRId16
 "d"

	)

56 
	#PRId32
 "d"

	)

57 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

59 
	#PRIdLEAST8
 "d"

	)

60 
	#PRIdLEAST16
 "d"

	)

61 
	#PRIdLEAST32
 "d"

	)

62 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

64 
	#PRIdFAST8
 "d"

	)

65 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

66 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

67 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIi8
 "i"

	)

71 
	#PRIi16
 "i"

	)

72 
	#PRIi32
 "i"

	)

73 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

75 
	#PRIiLEAST8
 "i"

	)

76 
	#PRIiLEAST16
 "i"

	)

77 
	#PRIiLEAST32
 "i"

	)

78 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

80 
	#PRIiFAST8
 "i"

	)

81 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

82 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

83 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIo8
 "o"

	)

87 
	#PRIo16
 "o"

	)

88 
	#PRIo32
 "o"

	)

89 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

91 
	#PRIoLEAST8
 "o"

	)

92 
	#PRIoLEAST16
 "o"

	)

93 
	#PRIoLEAST32
 "o"

	)

94 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

96 
	#PRIoFAST8
 "o"

	)

97 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

98 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

99 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIu8
 "u"

	)

103 
	#PRIu16
 "u"

	)

104 
	#PRIu32
 "u"

	)

105 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

107 
	#PRIuLEAST8
 "u"

	)

108 
	#PRIuLEAST16
 "u"

	)

109 
	#PRIuLEAST32
 "u"

	)

110 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

112 
	#PRIuFAST8
 "u"

	)

113 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

114 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

115 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIx8
 "x"

	)

119 
	#PRIx16
 "x"

	)

120 
	#PRIx32
 "x"

	)

121 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

123 
	#PRIxLEAST8
 "x"

	)

124 
	#PRIxLEAST16
 "x"

	)

125 
	#PRIxLEAST32
 "x"

	)

126 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

128 
	#PRIxFAST8
 "x"

	)

129 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

130 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

131 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIX8
 "X"

	)

135 
	#PRIX16
 "X"

	)

136 
	#PRIX32
 "X"

	)

137 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

139 
	#PRIXLEAST8
 "X"

	)

140 
	#PRIXLEAST16
 "X"

	)

141 
	#PRIXLEAST32
 "X"

	)

142 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

144 
	#PRIXFAST8
 "X"

	)

145 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

146 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

147 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

151 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

152 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

153 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

154 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

155 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

156 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

160 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

161 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

162 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

163 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

164 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

165 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

171 
	#SCNd8
 "hhd"

	)

172 
	#SCNd16
 "hd"

	)

173 
	#SCNd32
 "d"

	)

174 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

176 
	#SCNdLEAST8
 "hhd"

	)

177 
	#SCNdLEAST16
 "hd"

	)

178 
	#SCNdLEAST32
 "d"

	)

179 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

181 
	#SCNdFAST8
 "hhd"

	)

182 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

183 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

184 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNi8
 "hhi"

	)

188 
	#SCNi16
 "hi"

	)

189 
	#SCNi32
 "i"

	)

190 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

192 
	#SCNiLEAST8
 "hhi"

	)

193 
	#SCNiLEAST16
 "hi"

	)

194 
	#SCNiLEAST32
 "i"

	)

195 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

197 
	#SCNiFAST8
 "hhi"

	)

198 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

199 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

200 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNu8
 "hhu"

	)

204 
	#SCNu16
 "hu"

	)

205 
	#SCNu32
 "u"

	)

206 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

208 
	#SCNuLEAST8
 "hhu"

	)

209 
	#SCNuLEAST16
 "hu"

	)

210 
	#SCNuLEAST32
 "u"

	)

211 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

213 
	#SCNuFAST8
 "hhu"

	)

214 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

215 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

216 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNo8
 "hho"

	)

220 
	#SCNo16
 "ho"

	)

221 
	#SCNo32
 "o"

	)

222 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

224 
	#SCNoLEAST8
 "hho"

	)

225 
	#SCNoLEAST16
 "ho"

	)

226 
	#SCNoLEAST32
 "o"

	)

227 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

229 
	#SCNoFAST8
 "hho"

	)

230 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

231 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

232 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNx8
 "hhx"

	)

236 
	#SCNx16
 "hx"

	)

237 
	#SCNx32
 "x"

	)

238 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

240 
	#SCNxLEAST8
 "hhx"

	)

241 
	#SCNxLEAST16
 "hx"

	)

242 
	#SCNxLEAST32
 "x"

	)

243 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

245 
	#SCNxFAST8
 "hhx"

	)

246 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

247 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

248 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

252 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

253 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

254 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

255 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

256 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

259 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

260 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

261 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

262 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

263 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

266 
	g__BEGIN_DECLS


268 #i‡
__WORDSIZE
 == 64

273 
	mquŸ
;

274 
	mªm
;

275 } 
	timaxdiv_t
;

282 
__exãnsi⁄__
 
	mquŸ
;

283 
__exãnsi⁄__
 
	mªm
;

284 } 
	timaxdiv_t
;

290 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

293 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

294 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

297 
ötmax_t
 
	$°πoimax
 (c⁄° *
__ª°ri˘
 
__≈å
,

298 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

301 
uötmax_t
 
	$°πoumax
 (c⁄° *
__ª°ri˘
 
__≈å
,

302 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

305 
ötmax_t
 
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

306 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

307 
__THROW
;

310 
uötmax_t
 
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

311 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

312 
__THROW
;

314 #ifde‡
__USE_EXTERN_INLINES


316 #i‡
__WORDSIZE
 == 64

318 
	$__°πﬁ_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

319 **
__ª°ri˘
 
__íd±r
,

320 
__ba£
, 
__group
)

321 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

323 
__exã∫_ölöe
 
ötmax_t


324 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

325 
ba£
))

327  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

328 
	}
}

330 
	$__°πoul_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 ** 
__ª°ri˘
 
__íd±r
,

332 
__ba£
, 
__group
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

335 
__exã∫_ölöe
 
uötmax_t


336 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

337 
ba£
))

339  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

340 
	}
}

342 
	$__wc°ﬁ_öã∫Æ
 (c⁄° 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

343 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

344 
__ba£
, 
__group
)

345 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

347 
__exã∫_ölöe
 
ötmax_t


348 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

349 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

351  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

352 
	}
}

354 
	$__wc°oul_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

355 
__ª°ri˘
 
__≈å
,

356 
__gwch¨_t
 **

357 
__ª°ri˘
 
__íd±r
,

358 
__ba£
, 
__group
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

361 
__exã∫_ölöe
 
uötmax_t


362 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

363 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

365  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

366 
	}
}

370 
__exãnsi⁄__


371 
	$__°πﬁl_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

372 **
__ª°ri˘
 
__íd±r
,

373 
__ba£
, 
__group
)

374 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

376 
__exã∫_ölöe
 
ötmax_t


377 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

378 
ba£
))

380  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

381 
	}
}

383 
__exãnsi⁄__


384 
	$__°πouŒ_öã∫Æ
 (const *

385 
__ª°ri˘
 
__≈å
,

387 
__ª°ri˘
 
__íd±r
,

388 
__ba£
,

389 
__group
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

392 
__exã∫_ölöe
 
uötmax_t


393 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

394 
ba£
))

396  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

397 
	}
}

399 
__exãnsi⁄__


400 
	$__wc°ﬁl_öã∫Æ
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

401 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

402 
__ba£
, 
__group
)

403 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

405 
__exã∫_ölöe
 
ötmax_t


406 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

407 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

409  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

410 
	}
}

413 
__exãnsi⁄__


414 
	$__wc°ouŒ_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

415 
__ª°ri˘
 
__≈å
,

416 
__gwch¨_t
 **

417 
__ª°ri˘
 
__íd±r
,

418 
__ba£
,

419 
__group
)

420 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

422 
__exã∫_ölöe
 
uötmax_t


423 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

424 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

426  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

427 
	}
}

432 
	g__END_DECLS


	@/usr/include/libaio.h

23 #i‚de‡
__LIBAIO_H


24 
	#__LIBAIO_H


	)

26 #ifde‡
__˝lu•lus


30 
	~<sys/ty≥s.h
>

31 
	~<°rög.h
>

33 
time•ec
;

34 
sockaddr
;

35 
iovec
;

37 
io_c⁄ãxt
 *
	tio_c⁄ãxt_t
;

39 
	eio_iocb_cmd
 {

40 
IO_CMD_PREAD
 = 0,

41 
IO_CMD_PWRITE
 = 1,

43 
IO_CMD_FSYNC
 = 2,

44 
IO_CMD_FDSYNC
 = 3,

46 
IO_CMD_POLL
 = 5,

47 
IO_CMD_NOOP
 = 6,

48 
IO_CMD_PREADV
 = 7,

49 
IO_CMD_PWRITEV
 = 8,

50 } 
	tio_iocb_cmd_t
;

52 #i‡
deföed
(
__i386__
)

53 
	#PADDED
(
x
, 
y
Ëx; 
	)
y

54 
	#PADDED±r
(
x
, 
y
Ëx; 
	)
y

55 
	#PADDEDul
(
x
, 
y
Ëx; 
	)
y

56 #ñi‡
deföed
(
__ü64__
Ë|| deföed(
__x86_64__
Ë|| deföed(
__Æpha__
)

57 
	#PADDED
(
x
, 
y
Ëx, 
	)
y

58 
	#PADDED±r
(
x
, 
y
Ë
	)
x

59 
	#PADDEDul
(
x
, 
y
Ë
	)
x

60 #ñi‡
deföed
(
__powîpc64__
)

61 
	#PADDED
(
x
, 
y
Ëy; 
	)
x

62 
	#PADDED±r
(
x
,
y
Ë
	)
x

63 
	#PADDEDul
(
x
, 
y
Ë
	)
x

64 #ñi‡
deföed
(
__PPC__
)

65 
	#PADDED
(
x
, 
y
Ëy; 
	)
x

66 
	#PADDED±r
(
x
, 
y
Ëy; 
	)
x

67 
	#PADDEDul
(
x
, 
y
Ëy; 
	)
x

68 #ñi‡
deföed
(
__s390x__
)

69 
	#PADDED
(
x
, 
y
Ëy; 
	)
x

70 
	#PADDED±r
(
x
,
y
Ë
	)
x

71 
	#PADDEDul
(
x
, 
y
Ë
	)
x

72 #ñi‡
deföed
(
__s390__
)

73 
	#PADDED
(
x
, 
y
Ëy; 
	)
x

74 
	#PADDED±r
(
x
, 
y
Ëy; 
	)
x

75 
	#PADDEDul
(
x
, 
y
Ëy; 
	)
x

76 #ñi‡
deföed
(
__¨m__
)

77 #i‡
deföed
 (
__ARMEB__
)

78 
	#PADDED
(
x
, 
y
Ëy; 
	)
x

79 
	#PADDED±r
(
x
, 
y
Ëy; 
	)
x

80 
	#PADDEDul
(
x
, 
y
Ëy; 
	)
x

82 
	#PADDED
(
x
, 
y
Ëx; 
	)
y

83 
	#PADDED±r
(
x
, 
y
Ëx; 
	)
y

84 
	#PADDEDul
(
x
, 
y
Ëx; 
	)
y

86 #ñi‡
deföed
(
__m68k__
)

87 
	#PADDED
(
x
, 
y
Ëy; 
	)
x

88 
	#PADDED±r
(
x
, 
y
Ëy; 
	)
x

89 
	#PADDEDul
(
x
, 
y
Ëy; 
	)
x

90 #ñi‡
deföed
(
__•¨c__
)

91 
	#PADDED
(
x
, 
y
Ëy; 
	)
x

92 
	#PADDED±r
(
x
, 
y
Ëy; 
	)
x

93 
	#PADDEDul
(
x
, 
y
Ëy; 
	)
x

94 #ñi‡
deföed
(
__hµa__
)

95 
	#PADDED
(
x
, 
y
Ëy; 
	)
x

96 
	#PADDED±r
(
x
, 
y
Ëy; 
	)
x

97 
	#PADDEDul
(
x
, 
y
Ëy; 
	)
x

98 #ñi‡
deföed
(
__mùs__
)

99 #i‡
deföed
 (
__MIPSEB__
)

100 
	#PADDED
(
x
, 
y
Ëy; 
	)
x

101 
	#PADDED±r
(
x
, 
y
Ëy; 
	)
x

102 
	#PADDEDul
(
x
, 
y
Ëy; 
	)
x

103 #ñi‡
deföed
(
__MIPSEL__
)

104 
	#PADDED
(
x
, 
y
Ëx; 
	)
y

105 
	#PADDED±r
(
x
, 
y
Ëx; 
	)
y

106 
	#PADDEDul
(
x
, 
y
Ëx; 
	)
y

110 #ñi‡
deföed
(
__sh__
)

111 #i‡
deföed
 (
__BIG_ENDIAN__
)

112 
	#PADDED
(
x
, 
y
Ëy; 
	)
x

113 
	#PADDED±r
(
x
, 
y
Ëy; 
	)
x

114 
	#PADDEDul
(
x
, 
y
Ëy; 
	)
x

115 #ñi‡
deföed
(
__LITTLE_ENDIAN__
)

116 
	#PADDED
(
x
, 
y
Ëx; 
	)
y

117 
	#PADDED±r
(
x
, 
y
Ëx; 
	)
y

118 
	#PADDEDul
(
x
, 
y
Ëx; 
	)
y

120 #ñi‡
deföed
(
__Ørch64__
)

121 #i‡
deföed
 (
__AARCH64EB__
)

122 
	#PADDED
(
x
, 
y
Ëy; 
	)
x

123 
	#PADDED±r
(
x
,
y
Ë
	)
x

124 
	#PADDEDul
(
x
, 
y
Ë
	)
x

125 #ñi‡
deföed
(
__AARCH64EL__
)

126 
	#PADDED
(
x
, 
y
Ëx, 
	)
y

127 
	#PADDED±r
(
x
, 
y
Ë
	)
x

128 
	#PADDEDul
(
x
, 
y
Ë
	)
x

131 #îr‹ 
ídün
?

134 
	sio_iocb_pﬁl
 {

135 
PADDED
(
evíts
, 
__∑d1
);

138 
	sio_iocb_sockaddr
 {

139 
sockaddr
 *
addr
;

140 
Àn
;

143 
	sio_iocb_comm⁄
 {

144 
PADDED±r
(*
buf
, 
__∑d1
);

145 
PADDEDul
(
nbyãs
, 
__∑d2
);

146 
off£t
;

147 
__∑d3
;

148 
Êags
;

149 
ªsfd
;

152 
	sio_iocb_ve˘‹
 {

153 c⁄° 
iovec
 *
vec
;

154 
ƒ
;

155 
off£t
;

158 
	siocb
 {

159 
PADDED±r
(*
d©a
, 
__∑d1
);

160 
PADDED
(
key
, 
__∑d2
);

162 
aio_lio_›code
;

163 
aio_ªq¥io
;

164 
aio_fûdes
;

167 
io_iocb_comm⁄
 
c
;

168 
io_iocb_ve˘‹
 
v
;

169 
io_iocb_pﬁl
 
pﬁl
;

170 
io_iocb_sockaddr
 
ßddr
;

171 } 
u
;

174 
	sio_evít
 {

175 
PADDED±r
(*
d©a
, 
__∑d1
);

176 
PADDED±r
(
iocb
 *
obj
, 
__∑d2
);

177 
PADDEDul
(
ªs
, 
__∑d3
);

178 
PADDEDul
(
ªs2
, 
__∑d4
);

181 #unde‡
PADDED


182 #unde‡
PADDED±r


183 #unde‡
PADDEDul


185 (*
io_ˇŒback_t
)(
	tio_c⁄ãxt_t
 
	t˘x
, 
	tiocb
 *iocb, 
	tªs
, 
	tªs2
);

188 
io_queue_öô
(
maxevíts
, 
io_c⁄ãxt_t
 *
˘xp
);

190 
io_queue_ªÀa£
(
io_c⁄ãxt_t
 
˘x
);

192 
io_queue_run
(
io_c⁄ãxt_t
 
˘x
);

195 
io_£tup
(
maxevíts
, 
io_c⁄ãxt_t
 *
˘xp
);

196 
io_de°roy
(
io_c⁄ãxt_t
 
˘x
);

197 
io_submô
(
io_c⁄ãxt_t
 
˘x
, 
ƒ
, 
iocb
 *
ios
[]);

198 
io_ˇn˚l
(
io_c⁄ãxt_t
 
˘x
, 
iocb
 *iocb, 
io_evít
 *
evt
);

199 
io_gëevíts
(
io_c⁄ãxt_t
 
˘x_id
, 
mö_ƒ
, 
ƒ
, 
io_evít
 *
evíts
, 
time•ec
 *
timeout
);

202 
ölöe
 
io_£t_ˇŒback
(
iocb
 *iocb, 
io_ˇŒback_t
 
cb
)

204 
	giocb
->
	gd©a
 = (*)
cb
;

207 
ölöe
 
io_¥ï_¥ód
(
iocb
 *iocb, 
fd
, *
buf
, 
size_t
 
cou¡
, 
off£t
)

209 
mem£t
(
iocb
, 0, (*iocb));

210 
	giocb
->
	gaio_fûdes
 = 
fd
;

211 
	giocb
->
	gaio_lio_›code
 = 
IO_CMD_PREAD
;

212 
	giocb
->
	gaio_ªq¥io
 = 0;

213 
	giocb
->
	gu
.
	gc
.
	gbuf
 = 
buf
;

214 
	giocb
->
	gu
.
	gc
.
	gnbyãs
 = 
cou¡
;

215 
	giocb
->
	gu
.
	gc
.
	goff£t
 = 
off£t
;

218 
ölöe
 
io_¥ï_pwrôe
(
iocb
 *iocb, 
fd
, *
buf
, 
size_t
 
cou¡
, 
off£t
)

220 
mem£t
(
iocb
, 0, (*iocb));

221 
	giocb
->
	gaio_fûdes
 = 
fd
;

222 
	giocb
->
	gaio_lio_›code
 = 
IO_CMD_PWRITE
;

223 
	giocb
->
	gaio_ªq¥io
 = 0;

224 
	giocb
->
	gu
.
	gc
.
	gbuf
 = 
buf
;

225 
	giocb
->
	gu
.
	gc
.
	gnbyãs
 = 
cou¡
;

226 
	giocb
->
	gu
.
	gc
.
	goff£t
 = 
off£t
;

229 
ölöe
 
io_¥ï_¥ódv
(
iocb
 *iocb, 
fd
, c⁄° 
iovec
 *
iov
, 
iov˙t
, 
off£t
)

231 
mem£t
(
iocb
, 0, (*iocb));

232 
	giocb
->
	gaio_fûdes
 = 
fd
;

233 
	giocb
->
	gaio_lio_›code
 = 
IO_CMD_PREADV
;

234 
	giocb
->
	gaio_ªq¥io
 = 0;

235 
	giocb
->
	gu
.
	gc
.
	gbuf
 = (*)
iov
;

236 
	giocb
->
	gu
.
	gc
.
	gnbyãs
 = 
iov˙t
;

237 
	giocb
->
	gu
.
	gc
.
	goff£t
 = 
off£t
;

240 
ölöe
 
io_¥ï_pwrôev
(
iocb
 *iocb, 
fd
, c⁄° 
iovec
 *
iov
, 
iov˙t
, 
off£t
)

242 
mem£t
(
iocb
, 0, (*iocb));

243 
	giocb
->
	gaio_fûdes
 = 
fd
;

244 
	giocb
->
	gaio_lio_›code
 = 
IO_CMD_PWRITEV
;

245 
	giocb
->
	gaio_ªq¥io
 = 0;

246 
	giocb
->
	gu
.
	gc
.
	gbuf
 = (*)
iov
;

247 
	giocb
->
	gu
.
	gc
.
	gnbyãs
 = 
iov˙t
;

248 
	giocb
->
	gu
.
	gc
.
	goff£t
 = 
off£t
;

253 
ölöe
 
io_¥ï_pﬁl
(
iocb
 *iocb, 
fd
, 
evíts
)

255 
mem£t
(
iocb
, 0, (*iocb));

256 
	giocb
->
	gaio_fûdes
 = 
fd
;

257 
	giocb
->
	gaio_lio_›code
 = 
IO_CMD_POLL
;

258 
	giocb
->
	gaio_ªq¥io
 = 0;

259 
	giocb
->
	gu
.
	gpﬁl
.
	gevíts
 = 
evíts
;

262 
ölöe
 
io_pﬁl
(
io_c⁄ãxt_t
 
˘x
, 
iocb
 *iocb, 
io_ˇŒback_t
 
cb
, 
fd
, 
evíts
)

264 
io_¥ï_pﬁl
(
iocb
, 
fd
, 
evíts
);

265 
io_£t_ˇŒback
(
iocb
, 
cb
);

266  
io_submô
(
˘x
, 1, &
iocb
);

269 
ölöe
 
io_¥ï_fsync
(
iocb
 *iocb, 
fd
)

271 
mem£t
(
iocb
, 0, (*iocb));

272 
	giocb
->
	gaio_fûdes
 = 
fd
;

273 
	giocb
->
	gaio_lio_›code
 = 
IO_CMD_FSYNC
;

274 
	giocb
->
	gaio_ªq¥io
 = 0;

277 
ölöe
 
io_fsync
(
io_c⁄ãxt_t
 
˘x
, 
iocb
 *iocb, 
io_ˇŒback_t
 
cb
, 
fd
)

279 
io_¥ï_fsync
(
iocb
, 
fd
);

280 
io_£t_ˇŒback
(
iocb
, 
cb
);

281  
io_submô
(
˘x
, 1, &
iocb
);

284 
ölöe
 
io_¥ï_fdsync
(
iocb
 *iocb, 
fd
)

286 
mem£t
(
iocb
, 0, (*iocb));

287 
	giocb
->
	gaio_fûdes
 = 
fd
;

288 
	giocb
->
	gaio_lio_›code
 = 
IO_CMD_FDSYNC
;

289 
	giocb
->
	gaio_ªq¥io
 = 0;

292 
ölöe
 
io_fdsync
(
io_c⁄ãxt_t
 
˘x
, 
iocb
 *iocb, 
io_ˇŒback_t
 
cb
, 
fd
)

294 
io_¥ï_fdsync
(
iocb
, 
fd
);

295 
io_£t_ˇŒback
(
iocb
, 
cb
);

296  
io_submô
(
˘x
, 1, &
iocb
);

299 
ölöe
 
io_£t_evítfd
(
iocb
 *iocb, 
evítfd
)

301 
	giocb
->
	gu
.
	gc
.
	gÊags
 |= (1 << 0) ;

302 
	giocb
->
	gu
.
	gc
.
	gªsfd
 = 
evítfd
;

305 #ifde‡
__˝lu•lus


	@/usr/include/libgen.h

18 #i‚de‡
_LIBGEN_H


19 
	#_LIBGEN_H
 1

	)

21 
	~<„©uªs.h
>

23 
__BEGIN_DECLS


26 *
	$dú«me
 (*
__∑th
Ë
__THROW
;

34 *
	$__xpg_ba£«me
 (*
__∑th
Ë
__THROW
;

35 
	#ba£«me
 
__xpg_ba£«me


	)

37 
__END_DECLS


	@/usr/include/limits.h

22 #i‚de‡
_LIBC_LIMITS_H_


23 
	#_LIBC_LIMITS_H_
 1

	)

25 
	~<„©uªs.h
>

31 
	#MB_LEN_MAX
 16

	)

36 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

41 #i‚de‡
_LIMITS_H


42 
	#_LIMITS_H
 1

	)

44 
	~<bôs/w‹dsize.h
>

53 
	#CHAR_BIT
 8

	)

56 
	#SCHAR_MIN
 (-128)

	)

57 
	#SCHAR_MAX
 127

	)

60 
	#UCHAR_MAX
 255

	)

63 #ifde‡
__CHAR_UNSIGNED__


64 
	#CHAR_MIN
 0

	)

65 
	#CHAR_MAX
 
UCHAR_MAX


	)

67 
	#CHAR_MIN
 
SCHAR_MIN


	)

68 
	#CHAR_MAX
 
SCHAR_MAX


	)

72 
	#SHRT_MIN
 (-32768)

	)

73 
	#SHRT_MAX
 32767

	)

76 
	#USHRT_MAX
 65535

	)

79 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

80 
	#INT_MAX
 2147483647

	)

83 
	#UINT_MAX
 4294967295U

	)

86 #i‡
__WORDSIZE
 == 64

87 
	#LONG_MAX
 9223372036854775807L

	)

89 
	#LONG_MAX
 2147483647L

	)

91 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

94 #i‡
__WORDSIZE
 == 64

95 
	#ULONG_MAX
 18446744073709551615UL

	)

97 
	#ULONG_MAX
 4294967295UL

	)

100 #ifde‡
__USE_ISOC99


103 
	#LLONG_MAX
 9223372036854775807LL

	)

104 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

107 
	#ULLONG_MAX
 18446744073709551615ULL

	)

121 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


123 #ö˛ude_√xà<
limôs
.
h
>

129 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


130 #i‚de‡
LLONG_MIN


131 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

133 #i‚de‡
LLONG_MAX


134 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

136 #i‚de‡
ULLONG_MAX


137 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

141 #ifdef 
__USE_POSIX


143 
	~<bôs/posix1_lim.h
>

146 #ifdef 
__USE_POSIX2


147 
	~<bôs/posix2_lim.h
>

150 #ifdef 
__USE_XOPEN


151 
	~<bôs/x›í_lim.h
>

	@/usr/include/linux/falloc.h

1 #i‚de‡
_FALLOC_H_


2 
	#_FALLOC_H_


	)

4 
	#FALLOC_FL_KEEP_SIZE
 0x01

	)

5 
	#FALLOC_FL_PUNCH_HOLE
 0x02

	)

6 
	#FALLOC_FL_NO_HIDE_STALE
 0x04

	)

	@/usr/include/linux/fs.h

1 #i‚de‡
_LINUX_FS_H


2 
	#_LINUX_FS_H


	)

9 
	~<löux/limôs.h
>

10 
	~<löux/io˘l.h
>

11 
	~<löux/ty≥s.h
>

24 #unde‡
NR_OPEN


25 
	#INR_OPEN_CUR
 1024

	)

26 
	#INR_OPEN_MAX
 4096

	)

28 
	#BLOCK_SIZE_BITS
 10

	)

29 
	#BLOCK_SIZE
 (1<<
BLOCK_SIZE_BITS
)

	)

31 
	#SEEK_SET
 0

	)

32 
	#SEEK_CUR
 1

	)

33 
	#SEEK_END
 2

	)

34 
	#SEEK_DATA
 3

	)

35 
	#SEEK_HOLE
 4

	)

36 
	#SEEK_MAX
 
SEEK_HOLE


	)

38 
	sf°rim_ønge
 {

39 
__u64
 
	m°¨t
;

40 
__u64
 
	mÀn
;

41 
__u64
 
	mmöÀn
;

45 
	sfûes_°©_°ru˘
 {

46 
	mƒ_fûes
;

47 
	mƒ_‰ì_fûes
;

48 
	mmax_fûes
;

51 
	söodes_°©_t
 {

52 
	mƒ_öodes
;

53 
	mƒ_unu£d
;

54 
	mdummy
[5];

58 
	#NR_FILE
 8192

	)

64 
	#MS_RDONLY
 1

	)

65 
	#MS_NOSUID
 2

	)

66 
	#MS_NODEV
 4

	)

67 
	#MS_NOEXEC
 8

	)

68 
	#MS_SYNCHRONOUS
 16

	)

69 
	#MS_REMOUNT
 32

	)

70 
	#MS_MANDLOCK
 64

	)

71 
	#MS_DIRSYNC
 128

	)

72 
	#MS_NOATIME
 1024

	)

73 
	#MS_NODIRATIME
 2048

	)

74 
	#MS_BIND
 4096

	)

75 
	#MS_MOVE
 8192

	)

76 
	#MS_REC
 16384

	)

77 
	#MS_VERBOSE
 32768

	)

79 
	#MS_SILENT
 32768

	)

80 
	#MS_POSIXACL
 (1<<16Ë

	)

81 
	#MS_UNBINDABLE
 (1<<17Ë

	)

82 
	#MS_PRIVATE
 (1<<18Ë

	)

83 
	#MS_SLAVE
 (1<<19Ë

	)

84 
	#MS_SHARED
 (1<<20Ë

	)

85 
	#MS_RELATIME
 (1<<21Ë

	)

86 
	#MS_KERNMOUNT
 (1<<22Ë

	)

87 
	#MS_I_VERSION
 (1<<23Ë

	)

88 
	#MS_STRICTATIME
 (1<<24Ë

	)

91 
	#MS_NOSEC
 (1<<28)

	)

92 
	#MS_BORN
 (1<<29)

	)

93 
	#MS_ACTIVE
 (1<<30)

	)

94 
	#MS_NOUSER
 (1<<31)

	)

99 
	#MS_RMT_MASK
 (
MS_RDONLY
|
MS_SYNCHRONOUS
|
MS_MANDLOCK
|
MS_I_VERSION
)

	)

104 
	#MS_MGC_VAL
 0xC0ED0000

	)

105 
	#MS_MGC_MSK
 0xffff0000

	)

110 
	#BLKROSET
 
	`_IO
(0x12,93Ë

	)

111 
	#BLKROGET
 
	`_IO
(0x12,94Ë

	)

112 
	#BLKRRPART
 
	`_IO
(0x12,95Ë

	)

113 
	#BLKGETSIZE
 
	`_IO
(0x12,96Ë

	)

114 
	#BLKFLSBUF
 
	`_IO
(0x12,97Ë

	)

115 
	#BLKRASET
 
	`_IO
(0x12,98Ë

	)

116 
	#BLKRAGET
 
	`_IO
(0x12,99Ë

	)

117 
	#BLKFRASET
 
	`_IO
(0x12,100)

	)

118 
	#BLKFRAGET
 
	`_IO
(0x12,101)

	)

119 
	#BLKSECTSET
 
	`_IO
(0x12,102)

	)

120 
	#BLKSECTGET
 
	`_IO
(0x12,103)

	)

121 
	#BLKSSZGET
 
	`_IO
(0x12,104)

	)

123 
	#BLKPG
 
	`_IO
(0x12,105)

	)

127 
	#BLKELVGET
 
	`_IOR
(0x12,106,
size_t
)

	)

128 
	#BLKELVSET
 
	`_IOW
(0x12,107,
size_t
)

	)

133 
	#BLKBSZGET
 
	`_IOR
(0x12,112,
size_t
)

	)

134 
	#BLKBSZSET
 
	`_IOW
(0x12,113,
size_t
)

	)

135 
	#BLKGETSIZE64
 
	`_IOR
(0x12,114,
size_t
Ë

	)

136 
	#BLKTRACESETUP
 
	`_IOWR
(0x12,115,
blk_u£r_åa˚_£tup
)

	)

137 
	#BLKTRACESTART
 
	`_IO
(0x12,116)

	)

138 
	#BLKTRACESTOP
 
	`_IO
(0x12,117)

	)

139 
	#BLKTRACETEARDOWN
 
	`_IO
(0x12,118)

	)

140 
	#BLKDISCARD
 
	`_IO
(0x12,119)

	)

141 
	#BLKIOMIN
 
	`_IO
(0x12,120)

	)

142 
	#BLKIOOPT
 
	`_IO
(0x12,121)

	)

143 
	#BLKALIGNOFF
 
	`_IO
(0x12,122)

	)

144 
	#BLKPBSZGET
 
	`_IO
(0x12,123)

	)

145 
	#BLKDISCARDZEROES
 
	`_IO
(0x12,124)

	)

146 
	#BLKSECDISCARD
 
	`_IO
(0x12,125)

	)

147 
	#BLKROTATIONAL
 
	`_IO
(0x12,126)

	)

148 
	#BLKZEROOUT
 
	`_IO
(0x12,127)

	)

150 
	#BMAP_IOCTL
 1

	)

151 
	#FIBMAP
 
	`_IO
(0x00,1Ë

	)

152 
	#FIGETBSZ
 
	`_IO
(0x00,2Ë

	)

153 
	#FIFREEZE
 
	`_IOWR
('X', 119, Ë

	)

154 
	#FITHAW
 
	`_IOWR
('X', 120, Ë

	)

155 
	#FITRIM
 
	`_IOWR
('X', 121, 
f°rim_ønge
Ë

	)

157 
	#FS_IOC_GETFLAGS
 
	`_IOR
('f', 1, )

	)

158 
	#FS_IOC_SETFLAGS
 
	`_IOW
('f', 2, )

	)

159 
	#FS_IOC_GETVERSION
 
	`_IOR
('v', 1, )

	)

160 
	#FS_IOC_SETVERSION
 
	`_IOW
('v', 2, )

	)

161 
	#FS_IOC_FIEMAP
 
	`_IOWR
('f', 11, 
fõm≠
)

	)

162 
	#FS_IOC32_GETFLAGS
 
	`_IOR
('f', 1, )

	)

163 
	#FS_IOC32_SETFLAGS
 
	`_IOW
('f', 2, )

	)

164 
	#FS_IOC32_GETVERSION
 
	`_IOR
('v', 1, )

	)

165 
	#FS_IOC32_SETVERSION
 
	`_IOW
('v', 2, )

	)

170 
	#FS_SECRM_FL
 0x00000001

	)

171 
	#FS_UNRM_FL
 0x00000002

	)

172 
	#FS_COMPR_FL
 0x00000004

	)

173 
	#FS_SYNC_FL
 0x00000008

	)

174 
	#FS_IMMUTABLE_FL
 0x00000010

	)

175 
	#FS_APPEND_FL
 0x00000020

	)

176 
	#FS_NODUMP_FL
 0x00000040

	)

177 
	#FS_NOATIME_FL
 0x00000080

	)

179 
	#FS_DIRTY_FL
 0x00000100

	)

180 
	#FS_COMPRBLK_FL
 0x00000200

	)

181 
	#FS_NOCOMP_FL
 0x00000400

	)

182 
	#FS_ECOMPR_FL
 0x00000800

	)

184 
	#FS_BTREE_FL
 0x00001000

	)

185 
	#FS_INDEX_FL
 0x00001000

	)

186 
	#FS_IMAGIC_FL
 0x00002000

	)

187 
	#FS_JOURNAL_DATA_FL
 0x00004000

	)

188 
	#FS_NOTAIL_FL
 0x00008000

	)

189 
	#FS_DIRSYNC_FL
 0x00010000

	)

190 
	#FS_TOPDIR_FL
 0x00020000

	)

191 
	#FS_EXTENT_FL
 0x00080000

	)

192 
	#FS_DIRECTIO_FL
 0x00100000

	)

193 
	#FS_NOCOW_FL
 0x00800000

	)

194 
	#FS_RESERVED_FL
 0x80000000

	)

196 
	#FS_FL_USER_VISIBLE
 0x0003DFFF

	)

197 
	#FS_FL_USER_MODIFIABLE
 0x000380FF

	)

200 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

201 
	#SYNC_FILE_RANGE_WRITE
 2

	)

202 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

	@/usr/include/linux/major.h

1 #i‚de‡
_LINUX_MAJOR_H


2 
	#_LINUX_MAJOR_H


	)

9 
	#UNNAMED_MAJOR
 0

	)

10 
	#MEM_MAJOR
 1

	)

11 
	#RAMDISK_MAJOR
 1

	)

12 
	#FLOPPY_MAJOR
 2

	)

13 
	#PTY_MASTER_MAJOR
 2

	)

14 
	#IDE0_MAJOR
 3

	)

15 
	#HD_MAJOR
 
IDE0_MAJOR


	)

16 
	#PTY_SLAVE_MAJOR
 3

	)

17 
	#TTY_MAJOR
 4

	)

18 
	#TTYAUX_MAJOR
 5

	)

19 
	#LP_MAJOR
 6

	)

20 
	#VCS_MAJOR
 7

	)

21 
	#LOOP_MAJOR
 7

	)

22 
	#SCSI_DISK0_MAJOR
 8

	)

23 
	#SCSI_TAPE_MAJOR
 9

	)

24 
	#MD_MAJOR
 9

	)

25 
	#MISC_MAJOR
 10

	)

26 
	#SCSI_CDROM_MAJOR
 11

	)

27 
	#MUX_MAJOR
 11

	)

28 
	#XT_DISK_MAJOR
 13

	)

29 
	#INPUT_MAJOR
 13

	)

30 
	#SOUND_MAJOR
 14

	)

31 
	#CDU31A_CDROM_MAJOR
 15

	)

32 
	#JOYSTICK_MAJOR
 15

	)

33 
	#GOLDSTAR_CDROM_MAJOR
 16

	)

34 
	#OPTICS_CDROM_MAJOR
 17

	)

35 
	#SANYO_CDROM_MAJOR
 18

	)

36 
	#CYCLADES_MAJOR
 19

	)

37 
	#CYCLADESAUX_MAJOR
 20

	)

38 
	#MITSUMI_X_CDROM_MAJOR
 20

	)

39 
	#MFM_ACORN_MAJOR
 21

	)

40 
	#SCSI_GENERIC_MAJOR
 21

	)

41 
	#IDE1_MAJOR
 22

	)

42 
	#DIGICU_MAJOR
 22

	)

43 
	#DIGI_MAJOR
 23

	)

44 
	#MITSUMI_CDROM_MAJOR
 23

	)

45 
	#CDU535_CDROM_MAJOR
 24

	)

46 
	#STL_SERIALMAJOR
 24

	)

47 
	#MATSUSHITA_CDROM_MAJOR
 25

	)

48 
	#STL_CALLOUTMAJOR
 25

	)

49 
	#MATSUSHITA_CDROM2_MAJOR
 26

	)

50 
	#QIC117_TAPE_MAJOR
 27

	)

51 
	#MATSUSHITA_CDROM3_MAJOR
 27

	)

52 
	#MATSUSHITA_CDROM4_MAJOR
 28

	)

53 
	#STL_SIOMEMMAJOR
 28

	)

54 
	#ACSI_MAJOR
 28

	)

55 
	#AZTECH_CDROM_MAJOR
 29

	)

56 
	#FB_MAJOR
 29

	)

57 
	#CM206_CDROM_MAJOR
 32

	)

58 
	#IDE2_MAJOR
 33

	)

59 
	#IDE3_MAJOR
 34

	)

60 
	#Z8530_MAJOR
 34

	)

61 
	#XPRAM_MAJOR
 35

	)

62 
	#NETLINK_MAJOR
 36

	)

63 
	#PS2ESDI_MAJOR
 36

	)

64 
	#IDETAPE_MAJOR
 37

	)

65 
	#Z2RAM_MAJOR
 37

	)

66 
	#APBLOCK_MAJOR
 38

	)

67 
	#DDV_MAJOR
 39

	)

68 
	#NBD_MAJOR
 43

	)

69 
	#RISCOM8_NORMAL_MAJOR
 48

	)

70 
	#DAC960_MAJOR
 48

	)

71 
	#RISCOM8_CALLOUT_MAJOR
 49

	)

72 
	#MKISS_MAJOR
 55

	)

73 
	#DSP56K_MAJOR
 55

	)

75 
	#IDE4_MAJOR
 56

	)

76 
	#IDE5_MAJOR
 57

	)

78 
	#SCSI_DISK1_MAJOR
 65

	)

79 
	#SCSI_DISK2_MAJOR
 66

	)

80 
	#SCSI_DISK3_MAJOR
 67

	)

81 
	#SCSI_DISK4_MAJOR
 68

	)

82 
	#SCSI_DISK5_MAJOR
 69

	)

83 
	#SCSI_DISK6_MAJOR
 70

	)

84 
	#SCSI_DISK7_MAJOR
 71

	)

86 
	#COMPAQ_SMART2_MAJOR
 72

	)

87 
	#COMPAQ_SMART2_MAJOR1
 73

	)

88 
	#COMPAQ_SMART2_MAJOR2
 74

	)

89 
	#COMPAQ_SMART2_MAJOR3
 75

	)

90 
	#COMPAQ_SMART2_MAJOR4
 76

	)

91 
	#COMPAQ_SMART2_MAJOR5
 77

	)

92 
	#COMPAQ_SMART2_MAJOR6
 78

	)

93 
	#COMPAQ_SMART2_MAJOR7
 79

	)

95 
	#SPECIALIX_NORMAL_MAJOR
 75

	)

96 
	#SPECIALIX_CALLOUT_MAJOR
 76

	)

98 
	#AURORA_MAJOR
 79

	)

100 
	#I2O_MAJOR
 80

	)

102 
	#SHMIQ_MAJOR
 85

	)

103 
	#SCSI_CHANGER_MAJOR
 86

	)

105 
	#IDE6_MAJOR
 88

	)

106 
	#IDE7_MAJOR
 89

	)

107 
	#IDE8_MAJOR
 90

	)

108 
	#IDE9_MAJOR
 91

	)

110 
	#DASD_MAJOR
 94

	)

112 
	#MDISK_MAJOR
 95

	)

114 
	#UBD_MAJOR
 98

	)

116 
	#PP_MAJOR
 99

	)

117 
	#JSFD_MAJOR
 99

	)

119 
	#PHONE_MAJOR
 100

	)

121 
	#COMPAQ_CISS_MAJOR
 104

	)

122 
	#COMPAQ_CISS_MAJOR1
 105

	)

123 
	#COMPAQ_CISS_MAJOR2
 106

	)

124 
	#COMPAQ_CISS_MAJOR3
 107

	)

125 
	#COMPAQ_CISS_MAJOR4
 108

	)

126 
	#COMPAQ_CISS_MAJOR5
 109

	)

127 
	#COMPAQ_CISS_MAJOR6
 110

	)

128 
	#COMPAQ_CISS_MAJOR7
 111

	)

130 
	#VIODASD_MAJOR
 112

	)

131 
	#VIOCD_MAJOR
 113

	)

133 
	#ATARAID_MAJOR
 114

	)

135 
	#SCSI_DISK8_MAJOR
 128

	)

136 
	#SCSI_DISK9_MAJOR
 129

	)

137 
	#SCSI_DISK10_MAJOR
 130

	)

138 
	#SCSI_DISK11_MAJOR
 131

	)

139 
	#SCSI_DISK12_MAJOR
 132

	)

140 
	#SCSI_DISK13_MAJOR
 133

	)

141 
	#SCSI_DISK14_MAJOR
 134

	)

142 
	#SCSI_DISK15_MAJOR
 135

	)

144 
	#UNIX98_PTY_MASTER_MAJOR
 128

	)

145 
	#UNIX98_PTY_MAJOR_COUNT
 8

	)

146 
	#UNIX98_PTY_SLAVE_MAJOR
 (
UNIX98_PTY_MASTER_MAJOR
+
UNIX98_PTY_MAJOR_COUNT
)

	)

148 
	#DRBD_MAJOR
 147

	)

149 
	#RTF_MAJOR
 150

	)

150 
	#RAW_MAJOR
 162

	)

152 
	#USB_ACM_MAJOR
 166

	)

153 
	#USB_ACM_AUX_MAJOR
 167

	)

154 
	#USB_CHAR_MAJOR
 180

	)

156 
	#MMC_BLOCK_MAJOR
 179

	)

158 
	#VXVM_MAJOR
 199

	)

159 
	#VXSPEC_MAJOR
 200

	)

160 
	#VXDMP_MAJOR
 201

	)

162 
	#XENVBD_MAJOR
 202

	)

164 
	#MSR_MAJOR
 202

	)

165 
	#CPUID_MAJOR
 203

	)

167 
	#OSST_MAJOR
 206

	)

169 
	#IBM_TTY3270_MAJOR
 227

	)

170 
	#IBM_FS3270_MAJOR
 228

	)

172 
	#VIOTAPE_MAJOR
 230

	)

174 
	#BLOCK_EXT_MAJOR
 259

	)

175 
	#SCSI_OSD_MAJOR
 260

	)

	@/usr/include/linux/mempolicy.h

5 #i‚de‡
_LINUX_MEMPOLICY_H


6 
	#_LINUX_MEMPOLICY_H


	)

8 
	~<löux/î∫o.h
>

19 
	mMPOL_DEFAULT
,

20 
	mMPOL_PREFERRED
,

21 
	mMPOL_BIND
,

22 
	mMPOL_INTERLEAVE
,

23 
	mMPOL_LOCAL
,

24 
	mMPOL_MAX
,

27 
	empﬁ_ªböd_°ï
 {

28 
	mMPOL_REBIND_ONCE
,

29 
	mMPOL_REBIND_STEP1
,

30 
	mMPOL_REBIND_STEP2
,

31 
	mMPOL_REBIND_NSTEP
,

35 
	#MPOL_F_STATIC_NODES
 (1 << 15)

	)

36 
	#MPOL_F_RELATIVE_NODES
 (1 << 14)

	)

42 
	#MPOL_MODE_FLAGS
 (
MPOL_F_STATIC_NODES
 | 
MPOL_F_RELATIVE_NODES
)

	)

45 
	#MPOL_F_NODE
 (1<<0Ë

	)

46 
	#MPOL_F_ADDR
 (1<<1Ë

	)

47 
	#MPOL_F_MEMS_ALLOWED
 (1<<2Ë

	)

50 
	#MPOL_MF_STRICT
 (1<<0Ë

	)

51 
	#MPOL_MF_MOVE
 (1<<1Ë

	)

53 
	#MPOL_MF_MOVE_ALL
 (1<<2Ë

	)

54 
	#MPOL_MF_LAZY
 (1<<3Ë

	)

55 
	#MPOL_MF_INTERNAL
 (1<<4Ë

	)

57 
	#MPOL_MF_VALID
 (
MPOL_MF_STRICT
 | \

58 
MPOL_MF_MOVE
 | \

59 
MPOL_MF_MOVE_ALL
)

	)

66 
	#MPOL_F_SHARED
 (1 << 0Ë

	)

67 
	#MPOL_F_LOCAL
 (1 << 1Ë

	)

68 
	#MPOL_F_REBINDING
 (1 << 2Ë

	)

69 
	#MPOL_F_MOF
 (1 << 3Ë

	)

70 
	#MPOL_F_MORON
 (1 << 4Ë

	)

	@/usr/include/linux/raw.h

1 #i‚de‡
__LINUX_RAW_H


2 
	#__LINUX_RAW_H


	)

4 
	~<löux/ty≥s.h
>

6 
	#RAW_SETBIND
 
	`_IO
–0xac, 0 )

	)

7 
	#RAW_GETBIND
 
	`_IO
–0xac, 1 )

	)

9 
	søw_c⁄fig_ªque°


11 
	møw_mö‹
;

12 
__u64
 
	mblock_maj‹
;

13 
__u64
 
	mblock_mö‹
;

16 
	#MAX_RAW_MINORS
 
CONFIG_MAX_RAW_DEVS


	)

	@/usr/include/linux/shm.h

1 #i‚de‡
_LINUX_SHM_H_


2 
	#_LINUX_SHM_H_


	)

4 
	~<löux/ùc.h
>

5 
	~<löux/î∫o.h
>

6 
	~<uni°d.h
>

13 
	#SHMMAX
 0x2000000

	)

14 
	#SHMMIN
 1

	)

15 
	#SHMMNI
 4096

	)

16 
	#SHMALL
 (
SHMMAX
/
	`gë∑gesize
()*(
SHMMNI
/16))

	)

17 
	#SHMSEG
 
SHMMNI


	)

21 
	sshmid_ds
 {

22 
ùc_≥rm
 
	mshm_≥rm
;

23 
	mshm_£gsz
;

24 
__kî√l_time_t
 
	mshm_©ime
;

25 
__kî√l_time_t
 
	mshm_dtime
;

26 
__kî√l_time_t
 
	mshm_˘ime
;

27 
__kî√l_ùc_pid_t
 
	mshm_˝id
;

28 
__kî√l_ùc_pid_t
 
	mshm_Õid
;

29 
	mshm_«âch
;

30 
	mshm_unu£d
;

31 *
	mshm_unu£d2
;

32 *
	mshm_unu£d3
;

36 
	~<asm/shmbuf.h
>

39 
	#SHM_R
 0400

	)

40 
	#SHM_W
 0200

	)

43 
	#SHM_RDONLY
 010000

	)

44 
	#SHM_RND
 020000

	)

45 
	#SHM_REMAP
 040000

	)

46 
	#SHM_EXEC
 0100000

	)

49 
	#SHM_LOCK
 11

	)

50 
	#SHM_UNLOCK
 12

	)

53 
	#SHM_STAT
 13

	)

54 
	#SHM_INFO
 14

	)

57 
	sshmöfo
 {

58 
	mshmmax
;

59 
	mshmmö
;

60 
	mshmmni
;

61 
	mshm£g
;

62 
	mshmÆl
;

65 
	sshm_öfo
 {

66 
	mu£d_ids
;

67 
	mshm_tŸ
;

68 
	mshm_rss
;

69 
	mshm_swp
;

70 
	msw≠_©ãm±s
;

71 
	msw≠_suc˚s£s
;

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<asm/ty≥s.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	~<löux/posix_ty≥s.h
>

16 #ifde‡
__CHECKER__


17 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

19 
	#__bôwi£__


	)

21 #ifde‡
__CHECK_ENDIAN__


22 
	#__bôwi£
 
__bôwi£__


	)

24 
	#__bôwi£


	)

27 
__u16
 
	t__bôwi£
 
	t__À16
;

28 
__u16
 
	t__bôwi£
 
	t__be16
;

29 
__u32
 
	t__bôwi£
 
	t__À32
;

30 
__u32
 
	t__bôwi£
 
	t__be32
;

31 
__u64
 
	t__bôwi£
 
	t__À64
;

32 
__u64
 
	t__bôwi£
 
	t__be64
;

34 
__u16
 
	t__bôwi£
 
	t__sum16
;

35 
__u32
 
	t__bôwi£
 
	t__wsum
;

46 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

47 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

48 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

	@/usr/include/linux/unistd.h

1 #i‚de‡
_LINUX_UNISTD_H_


2 
	#_LINUX_UNISTD_H_


	)

7 
	~<asm/uni°d.h
>

	@/usr/include/locale.h

22 #i‚def 
_LOCALE_H


23 
	#_LOCALE_H
 1

	)

25 
	~<„©uªs.h
>

27 
	#__√ed_NULL


	)

28 
	~<°ddef.h
>

29 
	~<bôs/loˇÀ.h
>

31 
	g__BEGIN_DECLS


35 
	#LC_CTYPE
 
__LC_CTYPE


	)

36 
	#LC_NUMERIC
 
__LC_NUMERIC


	)

37 
	#LC_TIME
 
__LC_TIME


	)

38 
	#LC_COLLATE
 
__LC_COLLATE


	)

39 
	#LC_MONETARY
 
__LC_MONETARY


	)

40 
	#LC_MESSAGES
 
__LC_MESSAGES


	)

41 
	#LC_ALL
 
__LC_ALL


	)

42 
	#LC_PAPER
 
__LC_PAPER


	)

43 
	#LC_NAME
 
__LC_NAME


	)

44 
	#LC_ADDRESS
 
__LC_ADDRESS


	)

45 
	#LC_TELEPHONE
 
__LC_TELEPHONE


	)

46 
	#LC_MEASUREMENT
 
__LC_MEASUREMENT


	)

47 
	#LC_IDENTIFICATION
 
__LC_IDENTIFICATION


	)

50 
__BEGIN_NAMESPACE_STD


53 
	slc⁄v


57 *
	mdecimÆ_poöt
;

58 *
	mthoußnds_£p
;

64 *
	mgroupög
;

70 *
	möt_cuº_symbﬁ
;

71 *
	mcuºícy_symbﬁ
;

72 *
	mm⁄_decimÆ_poöt
;

73 *
	mm⁄_thoußnds_£p
;

74 *
	mm⁄_groupög
;

75 *
	mposôive_sign
;

76 *
	m√g©ive_sign
;

77 
	möt_‰ac_digôs
;

78 
	m‰ac_digôs
;

80 
	mp_cs_¥e˚des
;

82 
	mp_£p_by_•a˚
;

84 
	mn_cs_¥e˚des
;

86 
	mn_£p_by_•a˚
;

93 
	mp_sign_po¢
;

94 
	mn_sign_po¢
;

95 #ifde‡
__USE_ISOC99


97 
	möt_p_cs_¥e˚des
;

99 
	möt_p_£p_by_•a˚
;

101 
	möt_n_cs_¥e˚des
;

103 
	möt_n_£p_by_•a˚
;

110 
	möt_p_sign_po¢
;

111 
	möt_n_sign_po¢
;

113 
	m__öt_p_cs_¥e˚des
;

114 
	m__öt_p_£p_by_•a˚
;

115 
	m__öt_n_cs_¥e˚des
;

116 
	m__öt_n_£p_by_•a˚
;

117 
	m__öt_p_sign_po¢
;

118 
	m__öt_n_sign_po¢
;

124 *
	$£éoˇÀ
 (
__ˇãg‹y
, c⁄° *
__loˇÀ
Ë
__THROW
;

127 
lc⁄v
 *
	$loˇÀc⁄v
 (Ë
__THROW
;

129 
__END_NAMESPACE_STD


132 #ifdef 
__USE_XOPEN2K8


145 
	~<xloˇÀ.h
>

151 
__loˇÀ_t
 
	$√wloˇÀ
 (
__ˇãg‹y_mask
, c⁄° *
__loˇÀ
,

152 
__loˇÀ_t
 
__ba£
Ë
__THROW
;

158 
	#LC_CTYPE_MASK
 (1 << 
__LC_CTYPE
)

	)

159 
	#LC_NUMERIC_MASK
 (1 << 
__LC_NUMERIC
)

	)

160 
	#LC_TIME_MASK
 (1 << 
__LC_TIME
)

	)

161 
	#LC_COLLATE_MASK
 (1 << 
__LC_COLLATE
)

	)

162 
	#LC_MONETARY_MASK
 (1 << 
__LC_MONETARY
)

	)

163 
	#LC_MESSAGES_MASK
 (1 << 
__LC_MESSAGES
)

	)

164 
	#LC_PAPER_MASK
 (1 << 
__LC_PAPER
)

	)

165 
	#LC_NAME_MASK
 (1 << 
__LC_NAME
)

	)

166 
	#LC_ADDRESS_MASK
 (1 << 
__LC_ADDRESS
)

	)

167 
	#LC_TELEPHONE_MASK
 (1 << 
__LC_TELEPHONE
)

	)

168 
	#LC_MEASUREMENT_MASK
 (1 << 
__LC_MEASUREMENT
)

	)

169 
	#LC_IDENTIFICATION_MASK
 (1 << 
__LC_IDENTIFICATION
)

	)

170 
	#LC_ALL_MASK
 (
LC_CTYPE_MASK
 \

171 | 
LC_NUMERIC_MASK
 \

172 | 
LC_TIME_MASK
 \

173 | 
LC_COLLATE_MASK
 \

174 | 
LC_MONETARY_MASK
 \

175 | 
LC_MESSAGES_MASK
 \

176 | 
LC_PAPER_MASK
 \

177 | 
LC_NAME_MASK
 \

178 | 
LC_ADDRESS_MASK
 \

179 | 
LC_TELEPHONE_MASK
 \

180 | 
LC_MEASUREMENT_MASK
 \

181 | 
LC_IDENTIFICATION_MASK
 \

182 )

	)

186 
__loˇÀ_t
 
	$du∂oˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

190 
	$‰ìloˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

197 
__loˇÀ_t
 
	$u£loˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

201 
	#LC_GLOBAL_LOCALE
 ((
__loˇÀ_t
Ë-1L)

	)

205 
__END_DECLS


	@/usr/include/malloc.h

19 #i‚de‡
_MALLOC_H


20 
	#_MALLOC_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<°ddef.h
>

24 
	~<°dio.h
>

26 #ifde‡
_LIBC


27 
	#__MALLOC_HOOK_VOLATILE


	)

28 
	#__MALLOC_DEPRECATED


	)

30 
	#__MALLOC_HOOK_VOLATILE
 vﬁ©ûe

	)

31 
	#__MALLOC_DEPRECATED
 
__©åibuã_dïªˇãd__


	)

35 
__BEGIN_DECLS


38 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

41 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

42 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

49 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

50 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

53 
	$‰ì
 (*
__±r
Ë
__THROW
;

56 
	$c‰ì
 (*
__±r
Ë
__THROW
;

59 *
	$memÆign
 (
size_t
 
__Æignmít
, size_à
__size
)

60 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

63 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

67 * 
	$pvÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

71 *(*
__m‹ec‹e
Ë(
±rdiff_t
 
__size
);

74 *
	$__deÁu…_m‹ec‹e
 (
±rdiff_t
 
__size
)

75 
__THROW
 
__©åibuã_mÆloc__
;

79 
	smÆlöfo


81 
¨ía
;

82 
‹dblks
;

83 
smblks
;

84 
hblks
;

85 
hblkhd
;

86 
usmblks
;

87 
fsmblks
;

88 
u‹dblks
;

89 
f‹dblks
;

90 
kìpco°
;

94 
mÆlöfo
 
	$mÆlöfo
 (Ë
__THROW
;

97 #i‚de‡
M_MXFAST


98 
	#M_MXFAST
 1

	)

100 #i‚de‡
M_NLBLKS


101 
	#M_NLBLKS
 2

	)

103 #i‚de‡
M_GRAIN


104 
	#M_GRAIN
 3

	)

106 #i‚de‡
M_KEEP


107 
	#M_KEEP
 4

	)

111 
	#M_TRIM_THRESHOLD
 -1

	)

112 
	#M_TOP_PAD
 -2

	)

113 
	#M_MMAP_THRESHOLD
 -3

	)

114 
	#M_MMAP_MAX
 -4

	)

115 
	#M_CHECK_ACTION
 -5

	)

116 
	#M_PERTURB
 -6

	)

117 
	#M_ARENA_TEST
 -7

	)

118 
	#M_ARENA_MAX
 -8

	)

121 
	$mÆl›t
 (
__∑øm
, 
__vÆ
Ë
__THROW
;

125 
	$mÆloc_åim
 (
size_t
 
__∑d
Ë
__THROW
;

129 
size_t
 
	$mÆloc_ußbÀ_size
 (*
__±r
Ë
__THROW
;

132 
	$mÆloc_°©s
 (Ë
__THROW
;

135 
	$mÆloc_öfo
 (
__›ti⁄s
, 
FILE
 *
__Â
Ë
__THROW
;

138 *
	$mÆloc_gë_°©e
 (Ë
__THROW
;

142 
	$mÆloc_£t_°©e
 (*
__±r
Ë
__THROW
;

147 (*
__MALLOC_HOOK_VOLATILE
 
__mÆloc_öôülize_hook
) ()

148 
__MALLOC_DEPRECATED
;

150 (*
__MALLOC_HOOK_VOLATILE
 
__‰ì_hook
Ë(*
__±r
,

152 
__MALLOC_DEPRECATED
;

153 *(*
__MALLOC_HOOK_VOLATILE
 
__mÆloc_hook
Ë(
size_t
 
__size
,

155 
__MALLOC_DEPRECATED
;

156 *(*
__MALLOC_HOOK_VOLATILE
 
__ªÆloc_hook
Ë(*
__±r
,

157 
size_t
 
__size
,

159 
__MALLOC_DEPRECATED
;

160 *(*
__MALLOC_HOOK_VOLATILE
 
__memÆign_hook
Ë(
size_t
 
__Æignmít
,

161 
size_t
 
__size
,

163 
__MALLOC_DEPRECATED
;

164 (*
__MALLOC_HOOK_VOLATILE
 
__a·î_m‹ec‹e_hook
) ();

167 
	$__mÆloc_check_öô
 (Ë
__THROW
 
__MALLOC_DEPRECATED
;

170 
__END_DECLS


	@/usr/include/math.h

23 #i‚def 
_MATH_H


24 
	#_MATH_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


32 
	~<bôs/huge_vÆ.h
>

33 #ifde‡
__USE_ISOC99


34 
	~<bôs/huge_vÆf.h
>

35 
	~<bôs/huge_vÆl.h
>

38 
	~<bôs/öf.h
>

41 
	~<bôs/«n.h
>

45 
	~<bôs/m©hdef.h
>

52 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

53 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

54 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

55 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

56 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

57 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

58 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

59 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

60 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

61 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

62 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

63 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

65 
	#_MdoubÀ_
 

	)

66 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

67 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_STD


	)

68 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_STD


	)

69 
	~<bôs/m©hˇŒs.h
>

70 #unde‡
_MdoubÀ_


71 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


72 #unde‡
_MdoubÀ_END_NAMESPACE


73 #unde‡
__MATH_PRECNAME


75 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


81 #i‚de‡
_MÊﬂt_


82 
	#_MÊﬂt_
 

	)

84 
	#_MdoubÀ_
 
_MÊﬂt_


	)

85 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

86 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

87 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

88 
	~<bôs/m©hˇŒs.h
>

89 #unde‡
_MdoubÀ_


90 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


91 #unde‡
_MdoubÀ_END_NAMESPACE


92 #unde‡
__MATH_PRECNAME


94 #i‡!(
deföed
 
__NO_LONG_DOUBLE_MATH
 && deföed 
_LIBC
) \

95 || 
deföed
 
__LDBL_COMPAT


96 #ifde‡
__LDBL_COMPAT


98 #ifde‡
__USE_ISOC99


99 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

100 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

101 #ifde‡
__REDIRECT_NTH


102 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

103 
__∆dbl_√xâow¨df
)

104 
	`__©åibuã__
 ((
__c⁄°__
));

105 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

106 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

107 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

108 (
__x
, 
__y
),

109 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

113 #unde‡
__MATHDECL_1


114 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

115 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

116 
¨gs
, 
Æüs
)

	)

117 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

118 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

124 #i‚de‡
_Ml⁄g_doubÀ_


125 
	#_Ml⁄g_doubÀ_
 

	)

127 
	#_MdoubÀ_
 
_Ml⁄g_doubÀ_


	)

128 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

129 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

130 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

131 
	#__MATH_DECLARE_LDOUBLE
 1

	)

132 
	~<bôs/m©hˇŒs.h
>

133 #unde‡
_MdoubÀ_


134 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


135 #unde‡
_MdoubÀ_END_NAMESPACE


136 #unde‡
__MATH_PRECNAME


141 #unde‡
__MATHDECL_1


142 #unde‡
__MATHDECL


143 #unde‡
__MATHCALL


146 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


148 
signgam
;

153 #ifde‡
__USE_ISOC99


191 
FP_NAN
 =

192 
	#FP_NAN
 0

	)

193 
FP_NAN
,

194 
FP_INFINITE
 =

195 
	#FP_INFINITE
 1

	)

196 
FP_INFINITE
,

197 
FP_ZERO
 =

198 
	#FP_ZERO
 2

	)

199 
FP_ZERO
,

200 
FP_SUBNORMAL
 =

201 
	#FP_SUBNORMAL
 3

	)

202 
FP_SUBNORMAL
,

203 
FP_NORMAL
 =

204 
	#FP_NORMAL
 4

	)

205 
FP_NORMAL


209 #ifde‡
__NO_LONG_DOUBLE_MATH


210 
	#Â˛assify
(
x
) \

211 ( (
x
Ë= (Ë? 
	`__Â˛assifyf
 (xË: 
	`__Â˛assify
 (x))

	)

213 
	#Â˛assify
(
x
) \

214 ( (
x
) ==  () \

215 ? 
	`__Â˛assifyf
 (
x
) \

216 :  (
x
) ==  () \

217 ? 
	`__Â˛assify
 (
x
Ë: 
	`__Â˛assifyl
 (x))

	)

221 #ifde‡
__NO_LONG_DOUBLE_MATH


222 
	#signbô
(
x
) \

223 ( (
x
Ë= (Ë? 
	`__signbôf
 (xË: 
	`__signbô
 (x))

	)

225 
	#signbô
(
x
) \

226 ( (
x
) ==  () \

227 ? 
	`__signbôf
 (
x
) \

228 :  (
x
) ==  () \

229 ? 
	`__signbô
 (
x
Ë: 
	`__signbôl
 (x))

	)

233 #ifde‡
__NO_LONG_DOUBLE_MATH


234 
	#isföôe
(
x
) \

235 ( (
x
Ë= (Ë? 
	`__föôef
 (xË: 
	`__föôe
 (x))

	)

237 
	#isföôe
(
x
) \

238 ( (
x
) ==  () \

239 ? 
	`__föôef
 (
x
) \

240 :  (
x
) ==  () \

241 ? 
	`__föôe
 (
x
Ë: 
	`__föôñ
 (x))

	)

245 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

249 #ifde‡
__NO_LONG_DOUBLE_MATH


250 
	#i¢™
(
x
) \

251 ( (
x
Ë= (Ë? 
	`__i¢™f
 (xË: 
	`__i¢™
 (x))

	)

253 
	#i¢™
(
x
) \

254 ( (
x
) ==  () \

255 ? 
	`__i¢™f
 (
x
) \

256 :  (
x
) ==  () \

257 ? 
	`__i¢™
 (
x
Ë: 
	`__i¢™l
 (x))

	)

261 #ifde‡
__NO_LONG_DOUBLE_MATH


262 
	#isöf
(
x
) \

263 ( (
x
Ë= (Ë? 
	`__isöff
 (xË: 
	`__isöf
 (x))

	)

265 
	#isöf
(
x
) \

266 ( (
x
) ==  () \

267 ? 
	`__isöff
 (
x
) \

268 :  (
x
) ==  () \

269 ? 
	`__isöf
 (
x
Ë: 
	`__isöÊ
 (x))

	)

273 
	#MATH_ERRNO
 1

	)

274 
	#MATH_ERREXCEPT
 2

	)

279 #i‚de‡
__FAST_MATH__


280 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

285 #ifde‡
__USE_GNU


287 #ifde‡
__NO_LONG_DOUBLE_MATH


288 
	#issig«lög
(
x
) \

289 ( (
x
Ë= (Ë? 
	`__issig«lögf
 (xË: 
	`__issig«lög
 (x))

	)

291 
	#issig«lög
(
x
) \

292 ( (
x
) ==  () \

293 ? 
	`__issig«lögf
 (
x
) \

294 :  (
x
) ==  () \

295 ? 
	`__issig«lög
 (
x
Ë: 
	`__issig«lögl
 (x))

	)

299 #ifdef 
__USE_MISC


303 
_IEEE_
 = -1,

304 
_SVID_
,

305 
_XOPEN_
,

306 
_POSIX_
,

307 
_ISOC_


308 } 
	t_LIB_VERSION_TYPE
;

313 
_LIB_VERSION_TYPE
 
_LIB_VERSION
;

317 #ifde‡
__USE_SVID


323 #ifde‡
__˝lu•lus


324 
__ex˚±i⁄


326 
ex˚±i⁄


329 
ty≥
;

330 *
«me
;

331 
¨g1
;

332 
¨g2
;

333 
ªtvÆ
;

334 
	}
};

336 #ifde‡
__˝lu•lus


337 
	$m©hîr
 (
__ex˚±i⁄
 *
__exc
Ë
	`throw
 ();

339 
	`m©hîr
 (
ex˚±i⁄
 *
__exc
);

342 
	#X_TLOSS
 1.41484755040568800000e+16

	)

345 
	#DOMAIN
 1

	)

346 
	#SING
 2

	)

347 
	#OVERFLOW
 3

	)

348 
	#UNDERFLOW
 4

	)

349 
	#TLOSS
 5

	)

350 
	#PLOSS
 6

	)

353 
	#HUGE
 3.40282347e+38F

	)

357 #ifde‡
__USE_XOPEN


359 
	#MAXFLOAT
 3.40282347e+38F

	)

366 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


367 
	#M_E
 2.7182818284590452354

	)

368 
	#M_LOG2E
 1.4426950408889634074

	)

369 
	#M_LOG10E
 0.43429448190325182765

	)

370 
	#M_LN2
 0.69314718055994530942

	)

371 
	#M_LN10
 2.30258509299404568402

	)

372 
	#M_PI
 3.14159265358979323846

	)

373 
	#M_PI_2
 1.57079632679489661923

	)

374 
	#M_PI_4
 0.78539816339744830962

	)

375 
	#M_1_PI
 0.31830988618379067154

	)

376 
	#M_2_PI
 0.63661977236758134308

	)

377 
	#M_2_SQRTPI
 1.12837916709551257390

	)

378 
	#M_SQRT2
 1.41421356237309504880

	)

379 
	#M_SQRT1_2
 0.70710678118654752440

	)

385 #ifde‡
__USE_GNU


386 
	#M_El
 2.718281828459045235360287471352662498L

	)

387 
	#M_LOG2El
 1.442695040888963407359924681001892137L

	)

388 
	#M_LOG10El
 0.434294481903251827651128918916605082L

	)

389 
	#M_LN2l
 0.693147180559945309417232121458176568L

	)

390 
	#M_LN10l
 2.302585092994045684017991454684364208L

	)

391 
	#M_PIl
 3.141592653589793238462643383279502884L

	)

392 
	#M_PI_2l
 1.570796326794896619231321691639751442L

	)

393 
	#M_PI_4l
 0.785398163397448309615660845819875721L

	)

394 
	#M_1_PIl
 0.318309886183790671537767526745028724L

	)

395 
	#M_2_PIl
 0.636619772367581343075535053490057448L

	)

396 
	#M_2_SQRTPIl
 1.128379167095512573896158903121545172L

	)

397 
	#M_SQRT2l
 1.414213562373095048801688724209698079L

	)

398 
	#M_SQRT1_2l
 0.707106781186547524400844362104849039L

	)

405 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


406 
	#__NO_MATH_INLINES
 1

	)

409 #i‡
deföed
 
__USE_ISOC99
 && 
	`__GNUC_PREREQ
(2,97)

416 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

417 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

418 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

419 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

420 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

421 
	#isun‹dîed
(
u
, 
v
Ë
	`__buûtö_isun‹dîed
(u, v)

	)

425 #ifde‡
__USE_EXTERN_INLINES


426 
	~<bôs/m©hölöe.h
>

431 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0

432 
	~<bôs/m©h-föôe.h
>

435 #ifde‡
__USE_ISOC99


439 #i‚de‡
isgª©î


440 
	#isgª©î
(
x
, 
y
) \

441 (
__exãnsi⁄__
 \

442 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

443 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; 
	}
}))

	)

447 #i‚de‡
isgª©îequÆ


448 
	#isgª©îequÆ
(
x
, 
y
) \

449 (
__exãnsi⁄__
 \

450 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

451 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

455 #i‚de‡
i¶ess


456 
	#i¶ess
(
x
, 
y
) \

457 (
__exãnsi⁄__
 \

458 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

459 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

463 #i‚de‡
i¶es£quÆ


464 
	#i¶es£quÆ
(
x
, 
y
) \

465 (
__exãnsi⁄__
 \

466 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

467 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

471 #i‚de‡
i¶essgª©î


472 
	#i¶essgª©î
(
x
, 
y
) \

473 (
__exãnsi⁄__
 \

474 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

475 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& (__x < __y || __y < __x); }))

	)

479 #i‚de‡
isun‹dîed


480 
	#isun‹dîed
(
u
, 
v
) \

481 (
__exãnsi⁄__
 \

482 ({ 
	`__ty≥of__
(
u
Ë
__u
 = (u); __ty≥of__(
v
Ë
__v
 = (v); \

483 
	`Â˛assify
 (
__u
Ë=
FP_NAN
 || fp˛assify (
__v
Ë=FP_NAN; }))

	)

488 
	g__END_DECLS


	@/usr/include/mntent.h

19 #i‚def 
_MNTENT_H


20 
	#_MNTENT_H
 1

	)

22 
	~<„©uªs.h
>

23 
	#__√ed_FILE


	)

24 
	~<°dio.h
>

25 
	~<∑ths.h
>

29 
	#MNTTAB
 
_PATH_MNTTAB


	)

32 
	#MOUNTED
 
_PATH_MOUNTED


	)

36 
	#MNTTYPE_IGNORE
 "ign‹e"

	)

37 
	#MNTTYPE_NFS
 "nfs"

	)

38 
	#MNTTYPE_SWAP
 "sw≠"

	)

42 
	#MNTOPT_DEFAULTS
 "deÁu…s"

	)

43 
	#MNTOPT_RO
 "ro"

	)

44 
	#MNTOPT_RW
 "rw"

	)

45 
	#MNTOPT_SUID
 "suid"

	)

46 
	#MNTOPT_NOSUID
 "nosuid"

	)

47 
	#MNTOPT_NOAUTO
 "nﬂuto"

	)

50 
__BEGIN_DECLS


53 
	sm¡ít


55 *
	mm¡_f¢ame
;

56 *
	mm¡_dú
;

57 *
	mm¡_ty≥
;

58 *
	mm¡_›ts
;

59 
	mm¡_‰eq
;

60 
	mm¡_∑s¢o
;

66 
FILE
 *
	$£tm¡ít
 (c⁄° *
__fûe
, c⁄° *
__mode
Ë
__THROW
;

71 
m¡ít
 *
	$gëm¡ít
 (
FILE
 *
__°ªam
Ë
__THROW
;

73 #ifde‡
__USE_MISC


75 
m¡ít
 *
	$gëm¡ít_r
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

76 
m¡ít
 *
__ª°ri˘
 
__ªsu…
,

77 *
__ª°ri˘
 
__buf„r
,

78 
__bufsize
Ë
__THROW
;

83 
	$addm¡ít
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

84 c⁄° 
m¡ít
 *
__ª°ri˘
 
__m¡
Ë
__THROW
;

87 
	$ídm¡ít
 (
FILE
 *
__°ªam
Ë
__THROW
;

91 *
	$hasm¡›t
 (c⁄° 
m¡ít
 *
__m¡
,

92 c⁄° *
__›t
Ë
__THROW
;

95 
__END_DECLS


	@/usr/include/netdb.h

22 #i‚def 
_NETDB_H


23 
	#_NETDB_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<√töë/ö.h
>

28 
	~<°döt.h
>

29 #ifde‡
__USE_MISC


32 
	~<Ωc/√tdb.h
>

35 #ifde‡
__USE_GNU


36 
	#__√ed_sigevít_t


	)

37 
	~<bôs/sigöfo.h
>

38 
	#__√ed_time•ec


	)

39 
	~<time.h
>

42 
	~<bôs/√tdb.h
>

45 
	#_PATH_HEQUIV
 "/ëc/ho°s.equiv"

	)

46 
	#_PATH_HOSTS
 "/ëc/ho°s"

	)

47 
	#_PATH_NETWORKS
 "/ëc/√tw‹ks"

	)

48 
	#_PATH_NSSWITCH_CONF
 "/ëc/nsswôch.c⁄f"

	)

49 
	#_PATH_PROTOCOLS
 "/ëc/¥Ÿocﬁs"

	)

50 
	#_PATH_SERVICES
 "/ëc/£rvi˚s"

	)

53 
	g__BEGIN_DECLS


55 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


58 
	#h_î∫o
 (*
	`__h_î∫o_loˇti⁄
 ())

	)

61 *
	$__h_î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

65 
	#HOST_NOT_FOUND
 1

	)

66 
	#TRY_AGAIN
 2

	)

68 
	#NO_RECOVERY
 3

	)

70 
	#NO_DATA
 4

	)

73 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


74 
	#NETDB_INTERNAL
 -1

	)

75 
	#NETDB_SUCCESS
 0

	)

76 
	#NO_ADDRESS
 
NO_DATA


	)

79 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_XOPEN_EXTENDED


81 
	#IPPORT_RESERVED
 1024

	)

84 #ifde‡
__USE_GNU


86 
	#SCOPE_DELIMITER
 '%'

	)

89 #ifde‡
__USE_MISC


92 
	$hîr‹
 (c⁄° *
__°r
Ë
__THROW
;

95 c⁄° *
	$h°ªº‹
 (
__îr_num
Ë
__THROW
;

100 
	sho°ít


102 *
h_«me
;

103 **
h_Æü£s
;

104 
h_addπy≥
;

105 
h_Àngth
;

106 **
h_addr_li°
;

107 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


108 
	#h_addr
 
h_addr_li°
[0]

	)

117 
	`£tho°ít
 (
__°ay_›í
);

123 
	`ídho°ít
 ();

130 
ho°ít
 *
	`gëho°ít
 ();

137 
ho°ít
 *
	`gëho°byaddr
 (c⁄° *
__addr
, 
__sockÀn_t
 
__Àn
,

138 
__ty≥
);

144 
ho°ít
 *
	`gëho°by«me
 (c⁄° *
__«me
);

146 #ifde‡
__USE_MISC


155 
ho°ít
 *
	`gëho°by«me2
 (c⁄° *
__«me
, 
__af
);

167 
	`gëho°ít_r
 (
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

168 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

169 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

170 *
__ª°ri˘
 
__h_î∫›
);

172 
	`gëho°byaddr_r
 (c⁄° *
__ª°ri˘
 
__addr
, 
__sockÀn_t
 
__Àn
,

173 
__ty≥
,

174 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

175 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

176 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

177 *
__ª°ri˘
 
__h_î∫›
);

179 
	`gëho°by«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

180 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

181 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

182 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

183 *
__ª°ri˘
 
__h_î∫›
);

185 
	`gëho°by«me2_r
 (c⁄° *
__ª°ri˘
 
__«me
, 
__af
,

186 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

187 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

188 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

189 *
__ª°ri˘
 
__h_î∫›
);

198 
	`£äëít
 (
__°ay_›í
);

204 
	`íd√ã¡
 ();

211 
√ã¡
 *
	`gë√ã¡
 ();

218 
√ã¡
 *
	`gë√tbyaddr
 (
uöt32_t
 
__√t
, 
__ty≥
);

224 
√ã¡
 *
	`gë√tby«me
 (c⁄° *
__«me
);

226 #ifdef 
__USE_MISC


237 
	`gë√ã¡_r
 (
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

238 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

239 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

240 *
__ª°ri˘
 
__h_î∫›
);

242 
	`gë√tbyaddr_r
 (
uöt32_t
 
__√t
, 
__ty≥
,

243 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

244 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

245 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

246 *
__ª°ri˘
 
__h_î∫›
);

248 
	`gë√tby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

249 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

250 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

251 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

252 *
__ª°ri˘
 
__h_î∫›
);

257 
	s£rvít


259 *
s_«me
;

260 **
s_Æü£s
;

261 
s_p‹t
;

262 *
s_¥Ÿo
;

270 
	`£t£rvít
 (
__°ay_›í
);

276 
	`íd£rvít
 ();

283 
£rvít
 *
	`gë£rvít
 ();

290 
£rvít
 *
	`gë£rvby«me
 (c⁄° *
__«me
, c⁄° *
__¥Ÿo
);

297 
£rvít
 *
	`gë£rvbyp‹t
 (
__p‹t
, c⁄° *
__¥Ÿo
);

300 #ifdef 
__USE_MISC


308 
	`gë£rvít_r
 (
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

309 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

310 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

312 
	`gë£rvby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

313 c⁄° *
__ª°ri˘
 
__¥Ÿo
,

314 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

315 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

316 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

318 
	`gë£rvbyp‹t_r
 (
__p‹t
, c⁄° *
__ª°ri˘
 
__¥Ÿo
,

319 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

320 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

321 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

326 
	s¥Ÿ€¡


328 *
p_«me
;

329 **
p_Æü£s
;

330 
p_¥Ÿo
;

338 
	`£çrŸ€¡
 (
__°ay_›í
);

344 
	`íd¥Ÿ€¡
 ();

351 
¥Ÿ€¡
 *
	`gë¥Ÿ€¡
 ();

357 
¥Ÿ€¡
 *
	`gë¥Ÿoby«me
 (c⁄° *
__«me
);

363 
¥Ÿ€¡
 *
	`gë¥Ÿobynumbî
 (
__¥Ÿo
);

366 #ifdef 
__USE_MISC


374 
	`gë¥Ÿ€¡_r
 (
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

375 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

376 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

378 
	`gë¥Ÿoby«me_r
 (c⁄° *
__ª°ri˘
 
__«me
,

379 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

380 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

381 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

383 
	`gë¥Ÿobynumbî_r
 (
__¥Ÿo
,

384 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

385 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

386 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

395 
	`£äëgª¡
 (c⁄° *
__√tgroup
);

403 
	`íd√tgª¡
 ();

412 
	`gë√tgª¡
 (**
__ª°ri˘
 
__ho°p
,

413 **
__ª°ri˘
 
__u£Ω
,

414 **
__ª°ri˘
 
__domaöp
);

423 
	`ö√tgr
 (c⁄° *
__√tgroup
, c⁄° *
__ho°
,

424 c⁄° *
__u£r
, c⁄° *
__domaö
);

432 
	`gë√tgª¡_r
 (**
__ª°ri˘
 
__ho°p
,

433 **
__ª°ri˘
 
__u£Ω
,

434 **
__ª°ri˘
 
__domaöp
,

435 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
);

439 #ifde‡
__USE_BSD


451 
	`rcmd
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

452 c⁄° *
__ª°ri˘
 
__locu£r
,

453 c⁄° *
__ª°ri˘
 
__ªmu£r
,

454 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

463 
	`rcmd_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

464 c⁄° *
__ª°ri˘
 
__locu£r
,

465 c⁄° *
__ª°ri˘
 
__ªmu£r
,

466 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

467 
ß_Ámûy_t
 
__af
);

479 
	`ªxec
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

480 c⁄° *
__ª°ri˘
 
__«me
,

481 c⁄° *
__ª°ri˘
 
__∑ss
,

482 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

491 
	`ªxec_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

492 c⁄° *
__ª°ri˘
 
__«me
,

493 c⁄° *
__ª°ri˘
 
__∑ss
,

494 c⁄° *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

495 
ß_Ámûy_t
 
__af
);

505 
	`ru£rok
 (c⁄° *
__rho°
, 
__su£r
,

506 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
);

515 
	`ru£rok_af
 (c⁄° *
__rho°
, 
__su£r
,

516 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
,

517 
ß_Ámûy_t
 
__af
);

528 
	`úu£rok
 (
uöt32_t
 
__øddr
, 
__su£r
,

529 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
);

539 
	`úu£rok_af
 (c⁄° *
__øddr
, 
__su£r
,

540 c⁄° *
__ªmu£r
, c⁄° *
__locu£r
,

541 
ß_Ámûy_t
 
__af
);

551 
	`ºesvp‹t
 (*
__Æp‹t
);

560 
	`ºesvp‹t_af
 (*
__Æp‹t
, 
ß_Ámûy_t
 
__af
);

565 #ifdef 
__USE_POSIX


567 
	saddröfo


569 
ai_Êags
;

570 
ai_Ámûy
;

571 
ai_sockty≥
;

572 
ai_¥Ÿocﬁ
;

573 
sockÀn_t
 
ai_addæí
;

574 
sockaddr
 *
ai_addr
;

575 *
ai_ˇn⁄«me
;

576 
addröfo
 *
ai_√xt
;

579 #ifde‡
__USE_GNU


581 
	sgaicb


583 c⁄° *
¨_«me
;

584 c⁄° *
¨_£rvi˚
;

585 c⁄° 
addröfo
 *
¨_ªque°
;

586 
addröfo
 *
¨_ªsu…
;

588 
__ªtu∫
;

589 
__unu£d
[5];

593 
	#GAI_WAIT
 0

	)

594 
	#GAI_NOWAIT
 1

	)

598 
	#AI_PASSIVE
 0x0001

	)

599 
	#AI_CANONNAME
 0x0002

	)

600 
	#AI_NUMERICHOST
 0x0004

	)

601 
	#AI_V4MAPPED
 0x0008

	)

602 
	#AI_ALL
 0x0010

	)

603 
	#AI_ADDRCONFIG
 0x0020

	)

605 #ifde‡
__USE_GNU


606 
	#AI_IDN
 0x0040

	)

609 
	#AI_CANONIDN
 0x0080

	)

610 
	#AI_IDN_ALLOW_UNASSIGNED
 0x0100

	)

612 
	#AI_IDN_USE_STD3_ASCII_RULES
 0x0200

	)

615 
	#AI_NUMERICSERV
 0x0400

	)

618 
	#EAI_BADFLAGS
 -1

	)

619 
	#EAI_NONAME
 -2

	)

620 
	#EAI_AGAIN
 -3

	)

621 
	#EAI_FAIL
 -4

	)

622 
	#EAI_FAMILY
 -6

	)

623 
	#EAI_SOCKTYPE
 -7

	)

624 
	#EAI_SERVICE
 -8

	)

625 
	#EAI_MEMORY
 -10

	)

626 
	#EAI_SYSTEM
 -11

	)

627 
	#EAI_OVERFLOW
 -12

	)

628 #ifde‡
__USE_GNU


629 
	#EAI_NODATA
 -5

	)

630 
	#EAI_ADDRFAMILY
 -9

	)

631 
	#EAI_INPROGRESS
 -100

	)

632 
	#EAI_CANCELED
 -101

	)

633 
	#EAI_NOTCANCELED
 -102

	)

634 
	#EAI_ALLDONE
 -103

	)

635 
	#EAI_INTR
 -104

	)

636 
	#EAI_IDN_ENCODE
 -105

	)

639 #ifde‡
__USE_MISC


640 
	#NI_MAXHOST
 1025

	)

641 
	#NI_MAXSERV
 32

	)

644 
	#NI_NUMERICHOST
 1

	)

645 
	#NI_NUMERICSERV
 2

	)

646 
	#NI_NOFQDN
 4

	)

647 
	#NI_NAMEREQD
 8

	)

648 
	#NI_DGRAM
 16

	)

649 #ifde‡
__USE_GNU


650 
	#NI_IDN
 32

	)

651 
	#NI_IDN_ALLOW_UNASSIGNED
 64

	)

653 
	#NI_IDN_USE_STD3_ASCII_RULES
 128

	)

662 
	`gëaddröfo
 (c⁄° *
__ª°ri˘
 
__«me
,

663 c⁄° *
__ª°ri˘
 
__£rvi˚
,

664 c⁄° 
addröfo
 *
__ª°ri˘
 
__ªq
,

665 
addröfo
 **
__ª°ri˘
 
__∑i
);

668 
	$‰ìaddröfo
 (
addröfo
 *
__ai
Ë
__THROW
;

671 c⁄° *
	$gai_°ªº‹
 (
__ecode
Ë
__THROW
;

677 
	`gë«meöfo
 (c⁄° 
sockaddr
 *
__ª°ri˘
 
__ß
,

678 
sockÀn_t
 
__ßÀn
, *
__ª°ri˘
 
__ho°
,

679 
sockÀn_t
 
__ho°Àn
, *
__ª°ri˘
 
__£rv
,

680 
sockÀn_t
 
__£rvÀn
, 
__Êags
);

683 #ifde‡
__USE_GNU


692 
	`gëaddröfo_a
 (
__mode
, 
gaicb
 *
__li°
[
__ª°ri˘_¨r
],

693 
__ít
, 
sigevít
 *
__ª°ri˘
 
__sig
);

703 
	`gai_su•íd
 (c⁄° 
gaicb
 *c⁄° 
__li°
[], 
__ít
,

704 c⁄° 
time•ec
 *
__timeout
);

707 
	$gai_îr‹
 (
gaicb
 *
__ªq
Ë
__THROW
;

710 
	$gai_ˇn˚l
 (
gaicb
 *
__gaicbp
Ë
__THROW
;

713 
__END_DECLS


	@/usr/include/netinet/in.h

18 #i‚def 
_NETINET_IN_H


19 
	#_NETINET_IN_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<°döt.h
>

23 
	~<sys/sockë.h
>

24 
	~<bôs/ty≥s.h
>

27 
__BEGIN_DECLS


32 
	mIPPROTO_IP
 = 0,

33 
	#IPPROTO_IP
 
IPPROTO_IP


	)

34 
	mIPPROTO_HOPOPTS
 = 0,

35 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

36 
	mIPPROTO_ICMP
 = 1,

37 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

38 
	mIPPROTO_IGMP
 = 2,

39 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

40 
	mIPPROTO_IPIP
 = 4,

41 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

42 
	mIPPROTO_TCP
 = 6,

43 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

44 
	mIPPROTO_EGP
 = 8,

45 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

46 
	mIPPROTO_PUP
 = 12,

47 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

48 
	mIPPROTO_UDP
 = 17,

49 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

50 
	mIPPROTO_IDP
 = 22,

51 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

52 
	mIPPROTO_TP
 = 29,

53 
	#IPPROTO_TP
 
IPPROTO_TP


	)

54 
	mIPPROTO_DCCP
 = 33,

55 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

56 
	mIPPROTO_IPV6
 = 41,

57 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

58 
	mIPPROTO_ROUTING
 = 43,

59 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

60 
	mIPPROTO_FRAGMENT
 = 44,

61 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

62 
	mIPPROTO_RSVP
 = 46,

63 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

64 
	mIPPROTO_GRE
 = 47,

65 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

66 
	mIPPROTO_ESP
 = 50,

67 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

68 
	mIPPROTO_AH
 = 51,

69 
	#IPPROTO_AH
 
IPPROTO_AH


	)

70 
	mIPPROTO_ICMPV6
 = 58,

71 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

72 
	mIPPROTO_NONE
 = 59,

73 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

74 
	mIPPROTO_DSTOPTS
 = 60,

75 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

76 
	mIPPROTO_MTP
 = 92,

77 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

78 
	mIPPROTO_ENCAP
 = 98,

79 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

80 
	mIPPROTO_PIM
 = 103,

81 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

82 
	mIPPROTO_COMP
 = 108,

83 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

84 
	mIPPROTO_SCTP
 = 132,

85 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

86 
	mIPPROTO_UDPLITE
 = 136,

87 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

88 
	mIPPROTO_RAW
 = 255,

89 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

90 
	mIPPROTO_MAX


95 
uöt16_t
 
	tö_p‹t_t
;

100 
	mIPPORT_ECHO
 = 7,

101 
	mIPPORT_DISCARD
 = 9,

102 
	mIPPORT_SYSTAT
 = 11,

103 
	mIPPORT_DAYTIME
 = 13,

104 
	mIPPORT_NETSTAT
 = 15,

105 
	mIPPORT_FTP
 = 21,

106 
	mIPPORT_TELNET
 = 23,

107 
	mIPPORT_SMTP
 = 25,

108 
	mIPPORT_TIMESERVER
 = 37,

109 
	mIPPORT_NAMESERVER
 = 42,

110 
	mIPPORT_WHOIS
 = 43,

111 
	mIPPORT_MTP
 = 57,

113 
	mIPPORT_TFTP
 = 69,

114 
	mIPPORT_RJE
 = 77,

115 
	mIPPORT_FINGER
 = 79,

116 
	mIPPORT_TTYLINK
 = 87,

117 
	mIPPORT_SUPDUP
 = 95,

120 
	mIPPORT_EXECSERVER
 = 512,

121 
	mIPPORT_LOGINSERVER
 = 513,

122 
	mIPPORT_CMDSERVER
 = 514,

123 
	mIPPORT_EFSSERVER
 = 520,

126 
	mIPPORT_BIFFUDP
 = 512,

127 
	mIPPORT_WHOSERVER
 = 513,

128 
	mIPPORT_ROUTESERVER
 = 520,

131 
	mIPPORT_RESERVED
 = 1024,

134 
	mIPPORT_USERRESERVED
 = 5000

139 
uöt32_t
 
	tö_addr_t
;

140 
	sö_addr


142 
ö_addr_t
 
	ms_addr
;

151 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

152 
	#IN_CLASSA_NET
 0xff000000

	)

153 
	#IN_CLASSA_NSHIFT
 24

	)

154 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

155 
	#IN_CLASSA_MAX
 128

	)

157 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

158 
	#IN_CLASSB_NET
 0xffff0000

	)

159 
	#IN_CLASSB_NSHIFT
 16

	)

160 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

161 
	#IN_CLASSB_MAX
 65536

	)

163 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

164 
	#IN_CLASSC_NET
 0xffffff00

	)

165 
	#IN_CLASSC_NSHIFT
 8

	)

166 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

168 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

169 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

171 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

172 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

175 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

177 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

179 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

182 
	#IN_LOOPBACKNET
 127

	)

184 #i‚de‡
INADDR_LOOPBACK


185 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

189 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

190 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

191 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

192 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

196 
	sö6_addr


200 
uöt8_t
 
	m__u6_addr8
[16];

201 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


202 
uöt16_t
 
	m__u6_addr16
[8];

203 
uöt32_t
 
	m__u6_addr32
[4];

205 } 
	m__ö6_u
;

206 
	#s6_addr
 
__ö6_u
.
__u6_addr8


	)

207 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


208 
	#s6_addr16
 
__ö6_u
.
__u6_addr16


	)

209 
	#s6_addr32
 
__ö6_u
.
__u6_addr32


	)

213 c⁄° 
ö6_addr
 
ö6addr_™y
;

214 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

215 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

216 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

218 
	#INET_ADDRSTRLEN
 16

	)

219 
	#INET6_ADDRSTRLEN
 46

	)

223 
	ssockaddr_ö


225 
__SOCKADDR_COMMON
 (
sö_
);

226 
ö_p‹t_t
 
	msö_p‹t
;

227 
ö_addr
 
	msö_addr
;

230 
	msö_zîo
[ (
sockaddr
) -

231 
__SOCKADDR_COMMON_SIZE
 -

232  (
ö_p‹t_t
) -

233  (
ö_addr
)];

237 
	ssockaddr_ö6


239 
__SOCKADDR_COMMON
 (
sö6_
);

240 
ö_p‹t_t
 
	msö6_p‹t
;

241 
uöt32_t
 
	msö6_Êowöfo
;

242 
ö6_addr
 
	msö6_addr
;

243 
uöt32_t
 
	msö6_sc›e_id
;

247 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


249 
	sù_mªq


252 
ö_addr
 
	mimr_mu…üddr
;

255 
ö_addr
 
	mimr_öãrÁ˚
;

258 
	sù_mªq_sour˚


261 
ö_addr
 
	mimr_mu…üddr
;

264 
ö_addr
 
	mimr_öãrÁ˚
;

267 
ö_addr
 
	mimr_sour˚addr
;

273 
	sùv6_mªq


276 
ö6_addr
 
	mùv6mr_mu…üddr
;

279 
	mùv6mr_öãrÁ˚
;

283 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


285 
	sgroup_ªq


288 
uöt32_t
 
	mgr_öãrÁ˚
;

291 
sockaddr_°‹age
 
	mgr_group
;

294 
	sgroup_sour˚_ªq


297 
uöt32_t
 
	mg§_öãrÁ˚
;

300 
sockaddr_°‹age
 
	mg§_group
;

303 
sockaddr_°‹age
 
	mg§_sour˚
;

308 
	sù_msfûãr


311 
ö_addr
 
	mimsf_mu…üddr
;

314 
ö_addr
 
	mimsf_öãrÁ˚
;

317 
uöt32_t
 
	mimsf_fmode
;

320 
uöt32_t
 
	mimsf_num§c
;

322 
ö_addr
 
	mimsf_¶i°
[1];

325 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

326 -  (
ö_addr
) \

327 + (
num§c
Ë*  (
ö_addr
))

	)

329 
	sgroup_fûãr


332 
uöt32_t
 
	mgf_öãrÁ˚
;

335 
sockaddr_°‹age
 
	mgf_group
;

338 
uöt32_t
 
	mgf_fmode
;

341 
uöt32_t
 
	mgf_num§c
;

343 
sockaddr_°‹age
 
	mgf_¶i°
[1];

346 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

347 -  (
sockaddr_°‹age
) \

348 + ((
num§c
) \

349 *  (
sockaddr_°‹age
)))

	)

354 
	~<bôs/ö.h
>

363 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

364 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

365 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

366 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

367 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

368 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

369 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

371 
	~<ídün.h
>

374 
	~<bôs/byãsw≠.h
>

376 #ifde‡
__OPTIMIZE__


380 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


383 
	#¡ohl
(
x
Ë(x)

	)

384 
	#¡ohs
(
x
Ë(x)

	)

385 
	#ht⁄l
(
x
Ë(x)

	)

386 
	#ht⁄s
(
x
Ë(x)

	)

388 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


389 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

390 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

391 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

392 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

397 #ifde‡
__GNUC__


398 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

399 (
__exãnsi⁄__
 \

400 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

401 
__a
->
s6_addr32
[0] == 0 \

402 && 
__a
->
s6_addr32
[1] == 0 \

403 && 
__a
->
s6_addr32
[2] == 0 \

404 && 
__a
->
s6_addr32
[3] =0; 
	}
}))

	)

406 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

407 (
__exãnsi⁄__
 \

408 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

409 
__a
->
s6_addr32
[0] == 0 \

410 && 
__a
->
s6_addr32
[1] == 0 \

411 && 
__a
->
s6_addr32
[2] == 0 \

412 && 
__a
->
s6_addr32
[3] =
	`ht⁄l
 (1); }))

	)

414 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

415 (
__exãnsi⁄__
 \

416 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

417 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„800000); }))

	)

419 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

420 (
__exãnsi⁄__
 \

421 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

422 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„c00000); }))

	)

424 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

425 (
__exãnsi⁄__
 \

426 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

427 
__a
->
s6_addr32
[0] == 0 \

428 && 
__a
->
s6_addr32
[1] == 0 \

429 && 
__a
->
s6_addr32
[2] =
	`ht⁄l
 (0xffff); }))

	)

431 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

432 (
__exãnsi⁄__
 \

433 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

434 
__a
->
s6_addr32
[0] == 0 \

435 && 
__a
->
s6_addr32
[1] == 0 \

436 && 
__a
->
s6_addr32
[2] == 0 \

437 && 
	`¡ohl
 (
__a
->
s6_addr32
[3]Ë> 1; }))

	)

439 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

440 (
__exãnsi⁄__
 \

441 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

442 c⁄° 
ö6_addr
 *
__b
 = (c⁄° ö6_add∏*Ë(
b
); \

443 
__a
->
s6_addr32
[0] =
__b
->s6_addr32[0] \

444 && 
__a
->
s6_addr32
[1] =
__b
->s6_addr32[1] \

445 && 
__a
->
s6_addr32
[2] =
__b
->s6_addr32[2] \

446 && 
__a
->
s6_addr32
[3] =
__b
->s6_addr32[3]; }))

	)

448 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

449 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

450 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

451 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

452 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =0)

	)

454 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

455 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

456 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

457 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

458 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

460 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

461 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

462 =
	`ht⁄l
 (0x„800000))

	)

464 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

465 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

466 =
	`ht⁄l
 (0x„c00000))

	)

468 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

469 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

470 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

471 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

473 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

474 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

475 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

476 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0) \

477 && (
	`¡ohl
 (((c⁄° 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

479 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

480 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] =((c⁄° uöt32_à*Ë(
b
))[0]) \

481 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] =((c⁄° uöt32_à*Ë(
b
))[1]) \

482 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =((c⁄° uöt32_à*Ë(
b
))[2]) \

483 && (((c⁄° 
uöt32_t
 *Ë(
a
))[3] =((c⁄° uöt32_à*Ë(
b
))[3]))

	)

486 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((c⁄° 
uöt8_t
 *Ë◊))[0] =0xff)

	)

488 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


490 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

493 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

494 
__THROW
;

498 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

499 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

500 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

502 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

503 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

504 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

506 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

507 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

508 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

510 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

511 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

512 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

514 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

515 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

516 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

519 #ifde‡
__USE_GNU


520 
cmsghdr
;

523 
	sö6_pktöfo


525 
ö6_addr
 
ùi6_addr
;

526 
ùi6_ifödex
;

530 
	sù6_mtuöfo


532 
sockaddr_ö6
 
ù6m_addr
;

533 
uöt32_t
 
ù6m_mtu
;

538 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
)

539 
__THROW
 
__©åibuã_dïªˇãd__
;

540 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

541 
__ty≥
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

542 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

543 c⁄° 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

544 
__∂usy
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

545 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

546 
__mu…x
, 
__∂usy
)

547 
__THROW
 
__©åibuã_dïªˇãd__
;

548 
	$öë6_›ti⁄_√xt
 (c⁄° 
cmsghdr
 *
__cmsg
,

549 
uöt8_t
 **
__çåp
)

550 
__THROW
 
__©åibuã_dïªˇãd__
;

551 
	$öë6_›ti⁄_föd
 (c⁄° 
cmsghdr
 *
__cmsg
,

552 
uöt8_t
 **
__çåp
, 
__ty≥
)

553 
__THROW
 
__©åibuã_dïªˇãd__
;

557 
	$öë6_›t_öô
 (*
__extbuf
, 
sockÀn_t
 
__exéí
Ë
__THROW
;

558 
	$öë6_›t_≠≥nd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

559 
uöt8_t
 
__ty≥
, 
sockÀn_t
 
__Àn
, uöt8_à
__Æign
,

560 **
__d©abuÂ
Ë
__THROW
;

561 
	$öë6_›t_föish
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
)

562 
__THROW
;

563 
	$öë6_›t_£t_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

564 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

565 
	$öë6_›t_√xt
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

566 
uöt8_t
 *
__ty≥p
, 
sockÀn_t
 *
__À≈
,

567 **
__d©abuÂ
Ë
__THROW
;

568 
	$öë6_›t_föd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

569 
uöt8_t
 
__ty≥
, 
sockÀn_t
 *
__À≈
,

570 **
__d©abuÂ
Ë
__THROW
;

571 
	$öë6_›t_gë_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

572 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

576 
sockÀn_t
 
	$öë6_πh_•a˚
 (
__ty≥
, 
__£gmíts
Ë
__THROW
;

577 *
	$öë6_πh_öô
 (*
__bp
, 
sockÀn_t
 
__bp_Àn
, 
__ty≥
,

578 
__£gmíts
Ë
__THROW
;

579 
	$öë6_πh_add
 (*
__bp
, c⁄° 
ö6_addr
 *
__addr
Ë
__THROW
;

580 
	$öë6_πh_ªvî£
 (c⁄° *
__ö
, *
__out
Ë
__THROW
;

581 
	$öë6_πh_£gmíts
 (c⁄° *
__bp
Ë
__THROW
;

582 
ö6_addr
 *
	$öë6_πh_gëaddr
 (c⁄° *
__bp
, 
__ödex
)

583 
__THROW
;

589 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

590 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

591 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

592 
__THROW
;

595 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

596 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

597 
uöt32_t
 
__num§c
,

598 c⁄° 
ö_addr
 *
__¶i°
)

599 
__THROW
;

603 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

604 c⁄° 
sockaddr
 *
__group
,

605 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

606 
uöt32_t
 *
__num§c
,

607 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

610 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

611 c⁄° 
sockaddr
 *
__group
,

612 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

613 
uöt32_t
 
__num§c
,

614 c⁄° 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

617 
__END_DECLS


	@/usr/include/netinet/tcp.h

32 #i‚de‡
_NETINET_TCP_H


33 
	#_NETINET_TCP_H
 1

	)

35 
	~<„©uªs.h
>

40 
	#TCP_NODELAY
 1

	)

41 
	#TCP_MAXSEG
 2

	)

42 
	#TCP_CORK
 3

	)

43 
	#TCP_KEEPIDLE
 4

	)

44 
	#TCP_KEEPINTVL
 5

	)

45 
	#TCP_KEEPCNT
 6

	)

46 
	#TCP_SYNCNT
 7

	)

47 
	#TCP_LINGER2
 8

	)

48 
	#TCP_DEFER_ACCEPT
 9

	)

49 
	#TCP_WINDOW_CLAMP
 10

	)

50 
	#TCP_INFO
 11

	)

51 
	#TCP_QUICKACK
 12

	)

52 
	#TCP_CONGESTION
 13

	)

53 
	#TCP_MD5SIG
 14

	)

54 
	#TCP_COOKIE_TRANSACTIONS
 15

	)

55 
	#TCP_THIN_LINEAR_TIMEOUTS
 16

	)

56 
	#TCP_THIN_DUPACK
 17

	)

57 
	#TCP_USER_TIMEOUT
 18

	)

58 
	#TCP_REPAIR
 19

	)

59 
	#TCP_REPAIR_QUEUE
 20

	)

60 
	#TCP_QUEUE_SEQ
 21

	)

61 
	#TCP_REPAIR_OPTIONS
 22

	)

62 
	#TCP_FASTOPEN
 23

	)

63 
	#TCP_TIMESTAMP
 24

	)

65 #ifde‡
__USE_MISC


66 
	~<sys/ty≥s.h
>

67 
	~<sys/sockë.h
>

69 #ifde‡
__FAVOR_BSD


70 
u_öt32_t
 
	tt˝_£q
;

75 
	st˝hdr


77 
u_öt16_t
 
	mth_•‹t
;

78 
u_öt16_t
 
	mth_dp‹t
;

79 
t˝_£q
 
	mth_£q
;

80 
t˝_£q
 
	mth_ack
;

81 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


82 
u_öt8_t
 
	mth_x2
:4;

83 
u_öt8_t
 
	mth_off
:4;

85 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


86 
u_öt8_t
 
	mth_off
:4;

87 
u_öt8_t
 
	mth_x2
:4;

89 
u_öt8_t
 
	mth_Êags
;

90 
	#TH_FIN
 0x01

	)

91 
	#TH_SYN
 0x02

	)

92 
	#TH_RST
 0x04

	)

93 
	#TH_PUSH
 0x08

	)

94 
	#TH_ACK
 0x10

	)

95 
	#TH_URG
 0x20

	)

96 
u_öt16_t
 
	mth_wö
;

97 
u_öt16_t
 
	mth_sum
;

98 
u_öt16_t
 
	mth_uΩ
;

102 
	st˝hdr


104 
u_öt16_t
 
	msour˚
;

105 
u_öt16_t
 
	mde°
;

106 
u_öt32_t
 
	m£q
;

107 
u_öt32_t
 
	mack_£q
;

108 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


109 
u_öt16_t
 
	mªs1
:4;

110 
u_öt16_t
 
	mdoff
:4;

111 
u_öt16_t
 
	mfö
:1;

112 
u_öt16_t
 
	msyn
:1;

113 
u_öt16_t
 
	mr°
:1;

114 
u_öt16_t
 
	mpsh
:1;

115 
u_öt16_t
 
	mack
:1;

116 
u_öt16_t
 
	murg
:1;

117 
u_öt16_t
 
	mªs2
:2;

118 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


119 
u_öt16_t
 
	mdoff
:4;

120 
u_öt16_t
 
	mªs1
:4;

121 
u_öt16_t
 
	mªs2
:2;

122 
u_öt16_t
 
	murg
:1;

123 
u_öt16_t
 
	mack
:1;

124 
u_öt16_t
 
	mpsh
:1;

125 
u_öt16_t
 
	mr°
:1;

126 
u_öt16_t
 
	msyn
:1;

127 
u_öt16_t
 
	mfö
:1;

131 
u_öt16_t
 
	mwödow
;

132 
u_öt16_t
 
	mcheck
;

133 
u_öt16_t
 
	murg_±r
;

139 
	mTCP_ESTABLISHED
 = 1,

140 
	mTCP_SYN_SENT
,

141 
	mTCP_SYN_RECV
,

142 
	mTCP_FIN_WAIT1
,

143 
	mTCP_FIN_WAIT2
,

144 
	mTCP_TIME_WAIT
,

145 
	mTCP_CLOSE
,

146 
	mTCP_CLOSE_WAIT
,

147 
	mTCP_LAST_ACK
,

148 
	mTCP_LISTEN
,

149 
	mTCP_CLOSING


152 
	#TCPOPT_EOL
 0

	)

153 
	#TCPOPT_NOP
 1

	)

154 
	#TCPOPT_MAXSEG
 2

	)

155 
	#TCPOLEN_MAXSEG
 4

	)

156 
	#TCPOPT_WINDOW
 3

	)

157 
	#TCPOLEN_WINDOW
 3

	)

158 
	#TCPOPT_SACK_PERMITTED
 4

	)

159 
	#TCPOLEN_SACK_PERMITTED
 2

	)

160 
	#TCPOPT_SACK
 5

	)

161 
	#TCPOPT_TIMESTAMP
 8

	)

162 
	#TCPOLEN_TIMESTAMP
 10

	)

163 
	#TCPOLEN_TSTAMP_APPA
 (
TCPOLEN_TIMESTAMP
+2Ë

	)

165 
	#TCPOPT_TSTAMP_HDR
 \

166 (
TCPOPT_NOP
<<24|TCPOPT_NOP<<16|
TCPOPT_TIMESTAMP
<<8|
TCPOLEN_TIMESTAMP
)

	)

174 
	#TCP_MSS
 512

	)

176 
	#TCP_MAXWIN
 65535

	)

178 
	#TCP_MAX_WINSHIFT
 14

	)

180 
	#SOL_TCP
 6

	)

183 
	#TCPI_OPT_TIMESTAMPS
 1

	)

184 
	#TCPI_OPT_SACK
 2

	)

185 
	#TCPI_OPT_WSCALE
 4

	)

186 
	#TCPI_OPT_ECN
 8

	)

187 
	#TCPI_OPT_ECN_SEEN
 16

	)

188 
	#TCPI_OPT_SYN_DATA
 32

	)

191 
	et˝_ˇ_°©e


193 
	mTCP_CA_O≥n
 = 0,

194 
	mTCP_CA_Dis‹dî
 = 1,

195 
	mTCP_CA_CWR
 = 2,

196 
	mTCP_CA_Recovîy
 = 3,

197 
	mTCP_CA_Loss
 = 4

200 
	st˝_öfo


202 
u_öt8_t
 
	mt˝i_°©e
;

203 
u_öt8_t
 
	mt˝i_ˇ_°©e
;

204 
u_öt8_t
 
	mt˝i_ªå™smôs
;

205 
u_öt8_t
 
	mt˝i_¥obes
;

206 
u_öt8_t
 
	mt˝i_backoff
;

207 
u_öt8_t
 
	mt˝i_›ti⁄s
;

208 
u_öt8_t
 
	mt˝i_¢d_wsˇÀ
 : 4, 
	mt˝i_rcv_wsˇÀ
 : 4;

210 
u_öt32_t
 
	mt˝i_πo
;

211 
u_öt32_t
 
	mt˝i_©o
;

212 
u_öt32_t
 
	mt˝i_¢d_mss
;

213 
u_öt32_t
 
	mt˝i_rcv_mss
;

215 
u_öt32_t
 
	mt˝i_u«cked
;

216 
u_öt32_t
 
	mt˝i_ßcked
;

217 
u_öt32_t
 
	mt˝i_lo°
;

218 
u_öt32_t
 
	mt˝i_ªå™s
;

219 
u_öt32_t
 
	mt˝i_Áckës
;

222 
u_öt32_t
 
	mt˝i_œ°_d©a_£¡
;

223 
u_öt32_t
 
	mt˝i_œ°_ack_£¡
;

224 
u_öt32_t
 
	mt˝i_œ°_d©a_ªcv
;

225 
u_öt32_t
 
	mt˝i_œ°_ack_ªcv
;

228 
u_öt32_t
 
	mt˝i_pmtu
;

229 
u_öt32_t
 
	mt˝i_rcv_s°hªsh
;

230 
u_öt32_t
 
	mt˝i_πt
;

231 
u_öt32_t
 
	mt˝i_πtv¨
;

232 
u_öt32_t
 
	mt˝i_¢d_s°hªsh
;

233 
u_öt32_t
 
	mt˝i_¢d_cwnd
;

234 
u_öt32_t
 
	mt˝i_advmss
;

235 
u_öt32_t
 
	mt˝i_ª‹dîög
;

237 
u_öt32_t
 
	mt˝i_rcv_πt
;

238 
u_öt32_t
 
	mt˝i_rcv_•a˚
;

240 
u_öt32_t
 
	mt˝i_tŸÆ_ªå™s
;

245 
	#TCP_MD5SIG_MAXKEYLEN
 80

	)

247 
	st˝_md5sig


249 
sockaddr_°‹age
 
	mt˝m_addr
;

250 
u_öt16_t
 
	m__t˝m_∑d1
;

251 
u_öt16_t
 
	mt˝m_keyÀn
;

252 
u_öt32_t
 
	m__t˝m_∑d2
;

253 
u_öt8_t
 
	mt˝m_key
[
TCP_MD5SIG_MAXKEYLEN
];

257 
	st˝_ª∑ú_›t


259 
u_öt32_t
 
	m›t_code
;

260 
u_öt32_t
 
	m›t_vÆ
;

266 
	mTCP_NO_QUEUE
,

267 
	mTCP_RECV_QUEUE
,

268 
	mTCP_SEND_QUEUE
,

269 
	mTCP_QUEUES_NR
,

273 
	#TCP_COOKIE_MIN
 8

	)

274 
	#TCP_COOKIE_MAX
 16

	)

275 
	#TCP_COOKIE_PAIR_SIZE
 (2*
TCP_COOKIE_MAX
)

	)

278 
	#TCP_COOKIE_IN_ALWAYS
 (1 << 0Ë

	)

279 
	#TCP_COOKIE_OUT_NEVER
 (1 << 1Ë

	)

283 
	#TCP_S_DATA_IN
 (1 << 2Ë

	)

284 
	#TCP_S_DATA_OUT
 (1 << 3Ë

	)

286 
	#TCP_MSS_DEFAULT
 536U

	)

287 
	#TCP_MSS_DESIRED
 1220U

	)

289 
	st˝_cookõ_å™ß˘i⁄s


291 
u_öt16_t
 
	mt˝˘_Êags
;

292 
u_öt8_t
 
	m__t˝˘_∑d1
;

293 
u_öt8_t
 
	mt˝˘_cookõ_desúed
;

294 
u_öt16_t
 
	mt˝˘_s_d©a_desúed
;

295 
u_öt16_t
 
	mt˝˘_u£d
;

296 
u_öt8_t
 
	mt˝˘_vÆue
[
TCP_MSS_DEFAULT
];

	@/usr/include/pthread.h

18 #i‚de‡
_PTHREAD_H


19 
	#_PTHREAD_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<ídün.h
>

23 
	~<sched.h
>

24 
	~<time.h
>

26 
	~<bôs/±hªadty≥s.h
>

27 
	~<bôs/£tjmp.h
>

28 
	~<bôs/w‹dsize.h
>

34 
	mPTHREAD_CREATE_JOINABLE
,

35 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

36 
	mPTHREAD_CREATE_DETACHED


37 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

44 
	mPTHREAD_MUTEX_TIMED_NP
,

45 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

46 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

47 
	mPTHREAD_MUTEX_ADAPTIVE_NP


48 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


50 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

51 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

52 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

53 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


55 #ifde‡
__USE_GNU


57 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


62 #ifde‡
__USE_XOPEN2K


66 
	mPTHREAD_MUTEX_STALLED
,

67 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

68 
	mPTHREAD_MUTEX_ROBUST
,

69 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


74 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


78 
	mPTHREAD_PRIO_NONE
,

79 
	mPTHREAD_PRIO_INHERIT
,

80 
	mPTHREAD_PRIO_PROTECT


86 #i‡
__PTHREAD_MUTEX_HAVE_ELISION
 == 1

87 
	#__PTHREAD_SPINS
 0, 0

	)

88 #ñi‡
__PTHREAD_MUTEX_HAVE_ELISION
 == 2

89 
	#__PTHREAD_SPINS
 { 0, 0 }

	)

91 
	#__PTHREAD_SPINS
 0

	)

94 #ifde‡
__PTHREAD_MUTEX_HAVE_PREV


95 
	#PTHREAD_MUTEX_INITIALIZER
 \

96 { { 0, 0, 0, 0, 0, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

97 #ifde‡
__USE_GNU


98 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

99 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

100 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

101 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

102 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

103 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

104 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

105 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

109 
	#PTHREAD_MUTEX_INITIALIZER
 \

110 { { 0, 0, 0, 0, 0, { 
__PTHREAD_SPINS
 } } }

	)

111 #ifde‡
__USE_GNU


112 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

113 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

114 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

115 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

116 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

117 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

124 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


127 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

128 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

129 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

130 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


136 #i‚de‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


137 #i‡
__WORDSIZE
 == 64

138 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

143 
	#PTHREAD_RWLOCK_INITIALIZER
 \

144 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

145 #ifde‡
__USE_GNU


146 #ifde‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


147 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

149 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

151 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


152 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

153 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

154 0, 0, 0, 0 } }

	)

156 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

157 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

158 0 } }

	)

168 
	mPTHREAD_INHERIT_SCHED
,

169 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

170 
	mPTHREAD_EXPLICIT_SCHED


171 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

178 
	mPTHREAD_SCOPE_SYSTEM
,

179 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

180 
	mPTHREAD_SCOPE_PROCESS


181 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

188 
	mPTHREAD_PROCESS_PRIVATE
,

189 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

190 
	mPTHREAD_PROCESS_SHARED


191 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

197 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

201 
	s_±hªad_˛ónup_buf„r


203 (*
	m__routöe
) (*);

204 *
	m__¨g
;

205 
	m__ˇn˚…y≥
;

206 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

212 
	mPTHREAD_CANCEL_ENABLE
,

213 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

214 
	mPTHREAD_CANCEL_DISABLE


215 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

219 
	mPTHREAD_CANCEL_DEFERRED
,

220 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

221 
	mPTHREAD_CANCEL_ASYNCHRONOUS


222 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

224 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

228 
	#PTHREAD_ONCE_INIT
 0

	)

231 #ifde‡
__USE_XOPEN2K


235 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

239 
__BEGIN_DECLS


244 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

245 c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

246 *(*
__°¨t_routöe
) (*),

247 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
__n⁄nuŒ
 ((1, 3));

253 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

261 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

263 #ifde‡
__USE_GNU


266 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

274 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

275 c⁄° 
time•ec
 *
__ab°ime
);

282 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

286 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

289 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
)

290 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

298 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

301 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

302 
__THROW
 
	`__n⁄nuŒ
 ((1));

305 
	$±hªad_©å_gëdëach°©e
 (c⁄° 
±hªad_©å_t
 *
__©å
,

306 *
__dëach°©e
)

307 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

310 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

311 
__dëach°©e
)

312 
__THROW
 
	`__n⁄nuŒ
 ((1));

316 
	$±hªad_©å_gëgu¨dsize
 (c⁄° 
±hªad_©å_t
 *
__©å
,

317 
size_t
 *
__gu¨dsize
)

318 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

321 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

322 
size_t
 
__gu¨dsize
)

323 
__THROW
 
	`__n⁄nuŒ
 ((1));

327 
	$±hªad_©å_gësched∑øm
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

328 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

332 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

333 c⁄° 
sched_∑øm
 *
__ª°ri˘


334 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

337 
	$±hªad_©å_gëschedpﬁicy
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


338 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

339 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

342 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

343 
__THROW
 
	`__n⁄nuŒ
 ((1));

346 
	$±hªad_©å_gëöhîôsched
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


347 
__©å
, *
__ª°ri˘
 
__öhîô
)

348 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

351 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

352 
__öhîô
)

353 
__THROW
 
	`__n⁄nuŒ
 ((1));

357 
	$±hªad_©å_gësc›e
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

358 *
__ª°ri˘
 
__sc›e
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

362 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

363 
__THROW
 
	`__n⁄nuŒ
 ((1));

366 
	$±hªad_©å_gë°ackaddr
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


367 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

368 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

374 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

375 *
__°ackaddr
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

379 
	$±hªad_©å_gë°acksize
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


380 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

381 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

386 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

387 
size_t
 
__°acksize
)

388 
__THROW
 
	`__n⁄nuŒ
 ((1));

390 #ifde‡
__USE_XOPEN2K


392 
	$±hªad_©å_gë°ack
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

393 **
__ª°ri˘
 
__°ackaddr
,

394 
size_t
 *
__ª°ri˘
 
__°acksize
)

395 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

400 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

401 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

404 #ifde‡
__USE_GNU


407 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

408 
size_t
 
__˝u£tsize
,

409 c⁄° 
˝u_£t_t
 *
__˝u£t
)

410 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

414 
	$±hªad_©å_gëafföôy_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
,

415 
size_t
 
__˝u£tsize
,

416 
˝u_£t_t
 *
__˝u£t
)

417 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

420 
	$±hªad_gë©å_deÁu…_≈
 (
±hªad_©å_t
 *
__©å
)

421 
__THROW
 
	`__n⁄nuŒ
 ((1));

425 
	$±hªad_£èâr_deÁu…_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
)

426 
__THROW
 
	`__n⁄nuŒ
 ((1));

431 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

441 c⁄° 
sched_∑øm
 *
__∑øm
)

442 
__THROW
 
	`__n⁄nuŒ
 ((3));

445 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

446 *
__ª°ri˘
 
__pﬁicy
,

447 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

448 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

451 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

452 
__THROW
;

455 #ifde‡
__USE_GNU


457 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

458 
size_t
 
__buÊí
)

459 
__THROW
 
	`__n⁄nuŒ
 ((2));

462 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, c⁄° *
__«me
)

463 
__THROW
 
	`__n⁄nuŒ
 ((2));

467 #ifde‡
__USE_UNIX98


469 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

472 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

475 #ifde‡
__USE_GNU


480 
	$±hªad_yõld
 (Ë
__THROW
;

485 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

486 c⁄° 
˝u_£t_t
 *
__˝u£t
)

487 
__THROW
 
	`__n⁄nuŒ
 ((3));

490 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

491 
˝u_£t_t
 *
__˝u£t
)

492 
__THROW
 
	`__n⁄nuŒ
 ((3));

505 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

506 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

517 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

521 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

524 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

529 
	`±hªad_ã°ˇn˚l
 ();

538 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

539 
__mask_was_ßved
;

540 } 
__ˇn˚l_jmp_buf
[1];

541 *
__∑d
[4];

542 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

545 #i‚de‡
__˛ónup_f˘_©åibuã


546 
	#__˛ónup_f˘_©åibuã


	)

551 
	s__±hªad_˛ónup_‰ame


553 (*
__ˇn˚l_routöe
) (*);

554 *
__ˇn˚l_¨g
;

555 
__do_ô
;

556 
__ˇn˚l_ty≥
;

559 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


560 #ifde‡
__˝lu•lus


562 ˛as†
	c__±hªad_˛ónup_˛ass


564 (*
__ˇn˚l_routöe
) (*);

565 *
__ˇn˚l_¨g
;

566 
__do_ô
;

567 
__ˇn˚l_ty≥
;

569 
public
:

570 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

571 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

572 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

573 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

574 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

575 &
__ˇn˚l_ty≥
); 
	}
}

576 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

586 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

588 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

592 
	#±hªad_˛ónup_p›
(
execuã
) \

593 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

594 } 0)

	)

596 #ifde‡
__USE_GNU


600 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

602 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

603 
__˛‰ame
.
	`__de„r
 ()

	)

608 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

609 
__˛‰ame
.
	`__ª°‹e
 (); \

610 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

611 } 0)

	)

618 
__exã∫_ölöe
 

619 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

621 i‡(
__‰ame
->
__do_ô
)

622 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

623 
	}
}

632 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

634 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

635 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

636 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

637 .
__do_ô
 = 1 };

	)

641 
	#±hªad_˛ónup_p›
(
execuã
) \

642 
__˛‰ame
.
__do_ô
 = (
execuã
); \

643 } 0)

	)

645 #ifde‡
__USE_GNU


649 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

651 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

652 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

653 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

654 .
__do_ô
 = 1 }; \

655 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

656 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

661 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

662 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

663 
__˛‰ame
.
__do_ô
 = (
execuã
); \

664 } 0)

	)

675 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

677 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

678 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

679 *
__ˇn˚l_¨g
 = (
¨g
); \

680 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

681 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

682 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

684 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

685 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

689 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

690 dÿ{

	)

691 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

692 
__˛ónup_f˘_©åibuã
;

696 
	#±hªad_˛ónup_p›
(
execuã
) \

699 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

700 i‡(
execuã
) \

701 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

702 } 0)

	)

703 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

704 
__˛ónup_f˘_©åibuã
;

706 #ifde‡
__USE_GNU


710 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

712 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

713 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

714 *
__ˇn˚l_¨g
 = (
¨g
); \

715 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

716 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

717 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

719 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

720 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

724 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

725 dÿ{

	)

726 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

727 
__˛ónup_f˘_©åibuã
;

732 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

735 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

736 i‡(
execuã
) \

737 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

738 
	}
} 0)

	)

739 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

740 
__˛ónup_f˘_©åibuã
;

744 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

745 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

746 #i‚de‡
SHARED


747 
	`__©åibuã__
 ((
__wók__
))

753 
__jmp_buf_èg
;

754 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROWNL
;

760 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

761 c⁄° 
±hªad_muãx©å_t
 *
__muãx©å
)

762 
__THROW
 
	`__n⁄nuŒ
 ((1));

765 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

766 
__THROW
 
	`__n⁄nuŒ
 ((1));

769 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

770 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

773 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

774 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

776 #ifde‡
__USE_XOPEN2K


778 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

779 c⁄° 
time•ec
 *
__ª°ri˘


780 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

784 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

785 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

789 
	$±hªad_muãx_gë¥io˚ûög
 (c⁄° 
±hªad_muãx_t
 *

790 
__ª°ri˘
 
__muãx
,

791 *
__ª°ri˘
 
__¥io˚ûög
)

792 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

796 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

797 
__¥io˚ûög
,

798 *
__ª°ri˘
 
__ﬁd_˚ûög
)

799 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

802 #ifde‡
__USE_XOPEN2K8


804 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

805 
__THROW
 
	`__n⁄nuŒ
 ((1));

806 #ifde‡
__USE_GNU


807 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

808 
__THROW
 
	`__n⁄nuŒ
 ((1));

817 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

818 
__THROW
 
	`__n⁄nuŒ
 ((1));

821 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

822 
__THROW
 
	`__n⁄nuŒ
 ((1));

825 
	$±hªad_muãx©å_gëpsh¨ed
 (c⁄° 
±hªad_muãx©å_t
 *

826 
__ª°ri˘
 
__©å
,

827 *
__ª°ri˘
 
__psh¨ed
)

828 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

831 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

832 
__psh¨ed
)

833 
__THROW
 
	`__n⁄nuŒ
 ((1));

835 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


837 
	$±hªad_muãx©å_gëty≥
 (c⁄° 
±hªad_muãx©å_t
 *
__ª°ri˘


838 
__©å
, *
__ª°ri˘
 
__köd
)

839 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

844 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

845 
__THROW
 
	`__n⁄nuŒ
 ((1));

849 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (c⁄° 
±hªad_muãx©å_t
 *

850 
__ª°ri˘
 
__©å
,

851 *
__ª°ri˘
 
__¥Ÿocﬁ
)

852 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

857 
__¥Ÿocﬁ
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1));

861 
	$±hªad_muãx©å_gë¥io˚ûög
 (c⁄° 
±hªad_muãx©å_t
 *

862 
__ª°ri˘
 
__©å
,

863 *
__ª°ri˘
 
__¥io˚ûög
)

864 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

867 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

868 
__¥io˚ûög
)

869 
__THROW
 
	`__n⁄nuŒ
 ((1));

871 #ifde‡
__USE_XOPEN2K


873 
	$±hªad_muãx©å_gërobu°
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

874 *
__robu°√ss
)

875 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

876 #ifde‡
__USE_GNU


877 
	$±hªad_muãx©å_gërobu°_≈
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

878 *
__robu°√ss
)

879 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

883 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

884 
__robu°√ss
)

885 
__THROW
 
	`__n⁄nuŒ
 ((1));

886 #ifde‡
__USE_GNU


887 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

888 
__robu°√ss
)

889 
__THROW
 
	`__n⁄nuŒ
 ((1));

894 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


899 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

900 c⁄° 
±hªad_rwlock©å_t
 *
__ª°ri˘


901 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

904 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

905 
__THROW
 
	`__n⁄nuŒ
 ((1));

908 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

909 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

912 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

913 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

915 #ifde‡
__USE_XOPEN2K


917 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

918 c⁄° 
time•ec
 *
__ª°ri˘


919 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

923 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

924 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

927 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

928 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

930 #ifde‡
__USE_XOPEN2K


932 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

933 c⁄° 
time•ec
 *
__ª°ri˘


934 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

938 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

939 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

945 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

946 
__THROW
 
	`__n⁄nuŒ
 ((1));

949 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

950 
__THROW
 
	`__n⁄nuŒ
 ((1));

953 
	$±hªad_rwlock©å_gëpsh¨ed
 (c⁄° 
±hªad_rwlock©å_t
 *

954 
__ª°ri˘
 
__©å
,

955 *
__ª°ri˘
 
__psh¨ed
)

956 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

959 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

960 
__psh¨ed
)

961 
__THROW
 
	`__n⁄nuŒ
 ((1));

964 
	$±hªad_rwlock©å_gëköd_≈
 (c⁄° 
±hªad_rwlock©å_t
 *

965 
__ª°ri˘
 
__©å
,

966 *
__ª°ri˘
 
__¥ef
)

967 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

970 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

971 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

979 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

980 c⁄° 
±hªad_c⁄d©å_t
 *
__ª°ri˘
 
__c⁄d_©å
)

981 
__THROW
 
	`__n⁄nuŒ
 ((1));

984 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

985 
__THROW
 
	`__n⁄nuŒ
 ((1));

988 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

989 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

992 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

993 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1000 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1001 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

1002 
	`__n⁄nuŒ
 ((1, 2));

1011 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1012 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

1013 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

1014 
	`__n⁄nuŒ
 ((1, 2, 3));

1019 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

1020 
__THROW
 
	`__n⁄nuŒ
 ((1));

1023 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

1024 
__THROW
 
	`__n⁄nuŒ
 ((1));

1027 
	$±hªad_c⁄d©å_gëpsh¨ed
 (c⁄° 
±hªad_c⁄d©å_t
 *

1028 
__ª°ri˘
 
__©å
,

1029 *
__ª°ri˘
 
__psh¨ed
)

1030 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1033 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1034 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1036 #ifde‡
__USE_XOPEN2K


1038 
	$±hªad_c⁄d©å_gë˛ock
 (c⁄° 
±hªad_c⁄d©å_t
 *

1039 
__ª°ri˘
 
__©å
,

1040 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1041 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1044 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1045 
__˛ockid_t
 
__˛ock_id
)

1046 
__THROW
 
	`__n⁄nuŒ
 ((1));

1050 #ifde‡
__USE_XOPEN2K


1055 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1056 
__THROW
 
	`__n⁄nuŒ
 ((1));

1059 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1060 
__THROW
 
	`__n⁄nuŒ
 ((1));

1063 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1064 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1067 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1068 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1071 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1072 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1079 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1080 c⁄° 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1081 
__©å
, 
__cou¡
)

1082 
__THROW
 
	`__n⁄nuŒ
 ((1));

1085 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1086 
__THROW
 
	`__n⁄nuŒ
 ((1));

1089 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1090 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1094 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1095 
__THROW
 
	`__n⁄nuŒ
 ((1));

1098 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1099 
__THROW
 
	`__n⁄nuŒ
 ((1));

1102 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (c⁄° 
±hªad_b¨rõøâr_t
 *

1103 
__ª°ri˘
 
__©å
,

1104 *
__ª°ri˘
 
__psh¨ed
)

1105 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1108 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1109 
__psh¨ed
)

1110 
__THROW
 
	`__n⁄nuŒ
 ((1));

1122 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1123 (*
__de°r_fun˘i⁄
) (*))

1124 
__THROW
 
	`__n⁄nuŒ
 ((1));

1127 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1130 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1133 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1134 c⁄° *
__poöãr
Ë
__THROW
 ;

1137 #ifde‡
__USE_XOPEN2K


1139 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1140 
__˛ockid_t
 *
__˛ock_id
)

1141 
__THROW
 
	`__n⁄nuŒ
 ((2));

1156 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1157 (*
__∑ª¡
) (),

1158 (*
__chûd
Ë()Ë
__THROW
;

1161 #ifde‡
__USE_EXTERN_INLINES


1163 
__exã∫_ölöe
 

1164 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1166  
__thªad1
 =
__thªad2
;

1167 
	}
}

1170 
	g__END_DECLS


	@/usr/include/sched.h

19 #i‚def 
_SCHED_H


20 
	#_SCHED_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

30 
	#__√ed_time_t


	)

31 
	#__√ed_time•ec


	)

32 
	~<time.h
>

34 #i‚de‡
__pid_t_deföed


35 
__pid_t
 
	tpid_t
;

36 
	#__pid_t_deföed


	)

41 
	~<bôs/sched.h
>

43 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

46 
__BEGIN_DECLS


49 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, c⁄° 
sched_∑øm
 *
__∑øm
)

50 
__THROW
;

53 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

56 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

57 c⁄° 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

60 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

63 
	$sched_yõld
 (Ë
__THROW
;

66 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

69 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

72 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

75 #ifde‡
__USE_GNU


77 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

78 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

79 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

80 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

81 
˝u£ç
)

	)

82 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

83 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

86 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

87 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

88 
˝u£ç
)

	)

89 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

90 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

92 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

93 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

94 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

95 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

97 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

98 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

99 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

101 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

103 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

104 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

105 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

107 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

110 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

111 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

112 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

116 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

117 c⁄° 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

120 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

121 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

124 
__END_DECLS


	@/usr/include/scsi/sg.h

25 #i‚de‡
_SCSI_SG_H


26 
	#_SCSI_SG_H
 1

	)

28 
	~<„©uªs.h
>

29 
	#__√ed_size_t


	)

30 
	~<°ddef.h
>

37 
	ssg_iovec


39 * 
	miov_ba£
;

40 
size_t
 
	miov_Àn
;

41 } 
	tsg_iovec_t
;

44 
	ssg_io_hdr


46 
	möãrÁ˚_id
;

47 
	mdx„r_dúe˘i⁄
;

48 
	mcmd_Àn
;

49 
	mmx_sb_Àn
;

50 
	miovec_cou¡
;

51 
	mdx„r_Àn
;

52 * 
	mdx„Ω
;

54 * 
	mcmdp
;

55 * 
	msbp
;

56 
	mtimeout
;

57 
	mÊags
;

58 
	m∑ck_id
;

59 * 
	mu§_±r
;

60 
	m°©us
;

61 
	mmasked_°©us
;

62 
	mmsg_°©us
;

63 
	msb_Àn_wr
;

64 
	mho°_°©us
;

65 
	mdrivî_°©us
;

66 
	mªsid
;

67 
	mduøti⁄
;

68 
	möfo
;

69 } 
	tsg_io_hdr_t
;

73 
	#SG_DXFER_NONE
 -1

	)

74 
	#SG_DXFER_TO_DEV
 -2

	)

75 
	#SG_DXFER_FROM_DEV
 -3

	)

76 
	#SG_DXFER_TO_FROM_DEV
 -4

	)

83 
	#SG_FLAG_DIRECT_IO
 1

	)

84 
	#SG_FLAG_LUN_INHIBIT
 2

	)

86 
	#SG_FLAG_NO_DXFER
 0x10000

	)

90 
	#SG_INFO_OK_MASK
 0x1

	)

91 
	#SG_INFO_OK
 0x0

	)

92 
	#SG_INFO_CHECK
 0x1

	)

94 
	#SG_INFO_DIRECT_IO_MASK
 0x6

	)

95 
	#SG_INFO_INDIRECT_IO
 0x0

	)

96 
	#SG_INFO_DIRECT_IO
 0x2

	)

97 
	#SG_INFO_MIXED_IO
 0x4

	)

102 
	ssg_scsi_id
 {

104 
	mho°_no
;

105 
	mch™√l
;

107 
	mscsi_id
;

108 
	mlun
;

110 
	mscsi_ty≥
;

112 
	mh_cmd_≥r_lun
;

114 
	md_queue_dïth
;

116 
	munu£d
[2];

120 
	ssg_ªq_öfo
 {

121 
	mªq_°©e
;

122 
	m‹ph™
;

123 
	msg_io_ow√d
;

124 
	m¥obÀm
;

125 
	m∑ck_id
;

126 * 
	mu§_±r
;

127 
	mduøti⁄
;

129 
	munu£d
;

130 } 
	tsg_ªq_öfo_t
;

137 
	#SG_EMULATED_HOST
 0x2203

	)

141 
	#SG_SET_TRANSFORM
 0x2204

	)

143 
	#SG_GET_TRANSFORM
 0x2205

	)

145 
	#SG_SET_RESERVED_SIZE
 0x2275

	)

146 
	#SG_GET_RESERVED_SIZE
 0x2272

	)

149 
	#SG_GET_SCSI_ID
 0x2276

	)

153 
	#SG_SET_FORCE_LOW_DMA
 0x2279

	)

154 
	#SG_GET_LOW_DMA
 0x227®

	)

160 
	#SG_SET_FORCE_PACK_ID
 0x227b

	)

161 
	#SG_GET_PACK_ID
 0x227¯

	)

163 
	#SG_GET_NUM_WAITING
 0x227d

	)

166 
	#SG_GET_SG_TABLESIZE
 0x227F

	)

168 
	#SG_GET_VERSION_NUM
 0x2282

	)

171 
	#SG_SCSI_RESET
 0x2284

	)

173 
	#SG_SCSI_RESET_NOTHING
 0

	)

174 
	#SG_SCSI_RESET_DEVICE
 1

	)

175 
	#SG_SCSI_RESET_BUS
 2

	)

176 
	#SG_SCSI_RESET_HOST
 3

	)

179 
	#SG_IO
 0x2285

	)

181 
	#SG_GET_REQUEST_TABLE
 0x2286

	)

184 
	#SG_SET_KEEP_ORPHAN
 0x2287

	)

185 
	#SG_GET_KEEP_ORPHAN
 0x2288

	)

188 
	#SG_SCATTER_SZ
 (8 * 4096Ë

	)

196 
	#SG_DEFAULT_RETRIES
 1

	)

199 
	#SG_DEF_FORCE_LOW_DMA
 0

	)

200 
	#SG_DEF_FORCE_PACK_ID
 0

	)

201 
	#SG_DEF_KEEP_ORPHAN
 0

	)

202 
	#SG_DEF_RESERVED_SIZE
 
SG_SCATTER_SZ


	)

205 
	#SG_MAX_QUEUE
 16

	)

207 
	#SG_BIG_BUFF
 
SG_DEF_RESERVED_SIZE


	)

210 
sg_io_hdr
 
	tSg_io_hdr
;

211 
sg_io_vec
 
	tSg_io_vec
;

212 
sg_scsi_id
 
	tSg_scsi_id
;

213 
sg_ªq_öfo
 
	tSg_ªq_öfo
;

220 
	#SG_MAX_SENSE
 16

	)

222 
	ssg_hódî


225 
	m∑ck_Àn
;

227 
	mª∂y_Àn
;

229 
	m∑ck_id
;

231 
	mªsu…
;

233 
	mtwñve_byã
:1;

235 
	mèrgë_°©us
:5;

237 
	mho°_°©us
:8;

239 
	mdrivî_°©us
:8;

241 
	mŸhî_Êags
:10;

246 
	m£n£_buf„r
[
SG_MAX_SENSE
];

254 
	#SG_SET_TIMEOUT
 0x2201

	)

255 
	#SG_GET_TIMEOUT
 0x2202

	)

258 
	#SG_GET_COMMAND_Q
 0x2270

	)

259 
	#SG_SET_COMMAND_Q
 0x2271

	)

263 
	#SG_SET_DEBUG
 0x227ê

	)

265 
	#SG_NEXT_CMD_LEN
 0x2283

	)

270 
	#SG_DEFAULT_TIMEOUT
 (60*
HZ
Ë

	)

271 
	#SG_DEF_COMMAND_Q
 0

	)

273 
	#SG_DEF_UNDERRUN_FLAG
 0

	)

	@/usr/include/semaphore.h

18 #i‚de‡
_SEMAPHORE_H


19 
	#_SEMAPHORE_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sys/ty≥s.h
>

23 #ifde‡
__USE_XOPEN2K


24 
	#__√ed_time•ec


	)

25 
	~<time.h
>

29 
	~<bôs/£m≠h‹e.h
>

32 
__BEGIN_DECLS


36 
	$£m_öô
 (
£m_t
 *
__£m
, 
__psh¨ed
, 
__vÆue
)

37 
__THROW
;

39 
	$£m_de°roy
 (
£m_t
 *
__£m
Ë
__THROW
;

42 
£m_t
 *
	$£m_›í
 (c⁄° *
__«me
, 
__oÊag
, ...Ë
__THROW
;

45 
	$£m_˛o£
 (
£m_t
 *
__£m
Ë
__THROW
;

48 
	$£m_u∆ök
 (c⁄° *
__«me
Ë
__THROW
;

54 
	`£m_waô
 (
£m_t
 *
__£m
);

56 #ifde‡
__USE_XOPEN2K


61 
	`£m_timedwaô
 (
£m_t
 *
__ª°ri˘
 
__£m
,

62 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
);

66 
	$£m_åywaô
 (
£m_t
 *
__£m
Ë
__THROWNL
;

69 
	$£m_po°
 (
£m_t
 *
__£m
Ë
__THROWNL
;

72 
	$£m_gëvÆue
 (
£m_t
 *
__ª°ri˘
 
__£m
, *__ª°ri˘ 
__svÆ
)

73 
__THROW
;

76 
__END_DECLS


	@/usr/include/setjmp.h

22 #i‚def 
_SETJMP_H


23 
	#_SETJMP_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/£tjmp.h
>

30 
	~<bôs/sig£t.h
>

34 
	s__jmp_buf_èg


40 
__jmp_buf
 
	m__jmpbuf
;

41 
	m__mask_was_ßved
;

42 
__sig£t_t
 
	m__ßved_mask
;

46 
__BEGIN_NAMESPACE_STD


48 
__jmp_buf_èg
 
	tjmp_buf
[1];

52 
	$£tjmp
 (
jmp_buf
 
__ív
Ë
__THROWNL
;

54 
__END_NAMESPACE_STD


59 
	$__sig£tjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__ßvemask
Ë
__THROWNL
;

61 #i‚def 
__FAVOR_BSD


64 
	$_£tjmp
 (
__jmp_buf_èg
 
__ív
[1]Ë
__THROWNL
;

68 
	#£tjmp
(
ív
Ë
	`_£tjmp
 (ív)

	)

73 
	#£tjmp
(
ív
Ë
	`£tjmp
 (ív)

	)

77 
__BEGIN_NAMESPACE_STD


81 
	$l⁄gjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
)

82 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

84 
__END_NAMESPACE_STD


86 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


90 
	$_l⁄gjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
)

91 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

95 #ifdef 
__USE_POSIX


99 
__jmp_buf_èg
 
	tsigjmp_buf
[1];

103 
	#sig£tjmp
(
ív
, 
ßvemask
Ë
	`__sig£tjmp
 (ív, savemask)

	)

109 
	$sigl⁄gjmp
 (
sigjmp_buf
 
__ív
, 
__vÆ
)

110 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

115 #i‡
__USE_FORTIFY_LEVEL
 > 0

116 
	~<bôs/£tjmp2.h
>

119 
__END_DECLS


	@/usr/include/signal.h

22 #i‚def 
_SIGNAL_H


24 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


25 
	#_SIGNAL_H


	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	~<bôs/sig£t.h
>

36 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


37 #i‚de‡
__sig_©omic_t_deföed


38 
	#__sig_©omic_t_deföed


	)

39 
__BEGIN_NAMESPACE_STD


40 
__sig_©omic_t
 
	tsig_©omic_t
;

41 
	g__END_NAMESPACE_STD


43 #unde‡
__√ed_sig_©omic_t


46 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

47 #i‚de‡
__sig£t_t_deföed


48 
	#__sig£t_t_deföed


	)

49 
__sig£t_t
 
	tsig£t_t
;

51 #unde‡
__√ed_sig£t_t


54 #ifde‡
_SIGNAL_H


56 
	~<bôs/ty≥s.h
>

57 
	~<bôs/signum.h
>

59 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


60 #i‚de‡
__pid_t_deföed


61 
__pid_t
 
	tpid_t
;

62 
	#__pid_t_deföed


	)

64 #ifde‡
__USE_XOPEN


66 #i‚de‡
__uid_t_deföed


67 
__uid_t
 
	tuid_t
;

68 
	#__uid_t_deföed


	)

72 #ifde‡
__USE_POSIX199309


74 
	#__√ed_time•ec


	)

75 
	~<time.h
>

78 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


80 
	~<bôs/sigöfo.h
>

85 (*
	t__sigh™dÀr_t
) ();

90 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

91 
__THROW
;

92 #ifde‡
__USE_GNU


93 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

94 
__THROW
;

100 
__BEGIN_NAMESPACE_STD


101 #ifde‡
__USE_BSD


102 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

103 
__THROW
;

106 #ifde‡
__REDIRECT_NTH


107 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

108 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

109 
__sysv_sig«l
);

111 
	#sig«l
 
__sysv_sig«l


	)

114 
__END_NAMESPACE_STD


116 #ifde‡
__USE_XOPEN


119 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

120 
__THROW
;

126 #ifde‡
__USE_POSIX


127 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

130 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


134 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

137 
__BEGIN_NAMESPACE_STD


139 
	$øi£
 (
__sig
Ë
__THROW
;

140 
__END_NAMESPACE_STD


142 #ifde‡
__USE_SVID


144 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

145 
__THROW
;

146 
	$gsig«l
 (
__sig
Ë
__THROW
;

149 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K


151 
	`psig«l
 (
__sig
, c⁄° *
__s
);

154 #ifde‡
__USE_XOPEN2K


156 
	`psigöfo
 (c⁄° 
sigöfo_t
 *
__pöfo
, c⁄° *
__s
);

169 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

171 #ifde‡
__FAVOR_BSD


174 
	$sig∑u£
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

176 #ifde‡
__USE_XOPEN


177 #ifde‡
__GNUC__


178 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

181 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

187 #ifde‡
__USE_BSD


194 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

197 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

200 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

203 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

207 #ifde‡
__USE_MISC


208 
	#NSIG
 
_NSIG


	)

211 #ifde‡
__USE_GNU


212 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

216 #ifde‡
__USE_BSD


217 
__sigh™dÀr_t
 
	tsig_t
;

220 #ifde‡
__USE_POSIX


223 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

226 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

229 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

232 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

235 
	$sigismembî
 (c⁄° 
sig£t_t
 *
__£t
, 
__signo
)

236 
__THROW
 
	`__n⁄nuŒ
 ((1));

238 #ifde‡
__USE_GNU


240 
	$sigi£m±y£t
 (c⁄° 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

243 
	$sig™d£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

244 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

247 
	$sig‹£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

248 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

253 
	~<bôs/siga˘i⁄.h
>

256 
	$sig¥ocmask
 (
__how
, c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

257 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

264 
	$sigsu•íd
 (c⁄° 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

267 
	$siga˘i⁄
 (
__sig
, c⁄° 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

268 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

271 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

278 
	$sigwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

279 
	`__n⁄nuŒ
 ((1, 2));

281 #ifde‡
__USE_POSIX199309


286 
	$sigwaôöfo
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

287 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

294 
	$sigtimedwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

295 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

296 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

297 
	`__n⁄nuŒ
 ((1));

301 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, c⁄° 
sigvÆ
 
__vÆ
)

302 
__THROW
;

307 #ifde‡
__USE_BSD


311 c⁄° *c⁄° 
_sys_sigli°
[
_NSIG
];

312 c⁄° *c⁄° 
sys_sigli°
[
_NSIG
];

315 
	ssigvec


317 
__sigh™dÀr_t
 
sv_h™dÀr
;

318 
sv_mask
;

320 
sv_Êags
;

321 
	#sv_⁄°ack
 
sv_Êags


	)

325 
	#SV_ONSTACK
 (1 << 0)

	)

326 
	#SV_INTERRUPT
 (1 << 1)

	)

327 
	#SV_RESETHAND
 (1 << 2)

	)

335 
	$sigvec
 (
__sig
, c⁄° 
sigvec
 *
__vec
,

336 
sigvec
 *
__ovec
Ë
__THROW
;

340 
	~<bôs/sigc⁄ãxt.h
>

343 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

348 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


349 
	#__√ed_size_t


	)

350 
	~<°ddef.h
>

355 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

357 
	~<bôs/sig°ack.h
>

358 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


360 
	~<sys/uc⁄ãxt.h
>

366 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

367 
__THROW
 
__©åibuã_dïªˇãd__
;

371 
	$sigÆt°ack
 (c⁄° 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

372 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

376 #ifde‡
__USE_XOPEN_EXTENDED


380 
	$sighﬁd
 (
__sig
Ë
__THROW
;

383 
	$sigªl£
 (
__sig
Ë
__THROW
;

386 
	$sigign‹e
 (
__sig
Ë
__THROW
;

389 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

392 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


395 
	~<bôs/±hªadty≥s.h
>

396 
	~<bôs/sigthªad.h
>

403 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

405 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

409 
__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/wch¨.h
>

27 
	~<bôs/w‹dsize.h
>

34 #i‚de‡
__öt8_t_deföed


35 
	#__öt8_t_deföed


	)

36 sig√d 
	töt8_t
;

37 
	töt16_t
;

38 
	töt32_t
;

39 #i‡
__WORDSIZE
 == 64

40 
	töt64_t
;

42 
__exãnsi⁄__


43 
	töt64_t
;

48 
	tuöt8_t
;

49 
	tuöt16_t
;

50 #i‚de‡
__uöt32_t_deföed


51 
	tuöt32_t
;

52 
	#__uöt32_t_deföed


	)

54 #i‡
__WORDSIZE
 == 64

55 
	tuöt64_t
;

57 
__exãnsi⁄__


58 
	tuöt64_t
;

65 sig√d 
	töt_Àa°8_t
;

66 
	töt_Àa°16_t
;

67 
	töt_Àa°32_t
;

68 #i‡
__WORDSIZE
 == 64

69 
	töt_Àa°64_t
;

71 
__exãnsi⁄__


72 
	töt_Àa°64_t
;

76 
	tuöt_Àa°8_t
;

77 
	tuöt_Àa°16_t
;

78 
	tuöt_Àa°32_t
;

79 #i‡
__WORDSIZE
 == 64

80 
	tuöt_Àa°64_t
;

82 
__exãnsi⁄__


83 
	tuöt_Àa°64_t
;

90 sig√d 
	töt_Á°8_t
;

91 #i‡
__WORDSIZE
 == 64

92 
	töt_Á°16_t
;

93 
	töt_Á°32_t
;

94 
	töt_Á°64_t
;

96 
	töt_Á°16_t
;

97 
	töt_Á°32_t
;

98 
__exãnsi⁄__


99 
	töt_Á°64_t
;

103 
	tuöt_Á°8_t
;

104 #i‡
__WORDSIZE
 == 64

105 
	tuöt_Á°16_t
;

106 
	tuöt_Á°32_t
;

107 
	tuöt_Á°64_t
;

109 
	tuöt_Á°16_t
;

110 
	tuöt_Á°32_t
;

111 
__exãnsi⁄__


112 
	tuöt_Á°64_t
;

117 #i‡
__WORDSIZE
 == 64

118 #i‚de‡
__öçå_t_deföed


119 
	töçå_t
;

120 
	#__öçå_t_deföed


	)

122 
	tuöçå_t
;

124 #i‚de‡
__öçå_t_deföed


125 
	töçå_t
;

126 
	#__öçå_t_deföed


	)

128 
	tuöçå_t
;

133 #i‡
__WORDSIZE
 == 64

134 
	tötmax_t
;

135 
	tuötmax_t
;

137 
__exãnsi⁄__


138 
	tötmax_t
;

139 
__exãnsi⁄__


140 
	tuötmax_t
;

144 #i‡
__WORDSIZE
 == 64

145 
	#__INT64_C
(
c
Ë¯## 
L


	)

146 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

148 
	#__INT64_C
(
c
Ë¯## 
LL


	)

149 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

155 
	#INT8_MIN
 (-128)

	)

156 
	#INT16_MIN
 (-32767-1)

	)

157 
	#INT32_MIN
 (-2147483647-1)

	)

158 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

160 
	#INT8_MAX
 (127)

	)

161 
	#INT16_MAX
 (32767)

	)

162 
	#INT32_MAX
 (2147483647)

	)

163 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

166 
	#UINT8_MAX
 (255)

	)

167 
	#UINT16_MAX
 (65535)

	)

168 
	#UINT32_MAX
 (4294967295U)

	)

169 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

173 
	#INT_LEAST8_MIN
 (-128)

	)

174 
	#INT_LEAST16_MIN
 (-32767-1)

	)

175 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

176 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

178 
	#INT_LEAST8_MAX
 (127)

	)

179 
	#INT_LEAST16_MAX
 (32767)

	)

180 
	#INT_LEAST32_MAX
 (2147483647)

	)

181 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

184 
	#UINT_LEAST8_MAX
 (255)

	)

185 
	#UINT_LEAST16_MAX
 (65535)

	)

186 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

187 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

191 
	#INT_FAST8_MIN
 (-128)

	)

192 #i‡
__WORDSIZE
 == 64

193 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

194 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

196 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

197 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

199 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

201 
	#INT_FAST8_MAX
 (127)

	)

202 #i‡
__WORDSIZE
 == 64

203 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

204 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

206 
	#INT_FAST16_MAX
 (2147483647)

	)

207 
	#INT_FAST32_MAX
 (2147483647)

	)

209 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINT_FAST8_MAX
 (255)

	)

213 #i‡
__WORDSIZE
 == 64

214 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

215 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

217 
	#UINT_FAST16_MAX
 (4294967295U)

	)

218 
	#UINT_FAST32_MAX
 (4294967295U)

	)

220 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

224 #i‡
__WORDSIZE
 == 64

225 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

226 
	#INTPTR_MAX
 (9223372036854775807L)

	)

227 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

229 
	#INTPTR_MIN
 (-2147483647-1)

	)

230 
	#INTPTR_MAX
 (2147483647)

	)

231 
	#UINTPTR_MAX
 (4294967295U)

	)

236 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

238 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

241 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

247 #i‡
__WORDSIZE
 == 64

248 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

249 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

251 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

252 
	#PTRDIFF_MAX
 (2147483647)

	)

256 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

257 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

260 #i‡
__WORDSIZE
 == 64

261 
	#SIZE_MAX
 (18446744073709551615UL)

	)

263 
	#SIZE_MAX
 (4294967295U)

	)

267 #i‚de‡
WCHAR_MIN


269 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

270 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

274 
	#WINT_MIN
 (0u)

	)

275 
	#WINT_MAX
 (4294967295u)

	)

278 
	#INT8_C
(
c
Ë
	)
c

279 
	#INT16_C
(
c
Ë
	)
c

280 
	#INT32_C
(
c
Ë
	)
c

281 #i‡
__WORDSIZE
 == 64

282 
	#INT64_C
(
c
Ë¯## 
L


	)

284 
	#INT64_C
(
c
Ë¯## 
LL


	)

288 
	#UINT8_C
(
c
Ë
	)
c

289 
	#UINT16_C
(
c
Ë
	)
c

290 
	#UINT32_C
(
c
Ë¯## 
U


	)

291 #i‡
__WORDSIZE
 == 64

292 
	#UINT64_C
(
c
Ë¯## 
UL


	)

294 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

298 #i‡
__WORDSIZE
 == 64

299 
	#INTMAX_C
(
c
Ë¯## 
L


	)

300 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

302 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

303 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


25 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


26 
	#_STDIO_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	#__√ed_FILE


	)

37 
	#__√ed___FILE


	)

41 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
	g_IO_FILE
;

46 
__BEGIN_NAMESPACE_STD


48 
_IO_FILE
 
	tFILE
;

49 
	g__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

51 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

52 || 
deföed
 
__USE_POSIX2


53 
	$__USING_NAMESPACE_STD
(
FILE
)

56 
	#__FILE_deföed
 1

	)

58 #unde‡
__√ed_FILE


61 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


64 
_IO_FILE
 
	t__FILE
;

66 
	#____FILE_deföed
 1

	)

68 #unde‡
__√ed___FILE


71 #ifdef 
_STDIO_H


72 
	#_STDIO_USES_IOSTREAM


	)

74 
	~<libio.h
>

76 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


77 #ifde‡
__GNUC__


78 #i‚de‡
_VA_LIST_DEFINED


79 
_G_va_li°
 
	tva_li°
;

80 
	#_VA_LIST_DEFINED


	)

83 
	~<°d¨g.h
>

87 #ifde‡
__USE_XOPEN2K8


88 #i‚de‡
__off_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__off_t
 
	toff_t
;

92 
__off64_t
 
	toff_t
;

94 
	#__off_t_deföed


	)

96 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


97 
__off64_t
 
	toff64_t
;

98 
	#__off64_t_deföed


	)

101 #i‚de‡
__ssize_t_deföed


102 
__ssize_t
 
	tssize_t
;

103 
	#__ssize_t_deföed


	)

108 
__BEGIN_NAMESPACE_STD


109 #i‚de‡
__USE_FILE_OFFSET64


110 
_G_Âos_t
 
	tÂos_t
;

112 
_G_Âos64_t
 
	tÂos_t
;

114 
__END_NAMESPACE_STD


115 #ifde‡
__USE_LARGEFILE64


116 
_G_Âos64_t
 
	tÂos64_t
;

120 
	#_IOFBF
 0

	)

121 
	#_IOLBF
 1

	)

122 
	#_IONBF
 2

	)

126 #i‚de‡
BUFSIZ


127 
	#BUFSIZ
 
_IO_BUFSIZ


	)

133 #i‚de‡
EOF


134 
	#EOF
 (-1)

	)

140 
	#SEEK_SET
 0

	)

141 
	#SEEK_CUR
 1

	)

142 
	#SEEK_END
 2

	)

143 #ifde‡
__USE_GNU


144 
	#SEEK_DATA
 3

	)

145 
	#SEEK_HOLE
 4

	)

149 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


151 
	#P_tmpdú
 "/tmp"

	)

164 
	~<bôs/°dio_lim.h
>

168 
_IO_FILE
 *
°dö
;

169 
_IO_FILE
 *
°dout
;

170 
_IO_FILE
 *
°dîr
;

172 
	#°dö
 
°dö


	)

173 
	#°dout
 
°dout


	)

174 
	#°dîr
 
°dîr


	)

176 
__BEGIN_NAMESPACE_STD


178 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

180 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

181 
__END_NAMESPACE_STD


183 #ifde‡
__USE_ATFILE


185 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

186 c⁄° *
__√w
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


194 #i‚de‡
__USE_FILE_OFFSET64


195 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

197 #ifde‡
__REDIRECT


198 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

200 
	#tmpfûe
 
tmpfûe64


	)

204 #ifde‡
__USE_LARGEFILE64


205 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

209 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

210 
__END_NAMESPACE_STD


212 #ifde‡
__USE_MISC


215 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

219 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


227 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

228 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

232 
__BEGIN_NAMESPACE_STD


237 
	`f˛o£
 (
FILE
 *
__°ªam
);

242 
	`fÊush
 (
FILE
 *
__°ªam
);

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_MISC


252 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

255 #ifde‡
__USE_GNU


262 
	`f˛o£Æl
 ();

266 
__BEGIN_NAMESPACE_STD


267 #i‚de‡
__USE_FILE_OFFSET64


272 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

273 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

278 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

279 c⁄° *
__ª°ri˘
 
__modes
,

280 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

282 #ifde‡
__REDIRECT


283 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

284 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

285 
__wur
;

286 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

287 c⁄° *
__ª°ri˘
 
__modes
,

288 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

289 
__wur
;

291 
	#f›í
 
f›í64


	)

292 
	#‰e›í
 
‰e›í64


	)

295 
__END_NAMESPACE_STD


296 #ifde‡
__USE_LARGEFILE64


297 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

298 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

299 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

300 c⁄° *
__ª°ri˘
 
__modes
,

301 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

304 #ifdef 
__USE_POSIX


306 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

309 #ifdef 
__USE_GNU


312 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

313 c⁄° *
__ª°ri˘
 
__modes
,

314 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

317 #ifde‡
__USE_XOPEN2K8


319 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

320 
__THROW
 
__wur
;

325 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

329 
__BEGIN_NAMESPACE_STD


332 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

336 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

337 
__modes
, 
size_t
 
__n
Ë
__THROW
;

338 
__END_NAMESPACE_STD


340 #ifdef 
__USE_BSD


343 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

344 
size_t
 
__size
Ë
__THROW
;

347 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

351 
__BEGIN_NAMESPACE_STD


356 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

357 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

362 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

364 
	$•rötf
 (*
__ª°ri˘
 
__s
,

365 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

371 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

372 
_G_va_li°
 
__¨g
);

377 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

379 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

380 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

381 
__END_NAMESPACE_STD


383 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


384 
__BEGIN_NAMESPACE_C99


386 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

387 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

388 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

390 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

391 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

392 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

393 
__END_NAMESPACE_C99


396 #ifde‡
__USE_GNU


399 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

400 
_G_va_li°
 
__¨g
)

401 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

402 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

403 c⁄° *
__ª°ri˘
 
__fmt
, ...)

404 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

405 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

406 c⁄° *
__ª°ri˘
 
__fmt
, ...)

407 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

410 #ifde‡
__USE_XOPEN2K8


412 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

413 
_G_va_li°
 
__¨g
)

414 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

415 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

420 
__BEGIN_NAMESPACE_STD


425 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

426 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

431 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

434 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

436 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

437 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

438 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

439 #ifde‡
__REDIRECT


443 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

444 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

445 
__isoc99_fsˇnf
Ë
__wur
;

446 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_sˇnf
Ë
__wur
;

448 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

449 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

450 
__isoc99_ssˇnf
);

452 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

454 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

455 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

456 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

457 
	#fsˇnf
 
__isoc99_fsˇnf


	)

458 
	#sˇnf
 
__isoc99_sˇnf


	)

459 
	#ssˇnf
 
__isoc99_ssˇnf


	)

463 
__END_NAMESPACE_STD


465 #ifdef 
__USE_ISOC99


466 
__BEGIN_NAMESPACE_C99


471 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

472 
_G_va_li°
 
__¨g
)

473 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

479 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

480 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

483 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

484 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

485 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

487 #i‡!
deföed
 
__USE_GNU
 \

488 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

489 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

490 #ifde‡
__REDIRECT


494 
	`__REDIRECT
 (
vfsˇnf
,

495 (
FILE
 *
__ª°ri˘
 
__s
,

496 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

497 
__isoc99_vfsˇnf
)

498 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

499 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

500 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

501 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

502 
	`__REDIRECT_NTH
 (
vssˇnf
,

503 (c⁄° *
__ª°ri˘
 
__s
,

504 c⁄° *
__ª°ri˘
 
__f‹m©
,

505 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

506 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

508 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

509 c⁄° *
__ª°ri˘
 
__f‹m©
,

510 
_G_va_li°
 
__¨g
Ë
__wur
;

511 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

514 c⁄° *
__ª°ri˘
 
__f‹m©
,

515 
_G_va_li°
 
__¨g
Ë
__THROW
;

516 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

517 
	#vsˇnf
 
__isoc99_vsˇnf


	)

518 
	#vssˇnf
 
__isoc99_vssˇnf


	)

522 
__END_NAMESPACE_C99


526 
__BEGIN_NAMESPACE_STD


531 
	`fgëc
 (
FILE
 *
__°ªam
);

532 
	`gëc
 (
FILE
 *
__°ªam
);

538 
	`gëch¨
 ();

539 
__END_NAMESPACE_STD


543 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

545 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


550 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

551 
	`gëch¨_u∆ocked
 ();

554 #ifde‡
__USE_MISC


561 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

565 
__BEGIN_NAMESPACE_STD


573 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

574 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putch¨
 (
__c
);

581 
__END_NAMESPACE_STD


585 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

587 #ifde‡
__USE_MISC


594 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

597 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


602 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 
	`putch¨_u∆ocked
 (
__c
);

607 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

608 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

610 
	`gëw
 (
FILE
 *
__°ªam
);

613 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

617 
__BEGIN_NAMESPACE_STD


622 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

623 
__wur
;

625 #i‡!
deföed
 
__USE_ISOC11
 \

626 || (
deföed
 
__˝lu•lus
 && __cplusplus <= 201103L)

638 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

640 
__END_NAMESPACE_STD


642 #ifde‡
__USE_GNU


649 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

650 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

654 #ifdef 
__USE_XOPEN2K8


665 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

668 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

669 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

670 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

678 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

679 
size_t
 *
__ª°ri˘
 
__n
,

680 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

684 
__BEGIN_NAMESPACE_STD


689 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

695 
	`puts
 (c⁄° *
__s
);

702 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

709 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

710 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

715 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

716 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

717 
__END_NAMESPACE_STD


719 #ifde‡
__USE_GNU


726 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

727 
FILE
 *
__ª°ri˘
 
__°ªam
);

730 #ifde‡
__USE_MISC


737 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

738 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

739 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

740 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

744 
__BEGIN_NAMESPACE_STD


749 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

754 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

759 
	`ªwöd
 (
FILE
 *
__°ªam
);

760 
__END_NAMESPACE_STD


767 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


768 #i‚de‡
__USE_FILE_OFFSET64


773 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

778 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

780 #ifde‡
__REDIRECT


781 
	`__REDIRECT
 (
f£eko
,

782 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

783 
f£eko64
);

784 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

786 
	#f£eko
 
f£eko64


	)

787 
	#·ñlo
 
·ñlo64


	)

792 
__BEGIN_NAMESPACE_STD


793 #i‚de‡
__USE_FILE_OFFSET64


798 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

803 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

805 #ifde‡
__REDIRECT


806 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

807 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

808 
	`__REDIRECT
 (
f£ços
,

809 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

811 
	#fgëpos
 
fgëpos64


	)

812 
	#f£ços
 
f£ços64


	)

815 
__END_NAMESPACE_STD


817 #ifde‡
__USE_LARGEFILE64


818 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

819 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

820 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

821 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

824 
__BEGIN_NAMESPACE_STD


826 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

828 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

831 
__END_NAMESPACE_STD


833 #ifde‡
__USE_MISC


835 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

836 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

837 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

841 
__BEGIN_NAMESPACE_STD


846 
	`≥º‹
 (c⁄° *
__s
);

847 
__END_NAMESPACE_STD


853 
	~<bôs/sys_îæi°.h
>

856 #ifdef 
__USE_POSIX


858 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

861 #ifde‡
__USE_MISC


863 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

867 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

868 
deföed
 
__USE_MISC
)

873 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

879 
	`p˛o£
 (
FILE
 *
__°ªam
);

883 #ifdef 
__USE_POSIX


885 *
	$˘îmid
 (*
__s
Ë
__THROW
;

889 #ifde‡
__USE_XOPEN


891 *
	`cu£rid
 (*
__s
);

895 #ifdef 
__USE_GNU


896 
ob°ack
;

899 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

900 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

901 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

902 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

903 c⁄° *
__ª°ri˘
 
__f‹m©
,

904 
_G_va_li°
 
__¨gs
)

905 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

909 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


913 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

917 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

920 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

923 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


927 
	#__√ed_gë›t


	)

928 
	~<gë›t.h
>

933 #ifde‡
__USE_EXTERN_INLINES


934 
	~<bôs/°dio.h
>

936 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


937 
	~<bôs/°dio2.h
>

939 #ifde‡
__LDBL_COMPAT


940 
	~<bôs/°dio-ldbl.h
>

943 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

44 #ifde‡
__USE_BSD


49 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


50 
	#__WAIT_INT
(
°©us
) \

51 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

52 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

54 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

62 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


63 
	#__WAIT_STATUS
 *

	)

64 
	#__WAIT_STATUS_DEFN
 *

	)

69 
waô
 *
	m__u±r
;

70 *
	m__ùå
;

71 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

78 
	#__WAIT_STATUS
 *

	)

79 
	#__WAIT_STATUS_DEFN
 *

	)

84 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifde‡
__WIFCONTINUED


91 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

95 
__BEGIN_NAMESPACE_STD


99 
	mquŸ
;

100 
	mªm
;

101 } 
	tdiv_t
;

104 #i‚de‡
__ldiv_t_deföed


107 
	mquŸ
;

108 
	mªm
;

109 } 
	tldiv_t
;

110 
	#__ldiv_t_deföed
 1

	)

112 
	g__END_NAMESPACE_STD


114 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


115 
__BEGIN_NAMESPACE_C99


117 
__exãnsi⁄__
 struct

119 
	mquŸ
;

120 
	mªm
;

121 } 
	tŒdiv_t
;

122 
	#__Œdiv_t_deföed
 1

	)

123 
	g__END_NAMESPACE_C99


128 
	#RAND_MAX
 2147483647

	)

133 
	#EXIT_FAILURE
 1

	)

134 
	#EXIT_SUCCESS
 0

	)

138 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

139 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

142 
__BEGIN_NAMESPACE_STD


144 
	$©of
 (c⁄° *
__≈å
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

147 
	$©oi
 (c⁄° *
__≈å
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

150 
	$©ﬁ
 (c⁄° *
__≈å
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

152 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_MISC


155 
__BEGIN_NAMESPACE_C99


157 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

158 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

159 
__END_NAMESPACE_C99


162 
__BEGIN_NAMESPACE_STD


164 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

173 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

175 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

184 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

185 
__THROW
 
	`__n⁄nuŒ
 ((1));

187 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

190 
__END_NAMESPACE_STD


192 #ifde‡
__USE_BSD


194 
__exãnsi⁄__


195 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

196 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

197 
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
__exãnsi⁄__


200 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_MISC


206 
__BEGIN_NAMESPACE_C99


208 
__exãnsi⁄__


209 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

210 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

211 
__THROW
 
	`__n⁄nuŒ
 ((1));

213 
__exãnsi⁄__


214 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

215 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
__END_NAMESPACE_C99


221 #ifde‡
__USE_GNU


235 
	~<xloˇÀ.h
>

239 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

240 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

241 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

243 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

244 **
__ª°ri˘
 
__íd±r
,

245 
__ba£
, 
__loˇÀ_t
 
__loc
)

246 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

248 
__exãnsi⁄__


249 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

250 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

251 
__loˇÀ_t
 
__loc
)

252 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

254 
__exãnsi⁄__


255 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

256 **
__ª°ri˘
 
__íd±r
,

257 
__ba£
, 
__loˇÀ_t
 
__loc
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

260 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

261 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

262 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

264 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

265 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

266 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

268 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

269 **
__ª°ri˘
 
__íd±r
,

270 
__loˇÀ_t
 
__loc
)

271 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

275 #ifde‡
__USE_EXTERN_INLINES


276 
__BEGIN_NAMESPACE_STD


277 
__exã∫_ölöe
 

278 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

280  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

281 
	}
}

282 
__exã∫_ölöe
 

283 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

285  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

286 
	}
}

287 
	g__END_NAMESPACE_STD


289 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


290 
__BEGIN_NAMESPACE_C99


291 
__exãnsi⁄__
 
__exã∫_ölöe
 

292 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

294  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

295 
	}
}

296 
	g__END_NAMESPACE_C99


301 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


305 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

308 
	$a64l
 (c⁄° *
__s
)

309 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

313 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


314 
	~<sys/ty≥s.h
>

321 
	$øndom
 (Ë
__THROW
;

324 
	$§™dom
 (
__£ed
Ë
__THROW
;

330 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

331 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

335 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

338 #ifde‡
__USE_MISC


343 
	søndom_d©a


345 
öt32_t
 *
Âå
;

346 
öt32_t
 *
Ωå
;

347 
öt32_t
 *
°©e
;

348 
ønd_ty≥
;

349 
ønd_deg
;

350 
ønd_£p
;

351 
öt32_t
 *
íd_±r
;

354 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

355 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

357 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

360 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

361 
size_t
 
__°©ñí
,

362 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

363 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

365 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

366 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

367 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

372 
__BEGIN_NAMESPACE_STD


374 
	$ønd
 (Ë
__THROW
;

376 
	$§™d
 (
__£ed
Ë
__THROW
;

377 
__END_NAMESPACE_STD


379 #ifde‡
__USE_POSIX


381 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

385 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


389 
	$dønd48
 (Ë
__THROW
;

390 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 
	$Ã™d48
 (Ë
__THROW
;

394 
	$ƒ™d48
 (
__xsubi
[3])

395 
__THROW
 
	`__n⁄nuŒ
 ((1));

398 
	$mønd48
 (Ë
__THROW
;

399 
	$jønd48
 (
__xsubi
[3])

400 
__THROW
 
	`__n⁄nuŒ
 ((1));

403 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

404 *
	$£ed48
 (
__£ed16v
[3])

405 
__THROW
 
	`__n⁄nuŒ
 ((1));

406 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

408 #ifde‡
__USE_MISC


412 
	sdønd48_d©a


414 
__x
[3];

415 
__ﬁd_x
[3];

416 
__c
;

417 
__öô
;

418 
__exãnsi⁄__
 
__a
;

423 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

424 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

425 
	$î™d48_r
 (
__xsubi
[3],

426 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

427 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

431 *
__ª°ri˘
 
__ªsu…
)

432 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

433 
	$ƒ™d48_r
 (
__xsubi
[3],

434 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

435 *
__ª°ri˘
 
__ªsu…
)

436 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

439 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

442 
	$jønd48_r
 (
__xsubi
[3],

443 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

444 *
__ª°ri˘
 
__ªsu…
)

445 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

448 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

449 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$£ed48_r
 (
__£ed16v
[3],

452 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$lc⁄g48_r
 (
__∑øm
[7],

455 
dønd48_d©a
 *
__buf„r
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

462 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


463 
	#__mÆloc_™d_ˇŒoc_deföed


	)

464 
__BEGIN_NAMESPACE_STD


466 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

468 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

469 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

470 
__END_NAMESPACE_STD


473 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


474 
__BEGIN_NAMESPACE_STD


480 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

481 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

483 
	$‰ì
 (*
__±r
Ë
__THROW
;

484 
__END_NAMESPACE_STD


486 #ifdef 
__USE_MISC


488 
	$c‰ì
 (*
__±r
Ë
__THROW
;

491 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


492 
	~<Æloˇ.h
>

495 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

496 || 
deföed
 
__USE_BSD


498 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

501 #ifde‡
__USE_XOPEN2K


503 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

504 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

507 #ifde‡
__USE_ISOC11


509 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

510 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

513 
__BEGIN_NAMESPACE_STD


515 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

519 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

521 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


523 #ifde‡
__˝lu•lus


524 "C++" 
	`©_quick_exô
 ((*
__func
) ())

525 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

527 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

530 
__END_NAMESPACE_STD


532 #ifdef 
__USE_MISC


535 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

536 
__THROW
 
	`__n⁄nuŒ
 ((1));

539 
__BEGIN_NAMESPACE_STD


543 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

545 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


549 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

551 
__END_NAMESPACE_STD


553 #ifde‡
__USE_ISOC99


554 
__BEGIN_NAMESPACE_C99


557 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

558 
__END_NAMESPACE_C99


562 
__BEGIN_NAMESPACE_STD


564 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

565 
__END_NAMESPACE_STD


567 #ifde‡
__USE_GNU


570 *
	$£cuª_gëív
 (c⁄° *
__«me
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

574 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


578 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

581 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


584 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

585 
__THROW
 
	`__n⁄nuŒ
 ((2));

588 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #ifdef 
__USE_MISC


595 
	$˛óªnv
 (Ë
__THROW
;

599 #i‡
deföed
 
__USE_MISC
 \

600 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

609 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

610 || 
deföed
 
__USE_XOPEN2K8


619 #i‚de‡
__USE_FILE_OFFSET64


620 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

622 #ifde‡
__REDIRECT


623 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

624 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
	#mk°emp
 
mk°emp64


	)

629 #ifde‡
__USE_LARGEFILE64


630 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

634 #ifde‡
__USE_MISC


641 #i‚de‡
__USE_FILE_OFFSET64


642 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

644 #ifde‡
__REDIRECT


645 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

646 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 
	#mk°emps
 
mk°emps64


	)

651 #ifde‡
__USE_LARGEFILE64


652 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

653 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


663 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

666 #ifde‡
__USE_GNU


673 #i‚de‡
__USE_FILE_OFFSET64


674 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

676 #ifde‡
__REDIRECT


677 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

678 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

680 
	#mko°emp
 
mko°emp64


	)

683 #ifde‡
__USE_LARGEFILE64


684 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

693 #i‚de‡
__USE_FILE_OFFSET64


694 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

699 
__Êags
), 
mko°emps64
)

700 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 
	#mko°emps
 
mko°emps64


	)

705 #ifde‡
__USE_LARGEFILE64


706 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

707 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

728 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


734 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

735 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

740 #i‚de‡
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com∑r_‚_t
) (const *, const *);

744 #ifdef 
__USE_GNU


745 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

748 #ifde‡
__USE_GNU


749 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

752 
__BEGIN_NAMESPACE_STD


755 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

756 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

757 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

759 #ifde‡
__USE_EXTERN_INLINES


760 
	~<bôs/°dlib-b£¨ch.h
>

765 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

766 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

767 #ifde‡
__USE_GNU


768 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

769 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

770 
	`__n⁄nuŒ
 ((1, 4));

775 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

776 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

777 
__END_NAMESPACE_STD


779 #ifde‡
__USE_ISOC99


780 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

781 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

785 
__BEGIN_NAMESPACE_STD


789 
div_t
 
	$div
 (
__numî
, 
__díom
)

790 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

791 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

792 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

793 
__END_NAMESPACE_STD


795 #ifde‡
__USE_ISOC99


796 
__BEGIN_NAMESPACE_C99


797 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

798 
__díom
)

799 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

800 
__END_NAMESPACE_C99


804 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

805 || 
deföed
 
__USE_SVID


812 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

813 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

818 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

819 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

824 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

825 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

828 #ifde‡
__USE_MISC


830 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

831 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

832 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

833 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

834 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

835 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

836 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

837 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

842 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

843 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

844 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

845 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

846 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

847 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

849 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

850 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

851 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

852 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

853 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

854 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

855 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

856 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

860 
__BEGIN_NAMESPACE_STD


863 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

866 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

867 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

870 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

874 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

875 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

877 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

878 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

879 
__THROW
;

880 
__END_NAMESPACE_STD


883 #ifde‡
__USE_SVID


888 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

892 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


899 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

900 *c⁄° *
__ª°ri˘
 
__tokís
,

901 **
__ª°ri˘
 
__vÆuï
)

902 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

906 #ifde‡
__USE_XOPEN


908 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

914 #ifde‡
__USE_XOPEN2KXSI


916 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

919 #ifde‡
__USE_XOPEN


924 
	$gø¡±
 (
__fd
Ë
__THROW
;

928 
	$u∆ock±
 (
__fd
Ë
__THROW
;

933 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

936 #ifde‡
__USE_GNU


940 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

941 
__THROW
 
	`__n⁄nuŒ
 ((2));

944 
	`gë±
 ();

947 #ifde‡
__USE_BSD


951 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

952 
__THROW
 
	`__n⁄nuŒ
 ((1));

955 
	~<bôs/°dlib-Êﬂt.h
>

958 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


959 
	~<bôs/°dlib.h
>

961 #ifde‡
__LDBL_COMPAT


962 
	~<bôs/°dlib-ldbl.h
>

966 #unde‡
__√ed_mÆloc_™d_ˇŒoc


968 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


30 
	#__√ed_size_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

35 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

36 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

40 
__BEGIN_NAMESPACE_STD


42 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

43 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

46 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

47 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

48 
__END_NAMESPACE_STD


53 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


54 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

55 
__c
, 
size_t
 
__n
)

56 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

60 
__BEGIN_NAMESPACE_STD


62 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

65 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

66 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

69 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


72 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

73 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

74 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

75 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 #ifde‡
__OPTIMIZE__


78 
__exã∫_Æways_ölöe
 *

79 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


81  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

84 
__exã∫_Æways_ölöe
 const *

85 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


87  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

90 
	}
}

92 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

93 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

95 
__END_NAMESPACE_STD


97 #ifde‡
__USE_GNU


100 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


101 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

102 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

103 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

104 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

107 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

111 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


112 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

113 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

115 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

123 
__BEGIN_NAMESPACE_STD


125 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

128 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

129 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

133 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

137 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

141 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

151 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
 
	`__n⁄nuŒ
 ((2));

153 
__END_NAMESPACE_STD


155 #ifde‡
__USE_XOPEN2K8


159 
	~<xloˇÀ.h
>

162 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

163 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

165 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

166 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

169 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

170 || 
deföed
 
__USE_XOPEN2K8


172 *
	$°rdup
 (c⁄° *
__s
)

173 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

179 #i‡
deföed
 
__USE_XOPEN2K8


180 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

181 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

184 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


186 
	#°rdu∑
(
s
) \

187 (
__exãnsi⁄__
 \

189 c⁄° *
__ﬁd
 = (
s
); \

190 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

191 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

192 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

193 
	}
}))

	)

196 
	#°∫du∑
(
s
, 
n
) \

197 (
__exãnsi⁄__
 \

199 c⁄° *
__ﬁd
 = (
s
); \

200 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

201 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

202 
__√w
[
__Àn
] = '\0'; \

203 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

204 }))

	)

207 
	g__BEGIN_NAMESPACE_STD


209 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


212 *
°rchr
 (*
__s
, 
__c
)

213 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

214 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

215 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

217 #ifde‡
__OPTIMIZE__


218 
__exã∫_Æways_ölöe
 *

219 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


221  
__buûtö_°rchr
 (
__s
, 
__c
);

224 
__exã∫_Æways_ölöe
 const *

225 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


227  
__buûtö_°rchr
 (
__s
, 
__c
);

232 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

233 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

236 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


239 *
	`°ºchr
 (*
__s
, 
__c
)

240 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

241 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

242 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 #ifde‡
__OPTIMIZE__


245 
__exã∫_Æways_ölöe
 *

246 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


248  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

251 
__exã∫_Æways_ölöe
 const *

252 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


254  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

257 
	}
}

259 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

260 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

262 
__END_NAMESPACE_STD


264 #ifde‡
__USE_GNU


267 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


268 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

269 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

270 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

271 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

274 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

278 
__BEGIN_NAMESPACE_STD


281 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

282 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

285 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

286 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


291 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

292 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

293 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

294 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

296 #ifde‡
__OPTIMIZE__


297 
__exã∫_Æways_ölöe
 *

298 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


300  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

303 
__exã∫_Æways_ölöe
 const *

304 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


306  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

309 
	}
}

311 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

312 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

315 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


318 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

319 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

320 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

321 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 #ifde‡
__OPTIMIZE__


324 
__exã∫_Æways_ölöe
 *

325 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


327  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

330 
__exã∫_Æways_ölöe
 const *

331 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


333  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

336 
	}
}

338 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

339 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

344 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

345 
__THROW
 
	`__n⁄nuŒ
 ((2));

346 
__END_NAMESPACE_STD


350 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

351 c⁄° *
__ª°ri˘
 
__dñim
,

352 **
__ª°ri˘
 
__ßve_±r
)

353 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

354 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


355 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

360 #ifde‡
__USE_GNU


362 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


363 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

364 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

365 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

366 c⁄° *
__√edÀ
)

367 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

370 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

374 #ifde‡
__USE_GNU


378 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

379 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

380 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

384 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

385 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

386 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

387 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

388 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

389 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

393 
__BEGIN_NAMESPACE_STD


395 
size_t
 
	$°æí
 (c⁄° *
__s
)

396 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

397 
__END_NAMESPACE_STD


399 #ifdef 
__USE_XOPEN2K8


402 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

403 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

407 
__BEGIN_NAMESPACE_STD


409 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

410 
__END_NAMESPACE_STD


411 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


419 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


422 #ifde‡
__REDIRECT_NTH


423 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

424 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

425 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

427 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

428 
__THROW
 
	`__n⁄nuŒ
 ((2));

429 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

434 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

435 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

439 #ifde‡
__USE_XOPEN2K8


441 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

447 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

449 #ifde‡
__USE_BSD


451 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

452 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

455 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

458 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

459 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

462 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


465 *
	`ödex
 (*
__s
, 
__c
)

466 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

467 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

468 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

470 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


471 
__exã∫_Æways_ölöe
 *

472 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


474  
	`__buûtö_ödex
 (
__s
, 
__c
);

477 
__exã∫_Æways_ölöe
 const *

478 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


480  
	`__buûtö_ödex
 (
__s
, 
__c
);

483 
	}
}

485 *
	$ödex
 (c⁄° *
__s
, 
__c
)

486 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

490 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


493 *
	`rödex
 (*
__s
, 
__c
)

494 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

495 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

496 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

498 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


499 
__exã∫_Æways_ölöe
 *

500 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


502  
	`__buûtö_rödex
 (
__s
, 
__c
);

505 
__exã∫_Æways_ölöe
 const *

506 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


508  
	`__buûtö_rödex
 (
__s
, 
__c
);

511 
	}
}

513 *
	$rödex
 (c⁄° *
__s
, 
__c
)

514 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

519 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

523 #ifdef 
__USE_GNU


524 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

525 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

526 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

530 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

531 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

534 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

535 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

538 #ifdef 
__USE_GNU


541 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

542 
__loˇÀ_t
 
__loc
)

543 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

545 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

546 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

547 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

550 #ifdef 
__USE_BSD


553 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

554 c⁄° *
__ª°ri˘
 
__dñim
)

555 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

558 #ifdef 
__USE_XOPEN2K8


560 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

563 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

564 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

565 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

566 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

570 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

571 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

573 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

574 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

575 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

578 #ifdef 
__USE_GNU


580 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

581 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

584 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

587 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

589 #i‚de‡
ba£«me


594 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


595 "C++" *
	$ba£«me
 (*
__fûíame
)

596 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

597 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

598 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

600 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

606 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

607 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

608 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


628 
	~<bôs/°rög.h
>

631 
	~<bôs/°rög2.h
>

634 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


636 
	~<bôs/°rög3.h
>

640 
__END_DECLS


	@/usr/include/sys/fcntl.h

1 
	~<f˙é.h
>

	@/usr/include/sys/ioctl.h

18 #i‚def 
_SYS_IOCTL_H


19 
	#_SYS_IOCTL_H
 1

	)

21 
	~<„©uªs.h
>

23 
	g__BEGIN_DECLS


26 
	~<bôs/io˘ls.h
>

29 
	~<bôs/io˘l-ty≥s.h
>

36 
	~<sys/âydeÁu…s.h
>

41 
	$io˘l
 (
__fd
, 
__ªque°
, ...Ë
__THROW
;

43 
__END_DECLS


	@/usr/include/sys/ipc.h

18 #i‚de‡
_SYS_IPC_H


19 
	#_SYS_IPC_H
 1

	)

21 
	~<„©uªs.h
>

23 #i‡!
deföed
 
__USE_SVID
 && !deföed 
__USE_XOPEN
 && 
__GNUC__
 >= 2

28 
	~<bôs/ù˘y≥s.h
>

29 
	~<bôs/ùc.h
>

31 #i‚de‡
__uid_t_deföed


32 
__uid_t
 
	tuid_t
;

33 
	#__uid_t_deföed


	)

36 #i‚de‡
__gid_t_deföed


37 
__gid_t
 
	tgid_t
;

38 
	#__gid_t_deföed


	)

41 #i‚de‡
__mode_t_deföed


42 
__mode_t
 
	tmode_t
;

43 
	#__mode_t_deföed


	)

46 #i‚de‡
__key_t_deföed


47 
__key_t
 
	tkey_t
;

48 
	#__key_t_deföed


	)

51 
__BEGIN_DECLS


54 
key_t
 
	$·ok
 (c⁄° *
__∑th«me
, 
__¥oj_id
Ë
__THROW
;

56 
__END_DECLS


	@/usr/include/sys/mman.h

19 #i‚def 
_SYS_MMAN_H


20 
	#_SYS_MMAN_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<bôs/ty≥s.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 #i‚de‡
__off_t_deföed


28 #i‚de‡
__USE_FILE_OFFSET64


29 
__off_t
 
	toff_t
;

31 
__off64_t
 
	toff_t
;

33 
	#__off_t_deföed


	)

36 #i‚de‡
__mode_t_deföed


37 
__mode_t
 
	tmode_t
;

38 
	#__mode_t_deföed


	)

41 
	~<bôs/mm™.h
>

44 
	#MAP_FAILED
 ((*Ë-1)

	)

46 
	g__BEGIN_DECLS


56 #i‚de‡
__USE_FILE_OFFSET64


57 *
	$mm≠
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

58 
__Êags
, 
__fd
, 
__off_t
 
__off£t
Ë
__THROW
;

60 #ifde‡
__REDIRECT_NTH


61 * 
	`__REDIRECT_NTH
 (
mm≠
,

62 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

63 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
),

64 
mm≠64
);

66 
	#mm≠
 
mm≠64


	)

69 #ifde‡
__USE_LARGEFILE64


70 *
	$mm≠64
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

71 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
Ë
__THROW
;

76 
	$munm≠
 (*
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

81 
	$m¥Ÿe˘
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
Ë
__THROW
;

89 
	`msync
 (*
__addr
, 
size_t
 
__Àn
, 
__Êags
);

91 #ifde‡
__USE_BSD


94 
	$madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

96 #ifde‡
__USE_XOPEN2K


98 
	$posix_madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

103 
	$mlock
 (c⁄° *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

106 
	$mu∆ock
 (c⁄° *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

111 
	$mlockÆl
 (
__Êags
Ë
__THROW
;

115 
	$mu∆ockÆl
 (Ë
__THROW
;

117 #ifde‡
__USE_MISC


123 
	$möc‹e
 (*
__°¨t
, 
size_t
 
__Àn
, *
__vec
)

124 
__THROW
;

127 #ifde‡
__USE_GNU


133 *
	$mªm≠
 (*
__addr
, 
size_t
 
__ﬁd_Àn
, size_à
__√w_Àn
,

134 
__Êags
, ...Ë
__THROW
;

138 
	$ªm≠_fûe_∑ges
 (*
__°¨t
, 
size_t
 
__size
, 
__¥Ÿ
,

139 
size_t
 
__pgoff
, 
__Êags
Ë
__THROW
;

144 
	`shm_›í
 (c⁄° *
__«me
, 
__oÊag
, 
mode_t
 
__mode
);

147 
	`shm_u∆ök
 (c⁄° *
__«me
);

149 
__END_DECLS


	@/usr/include/sys/param.h

19 #i‚de‡
_SYS_PARAM_H


20 
	#_SYS_PARAM_H
 1

	)

22 
	#__√ed_NULL


	)

23 
	~<°ddef.h
>

25 
	~<sys/ty≥s.h
>

26 
	~<limôs.h
>

27 
	~<ídün.h
>

28 
	~<sig«l.h
>

31 
	~<bôs/∑øm.h
>

36 
	#NBBY
 
CHAR_BIT


	)

38 #i‡!
deföed
 
NGROUPS
 && deföed 
NGROUPS_MAX


39 
	#NGROUPS
 
NGROUPS_MAX


	)

41 #i‡!
deföed
 
MAXSYMLINKS
 && deföed 
SYMLOOP_MAX


42 
	#MAXSYMLINKS
 
SYMLOOP_MAX


	)

44 #i‡!
deföed
 
CANBSIZ
 && deföed 
MAX_CANON


45 
	#CANBSIZ
 
MAX_CANON


	)

47 #i‡!
deföed
 
MAXPATHLEN
 && deföed 
PATH_MAX


48 
	#MAXPATHLEN
 
PATH_MAX


	)

50 #i‡!
deföed
 
NOFILE
 && deföed 
OPEN_MAX


51 
	#NOFILE
 
OPEN_MAX


	)

53 #i‚de‡
NCARGS


54 #ifde‡
ARG_MAX


55 
	#NCARGS
 
ARG_MAX


	)

59 
	#NCARGS
 
INT_MAX


	)

65 #i‚de‡
NOGROUP


66 
	#NOGROUP
 65535

	)

68 #i‚de‡
NODEV


69 
	#NODEV
 ((
dev_t
Ë-1Ë

	)

74 #i‚de‡
DEV_BSIZE


75 
	#DEV_BSIZE
 512

	)

80 
	#£tbô
(
a
,
i
Ë(◊)[(i)/
NBBY
] |1<<((i)%NBBY))

	)

81 
	#˛rbô
(
a
,
i
Ë(◊)[(i)/
NBBY
] &~(1<<((i)%NBBY)))

	)

82 
	#is£t
(
a
,
i
Ë(◊)[(i)/
NBBY
] & (1<<((i)%NBBY)))

	)

83 
	#is˛r
(
a
,
i
Ë((◊)[(i)/
NBBY
] & (1<<((i)%NBBY))Ë=0)

	)

86 #i‚de‡
howm™y


87 
	#howm™y
(
x
, 
y
Ë(((xË+ ((yË- 1)Ë/ (y))

	)

89 #ifde‡
__GNUC__


90 
	#roundup
(
x
, 
y
Ë(
	`__buûtö_c⁄°™t_p
 (yË&& 
	`powîof2
 (y) \

91 ? (((
x
Ë+ (
y
) - 1) & ~((y) - 1)) \

92 : ((((
x
Ë+ ((
y
Ë- 1)Ë/ (y)Ë* (y)))

	)

94 
	#roundup
(
x
, 
y
Ë((((xË+ ((yË- 1)Ë/ (y)Ë* (y))

	)

96 
	#powîof2
(
x
Ë((((xË- 1Ë& (x)Ë=0)

	)

99 
	#MIN
(
a
,
b
Ë((◊)<(b))?◊):(b))

	)

100 
	#MAX
(
a
,
b
Ë((◊)>(b))?◊):(b))

	)

	@/usr/include/sys/poll.h

19 #i‚def 
_SYS_POLL_H


20 
	#_SYS_POLL_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/pﬁl.h
>

26 #ifde‡
__USE_GNU


28 
	~<bôs/sig£t.h
>

30 
	#__√ed_time•ec


	)

31 
	~<time.h
>

36 
	tnfds_t
;

39 
	spﬁlfd


41 
	mfd
;

42 
	mevíts
;

43 
	mªvíts
;

47 
__BEGIN_DECLS


57 
pﬁl
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
, 
__timeout
);

59 #ifde‡
__USE_GNU


66 
µﬁl
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

67 c⁄° 
time•ec
 *
__timeout
,

68 c⁄° 
__sig£t_t
 *
__ss
);

71 
	g__END_DECLS


75 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


76 
	~<bôs/pﬁl2.h
>

	@/usr/include/sys/resource.h

18 #i‚def 
_SYS_RESOURCE_H


19 
	#_SYS_RESOURCE_H
 1

	)

21 
	~<„©uªs.h
>

24 
	~<bôs/ªsour˚.h
>

26 #i‚de‡
__id_t_deföed


27 
__id_t
 
	tid_t
;

28 
	#__id_t_deföed


	)

31 
	g__BEGIN_DECLS


37 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


38 
__æimô_ªsour˚
 
	t__æimô_ªsour˚_t
;

39 
__rußge_who
 
	t__rußge_who_t
;

40 
__¥i‹ôy_which
 
	t__¥i‹ôy_which_t
;

42 
	t__æimô_ªsour˚_t
;

43 
	t__rußge_who_t
;

44 
	t__¥i‹ôy_which_t
;

49 #i‚de‡
__USE_FILE_OFFSET64


50 
	$gëæimô
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

51 
æimô
 *
__æimôs
Ë
__THROW
;

53 #ifde‡
__REDIRECT_NTH


54 
	`__REDIRECT_NTH
 (
gëæimô
, (
__æimô_ªsour˚_t
 
__ªsour˚
,

55 
æimô
 *
__æimôs
), 
gëæimô64
);

57 
	#gëæimô
 
gëæimô64


	)

60 #ifde‡
__USE_LARGEFILE64


61 
	$gëæimô64
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

62 
æimô64
 *
__æimôs
Ë
__THROW
;

68 #i‚de‡
__USE_FILE_OFFSET64


69 
	$£ålimô
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

70 c⁄° 
æimô
 *
__æimôs
Ë
__THROW
;

72 #ifde‡
__REDIRECT_NTH


73 
	`__REDIRECT_NTH
 (
£ålimô
, (
__æimô_ªsour˚_t
 
__ªsour˚
,

74 c⁄° 
æimô
 *
__æimôs
),

75 
£ålimô64
);

77 
	#£ålimô
 
£ålimô64


	)

80 #ifde‡
__USE_LARGEFILE64


81 
	$£ålimô64
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

82 c⁄° 
æimô64
 *
__æimôs
Ë
__THROW
;

87 
	$gërußge
 (
__rußge_who_t
 
__who
, 
rußge
 *
__ußge
Ë
__THROW
;

93 
	$gë¥i‹ôy
 (
__¥i‹ôy_which_t
 
__which
, 
id_t
 
__who
Ë
__THROW
;

97 
	$£çri‹ôy
 (
__¥i‹ôy_which_t
 
__which
, 
id_t
 
__who
, 
__¥io
)

98 
__THROW
;

100 
__END_DECLS


	@/usr/include/sys/shm.h

18 #i‚de‡
_SYS_SHM_H


19 
	#_SYS_SHM_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

27 
	~<sys/ùc.h
>

30 
	~<bôs/shm.h
>

33 
	#__√ed_time_t


	)

34 
	~<time.h
>

36 #ifde‡
__USE_XOPEN


37 #i‚de‡
__pid_t_deföed


38 
__pid_t
 
	tpid_t
;

39 
	#__pid_t_deföed


	)

44 
__BEGIN_DECLS


50 
	$shm˘l
 (
__shmid
, 
__cmd
, 
shmid_ds
 *
__buf
Ë
__THROW
;

53 
	$shmgë
 (
key_t
 
__key
, 
size_t
 
__size
, 
__shmÊg
Ë
__THROW
;

56 *
	$shm©
 (
__shmid
, c⁄° *
__shmaddr
, 
__shmÊg
)

57 
__THROW
;

60 
	$shmdt
 (c⁄° *
__shmaddr
Ë
__THROW
;

62 
__END_DECLS


	@/usr/include/sys/socket.h

19 #i‚def 
_SYS_SOCKET_H


20 
	#_SYS_SOCKET_H
 1

	)

22 
	~<„©uªs.h
>

24 
	g__BEGIN_DECLS


26 
	~<sys/uio.h
>

27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

29 #ifde‡
__USE_GNU


31 
	~<bôs/sig£t.h
>

38 
	~<bôs/sockë.h
>

40 #ifde‡
__USE_BSD


43 
	sosockaddr


45 
	mß_Ámûy
;

46 
	mß_d©a
[14];

54 
	mSHUT_RD
 = 0,

55 
	#SHUT_RD
 
SHUT_RD


	)

56 
	mSHUT_WR
,

57 
	#SHUT_WR
 
SHUT_WR


	)

58 
	mSHUT_RDWR


59 
	#SHUT_RDWR
 
SHUT_RDWR


	)

68 #i‡
deföed
 
__˝lu•lus
 || !
__GNUC_PREREQ
 (2, 7Ë|| !deföed 
__USE_GNU


69 
	#__SOCKADDR_ARG
 
sockaddr
 *
__ª°ri˘


	)

70 
	#__CONST_SOCKADDR_ARG
 c⁄° 
sockaddr
 *

	)

74 
	#__SOCKADDR_ALLTYPES
 \

75 
	`__SOCKADDR_ONETYPE
 (
sockaddr
) \

76 
	`__SOCKADDR_ONETYPE
 (
sockaddr_©
) \

77 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ax25
) \

78 
	`__SOCKADDR_ONETYPE
 (
sockaddr_dl
) \

79 
	`__SOCKADDR_ONETYPE
 (
sockaddr_e⁄
) \

80 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö
) \

81 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö6
) \

82 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö¨p
) \

83 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ùx
) \

84 
	`__SOCKADDR_ONETYPE
 (
sockaddr_iso
) \

85 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ns
) \

86 
	`__SOCKADDR_ONETYPE
 (
sockaddr_un
) \

87 
	`__SOCKADDR_ONETYPE
 (
sockaddr_x25
)

	)

89 
	#__SOCKADDR_ONETYPE
(
ty≥
Ëty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

90 uni⁄ { 
	m__SOCKADDR_ALLTYPES


91 } 
	t__SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

92 #unde‡
__SOCKADDR_ONETYPE


93 
	#__SOCKADDR_ONETYPE
(
ty≥
Ëc⁄° ty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

94 uni⁄ { 
	m__SOCKADDR_ALLTYPES


95 } 
	t__CONST_SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

96 #unde‡
__SOCKADDR_ONETYPE


99 #ifde‡
__USE_GNU


101 
	smmsghdr


103 
msghdr
 
	mmsg_hdr
;

104 
	mmsg_Àn
;

113 
	$sockë
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
Ë
__THROW
;

119 
	$sockë∑ú
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
,

120 
__fds
[2]Ë
__THROW
;

123 
	$böd
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
)

124 
__THROW
;

127 
	$gësock«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

128 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

137 
	`c⁄√˘
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
);

141 
	$gë≥î«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

142 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

149 
ssize_t
 
	`£nd
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
, 
__Êags
);

156 
ssize_t
 
	`ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
);

163 
ssize_t
 
	`£ndto
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

164 
__Êags
, 
__CONST_SOCKADDR_ARG
 
__addr
,

165 
sockÀn_t
 
__addr_Àn
);

174 
ssize_t
 
	`ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

175 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

176 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

184 
ssize_t
 
	`£ndmsg
 (
__fd
, c⁄° 
msghdr
 *
__mesßge
,

185 
__Êags
);

187 #ifde‡
__USE_GNU


193 
	`£ndmmsg
 (
__fd
, 
mmsghdr
 *
__vmesßges
,

194 
__vÀn
, 
__Êags
);

202 
ssize_t
 
	`ªcvmsg
 (
__fd
, 
msghdr
 *
__mesßge
, 
__Êags
);

204 #ifde‡
__USE_GNU


210 
	`ªcvmmsg
 (
__fd
, 
mmsghdr
 *
__vmesßges
,

211 
__vÀn
, 
__Êags
,

212 c⁄° 
time•ec
 *
__tmo
);

219 
	$gësock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

220 *
__ª°ri˘
 
__›tvÆ
,

221 
sockÀn_t
 *
__ª°ri˘
 
__›éí
Ë
__THROW
;

226 
	$£tsock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

227 c⁄° *
__›tvÆ
, 
sockÀn_t
 
__›éí
Ë
__THROW
;

233 
	$li°í
 (
__fd
, 
__n
Ë
__THROW
;

243 
	`ac˚±
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

244 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

246 #ifde‡
__USE_GNU


251 
	`ac˚±4
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

252 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
, 
__Êags
);

261 
	$shutdown
 (
__fd
, 
__how
Ë
__THROW
;

264 #ifde‡
__USE_XOPEN2K


266 
	$sock©m¨k
 (
__fd
Ë
__THROW
;

270 #ifde‡
__USE_MISC


274 
	$isfdty≥
 (
__fd
, 
__fdty≥
Ë
__THROW
;

279 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


280 
	~<bôs/sockë2.h
>

283 
__END_DECLS


	@/usr/include/sys/stat.h

22 #i‚def 
_SYS_STAT_H


23 
	#_SYS_STAT_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K
 || deföed 
__USE_MISC
 \

30 || 
deföed
 
	g__USE_ATFILE


31 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


32 
	#__√ed_time_t


	)

34 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ATFILE


35 
	#__√ed_time•ec


	)

37 
	~<time.h
>

40 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


43 #i‚de‡
__dev_t_deföed


44 
__dev_t
 
	tdev_t
;

45 
	#__dev_t_deföed


	)

48 #i‚de‡
__gid_t_deföed


49 
__gid_t
 
	tgid_t
;

50 
	#__gid_t_deföed


	)

53 #i‚de‡
__öo_t_deföed


54 #i‚de‡
__USE_FILE_OFFSET64


55 
__öo_t
 
	töo_t
;

57 
__öo64_t
 
	töo_t
;

59 
	#__öo_t_deföed


	)

62 #i‚de‡
__mode_t_deföed


63 
__mode_t
 
	tmode_t
;

64 
	#__mode_t_deföed


	)

67 #i‚de‡
__∆ök_t_deföed


68 
__∆ök_t
 
	t∆ök_t
;

69 
	#__∆ök_t_deföed


	)

72 #i‚de‡
__off_t_deföed


73 #i‚de‡
__USE_FILE_OFFSET64


74 
__off_t
 
	toff_t
;

76 
__off64_t
 
	toff_t
;

78 
	#__off_t_deföed


	)

81 #i‚de‡
__uid_t_deföed


82 
__uid_t
 
	tuid_t
;

83 
	#__uid_t_deföed


	)

87 #ifde‡
__USE_UNIX98


88 #i‚de‡
__blk˙t_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__blk˙t_t
 
	tblk˙t_t
;

92 
__blk˙t64_t
 
	tblk˙t_t
;

94 
	#__blk˙t_t_deföed


	)

97 #i‚de‡
__blksize_t_deföed


98 
__blksize_t
 
	tblksize_t
;

99 
	#__blksize_t_deföed


	)

103 
	g__BEGIN_DECLS


105 
	~<bôs/°©.h
>

107 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


108 
	#S_IFMT
 
__S_IFMT


	)

109 
	#S_IFDIR
 
__S_IFDIR


	)

110 
	#S_IFCHR
 
__S_IFCHR


	)

111 
	#S_IFBLK
 
__S_IFBLK


	)

112 
	#S_IFREG
 
__S_IFREG


	)

113 #ifde‡
__S_IFIFO


114 
	#S_IFIFO
 
__S_IFIFO


	)

116 #ifde‡
__S_IFLNK


117 
	#S_IFLNK
 
__S_IFLNK


	)

119 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_UNIX98
) \

120 && 
deföed
 
	g__S_IFSOCK


121 
	#S_IFSOCK
 
__S_IFSOCK


	)

127 
	#__S_ISTYPE
(
mode
, 
mask
Ë(((modeË& 
__S_IFMT
Ë=(mask))

	)

129 
	#S_ISDIR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFDIR
)

	)

130 
	#S_ISCHR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFCHR
)

	)

131 
	#S_ISBLK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFBLK
)

	)

132 
	#S_ISREG
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFREG
)

	)

133 #ifde‡
__S_IFIFO


134 
	#S_ISFIFO
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFIFO
)

	)

136 #ifde‡
__S_IFLNK


137 
	#S_ISLNK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFLNK
)

	)

140 #i‡
deföed
 
__USE_BSD
 && !deföed 
__S_IFLNK


141 
	#S_ISLNK
(
mode
Ë0

	)

144 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K
) \

145 && 
deföed
 
	g__S_IFSOCK


146 
	#S_ISSOCK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFSOCK
)

	)

147 #ñi‡
deföed
 
__USE_XOPEN2K


148 
	#S_ISSOCK
(
mode
Ë0

	)

155 #ifdef 
__USE_POSIX199309


156 
	#S_TYPEISMQ
(
buf
Ë
	`__S_TYPEISMQ
(buf)

	)

157 
	#S_TYPEISSEM
(
buf
Ë
	`__S_TYPEISSEM
(buf)

	)

158 
	#S_TYPEISSHM
(
buf
Ë
	`__S_TYPEISSHM
(buf)

	)

164 
	#S_ISUID
 
__S_ISUID


	)

165 
	#S_ISGID
 
__S_ISGID


	)

167 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


169 
	#S_ISVTX
 
__S_ISVTX


	)

172 
	#S_IRUSR
 
__S_IREAD


	)

173 
	#S_IWUSR
 
__S_IWRITE


	)

174 
	#S_IXUSR
 
__S_IEXEC


	)

176 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

178 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_BSD


179 
	#S_IREAD
 
S_IRUSR


	)

180 
	#S_IWRITE
 
S_IWUSR


	)

181 
	#S_IEXEC
 
S_IXUSR


	)

184 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

185 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

186 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

188 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

190 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

191 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

192 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

194 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

197 #ifdef 
__USE_BSD


199 
	#ACCESSPERMS
 (
S_IRWXU
|
S_IRWXG
|
S_IRWXO
Ë

	)

200 
	#ALLPERMS
 (
S_ISUID
|
S_ISGID
|
S_ISVTX
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

201 
	#DEFFILEMODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

203 
	#S_BLKSIZE
 512

	)

207 #i‚de‡
__USE_FILE_OFFSET64


209 
	$°©
 (c⁄° *
__ª°ri˘
 
__fûe
,

210 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

214 
	$f°©
 (
__fd
, 
°©
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

216 #ifde‡
__REDIRECT_NTH


217 
	`__REDIRECT_NTH
 (
°©
, (c⁄° *
__ª°ri˘
 
__fûe
,

218 
°©
 *
__ª°ri˘
 
__buf
), 
°©64
)

219 
	`__n⁄nuŒ
 ((1, 2));

220 
	`__REDIRECT_NTH
 (
f°©
, (
__fd
, 
°©
 *
__buf
), 
f°©64
)

221 
	`__n⁄nuŒ
 ((2));

223 
	#°©
 
°©64


	)

224 
	#f°©
 
f°©64


	)

227 #ifde‡
__USE_LARGEFILE64


228 
	$°©64
 (c⁄° *
__ª°ri˘
 
__fûe
,

229 
°©64
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

230 
	$f°©64
 (
__fd
, 
°©64
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

233 #ifde‡
__USE_ATFILE


237 #i‚de‡
__USE_FILE_OFFSET64


238 
	$f°©©
 (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

239 
°©
 *
__ª°ri˘
 
__buf
, 
__Êag
)

240 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

242 #ifde‡
__REDIRECT_NTH


243 
	`__REDIRECT_NTH
 (
f°©©
, (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

244 
°©
 *
__ª°ri˘
 
__buf
,

245 
__Êag
),

246 
f°©©64
Ë
	`__n⁄nuŒ
 ((2, 3));

248 
	#f°©©
 
f°©©64


	)

252 #ifde‡
__USE_LARGEFILE64


253 
	$f°©©64
 (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

254 
°©64
 *
__ª°ri˘
 
__buf
, 
__Êag
)

255 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

259 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


260 #i‚de‡
__USE_FILE_OFFSET64


263 
	$l°©
 (c⁄° *
__ª°ri˘
 
__fûe
,

264 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

266 #ifde‡
__REDIRECT_NTH


267 
	`__REDIRECT_NTH
 (
l°©
,

268 (c⁄° *
__ª°ri˘
 
__fûe
,

269 
°©
 *
__ª°ri˘
 
__buf
), 
l°©64
)

270 
	`__n⁄nuŒ
 ((1, 2));

272 
	#l°©
 
l°©64


	)

275 #ifde‡
__USE_LARGEFILE64


276 
	$l°©64
 (c⁄° *
__ª°ri˘
 
__fûe
,

277 
°©64
 *
__ª°ri˘
 
__buf
)

278 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

284 
	$chmod
 (c⁄° *
__fûe
, 
__mode_t
 
__mode
)

285 
__THROW
 
	`__n⁄nuŒ
 ((1));

287 #ifde‡
__USE_BSD


291 
	$lchmod
 (c⁄° *
__fûe
, 
__mode_t
 
__mode
)

292 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_POSIX


297 
	$fchmod
 (
__fd
, 
__mode_t
 
__mode
Ë
__THROW
;

300 #ifde‡
__USE_ATFILE


303 
	$fchmod©
 (
__fd
, c⁄° *
__fûe
, 
__mode_t
 
__mode
,

304 
__Êag
)

305 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

312 
__mode_t
 
	$umask
 (
__mode_t
 
__mask
Ë
__THROW
;

314 #ifdef 
__USE_GNU


317 
__mode_t
 
	$gëumask
 (Ë
__THROW
;

321 
	$mkdú
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
)

322 
__THROW
 
	`__n⁄nuŒ
 ((1));

324 #ifde‡
__USE_ATFILE


328 
	$mkdú©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
)

329 
__THROW
 
	`__n⁄nuŒ
 ((2));

335 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


336 
	$mknod
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
)

337 
__THROW
 
	`__n⁄nuŒ
 ((1));

339 #ifde‡
__USE_ATFILE


343 
	$mknod©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

344 
__dev_t
 
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
	$mkfifo
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
)

351 
__THROW
 
	`__n⁄nuŒ
 ((1));

353 #ifde‡
__USE_ATFILE


357 
	$mkfifﬂt
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

361 #ifde‡
__USE_ATFILE


364 
	$utimíßt
 (
__fd
, c⁄° *
__∑th
,

365 c⁄° 
time•ec
 
__times
[2],

366 
__Êags
)

367 
__THROW
 
	`__n⁄nuŒ
 ((2));

370 #ifde‡
__USE_XOPEN2K8


372 
	$futimís
 (
__fd
, c⁄° 
time•ec
 
__times
[2]Ë
__THROW
;

390 #i‚de‡
_STAT_VER


391 
	#_STAT_VER
 0

	)

393 #i‚de‡
_MKNOD_VER


394 
	#_MKNOD_VER
 0

	)

398 #i‚de‡
__USE_FILE_OFFSET64


399 
	$__fx°©
 (
__vî
, 
__fûdes
, 
°©
 *
__°©_buf
)

400 
__THROW
 
	`__n⁄nuŒ
 ((3));

401 
	$__x°©
 (
__vî
, c⁄° *
__fûíame
,

402 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

403 
	$__lx°©
 (
__vî
, c⁄° *
__fûíame
,

404 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

405 
	$__fx°©©
 (
__vî
, 
__fûdes
, c⁄° *
__fûíame
,

406 
°©
 *
__°©_buf
, 
__Êag
)

407 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

409 #ifde‡
__REDIRECT_NTH


410 
	`__REDIRECT_NTH
 (
__fx°©
, (
__vî
, 
__fûdes
,

411 
°©
 *
__°©_buf
), 
__fx°©64
)

412 
	`__n⁄nuŒ
 ((3));

413 
	`__REDIRECT_NTH
 (
__x°©
, (
__vî
, c⁄° *
__fûíame
,

414 
°©
 *
__°©_buf
), 
__x°©64
)

415 
	`__n⁄nuŒ
 ((2, 3));

416 
	`__REDIRECT_NTH
 (
__lx°©
, (
__vî
, c⁄° *
__fûíame
,

417 
°©
 *
__°©_buf
), 
__lx°©64
)

418 
	`__n⁄nuŒ
 ((2, 3));

419 
	`__REDIRECT_NTH
 (
__fx°©©
, (
__vî
, 
__fûdes
,

420 c⁄° *
__fûíame
,

421 
°©
 *
__°©_buf
, 
__Êag
),

422 
__fx°©©64
Ë
	`__n⁄nuŒ
 ((3, 4));

425 
	#__fx°©
 
__fx°©64


	)

426 
	#__x°©
 
__x°©64


	)

427 
	#__lx°©
 
__lx°©64


	)

431 #ifde‡
__USE_LARGEFILE64


432 
	$__fx°©64
 (
__vî
, 
__fûdes
, 
°©64
 *
__°©_buf
)

433 
__THROW
 
	`__n⁄nuŒ
 ((3));

434 
	$__x°©64
 (
__vî
, c⁄° *
__fûíame
,

435 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

436 
	$__lx°©64
 (
__vî
, c⁄° *
__fûíame
,

437 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

438 
	$__fx°©©64
 (
__vî
, 
__fûdes
, c⁄° *
__fûíame
,

439 
°©64
 *
__°©_buf
, 
__Êag
)

440 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

442 
	$__xmknod
 (
__vî
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

443 
__dev_t
 *
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

445 
	$__xmknod©
 (
__vî
, 
__fd
, c⁄° *
__∑th
,

446 
__mode_t
 
__mode
, 
__dev_t
 *
__dev
)

447 
__THROW
 
	`__n⁄nuŒ
 ((3, 5));

449 #ifde‡
__USE_EXTERN_INLINES


452 
__exã∫_ölöe
 

453 
	`__NTH
 (
	$°©
 (c⁄° *
__∑th
, 
°©
 *
__°©buf
))

455  
	`__x°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

456 
	}
}

458 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


459 
__exã∫_ölöe
 

460 
__NTH
 (
	$l°©
 (c⁄° *
__∑th
, 
°©
 *
__°©buf
))

462  
	`__lx°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

463 
	}
}

466 
__exã∫_ölöe
 

467 
__NTH
 (
	$f°©
 (
__fd
, 
°©
 *
__°©buf
))

469  
	`__fx°©
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

470 
	}
}

472 #ifde‡
__USE_ATFILE


473 
__exã∫_ölöe
 

474 
__NTH
 (
	$f°©©
 (
__fd
, c⁄° *
__fûíame
, 
°©
 *
__°©buf
,

475 
__Êag
))

477  
	`__fx°©©
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

478 
	}
}

481 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD


482 
__exã∫_ölöe
 

483 
__NTH
 (
	$mknod
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
))

485  
	`__xmknod
 (
_MKNOD_VER
, 
__∑th
, 
__mode
, &
__dev
);

486 
	}
}

489 #ifde‡
__USE_ATFILE


490 
__exã∫_ölöe
 

491 
__NTH
 (
	$mknod©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

492 
__dev_t
 
__dev
))

494  
	`__xmknod©
 (
_MKNOD_VER
, 
__fd
, 
__∑th
, 
__mode
, &
__dev
);

495 
	}
}

498 #i‡
deföed
 
__USE_LARGEFILE64
 \

499 && (! 
deföed
 
	g__USE_FILE_OFFSET64
 \

500 || (
deföed
 
	g__REDIRECT_NTH
 && deföed 
	g__OPTIMIZE__
))

501 
__exã∫_ölöe
 

502 
__NTH
 (
	$°©64
 (c⁄° *
__∑th
, 
°©64
 *
__°©buf
))

504  
	`__x°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

505 
	}
}

507 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


508 
__exã∫_ölöe
 

509 
__NTH
 (
	$l°©64
 (c⁄° *
__∑th
, 
°©64
 *
__°©buf
))

511  
	`__lx°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

512 
	}
}

515 
__exã∫_ölöe
 

516 
__NTH
 (
	$f°©64
 (
__fd
, 
°©64
 *
__°©buf
))

518  
	`__fx°©64
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

519 
	}
}

521 #ifde‡
__USE_ATFILE


522 
__exã∫_ölöe
 

523 
__NTH
 (
	$f°©©64
 (
__fd
, c⁄° *
__fûíame
, 
°©64
 *
__°©buf
,

524 
__Êag
))

526  
	`__fx°©©64
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

527 
	}
}

534 
	g__END_DECLS


	@/usr/include/sys/syscall.h

18 #i‚de‡
_SYSCALL_H


19 
	#_SYSCALL_H
 1

	)

24 
	~<asm/uni°d.h
>

26 #i‚de‡
_LIBC


31 
	~<bôs/sysˇŒ.h
>

	@/usr/include/sys/sysctl.h

18 #i‚def 
_SYS_SYSCTL_H


19 
	#_SYS_SYSCTL_H
 1

	)

21 
	~<„©uªs.h
>

22 
	#__√ed_size_t


	)

23 
	~<°ddef.h
>

25 #i‚de‡
_LINUX_KERNEL_H


26 
	#_LINUX_KERNEL_H
 1

	)

27 
	#__undef_LINUX_KERNEL_H


	)

29 #i‚de‡
_LINUX_TYPES_H


30 
	#_LINUX_TYPES_H
 1

	)

31 
	#__undef_LINUX_TYPES_H


	)

33 #i‚de‡
_LINUX_LIST_H


34 
	#_LINUX_LIST_H
 1

	)

35 
	#__undef_LINUX_LIST_H


	)

37 #i‚de‡
__LINUX_COMPILER_H


38 
	#__LINUX_COMPILER_H
 1

	)

39 
	#__u£r


	)

40 
	#__undef__LINUX_COMPILER_H


	)

43 
	~<löux/sys˘l.h
>

45 #ifde‡
__undef_LINUX_KERNEL_H


46 #unde‡
_LINUX_KERNEL_H


47 #unde‡
__undef_LINUX_KERNEL_H


49 #ifde‡
__undef_LINUX_TYPES_H


50 #unde‡
_LINUX_TYPES_H


51 #unde‡
__undef_LINUX_TYPES_H


53 #ifde‡
__undef_LINUX_LIST_H


54 #unde‡
_LINUX_LIST_H


55 #unde‡
__undef_LINUX_LIST_H


57 #ifde‡
__undef__LINUX_COMPILER_H


58 #unde‡
__LINUX_COMPILER_H


59 #unde‡
__u£r


60 #unde‡
__undef__LINUX_COMPILER_H


63 
	~<bôs/sys˘l.h
>

65 
__BEGIN_DECLS


68 
	$sys˘l
 (*
__«me
, 
__∆í
, *
__ﬁdvÆ
,

69 
size_t
 *
__ﬁdÀ≈
, *
__√wvÆ
, size_à
__√wÀn
Ë
__THROW
;

71 
__END_DECLS


	@/usr/include/sys/time.h

18 #i‚de‡
_SYS_TIME_H


19 
	#_SYS_TIME_H
 1

	)

21 
	~<„©uªs.h
>

23 
	~<bôs/ty≥s.h
>

24 
	#__√ed_time_t


	)

25 
	~<time.h
>

26 
	#__√ed_timevÆ


	)

27 
	~<bôs/time.h
>

29 
	~<sys/£À˘.h
>

31 #i‚de‡
__su£c⁄ds_t_deföed


32 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

33 
	#__su£c⁄ds_t_deföed


	)

37 
	g__BEGIN_DECLS


39 #ifde‡
__USE_GNU


41 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) { \

42 (
ts
)->
tv_£c
 = (
tv
)->tv_sec; \

43 (
ts
)->
tv_n£c
 = (
tv
)->
tv_u£c
 * 1000; \

44 }

	)

45 
	#TIMESPEC_TO_TIMEVAL
(
tv
, 
ts
) { \

46 (
tv
)->
tv_£c
 = (
ts
)->tv_sec; \

47 (
tv
)->
tv_u£c
 = (
ts
)->
tv_n£c
 / 1000; \

48 }

	)

52 #ifde‡
__USE_BSD


55 
	stimez⁄e


57 
	mtz_möuãswe°
;

58 
	mtz_d°time
;

61 
timez⁄e
 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

63 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

71 
	$gëtimeofday
 (
timevÆ
 *
__ª°ri˘
 
__tv
,

72 
__timez⁄e_±r_t
 
__tz
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

74 #ifde‡
__USE_BSD


77 
	$£âimeofday
 (c⁄° 
timevÆ
 *
__tv
,

78 c⁄° 
timez⁄e
 *
__tz
)

79 
__THROW
;

85 
	$adjtime
 (c⁄° 
timevÆ
 *
__dñè
,

86 
timevÆ
 *
__ﬁddñè
Ë
__THROW
;

91 
	e__ôimî_which


94 
ITIMER_REAL
 = 0,

95 
	#ITIMER_REAL
 
ITIMER_REAL


	)

97 
ITIMER_VIRTUAL
 = 1,

98 
	#ITIMER_VIRTUAL
 
ITIMER_VIRTUAL


	)

101 
ITIMER_PROF
 = 2

102 
	#ITIMER_PROF
 
ITIMER_PROF


	)

107 
	sôimîvÆ


110 
timevÆ
 
ô_öãrvÆ
;

112 
timevÆ
 
ô_vÆue
;

115 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


118 
__ôimî_which
 
	t__ôimî_which_t
;

120 
	t__ôimî_which_t
;

125 
	$gëôimî
 (
__ôimî_which_t
 
__which
,

126 
ôimîvÆ
 *
__vÆue
Ë
__THROW
;

131 
	$£tôimî
 (
__ôimî_which_t
 
__which
,

132 c⁄° 
ôimîvÆ
 *
__ª°ri˘
 
__√w
,

133 
ôimîvÆ
 *
__ª°ri˘
 
__ﬁd
Ë
__THROW
;

138 
	$utimes
 (c⁄° *
__fûe
, c⁄° 
timevÆ
 
__tvp
[2])

139 
__THROW
 
	`__n⁄nuŒ
 ((1));

141 #ifde‡
__USE_BSD


143 
	$lutimes
 (c⁄° *
__fûe
, c⁄° 
timevÆ
 
__tvp
[2])

144 
__THROW
 
	`__n⁄nuŒ
 ((1));

147 
	$futimes
 (
__fd
, c⁄° 
timevÆ
 
__tvp
[2]Ë
__THROW
;

150 #ifde‡
__USE_GNU


154 
	$futimeßt
 (
__fd
, c⁄° *
__fûe
,

155 c⁄° 
timevÆ
 
__tvp
[2]Ë
__THROW
;

159 #ifde‡
__USE_BSD


162 
	#timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

163 
	#timî˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0)

	)

164 
	#timîcmp
(
a
, 
b
, 
CMP
) \

165 (((
a
)->
tv_£c
 =(
b
)->tv_sec) ? \

166 ((
a
)->
tv_u£c
 
	`CMP
 (
b
)->tv_usec) : \

167 ((
a
)->
tv_£c
 
	`CMP
 (
b
)->tv_£c))

	)

168 
	#timîadd
(
a
, 
b
, 
ªsu…
) \

170 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯+ (
b
)->tv_sec; \

171 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯+ (
b
)->tv_usec; \

172 i‡((
ªsu…
)->
tv_u£c
 >= 1000000) \

174 ++(
ªsu…
)->
tv_£c
; \

175 (
ªsu…
)->
tv_u£c
 -= 1000000; \

177 
	}
} 0)

	)

178 
	#timîsub
(
a
, 
b
, 
ªsu…
) \

180 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯- (
b
)->tv_sec; \

181 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯- (
b
)->tv_usec; \

182 i‡((
ªsu…
)->
tv_u£c
 < 0) { \

183 --(
ªsu…
)->
tv_£c
; \

184 (
ªsu…
)->
tv_u£c
 += 1000000; \

186 } 0)

	)

189 
	g__END_DECLS


	@/usr/include/sys/types.h

22 #i‚def 
_SYS_TYPES_H


23 
	#_SYS_TYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifdef 
__USE_BSD


32 #i‚de‡
__u_ch¨_deföed


33 
__u_ch¨
 
	tu_ch¨
;

34 
__u_sh‹t
 
	tu_sh‹t
;

35 
__u_öt
 
	tu_öt
;

36 
__u_l⁄g
 
	tu_l⁄g
;

37 
__quad_t
 
	tquad_t
;

38 
__u_quad_t
 
	tu_quad_t
;

39 
__fsid_t
 
	tfsid_t
;

40 
	#__u_ch¨_deföed


	)

44 
__loff_t
 
	tloff_t
;

46 #i‚de‡
__öo_t_deföed


47 #i‚de‡
__USE_FILE_OFFSET64


48 
__öo_t
 
	töo_t
;

50 
__öo64_t
 
	töo_t
;

52 
	#__öo_t_deföed


	)

54 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


55 
__öo64_t
 
	töo64_t
;

56 
	#__öo64_t_deföed


	)

59 #i‚de‡
__dev_t_deföed


60 
__dev_t
 
	tdev_t
;

61 
	#__dev_t_deföed


	)

64 #i‚de‡
__gid_t_deföed


65 
__gid_t
 
	tgid_t
;

66 
	#__gid_t_deföed


	)

69 #i‚de‡
__mode_t_deföed


70 
__mode_t
 
	tmode_t
;

71 
	#__mode_t_deföed


	)

74 #i‚de‡
__∆ök_t_deföed


75 
__∆ök_t
 
	t∆ök_t
;

76 
	#__∆ök_t_deföed


	)

79 #i‚de‡
__uid_t_deföed


80 
__uid_t
 
	tuid_t
;

81 
	#__uid_t_deföed


	)

84 #i‚de‡
__off_t_deföed


85 #i‚de‡
__USE_FILE_OFFSET64


86 
__off_t
 
	toff_t
;

88 
__off64_t
 
	toff_t
;

90 
	#__off_t_deföed


	)

92 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


93 
__off64_t
 
	toff64_t
;

94 
	#__off64_t_deföed


	)

97 #i‚de‡
__pid_t_deföed


98 
__pid_t
 
	tpid_t
;

99 
	#__pid_t_deföed


	)

102 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

103 && !
deföed
 
__id_t_deföed


104 
__id_t
 
	tid_t
;

105 
	#__id_t_deföed


	)

108 #i‚de‡
__ssize_t_deföed


109 
__ssize_t
 
	tssize_t
;

110 
	#__ssize_t_deföed


	)

113 #ifdef 
__USE_BSD


114 #i‚de‡
__daddr_t_deföed


115 
__daddr_t
 
	tdaddr_t
;

116 
__ˇddr_t
 
	tˇddr_t
;

117 
	#__daddr_t_deföed


	)

121 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


122 
__key_t
 
	tkey_t
;

123 
	#__key_t_deföed


	)

126 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


127 
	#__√ed_˛ock_t


	)

129 
	#__√ed_time_t


	)

130 
	#__√ed_timî_t


	)

131 
	#__√ed_˛ockid_t


	)

132 
	~<time.h
>

134 #ifde‡
__USE_XOPEN


135 #i‚de‡
__u£c⁄ds_t_deföed


136 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

137 
	#__u£c⁄ds_t_deföed


	)

139 #i‚de‡
__su£c⁄ds_t_deföed


140 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

141 
	#__su£c⁄ds_t_deföed


	)

145 
	#__√ed_size_t


	)

146 
	~<°ddef.h
>

148 #ifde‡
__USE_MISC


150 
	tul⁄g
;

151 
	tush‹t
;

152 
	tuöt
;

157 #i‡!
__GNUC_PREREQ
 (2, 7)

160 #i‚de‡
__öt8_t_deföed


161 
	#__öt8_t_deföed


	)

162 
	töt8_t
;

163 
	töt16_t
;

164 
	töt32_t
;

165 #i‡
__WORDSIZE
 == 64

166 
	töt64_t
;

168 
__exãnsi⁄__
 
	töt64_t
;

173 
	tu_öt8_t
;

174 
	tu_öt16_t
;

175 
	tu_öt32_t
;

176 #i‡
__WORDSIZE
 == 64

177 
	tu_öt64_t
;

179 
__exãnsi⁄__
 
	tu_öt64_t
;

182 
	tªgi°î_t
;

187 
	#__ötN_t
(
N
, 
MODE
) \

188 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

189 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

190 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

192 #i‚de‡
	t__öt8_t_deföed


193 
	t__öt8_t_deföed


	)

194 
	t__ötN_t
 (8, 
	t__QI__
);

195 
__ötN_t
 (16, 
__HI__
);

196 
__ötN_t
 (32, 
__SI__
);

197 
__ötN_t
 (64, 
__DI__
);

200 
__u_ötN_t
 (8, 
__QI__
);

201 
__u_ötN_t
 (16, 
__HI__
);

202 
__u_ötN_t
 (32, 
__SI__
);

203 
__u_ötN_t
 (64, 
__DI__
);

205 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

211 
	#__BIT_TYPES_DEFINED__
 1

	)

214 #ifdef 
__USE_BSD


216 
	~<ídün.h
>

219 
	~<sys/£À˘.h
>

222 
	~<sys/sysma¸os.h
>

226 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

227 && !
deföed
 
__blksize_t_deföed


228 
__blksize_t
 
	tblksize_t
;

229 
	#__blksize_t_deföed


	)

233 #i‚de‡
__USE_FILE_OFFSET64


234 #i‚de‡
__blk˙t_t_deföed


235 
__blk˙t_t
 
	tblk˙t_t
;

236 
	#__blk˙t_t_deföed


	)

238 #i‚de‡
__fsblk˙t_t_deföed


239 
__fsblk˙t_t
 
	tfsblk˙t_t
;

240 
	#__fsblk˙t_t_deföed


	)

242 #i‚de‡
__fsfû˙t_t_deföed


243 
__fsfû˙t_t
 
	tfsfû˙t_t
;

244 
	#__fsfû˙t_t_deföed


	)

247 #i‚de‡
__blk˙t_t_deföed


248 
__blk˙t64_t
 
	tblk˙t_t
;

249 
	#__blk˙t_t_deföed


	)

251 #i‚de‡
__fsblk˙t_t_deföed


252 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

253 
	#__fsblk˙t_t_deföed


	)

255 #i‚de‡
__fsfû˙t_t_deföed


256 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

257 
	#__fsfû˙t_t_deföed


	)

261 #ifde‡
__USE_LARGEFILE64


262 
__blk˙t64_t
 
	tblk˙t64_t
;

263 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

264 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

269 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


270 
	~<bôs/±hªadty≥s.h
>

273 
	g__END_DECLS


	@/usr/include/sys/uio.h

18 #i‚de‡
_SYS_UIO_H


19 
	#_SYS_UIO_H
 1

	)

21 
	~<„©uªs.h
>

23 
	~<sys/ty≥s.h
>

25 
	g__BEGIN_DECLS


28 
	~<bôs/uio.h
>

39 
ssize_t
 
	$ªadv
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
)

40 
__wur
;

50 
ssize_t
 
	$wrôev
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
)

51 
__wur
;

54 #ifde‡
__USE_BSD


55 #i‚de‡
__USE_FILE_OFFSET64


65 
ssize_t
 
	$¥ódv
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

66 
__off_t
 
__off£t
Ë
__wur
;

77 
ssize_t
 
	$pwrôev
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

78 
__off_t
 
__off£t
Ë
__wur
;

80 #ifde‡
__REDIRECT


81 
ssize_t
 
	`__REDIRECT
 (
¥ódv
, (
__fd
, c⁄° 
iovec
 *
__iovec
,

82 
__cou¡
, 
__off64_t
 
__off£t
),

83 
¥ódv64
Ë
__wur
;

84 
ssize_t
 
	`__REDIRECT
 (
pwrôev
, (
__fd
, c⁄° 
iovec
 *
__iovec
,

85 
__cou¡
, 
__off64_t
 
__off£t
),

86 
pwrôev64
Ë
__wur
;

88 
	#¥ódv
 
¥ódv64


	)

89 
	#pwrôev
 
pwrôev64


	)

93 #ifde‡
__USE_LARGEFILE64


103 
ssize_t
 
	$¥ódv64
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

104 
__off64_t
 
__off£t
Ë
__wur
;

115 
ssize_t
 
	$pwrôev64
 (
__fd
, c⁄° 
iovec
 *
__iovec
, 
__cou¡
,

116 
__off64_t
 
__off£t
Ë
__wur
;

120 
__END_DECLS


	@/usr/include/sys/un.h

18 #i‚def 
_SYS_UN_H


19 
	#_SYS_UN_H
 1

	)

21 
	~<sys/cdefs.h
>

24 
	~<bôs/sockaddr.h
>

26 
__BEGIN_DECLS


29 
	ssockaddr_un


31 
__SOCKADDR_COMMON
 (
sun_
);

32 
	msun_∑th
[108];

36 #ifde‡
__USE_MISC


37 
	~<°rög.h
>

40 
	#SUN_LEN
(
±r
Ë((
size_t
Ë(((
sockaddr_un
 *Ë0)->
sun_∑th
) \

41 + 
	`°æí
 ((
±r
)->
sun_∑th
))

	)

44 
	g__END_DECLS


	@/usr/include/sys/vfs.h

4 
	~<sys/°©fs.h
>

	@/usr/include/sys/wait.h

22 #i‚def 
_SYS_WAIT_H


23 
	#_SYS_WAIT_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<sig«l.h
>

32 #i‡!
deföed
 
_STDLIB_H
 || (!deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K8
)

35 
	~<bôs/waôÊags.h
>

37 #ifdef 
__USE_BSD


42 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


43 
	#__WAIT_INT
(
°©us
) \

44 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

45 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

47 
	#__WAIT_INT
(
°©us
Ë(*(c⁄° *Ë&(°©us))

	)

55 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


56 
	#__WAIT_STATUS
 *

	)

57 
	#__WAIT_STATUS_DEFN
 *

	)

62 
waô
 *
	m__u±r
;

63 *
	m__ùå
;

64 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

71 
	#__WAIT_STATUS
 *

	)

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	~<bôs/waô°©us.h
>

79 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

80 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

81 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

82 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

83 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

84 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

85 #ifde‡
__WIFCONTINUED


86 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifdef 
__USE_BSD


91 
	#WCOREFLAG
 
__WCOREFLAG


	)

92 
	#WCOREDUMP
(
°©us
Ë
	`__WCOREDUMP
 (
	`__WAIT_INT
 (°©us))

	)

93 
	#W_EXITCODE
(
ªt
, 
sig
Ë
	`__W_EXITCODE
 (ªt, sig)

	)

94 
	#W_STOPCODE
(
sig
Ë
	`__W_STOPCODE
 (sig)

	)

98 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


101 
	mP_ALL
,

102 
	mP_PID
,

103 
	mP_PGID


104 } 
	tidty≥_t
;

113 
__pid_t
 
waô
 (
__WAIT_STATUS
 
__°©_loc
);

115 #ifdef 
__USE_BSD


117 
	#WAIT_ANY
 (-1Ë

	)

118 
	#WAIT_MYPGRP
 0

	)

136 
__pid_t
 
waôpid
 (__pid_à
__pid
, *
__°©_loc
, 
__›ti⁄s
);

138 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


139 #i‚de‡
__id_t_deföed


140 
	~<bôs/ty≥s.h
>

141 
__id_t
 
	tid_t
;

142 
	#__id_t_deföed


	)

145 
	#__√ed_sigöfo_t


	)

146 
	~<bôs/sigöfo.h
>

159 
waôid
 (
idty≥_t
 
__idty≥
, 
__id_t
 
__id
, 
sigöfo_t
 *
__öf›
,

160 
__›ti⁄s
);

163 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


166 
	grußge
;

173 
__pid_t
 
	$waô3
 (
__WAIT_STATUS
 
__°©_loc
, 
__›ti⁄s
,

174 
rußge
 * 
__ußge
Ë
__THROWNL
;

177 #ifde‡
__USE_BSD


179 
__pid_t
 
	$waô4
 (
__pid_t
 
__pid
, 
__WAIT_STATUS
 
__°©_loc
, 
__›ti⁄s
,

180 
rußge
 *
__ußge
Ë
__THROWNL
;

184 
__END_DECLS


	@/usr/include/syslog.h

1 
	~<sys/sy¶og.h
>

	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_SVID


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

71 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

75 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

79 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

83 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

86 #ifde‡
__USE_XOPEN2K8


87 
	#_XOPEN_VERSION
 700

	)

88 #ñi‡
deföed
 
__USE_XOPEN2K


89 
	#_XOPEN_VERSION
 600

	)

90 #ñi‡
deföed
 
__USE_UNIX98


91 
	#_XOPEN_VERSION
 500

	)

93 
	#_XOPEN_VERSION
 4

	)

97 
	#_XOPEN_XCU_VERSION
 4

	)

100 
	#_XOPEN_XPG2
 1

	)

101 
	#_XOPEN_XPG3
 1

	)

102 
	#_XOPEN_XPG4
 1

	)

105 
	#_XOPEN_UNIX
 1

	)

108 
	#_XOPEN_CRYPT
 1

	)

112 
	#_XOPEN_ENH_I18N
 1

	)

115 
	#_XOPEN_LEGACY
 1

	)

202 
	~<bôs/posix_›t.h
>

205 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


206 
	~<bôs/ívú⁄míts.h
>

210 
	#STDIN_FILENO
 0

	)

211 
	#STDOUT_FILENO
 1

	)

212 
	#STDERR_FILENO
 2

	)

217 
	~<bôs/ty≥s.h
>

219 #i‚def 
__ssize_t_deföed


220 
__ssize_t
 
	tssize_t
;

221 
	#__ssize_t_deföed


	)

224 
	#__√ed_size_t


	)

225 
	#__√ed_NULL


	)

226 
	~<°ddef.h
>

228 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


231 #i‚de‡
__gid_t_deföed


232 
__gid_t
 
	tgid_t
;

233 
	#__gid_t_deföed


	)

236 #i‚de‡
__uid_t_deföed


237 
__uid_t
 
	tuid_t
;

238 
	#__uid_t_deföed


	)

241 #i‚de‡
__off_t_deföed


242 #i‚de‡
__USE_FILE_OFFSET64


243 
__off_t
 
	toff_t
;

245 
__off64_t
 
	toff_t
;

247 
	#__off_t_deföed


	)

249 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


250 
__off64_t
 
	toff64_t
;

251 
	#__off64_t_deföed


	)

254 #i‚de‡
__u£c⁄ds_t_deföed


255 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

256 
	#__u£c⁄ds_t_deföed


	)

259 #i‚de‡
__pid_t_deföed


260 
__pid_t
 
	tpid_t
;

261 
	#__pid_t_deföed


	)

265 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


266 #i‚de‡
__öçå_t_deföed


267 
__öçå_t
 
	töçå_t
;

268 
	#__öçå_t_deföed


	)

272 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


273 #i‚de‡
__sockÀn_t_deföed


274 
__sockÀn_t
 
	tsockÀn_t
;

275 
	#__sockÀn_t_deföed


	)

281 
	#R_OK
 4

	)

282 
	#W_OK
 2

	)

283 
	#X_OK
 1

	)

284 
	#F_OK
 0

	)

287 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

289 #ifde‡
__USE_GNU


292 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1));

300 #ifde‡
__USE_ATFILE


304 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

305 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

310 #i‚def 
_STDIO_H


311 
	#SEEK_SET
 0

	)

312 
	#SEEK_CUR
 1

	)

313 
	#SEEK_END
 2

	)

314 #ifde‡
__USE_GNU


315 
	#SEEK_DATA
 3

	)

316 
	#SEEK_HOLE
 4

	)

320 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


322 
	#L_SET
 
SEEK_SET


	)

323 
	#L_INCR
 
SEEK_CUR


	)

324 
	#L_XTND
 
SEEK_END


	)

333 #i‚de‡
__USE_FILE_OFFSET64


334 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

336 #ifde‡
__REDIRECT_NTH


337 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

338 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

339 
l£ek64
);

341 
	#l£ek
 
l£ek64


	)

344 #ifde‡
__USE_LARGEFILE64


345 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

346 
__THROW
;

353 
	`˛o£
 (
__fd
);

360 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

366 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

368 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


369 #i‚de‡
__USE_FILE_OFFSET64


376 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

377 
__off_t
 
__off£t
Ë
__wur
;

384 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

385 
__off_t
 
__off£t
Ë
__wur
;

387 #ifde‡
__REDIRECT


388 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

389 
__off64_t
 
__off£t
),

390 
¥ód64
Ë
__wur
;

391 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

392 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

393 
pwrôe64
Ë
__wur
;

395 
	#¥ód
 
¥ód64


	)

396 
	#pwrôe
 
pwrôe64


	)

400 #ifde‡
__USE_LARGEFILE64


404 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

405 
__off64_t
 
__off£t
Ë
__wur
;

408 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

409 
__off64_t
 
__off£t
Ë
__wur
;

417 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

419 #ifde‡
__USE_GNU


422 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

432 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

444 
	`¶ìp
 (
__£c⁄ds
);

446 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

447 || 
deföed
 
__USE_BSD


452 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

453 
__THROW
;

460 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

469 
	`∑u£
 ();

473 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

474 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

476 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


478 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

483 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

484 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

488 #ifde‡
__USE_ATFILE


491 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

492 
__gid_t
 
__group
, 
__Êag
)

493 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

497 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

499 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


501 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

511 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

513 #ifdef 
__USE_GNU


517 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

520 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

521 || 
deföed
 
__USE_BSD


525 *
	$gëwd
 (*
__buf
)

526 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

531 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

534 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

536 #ifde‡
__USE_GNU


539 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

543 **
__ívú⁄
;

544 #ifde‡
__USE_GNU


545 **
ívú⁄
;

551 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

552 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

554 #ifde‡
__USE_XOPEN2K8


557 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

558 
__THROW
 
	`__n⁄nuŒ
 ((2));

563 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

564 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

568 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

569 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

573 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

578 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

585 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 #ifde‡
__USE_GNU


590 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

591 *c⁄° 
__ívp
[])

592 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

596 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


598 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

603 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

609 
	~<bôs/c⁄‚ame.h
>

612 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

613 
__THROW
 
	`__n⁄nuŒ
 ((1));

616 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

619 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

621 #ifdef 
__USE_POSIX2


623 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

628 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

631 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

635 #i‚de‡
__FAVOR_BSD


636 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

638 #ifde‡
__REDIRECT_NTH


639 
__pid_t
 
	`__REDIRECT_NTH
 (
gëpgΩ
, (__pid_à
__pid
), 
__gëpgid
);

641 
	#gëpgΩ
 
__gëpgid


	)

646 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

647 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


648 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

655 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

657 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


668 #i‚de‡
__FAVOR_BSD


672 
	$£çgΩ
 (Ë
__THROW
;

677 #ifde‡
__REDIRECT_NTH


678 
	`__REDIRECT_NTH
 (
£çgΩ
, (
__pid_t
 
__pid
, __pid_à
__pgΩ
), 
£çgid
);

680 
	#£çgΩ
 
£çgid


	)

689 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

691 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


693 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

697 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

700 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

703 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

706 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

711 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

713 #ifdef 
__USE_GNU


715 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

722 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

724 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


727 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

730 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


732 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

739 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

741 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


744 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

747 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


749 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

752 #ifde‡
__USE_GNU


755 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

756 
__THROW
;

760 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

761 
__THROW
;

765 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

766 
__THROW
 
__wur
;

770 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

771 
__THROW
 
__wur
;

778 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

780 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

781 || 
deföed
 
__USE_BSD


786 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

792 *
	$ây«me
 (
__fd
Ë
__THROW
;

796 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

797 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

801 
	$ißây
 (
__fd
Ë
__THROW
;

803 #i‡
deföed
 
__USE_BSD
 \

804 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

807 
	$ây¶Ÿ
 (Ë
__THROW
;

812 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

813 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

815 #ifde‡
__USE_ATFILE


818 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

819 c⁄° *
__to
, 
__Êags
)

820 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

823 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


825 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

826 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

831 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

832 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

833 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

836 #ifde‡
__USE_ATFILE


838 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

839 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

842 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

843 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

844 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

848 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

850 #ifde‡
__USE_ATFILE


852 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

853 
__THROW
 
	`__n⁄nuŒ
 ((2));

857 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

861 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

864 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

871 *
	`gëlogö
 ();

872 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


879 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

882 #ifdef 
__USE_BSD


884 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

888 #ifdef 
__USE_POSIX2


892 
	#__√ed_gë›t


	)

893 
	~<gë›t.h
>

897 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


901 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

905 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

908 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

909 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

913 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

919 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

920 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

921 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

922 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

928 
	$vh™gup
 (Ë
__THROW
;

931 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

939 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

940 
size_t
 
__off£t
, 
__sˇÀ
)

941 
__THROW
 
	`__n⁄nuŒ
 ((1));

947 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

951 *
	$gëu£rshñl
 (Ë
__THROW
;

952 
	$ídu£rshñl
 (Ë
__THROW
;

953 
	$£tu£rshñl
 (Ë
__THROW
;

959 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

963 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

966 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

970 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

978 
	`fsync
 (
__fd
);

981 #ifde‡
__USE_GNU


984 
	$syncfs
 (
__fd
Ë
__THROW
;

988 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


991 
	`gëho°id
 ();

994 
	$sync
 (Ë
__THROW
;

997 #i‡
deföed
 
__USE_BSD
 || !deföed 
__USE_XOPEN2K


1000 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

1005 
	$gëdèbÀsize
 (Ë
__THROW
;

1011 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


1014 #i‚de‡
__USE_FILE_OFFSET64


1015 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

1016 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1018 #ifde‡
__REDIRECT_NTH


1019 
	`__REDIRECT_NTH
 (
åunˇã
,

1020 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

1021 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1023 
	#åunˇã
 
åunˇã64


	)

1026 #ifde‡
__USE_LARGEFILE64


1027 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1028 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1033 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_POSIX199309
 \

1034 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1037 #i‚de‡
__USE_FILE_OFFSET64


1038 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1040 #ifde‡
__REDIRECT_NTH


1041 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1042 
·runˇã64
Ë
__wur
;

1044 
	#·runˇã
 
·runˇã64


	)

1047 #ifde‡
__USE_LARGEFILE64


1048 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1054 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1055 || 
deföed
 
__USE_MISC


1059 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1065 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1069 #ifde‡
__USE_MISC


1080 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1085 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1097 
	#F_ULOCK
 0

	)

1098 
	#F_LOCK
 1

	)

1099 
	#F_TLOCK
 2

	)

1100 
	#F_TEST
 3

	)

1102 #i‚de‡
__USE_FILE_OFFSET64


1103 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1105 #ifde‡
__REDIRECT


1106 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1107 
lockf64
Ë
__wur
;

1109 
	#lockf
 
lockf64


	)

1112 #ifde‡
__USE_LARGEFILE64


1113 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1118 #ifde‡
__USE_GNU


1123 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1124 (
__exãnsi⁄__
 \

1125 ({ 
__ªsu…
; \

1126 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1127 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1128 
__ªsu…
; 
	}
}))

	)

1131 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1134 
fd©async
 (
__fûdes
);

1140 #ifdef 
__USE_XOPEN


1142 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1143 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1147 
	$í¸y±
 (*
__block
, 
__edÊag
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1154 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1155 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1161 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1163 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1168 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1169 
	~<bôs/uni°d.h
>

1172 
__END_DECLS


	@/usr/include/zlib.h

31 #i‚de‡
ZLIB_H


32 
	#ZLIB_H


	)

34 
	~"zc⁄f.h
"

36 #ifde‡
__˝lu•lus


40 
	#ZLIB_VERSION
 "1.2.8"

	)

41 
	#ZLIB_VERNUM
 0x1280

	)

42 
	#ZLIB_VER_MAJOR
 1

	)

43 
	#ZLIB_VER_MINOR
 2

	)

44 
	#ZLIB_VER_REVISION
 8

	)

45 
	#ZLIB_VER_SUBREVISION
 0

	)

80 
voidpf
 (*
	tÆloc_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, 
	tuI¡
 
	tôems
, uI¡ 
	tsize
));

81 (*
‰ì_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, voidp‡
	taddªss
));

83 
öã∫Æ_°©e
;

85 
	sz_°ªam_s
 {

86 
z_c⁄°
 
Byãf
 *
√xt_ö
;

87 
uI¡
 
avaû_ö
;

88 
uL⁄g
 
tŸÆ_ö
;

90 
Byãf
 *
√xt_out
;

91 
uI¡
 
avaû_out
;

92 
uL⁄g
 
tŸÆ_out
;

94 
z_c⁄°
 *
msg
;

95 
öã∫Æ_°©e
 
FAR
 *
°©e
;

97 
Æloc_func
 
zÆloc
;

98 
‰ì_func
 
z‰ì
;

99 
voidpf
 
›aque
;

101 
d©a_ty≥
;

102 
uL⁄g
 
adÀr
;

103 
uL⁄g
 
ª£rved
;

104 } 
	tz_°ªam
;

106 
z_°ªam
 
	tFAR
 *
	tz_°ªamp
;

112 
	sgz_hódî_s
 {

113 
ãxt
;

114 
uL⁄g
 
time
;

115 
xÊags
;

116 
os
;

117 
Byãf
 *
exåa
;

118 
uI¡
 
exåa_Àn
;

119 
uI¡
 
exåa_max
;

120 
Byãf
 *
«me
;

121 
uI¡
 
«me_max
;

122 
Byãf
 *
commít
;

123 
uI¡
 
comm_max
;

124 
h¸c
;

125 
d⁄e
;

127 } 
	tgz_hódî
;

129 
gz_hódî
 
	tFAR
 *
	tgz_hódîp
;

164 
	#Z_NO_FLUSH
 0

	)

165 
	#Z_PARTIAL_FLUSH
 1

	)

166 
	#Z_SYNC_FLUSH
 2

	)

167 
	#Z_FULL_FLUSH
 3

	)

168 
	#Z_FINISH
 4

	)

169 
	#Z_BLOCK
 5

	)

170 
	#Z_TREES
 6

	)

173 
	#Z_OK
 0

	)

174 
	#Z_STREAM_END
 1

	)

175 
	#Z_NEED_DICT
 2

	)

176 
	#Z_ERRNO
 (-1)

	)

177 
	#Z_STREAM_ERROR
 (-2)

	)

178 
	#Z_DATA_ERROR
 (-3)

	)

179 
	#Z_MEM_ERROR
 (-4)

	)

180 
	#Z_BUF_ERROR
 (-5)

	)

181 
	#Z_VERSION_ERROR
 (-6)

	)

186 
	#Z_NO_COMPRESSION
 0

	)

187 
	#Z_BEST_SPEED
 1

	)

188 
	#Z_BEST_COMPRESSION
 9

	)

189 
	#Z_DEFAULT_COMPRESSION
 (-1)

	)

192 
	#Z_FILTERED
 1

	)

193 
	#Z_HUFFMAN_ONLY
 2

	)

194 
	#Z_RLE
 3

	)

195 
	#Z_FIXED
 4

	)

196 
	#Z_DEFAULT_STRATEGY
 0

	)

199 
	#Z_BINARY
 0

	)

200 
	#Z_TEXT
 1

	)

201 
	#Z_ASCII
 
Z_TEXT


	)

202 
	#Z_UNKNOWN
 2

	)

205 
	#Z_DEFLATED
 8

	)

208 
	#Z_NULL
 0

	)

210 
	#zlib_vîsi⁄
 
	`zlibVîsi⁄
()

	)

216 
ZEXTERN
 c⁄° * 
ZEXPORT
 
zlibVîsi⁄
 
OF
(());

246 
ZEXTERN
 
ZEXPORT
 
deÊ©e
 
OF
((
z_°ªamp
 
°rm
, 
Êush
));

353 
ZEXTERN
 
ZEXPORT
 
deÊ©eEnd
 
OF
((
z_°ªamp
 
°rm
));

392 
ZEXTERN
 
ZEXPORT
 
öÊ©e
 
OF
((
z_°ªamp
 
°rm
, 
Êush
));

508 
ZEXTERN
 
ZEXPORT
 
öÊ©eEnd
 
OF
((
z_°ªamp
 
°rm
));

587 
ZEXTERN
 
ZEXPORT
 
deÊ©eSëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

588 c⁄° 
Byãf
 *
di˘i⁄¨y
,

589 
uI¡
 
di˘Lígth
));

631 
ZEXTERN
 
ZEXPORT
 
deÊ©eC›y
 
OF
((
z_°ªamp
 
de°
,

632 
z_°ªamp
 
sour˚
));

649 
ZEXTERN
 
ZEXPORT
 
deÊ©eRe£t
 
OF
((
z_°ªamp
 
°rm
));

660 
ZEXTERN
 
ZEXPORT
 
deÊ©eP¨ams
 
OF
((
z_°ªamp
 
°rm
,

661 
Àvñ
,

662 
°øãgy
));

681 
ZEXTERN
 
ZEXPORT
 
deÊ©eTu√
 
OF
((
z_°ªamp
 
°rm
,

682 
good_Àngth
,

683 
max_œzy
,

684 
ni˚_Àngth
,

685 
max_chaö
));

698 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
deÊ©eBound
 
OF
((
z_°ªamp
 
°rm
,

699 
uL⁄g
 
sour˚Lí
));

713 
ZEXTERN
 
ZEXPORT
 
deÊ©ePídög
 
OF
((
z_°ªamp
 
°rm
,

714 *
≥ndög
,

715 *
bôs
));

728 
ZEXTERN
 
ZEXPORT
 
deÊ©ePrime
 
OF
((
z_°ªamp
 
°rm
,

729 
bôs
,

730 
vÆue
));

745 
ZEXTERN
 
ZEXPORT
 
deÊ©eSëHódî
 
OF
((
z_°ªamp
 
°rm
,

746 
gz_hódîp
 
hód
));

819 
ZEXTERN
 
ZEXPORT
 
öÊ©eSëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

820 c⁄° 
Byãf
 *
di˘i⁄¨y
,

821 
uI¡
 
di˘Lígth
));

842 
ZEXTERN
 
ZEXPORT
 
öÊ©eGëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

843 
Byãf
 *
di˘i⁄¨y
,

844 
uI¡
 *
di˘Lígth
));

857 
ZEXTERN
 
ZEXPORT
 
öÊ©eSync
 
OF
((
z_°ªamp
 
°rm
));

876 
ZEXTERN
 
ZEXPORT
 
öÊ©eC›y
 
OF
((
z_°ªamp
 
de°
,

877 
z_°ªamp
 
sour˚
));

892 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£t
 
OF
((
z_°ªamp
 
°rm
));

902 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£t2
 
OF
((
z_°ªamp
 
°rm
,

903 
wödowBôs
));

914 
ZEXTERN
 
ZEXPORT
 
öÊ©ePrime
 
OF
((
z_°ªamp
 
°rm
,

915 
bôs
,

916 
vÆue
));

935 
ZEXTERN
 
ZEXPORT
 
öÊ©eM¨k
 
OF
((
z_°ªamp
 
°rm
));

963 
ZEXTERN
 
ZEXPORT
 
öÊ©eGëHódî
 
OF
((
z_°ªamp
 
°rm
,

964 
gz_hódîp
 
hód
));

1025 (*
ö_func
Ë
	tOF
((
	tFAR
 *,

1026 
	tz_c⁄°
 
	tFAR
 * FAR *));

1027 (*
out_func
Ë
	tOF
((
	tFAR
 *, FAR *, ));

1029 
ZEXTERN
 
ZEXPORT
 
öÊ©eBack
 
OF
((
z_°ªamp
 
°rm
,

1030 
ö_func
 
ö
, 
FAR
 *
ö_desc
,

1031 
out_func
 
out
, 
FAR
 *
out_desc
));

1099 
ZEXTERN
 
ZEXPORT
 
öÊ©eBackEnd
 
OF
((
z_°ªamp
 
°rm
));

1107 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
zlibCompûeFœgs
 
OF
(());

1148 #i‚de‡
Z_SOLO


1160 
ZEXTERN
 
ZEXPORT
 
com¥ess
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1161 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
));

1174 
ZEXTERN
 
ZEXPORT
 
com¥ess2
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1175 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
,

1176 
Àvñ
));

1190 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
com¥essBound
 
OF
((uL⁄g 
sour˚Lí
));

1197 
ZEXTERN
 
ZEXPORT
 
uncom¥ess
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1198 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
));

1224 
gzFûe_s
 *
	tgzFûe
;

1264 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gzd›í
 
OF
((
fd
, c⁄° *
mode
));

1287 
ZEXTERN
 
ZEXPORT
 
gzbuf„r
 
OF
((
gzFûe
 
fûe
, 
size
));

1304 
ZEXTERN
 
ZEXPORT
 
gz£ç¨ams
 
OF
((
gzFûe
 
fûe
, 
Àvñ
, 
°øãgy
));

1313 
ZEXTERN
 
ZEXPORT
 
gzªad
 
OF
((
gzFûe
 
fûe
, 
voidp
 
buf
, 
Àn
));

1341 
ZEXTERN
 
ZEXPORT
 
gzwrôe
 
OF
((
gzFûe
 
fûe
,

1342 
voidpc
 
buf
, 
Àn
));

1349 
ZEXTERN
 
ZEXPORTVA
 
gz¥ötf
 
Z_ARG
((
gzFûe
 
fûe
, c⁄° *
f‹m©
, ...))

1350 #ifde‡
__GNUC__


1351 
__©åibuã__
((
__f‹m©__
(
__¥ötf__
,2,3)))

1368 
ZEXTERN
 
ZEXPORT
 
gzputs
 
OF
((
gzFûe
 
fûe
, c⁄° *
s
));

1376 
ZEXTERN
 * 
ZEXPORT
 
gzgës
 
OF
((
gzFûe
 
fûe
, *
buf
, 
Àn
));

1389 
ZEXTERN
 
ZEXPORT
 
gzputc
 
OF
((
gzFûe
 
fûe
, 
c
));

1395 
ZEXTERN
 
ZEXPORT
 
gzgëc
 
OF
((
gzFûe
 
fûe
));

1404 
ZEXTERN
 
ZEXPORT
 
gzungëc
 
OF
((
c
, 
gzFûe
 
fûe
));

1416 
ZEXTERN
 
ZEXPORT
 
gzÊush
 
OF
((
gzFûe
 
fûe
, 
Êush
));

1451 
ZEXTERN
 
ZEXPORT
 
gzªwöd
 
OF
((
gzFûe
 
fûe
));

1479 
ZEXTERN
 
ZEXPORT
 
gzeof
 
OF
((
gzFûe
 
fûe
));

1494 
ZEXTERN
 
ZEXPORT
 
gzdúe˘
 
OF
((
gzFûe
 
fûe
));

1515 
ZEXTERN
 
ZEXPORT
 
gz˛o£
 
OF
((
gzFûe
 
fûe
));

1528 
ZEXTERN
 
ZEXPORT
 
gz˛o£_r
 
OF
((
gzFûe
 
fûe
));

1529 
ZEXTERN
 
ZEXPORT
 
gz˛o£_w
 
OF
((
gzFûe
 
fûe
));

1540 
ZEXTERN
 c⁄° * 
ZEXPORT
 
gzîr‹
 
OF
((
gzFûe
 
fûe
, *
î∫um
));

1556 
ZEXTERN
 
ZEXPORT
 
gz˛óªº
 
OF
((
gzFûe
 
fûe
));

1573 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32
 
OF
((uL⁄g 
adÀr
, c⁄° 
Byãf
 *
buf
, 
uI¡
 
Àn
));

1604 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32
 
OF
((uL⁄g 
¸c
, c⁄° 
Byãf
 *
buf
, 
uI¡
 
Àn
));

1637 
ZEXTERN
 
ZEXPORT
 
deÊ©eInô_
 
OF
((
z_°ªamp
 
°rm
, 
Àvñ
,

1638 c⁄° *
vîsi⁄
, 
°ªam_size
));

1639 
ZEXTERN
 
ZEXPORT
 
öÊ©eInô_
 
OF
((
z_°ªamp
 
°rm
,

1640 c⁄° *
vîsi⁄
, 
°ªam_size
));

1641 
ZEXTERN
 
ZEXPORT
 
deÊ©eInô2_
 
OF
((
z_°ªamp
 
°rm
, 
Àvñ
, 
mëhod
,

1642 
wödowBôs
, 
memLevñ
,

1643 
°øãgy
, c⁄° *
vîsi⁄
,

1644 
°ªam_size
));

1645 
ZEXTERN
 
ZEXPORT
 
öÊ©eInô2_
 
OF
((
z_°ªamp
 
°rm
, 
wödowBôs
,

1646 c⁄° *
vîsi⁄
, 
°ªam_size
));

1647 
ZEXTERN
 
ZEXPORT
 
öÊ©eBackInô_
 
OF
((
z_°ªamp
 
°rm
, 
wödowBôs
,

1648 
FAR
 *
wödow
,

1649 c⁄° *
vîsi⁄
,

1650 
°ªam_size
));

1651 
	#deÊ©eInô
(
°rm
, 
Àvñ
) \

1652 
	`deÊ©eInô_
((
°rm
), (
Àvñ
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1653 
	#öÊ©eInô
(
°rm
) \

1654 
	`öÊ©eInô_
((
°rm
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1655 
	#deÊ©eInô2
(
°rm
, 
Àvñ
, 
mëhod
, 
wödowBôs
, 
memLevñ
, 
°øãgy
) \

1656 
	`deÊ©eInô2_
((
°rm
),(
Àvñ
),(
mëhod
),(
wödowBôs
),(
memLevñ
),\

1657 (
°øãgy
), 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1658 
	#öÊ©eInô2
(
°rm
, 
wödowBôs
) \

1659 
	`öÊ©eInô2_
((
°rm
), (
wödowBôs
), 
ZLIB_VERSION
, \

1660 ()(
z_°ªam
))

	)

1661 
	#öÊ©eBackInô
(
°rm
, 
wödowBôs
, 
wödow
) \

1662 
	`öÊ©eBackInô_
((
°rm
), (
wödowBôs
), (
wödow
), \

1663 
ZLIB_VERSION
, ()(
z_°ªam
))

	)

1665 #i‚de‡
Z_SOLO


1674 
	sgzFûe_s
 {

1675 
have
;

1676 *
√xt
;

1677 
z_off64_t
 
pos
;

1679 
ZEXTERN
 
ZEXPORT
 
gzgëc_
 
OF
((
gzFûe
 
fûe
));

1680 #ifde‡
Z_PREFIX_SET


1681 #unde‡
z_gzgëc


1682 
	#z_gzgëc
(
g
) \

1683 ((
g
)->
have
 ? ((g)->have--, (g)->
pos
++, *((g)->
√xt
)++Ë: 
	`gzgëc
(g))

	)

1685 
	#gzgëc
(
g
) \

1686 ((
g
)->
have
 ? ((g)->have--, (g)->
pos
++, *((g)->
√xt
)++Ë: 
	`gzgëc
(g))

	)

1695 #ifde‡
Z_LARGE64


1696 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í64
 
OF
((const *, const *));

1697 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gz£ek64
 
OF
((
gzFûe
, z_off64_t, ));

1698 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gzãŒ64
 
OF
((
gzFûe
));

1699 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gzoff£t64
 
OF
((
gzFûe
));

1700 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off64_t
));

1701 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off64_t
));

1704 #i‡!
deföed
(
ZLIB_INTERNAL
Ë&& deföed(
Z_WANT64
)

1705 #ifde‡
Z_PREFIX_SET


1706 
	#z_gz›í
 
z_gz›í64


	)

1707 
	#z_gz£ek
 
z_gz£ek64


	)

1708 
	#z_gzãŒ
 
z_gzãŒ64


	)

1709 
	#z_gzoff£t
 
z_gzoff£t64


	)

1710 
	#z_adÀr32_comböe
 
z_adÀr32_comböe64


	)

1711 
	#z_¸c32_comböe
 
z_¸c32_comböe64


	)

1713 
	#gz›í
 
gz›í64


	)

1714 
	#gz£ek
 
gz£ek64


	)

1715 
	#gzãŒ
 
gzãŒ64


	)

1716 
	#gzoff£t
 
gzoff£t64


	)

1717 
	#adÀr32_comböe
 
adÀr32_comböe64


	)

1718 
	#¸c32_comböe
 
¸c32_comböe64


	)

1720 #i‚de‡
Z_LARGE64


1721 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í64
 
OF
((const *, const *));

1722 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gz£ek64
 
OF
((
gzFûe
, z_off_t, ));

1723 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzãŒ64
 
OF
((
gzFûe
));

1724 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzoff£t64
 
OF
((
gzFûe
));

1725 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1726 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1729 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í
 
OF
((const *, const *));

1730 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gz£ek
 
OF
((
gzFûe
, z_off_t, ));

1731 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzãŒ
 
OF
((
gzFûe
));

1732 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzoff£t
 
OF
((
gzFûe
));

1733 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1734 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1739 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1740 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1745 #i‡!
deföed
(
ZUTIL_H
Ë&& !deföed(
NO_DUMMY_DECL
)

1746 
	söã∫Æ_°©e
 {
dummy
;};

1750 
ZEXTERN
 c⁄° * 
ZEXPORT
 
zEº‹
 
OF
(());

1751 
ZEXTERN
 
ZEXPORT
 
öÊ©eSyncPoöt
 
OF
((
z_°ªamp
));

1752 
ZEXTERN
 c⁄° 
z_¸c_t
 
FAR
 * 
ZEXPORT
 
gë_¸c_èbÀ
 
OF
(());

1753 
ZEXTERN
 
ZEXPORT
 
öÊ©eUndîmöe
 
OF
((
z_°ªamp
, ));

1754 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£tKìp
 
OF
((
z_°ªamp
));

1755 
ZEXTERN
 
ZEXPORT
 
deÊ©eRe£tKìp
 
OF
((
z_°ªamp
));

1756 #i‡
deföed
(
_WIN32
Ë&& !deföed(
Z_SOLO
)

1757 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í_w
 
OF
((c⁄° 
wch¨_t
 *
∑th
,

1758 c⁄° *
mode
));

1760 #i‡
deföed
(
STDC
Ë|| deföed(
Z_HAVE_STDARG_H
)

1761 #i‚de‡
Z_SOLO


1762 
ZEXTERN
 
ZEXPORTVA
 
gzv¥ötf
 
Z_ARG
((
gzFûe
 
fûe
,

1763 c⁄° *
f‹m©
,

1764 
va_li°
 
va
));

1768 #ifde‡
__˝lu•lus


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/asm-generic/types.h

1 #i‚de‡
_ASM_GENERIC_TYPES_H


2 
	#_ASM_GENERIC_TYPES_H


	)

7 
	~<asm-gíîic/öt-Œ64.h
>

	@/usr/include/asm/shmbuf.h

1 
	~<asm-gíîic/shmbuf.h
>

	@/usr/include/asm/unistd.h

1 #i‚de‡
_ASM_X86_UNISTD_H


2 
	#_ASM_X86_UNISTD_H


	)

5 
	#__X32_SYSCALL_BIT
 0x40000000

	)

7 #ifde‡
__i386__


8 
	~<asm/uni°d_32.h
>

9 #ñi‡
deföed
(
__ILP32__
)

10 
	~<asm/uni°d_x32.h
>

12 
	~<asm/uni°d_64.h
>

	@/usr/include/bits/byteswap.h

19 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


23 #i‚de‡
_BITS_BYTESWAP_H


24 
	#_BITS_BYTESWAP_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

35 
	~<bôs/byãsw≠-16.h
>

38 
	#__bsw≠_c⁄°™t_32
(
x
) \

39 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

40 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

42 #ifde‡
__GNUC__


43 #i‡
__GNUC_PREREQ
 (4, 3)

44 
__ölöe
 

45 
	$__bsw≠_32
 (
__bsx
)

47  
	`__buûtö_bsw≠32
 (
__bsx
);

48 
	}
}

49 #ñi‡
__GNUC__
 >= 2

50 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

51 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

52 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

53 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

54 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

55 || 
deföed
 
	g__amdÁm10__
)

58 
	#__bsw≠_32
(
x
) \

59 (
__exãnsi⁄__
 \

60 ({ 
__v
, 
__x
 = (
x
); \

61 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

62 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

64 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

65 
__v
; }))

	)

67 
	#__bsw≠_32
(
x
) \

68 (
__exãnsi⁄__
 \

69 ({ 
__v
, 
__x
 = (
x
); \

70 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

71 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

73 
	`__asm__
 ("rorw $8, %w0;" \

76 : "Ù" (
__v
) \

77 : "0" (
__x
) \

79 
__v
; }))

	)

82 
	#__bsw≠_32
(
x
) \

83 (
__exãnsi⁄__
 \

84 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

87 
__ölöe
 

88 
	$__bsw≠_32
 (
__bsx
)

90  
	`__bsw≠_c⁄°™t_32
 (
__bsx
);

91 
	}
}

95 #i‡
__GNUC_PREREQ
 (2, 0)

97 
	#__bsw≠_c⁄°™t_64
(
x
) \

98 (
	`__exãnsi⁄__
 ((((
x
) & 0xff00000000000000ull) >> 56) \

99 | (((
x
) & 0x00ff000000000000ull) >> 40) \

100 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

101 | (((
x
) & 0x000000ff00000000ull) >> 8) \

102 | (((
x
) & 0x00000000ff000000ull) << 8) \

103 | (((
x
) & 0x0000000000ff0000ull) << 24) \

104 | (((
x
) & 0x000000000000ff00ull) << 40) \

105 | (((
x
Ë& 0x00000000000000ffuŒË<< 56)))

	)

107 #i‡
__GNUC_PREREQ
 (4, 3)

108 
__ölöe
 
__uöt64_t


109 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

111  
	`__buûtö_bsw≠64
 (
__bsx
);

112 
	}
}

113 #ñi‡
__WORDSIZE
 == 64

114 
	#__bsw≠_64
(
x
) \

115 (
__exãnsi⁄__
 \

116 ({ 
__uöt64_t
 
__v
, 
__x
 = (
x
); \

117 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

118 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

120 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

121 
__v
; }))

	)

123 
	#__bsw≠_64
(
x
) \

124 (
__exãnsi⁄__
 \

125 ({ uni⁄ { 
__exãnsi⁄__
 
__uöt64_t
 
__Œ
; \

126 
__l
[2]; } 
__w
, 
__r
; \

127 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

128 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

131 
__w
.
__Œ
 = (
x
); \

132 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

133 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

135 
__r
.
__Œ
; }))

	)

138 
	#__bsw≠_c⁄°™t_64
(
x
) \

139 ((((
x
) & 0xff00000000000000ull) >> 56) \

140 | (((
x
) & 0x00ff000000000000ull) >> 40) \

141 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

142 | (((
x
) & 0x000000ff00000000ull) >> 8) \

143 | (((
x
) & 0x00000000ff000000ull) << 8) \

144 | (((
x
) & 0x0000000000ff0000ull) << 24) \

145 | (((
x
) & 0x000000000000ff00ull) << 40) \

146 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

148 
__ölöe
 
__uöt64_t


149 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

151  
	`__bsw≠_c⁄°™t_64
 (
__bsx
);

152 
	}
}

	@/usr/include/bits/confname.h

19 #i‚de‡
_UNISTD_H


26 
	m_PC_LINK_MAX
,

27 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

28 
	m_PC_MAX_CANON
,

29 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

30 
	m_PC_MAX_INPUT
,

31 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

32 
	m_PC_NAME_MAX
,

33 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

34 
	m_PC_PATH_MAX
,

35 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

36 
	m_PC_PIPE_BUF
,

37 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

38 
	m_PC_CHOWN_RESTRICTED
,

39 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

40 
	m_PC_NO_TRUNC
,

41 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

42 
	m_PC_VDISABLE
,

43 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

44 
	m_PC_SYNC_IO
,

45 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

46 
	m_PC_ASYNC_IO
,

47 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

48 
	m_PC_PRIO_IO
,

49 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

50 
	m_PC_SOCK_MAXBUF
,

51 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

52 
	m_PC_FILESIZEBITS
,

53 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

54 
	m_PC_REC_INCR_XFER_SIZE
,

55 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

56 
	m_PC_REC_MAX_XFER_SIZE
,

57 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

58 
	m_PC_REC_MIN_XFER_SIZE
,

59 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

60 
	m_PC_REC_XFER_ALIGN
,

61 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

62 
	m_PC_ALLOC_SIZE_MIN
,

63 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

64 
	m_PC_SYMLINK_MAX
,

65 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

66 
	m_PC_2_SYMLINKS


67 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

73 
	m_SC_ARG_MAX
,

74 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

75 
	m_SC_CHILD_MAX
,

76 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

77 
	m_SC_CLK_TCK
,

78 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

79 
	m_SC_NGROUPS_MAX
,

80 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

81 
	m_SC_OPEN_MAX
,

82 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

83 
	m_SC_STREAM_MAX
,

84 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

85 
	m_SC_TZNAME_MAX
,

86 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

87 
	m_SC_JOB_CONTROL
,

88 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

89 
	m_SC_SAVED_IDS
,

90 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

91 
	m_SC_REALTIME_SIGNALS
,

92 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

93 
	m_SC_PRIORITY_SCHEDULING
,

94 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

95 
	m_SC_TIMERS
,

96 
	#_SC_TIMERS
 
_SC_TIMERS


	)

97 
	m_SC_ASYNCHRONOUS_IO
,

98 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

99 
	m_SC_PRIORITIZED_IO
,

100 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

101 
	m_SC_SYNCHRONIZED_IO
,

102 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

103 
	m_SC_FSYNC
,

104 
	#_SC_FSYNC
 
_SC_FSYNC


	)

105 
	m_SC_MAPPED_FILES
,

106 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

107 
	m_SC_MEMLOCK
,

108 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

109 
	m_SC_MEMLOCK_RANGE
,

110 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

111 
	m_SC_MEMORY_PROTECTION
,

112 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

113 
	m_SC_MESSAGE_PASSING
,

114 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

115 
	m_SC_SEMAPHORES
,

116 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

117 
	m_SC_SHARED_MEMORY_OBJECTS
,

118 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

119 
	m_SC_AIO_LISTIO_MAX
,

120 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

121 
	m_SC_AIO_MAX
,

122 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

123 
	m_SC_AIO_PRIO_DELTA_MAX
,

124 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

125 
	m_SC_DELAYTIMER_MAX
,

126 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

127 
	m_SC_MQ_OPEN_MAX
,

128 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

129 
	m_SC_MQ_PRIO_MAX
,

130 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

131 
	m_SC_VERSION
,

132 
	#_SC_VERSION
 
_SC_VERSION


	)

133 
	m_SC_PAGESIZE
,

134 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

135 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

136 
	m_SC_RTSIG_MAX
,

137 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

138 
	m_SC_SEM_NSEMS_MAX
,

139 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

140 
	m_SC_SEM_VALUE_MAX
,

141 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

142 
	m_SC_SIGQUEUE_MAX
,

143 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

144 
	m_SC_TIMER_MAX
,

145 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

149 
	m_SC_BC_BASE_MAX
,

150 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

151 
	m_SC_BC_DIM_MAX
,

152 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

153 
	m_SC_BC_SCALE_MAX
,

154 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

155 
	m_SC_BC_STRING_MAX
,

156 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

157 
	m_SC_COLL_WEIGHTS_MAX
,

158 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

159 
	m_SC_EQUIV_CLASS_MAX
,

160 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

161 
	m_SC_EXPR_NEST_MAX
,

162 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

163 
	m_SC_LINE_MAX
,

164 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

165 
	m_SC_RE_DUP_MAX
,

166 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

167 
	m_SC_CHARCLASS_NAME_MAX
,

168 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

170 
	m_SC_2_VERSION
,

171 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

172 
	m_SC_2_C_BIND
,

173 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

174 
	m_SC_2_C_DEV
,

175 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

176 
	m_SC_2_FORT_DEV
,

177 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

178 
	m_SC_2_FORT_RUN
,

179 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

180 
	m_SC_2_SW_DEV
,

181 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

182 
	m_SC_2_LOCALEDEF
,

183 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

185 
	m_SC_PII
,

186 
	#_SC_PII
 
_SC_PII


	)

187 
	m_SC_PII_XTI
,

188 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

189 
	m_SC_PII_SOCKET
,

190 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

191 
	m_SC_PII_INTERNET
,

192 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

193 
	m_SC_PII_OSI
,

194 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

195 
	m_SC_POLL
,

196 
	#_SC_POLL
 
_SC_POLL


	)

197 
	m_SC_SELECT
,

198 
	#_SC_SELECT
 
_SC_SELECT


	)

199 
	m_SC_UIO_MAXIOV
,

200 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

201 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

202 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

203 
	m_SC_PII_INTERNET_STREAM
,

204 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

205 
	m_SC_PII_INTERNET_DGRAM
,

206 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

207 
	m_SC_PII_OSI_COTS
,

208 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

209 
	m_SC_PII_OSI_CLTS
,

210 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

211 
	m_SC_PII_OSI_M
,

212 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

213 
	m_SC_T_IOV_MAX
,

214 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

217 
	m_SC_THREADS
,

218 
	#_SC_THREADS
 
_SC_THREADS


	)

219 
	m_SC_THREAD_SAFE_FUNCTIONS
,

220 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

221 
	m_SC_GETGR_R_SIZE_MAX
,

222 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

223 
	m_SC_GETPW_R_SIZE_MAX
,

224 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

225 
	m_SC_LOGIN_NAME_MAX
,

226 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

227 
	m_SC_TTY_NAME_MAX
,

228 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

229 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

230 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

231 
	m_SC_THREAD_KEYS_MAX
,

232 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

233 
	m_SC_THREAD_STACK_MIN
,

234 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

235 
	m_SC_THREAD_THREADS_MAX
,

236 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

237 
	m_SC_THREAD_ATTR_STACKADDR
,

238 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

239 
	m_SC_THREAD_ATTR_STACKSIZE
,

240 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

241 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

242 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

243 
	m_SC_THREAD_PRIO_INHERIT
,

244 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

245 
	m_SC_THREAD_PRIO_PROTECT
,

246 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

247 
	m_SC_THREAD_PROCESS_SHARED
,

248 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

250 
	m_SC_NPROCESSORS_CONF
,

251 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

252 
	m_SC_NPROCESSORS_ONLN
,

253 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

254 
	m_SC_PHYS_PAGES
,

255 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

256 
	m_SC_AVPHYS_PAGES
,

257 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

258 
	m_SC_ATEXIT_MAX
,

259 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

260 
	m_SC_PASS_MAX
,

261 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

263 
	m_SC_XOPEN_VERSION
,

264 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

265 
	m_SC_XOPEN_XCU_VERSION
,

266 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

267 
	m_SC_XOPEN_UNIX
,

268 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

269 
	m_SC_XOPEN_CRYPT
,

270 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

271 
	m_SC_XOPEN_ENH_I18N
,

272 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

273 
	m_SC_XOPEN_SHM
,

274 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

276 
	m_SC_2_CHAR_TERM
,

277 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

278 
	m_SC_2_C_VERSION
,

279 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

280 
	m_SC_2_UPE
,

281 
	#_SC_2_UPE
 
_SC_2_UPE


	)

283 
	m_SC_XOPEN_XPG2
,

284 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

285 
	m_SC_XOPEN_XPG3
,

286 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

287 
	m_SC_XOPEN_XPG4
,

288 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

290 
	m_SC_CHAR_BIT
,

291 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

292 
	m_SC_CHAR_MAX
,

293 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

294 
	m_SC_CHAR_MIN
,

295 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

296 
	m_SC_INT_MAX
,

297 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

298 
	m_SC_INT_MIN
,

299 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

300 
	m_SC_LONG_BIT
,

301 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

302 
	m_SC_WORD_BIT
,

303 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

304 
	m_SC_MB_LEN_MAX
,

305 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

306 
	m_SC_NZERO
,

307 
	#_SC_NZERO
 
_SC_NZERO


	)

308 
	m_SC_SSIZE_MAX
,

309 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

310 
	m_SC_SCHAR_MAX
,

311 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

312 
	m_SC_SCHAR_MIN
,

313 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

314 
	m_SC_SHRT_MAX
,

315 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

316 
	m_SC_SHRT_MIN
,

317 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

318 
	m_SC_UCHAR_MAX
,

319 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

320 
	m_SC_UINT_MAX
,

321 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

322 
	m_SC_ULONG_MAX
,

323 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

324 
	m_SC_USHRT_MAX
,

325 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

327 
	m_SC_NL_ARGMAX
,

328 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

329 
	m_SC_NL_LANGMAX
,

330 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

331 
	m_SC_NL_MSGMAX
,

332 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

333 
	m_SC_NL_NMAX
,

334 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

335 
	m_SC_NL_SETMAX
,

336 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

337 
	m_SC_NL_TEXTMAX
,

338 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

340 
	m_SC_XBS5_ILP32_OFF32
,

341 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

342 
	m_SC_XBS5_ILP32_OFFBIG
,

343 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

344 
	m_SC_XBS5_LP64_OFF64
,

345 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

346 
	m_SC_XBS5_LPBIG_OFFBIG
,

347 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

349 
	m_SC_XOPEN_LEGACY
,

350 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

351 
	m_SC_XOPEN_REALTIME
,

352 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

353 
	m_SC_XOPEN_REALTIME_THREADS
,

354 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

356 
	m_SC_ADVISORY_INFO
,

357 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

358 
	m_SC_BARRIERS
,

359 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

360 
	m_SC_BASE
,

361 
	#_SC_BASE
 
_SC_BASE


	)

362 
	m_SC_C_LANG_SUPPORT
,

363 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

364 
	m_SC_C_LANG_SUPPORT_R
,

365 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

366 
	m_SC_CLOCK_SELECTION
,

367 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

368 
	m_SC_CPUTIME
,

369 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

370 
	m_SC_THREAD_CPUTIME
,

371 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

372 
	m_SC_DEVICE_IO
,

373 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

374 
	m_SC_DEVICE_SPECIFIC
,

375 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

376 
	m_SC_DEVICE_SPECIFIC_R
,

377 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

378 
	m_SC_FD_MGMT
,

379 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

380 
	m_SC_FIFO
,

381 
	#_SC_FIFO
 
_SC_FIFO


	)

382 
	m_SC_PIPE
,

383 
	#_SC_PIPE
 
_SC_PIPE


	)

384 
	m_SC_FILE_ATTRIBUTES
,

385 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

386 
	m_SC_FILE_LOCKING
,

387 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

388 
	m_SC_FILE_SYSTEM
,

389 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

390 
	m_SC_MONOTONIC_CLOCK
,

391 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

392 
	m_SC_MULTI_PROCESS
,

393 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

394 
	m_SC_SINGLE_PROCESS
,

395 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

396 
	m_SC_NETWORKING
,

397 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

398 
	m_SC_READER_WRITER_LOCKS
,

399 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

400 
	m_SC_SPIN_LOCKS
,

401 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

402 
	m_SC_REGEXP
,

403 
	#_SC_REGEXP
 
_SC_REGEXP


	)

404 
	m_SC_REGEX_VERSION
,

405 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

406 
	m_SC_SHELL
,

407 
	#_SC_SHELL
 
_SC_SHELL


	)

408 
	m_SC_SIGNALS
,

409 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

410 
	m_SC_SPAWN
,

411 
	#_SC_SPAWN
 
_SC_SPAWN


	)

412 
	m_SC_SPORADIC_SERVER
,

413 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

414 
	m_SC_THREAD_SPORADIC_SERVER
,

415 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

416 
	m_SC_SYSTEM_DATABASE
,

417 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

418 
	m_SC_SYSTEM_DATABASE_R
,

419 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

420 
	m_SC_TIMEOUTS
,

421 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

422 
	m_SC_TYPED_MEMORY_OBJECTS
,

423 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

424 
	m_SC_USER_GROUPS
,

425 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

426 
	m_SC_USER_GROUPS_R
,

427 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

428 
	m_SC_2_PBS
,

429 
	#_SC_2_PBS
 
_SC_2_PBS


	)

430 
	m_SC_2_PBS_ACCOUNTING
,

431 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

432 
	m_SC_2_PBS_LOCATE
,

433 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

434 
	m_SC_2_PBS_MESSAGE
,

435 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

436 
	m_SC_2_PBS_TRACK
,

437 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

438 
	m_SC_SYMLOOP_MAX
,

439 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

440 
	m_SC_STREAMS
,

441 
	#_SC_STREAMS
 
_SC_STREAMS


	)

442 
	m_SC_2_PBS_CHECKPOINT
,

443 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

445 
	m_SC_V6_ILP32_OFF32
,

446 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

447 
	m_SC_V6_ILP32_OFFBIG
,

448 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

449 
	m_SC_V6_LP64_OFF64
,

450 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

451 
	m_SC_V6_LPBIG_OFFBIG
,

452 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

454 
	m_SC_HOST_NAME_MAX
,

455 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

456 
	m_SC_TRACE
,

457 
	#_SC_TRACE
 
_SC_TRACE


	)

458 
	m_SC_TRACE_EVENT_FILTER
,

459 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

460 
	m_SC_TRACE_INHERIT
,

461 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

462 
	m_SC_TRACE_LOG
,

463 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

465 
	m_SC_LEVEL1_ICACHE_SIZE
,

466 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

467 
	m_SC_LEVEL1_ICACHE_ASSOC
,

468 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

469 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

470 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

471 
	m_SC_LEVEL1_DCACHE_SIZE
,

472 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

473 
	m_SC_LEVEL1_DCACHE_ASSOC
,

474 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

475 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

476 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

477 
	m_SC_LEVEL2_CACHE_SIZE
,

478 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

479 
	m_SC_LEVEL2_CACHE_ASSOC
,

480 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

481 
	m_SC_LEVEL2_CACHE_LINESIZE
,

482 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

483 
	m_SC_LEVEL3_CACHE_SIZE
,

484 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

485 
	m_SC_LEVEL3_CACHE_ASSOC
,

486 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

487 
	m_SC_LEVEL3_CACHE_LINESIZE
,

488 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

489 
	m_SC_LEVEL4_CACHE_SIZE
,

490 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

491 
	m_SC_LEVEL4_CACHE_ASSOC
,

492 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

493 
	m_SC_LEVEL4_CACHE_LINESIZE
,

494 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

497 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

498 
	#_SC_IPV6
 
_SC_IPV6


	)

499 
	m_SC_RAW_SOCKETS
,

500 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

502 
	m_SC_V7_ILP32_OFF32
,

503 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

504 
	m_SC_V7_ILP32_OFFBIG
,

505 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

506 
	m_SC_V7_LP64_OFF64
,

507 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

508 
	m_SC_V7_LPBIG_OFFBIG
,

509 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

511 
	m_SC_SS_REPL_MAX
,

512 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

514 
	m_SC_TRACE_EVENT_NAME_MAX
,

515 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

516 
	m_SC_TRACE_NAME_MAX
,

517 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

518 
	m_SC_TRACE_SYS_MAX
,

519 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

520 
	m_SC_TRACE_USER_EVENT_MAX
,

521 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

523 
	m_SC_XOPEN_STREAMS
,

524 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

526 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

527 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

528 
	m_SC_THREAD_ROBUST_PRIO_PROTECT


529 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

535 
	m_CS_PATH
,

536 
	#_CS_PATH
 
_CS_PATH


	)

538 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

539 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

540 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

542 
	m_CS_GNU_LIBC_VERSION
,

543 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

544 
	m_CS_GNU_LIBPTHREAD_VERSION
,

545 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

547 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

548 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

549 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

551 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

552 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

553 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

555 
	m_CS_LFS_CFLAGS
 = 1000,

556 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

557 
	m_CS_LFS_LDFLAGS
,

558 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

559 
	m_CS_LFS_LIBS
,

560 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

561 
	m_CS_LFS_LINTFLAGS
,

562 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

563 
	m_CS_LFS64_CFLAGS
,

564 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

565 
	m_CS_LFS64_LDFLAGS
,

566 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

567 
	m_CS_LFS64_LIBS
,

568 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

569 
	m_CS_LFS64_LINTFLAGS
,

570 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

572 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

573 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

574 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

575 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

576 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

577 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

578 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

579 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

580 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

581 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

582 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

583 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

584 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

585 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

586 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

587 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

588 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

589 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

590 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

591 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

592 
	m_CS_XBS5_LP64_OFF64_LIBS
,

593 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

594 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

595 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

596 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

597 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

598 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

599 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

600 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

601 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

602 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

603 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

605 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

606 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

607 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

608 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

609 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

610 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

611 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

612 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

613 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

614 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

615 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

616 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

617 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

618 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

619 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

620 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

621 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

622 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

623 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

624 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

625 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

626 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

627 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

628 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

629 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

630 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

631 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

632 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

633 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

634 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

635 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

636 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

638 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

639 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

640 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

641 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

642 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

643 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

644 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

645 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

646 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

647 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

648 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

649 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

650 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

651 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

652 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

653 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

654 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

655 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

656 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

657 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

658 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

659 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

660 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

661 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

662 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

663 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

664 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

665 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

666 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

667 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

668 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
,

669 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

671 
	m_CS_V6_ENV
,

672 
	#_CS_V6_ENV
 
_CS_V6_ENV


	)

673 
	m_CS_V7_ENV


674 
	#_CS_V7_ENV
 
_CS_V7_ENV


	)

	@/usr/include/bits/dirent.h

18 #i‚de‡
_DIRENT_H


22 
	sdúít


24 #i‚de‡
__USE_FILE_OFFSET64


25 
__öo_t
 
	md_öo
;

26 
__off_t
 
	md_off
;

28 
__öo64_t
 
	md_öo
;

29 
__off64_t
 
	md_off
;

31 
	md_ª˛í
;

32 
	md_ty≥
;

33 
	md_«me
[256];

36 #ifde‡
__USE_LARGEFILE64


37 
	sdúít64


39 
__öo64_t
 
	md_öo
;

40 
__off64_t
 
	md_off
;

41 
	md_ª˛í
;

42 
	md_ty≥
;

43 
	md_«me
[256];

47 
	#d_fûío
 
d_öo


	)

49 #unde‡
_DIRENT_HAVE_D_NAMLEN


50 
	#_DIRENT_HAVE_D_RECLEN


	)

51 
	#_DIRENT_HAVE_D_OFF


	)

52 
	#_DIRENT_HAVE_D_TYPE


	)

54 #i‡
deföed
 
__OFF_T_MATCHES_OFF64_T
 && deföed 
__INO_T_MATCHES_INO64_T


56 
	#_DIRENT_MATCHES_DIRENT64
 1

	)

	@/usr/include/bits/dlfcn.h

19 #i‚de‡
_DLFCN_H


24 
	#RTLD_LAZY
 0x00001

	)

25 
	#RTLD_NOW
 0x00002

	)

26 
	#RTLD_BINDING_MASK
 0x3

	)

27 
	#RTLD_NOLOAD
 0x00004

	)

28 
	#RTLD_DEEPBIND
 0x00008

	)

33 
	#RTLD_GLOBAL
 0x00100

	)

38 
	#RTLD_LOCAL
 0

	)

41 
	#RTLD_NODELETE
 0x01000

	)

43 #ifde‡
__USE_GNU


54 
	#DL_CALL_FCT
(
f˘p
, 
¨gs
) \

55 (
	`_dl_mcou¡_wøµî_check
 ((*Ë(
f˘p
)), (*(f˘p)Ë
¨gs
)

	)

57 
__BEGIN_DECLS


60 
	$_dl_mcou¡_wøµî_check
 (*
__£lÂc
Ë
__THROW
;

62 
__END_DECLS


	@/usr/include/bits/environments.h

18 #i‚de‡
_UNISTD_H


22 
	~<bôs/w‹dsize.h
>

42 #i‡
__WORDSIZE
 == 64

56 
	#_POSIX_V7_LPBIG_OFFBIG
 -1

	)

57 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

58 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

61 
	#_POSIX_V7_LP64_OFF64
 1

	)

62 
	#_POSIX_V6_LP64_OFF64
 1

	)

63 
	#_XBS5_LP64_OFF64
 1

	)

69 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

70 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

71 
	#_XBS5_ILP32_OFFBIG
 1

	)

73 #i‚de‡
__x86_64__


75 
	#_POSIX_V7_ILP32_OFF32
 1

	)

76 
	#_POSIX_V6_ILP32_OFF32
 1

	)

77 
	#_XBS5_ILP32_OFF32
 1

	)

95 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

96 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

97 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


98 
	#__ILP32_OFFBIG_CFLAGS
 "-mx32"

	)

99 
	#__ILP32_OFFBIG_LDFLAGS
 "-mx32"

	)

101 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

102 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

104 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

105 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/errno.h

19 #ifde‡
_ERRNO_H


21 #unde‡
EDOM


22 #unde‡
EILSEQ


23 #unde‡
ERANGE


24 
	~<löux/î∫o.h
>

27 
	#ENOTSUP
 
EOPNOTSUPP


	)

30 #i‚de‡
ECANCELED


31 
	#ECANCELED
 125

	)

35 #i‚de‡
EOWNERDEAD


36 
	#EOWNERDEAD
 130

	)

37 
	#ENOTRECOVERABLE
 131

	)

40 #i‚de‡
ERFKILL


41 
	#ERFKILL
 132

	)

44 #i‚de‡
EHWPOISON


45 
	#EHWPOISON
 133

	)

48 #i‚de‡
__ASSEMBLER__


50 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

52 #i‡!
deföed
 
_LIBC
 || deföed 
_LIBC_REENTRANT


54 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

59 #i‡!
deföed
 
_ERRNO_H
 && deföed 
__√ed_Em©h


63 
	#EDOM
 33

	)

64 
	#EILSEQ
 84

	)

65 
	#ERANGE
 34

	)

	@/usr/include/bits/fcntl.h

19 #i‚de‡
_FCNTL_H


23 #ifde‡
__x86_64__


24 
	#__O_LARGEFILE
 0

	)

27 #ifde‡
__x86_64__


29 
	#F_GETLK64
 5

	)

30 
	#F_SETLK64
 6

	)

31 
	#F_SETLKW64
 7

	)

35 
	sÊock


37 
	ml_ty≥
;

38 
	ml_whí˚
;

39 #i‚de‡
__USE_FILE_OFFSET64


40 
__off_t
 
	ml_°¨t
;

41 
__off_t
 
	ml_Àn
;

43 
__off64_t
 
	ml_°¨t
;

44 
__off64_t
 
	ml_Àn
;

46 
__pid_t
 
	ml_pid
;

49 #ifde‡
__USE_LARGEFILE64


50 
	sÊock64


52 
	ml_ty≥
;

53 
	ml_whí˚
;

54 
__off64_t
 
	ml_°¨t
;

55 
__off64_t
 
	ml_Àn
;

56 
__pid_t
 
	ml_pid
;

61 
	~<bôs/f˙é-löux.h
>

	@/usr/include/bits/fcntl2.h

19 #i‚def 
_FCNTL_H


25 #i‚de‡
__USE_FILE_OFFSET64


26 
	$__›í_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

27 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

28 
›í
Ë
	`__n⁄nuŒ
 ((1));

30 
	`__REDIRECT
 (
__›í_2
, (c⁄° *
__∑th
, 
__oÊag
),

31 
__›í64_2
Ë
	`__n⁄nuŒ
 ((1));

32 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

33 
›í64
Ë
	`__n⁄nuŒ
 ((1));

35 
	`__îr‹de˛
 (
__›í_too_m™y_¨gs
,

37 
	`__îr‹de˛
 (
__›í_missög_mode
,

40 
__f‹tify_fun˘i⁄
 

41 
	$›í
 (c⁄° *
__∑th
, 
__oÊag
, ...)

43 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

44 
	`__›í_too_m™y_¨gs
 ();

46 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

48 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

50 
	`__›í_missög_mode
 ();

51  
	`__›í_2
 (
__∑th
, 
__oÊag
);

53  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

56 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

57  
	`__›í_2
 (
__∑th
, 
__oÊag
);

59  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

60 
	}
}

63 #ifde‡
__USE_LARGEFILE64


64 
	$__›í64_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

65 
	`__REDIRECT
 (
__›í64_Æüs
, (c⁄° *
__∑th
, 
__oÊag
,

66 ...), 
›í64
Ë
	`__n⁄nuŒ
 ((1));

67 
	`__îr‹de˛
 (
__›í64_too_m™y_¨gs
,

69 
	`__îr‹de˛
 (
__›í64_missög_mode
,

72 
__f‹tify_fun˘i⁄
 

73 
	$›í64
 (c⁄° *
__∑th
, 
__oÊag
, ...)

75 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

76 
	`__›í64_too_m™y_¨gs
 ();

78 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

80 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

82 
	`__›í64_missög_mode
 ();

83  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

85  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

88 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

89  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

91  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

92 
	}
}

96 #ifde‡
__USE_ATFILE


97 #i‚de‡
__USE_FILE_OFFSET64


98 
	$__›í©_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

99 
	`__n⁄nuŒ
 ((2));

100 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

101 
__oÊag
, ...), 
›í©
)

102 
	`__n⁄nuŒ
 ((2));

104 
	`__REDIRECT
 (
__›í©_2
, (
__fd
, c⁄° *
__∑th
,

105 
__oÊag
), 
__›í©64_2
)

106 
	`__n⁄nuŒ
 ((2));

107 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

108 
__oÊag
, ...), 
›í©64
)

109 
	`__n⁄nuŒ
 ((2));

111 
	`__îr‹de˛
 (
__›í©_too_m™y_¨gs
,

113 
	`__îr‹de˛
 (
__›í©_missög_mode
,

116 
__f‹tify_fun˘i⁄
 

117 
	$›í©
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

119 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

120 
	`__›í©_too_m™y_¨gs
 ();

122 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

124 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

126 
	`__›í©_missög_mode
 ();

127  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

129  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

132 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

133  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

135  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

136 
	}
}

139 #ifde‡
__USE_LARGEFILE64


140 
	$__›í©64_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

141 
	`__n⁄nuŒ
 ((2));

142 
	`__REDIRECT
 (
__›í©64_Æüs
, (
__fd
, c⁄° *
__∑th
,

143 
__oÊag
, ...), 
›í©64
)

144 
	`__n⁄nuŒ
 ((2));

145 
	`__îr‹de˛
 (
__›í©64_too_m™y_¨gs
,

147 
	`__îr‹de˛
 (
__›í©64_missög_mode
,

150 
__f‹tify_fun˘i⁄
 

151 
	$›í©64
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

153 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

154 
	`__›í©64_too_m™y_¨gs
 ();

156 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

158 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

160 
	`__›í©64_missög_mode
 ();

161  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

163  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

166 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

167  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

169  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

170 
	}
}

	@/usr/include/bits/huge_val.h

20 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

27 
	#HUGE_VAL
 (
	`__buûtö_huge_vÆ
())

	)

28 #ñi‡
__GNUC_PREREQ
(2,96)

29 
	#HUGE_VAL
 (
__exãnsi⁄__
 0x1.0
p2047
)

	)

30 #ñi‡
deföed
 
__GNUC__


32 
	#HUGE_VAL
 \

33 (
__exãnsi⁄__
 \

34 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__DI__
))); 
__d
; }) \

35 { 
__l
: 0x7ff0000000000000ULL }).
__d
)

	)

39 
	~<ídün.h
>

41 uni⁄ { 
	m__c
[8]; 
	m__d
; } 
	t__huge_vÆ_t
;

43 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


44 
	#__HUGE_VAL_byãs
 { 0x7f, 0xf0, 0, 0, 0, 0, 0, 0 }

	)

46 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


47 
	#__HUGE_VAL_byãs
 { 0, 0, 0, 0, 0, 0, 0xf0, 0x7‡}

	)

50 
__huge_vÆ_t
 
	g__huge_vÆ
 = { 
__HUGE_VAL_byãs
 };

51 
	#HUGE_VAL
 (
__huge_vÆ
.
__d
)

	)

	@/usr/include/bits/huge_valf.h

20 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

27 
	#HUGE_VALF
 (
	`__buûtö_huge_vÆf
())

	)

28 #ñi‡
__GNUC_PREREQ
(2,96)

29 
	#HUGE_VALF
 (
__exãnsi⁄__
 0x1.0
p255f
)

	)

30 #ñi‡
deföed
 
__GNUC__


32 
	#HUGE_VALF
 \

33 (
__exãnsi⁄__
 \

34 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__SI__
))); 
__d
; }) \

35 { 
__l
: 0x7f800000UL }).
__d
)

	)

39 uni⁄ { 
	m__c
[4]; 
	m__f
; } 
	t__huge_vÆf_t
;

41 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


42 
	#__HUGE_VALF_byãs
 { 0x7f, 0x80, 0, 0 }

	)

44 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


45 
	#__HUGE_VALF_byãs
 { 0, 0, 0x80, 0x7‡}

	)

48 
__huge_vÆf_t
 
	g__huge_vÆf
 = { 
__HUGE_VALF_byãs
 };

49 
	#HUGE_VALF
 (
__huge_vÆf
.
__f
)

	)

	@/usr/include/bits/huge_vall.h

20 #i‚de‡
_MATH_H


24 #i‡
__GNUC_PREREQ
(3,3)

25 
	#HUGE_VALL
 (
	`__buûtö_huge_vÆl
())

	)

26 #ñi‡
__GNUC_PREREQ
(2,96)

27 
	#HUGE_VALL
 (
__exãnsi⁄__
 0x1.0
p32767L
)

	)

30 
	#__HUGE_VALL_byãs
 { 0, 0, 0, 0, 0, 0, 0, 0x80, 0xff, 0x7f, 0, 0 }

	)

32 
	#__huge_vÆl_t
 uni⁄ { 
__c
[12]; 
__ld
; }

	)

33 #ifde‡
__GNUC__


34 
	#HUGE_VALL
 (
__exãnsi⁄__
 \

35 ((
__huge_vÆl_t
Ë{ 
__c
: 
__HUGE_VALL_byãs
 }).
__ld
)

	)

37 
__huge_vÆl_t
 
	g__huge_vÆl
 = { 
__HUGE_VALL_byãs
 };

38 
	#HUGE_VALL
 (
__huge_vÆl
.
__ld
)

	)

	@/usr/include/bits/in.h

20 #i‚de‡
_NETINET_IN_H


27 
	#IP_OPTIONS
 4

	)

28 
	#IP_HDRINCL
 3

	)

29 
	#IP_TOS
 1

	)

30 
	#IP_TTL
 2

	)

31 
	#IP_RECVOPTS
 6

	)

33 
	#IP_RECVRETOPTS
 
IP_RETOPTS


	)

34 
	#IP_RETOPTS
 7

	)

35 
	#IP_MULTICAST_IF
 32

	)

36 
	#IP_MULTICAST_TTL
 33

	)

37 
	#IP_MULTICAST_LOOP
 34

	)

38 
	#IP_ADD_MEMBERSHIP
 35

	)

39 
	#IP_DROP_MEMBERSHIP
 36

	)

40 
	#IP_UNBLOCK_SOURCE
 37

	)

41 
	#IP_BLOCK_SOURCE
 38

	)

42 
	#IP_ADD_SOURCE_MEMBERSHIP
 39

	)

43 
	#IP_DROP_SOURCE_MEMBERSHIP
 40

	)

44 
	#IP_MSFILTER
 41

	)

45 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


46 
	#MCAST_JOIN_GROUP
 42

	)

47 
	#MCAST_BLOCK_SOURCE
 43

	)

48 
	#MCAST_UNBLOCK_SOURCE
 44

	)

49 
	#MCAST_LEAVE_GROUP
 45

	)

50 
	#MCAST_JOIN_SOURCE_GROUP
 46

	)

51 
	#MCAST_LEAVE_SOURCE_GROUP
 47

	)

52 
	#MCAST_MSFILTER
 48

	)

53 
	#IP_MULTICAST_ALL
 49

	)

54 
	#IP_UNICAST_IF
 50

	)

56 
	#MCAST_EXCLUDE
 0

	)

57 
	#MCAST_INCLUDE
 1

	)

60 
	#IP_ROUTER_ALERT
 5

	)

61 
	#IP_PKTINFO
 8

	)

62 
	#IP_PKTOPTIONS
 9

	)

63 
	#IP_PMTUDISC
 10

	)

64 
	#IP_MTU_DISCOVER
 10

	)

65 
	#IP_RECVERR
 11

	)

66 
	#IP_RECVTTL
 12

	)

67 
	#IP_RECVTOS
 13

	)

68 
	#IP_MTU
 14

	)

69 
	#IP_FREEBIND
 15

	)

70 
	#IP_IPSEC_POLICY
 16

	)

71 
	#IP_XFRM_POLICY
 17

	)

72 
	#IP_PASSSEC
 18

	)

73 
	#IP_TRANSPARENT
 19

	)

74 
	#IP_MULTICAST_ALL
 49

	)

77 
	#IP_ORIGDSTADDR
 20

	)

78 
	#IP_RECVORIGDSTADDR
 
IP_ORIGDSTADDR


	)

80 
	#IP_MINTTL
 21

	)

84 
	#IP_PMTUDISC_DONT
 0

	)

85 
	#IP_PMTUDISC_WANT
 1

	)

86 
	#IP_PMTUDISC_DO
 2

	)

87 
	#IP_PMTUDISC_PROBE
 3

	)

90 
	#SOL_IP
 0

	)

92 
	#IP_DEFAULT_MULTICAST_TTL
 1

	)

93 
	#IP_DEFAULT_MULTICAST_LOOP
 1

	)

94 
	#IP_MAX_MEMBERSHIPS
 20

	)

96 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


100 
	sù_›ts


102 
ö_addr
 
	mù_d°
;

103 
	mù_›ts
[40];

107 
	sù_mªqn


109 
ö_addr
 
	mimr_mu…üddr
;

110 
ö_addr
 
	mimr_addªss
;

111 
	mimr_ifödex
;

115 
	sö_pktöfo


117 
	mùi_ifödex
;

118 
ö_addr
 
	mùi_•ec_d°
;

119 
ö_addr
 
	mùi_addr
;

126 
	#IPV6_ADDRFORM
 1

	)

127 
	#IPV6_2292PKTINFO
 2

	)

128 
	#IPV6_2292HOPOPTS
 3

	)

129 
	#IPV6_2292DSTOPTS
 4

	)

130 
	#IPV6_2292RTHDR
 5

	)

131 
	#IPV6_2292PKTOPTIONS
 6

	)

132 
	#IPV6_CHECKSUM
 7

	)

133 
	#IPV6_2292HOPLIMIT
 8

	)

135 
	#SCM_SRCRT
 
IPV6_RXSRCRT


	)

137 
	#IPV6_NEXTHOP
 9

	)

138 
	#IPV6_AUTHHDR
 10

	)

139 
	#IPV6_UNICAST_HOPS
 16

	)

140 
	#IPV6_MULTICAST_IF
 17

	)

141 
	#IPV6_MULTICAST_HOPS
 18

	)

142 
	#IPV6_MULTICAST_LOOP
 19

	)

143 
	#IPV6_JOIN_GROUP
 20

	)

144 
	#IPV6_LEAVE_GROUP
 21

	)

145 
	#IPV6_ROUTER_ALERT
 22

	)

146 
	#IPV6_MTU_DISCOVER
 23

	)

147 
	#IPV6_MTU
 24

	)

148 
	#IPV6_RECVERR
 25

	)

149 
	#IPV6_V6ONLY
 26

	)

150 
	#IPV6_JOIN_ANYCAST
 27

	)

151 
	#IPV6_LEAVE_ANYCAST
 28

	)

152 
	#IPV6_IPSEC_POLICY
 34

	)

153 
	#IPV6_XFRM_POLICY
 35

	)

155 
	#IPV6_RECVPKTINFO
 49

	)

156 
	#IPV6_PKTINFO
 50

	)

157 
	#IPV6_RECVHOPLIMIT
 51

	)

158 
	#IPV6_HOPLIMIT
 52

	)

159 
	#IPV6_RECVHOPOPTS
 53

	)

160 
	#IPV6_HOPOPTS
 54

	)

161 
	#IPV6_RTHDRDSTOPTS
 55

	)

162 
	#IPV6_RECVRTHDR
 56

	)

163 
	#IPV6_RTHDR
 57

	)

164 
	#IPV6_RECVDSTOPTS
 58

	)

165 
	#IPV6_DSTOPTS
 59

	)

167 
	#IPV6_RECVTCLASS
 66

	)

168 
	#IPV6_TCLASS
 67

	)

171 
	#IPV6_ADD_MEMBERSHIP
 
IPV6_JOIN_GROUP


	)

172 
	#IPV6_DROP_MEMBERSHIP
 
IPV6_LEAVE_GROUP


	)

173 
	#IPV6_RXHOPOPTS
 
IPV6_HOPOPTS


	)

174 
	#IPV6_RXDSTOPTS
 
IPV6_DSTOPTS


	)

177 
	#IPV6_PMTUDISC_DONT
 0

	)

178 
	#IPV6_PMTUDISC_WANT
 1

	)

179 
	#IPV6_PMTUDISC_DO
 2

	)

180 
	#IPV6_PMTUDISC_PROBE
 3

	)

183 
	#SOL_IPV6
 41

	)

184 
	#SOL_ICMPV6
 58

	)

187 
	#IPV6_RTHDR_LOOSE
 0

	)

188 
	#IPV6_RTHDR_STRICT
 1

	)

190 
	#IPV6_RTHDR_TYPE_0
 0

	)

	@/usr/include/bits/inf.h

19 #i‚de‡
_MATH_H


25 #i‡
__GNUC_PREREQ
(3,3)

26 
	#INFINITY
 (
	`__buûtö_öff
())

	)

28 
	#INFINITY
 
HUGE_VALF


	)

	@/usr/include/bits/ioctl-types.h

19 #i‚de‡
_SYS_IOCTL_H


24 
	~<asm/io˘ls.h
>

27 
	swösize


29 
	mws_row
;

30 
	mws_cﬁ
;

31 
	mws_xpixñ
;

32 
	mws_ypixñ
;

35 
	#NCC
 8

	)

36 
	sãrmio


38 
	mc_iÊag
;

39 
	mc_oÊag
;

40 
	mc_cÊag
;

41 
	mc_lÊag
;

42 
	mc_löe
;

43 
	mc_cc
[
NCC
];

47 
	#TIOCM_LE
 0x001

	)

48 
	#TIOCM_DTR
 0x002

	)

49 
	#TIOCM_RTS
 0x004

	)

50 
	#TIOCM_ST
 0x008

	)

51 
	#TIOCM_SR
 0x010

	)

52 
	#TIOCM_CTS
 0x020

	)

53 
	#TIOCM_CAR
 0x040

	)

54 
	#TIOCM_RNG
 0x080

	)

55 
	#TIOCM_DSR
 0x100

	)

56 
	#TIOCM_CD
 
TIOCM_CAR


	)

57 
	#TIOCM_RI
 
TIOCM_RNG


	)

62 
	#N_TTY
 0

	)

63 
	#N_SLIP
 1

	)

64 
	#N_MOUSE
 2

	)

65 
	#N_PPP
 3

	)

66 
	#N_STRIP
 4

	)

67 
	#N_AX25
 5

	)

68 
	#N_X25
 6

	)

69 
	#N_6PACK
 7

	)

70 
	#N_MASC
 8

	)

71 
	#N_R3964
 9

	)

72 
	#N_PROFIBUS_FDL
 10

	)

73 
	#N_IRDA
 11

	)

74 
	#N_SMSBLOCK
 12

	)

75 
	#N_HDLC
 13

	)

76 
	#N_SYNC_PPP
 14

	)

77 
	#N_HCI
 15

	)

	@/usr/include/bits/ioctls.h

18 #i‚de‡
_SYS_IOCTL_H


23 
	~<asm/io˘ls.h
>

26 
	#SIOCADDRT
 0x890B

	)

27 
	#SIOCDELRT
 0x890C

	)

28 
	#SIOCRTMSG
 0x890D

	)

31 
	#SIOCGIFNAME
 0x8910

	)

32 
	#SIOCSIFLINK
 0x8911

	)

33 
	#SIOCGIFCONF
 0x8912

	)

34 
	#SIOCGIFFLAGS
 0x8913

	)

35 
	#SIOCSIFFLAGS
 0x8914

	)

36 
	#SIOCGIFADDR
 0x8915

	)

37 
	#SIOCSIFADDR
 0x8916

	)

38 
	#SIOCGIFDSTADDR
 0x8917

	)

39 
	#SIOCSIFDSTADDR
 0x8918

	)

40 
	#SIOCGIFBRDADDR
 0x8919

	)

41 
	#SIOCSIFBRDADDR
 0x891®

	)

42 
	#SIOCGIFNETMASK
 0x891b

	)

43 
	#SIOCSIFNETMASK
 0x891¯

	)

44 
	#SIOCGIFMETRIC
 0x891d

	)

45 
	#SIOCSIFMETRIC
 0x891ê

	)

46 
	#SIOCGIFMEM
 0x891‡

	)

47 
	#SIOCSIFMEM
 0x8920

	)

48 
	#SIOCGIFMTU
 0x8921

	)

49 
	#SIOCSIFMTU
 0x8922

	)

50 
	#SIOCSIFNAME
 0x8923

	)

51 
	#SIOCSIFHWADDR
 0x8924

	)

52 
	#SIOCGIFENCAP
 0x8925

	)

53 
	#SIOCSIFENCAP
 0x8926

	)

54 
	#SIOCGIFHWADDR
 0x8927

	)

55 
	#SIOCGIFSLAVE
 0x8929

	)

56 
	#SIOCSIFSLAVE
 0x8930

	)

57 
	#SIOCADDMULTI
 0x8931

	)

58 
	#SIOCDELMULTI
 0x8932

	)

59 
	#SIOCGIFINDEX
 0x8933

	)

60 
	#SIOGIFINDEX
 
SIOCGIFINDEX


	)

61 
	#SIOCSIFPFLAGS
 0x8934

	)

62 
	#SIOCGIFPFLAGS
 0x8935

	)

63 
	#SIOCDIFADDR
 0x8936

	)

64 
	#SIOCSIFHWBROADCAST
 0x8937

	)

65 
	#SIOCGIFCOUNT
 0x8938

	)

67 
	#SIOCGIFBR
 0x8940

	)

68 
	#SIOCSIFBR
 0x8941

	)

70 
	#SIOCGIFTXQLEN
 0x8942

	)

71 
	#SIOCSIFTXQLEN
 0x8943

	)

76 
	#SIOCDARP
 0x8953

	)

77 
	#SIOCGARP
 0x8954

	)

78 
	#SIOCSARP
 0x8955

	)

81 
	#SIOCDRARP
 0x8960

	)

82 
	#SIOCGRARP
 0x8961

	)

83 
	#SIOCSRARP
 0x8962

	)

87 
	#SIOCGIFMAP
 0x8970

	)

88 
	#SIOCSIFMAP
 0x8971

	)

92 
	#SIOCADDDLCI
 0x8980

	)

93 
	#SIOCDELDLCI
 0x8981

	)

102 
	#SIOCDEVPRIVATE
 0x89F0

	)

108 
	#SIOCPROTOPRIVATE
 0x89E0

	)

	@/usr/include/bits/ipc.h

18 #i‚de‡
_SYS_IPC_H


22 
	~<bôs/ty≥s.h
>

25 
	#IPC_CREAT
 01000

	)

26 
	#IPC_EXCL
 02000

	)

27 
	#IPC_NOWAIT
 04000

	)

30 
	#IPC_RMID
 0

	)

31 
	#IPC_SET
 1

	)

32 
	#IPC_STAT
 2

	)

33 #ifde‡
__USE_GNU


34 
	#IPC_INFO
 3

	)

38 
	#IPC_PRIVATE
 ((
__key_t
Ë0Ë

	)

42 
	sùc_≥rm


44 
__key_t
 
	m__key
;

45 
__uid_t
 
	muid
;

46 
__gid_t
 
	mgid
;

47 
__uid_t
 
	mcuid
;

48 
__gid_t
 
	mcgid
;

49 
	mmode
;

50 
	m__∑d1
;

51 
	m__£q
;

52 
	m__∑d2
;

53 
__sysˇŒ_ul⁄g_t
 
	m__unu£d1
;

54 
__sysˇŒ_ul⁄g_t
 
	m__unu£d2
;

	@/usr/include/bits/ipctypes.h

19 #i‚de‡
_SYS_IPC_H


23 #i‚de‡
_BITS_IPCTYPES_H


24 
	#_BITS_IPCTYPES_H
 1

	)

27 #ifde‡
__x86_64__


28 
	t__ùc_pid_t
;

30 
	t__ùc_pid_t
;

	@/usr/include/bits/locale.h

19 #i‡!
deföed
 
_LOCALE_H
 && !deföed 
_LANGINFO_H


23 #i‚de‡
_BITS_LOCALE_H


24 
	#_BITS_LOCALE_H
 1

	)

26 
	#__LC_CTYPE
 0

	)

27 
	#__LC_NUMERIC
 1

	)

28 
	#__LC_TIME
 2

	)

29 
	#__LC_COLLATE
 3

	)

30 
	#__LC_MONETARY
 4

	)

31 
	#__LC_MESSAGES
 5

	)

32 
	#__LC_ALL
 6

	)

33 
	#__LC_PAPER
 7

	)

34 
	#__LC_NAME
 8

	)

35 
	#__LC_ADDRESS
 9

	)

36 
	#__LC_TELEPHONE
 10

	)

37 
	#__LC_MEASUREMENT
 11

	)

38 
	#__LC_IDENTIFICATION
 12

	)

	@/usr/include/bits/math-finite.h

19 #i‚de‡
_MATH_H


24 
__REDIRECT_NTH
 (
acos
, (), 
__acos_föôe
);

25 
__REDIRECT_NTH
 (
acosf
, (), 
__acosf_föôe
);

26 #ifde‡
__MATH_DECLARE_LDOUBLE


27 #ifde‡
__NO_LONG_DOUBLE_MATH


28 
__REDIRECT_NTH
 (
aco¶
, (), 
__acos_föôe
);

30 
__REDIRECT_NTH
 (
aco¶
, (), 
__aco¶_föôe
);

34 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


36 
__REDIRECT_NTH
 (
acosh
, (), 
__acosh_föôe
);

37 
__REDIRECT_NTH
 (
acoshf
, (), 
__acoshf_föôe
);

38 #ifde‡
__MATH_DECLARE_LDOUBLE


39 #ifde‡
__NO_LONG_DOUBLE_MATH


40 
__REDIRECT_NTH
 (
acoshl
, (), 
__acosh_föôe
);

42 
__REDIRECT_NTH
 (
acoshl
, (), 
__acoshl_föôe
);

48 
__REDIRECT_NTH
 (
asö
, (), 
__asö_föôe
);

49 
__REDIRECT_NTH
 (
asöf
, (), 
__asöf_föôe
);

50 #ifde‡
__MATH_DECLARE_LDOUBLE


51 #ifde‡
__NO_LONG_DOUBLE_MATH


52 
__REDIRECT_NTH
 (
asöl
, (), 
__asö_föôe
);

54 
__REDIRECT_NTH
 (
asöl
, (), 
__asöl_föôe
);

59 
__REDIRECT_NTH
 (
©™2
, (, ), 
__©™2_föôe
);

60 
__REDIRECT_NTH
 (
©™2f
, (, ), 
__©™2f_föôe
);

61 #ifde‡
__MATH_DECLARE_LDOUBLE


62 #ifde‡
__NO_LONG_DOUBLE_MATH


63 
__REDIRECT_NTH
 (
©™2l
, (, ),

64 
__©™2_föôe
);

66 
__REDIRECT_NTH
 (
©™2l
, (, ),

67 
__©™2l_föôe
);

71 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


73 
__REDIRECT_NTH
 (
©™h
, (), 
__©™h_föôe
);

74 
__REDIRECT_NTH
 (
©™hf
, (), 
__©™hf_föôe
);

75 #ifde‡
__MATH_DECLARE_LDOUBLE


76 #ifde‡
__NO_LONG_DOUBLE_MATH


77 
__REDIRECT_NTH
 (
©™hl
, (), 
__©™h_föôe
);

79 
__REDIRECT_NTH
 (
©™hl
, (), 
__©™hl_föôe
);

85 
__REDIRECT_NTH
 (
cosh
, (), 
__cosh_föôe
);

86 
__REDIRECT_NTH
 (
coshf
, (), 
__coshf_föôe
);

87 #ifde‡
__MATH_DECLARE_LDOUBLE


88 #ifde‡
__NO_LONG_DOUBLE_MATH


89 
__REDIRECT_NTH
 (
coshl
, (), 
__cosh_föôe
);

91 
__REDIRECT_NTH
 (
coshl
, (), 
__coshl_föôe
);

96 
__REDIRECT_NTH
 (
exp
, (), 
__exp_föôe
);

97 
__REDIRECT_NTH
 (
expf
, (), 
__expf_föôe
);

98 #ifde‡
__MATH_DECLARE_LDOUBLE


99 #ifde‡
__NO_LONG_DOUBLE_MATH


100 
__REDIRECT_NTH
 (
ex∂
, (), 
__exp_föôe
);

102 
__REDIRECT_NTH
 (
ex∂
, (), 
__ex∂_föôe
);

106 #ifde‡
__USE_GNU


108 
__REDIRECT_NTH
 (
exp10
, (), 
__exp10_föôe
);

109 
__REDIRECT_NTH
 (
exp10f
, (), 
__exp10f_föôe
);

110 #ifde‡
__MATH_DECLARE_LDOUBLE


111 #ifde‡
__NO_LONG_DOUBLE_MATH


112 
__REDIRECT_NTH
 (
exp10l
, (), 
__exp10_föôe
);

114 
__REDIRECT_NTH
 (
exp10l
, (), 
__exp10l_föôe
);

119 
__REDIRECT_NTH
 (
pow10
, (), 
__exp10_föôe
);

120 
__REDIRECT_NTH
 (
pow10f
, (), 
__exp10f_föôe
);

121 #ifde‡
__MATH_DECLARE_LDOUBLE


122 #ifde‡
__NO_LONG_DOUBLE_MATH


123 
__REDIRECT_NTH
 (
pow10l
, (), 
__exp10_föôe
);

125 
__REDIRECT_NTH
 (
pow10l
, (), 
__exp10l_föôe
);

130 #ifde‡
__USE_ISOC99


132 
__REDIRECT_NTH
 (
exp2
, (), 
__exp2_föôe
);

133 
__REDIRECT_NTH
 (
exp2f
, (), 
__exp2f_föôe
);

134 #ifde‡
__MATH_DECLARE_LDOUBLE


135 #ifde‡
__NO_LONG_DOUBLE_MATH


136 
__REDIRECT_NTH
 (
exp2l
, (), 
__exp2_föôe
);

138 
__REDIRECT_NTH
 (
exp2l
, (), 
__exp2l_föôe
);

144 
__REDIRECT_NTH
 (
fmod
, (, ), 
__fmod_föôe
);

145 
__REDIRECT_NTH
 (
fmodf
, (, ), 
__fmodf_föôe
);

146 #ifde‡
__MATH_DECLARE_LDOUBLE


147 #ifde‡
__NO_LONG_DOUBLE_MATH


148 
__REDIRECT_NTH
 (
fmodl
, (, ),

149 
__fmod_föôe
);

151 
__REDIRECT_NTH
 (
fmodl
, (, ),

152 
__fmodl_föôe
);

156 #ifde‡
__USE_ISOC99


158 
__REDIRECT_NTH
 (
hypŸ
, (, ), 
__hypŸ_föôe
);

159 
__REDIRECT_NTH
 (
hypŸf
, (, ), 
__hypŸf_föôe
);

160 #ifde‡
__MATH_DECLARE_LDOUBLE


161 #ifde‡
__NO_LONG_DOUBLE_MATH


162 
__REDIRECT_NTH
 (
hypŸl
, (, ),

163 
__hypŸ_föôe
);

165 
__REDIRECT_NTH
 (
hypŸl
, (, ),

166 
__hypŸl_föôe
);

171 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


173 
__REDIRECT_NTH
 (
j0
, (), 
__j0_föôe
);

174 
__REDIRECT_NTH
 (
j0f
, (), 
__j0f_föôe
);

175 #ifde‡
__MATH_DECLARE_LDOUBLE


176 #ifde‡
__NO_LONG_DOUBLE_MATH


177 
__REDIRECT_NTH
 (
j0l
, (), 
__j0_föôe
);

179 
__REDIRECT_NTH
 (
j0l
, (), 
__j0l_föôe
);

184 
__REDIRECT_NTH
 (
y0
, (), 
__y0_föôe
);

185 
__REDIRECT_NTH
 (
y0f
, (), 
__y0f_föôe
);

186 #ifde‡
__MATH_DECLARE_LDOUBLE


187 #ifde‡
__NO_LONG_DOUBLE_MATH


188 
__REDIRECT_NTH
 (
y0l
, (), 
__y0_föôe
);

190 
__REDIRECT_NTH
 (
y0l
, (), 
__y0l_föôe
);

195 
__REDIRECT_NTH
 (
j1
, (), 
__j1_föôe
);

196 
__REDIRECT_NTH
 (
j1f
, (), 
__j1f_föôe
);

197 #ifde‡
__MATH_DECLARE_LDOUBLE


198 #ifde‡
__NO_LONG_DOUBLE_MATH


199 
__REDIRECT_NTH
 (
j1l
, (), 
__j1_föôe
);

201 
__REDIRECT_NTH
 (
j1l
, (), 
__j1l_föôe
);

206 
__REDIRECT_NTH
 (
y1
, (), 
__y1_föôe
);

207 
__REDIRECT_NTH
 (
y1f
, (), 
__y1f_föôe
);

208 #ifde‡
__MATH_DECLARE_LDOUBLE


209 #ifde‡
__NO_LONG_DOUBLE_MATH


210 
__REDIRECT_NTH
 (
y1l
, (), 
__y1_föôe
);

212 
__REDIRECT_NTH
 (
y1l
, (), 
__y1l_föôe
);

217 
__REDIRECT_NTH
 (
jn
, (, ), 
__jn_föôe
);

218 
__REDIRECT_NTH
 (
jnf
, (, ), 
__jnf_föôe
);

219 #ifde‡
__MATH_DECLARE_LDOUBLE


220 #ifde‡
__NO_LONG_DOUBLE_MATH


221 
__REDIRECT_NTH
 (
j∆
, (, ), 
__jn_föôe
);

223 
__REDIRECT_NTH
 (
j∆
, (, ), 
__j∆_föôe
);

228 
__REDIRECT_NTH
 (
yn
, (, ), 
__yn_föôe
);

229 
__REDIRECT_NTH
 (
ynf
, (, ), 
__ynf_föôe
);

230 #ifde‡
__MATH_DECLARE_LDOUBLE


231 #ifde‡
__NO_LONG_DOUBLE_MATH


232 
__REDIRECT_NTH
 (
y∆
, (, ), 
__yn_föôe
);

234 
__REDIRECT_NTH
 (
y∆
, (, ), 
__y∆_föôe
);

239 #ifde‡
__USE_MISC


241 
__REDIRECT_NTH
 (
lgamma_r
, (, *), 
__lgamma_r_föôe
);

242 
__REDIRECT_NTH
 (
lgammaf_r
, (, *), 
__lgammaf_r_föôe
);

243 #ifde‡
__MATH_DECLARE_LDOUBLE


244 #ifde‡
__NO_LONG_DOUBLE_MATH


245 
__REDIRECT_NTH
 (
lgammÆ_r
, (, *),

246 
__lgamma_r_föôe
);

248 
__REDIRECT_NTH
 (
lgammÆ_r
, (, *),

249 
__lgammÆ_r_föôe
);

254 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || deföed 
__USE_ISOC99


256 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgamma
 (
__d
))

258 #ifde‡
__USE_ISOC99


259 
__loˇl_signgam
 = 0;

260  
	`lgamma_r
 (
__d
, &
__loˇl_signgam
);

262  
	`lgamma_r
 (
__d
, &
signgam
);

264 
	}
}

265 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgammaf
 (
__d
))

267 #ifde‡
__USE_ISOC99


268 
__loˇl_signgam
 = 0;

269  
	`lgammaf_r
 (
__d
, &
__loˇl_signgam
);

271  
	`lgammaf_r
 (
__d
, &
signgam
);

273 
	}
}

274 #ifde‡
__MATH_DECLARE_LDOUBLE


275 
__exã∫_Æways_ölöe
 
__NTH
 (
	$lgammÆ
 (
__d
))

277 #ifde‡
__USE_ISOC99


278 
__loˇl_signgam
 = 0;

279  
	`lgammÆ_r
 (
__d
, &
__loˇl_signgam
);

281  
	`lgammÆ_r
 (
__d
, &
signgam
);

283 
	}
}

287 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


289 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gamma
 (
__d
))

291 #ifde‡
__USE_ISOC99


292 
__loˇl_signgam
 = 0;

293  
	`lgamma_r
 (
__d
, &
__loˇl_signgam
);

295  
	`lgamma_r
 (
__d
, &
signgam
);

297 
	}
}

298 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gammaf
 (
__d
))

300 #ifde‡
__USE_ISOC99


301 
__loˇl_signgam
 = 0;

302  
	`lgammaf_r
 (
__d
, &
__loˇl_signgam
);

304  
	`lgammaf_r
 (
__d
, &
signgam
);

306 
	}
}

307 #ifde‡
__MATH_DECLARE_LDOUBLE


308 
__exã∫_Æways_ölöe
 
__NTH
 (
	$gammÆ
 (
__d
))

310 #ifde‡
__USE_ISOC99


311 
__loˇl_signgam
 = 0;

312  
	`lgammÆ_r
 (
__d
, &
__loˇl_signgam
);

314  
	`lgammÆ_r
 (
__d
, &
signgam
);

316 
	}
}

321 
__REDIRECT_NTH
 (
log
, (), 
__log_föôe
);

322 
__REDIRECT_NTH
 (
logf
, (), 
__logf_föôe
);

323 #ifde‡
__MATH_DECLARE_LDOUBLE


324 #ifde‡
__NO_LONG_DOUBLE_MATH


325 
__REDIRECT_NTH
 (
logl
, (), 
__log_föôe
);

327 
__REDIRECT_NTH
 (
logl
, (), 
__logl_föôe
);

332 
__REDIRECT_NTH
 (
log10
, (), 
__log10_föôe
);

333 
__REDIRECT_NTH
 (
log10f
, (), 
__log10f_föôe
);

334 #ifde‡
__MATH_DECLARE_LDOUBLE


335 #ifde‡
__NO_LONG_DOUBLE_MATH


336 
__REDIRECT_NTH
 (
log10l
, (), 
__log10_föôe
);

338 
__REDIRECT_NTH
 (
log10l
, (), 
__log10l_föôe
);

342 #ifde‡
__USE_ISOC99


344 
__REDIRECT_NTH
 (
log2
, (), 
__log2_föôe
);

345 
__REDIRECT_NTH
 (
log2f
, (), 
__log2f_föôe
);

346 #ifde‡
__MATH_DECLARE_LDOUBLE


347 #ifde‡
__NO_LONG_DOUBLE_MATH


348 
__REDIRECT_NTH
 (
log2l
, (), 
__log2_föôe
);

350 
__REDIRECT_NTH
 (
log2l
, (), 
__log2l_föôe
);

356 
__REDIRECT_NTH
 (
ldexp
, (, ), 
sˇlbn
);

357 
__REDIRECT_NTH
 (
ldexpf
, (, ), 
sˇlbnf
);

358 #ifde‡
__MATH_DECLARE_LDOUBLE


359 
__REDIRECT_NTH
 (
ldex∂
, (, ), 
sˇlb∆
);

363 
__REDIRECT_NTH
 (
pow
, (, ), 
__pow_föôe
);

364 
__REDIRECT_NTH
 (
powf
, (, ), 
__powf_föôe
);

365 #ifde‡
__MATH_DECLARE_LDOUBLE


366 #ifde‡
__NO_LONG_DOUBLE_MATH


367 
__REDIRECT_NTH
 (
powl
, (, ),

368 
__pow_föôe
);

370 
__REDIRECT_NTH
 (
powl
, (, ),

371 
__powl_föôe
);

376 
__REDIRECT_NTH
 (
ªmaödî
, (, ), 
__ªmaödî_föôe
);

377 
__REDIRECT_NTH
 (
ªmaödîf
, (, ), 
__ªmaödîf_föôe
);

378 #ifde‡
__MATH_DECLARE_LDOUBLE


379 #ifde‡
__NO_LONG_DOUBLE_MATH


380 
__REDIRECT_NTH
 (
ªmaödîl
, (, ),

381 
__ªmaödî_föôe
);

383 
__REDIRECT_NTH
 (
ªmaödîl
, (, ),

384 
__ªmaödîl_föôe
);

388 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


390 
__REDIRECT_NTH
 (
sˇlb
, (, ), 
__sˇlb_föôe
);

391 
__REDIRECT_NTH
 (
sˇlbf
, (, ), 
__sˇlbf_föôe
);

392 #ifde‡
__MATH_DECLARE_LDOUBLE


393 #ifde‡
__NO_LONG_DOUBLE_MATH


394 
__REDIRECT_NTH
 (
sˇlbl
, (, ),

395 
__sˇlb_föôe
);

397 
__REDIRECT_NTH
 (
sˇlbl
, (, ),

398 
__sˇlbl_föôe
);

404 
__REDIRECT_NTH
 (
söh
, (), 
__söh_föôe
);

405 
__REDIRECT_NTH
 (
söhf
, (), 
__söhf_föôe
);

406 #ifde‡
__MATH_DECLARE_LDOUBLE


407 #ifde‡
__NO_LONG_DOUBLE_MATH


408 
__REDIRECT_NTH
 (
söhl
, (), 
__söh_föôe
);

410 
__REDIRECT_NTH
 (
söhl
, (), 
__söhl_föôe
);

415 
__REDIRECT_NTH
 (
sqπ
, (), 
__sqπ_föôe
);

416 
__REDIRECT_NTH
 (
sqπf
, (), 
__sqπf_föôe
);

417 #ifde‡
__MATH_DECLARE_LDOUBLE


418 #ifde‡
__NO_LONG_DOUBLE_MATH


419 
__REDIRECT_NTH
 (
sqπl
, (), 
__sqπ_föôe
);

421 
__REDIRECT_NTH
 (
sqπl
, (), 
__sqπl_föôe
);

425 #ifde‡
__USE_ISOC99


427 
__gamma_r_föôe
 (, *);

428 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgamma
 (
__d
))

430 
__loˇl_signgam
 = 0;

431 
__ªs
 = 
	`__gamma_r_föôe
 (
__d
, &
__loˇl_signgam
);

432  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

433 
	}
}

434 
__gammaf_r_föôe
 (, *);

435 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgammaf
 (
__d
))

437 
__loˇl_signgam
 = 0;

438 
__ªs
 = 
	`__gammaf_r_föôe
 (
__d
, &
__loˇl_signgam
);

439  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

440 
	}
}

441 #ifde‡
__MATH_DECLARE_LDOUBLE


442 
__gammÆ_r_föôe
 (, *);

443 
__exã∫_Æways_ölöe
 
__NTH
 (
	$tgammÆ
 (
__d
))

445 
__loˇl_signgam
 = 0;

446 #ifde‡
__NO_LONG_DOUBLE_MATH


447 
__ªs
 = 
	`__gamma_r_föôe
 (
__d
, &
__loˇl_signgam
);

449 
__ªs
 = 
	`__gammÆ_r_föôe
 (
__d
, &
__loˇl_signgam
);

451  
__loˇl_signgam
 < 0 ? -
__ªs
 : __res;

452 
	}
}

	@/usr/include/bits/mathcalls.h

45 #i‚de‡
_MATH_H


52 
_MdoubÀ_BEGIN_NAMESPACE


54 
__MATHCALL
 (
acos
,, (
_MdoubÀ_
 
__x
));

56 
__MATHCALL
 (
asö
,, (
_MdoubÀ_
 
__x
));

58 
__MATHCALL
 (
©™
,, (
_MdoubÀ_
 
__x
));

60 
__MATHCALL
 (
©™2
,, (
_MdoubÀ_
 
__y
, _MdoubÀ_ 
__x
));

63 
__MATHCALL
 (
cos
,, (
_MdoubÀ_
 
__x
));

65 
__MATHCALL
 (
sö
,, (
_MdoubÀ_
 
__x
));

67 
__MATHCALL
 (
èn
,, (
_MdoubÀ_
 
__x
));

72 
__MATHCALL
 (
cosh
,, (
_MdoubÀ_
 
__x
));

74 
__MATHCALL
 (
söh
,, (
_MdoubÀ_
 
__x
));

76 
__MATHCALL
 (
ènh
,, (
_MdoubÀ_
 
__x
));

77 
	g_MdoubÀ_END_NAMESPACE


79 #ifde‡
__USE_GNU


81 
__MATHDECL
 (,
söcos
,,

82 (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__söx
, _MdoubÀ_ *
__cosx
));

85 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


86 
__BEGIN_NAMESPACE_C99


88 
__MATHCALL
 (
acosh
,, (
_MdoubÀ_
 
__x
));

90 
__MATHCALL
 (
asöh
,, (
_MdoubÀ_
 
__x
));

92 
__MATHCALL
 (
©™h
,, (
_MdoubÀ_
 
__x
));

93 
	g__END_NAMESPACE_C99


98 
_MdoubÀ_BEGIN_NAMESPACE


100 
__MATHCALL
 (
exp
,, (
_MdoubÀ_
 
__x
));

103 
__MATHCALL
 (
‰exp
,, (
_MdoubÀ_
 
__x
, *
__exp⁄ít
));

106 
__MATHCALL
 (
ldexp
,, (
_MdoubÀ_
 
__x
, 
__exp⁄ít
));

109 
__MATHCALL
 (
log
,, (
_MdoubÀ_
 
__x
));

112 
__MATHCALL
 (
log10
,, (
_MdoubÀ_
 
__x
));

115 
__MATHCALL
 (
modf
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__ùå
)Ë
__n⁄nuŒ
 ((2));

116 
	g_MdoubÀ_END_NAMESPACE


118 #ifde‡
__USE_GNU


120 
__MATHCALL
 (
exp10
,, (
_MdoubÀ_
 
__x
));

122 
__MATHCALL
 (
pow10
,, (
_MdoubÀ_
 
__x
));

125 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


126 
__BEGIN_NAMESPACE_C99


128 
__MATHCALL
 (
expm1
,, (
_MdoubÀ_
 
__x
));

131 
__MATHCALL
 (
log1p
,, (
_MdoubÀ_
 
__x
));

134 
__MATHCALL
 (
logb
,, (
_MdoubÀ_
 
__x
));

135 
	g__END_NAMESPACE_C99


138 #ifde‡
__USE_ISOC99


139 
__BEGIN_NAMESPACE_C99


141 
__MATHCALL
 (
exp2
,, (
_MdoubÀ_
 
__x
));

144 
__MATHCALL
 (
log2
,, (
_MdoubÀ_
 
__x
));

145 
	g__END_NAMESPACE_C99


151 
_MdoubÀ_BEGIN_NAMESPACE


153 
__MATHCALL
 (
pow
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

156 
__MATHCALL
 (
sqπ
,, (
_MdoubÀ_
 
__x
));

157 
	g_MdoubÀ_END_NAMESPACE


159 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || deföed 
__USE_ISOC99


160 
__BEGIN_NAMESPACE_C99


162 
__MATHCALL
 (
hypŸ
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

163 
	g__END_NAMESPACE_C99


166 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


167 
__BEGIN_NAMESPACE_C99


169 
__MATHCALL
 (
cbπ
,, (
_MdoubÀ_
 
__x
));

170 
	g__END_NAMESPACE_C99


176 
_MdoubÀ_BEGIN_NAMESPACE


178 
__MATHCALLX
 (
˚û
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

181 
__MATHCALLX
 (
Ábs
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

184 
__MATHCALLX
 (
Êo‹
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

187 
__MATHCALL
 (
fmod
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

192 
__MATHDECL_1
 (,
__isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

195 
__MATHDECL_1
 (,
__föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

196 
	g_MdoubÀ_END_NAMESPACE


198 #ifde‡
__USE_MISC


201 
__MATHDECL_1
 (,
isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

204 
__MATHDECL_1
 (,
föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

207 
__MATHCALL
 (
dªm
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

211 
__MATHCALL
 (
signifiˇnd
,, (
_MdoubÀ_
 
__x
));

214 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


215 
__BEGIN_NAMESPACE_C99


217 
__MATHCALLX
 (
c›ysign
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

218 
	g__END_NAMESPACE_C99


221 #ifde‡
__USE_ISOC99


222 
__BEGIN_NAMESPACE_C99


224 
__MATHCALLX
 (
«n
,, (c⁄° *
__ègb
), (
__c⁄°__
));

225 
	g__END_NAMESPACE_C99


230 
__MATHDECL_1
 (,
__i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

232 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


234 
__MATHDECL_1
 (,
i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

237 
__MATHCALL
 (
j0
,, (
_MdoubÀ_
));

238 
__MATHCALL
 (
j1
,, (
_MdoubÀ_
));

239 
__MATHCALL
 (
jn
,, (, 
_MdoubÀ_
));

240 
__MATHCALL
 (
y0
,, (
_MdoubÀ_
));

241 
__MATHCALL
 (
y1
,, (
_MdoubÀ_
));

242 
__MATHCALL
 (
yn
,, (, 
_MdoubÀ_
));

246 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || deföed 
__USE_ISOC99


247 
__BEGIN_NAMESPACE_C99


249 
__MATHCALL
 (
îf
,, (
_MdoubÀ_
));

250 
__MATHCALL
 (
îfc
,, (
_MdoubÀ_
));

251 
__MATHCALL
 (
lgamma
,, (
_MdoubÀ_
));

252 
	g__END_NAMESPACE_C99


255 #ifde‡
__USE_ISOC99


256 
__BEGIN_NAMESPACE_C99


258 
__MATHCALL
 (
tgamma
,, (
_MdoubÀ_
));

259 
	g__END_NAMESPACE_C99


262 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


264 
__MATHCALL
 (
gamma
,, (
_MdoubÀ_
));

267 #ifde‡
__USE_MISC


271 
__MATHCALL
 (
lgamma
,
_r
, (
_MdoubÀ_
, *
__signgamp
));

275 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


276 
__BEGIN_NAMESPACE_C99


279 
__MATHCALL
 (
röt
,, (
_MdoubÀ_
 
__x
));

282 
__MATHCALLX
 (
√xè·î
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

283 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__LDBL_COMPAT


284 
__MATHCALLX
 (
√xâow¨d
,, (
_MdoubÀ_
 
__x
, 
__y
), (
__c⁄°__
));

288 
__MATHCALL
 (
ªmaödî
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

290 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


292 
__MATHCALL
 (
sˇlbn
,, (
_MdoubÀ_
 
__x
, 
__n
));

296 
__MATHDECL
 (,
ûogb
,, (
_MdoubÀ_
 
__x
));

299 #ifde‡
__USE_ISOC99


301 
__MATHCALL
 (
sˇlb 
,, (
_MdoubÀ_
 
__x
, 
__n
));

305 
__MATHCALL
 (
√¨byöt
,, (
_MdoubÀ_
 
__x
));

309 
__MATHCALLX
 (
round
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

313 
__MATHCALLX
 (
åunc
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

318 
__MATHCALL
 (
ªmquo
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, *
__quo
));

325 
__MATHDECL
 (,
Ãöt
,, (
_MdoubÀ_
 
__x
));

326 
__exãnsi⁄__


327 
__MATHDECL
 (,
Œröt
,, (
_MdoubÀ_
 
__x
));

331 
__MATHDECL
 (,
Ãound
,, (
_MdoubÀ_
 
__x
));

332 
__exãnsi⁄__


333 
__MATHDECL
 (,
Œround
,, (
_MdoubÀ_
 
__x
));

337 
__MATHCALL
 (
fdim
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

340 
__MATHCALLX
 (
fmax
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

343 
__MATHCALLX
 (
fmö
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

347 
__MATHDECL_1
 (, 
__Â˛assify
,, (
_MdoubÀ_
 
__vÆue
))

348 
__©åibuã__
 ((
__c⁄°__
));

351 
__MATHDECL_1
 (, 
__signbô
,, (
_MdoubÀ_
 
__vÆue
))

352 
__©åibuã__
 ((
__c⁄°__
));

356 
__MATHCALL
 (
fma
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, _MdoubÀ_ 
__z
));

359 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


360 
	g__END_NAMESPACE_C99


363 #ifde‡
__USE_GNU


365 
__MATHDECL_1
 (, 
__issig«lög
,, (
_MdoubÀ_
 
__vÆue
))

366 
__©åibuã__
 ((
__c⁄°__
));

369 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


371 
__MATHCALL
 (
sˇlb
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__n
));

	@/usr/include/bits/mathdef.h

18 #i‡!
deföed
 
_MATH_H
 && !deföed 
_COMPLEX_H


22 #i‡
deföed
 
__USE_ISOC99
 && deföed 
_MATH_H
 && !deföed 
_MATH_H_MATHDEF


23 
	#_MATH_H_MATHDEF
 1

	)

25 #i‡
deföed
 
__x86_64__
 || (deföed 
__FLT_EVAL_METHOD__
 && __FLT_EVAL_METHOD__ == 0)

28 
	tÊﬂt_t
;

29 
	tdoubÀ_t
;

35 
	tÊﬂt_t
;

37 
	tdoubÀ_t
;

42 
	#FP_ILOGB0
 (-2147483647 - 1)

	)

43 
	#FP_ILOGBNAN
 (-2147483647 - 1)

	)

47 #i‡
__FP_FAST_FMA


48 
	#FP_FAST_FMA
 1

	)

51 #i‡
__FP_FAST_FMAF


52 
	#FP_FAST_FMAF
 1

	)

55 #i‡
__FP_FAST_FMAL


56 
	#FP_FAST_FMAL
 1

	)

	@/usr/include/bits/mathinline.h

19 #i‚de‡
_MATH_H


23 #i‚de‡
__exã∫_Æways_ölöe


24 
	#__MATH_INLINE
 
__ölöe


	)

26 
	#__MATH_INLINE
 
__exã∫_Æways_ölöe


	)

30 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__
 && __GNUC__ >= 2

32 #i‡!
__GNUC_PREREQ
 (2,97)

37 #unde‡
isgª©î


38 #unde‡
isgª©îequÆ


39 #unde‡
i¶ess


40 #unde‡
i¶es£quÆ


41 #unde‡
i¶essgª©î


42 #unde‡
isun‹dîed


43 #ifde‡
__i686__


46 
	#isgª©î
(
x
, 
y
) \

47 ({ 
__ªsu…
; \

48 
	`__asm__
 ("fucomip %%st(1), %%st; seta %%al" \

49 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

50 
__ªsu…
; })

	)

51 
	#isgª©îequÆ
(
x
, 
y
) \

52 ({ 
__ªsu…
; \

53 
	`__asm__
 ("fucomip %%st(1), %%st; setae %%al" \

54 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

55 
__ªsu…
; })

	)

57 
	#i¶ess
(
x
, 
y
) \

58 ({ 
__ªsu…
; \

59 
	`__asm__
 ("fucomip %%st(1), %%st; seta %%al" \

60 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st"); \

61 
__ªsu…
; })

	)

63 
	#i¶es£quÆ
(
x
, 
y
) \

64 ({ 
__ªsu…
; \

65 
	`__asm__
 ("fucomip %%st(1), %%st; setae %%al" \

66 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st"); \

67 
__ªsu…
; })

	)

69 
	#i¶essgª©î
(
x
, 
y
) \

70 ({ 
__ªsu…
; \

71 
	`__asm__
 ("fucomip %%st(1), %%st; setne %%al" \

72 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

73 
__ªsu…
; })

	)

75 
	#isun‹dîed
(
x
, 
y
) \

76 ({ 
__ªsu…
; \

77 
	`__asm__
 ("fucomip %%st(1), %%st; setp %%al" \

78 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

79 
__ªsu…
; })

	)

82 
	#isgª©î
(
x
, 
y
) \

83 ({ 
__ªsu…
; \

84 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x45, %%ah; setz %%al" \

85 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

86 
__ªsu…
; })

	)

88 
	#isgª©îequÆ
(
x
, 
y
) \

89 ({ 
__ªsu…
; \

90 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x05, %%ah; setz %%al" \

91 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

92 
__ªsu…
; })

	)

94 
	#i¶ess
(
x
, 
y
) \

95 ({ 
__ªsu…
; \

96 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x45, %%ah; setz %%al" \

97 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st", "st(1)"); \

98 
__ªsu…
; })

	)

100 
	#i¶es£quÆ
(
x
, 
y
) \

101 ({ 
__ªsu…
; \

102 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x05, %%ah; setz %%al" \

103 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st", "st(1)"); \

104 
__ªsu…
; })

	)

106 
	#i¶essgª©î
(
x
, 
y
) \

107 ({ 
__ªsu…
; \

108 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x44, %%ah; setz %%al" \

109 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

110 
__ªsu…
; })

	)

112 
	#isun‹dîed
(
x
, 
y
) \

113 ({ 
__ªsu…
; \

114 
	`__asm__
 ("fucompp; fnstsw; sahf; setp %%al" \

115 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

116 
__ªsu…
; })

	)

122 #i‡
__GNUC_PREREQ
 (2, 8)

123 
__BEGIN_NAMESPACE_C99


126 
__MATH_INLINE
 

127 
__NTH
 (
	$__signbôf
 (
__x
))

129 #ifde‡
__SSE2_MATH__


130 
__m
;

131 
	`__asm
 ("pmovmskb %1, %0" : "Ù" (
__m
Ë: "x" (
__x
));

132  (
__m
 & 0x8) != 0;

134 
__exãnsi⁄__
 uni⁄ { 
__f
; 
__i
; } 
__u
 = { __f: 
__x
 };

135  
__u
.
__i
 < 0;

137 
	}
}

138 
__MATH_INLINE
 

139 
__NTH
 (
	$__signbô
 (
__x
))

141 #ifde‡
__SSE2_MATH__


142 
__m
;

143 
	`__asm
 ("pmovmskb %1, %0" : "Ù" (
__m
Ë: "x" (
__x
));

144  (
__m
 & 0x80) != 0;

146 
__exãnsi⁄__
 uni⁄ { 
__d
; 
__i
[2]; } 
__u
 = { __d: 
__x
 };

147  
__u
.
__i
[1] < 0;

149 
	}
}

150 
__MATH_INLINE
 

151 
__NTH
 (
	$__signbôl
 (
__x
))

153 
__exãnsi⁄__
 uni⁄ { 
__l
; 
__i
[3]; } 
__u
 = { __l: 
__x
 };

154  (
__u
.
__i
[2] & 0x8000) != 0;

155 
	}
}

157 
	g__END_NAMESPACE_C99


164 #i‡
__GNUC_PREREQ
 (2, 8)

165 #i‡!
__GNUC_PREREQ
 (3, 4Ë&& !
deföed
 
__NO_MATH_INLINES
 \

166 && 
deföed
 
	g__OPTIMIZE__


170 #ifde‡
__USE_ISOC99


171 
	g__BEGIN_NAMESPACE_C99


174 #ifde‡
__SSE_MATH__


175 
__MATH_INLINE
 

176 
__NTH
 (
	$Ãötf
 (
__x
))

178 
__ªs
;

183 
__asm
 
	`__vﬁ©ûe__
 ("cvtss2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

184  
__ªs
;

185 
	}
}

187 #ifde‡
__SSE2_MATH__


188 
__MATH_INLINE
 

189 
__NTH
 (
	$Ãöt
 (
__x
))

191 
__ªs
;

196 
__asm
 
	`__vﬁ©ûe__
 ("cvtsd2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

197  
__ªs
;

198 
	}
}

200 #ifde‡
__x86_64__


201 
__exãnsi⁄__


202 
__MATH_INLINE
 

203 
__NTH
 (
	$Œrötf
 (
__x
))

205 
__ªs
;

210 
__asm
 
	`__vﬁ©ûe__
 ("cvtss2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

211  
__ªs
;

212 
	}
}

213 
__exãnsi⁄__


214 
__MATH_INLINE
 

215 
__NTH
 (
	$Œröt
 (
__x
))

217 
__ªs
;

222 
__asm
 
	`__vﬁ©ûe__
 ("cvtsd2sò%1, %0" : "Ù" (
__ªs
Ë: "xm" (
__x
));

223  
__ªs
;

224 
	}
}

227 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0 \

228 && 
deföed
 
__SSE2_MATH__


230 
__MATH_INLINE
 

231 
__NTH
 (
	$fmaxf
 (
__x
, 
__y
))

233 #ifde‡
__AVX__


234 
__ªs
;

235 
	`__asm
 ("vmaxs†%2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

236  
__ªs
;

238 
	`__asm
 ("maxs†%1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

239  
__x
;

241 
	}
}

242 
__MATH_INLINE
 

243 
__NTH
 (
	$fmax
 (
__x
, 
__y
))

245 #ifde‡
__AVX__


246 
__ªs
;

247 
	`__asm
 ("vmaxsd %2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

248  
__ªs
;

250 
	`__asm
 ("maxsd %1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

251  
__x
;

253 
	}
}

256 
__MATH_INLINE
 

257 
__NTH
 (
	$fmöf
 (
__x
, 
__y
))

259 #ifde‡
__AVX__


260 
__ªs
;

261 
	`__asm
 ("vmös†%2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

262  
__ªs
;

264 
	`__asm
 ("mös†%1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

265  
__x
;

267 
	}
}

268 
__MATH_INLINE
 

269 
__NTH
 (
	$fmö
 (
__x
, 
__y
))

271 #ifde‡
__AVX__


272 
__ªs
;

273 
	`__asm
 ("vmösd %2, %1, %0" : "=x" (
__ªs
Ë: "x" (
x
), "xm" (
__y
));

274  
__ªs
;

276 
	`__asm
 ("mösd %1, %0" : "+x" (
__x
Ë: "xm" (
__y
));

277  
__x
;

279 
	}
}

282 
	g__END_NAMESPACE_C99


285 #i‡
deföed
 
__SSE4_1__
 && deföed 
__SSE2_MATH__


286 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


287 
__BEGIN_NAMESPACE_C99


290 
__MATH_INLINE
 

291 
__NTH
 (
	$röt
 (
__x
))

293 
__ªs
;

298 
__asm
 
	`__vﬁ©ûe__
 ("roundsd $4, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

299  
__ªs
;

300 
	}
}

301 
__MATH_INLINE
 

302 
__NTH
 (
	$rötf
 (
__x
))

304 
__ªs
;

309 
__asm
 
	`__vﬁ©ûe__
 ("rounds†$4, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

310  
__ªs
;

311 
	}
}

313 #ifde‡
__USE_ISOC99


315 
__MATH_INLINE
 

316 
__NTH
 (
	$√¨byöt
 (
__x
))

318 
__ªs
;

323 
__asm
 
	`__vﬁ©ûe__
 ("roundsd $0xc, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

324  
__ªs
;

325 
	}
}

326 
__MATH_INLINE
 

327 
__NTH
 (
	$√¨byötf
 (
__x
))

329 
__ªs
;

334 
__asm
 
	`__vﬁ©ûe__
 ("rounds†$0xc, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

335  
__ªs
;

336 
	}
}

339 
	g__END_NAMESPACE_C99


342 
__BEGIN_NAMESPACE_STD


344 
__MATH_INLINE
 

345 
__NTH
 (
	$˚û
 (
__x
))

347 
__ªs
;

348 
	`__asm
 ("roundsd $2, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

349  
__ªs
;

350 
	}
}

351 
__END_NAMESPACE_STD


353 
__BEGIN_NAMESPACE_C99


354 
__MATH_INLINE
 

355 
__NTH
 (
	$˚ûf
 (
__x
))

357 
__ªs
;

358 
	`__asm
 ("rounds†$2, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

359  
__ªs
;

360 
	}
}

361 
__END_NAMESPACE_C99


363 
__BEGIN_NAMESPACE_STD


365 
__MATH_INLINE
 

366 
__NTH
 (
	$Êo‹
 (
__x
))

368 
__ªs
;

369 
	`__asm
 ("roundsd $1, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

370  
__ªs
;

371 
	}
}

372 
__END_NAMESPACE_STD


374 
__BEGIN_NAMESPACE_C99


375 
__MATH_INLINE
 

376 
__NTH
 (
	$Êo‹f
 (
__x
))

378 
__ªs
;

379 
	`__asm
 ("rounds†$1, %1, %0" : "=x" (
__ªs
Ë: "xm" (
__x
));

380  
__ªs
;

381 
	}
}

382 
	g__END_NAMESPACE_C99


387 #i‚de‡
__x86_64__


388 #i‡((!
deföed
 
__NO_MATH_INLINES
 || deföed 
__LIBC_INTERNAL_MATH_INLINES
) \

389 && 
deföed
 
	g__OPTIMIZE__
)

393 #unde‡
m©h_îrh™dlög


402 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


403 
	#__ölöe_m©h›
(
func
, 
›
) \

404 
	`__ölöe_m©h›_
 (, 
func
, 
›
) \

405 
	`__ölöe_m©h›_
 (, 
	`__CONCAT
(
func
,
f
), 
›
) \

406 
	`__ölöe_m©h›_
 (, 
	`__CONCAT
(
func
,
l
), 
›
)

	)

407 
	#__ölöe_m©h›NP
(
func
, 
›
) \

408 
	`__ölöe_m©h›NP_
 (, 
func
, 
›
) \

409 
	`__ölöe_m©h›NP_
 (, 
	`__CONCAT
(
func
,
f
), 
›
) \

410 
	`__ölöe_m©h›NP_
 (, 
	`__CONCAT
(
func
,
l
), 
›
)

	)

412 
	#__ölöe_m©h›
(
func
, 
›
) \

413 
	`__ölöe_m©h›_
 (, 
func
, 
›
)

	)

414 
	#__ölöe_m©h›NP
(
func
, 
›
) \

415 
	`__ölöe_m©h›NP_
 (, 
func
, 
›
)

	)

418 
	#__ölöe_m©h›_
(
Êﬂt_ty≥
, 
func
, 
›
) \

419 
	`__ölöe_m©h›_de˛_
 (
Êﬂt_ty≥
, 
func
, 
›
, "0" (
__x
))

	)

420 
	#__ölöe_m©h›NP_
(
Êﬂt_ty≥
, 
func
, 
›
) \

421 
	`__ölöe_m©h›_de˛NP_
 (
Êﬂt_ty≥
, 
func
, 
›
, "0" (
__x
))

	)

424 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


425 
	#__ölöe_m©h›_de˛
(
func
, 
›
, 
∑øms
...) \

426 
	`__ölöe_m©h›_de˛_
 (, 
func
, 
›
, 
∑øms
) \

427 
	`__ölöe_m©h›_de˛_
 (, 
	`__CONCAT
(
func
,
f
), 
›
, 
∑øms
) \

428 
	`__ölöe_m©h›_de˛_
 (, 
	`__CONCAT
(
func
,
l
), 
›
, 
∑øms
)

	)

429 
	#__ölöe_m©h›_de˛NP
(
func
, 
›
, 
∑øms
...) \

430 
	`__ölöe_m©h›_de˛NP_
 (, 
func
, 
›
, 
∑øms
) \

431 
	`__ölöe_m©h›_de˛NP_
 (, 
	`__CONCAT
(
func
,
f
), 
›
, 
∑øms
) \

432 
	`__ölöe_m©h›_de˛NP_
 (, 
	`__CONCAT
(
func
,
l
), 
›
, 
∑øms
)

	)

434 
	#__ölöe_m©h›_de˛
(
func
, 
›
, 
∑øms
...) \

435 
	`__ölöe_m©h›_de˛_
 (, 
func
, 
›
, 
∑øms
)

	)

436 
	#__ölöe_m©h›_de˛NP
(
func
, 
›
, 
∑øms
...) \

437 
	`__ölöe_m©h›_de˛NP_
 (, 
func
, 
›
, 
∑øms
)

	)

440 
	#__ölöe_m©h›_de˛_
(
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
...) \

441 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥Ë
__THROW
; \

442 
	`__ölöe_m©h›_de˛NP_
 (
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
)

	)

444 
	#__ölöe_m©h›_de˛NP_
(
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
...) \

445 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
__x
)) \

447 
Êﬂt_ty≥
 
__ªsu…
; \

448 
__asm
 
	`__vﬁ©ûe__
 (
›
 : "Ò" (
__ªsu…
Ë: 
∑øms
); \

449  
__ªsu…
; \

450 }

	)

453 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


454 
	#__ölöe_m©hcode
(
func
, 
¨g
, 
code
) \

455 
	`__ölöe_m©hcode_
 (, 
func
, 
¨g
, 
code
) \

456 
	`__ölöe_m©hcode_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g
, 
code
) \

457 
	`__ölöe_m©hcode_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g
, 
code
)

	)

458 
	#__ölöe_m©hcodeNP
(
func
, 
¨g
, 
code
) \

459 
	`__ölöe_m©hcodeNP_
 (, 
func
, 
¨g
, 
code
) \

460 
	`__ölöe_m©hcodeNP_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g
, 
code
) \

461 
	`__ölöe_m©hcodeNP_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g
, 
code
)

	)

462 
	#__ölöe_m©hcode2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

463 
	`__ölöe_m©hcode2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
) \

464 
	`__ölöe_m©hcode2_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
code
) \

465 
	`__ölöe_m©hcode2_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
code
)

	)

466 
	#__ölöe_m©hcodeNP2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

467 
	`__ölöe_m©hcodeNP2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
) \

468 
	`__ölöe_m©hcodeNP2_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
code
) \

469 
	`__ölöe_m©hcodeNP2_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
code
)

	)

470 
	#__ölöe_m©hcode3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

471 
	`__ölöe_m©hcode3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

472 
	`__ölöe_m©hcode3_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

473 
	`__ölöe_m©hcode3_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

474 
	#__ölöe_m©hcodeNP3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

475 
	`__ölöe_m©hcodeNP3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

476 
	`__ölöe_m©hcodeNP3_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

477 
	`__ölöe_m©hcodeNP3_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

479 
	#__ölöe_m©hcode
(
func
, 
¨g
, 
code
) \

480 
	`__ölöe_m©hcode_
 (, 
func
, (
¨g
), 
code
)

	)

481 
	#__ölöe_m©hcodeNP
(
func
, 
¨g
, 
code
) \

482 
	`__ölöe_m©hcodeNP_
 (, 
func
, (
¨g
), 
code
)

	)

483 
	#__ölöe_m©hcode2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

484 
	`__ölöe_m©hcode2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

485 
	#__ölöe_m©hcodeNP2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

486 
	`__ölöe_m©hcodeNP2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

487 
	#__ölöe_m©hcode3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

488 
	`__ölöe_m©hcode3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

489 
	#__ölöe_m©hcodeNP3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

490 
	`__ölöe_m©hcodeNP3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

493 
	#__ölöe_m©hcode_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
) \

494 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥Ë
__THROW
; \

495 
	`__ölöe_m©hcodeNP_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
)

	)

497 
	#__ölöe_m©hcodeNP_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
) \

498 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g
)) \

500 
code
; \

501 }

	)

504 
	#__ölöe_m©hcode2_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
) \

505 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥, flﬂt_ty≥Ë
__THROW
; \

506 
	`__ölöe_m©hcodeNP2_
 (
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

508 
	#__ölöe_m©hcodeNP2_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
) \

509 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g1
, flﬂt_ty≥ 
¨g2
)) \

511 
code
; \

512 }

	)

514 
	#__ölöe_m©hcode3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

515 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥, flﬂt_ty≥, flﬂt_ty≥Ë
__THROW
; \

516 
	`__ölöe_m©hcodeNP3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

518 
	#__ölöe_m©hcodeNP3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

519 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g1
, flﬂt_ty≥ 
¨g2
, \

520 
Êﬂt_ty≥
 
¨g3
)) \

522 
code
; \

523 }

	)

527 #i‡!
deföed
 
__NO_MATH_INLINES
 && deföed 
__OPTIMIZE__


531 #ifde‡
__FAST_MATH__


532 #ifde‡
__USE_GNU


533 
	#__söcos_code
 \

534 
__co§
; \

535 
__sör
; \

536 
__swtmp
; \

537 
__asm
 
__vﬁ©ûe__
 \

552 : "Ò" (
__co§
), "=u" (
__sör
), "˜" (
__swtmp
Ë: "0" (
__x
)); \

553 *
__söx
 = 
__sör
; \

554 *
__cosx
 = 
__co§


	)

556 
__MATH_INLINE
 

557 
__NTH
 (
	$__söcos
 (
__x
, *
__söx
, *
__cosx
))

559 
__söcos_code
;

560 
	}
}

562 
__MATH_INLINE
 

563 
__NTH
 (
	$__söcosf
 (
__x
, *
__söx
, *
__cosx
))

565 
__söcos_code
;

566 
	}
}

568 
__MATH_INLINE
 

569 
__NTH
 (
	$__söco¶
 (
__x
, *
__söx
, *
__cosx
))

571 
__söcos_code
;

572 
	}
}

579 #i‡
__GNUC_PREREQ
 (3, 5)

580 
	#__expm1_code
 \

581 
__ãmp
; \

582 
__ãmp
 = 
	`__buûtö_expm1l
 (
__x
); \

583  
__ãmp
 ? __ãm∞: 
__x


	)

585 
	#__expm1_code
 \

586 
__vÆue
; \

587 
__exp⁄ít
; \

588 
__ãmp
; \

589 
__asm
 
__vﬁ©ûe__
 \

598 : "Ò" (
__vÆue
), "=u" (
__exp⁄ít
Ë: "0" (
__x
)); \

599 
__asm
 
__vﬁ©ûe__
 \

601 : "Ò" (
__ãmp
Ë: "0" (1.0), "u" (
__exp⁄ít
)); \

602 
__ãmp
 -= 1.0; \

603 
__ãmp
 +
__vÆue
; \

604  
__ãmp
 ? __ãm∞: 
__x


	)

606 
	$__ölöe_m©hcodeNP_
 (, 
__expm1l
, 
__x
, 
__expm1_code
)

608 #i‡
	`__GNUC_PREREQ
 (3, 4)

609 
	`__ölöe_m©hcodeNP_
 (, 
__ex∂
, 
__x
,  
	$__buûtö_ex∂
 (
__x
))

611 
	#__exp_code
 \

612 
__vÆue
; \

613 
__exp⁄ít
; \

614 
__asm
 
__vﬁ©ûe__
 \

622 : "Ò" (
__vÆue
), "=u" (
__exp⁄ít
Ë: "0" (
__x
)); \

623 
__vÆue
 += 1.0; \

624 
__asm
 
__vﬁ©ûe__
 \

626 : "Ò" (
__vÆue
Ë: "0" (__vÆue), "u" (
__exp⁄ít
)); \

627  
__vÆue


	)

628 
	$__ölöe_m©hcodeNP
 (
exp
, 
__x
, 
__exp_code
)

629 
	$__ölöe_m©hcodeNP_
 (, 
__ex∂
, 
__x
, 
__exp_code
)

633 #i‡!
	`__GNUC_PREREQ
 (3, 5)

634 
	`__ölöe_m©hcodeNP
 (
èn
, 
__x
, \

635 
__vÆue
; \

636 
__vÆue2
 
	`__©åibuã__
 ((
__unu£d__
)); \

637 
__asm
 
__vﬁ©ûe__
 \

639 : "Ò" (
__vÆue2
), "=u" (
__vÆue
Ë: "0" (
__x
)); \

640  
__vÆue
)

645 #i‡
	`__GNUC_PREREQ
 (3, 4)

646 
	`__ölöe_m©hcodeNP2_
 (, 
__©™2l
, 
__y
, 
__x
,

647  
	$__buûtö_©™2l
 (
__y
, 
__x
))

649 
	#__©™2_code
 \

650 
__vÆue
; \

651 
__asm
 
__vﬁ©ûe__
 \

653 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" (
__y
) : "st(1)"); \

654  
__vÆue


	)

655 #ifde‡
__FAST_MATH__


656 
	$__ölöe_m©hcodeNP2
 (
©™2
, 
__y
, 
__x
, 
__©™2_code
)

658 
	$__ölöe_m©hcodeNP2_
 (, 
__©™2l
, 
__y
, 
__x
, 
__©™2_code
)

662 #i‡
deföed
 
__FAST_MATH__
 && !
	`__GNUC_PREREQ
 (3, 5)

663 
	`__ölöe_m©hcodeNP2
 (
fmod
, 
__x
, 
__y
, \

664 
__vÆue
; \

665 
__asm
 
__vﬁ©ûe__
 \

670 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" (
__y
) : "ax", "cc"); \

671  
__vÆue
)

675 #ifde‡
__FAST_MATH__


676 #i‡!
	`__GNUC_PREREQ
 (3,3)

677 
	`__ölöe_m©h›NP
 (
sqπ
, "fsqrt")

678 
	`__ölöe_m©h›NP_
 (, 
__sqπl
, "fsqrt")

679 
	#__libc_sqπl
(
n
Ë
	`__sqπl
 (n)

	)

681 
	#__libc_sqπl
(
n
Ë
	`__buûtö_sqπl
 (n)

	)

685 #i‡
	`__GNUC_PREREQ
 (2, 8)

686 
	`__ölöe_m©hcodeNP_
 (, 
Ábs
, 
__x
,  
	$__buûtö_Ábs
 (
__x
))

687 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


688 
	`__ölöe_m©hcodeNP_
 (, 
Ábsf
, 
__x
,  
	$__buûtö_Ábsf
 (
__x
))

689 
	`__ölöe_m©hcodeNP_
 (, 
Áb¶
, 
__x
,  
	$__buûtö_Áb¶
 (
__x
))

691 
	`__ölöe_m©hcodeNP_
 (, 
__Áb¶
, 
__x
,  
	$__buûtö_Áb¶
 (
__x
))

693 
	`__ölöe_m©h›
 (
Ábs
, "fabs")

694 
	`__ölöe_m©h›_
 (, 
__Áb¶
, "fabs")

697 #ifde‡
__FAST_MATH__


698 #i‡!
	`__GNUC_PREREQ
 (3, 4)

700 
	`__ölöe_m©h›NP
 (
sö
, "fsin")

702 
	`__ölöe_m©h›NP
 (
cos
, "fcos")

704 
	`__ölöe_m©h›_de˛NP
 (
log
, "Êd 2; fxch; fyl2x", "0" (
__x
) : "st(1)")

707 #i‡!
	`__GNUC_PREREQ
 (3, 5)

708 
	`__ölöe_m©h›_de˛NP
 (
log10
, "Êdlg2; fxch; fyl2x", "0" (
__x
) : "st(1)")

710 
	`__ölöe_m©hcodeNP
 (
asö
, 
__x
,  
	`__©™2l
 (__x, 
	`__libc_sqπl
 (1.0 - __x * __x)))

711 
	`__ölöe_m©hcodeNP
 (
acos
, 
__x
,  
	`__©™2l
 (
	`__libc_sqπl
 (1.0 - __x * __x), __x))

714 #i‡!
	`__GNUC_PREREQ
 (3, 4)

715 
	`__ölöe_m©h›_de˛NP
 (
©™
, "Êd1; f∑èn", "0" (
__x
) : "st(1)")

719 
	`__ölöe_m©hcode_
 (, 
__sgn1l
, 
__x
, \

720 
__exãnsi⁄__
 uni⁄ { 
__xld
; 
__xi
[3]; } 
__n
 = \

721 { 
__xld
: 
__x
 
	}
}; \

722 
	g__n
.
	g__xi
[2] = (
__n
.
__xi
[2] & 0x8000) | 0x3fff; \

723 
	g__n
.
	g__xi
[1] = 0x80000000; \

724 
	g__n
.
	g__xi
[0] = 0; \

725  
	g__n
.
	g__xld
)

728 #ifde‡
__FAST_MATH__


730 
__ölöe_m©hcodeNP
 (
söh
, 
__x
, \

731 
__exm1
 = 
__expm1l
 (
__Áb¶
 (
__x
)); \

732  0.5 * (
__exm1
 / (__exm1 + 1.0Ë+ __exm1Ë* 
	$__sgn1l
 (
__x
))

734 
	`__ölöe_m©hcodeNP
 (
cosh
, 
__x
, \

735 
__ex
 = 
	`__ex∂
 (
__x
); \

736  0.5 * (
__ex
 + 1.0 / __ex))

738 
	`__ölöe_m©hcodeNP
 (
ènh
, 
__x
, \

739 
__exm1
 = 
	`__expm1l
 (-
	`__Áb¶
 (
__x
 + __x)); \

740  
__exm1
 / (__exm1 + 2.0Ë* 
	`__sgn1l
 (-
__x
))

743 
	`__ölöe_m©hcodeNP
 (
Êo‹
, 
__x
, \

744 
__vÆue
; \

745 
__ign‹e
; \

746 
__cw
; \

747 
__cwtmp
; \

748 
__asm
 
	`__vﬁ©ûe
 ("fnstcw %3\n\t" \

756 : "Ò" (
__vÆue
), "=&q" (
__ign‹e
), "=m" (
__cwtmp
), \

757 "=m" (
__cw
) \

758 : "0" (
__x
)); \

759  
__vÆue
)

761 
	`__ölöe_m©hcodeNP
 (
˚û
, 
__x
, \

762 
__vÆue
; \

763 
__ign‹e
; \

764 
__cw
; \

765 
__cwtmp
; \

766 
__asm
 
	`__vﬁ©ûe
 ("fnstcw %3\n\t" \

774 : "Ò" (
__vÆue
), "=&q" (
__ign‹e
), "=m" (
__cwtmp
), \

775 "=m" (
__cw
) \

776 : "0" (
__x
)); \

777  
__vÆue
)

779 #ifde‡
__FAST_MATH__


780 
	#__ldexp_code
 \

781 
__vÆue
; \

782 
__asm
 
__vﬁ©ûe__
 \

784 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" ((Ë
__y
)); \

785  
__vÆue


	)

787 
__MATH_INLINE
 

788 
	`__NTH
 (
	$ldexp
 (
__x
, 
__y
))

790 
__ldexp_code
;

791 
	}
}

796 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_MISC


798 #ifde‡
__FAST_MATH__


799 
	$__ölöe_m©hcodeNP
 (
expm1
, 
__x
, 
__expm1_code
)

803 
	#__M_SQRT2
 1.41421356237309504880L

	)

805 #i‡!
	`__GNUC_PREREQ
 (3, 5)

806 
	`__ölöe_m©hcodeNP
 (
log1p
, 
__x
, \

807 
__vÆue
; \

808 i‡(
	`__Áb¶
 (
__x
Ë>1.0 - 0.5 * 
__M_SQRT2
) \

809 
__vÆue
 = 
	`logl
 (1.0 + 
__x
); \

811 
__asm
 
__vﬁ©ûe__
 \

815 : "Ò" (
__vÆue
Ë: "0" (
__x
) : "st(1)"); \

816  
__vÆue
)

821 
	`__ölöe_m©hcodeNP
 (
asöh
, 
__x
, \

822 
__y
 = 
	`__Áb¶
 (
__x
); \

823  (
	`log1∂
 (
__y
 * __y / (
	`__libc_sqπl
 (__y * __y + 1.0) + 1.0) + __y) \

824 * 
	$__sgn1l
 (
__x
)))

826 
	`__ölöe_m©hcodeNP
 (
acosh
, 
__x
, \

827  
	`logl
 (
__x
 + 
	`__libc_sqπl
 (__x - 1.0) * __libc_sqrtl (__x + 1.0)))

829 
	`__ölöe_m©hcodeNP
 (
©™h
, 
__x
, \

830 
__y
 = 
	`__Áb¶
 (
__x
); \

831  -0.5 * 
	`log1∂
 (-(
__y
 + __yË/ (1.0 + __y)Ë* 
	$__sgn1l
 (
__x
))

834 
	`__ölöe_m©hcodeNP2
 (
hypŸ
, 
__x
, 
__y
,

835  
	`__libc_sqπl
 (
__x
 * __x + 
__y
 * __y))

837 #i‡!
	`__GNUC_PREREQ
 (3, 5)

838 
	`__ölöe_m©hcodeNP
(
logb
, 
__x
, \

839 
__vÆue
; \

840 
__junk
; \

841 
__asm
 
__vﬁ©ûe__
 \

843 : "Ò" (
__junk
), "=u" (
__vÆue
Ë: "0" (
__x
)); \

844  
__vÆue
)

850 #ifde‡
__USE_ISOC99


851 #ifde‡
__FAST_MATH__


853 #i‡!
	`__GNUC_PREREQ
 (3, 5)

854 
	`__ölöe_m©h›_de˛NP
 (
log2
, "Êd1; fxch; fyl2x", "0" (
__x
) : "st(1)")

857 
__MATH_INLINE
 

858 
	`__NTH
 (
	$ldexpf
 (
__x
, 
__y
))

860 
__ldexp_code
;

861 
	}
}

863 
__MATH_INLINE
 

864 
__NTH
 (
	$ldex∂
 (
__x
, 
__y
))

866 
__ldexp_code
;

867 
	}
}

869 
__ölöe_m©h›NP
 (
röt
, "frndint")

872 
	#__Ãöt_code
 \

873 
__Ãöåes
; \

874 
__asm__
 
__vﬁ©ûe__
 \

876 : "=m" (
__Ãöåes
Ë: "t" (
__x
) : "st"); \

877  
__Ãöåes


	)

878 
__MATH_INLINE
 

879 
__NTH
 (
	$Ãötf
 (
__x
))

881 
__Ãöt_code
;

882 
	}
}

883 
__MATH_INLINE
 

884 
__NTH
 (
	$Ãöt
 (
__x
))

886 
__Ãöt_code
;

887 
	}
}

888 
__MATH_INLINE
 

889 
__NTH
 (
	$Ãöé
 (
__x
))

891 
__Ãöt_code
;

892 
	}
}

893 #unde‡
__Ãöt_code


895 
	#__Œröt_code
 \

896 
__Œröåes
; \

897 
__asm__
 
__vﬁ©ûe__
 \

899 : "=m" (
__Œröåes
Ë: "t" (
__x
) : "st"); \

900  
__Œröåes


	)

901 
__exãnsi⁄__


902 
__MATH_INLINE
 

903 
__NTH
 (
	$Œrötf
 (
__x
))

905 
__Œröt_code
;

906 
	}
}

907 
__exãnsi⁄__


908 
__MATH_INLINE
 

909 
__NTH
 (
	$Œröt
 (
__x
))

911 
__Œröt_code
;

912 
	}
}

913 
__exãnsi⁄__


914 
__MATH_INLINE
 

915 
__NTH
 (
	$Œröé
 (
__x
))

917 
__Œröt_code
;

918 
	}
}

919 #unde‡
__Œröt_code


924 #ifde‡
__USE_MISC


926 #i‡
deföed
 
__FAST_MATH__
 && !
__GNUC_PREREQ
 (3, 5)

927 
__ölöe_m©hcodeNP2
 (
dªm
, 
__x
, 
__y
, \

928 
__vÆue
; \

929 
__˛obbîed
; \

930 
__asm
 
__vﬁ©ûe__
 \

935 : "Ò" (
__vÆue
), "=&a" (
__˛obbîed
Ë: "0" (
__x
), "u" (
__y
) : "cc"); \

936  
__vÆue
)

941 
__MATH_INLINE
 

942 
__NTH
 (
	$__föôe
 (
__x
))

944  (
__exãnsi⁄__


945 (((((uni⁄ { 
__d
; 
__i
[2]; }Ë{__d: 
__x
}).__i[1]

947 
	}
}

952 #unde‡
__©™2_code


953 #ifde‡
__FAST_MATH__


954 #unde‡
__expm1_code


955 #unde‡
__exp_code


956 #unde‡
__söcos_code


963 #ifde‡
__LIBC_INTERNAL_MATH_INLINES


964 
__ölöe_m©h›
 (
__õì754_sqπ
, "fsqrt")

965 
__ölöe_m©hcode2
 (
__õì754_©™2
, 
__y
, 
__x
,

966 
__vÆue
;

967 
__asm
 
__vﬁ©ûe__
 ("fpatan\n\t"

968 : "Ò" (
__vÆue
)

969 : "0" (
__x
), "u" (
__y
) : "st(1)");

970  
__vÆue
;)

	@/usr/include/bits/mman.h

19 #i‚de‡
_SYS_MMAN_H


27 #ifde‡
__USE_MISC


28 
	#MAP_32BIT
 0x40

	)

32 #ifde‡
__USE_MISC


33 
	#MAP_GROWSDOWN
 0x00100

	)

34 
	#MAP_DENYWRITE
 0x00800

	)

35 
	#MAP_EXECUTABLE
 0x01000

	)

36 
	#MAP_LOCKED
 0x02000

	)

37 
	#MAP_NORESERVE
 0x04000

	)

38 
	#MAP_POPULATE
 0x08000

	)

39 
	#MAP_NONBLOCK
 0x10000

	)

40 
	#MAP_STACK
 0x20000

	)

41 
	#MAP_HUGETLB
 0x40000

	)

45 
	~<bôs/mm™-löux.h
>

	@/usr/include/bits/nan.h

19 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

28 
	#NAN
 (
	`__buûtö_«nf
 (""))

	)

30 #ñi‡
deföed
 
__GNUC__


32 
	#NAN
 \

33 (
__exãnsi⁄__
 \

34 ((uni⁄ { 
__l
 
	`__©åibuã__
 ((
	`__mode__
 (
__SI__
))); 
__d
; }) \

35 { 
__l
: 0x7fc00000UL }).
__d
)

	)

39 
	~<ídün.h
>

41 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


42 
	#__q«n_byãs
 { 0x7f, 0xc0, 0, 0 }

	)

44 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


45 
	#__q«n_byãs
 { 0, 0, 0xc0, 0x7‡}

	)

48 uni⁄ { 
	m__c
[4]; 
	m__d
; } 
__q«n_uni⁄


49 
__©åibuã__
 ((
__unu£d__
)Ë{ 
__q«n_byãs
 };

50 
	#NAN
 (
__q«n_uni⁄
.
__d
)

	)

	@/usr/include/bits/netdb.h

18 #i‚de‡
_NETDB_H


26 
	s√ã¡


28 *
	mn_«me
;

29 **
	mn_Æü£s
;

30 
	mn_addπy≥
;

31 
uöt32_t
 
	mn_√t
;

	@/usr/include/bits/param.h

19 #i‚de‡
_SYS_PARAM_H


23 #i‚de‡
ARG_MAX


24 
	#__undef_ARG_MAX


	)

27 
	~<löux/limôs.h
>

28 
	~<löux/∑øm.h
>

31 #ifde‡
__undef_ARG_MAX


32 #unde‡
ARG_MAX


33 #unde‡
__undef_ARG_MAX


36 
	#MAXSYMLINKS
 20

	)

41 
	#NOFILE
 256

	)

42 
	#NCARGS
 131072

	)

	@/usr/include/bits/poll.h

18 #i‚de‡
_SYS_POLL_H


25 
	#POLLIN
 0x001

	)

26 
	#POLLPRI
 0x002

	)

27 
	#POLLOUT
 0x004

	)

29 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


31 
	#POLLRDNORM
 0x040

	)

32 
	#POLLRDBAND
 0x080

	)

33 
	#POLLWRNORM
 0x100

	)

34 
	#POLLWRBAND
 0x200

	)

37 #ifde‡
__USE_GNU


39 
	#POLLMSG
 0x400

	)

40 
	#POLLREMOVE
 0x1000

	)

41 
	#POLLRDHUP
 0x2000

	)

47 
	#POLLERR
 0x008

	)

48 
	#POLLHUP
 0x010

	)

49 
	#POLLNVAL
 0x020

	)

	@/usr/include/bits/poll2.h

19 #i‚de‡
_SYS_POLL_H


24 
__BEGIN_DECLS


26 
__REDIRECT
 (
__pﬁl_Æüs
, (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

27 
__timeout
), 
pﬁl
);

28 
__pﬁl_chk
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
, 
__timeout
,

29 
__SIZE_TYPE__
 
__fd¶í
);

30 
__REDIRECT
 (
__pﬁl_chk_w¨n
, (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

31 
__timeout
, 
__SIZE_TYPE__
 
__fd¶í
),

32 
__pﬁl_chk
)

33 
__w¨«âr
 ("poll called with fds bufferÅoo small fileÇfdsÉntries");

35 
__f‹tify_fun˘i⁄
 

36 
	$pﬁl
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
, 
__timeout
)

38 i‡(
	`__bos
 (
__fds
Ë!(
__SIZE_TYPE__
) -1)

40 i‡(! 
	`__buûtö_c⁄°™t_p
 (
__nfds
))

41  
	`__pﬁl_chk
 (
__fds
, 
__nfds
, 
__timeout
, 
	`__bos
 (__fds));

42 i‡(
	`__bos
 (
__fds
Ë/  (*__fdsË< 
__nfds
)

43  
	`__pﬁl_chk_w¨n
 (
__fds
, 
__nfds
, 
__timeout
, 
	`__bos
 (__fds));

46  
	`__pﬁl_Æüs
 (
__fds
, 
__nfds
, 
__timeout
);

47 
	}
}

50 #ifde‡
__USE_GNU


51 
__REDIRECT
 (
__µﬁl_Æüs
, (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

52 c⁄° 
time•ec
 *
__timeout
,

53 c⁄° 
__sig£t_t
 *
__ss
), 
µﬁl
);

54 
__µﬁl_chk
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

55 c⁄° 
time•ec
 *
__timeout
,

56 c⁄° 
__sig£t_t
 *
__ss
, 
__SIZE_TYPE__
 
__fd¶í
);

57 
__REDIRECT
 (
__µﬁl_chk_w¨n
, (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
,

58 c⁄° 
time•ec
 *
__timeout
,

59 c⁄° 
__sig£t_t
 *
__ss
,

60 
__SIZE_TYPE__
 
__fd¶í
),

61 
__µﬁl_chk
)

62 
__w¨«âr
 ("ppoll called with fds bufferÅoo small fileÇfdsÉntries");

64 
__f‹tify_fun˘i⁄
 

65 
	$µﬁl
 (
pﬁlfd
 *
__fds
, 
nfds_t
 
__nfds
, c⁄° 
time•ec
 *
__timeout
,

66 c⁄° 
__sig£t_t
 *
__ss
)

68 i‡(
	`__bos
 (
__fds
Ë!(
__SIZE_TYPE__
) -1)

70 i‡(! 
	`__buûtö_c⁄°™t_p
 (
__nfds
))

71  
	`__µﬁl_chk
 (
__fds
, 
__nfds
, 
__timeout
, 
__ss
, 
	`__bos
 (__fds));

72 i‡(
	`__bos
 (
__fds
Ë/  (*__fdsË< 
__nfds
)

73  
	`__µﬁl_chk_w¨n
 (
__fds
, 
__nfds
, 
__timeout
, 
__ss
,

74 
	`__bos
 (
__fds
));

77  
	`__µﬁl_Æüs
 (
__fds
, 
__nfds
, 
__timeout
, 
__ss
);

78 
	}
}

81 
	g__END_DECLS


	@/usr/include/bits/posix1_lim.h

24 #i‚def 
_BITS_POSIX1_LIM_H


25 
	#_BITS_POSIX1_LIM_H
 1

	)

31 
	#_POSIX_AIO_LISTIO_MAX
 2

	)

34 
	#_POSIX_AIO_MAX
 1

	)

37 
	#_POSIX_ARG_MAX
 4096

	)

40 #ifde‡
__USE_XOPEN2K


41 
	#_POSIX_CHILD_MAX
 25

	)

43 
	#_POSIX_CHILD_MAX
 6

	)

47 
	#_POSIX_DELAYTIMER_MAX
 32

	)

51 
	#_POSIX_HOST_NAME_MAX
 255

	)

54 
	#_POSIX_LINK_MAX
 8

	)

57 
	#_POSIX_LOGIN_NAME_MAX
 9

	)

60 
	#_POSIX_MAX_CANON
 255

	)

64 
	#_POSIX_MAX_INPUT
 255

	)

67 
	#_POSIX_MQ_OPEN_MAX
 8

	)

70 
	#_POSIX_MQ_PRIO_MAX
 32

	)

73 
	#_POSIX_NAME_MAX
 14

	)

76 #ifde‡
__USE_XOPEN2K


77 
	#_POSIX_NGROUPS_MAX
 8

	)

79 
	#_POSIX_NGROUPS_MAX
 0

	)

83 #ifde‡
__USE_XOPEN2K


84 
	#_POSIX_OPEN_MAX
 20

	)

86 
	#_POSIX_OPEN_MAX
 16

	)

89 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


92 
	#_POSIX_FD_SETSIZE
 
_POSIX_OPEN_MAX


	)

96 
	#_POSIX_PATH_MAX
 256

	)

99 
	#_POSIX_PIPE_BUF
 512

	)

103 
	#_POSIX_RE_DUP_MAX
 255

	)

106 
	#_POSIX_RTSIG_MAX
 8

	)

109 
	#_POSIX_SEM_NSEMS_MAX
 256

	)

112 
	#_POSIX_SEM_VALUE_MAX
 32767

	)

115 
	#_POSIX_SIGQUEUE_MAX
 32

	)

118 
	#_POSIX_SSIZE_MAX
 32767

	)

121 
	#_POSIX_STREAM_MAX
 8

	)

124 
	#_POSIX_SYMLINK_MAX
 255

	)

128 
	#_POSIX_SYMLOOP_MAX
 8

	)

131 
	#_POSIX_TIMER_MAX
 32

	)

134 
	#_POSIX_TTY_NAME_MAX
 9

	)

137 #ifde‡
__USE_XOPEN2K


138 
	#_POSIX_TZNAME_MAX
 6

	)

140 
	#_POSIX_TZNAME_MAX
 3

	)

143 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


145 
	#_POSIX_QLIMIT
 1

	)

149 
	#_POSIX_HIWAT
 
_POSIX_PIPE_BUF


	)

152 
	#_POSIX_UIO_MAXIOV
 16

	)

156 
	#_POSIX_CLOCKRES_MIN
 20000000

	)

160 
	~<bôs/loˇl_lim.h
>

163 #i‚def 
SSIZE_MAX


164 
	#SSIZE_MAX
 
LONG_MAX


	)

171 #i‚def 
NGROUPS_MAX


172 
	#NGROUPS_MAX
 8

	)

	@/usr/include/bits/posix2_lim.h

22 #i‚def 
_BITS_POSIX2_LIM_H


23 
	#_BITS_POSIX2_LIM_H
 1

	)

27 
	#_POSIX2_BC_BASE_MAX
 99

	)

30 
	#_POSIX2_BC_DIM_MAX
 2048

	)

33 
	#_POSIX2_BC_SCALE_MAX
 99

	)

36 
	#_POSIX2_BC_STRING_MAX
 1000

	)

40 
	#_POSIX2_COLL_WEIGHTS_MAX
 2

	)

44 
	#_POSIX2_EXPR_NEST_MAX
 32

	)

47 
	#_POSIX2_LINE_MAX
 2048

	)

51 
	#_POSIX2_RE_DUP_MAX
 255

	)

55 
	#_POSIX2_CHARCLASS_NAME_MAX
 14

	)

62 #i‚def 
BC_BASE_MAX


63 
	#BC_BASE_MAX
 
_POSIX2_BC_BASE_MAX


	)

65 #i‚def 
BC_DIM_MAX


66 
	#BC_DIM_MAX
 
_POSIX2_BC_DIM_MAX


	)

68 #i‚def 
BC_SCALE_MAX


69 
	#BC_SCALE_MAX
 
_POSIX2_BC_SCALE_MAX


	)

71 #i‚def 
BC_STRING_MAX


72 
	#BC_STRING_MAX
 
_POSIX2_BC_STRING_MAX


	)

74 #i‚def 
COLL_WEIGHTS_MAX


75 
	#COLL_WEIGHTS_MAX
 255

	)

77 #i‚def 
EXPR_NEST_MAX


78 
	#EXPR_NEST_MAX
 
_POSIX2_EXPR_NEST_MAX


	)

80 #i‚def 
LINE_MAX


81 
	#LINE_MAX
 
_POSIX2_LINE_MAX


	)

83 #i‚def 
CHARCLASS_NAME_MAX


84 
	#CHARCLASS_NAME_MAX
 2048

	)

88 
	#RE_DUP_MAX
 (0x7fff)

	)

	@/usr/include/bits/posix_opt.h

19 #i‚def 
_BITS_POSIX_OPT_H


20 
	#_BITS_POSIX_OPT_H
 1

	)

23 
	#_POSIX_JOB_CONTROL
 1

	)

26 
	#_POSIX_SAVED_IDS
 1

	)

29 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

32 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

35 
	#_POSIX_FSYNC
 200809L

	)

38 
	#_POSIX_MAPPED_FILES
 200809L

	)

41 
	#_POSIX_MEMLOCK
 200809L

	)

44 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

47 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

50 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

54 
	#_POSIX_VDISABLE
 '\0'

	)

57 
	#_POSIX_NO_TRUNC
 1

	)

60 
	#_XOPEN_REALTIME
 1

	)

63 
	#_XOPEN_REALTIME_THREADS
 1

	)

66 
	#_XOPEN_SHM
 1

	)

69 
	#_POSIX_THREADS
 200809L

	)

72 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

73 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

76 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

79 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

82 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

85 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

89 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

91 #ifde‡
__USE_XOPEN2K8


93 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

96 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

100 
	#_POSIX_SEMAPHORES
 200809L

	)

103 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

106 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

107 
	#_POSIX_ASYNC_IO
 1

	)

109 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

111 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

114 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

117 
	#_LFS_LARGEFILE
 1

	)

118 
	#_LFS64_LARGEFILE
 1

	)

119 
	#_LFS64_STDIO
 1

	)

122 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

125 
	#_POSIX_CPUTIME
 0

	)

128 
	#_POSIX_THREAD_CPUTIME
 0

	)

131 
	#_POSIX_REGEXP
 1

	)

134 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

137 
	#_POSIX_SHELL
 1

	)

140 
	#_POSIX_TIMEOUTS
 200809L

	)

143 
	#_POSIX_SPIN_LOCKS
 200809L

	)

146 
	#_POSIX_SPAWN
 200809L

	)

149 
	#_POSIX_TIMERS
 200809L

	)

152 
	#_POSIX_BARRIERS
 200809L

	)

155 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

158 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

161 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

164 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

167 
	#_POSIX_ADVISORY_INFO
 200809L

	)

170 
	#_POSIX_IPV6
 200809L

	)

173 
	#_POSIX_RAW_SOCKETS
 200809L

	)

176 
	#_POSIX2_CHAR_TERM
 200809L

	)

179 
	#_POSIX_SPORADIC_SERVER
 -1

	)

180 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

183 
	#_POSIX_TRACE
 -1

	)

184 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

185 
	#_POSIX_TRACE_INHERIT
 -1

	)

186 
	#_POSIX_TRACE_LOG
 -1

	)

189 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

	@/usr/include/bits/pthreadtypes.h

18 #i‚de‡
_BITS_PTHREADTYPES_H


19 
	#_BITS_PTHREADTYPES_H
 1

	)

21 
	~<bôs/w‹dsize.h
>

23 #ifde‡
__x86_64__


24 #i‡
__WORDSIZE
 == 64

25 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

26 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

27 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

28 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

29 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

30 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

31 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

32 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

33 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

35 
	#__SIZEOF_PTHREAD_ATTR_T
 32

	)

36 
	#__SIZEOF_PTHREAD_MUTEX_T
 32

	)

37 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

38 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

39 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

40 
	#__SIZEOF_PTHREAD_RWLOCK_T
 44

	)

41 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

42 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

43 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

46 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

47 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

48 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

49 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

50 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

51 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

52 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

53 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

54 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

60 
	t±hªad_t
;

63 
	u±hªad_©å_t


65 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

66 
	m__Æign
;

68 #i‚de‡
__have_±hªad_©å_t


69 
±hªad_©å_t
 
	t±hªad_©å_t
;

70 
	#__have_±hªad_©å_t
 1

	)

74 #ifde‡
__x86_64__


75 
	s__±hªad_öã∫Æ_li°


77 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

78 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

79 } 
	t__±hªad_li°_t
;

81 
	s__±hªad_öã∫Æ_¶i°


83 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

84 } 
	t__±hªad_¶i°_t
;

92 
	s__±hªad_muãx_s


94 
	m__lock
;

95 
	m__cou¡
;

96 
	m__ow√r
;

97 #ifde‡
__x86_64__


98 
	m__nu£rs
;

102 
	m__köd
;

103 #ifde‡
__x86_64__


104 
	m__•ös
;

105 
	m__ñisi⁄
;

106 
__±hªad_li°_t
 
	m__li°
;

107 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

108 
	#__PTHREAD_MUTEX_HAVE_ELISION
 1

	)

110 
	m__nu£rs
;

111 
__exãnsi⁄__
 union

115 
	m__e•ös
;

116 
	m__ñisi⁄
;

117 
	#__•ös
 
d
.
__e•ös


	)

118 
	#__ñisi⁄
 
d
.
__ñisi⁄


	)

119 
	#__PTHREAD_MUTEX_HAVE_ELISION
 2

	)

120 } 
	md
;

121 
__±hªad_¶i°_t
 
	m__li°
;

124 } 
	m__d©a
;

125 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

126 
	m__Æign
;

127 } 
	t±hªad_muãx_t
;

131 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

132 
	m__Æign
;

133 } 
	t±hªad_muãx©å_t
;

142 
	m__lock
;

143 
	m__fuãx
;

144 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

145 
__exãnsi⁄__
 
	m__wakeup_£q
;

146 
__exãnsi⁄__
 
	m__wokí_£q
;

147 *
	m__muãx
;

148 
	m__nwaôîs
;

149 
	m__brﬂdˇ°_£q
;

150 } 
	m__d©a
;

151 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

152 
__exãnsi⁄__
 
	m__Æign
;

153 } 
	t±hªad_c⁄d_t
;

157 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

158 
	m__Æign
;

159 } 
	t±hªad_c⁄d©å_t
;

163 
	t±hªad_key_t
;

167 
	t±hªad_⁄˚_t
;

170 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


175 #ifde‡
__x86_64__


178 
	m__lock
;

179 
	m__ƒ_ªadîs
;

180 
	m__ªadîs_wakeup
;

181 
	m__wrôî_wakeup
;

182 
	m__ƒ_ªadîs_queued
;

183 
	m__ƒ_wrôîs_queued
;

184 
	m__wrôî
;

185 
	m__sh¨ed
;

186 
	m__∑d1
;

187 
	m__∑d2
;

190 
	m__Êags
;

191 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

192 } 
	m__d©a
;

196 
	m__lock
;

197 
	m__ƒ_ªadîs
;

198 
	m__ªadîs_wakeup
;

199 
	m__wrôî_wakeup
;

200 
	m__ƒ_ªadîs_queued
;

201 
	m__ƒ_wrôîs_queued
;

204 
	m__Êags
;

205 
	m__sh¨ed
;

206 
	m__∑d1
;

207 
	m__∑d2
;

208 
	m__wrôî
;

209 } 
	m__d©a
;

211 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

212 
	m__Æign
;

213 } 
	t±hªad_rwlock_t
;

217 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

218 
	m__Æign
;

219 } 
	t±hªad_rwlock©å_t
;

223 #ifde‡
__USE_XOPEN2K


225 vﬁ©ûê
	t±hªad_•ölock_t
;

232 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

233 
	m__Æign
;

234 } 
	t±hªad_b¨rõr_t
;

238 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

239 
	m__Æign
;

240 } 
	t±hªad_b¨rõøâr_t
;

244 #i‚de‡
__x86_64__


246 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/resource.h

19 #i‚de‡
_SYS_RESOURCE_H


23 
	~<bôs/ty≥s.h
>

31 
	e__æimô_ªsour˚


34 
	mRLIMIT_CPU
 = 0,

35 
	#RLIMIT_CPU
 
RLIMIT_CPU


	)

38 
	mRLIMIT_FSIZE
 = 1,

39 
	#RLIMIT_FSIZE
 
RLIMIT_FSIZE


	)

42 
	mRLIMIT_DATA
 = 2,

43 
	#RLIMIT_DATA
 
RLIMIT_DATA


	)

46 
	mRLIMIT_STACK
 = 3,

47 
	#RLIMIT_STACK
 
RLIMIT_STACK


	)

50 
	mRLIMIT_CORE
 = 4,

51 
	#RLIMIT_CORE
 
RLIMIT_CORE


	)

57 
	m__RLIMIT_RSS
 = 5,

58 
	#RLIMIT_RSS
 
__RLIMIT_RSS


	)

61 
	mRLIMIT_NOFILE
 = 7,

62 
	m__RLIMIT_OFILE
 = 
RLIMIT_NOFILE
,

63 
	#RLIMIT_NOFILE
 
RLIMIT_NOFILE


	)

64 
	#RLIMIT_OFILE
 
__RLIMIT_OFILE


	)

67 
	mRLIMIT_AS
 = 9,

68 
	#RLIMIT_AS
 
RLIMIT_AS


	)

71 
	m__RLIMIT_NPROC
 = 6,

72 
	#RLIMIT_NPROC
 
__RLIMIT_NPROC


	)

75 
	m__RLIMIT_MEMLOCK
 = 8,

76 
	#RLIMIT_MEMLOCK
 
__RLIMIT_MEMLOCK


	)

79 
	m__RLIMIT_LOCKS
 = 10,

80 
	#RLIMIT_LOCKS
 
__RLIMIT_LOCKS


	)

83 
	m__RLIMIT_SIGPENDING
 = 11,

84 
	#RLIMIT_SIGPENDING
 
__RLIMIT_SIGPENDING


	)

87 
	m__RLIMIT_MSGQUEUE
 = 12,

88 
	#RLIMIT_MSGQUEUE
 
__RLIMIT_MSGQUEUE


	)

93 
	m__RLIMIT_NICE
 = 13,

94 
	#RLIMIT_NICE
 
__RLIMIT_NICE


	)

98 
	m__RLIMIT_RTPRIO
 = 14,

99 
	#RLIMIT_RTPRIO
 
__RLIMIT_RTPRIO


	)

104 
	m__RLIMIT_RTTIME
 = 15,

105 
	#RLIMIT_RTTIME
 
__RLIMIT_RTTIME


	)

107 
	m__RLIMIT_NLIMITS
 = 16,

108 
	m__RLIM_NLIMITS
 = 
__RLIMIT_NLIMITS


109 
	#RLIMIT_NLIMITS
 
__RLIMIT_NLIMITS


	)

110 
	#RLIM_NLIMITS
 
__RLIM_NLIMITS


	)

114 #i‚de‡
__USE_FILE_OFFSET64


115 
	#RLIM_INFINITY
 ((
__æim_t
Ë-1)

	)

117 
	#RLIM_INFINITY
 0xffffffffffffffffuLL

	)

120 #ifde‡
__USE_LARGEFILE64


121 
	#RLIM64_INFINITY
 0xffffffffffffffffuLL

	)

125 
	#RLIM_SAVED_MAX
 
RLIM_INFINITY


	)

126 
	#RLIM_SAVED_CUR
 
RLIM_INFINITY


	)

130 #i‚de‡
__USE_FILE_OFFSET64


131 
__æim_t
 
	tæim_t
;

133 
__æim64_t
 
	tæim_t
;

135 #ifde‡
__USE_LARGEFILE64


136 
__æim64_t
 
	tæim64_t
;

139 
	sæimô


142 
æim_t
 
	mæim_cur
;

144 
æim_t
 
	mæim_max
;

147 #ifde‡
__USE_LARGEFILE64


148 
	sæimô64


151 
æim64_t
 
	mæim_cur
;

153 
æim64_t
 
	mæim_max
;

158 
	e__rußge_who


161 
	mRUSAGE_SELF
 = 0,

162 
	#RUSAGE_SELF
 
RUSAGE_SELF


	)

165 
	mRUSAGE_CHILDREN
 = -1

166 
	#RUSAGE_CHILDREN
 
RUSAGE_CHILDREN


	)

168 #ifde‡
__USE_GNU


171 
	mRUSAGE_THREAD
 = 1

172 
	#RUSAGE_THREAD
 
RUSAGE_THREAD


	)

174 
	#RUSAGE_LWP
 
RUSAGE_THREAD


	)

178 
	#__√ed_timevÆ


	)

179 
	~<bôs/time.h
>

187 
	srußge


190 
timevÆ
 
	mru_utime
;

192 
timevÆ
 
	mru_°ime
;

194 
__exãnsi⁄__
 union

196 
	mru_maxrss
;

197 
__sysˇŒ_¶⁄g_t
 
	m__ru_maxrss_w‹d
;

202 
__exãnsi⁄__
 union

204 
	mru_ixrss
;

205 
__sysˇŒ_¶⁄g_t
 
	m__ru_ixrss_w‹d
;

208 
__exãnsi⁄__
 union

210 
	mru_idrss
;

211 
__sysˇŒ_¶⁄g_t
 
	m__ru_idrss_w‹d
;

214 
__exãnsi⁄__
 union

216 
	mru_i§ss
;

217 
__sysˇŒ_¶⁄g_t
 
	m__ru_i§ss_w‹d
;

221 
__exãnsi⁄__
 union

223 
	mru_möÊt
;

224 
__sysˇŒ_¶⁄g_t
 
	m__ru_möÊt_w‹d
;

227 
__exãnsi⁄__
 union

229 
	mru_majÊt
;

230 
__sysˇŒ_¶⁄g_t
 
	m__ru_majÊt_w‹d
;

233 
__exãnsi⁄__
 union

235 
	mru_nsw≠
;

236 
__sysˇŒ_¶⁄g_t
 
	m__ru_nsw≠_w‹d
;

240 
__exãnsi⁄__
 union

242 
	mru_öblock
;

243 
__sysˇŒ_¶⁄g_t
 
	m__ru_öblock_w‹d
;

246 
__exãnsi⁄__
 union

248 
	mru_oublock
;

249 
__sysˇŒ_¶⁄g_t
 
	m__ru_oublock_w‹d
;

252 
__exãnsi⁄__
 union

254 
	mru_msg¢d
;

255 
__sysˇŒ_¶⁄g_t
 
	m__ru_msg¢d_w‹d
;

258 
__exãnsi⁄__
 union

260 
	mru_msgrcv
;

261 
__sysˇŒ_¶⁄g_t
 
	m__ru_msgrcv_w‹d
;

264 
__exãnsi⁄__
 union

266 
	mru_nsig«ls
;

267 
__sysˇŒ_¶⁄g_t
 
	m__ru_nsig«ls_w‹d
;

272 
__exãnsi⁄__
 union

274 
	mru_nvcsw
;

275 
__sysˇŒ_¶⁄g_t
 
	m__ru_nvcsw_w‹d
;

279 
__exãnsi⁄__
 union

281 
	mru_nivcsw
;

282 
__sysˇŒ_¶⁄g_t
 
	m__ru_nivcsw_w‹d
;

287 
	#PRIO_MIN
 -20

	)

288 
	#PRIO_MAX
 20

	)

292 
	e__¥i‹ôy_which


294 
	mPRIO_PROCESS
 = 0,

295 
	#PRIO_PROCESS
 
PRIO_PROCESS


	)

296 
	mPRIO_PGRP
 = 1,

297 
	#PRIO_PGRP
 
PRIO_PGRP


	)

298 
	mPRIO_USER
 = 2

299 
	#PRIO_USER
 
PRIO_USER


	)

303 
	g__BEGIN_DECLS


305 #ifde‡
__USE_GNU


307 #i‚de‡
__USE_FILE_OFFSET64


308 
	$¥limô
 (
__pid_t
 
__pid
, 
__æimô_ªsour˚
 
__ªsour˚
,

309 c⁄° 
æimô
 *
__√w_limô
,

310 
æimô
 *
__ﬁd_limô
Ë
__THROW
;

312 #ifde‡
__REDIRECT_NTH


313 
	`__REDIRECT_NTH
 (
¥limô
, (
__pid_t
 
__pid
,

314 
__æimô_ªsour˚
 
__ªsour˚
,

315 c⁄° 
æimô
 *
__√w_limô
,

316 
æimô
 *
__ﬁd_limô
), 
¥limô64
);

318 
	#¥limô
 
¥limô64


	)

321 #ifde‡
__USE_LARGEFILE64


322 
	$¥limô64
 (
__pid_t
 
__pid
, 
__æimô_ªsour˚
 
__ªsour˚
,

323 c⁄° 
æimô64
 *
__√w_limô
,

324 
æimô64
 *
__ﬁd_limô
Ë
__THROW
;

328 
__END_DECLS


	@/usr/include/bits/sched.h

20 #i‚de‡
__√ed_sched∑øm


22 #i‚de‡
_SCHED_H


28 
	#SCHED_OTHER
 0

	)

29 
	#SCHED_FIFO
 1

	)

30 
	#SCHED_RR
 2

	)

31 #ifde‡
__USE_GNU


32 
	#SCHED_BATCH
 3

	)

33 
	#SCHED_IDLE
 5

	)

35 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

38 #ifde‡
__USE_GNU


40 
	#CSIGNAL
 0x000000f‡

	)

41 
	#CLONE_VM
 0x00000100

	)

42 
	#CLONE_FS
 0x00000200

	)

43 
	#CLONE_FILES
 0x00000400

	)

44 
	#CLONE_SIGHAND
 0x00000800

	)

45 
	#CLONE_PTRACE
 0x00002000

	)

46 
	#CLONE_VFORK
 0x00004000

	)

48 
	#CLONE_PARENT
 0x00008000

	)

50 
	#CLONE_THREAD
 0x00010000

	)

51 
	#CLONE_NEWNS
 0x00020000

	)

52 
	#CLONE_SYSVSEM
 0x00040000

	)

53 
	#CLONE_SETTLS
 0x00080000

	)

54 
	#CLONE_PARENT_SETTID
 0x00100000

	)

56 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

58 
	#CLONE_DETACHED
 0x00400000

	)

59 
	#CLONE_UNTRACED
 0x00800000

	)

61 
	#CLONE_CHILD_SETTID
 0x01000000

	)

63 
	#CLONE_NEWUTS
 0x04000000

	)

64 
	#CLONE_NEWIPC
 0x08000000

	)

65 
	#CLONE_NEWUSER
 0x10000000

	)

66 
	#CLONE_NEWPID
 0x20000000

	)

67 
	#CLONE_NEWNET
 0x40000000

	)

68 
	#CLONE_IO
 0x80000000

	)

72 
	ssched_∑øm


74 
	m__sched_¥i‹ôy
;

77 
	g__BEGIN_DECLS


79 #ifde‡
__USE_GNU


81 
˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

82 
__Êags
, *
__¨g
, ...Ë
__THROW
;

85 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

88 
	$sched_gë˝u
 (Ë
__THROW
;

91 
	$£äs
 (
__fd
, 
__n°y≥
Ë
__THROW
;

95 
__END_DECLS


99 #i‡!
deföed
 
__deföed_sched∑øm
 \

100 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

101 
	#__deföed_sched∑øm
 1

	)

103 
	s__sched_∑øm


105 
__sched_¥i‹ôy
;

107 #unde‡
__√ed_sched∑øm


111 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


112 
	#__˝u_£t_t_deföed


	)

114 
	#__CPU_SETSIZE
 4096

	)

115 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

118 
	t__˝u_mask
;

121 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

122 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

127 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

128 } 
	t˝u_£t_t
;

131 #i‡
	`__GNUC_PREREQ
 (2, 91)

132 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

133 dÿ
	`__buûtö_mem£t
 (
˝u£ç
, '\0', 
£tsize
); 0)

	)

135 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

137 
size_t
 
__i
; \

138 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

139 
__˝u_mask
 *
__bôs
 = (
˝u£ç
)->__bits; \

140 
__i
 = 0; __ò< 
__imax
; ++__i) \

141 
__bôs
[
__i
] = 0; \

142 
	}
} 0)

	)

144 
	#__CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

145 (
__exãnsi⁄__
 \

146 ({ 
size_t
 
__˝u
 = (
˝u
); \

147 
__˝u
 / 8 < (
£tsize
) \

148 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

149 |
	`__CPUMASK
 (
__˝u
)) \

150 : 0; }))

	)

151 
	#__CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

152 (
__exãnsi⁄__
 \

153 ({ 
size_t
 
__˝u
 = (
˝u
); \

154 
__˝u
 / 8 < (
£tsize
) \

155 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

156 &~
	`__CPUMASK
 (
__˝u
)) \

157 : 0; }))

	)

158 
	#__CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

159 (
__exãnsi⁄__
 \

160 ({ 
size_t
 
__˝u
 = (
˝u
); \

161 
__˝u
 / 8 < (
£tsize
) \

162 ? ((((c⁄° 
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

163 & 
	`__CPUMASK
 (
__˝u
))) != 0 \

164 : 0; }))

	)

166 
	#__CPU_COUNT_S
(
£tsize
, 
˝u£ç
) \

167 
	`__sched_˝ucou¡
 (
£tsize
, 
˝u£ç
)

	)

169 #i‡
__GNUC_PREREQ
 (2, 91)

170 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

171 (
	`__buûtö_memcmp
 (
˝u£ç1
, 
˝u£ç2
, 
£tsize
Ë=0)

	)

173 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

174 (
__exãnsi⁄__
 \

175 ({ c⁄° 
__˝u_mask
 *
__¨r1
 = (
˝u£ç1
)->
__bôs
; \

176 c⁄° 
__˝u_mask
 *
__¨r2
 = (
˝u£ç2
)->
__bôs
; \

177 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

178 
size_t
 
__i
; \

179 
__i
 = 0; __ò< 
__imax
; ++__i) \

180 i‡(
__¨r1
[
__i
] !
__¨r2
[__i]) \

182 
__i
 =
__imax
; }))

	)

185 
	#__CPU_OP_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, 
›
) \

186 (
__exãnsi⁄__
 \

187 ({ 
˝u_£t_t
 *
__de°
 = (
de°£t
); \

188 c⁄° 
__˝u_mask
 *
__¨r1
 = (
§c£t1
)->
__bôs
; \

189 c⁄° 
__˝u_mask
 *
__¨r2
 = (
§c£t2
)->
__bôs
; \

190 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

191 
size_t
 
__i
; \

192 
__i
 = 0; __ò< 
__imax
; ++__i) \

193 ((
__˝u_mask
 *Ë
__de°
->
__bôs
)[
__i
] = 
__¨r1
[__i] 
›
 
__¨r2
[__i]; \

194 
__de°
; }))

	)

196 
	#__CPU_ALLOC_SIZE
(
cou¡
) \

197 ((((
cou¡
Ë+ 
__NCPUBITS
 - 1Ë/ __NCPUBITSË*  (
__˝u_mask
))

	)

198 
	#__CPU_ALLOC
(
cou¡
Ë
	`__sched_˝uÆloc
 (cou¡)

	)

199 
	#__CPU_FREE
(
˝u£t
Ë
	`__sched_˝u‰ì
 (˝u£t)

	)

201 
__BEGIN_DECLS


203 
	$__sched_˝ucou¡
 (
size_t
 
__£tsize
, c⁄° 
˝u_£t_t
 *
__£ç
)

204 
__THROW
;

205 
˝u_£t_t
 *
	$__sched_˝uÆloc
 (
size_t
 
__cou¡
Ë
__THROW
 
__wur
;

206 
	$__sched_˝u‰ì
 (
˝u_£t_t
 *
__£t
Ë
__THROW
;

208 
__END_DECLS


	@/usr/include/bits/semaphore.h

19 #i‚de‡
_SEMAPHORE_H


23 
	~<bôs/w‹dsize.h
>

25 #i‡
__WORDSIZE
 == 64

26 
	#__SIZEOF_SEM_T
 32

	)

28 
	#__SIZEOF_SEM_T
 16

	)

33 
	#SEM_FAILED
 ((
£m_t
 *Ë0)

	)

38 
	m__size
[
__SIZEOF_SEM_T
];

39 
	m__Æign
;

40 } 
	t£m_t
;

	@/usr/include/bits/setjmp.h

19 #i‚de‡
_BITS_SETJMP_H


20 
	#_BITS_SETJMP_H
 1

	)

22 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


26 
	~<bôs/w‹dsize.h
>

28 #i‚de‡
_ASM


30 #i‡
__WORDSIZE
 == 64

31 
	t__jmp_buf
[8];

32 #ñi‡
deföed
 
__x86_64__


33 
__exãnsi⁄__
 
	t__jmp_buf
[8];

35 
	t__jmp_buf
[6];

	@/usr/include/bits/setjmp2.h

19 #i‚de‡
_SETJMP_H


24 #ifde‡
__REDIRECT_NTH


25 
__REDIRECT_NTHNL
 (
l⁄gjmp
,

26 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
),

27 
__l⁄gjmp_chk
Ë
__©åibuã__
 ((
__n‹ëu∫__
));

28 
__REDIRECT_NTHNL
 (
_l⁄gjmp
,

29 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
),

30 
__l⁄gjmp_chk
Ë
__©åibuã__
 ((
__n‹ëu∫__
));

31 
__REDIRECT_NTHNL
 (
sigl⁄gjmp
,

32 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
),

33 
__l⁄gjmp_chk
Ë
__©åibuã__
 ((
__n‹ëu∫__
));

35 
__l⁄gjmp_chk
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
),

36 
__THROWNL
 
__©åibuã__
 ((
__n‹ëu∫__
));

37 
	#l⁄gjmp
 
__l⁄gjmp_chk


	)

38 
	#_l⁄gjmp
 
__l⁄gjmp_chk


	)

39 
	#sigl⁄gjmp
 
__l⁄gjmp_chk


	)

	@/usr/include/bits/shm.h

18 #i‚de‡
_SYS_SHM_H


22 
	~<bôs/ty≥s.h
>

25 
	#SHM_R
 0400

	)

26 
	#SHM_W
 0200

	)

29 
	#SHM_RDONLY
 010000

	)

30 
	#SHM_RND
 020000

	)

31 
	#SHM_REMAP
 040000

	)

32 
	#SHM_EXEC
 0100000

	)

35 
	#SHM_LOCK
 11

	)

36 
	#SHM_UNLOCK
 12

	)

38 
	g__BEGIN_DECLS


41 
	#SHMLBA
 (
	`__gë∑gesize
 ())

	)

42 
	$__gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

46 
__sysˇŒ_ul⁄g_t
 
	tshm©t_t
;

49 
	sshmid_ds


51 
ùc_≥rm
 
shm_≥rm
;

52 
size_t
 
shm_£gsz
;

53 
__time_t
 
shm_©ime
;

54 #i‚de‡
__x86_64__


55 
__unu£d1
;

57 
__time_t
 
shm_dtime
;

58 #i‚de‡
__x86_64__


59 
__unu£d2
;

61 
__time_t
 
shm_˘ime
;

62 #i‚de‡
__x86_64__


63 
__unu£d3
;

65 
__pid_t
 
shm_˝id
;

66 
__pid_t
 
shm_Õid
;

67 
shm©t_t
 
shm_«âch
;

68 
__sysˇŒ_ul⁄g_t
 
__unu£d4
;

69 
__sysˇŒ_ul⁄g_t
 
__unu£d5
;

72 #ifde‡
__USE_MISC


75 
	#SHM_STAT
 13

	)

76 
	#SHM_INFO
 14

	)

79 
	#SHM_DEST
 01000

	)

80 
	#SHM_LOCKED
 02000

	)

81 
	#SHM_HUGETLB
 04000

	)

82 
	#SHM_NORESERVE
 010000

	)

84 
	sshmöfo


86 
__sysˇŒ_ul⁄g_t
 
shmmax
;

87 
__sysˇŒ_ul⁄g_t
 
shmmö
;

88 
__sysˇŒ_ul⁄g_t
 
shmmni
;

89 
__sysˇŒ_ul⁄g_t
 
shm£g
;

90 
__sysˇŒ_ul⁄g_t
 
shmÆl
;

91 
__sysˇŒ_ul⁄g_t
 
__unu£d1
;

92 
__sysˇŒ_ul⁄g_t
 
__unu£d2
;

93 
__sysˇŒ_ul⁄g_t
 
__unu£d3
;

94 
__sysˇŒ_ul⁄g_t
 
__unu£d4
;

97 
	sshm_öfo


99 
u£d_ids
;

100 
__sysˇŒ_ul⁄g_t
 
shm_tŸ
;

101 
__sysˇŒ_ul⁄g_t
 
shm_rss
;

102 
__sysˇŒ_ul⁄g_t
 
shm_swp
;

103 
__sysˇŒ_ul⁄g_t
 
sw≠_©ãm±s
;

104 
__sysˇŒ_ul⁄g_t
 
sw≠_suc˚s£s
;

109 
__END_DECLS


	@/usr/include/bits/sigaction.h

19 #i‚de‡
_SIGNAL_H


24 
	ssiga˘i⁄


27 #ifde‡
__USE_POSIX199309


31 
__sigh™dÀr_t
 
	mß_h™dÀr
;

33 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

35 
	m__siga˘i⁄_h™dÀr
;

36 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

37 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

39 
__sigh™dÀr_t
 
	mß_h™dÀr
;

43 
__sig£t_t
 
	mß_mask
;

46 
	mß_Êags
;

49 (*
	mß_ª°‹î
) ();

53 
	#SA_NOCLDSTOP
 1

	)

54 
	#SA_NOCLDWAIT
 2

	)

55 
	#SA_SIGINFO
 4

	)

57 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC


58 
	#SA_ONSTACK
 0x08000000

	)

60 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


61 
	#SA_RESTART
 0x10000000

	)

62 
	#SA_NODEFER
 0x40000000

	)

64 
	#SA_RESETHAND
 0x80000000

	)

66 #ifde‡
__USE_MISC


67 
	#SA_INTERRUPT
 0x20000000

	)

70 
	#SA_NOMASK
 
SA_NODEFER


	)

71 
	#SA_ONESHOT
 
SA_RESETHAND


	)

72 
	#SA_STACK
 
SA_ONSTACK


	)

76 
	#SIG_BLOCK
 0

	)

77 
	#SIG_UNBLOCK
 1

	)

78 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

18 #i‚de‡
_BITS_SIGCONTEXT_H


19 
	#_BITS_SIGCONTEXT_H
 1

	)

21 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


25 
	#FP_XSTATE_MAGIC1
 0x46505853U

	)

26 
	#FP_XSTATE_MAGIC2
 0x46505845U

	)

27 
	#FP_XSTATE_MAGIC2_SIZE
 (
FP_XSTATE_MAGIC2
)

	)

29 
	s_Âx_sw_byãs


31 
__uöt32_t
 
	mmagic1
;

32 
__uöt32_t
 
	mexãnded_size
;

33 
__uöt64_t
 
	mx°©e_bv
;

34 
__uöt32_t
 
	mx°©e_size
;

35 
__uöt32_t
 
	m∑ddög
[7];

38 
	s_Âªg


40 
	msignifiˇnd
[4];

41 
	mexp⁄ít
;

44 
	s_Âxªg


46 
	msignifiˇnd
[4];

47 
	mexp⁄ít
;

48 
	m∑ddög
[3];

51 
	s_xmmªg


53 
__uöt32_t
 
	mñemít
[4];

58 #i‚de‡
__x86_64__


60 
	s_Â°©e


63 
__uöt32_t
 
	mcw
;

64 
__uöt32_t
 
	msw
;

65 
__uöt32_t
 
	mèg
;

66 
__uöt32_t
 
	mùoff
;

67 
__uöt32_t
 
	mcs£l
;

68 
__uöt32_t
 
	md©aoff
;

69 
__uöt32_t
 
	md©a£l
;

70 
_Âªg
 
	m_°
[8];

71 
	m°©us
;

72 
	mmagic
;

75 
__uöt32_t
 
	m_fx§_ív
[6];

76 
__uöt32_t
 
	mmxc§
;

77 
__uöt32_t
 
	mª£rved
;

78 
_Âxªg
 
	m_fx§_°
[8];

79 
_xmmªg
 
	m_xmm
[8];

80 
__uöt32_t
 
	m∑ddög
[56];

83 #i‚de‡
sigc⁄ãxt_°ru˘


88 
	#sigc⁄ãxt_°ru˘
 
sigc⁄ãxt


	)

91 
	#X86_FXSR_MAGIC
 0x0000

	)

93 
	ssigc⁄ãxt


95 
	mgs
, 
	m__gsh
;

96 
	mfs
, 
	m__fsh
;

97 
	mes
, 
	m__esh
;

98 
	mds
, 
	m__dsh
;

99 
	medi
;

100 
	mesi
;

101 
	mebp
;

102 
	me•
;

103 
	mebx
;

104 
	medx
;

105 
	mecx
;

106 
	móx
;

107 
	må≠no
;

108 
	mîr
;

109 
	meù
;

110 
	mcs
, 
	m__csh
;

111 
	meÊags
;

112 
	me•_©_sig«l
;

113 
	mss
, 
	m__ssh
;

114 
_Â°©e
 * 
	mÂ°©e
;

115 
	mﬁdmask
;

116 
	m¸2
;

121 
	s_Â°©e


124 
__uöt16_t
 
	mcwd
;

125 
__uöt16_t
 
	mswd
;

126 
__uöt16_t
 
	m·w
;

127 
__uöt16_t
 
	mf›
;

128 
__uöt64_t
 
	mrù
;

129 
__uöt64_t
 
	mrdp
;

130 
__uöt32_t
 
	mmxc§
;

131 
__uöt32_t
 
	mmx¸_mask
;

132 
_Âxªg
 
	m_°
[8];

133 
_xmmªg
 
	m_xmm
[16];

134 
__uöt32_t
 
	m∑ddög
[24];

137 
	ssigc⁄ãxt


139 
__uöt64_t
 
	mr8
;

140 
__uöt64_t
 
	mr9
;

141 
__uöt64_t
 
	mr10
;

142 
__uöt64_t
 
	mr11
;

143 
__uöt64_t
 
	mr12
;

144 
__uöt64_t
 
	mr13
;

145 
__uöt64_t
 
	mr14
;

146 
__uöt64_t
 
	mr15
;

147 
__uöt64_t
 
	mrdi
;

148 
__uöt64_t
 
	mrsi
;

149 
__uöt64_t
 
	mrbp
;

150 
__uöt64_t
 
	mrbx
;

151 
__uöt64_t
 
	mrdx
;

152 
__uöt64_t
 
	møx
;

153 
__uöt64_t
 
	mrcx
;

154 
__uöt64_t
 
	mr•
;

155 
__uöt64_t
 
	mrù
;

156 
__uöt64_t
 
	meÊags
;

157 
	mcs
;

158 
	mgs
;

159 
	mfs
;

160 
	m__∑d0
;

161 
__uöt64_t
 
	mîr
;

162 
__uöt64_t
 
	må≠no
;

163 
__uöt64_t
 
	mﬁdmask
;

164 
__uöt64_t
 
	m¸2
;

165 
__exãnsi⁄__
 union

167 
_Â°©e
 * 
	mÂ°©e
;

168 
__uöt64_t
 
	m__Â°©e_w‹d
;

170 
__uöt64_t
 
	m__ª£rved1
 [8];

175 
	s_xßve_hdr


177 
__uöt64_t
 
	mx°©e_bv
;

178 
__uöt64_t
 
	mª£rved1
[2];

179 
__uöt64_t
 
	mª£rved2
[5];

182 
	s_ymmh_°©e


184 
__uöt32_t
 
	mymmh_•a˚
[64];

187 
	s_x°©e


189 
_Â°©e
 
	mÂ°©e
;

190 
_xßve_hdr
 
	mx°©e_hdr
;

191 
_ymmh_°©e
 
	mymmh
;

	@/usr/include/bits/siginfo.h

19 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
__√ed_sigöfo_t
 \

20 && !
deföed
 
	g__√ed_sigevít_t


24 
	~<bôs/w‹dsize.h
>

26 #i‡(!
deföed
 
__have_sigvÆ_t
 \

27 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
 \

28 || 
deföed
 
	g__√ed_sigevít_t
))

29 
	#__have_sigvÆ_t
 1

	)

32 
	usigvÆ


34 
	msivÆ_öt
;

35 *
	msivÆ_±r
;

36 } 
	tsigvÆ_t
;

39 #i‡(!
deföed
 
__have_sigöfo_t
 \

40 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
))

41 
	#__have_sigöfo_t
 1

	)

43 
	#__SI_MAX_SIZE
 128

	)

44 #i‡
__WORDSIZE
 == 64

45 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

47 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

50 #i‡
deföed
 
__x86_64__
 && 
__WORDSIZE
 == 32

55 
__˛ock_t
 
	t__©åibuã__
 ((
	t__Æig√d__
 (4))Ë
	t__sigchld_˛ock_t
;

56 
	#__SI_ALIGNMENT
 
	`__©åibuã__
 ((
	`__Æig√d__
 (8)))

	)

58 
__˛ock_t
 
	t__sigchld_˛ock_t
;

59 
	#__SI_ALIGNMENT


	)

64 
si_signo
;

65 
si_î∫o
;

67 
si_code
;

71 
_∑d
[
__SI_PAD_SIZE
];

76 
__pid_t
 
si_pid
;

77 
__uid_t
 
si_uid
;

78 } 
_kûl
;

83 
si_tid
;

84 
si_ovîrun
;

85 
sigvÆ_t
 
si_sigvÆ
;

86 } 
_timî
;

91 
__pid_t
 
si_pid
;

92 
__uid_t
 
si_uid
;

93 
sigvÆ_t
 
si_sigvÆ
;

94 } 
_π
;

99 
__pid_t
 
si_pid
;

100 
__uid_t
 
si_uid
;

101 
si_°©us
;

102 
__sigchld_˛ock_t
 
si_utime
;

103 
__sigchld_˛ock_t
 
si_°ime
;

104 } 
_sigchld
;

109 *
si_addr
;

110 
si_addr_lsb
;

111 } 
_sigÁu…
;

116 
si_b™d
;

117 
si_fd
;

118 } 
_sigpﬁl
;

123 *
_ˇŒ_addr
;

124 
_sysˇŒ
;

125 
_¨ch
;

126 } 
_sigsys
;

127 } 
_sifõlds
;

128 } 
	tsigöfo_t
 
	t__SI_ALIGNMENT
;

132 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

133 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

134 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

135 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

136 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

137 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

138 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

139 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

140 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

141 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

142 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

143 
	#si_addr_lsb
 
_sifõlds
.
_sigÁu…
.
si_addr_lsb


	)

144 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

145 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

146 
	#si_ˇŒ_addr
 
_sifõlds
.
_sigsys
.
_ˇŒ_addr


	)

147 
	#si_sysˇŒ
 
_sifõlds
.
_sigsys
.
_sysˇŒ


	)

148 
	#si_¨ch
 
_sifõlds
.
_sigsys
.
_¨ch


	)

155 
SI_ASYNCNL
 = -60,

156 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

157 
SI_TKILL
 = -6,

158 
	#SI_TKILL
 
SI_TKILL


	)

159 
SI_SIGIO
,

160 
	#SI_SIGIO
 
SI_SIGIO


	)

161 
SI_ASYNCIO
,

162 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

163 
SI_MESGQ
,

164 
	#SI_MESGQ
 
SI_MESGQ


	)

165 
SI_TIMER
,

166 
	#SI_TIMER
 
SI_TIMER


	)

167 
SI_QUEUE
,

168 
	#SI_QUEUE
 
SI_QUEUE


	)

169 
SI_USER
,

170 
	#SI_USER
 
SI_USER


	)

171 
SI_KERNEL
 = 0x80

172 
	#SI_KERNEL
 
SI_KERNEL


	)

179 
ILL_ILLOPC
 = 1,

180 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

181 
ILL_ILLOPN
,

182 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

183 
ILL_ILLADR
,

184 
	#ILL_ILLADR
 
ILL_ILLADR


	)

185 
ILL_ILLTRP
,

186 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

187 
ILL_PRVOPC
,

188 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

189 
ILL_PRVREG
,

190 
	#ILL_PRVREG
 
ILL_PRVREG


	)

191 
ILL_COPROC
,

192 
	#ILL_COPROC
 
ILL_COPROC


	)

193 
ILL_BADSTK


194 
	#ILL_BADSTK
 
ILL_BADSTK


	)

200 
FPE_INTDIV
 = 1,

201 
	#FPE_INTDIV
 
FPE_INTDIV


	)

202 
FPE_INTOVF
,

203 
	#FPE_INTOVF
 
FPE_INTOVF


	)

204 
FPE_FLTDIV
,

205 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

206 
FPE_FLTOVF
,

207 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

208 
FPE_FLTUND
,

209 
	#FPE_FLTUND
 
FPE_FLTUND


	)

210 
FPE_FLTRES
,

211 
	#FPE_FLTRES
 
FPE_FLTRES


	)

212 
FPE_FLTINV
,

213 
	#FPE_FLTINV
 
FPE_FLTINV


	)

214 
FPE_FLTSUB


215 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

221 
SEGV_MAPERR
 = 1,

222 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

223 
SEGV_ACCERR


224 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

230 
BUS_ADRALN
 = 1,

231 
	#BUS_ADRALN
 
BUS_ADRALN


	)

232 
BUS_ADRERR
,

233 
	#BUS_ADRERR
 
BUS_ADRERR


	)

234 
BUS_OBJERR
,

235 
	#BUS_OBJERR
 
BUS_OBJERR


	)

236 
BUS_MCEERR_AR
,

237 
	#BUS_MCEERR_AR
 
BUS_MCEERR_AR


	)

238 
BUS_MCEERR_AO


239 
	#BUS_MCEERR_AO
 
BUS_MCEERR_AO


	)

245 
TRAP_BRKPT
 = 1,

246 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

247 
TRAP_TRACE


248 
	#TRAP_TRACE
 
TRAP_TRACE


	)

254 
CLD_EXITED
 = 1,

255 
	#CLD_EXITED
 
CLD_EXITED


	)

256 
CLD_KILLED
,

257 
	#CLD_KILLED
 
CLD_KILLED


	)

258 
CLD_DUMPED
,

259 
	#CLD_DUMPED
 
CLD_DUMPED


	)

260 
CLD_TRAPPED
,

261 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

262 
CLD_STOPPED
,

263 
	#CLD_STOPPED
 
CLD_STOPPED


	)

264 
CLD_CONTINUED


265 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

271 
POLL_IN
 = 1,

272 
	#POLL_IN
 
POLL_IN


	)

273 
POLL_OUT
,

274 
	#POLL_OUT
 
POLL_OUT


	)

275 
POLL_MSG
,

276 
	#POLL_MSG
 
POLL_MSG


	)

277 
POLL_ERR
,

278 
	#POLL_ERR
 
POLL_ERR


	)

279 
POLL_PRI
,

280 
	#POLL_PRI
 
POLL_PRI


	)

281 
POLL_HUP


282 
	#POLL_HUP
 
POLL_HUP


	)

285 #unde‡
__√ed_sigöfo_t


289 #i‡(
deföed
 
_SIGNAL_H
 || deföed 
__√ed_sigevít_t
) \

290 && !
deföed
 
__have_sigevít_t


291 
	#__have_sigevít_t
 1

	)

294 
	#__SIGEV_MAX_SIZE
 64

	)

295 #i‡
__WORDSIZE
 == 64

296 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

298 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

302 #i‚de‡
__have_±hªad_©å_t


303 
±hªad_©å_t
 
	t±hªad_©å_t
;

304 
	#__have_±hªad_©å_t
 1

	)

307 
	ssigevít


309 
sigvÆ_t
 
sigev_vÆue
;

310 
sigev_signo
;

311 
sigev_nŸify
;

315 
_∑d
[
__SIGEV_PAD_SIZE
];

319 
__pid_t
 
_tid
;

323 (*
_fun˘i⁄
Ë(
sigvÆ_t
);

324 
±hªad_©å_t
 *
_©åibuã
;

325 } 
_sigev_thªad
;

326 } 
_sigev_un
;

327 } 
	tsigevít_t
;

330 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

331 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

336 
SIGEV_SIGNAL
 = 0,

337 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

338 
SIGEV_NONE
,

339 
	#SIGEV_NONE
 
SIGEV_NONE


	)

340 
SIGEV_THREAD
,

341 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

343 
SIGEV_THREAD_ID
 = 4

344 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/signum.h

19 #ifdef 
_SIGNAL_H


22 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

23 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

24 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

26 #ifde‡
__USE_UNIX98


27 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

32 
	#SIGHUP
 1

	)

33 
	#SIGINT
 2

	)

34 
	#SIGQUIT
 3

	)

35 
	#SIGILL
 4

	)

36 
	#SIGTRAP
 5

	)

37 
	#SIGABRT
 6

	)

38 
	#SIGIOT
 6

	)

39 
	#SIGBUS
 7

	)

40 
	#SIGFPE
 8

	)

41 
	#SIGKILL
 9

	)

42 
	#SIGUSR1
 10

	)

43 
	#SIGSEGV
 11

	)

44 
	#SIGUSR2
 12

	)

45 
	#SIGPIPE
 13

	)

46 
	#SIGALRM
 14

	)

47 
	#SIGTERM
 15

	)

48 
	#SIGSTKFLT
 16

	)

49 
	#SIGCLD
 
SIGCHLD


	)

50 
	#SIGCHLD
 17

	)

51 
	#SIGCONT
 18

	)

52 
	#SIGSTOP
 19

	)

53 
	#SIGTSTP
 20

	)

54 
	#SIGTTIN
 21

	)

55 
	#SIGTTOU
 22

	)

56 
	#SIGURG
 23

	)

57 
	#SIGXCPU
 24

	)

58 
	#SIGXFSZ
 25

	)

59 
	#SIGVTALRM
 26

	)

60 
	#SIGPROF
 27

	)

61 
	#SIGWINCH
 28

	)

62 
	#SIGPOLL
 
SIGIO


	)

63 
	#SIGIO
 29

	)

64 
	#SIGPWR
 30

	)

65 
	#SIGSYS
 31

	)

66 
	#SIGUNUSED
 31

	)

68 
	#_NSIG
 65

	)

71 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

72 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

76 
	#__SIGRTMIN
 32

	)

77 
	#__SIGRTMAX
 (
_NSIG
 - 1)

	)

	@/usr/include/bits/sigset.h

19 #i‚def 
_SIGSET_H_ty≥s


20 
	#_SIGSET_H_ty≥s
 1

	)

22 
	t__sig_©omic_t
;

26 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

29 
	m__vÆ
[
_SIGSET_NWORDS
];

30 } 
	t__sig£t_t
;

41 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


42 
	#_SIGSET_H_‚s
 1

	)

44 #i‚de‡
_EXTERN_INLINE


45 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

49 
	#__sigmask
(
sig
) \

50 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

53 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

55 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

56 
	#__sigem±y£t
(
£t
) \

57 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

58 
sig£t_t
 *
__£t
 = (
£t
); \

59 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

60 0; }))

	)

61 
	#__sigfûl£t
(
£t
) \

62 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

63 
sig£t_t
 *
__£t
 = (
£t
); \

64 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

65 0; }))

	)

67 #ifde‡
__USE_GNU


71 
	#__sigi£m±y£t
(
£t
) \

72 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

73 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

74 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

75 !
__ªt
 && --
__˙t
 >= 0) \

76 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

77 
__ªt
 =0; }))

	)

78 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

79 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

80 
sig£t_t
 *
__de°
 = (
de°
); \

81 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

82 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

83 --
__˙t
 >= 0) \

84 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

85 & 
__right
->
__vÆ
[
__˙t
]); \

86 0; }))

	)

87 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

88 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

89 
sig£t_t
 *
__de°
 = (
de°
); \

90 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

91 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

92 --
__˙t
 >= 0) \

93 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

94 | 
__right
->
__vÆ
[
__˙t
]); \

95 0; }))

	)

102 
__sigismembî
 (c⁄° 
__sig£t_t
 *, );

103 
__sigadd£t
 (
__sig£t_t
 *, );

104 
__sigdñ£t
 (
__sig£t_t
 *, );

106 #ifde‡
__USE_EXTERN_INLINES


107 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

108 
_EXTERN_INLINE
 \

109 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

111 
__mask
 = 
	`__sigmask
 (
__sig
); \

112 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

113  
BODY
; \

114 }

	)

116 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
) ? 1 : 0, const)

117 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

118 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

120 #unde‡
__SIGSETFN


	@/usr/include/bits/sigstack.h

19 #i‚de‡
_SIGNAL_H


25 
	ssig°ack


27 *
	mss_•
;

28 
	mss_⁄°ack
;

35 
	mSS_ONSTACK
 = 1,

36 
	#SS_ONSTACK
 
SS_ONSTACK


	)

37 
	mSS_DISABLE


38 
	#SS_DISABLE
 
SS_DISABLE


	)

42 
	#MINSIGSTKSZ
 2048

	)

45 
	#SIGSTKSZ
 8192

	)

49 
	ssigÆt°ack


51 *
	mss_•
;

52 
	mss_Êags
;

53 
size_t
 
	mss_size
;

54 } 
	t°ack_t
;

	@/usr/include/bits/sigthread.h

19 #i‚de‡
_BITS_SIGTHREAD_H


20 
	#_BITS_SIGTHREAD_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


30 
	$±hªad_sigmask
 (
__how
,

31 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

32 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

35 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

37 #ifde‡
__USE_GNU


39 
	$±hªad_sigqueue
 (
±hªad_t
 
__thªadid
, 
__signo
,

40 c⁄° 
sigvÆ
 
__vÆue
Ë
__THROW
;

	@/usr/include/bits/sockaddr.h

23 #i‚de‡
_BITS_SOCKADDR_H


24 
	#_BITS_SOCKADDR_H
 1

	)

28 
	tß_Ámûy_t
;

34 
	#__SOCKADDR_COMMON
(
ß_¥efix
) \

35 
ß_Ámûy_t
 
ß_¥efix
##
Ámûy


	)

37 
	#__SOCKADDR_COMMON_SIZE
 ( ())

	)

	@/usr/include/bits/socket.h

19 #i‚de‡
__BITS_SOCKET_H


20 
	#__BITS_SOCKET_H


	)

22 #i‚de‡
_SYS_SOCKET_H


26 
	#__√ed_size_t


	)

27 
	~<°ddef.h
>

29 
	~<sys/ty≥s.h
>

32 #i‚de‡
__sockÀn_t_deföed


33 
__sockÀn_t
 
	tsockÀn_t
;

34 
	#__sockÀn_t_deföed


	)

38 
	~<bôs/sockë_ty≥.h
>

41 
	#PF_UNSPEC
 0

	)

42 
	#PF_LOCAL
 1

	)

43 
	#PF_UNIX
 
PF_LOCAL


	)

44 
	#PF_FILE
 
PF_LOCAL


	)

45 
	#PF_INET
 2

	)

46 
	#PF_AX25
 3

	)

47 
	#PF_IPX
 4

	)

48 
	#PF_APPLETALK
 5

	)

49 
	#PF_NETROM
 6

	)

50 
	#PF_BRIDGE
 7

	)

51 
	#PF_ATMPVC
 8

	)

52 
	#PF_X25
 9

	)

53 
	#PF_INET6
 10

	)

54 
	#PF_ROSE
 11

	)

55 
	#PF_DEC√t
 12

	)

56 
	#PF_NETBEUI
 13

	)

57 
	#PF_SECURITY
 14

	)

58 
	#PF_KEY
 15

	)

59 
	#PF_NETLINK
 16

	)

60 
	#PF_ROUTE
 
PF_NETLINK


	)

61 
	#PF_PACKET
 17

	)

62 
	#PF_ASH
 18

	)

63 
	#PF_ECONET
 19

	)

64 
	#PF_ATMSVC
 20

	)

65 
	#PF_RDS
 21

	)

66 
	#PF_SNA
 22

	)

67 
	#PF_IRDA
 23

	)

68 
	#PF_PPPOX
 24

	)

69 
	#PF_WANPIPE
 25

	)

70 
	#PF_LLC
 26

	)

71 
	#PF_CAN
 29

	)

72 
	#PF_TIPC
 30

	)

73 
	#PF_BLUETOOTH
 31

	)

74 
	#PF_IUCV
 32

	)

75 
	#PF_RXRPC
 33

	)

76 
	#PF_ISDN
 34

	)

77 
	#PF_PHONET
 35

	)

78 
	#PF_IEEE802154
 36

	)

79 
	#PF_CAIF
 37

	)

80 
	#PF_ALG
 38

	)

81 
	#PF_NFC
 39

	)

82 
	#PF_VSOCK
 40

	)

83 
	#PF_MAX
 41

	)

86 
	#AF_UNSPEC
 
PF_UNSPEC


	)

87 
	#AF_LOCAL
 
PF_LOCAL


	)

88 
	#AF_UNIX
 
PF_UNIX


	)

89 
	#AF_FILE
 
PF_FILE


	)

90 
	#AF_INET
 
PF_INET


	)

91 
	#AF_AX25
 
PF_AX25


	)

92 
	#AF_IPX
 
PF_IPX


	)

93 
	#AF_APPLETALK
 
PF_APPLETALK


	)

94 
	#AF_NETROM
 
PF_NETROM


	)

95 
	#AF_BRIDGE
 
PF_BRIDGE


	)

96 
	#AF_ATMPVC
 
PF_ATMPVC


	)

97 
	#AF_X25
 
PF_X25


	)

98 
	#AF_INET6
 
PF_INET6


	)

99 
	#AF_ROSE
 
PF_ROSE


	)

100 
	#AF_DEC√t
 
PF_DEC√t


	)

101 
	#AF_NETBEUI
 
PF_NETBEUI


	)

102 
	#AF_SECURITY
 
PF_SECURITY


	)

103 
	#AF_KEY
 
PF_KEY


	)

104 
	#AF_NETLINK
 
PF_NETLINK


	)

105 
	#AF_ROUTE
 
PF_ROUTE


	)

106 
	#AF_PACKET
 
PF_PACKET


	)

107 
	#AF_ASH
 
PF_ASH


	)

108 
	#AF_ECONET
 
PF_ECONET


	)

109 
	#AF_ATMSVC
 
PF_ATMSVC


	)

110 
	#AF_RDS
 
PF_RDS


	)

111 
	#AF_SNA
 
PF_SNA


	)

112 
	#AF_IRDA
 
PF_IRDA


	)

113 
	#AF_PPPOX
 
PF_PPPOX


	)

114 
	#AF_WANPIPE
 
PF_WANPIPE


	)

115 
	#AF_LLC
 
PF_LLC


	)

116 
	#AF_CAN
 
PF_CAN


	)

117 
	#AF_TIPC
 
PF_TIPC


	)

118 
	#AF_BLUETOOTH
 
PF_BLUETOOTH


	)

119 
	#AF_IUCV
 
PF_IUCV


	)

120 
	#AF_RXRPC
 
PF_RXRPC


	)

121 
	#AF_ISDN
 
PF_ISDN


	)

122 
	#AF_PHONET
 
PF_PHONET


	)

123 
	#AF_IEEE802154
 
PF_IEEE802154


	)

124 
	#AF_CAIF
 
PF_CAIF


	)

125 
	#AF_ALG
 
PF_ALG


	)

126 
	#AF_NFC
 
PF_NFC


	)

127 
	#AF_VSOCK
 
PF_VSOCK


	)

128 
	#AF_MAX
 
PF_MAX


	)

134 
	#SOL_RAW
 255

	)

135 
	#SOL_DECNET
 261

	)

136 
	#SOL_X25
 262

	)

137 
	#SOL_PACKET
 263

	)

138 
	#SOL_ATM
 264

	)

139 
	#SOL_AAL
 265

	)

140 
	#SOL_IRDA
 266

	)

143 
	#SOMAXCONN
 128

	)

146 
	~<bôs/sockaddr.h
>

149 
	ssockaddr


151 
__SOCKADDR_COMMON
 (
ß_
);

152 
	mß_d©a
[14];

158 
	#__ss_Æig¡y≥
 

	)

159 
	#_SS_SIZE
 128

	)

160 
	#_SS_PADSIZE
 (
_SS_SIZE
 - (2 *  (
__ss_Æig¡y≥
)))

	)

162 
	ssockaddr_°‹age


164 
__SOCKADDR_COMMON
 (
ss_
);

165 
__ss_Æig¡y≥
 
	m__ss_Æign
;

166 
	m__ss_∑ddög
[
_SS_PADSIZE
];

173 
	mMSG_OOB
 = 0x01,

174 
	#MSG_OOB
 
MSG_OOB


	)

175 
	mMSG_PEEK
 = 0x02,

176 
	#MSG_PEEK
 
MSG_PEEK


	)

177 
	mMSG_DONTROUTE
 = 0x04,

178 
	#MSG_DONTROUTE
 
MSG_DONTROUTE


	)

179 #ifde‡
__USE_GNU


181 
	mMSG_TRYHARD
 = 
MSG_DONTROUTE
,

182 
	#MSG_TRYHARD
 
MSG_DONTROUTE


	)

184 
	mMSG_CTRUNC
 = 0x08,

185 
	#MSG_CTRUNC
 
MSG_CTRUNC


	)

186 
	mMSG_PROXY
 = 0x10,

187 
	#MSG_PROXY
 
MSG_PROXY


	)

188 
	mMSG_TRUNC
 = 0x20,

189 
	#MSG_TRUNC
 
MSG_TRUNC


	)

190 
	mMSG_DONTWAIT
 = 0x40,

191 
	#MSG_DONTWAIT
 
MSG_DONTWAIT


	)

192 
	mMSG_EOR
 = 0x80,

193 
	#MSG_EOR
 
MSG_EOR


	)

194 
	mMSG_WAITALL
 = 0x100,

195 
	#MSG_WAITALL
 
MSG_WAITALL


	)

196 
	mMSG_FIN
 = 0x200,

197 
	#MSG_FIN
 
MSG_FIN


	)

198 
	mMSG_SYN
 = 0x400,

199 
	#MSG_SYN
 
MSG_SYN


	)

200 
	mMSG_CONFIRM
 = 0x800,

201 
	#MSG_CONFIRM
 
MSG_CONFIRM


	)

202 
	mMSG_RST
 = 0x1000,

203 
	#MSG_RST
 
MSG_RST


	)

204 
	mMSG_ERRQUEUE
 = 0x2000,

205 
	#MSG_ERRQUEUE
 
MSG_ERRQUEUE


	)

206 
	mMSG_NOSIGNAL
 = 0x4000,

207 
	#MSG_NOSIGNAL
 
MSG_NOSIGNAL


	)

208 
	mMSG_MORE
 = 0x8000,

209 
	#MSG_MORE
 
MSG_MORE


	)

210 
	mMSG_WAITFORONE
 = 0x10000,

211 
	#MSG_WAITFORONE
 
MSG_WAITFORONE


	)

212 
	mMSG_FASTOPEN
 = 0x20000000,

213 
	#MSG_FASTOPEN
 
MSG_FASTOPEN


	)

215 
	mMSG_CMSG_CLOEXEC
 = 0x40000000

218 
	#MSG_CMSG_CLOEXEC
 
MSG_CMSG_CLOEXEC


	)

224 
	smsghdr


226 *
	mmsg_«me
;

227 
sockÀn_t
 
	mmsg_«mñí
;

229 
iovec
 *
	mmsg_iov
;

230 
size_t
 
	mmsg_iovÀn
;

232 *
	mmsg_c⁄åﬁ
;

233 
size_t
 
	mmsg_c⁄åﬁÀn
;

238 
	mmsg_Êags
;

242 
	scmsghdr


244 
size_t
 
	mcmsg_Àn
;

249 
	mcmsg_Àvñ
;

250 
	mcmsg_ty≥
;

251 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

252 
__exãnsi⁄__
 
__cmsg_d©a
 
	m__Êex¨r
;

257 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

258 
	#CMSG_DATA
(
cmsg
Ë((cmsg)->
__cmsg_d©a
)

	)

260 
	#CMSG_DATA
(
cmsg
Ë((*Ë((
cmsghdr
 *Ë(cmsgË+ 1))

	)

262 
	#CMSG_NXTHDR
(
mhdr
, 
cmsg
Ë
	`__cmsg_nxthdr
 (mhdr, cmsg)

	)

263 
	#CMSG_FIRSTHDR
(
mhdr
) \

264 ((
size_t
Ë(
mhdr
)->
msg_c⁄åﬁÀn
 > (
cmsghdr
) \

265 ? (
cmsghdr
 *Ë(
mhdr
)->
msg_c⁄åﬁ
 : (cmsghd∏*Ë0)

	)

266 
	#CMSG_ALIGN
(
Àn
Ë((÷íË+  (
size_t
) - 1) \

267 & (
size_t
Ë~( (size_tË- 1))

	)

268 
	#CMSG_SPACE
(
Àn
Ë(
	`CMSG_ALIGN
 (len) \

269 + 
	`CMSG_ALIGN
 ( (
cmsghdr
)))

	)

270 
	#CMSG_LEN
(
Àn
Ë(
	`CMSG_ALIGN
 ( (
cmsghdr
)Ë+ (Àn))

	)

272 
cmsghdr
 *
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
,

273 
cmsghdr
 *
__cmsg
Ë
__THROW
;

274 #ifde‡
__USE_EXTERN_INLINES


275 #i‚de‡
_EXTERN_INLINE


276 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

278 
_EXTERN_INLINE
 
cmsghdr
 *

279 
	`__NTH
 (
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
, 
cmsghdr
 *
__cmsg
))

281 i‡((
size_t
Ë
__cmsg
->
cmsg_Àn
 <  (
cmsghdr
))

283  (
cmsghdr
 *) 0;

285 
__cmsg
 = (
cmsghdr
 *) ((*) __cmsg

286 + 
	`CMSG_ALIGN
 (
__cmsg
->
cmsg_Àn
));

287 i‡((*Ë(
__cmsg
 + 1Ë> ((*Ë
__mhdr
->
msg_c⁄åﬁ


288 + 
__mhdr
->
msg_c⁄åﬁÀn
)

289 || ((*Ë
__cmsg
 + 
	`CMSG_ALIGN
 (__cmsg->
cmsg_Àn
)

290 > ((*Ë
__mhdr
->
msg_c⁄åﬁ
 + __mhdr->
msg_c⁄åﬁÀn
)))

292  (
cmsghdr
 *) 0;

293  
__cmsg
;

294 
	}
}

301 
	mSCM_RIGHTS
 = 0x01

302 
	#SCM_RIGHTS
 
SCM_RIGHTS


	)

303 #ifde‡
__USE_GNU


304 , 
	mSCM_CREDENTIALS
 = 0x02

305 
	#SCM_CREDENTIALS
 
SCM_CREDENTIALS


	)

309 #ifde‡
__USE_GNU


311 
	su¸ed


313 
pid_t
 
	mpid
;

314 
uid_t
 
	muid
;

315 
gid_t
 
	mgid
;

320 #i‡!
deföed
 
__USE_MISC
 && !deföed 
__USE_GNU


321 #i‚de‡
FIOGETOWN


322 
	#__SYS_SOCKET_H_undef_FIOGETOWN


	)

324 #i‚de‡
FIOSETOWN


325 
	#__SYS_SOCKET_H_undef_FIOSETOWN


	)

327 #i‚de‡
SIOCATMARK


328 
	#__SYS_SOCKET_H_undef_SIOCATMARK


	)

330 #i‚de‡
SIOCGPGRP


331 
	#__SYS_SOCKET_H_undef_SIOCGPGRP


	)

333 #i‚de‡
SIOCGSTAMP


334 
	#__SYS_SOCKET_H_undef_SIOCGSTAMP


	)

336 #i‚de‡
SIOCGSTAMPNS


337 
	#__SYS_SOCKET_H_undef_SIOCGSTAMPNS


	)

339 #i‚de‡
SIOCSPGRP


340 
	#__SYS_SOCKET_H_undef_SIOCSPGRP


	)

345 
	~<asm/sockë.h
>

347 #i‡!
deföed
 
__USE_MISC
 && !deföed 
__USE_GNU


348 #ifde‡
__SYS_SOCKET_H_undef_FIOGETOWN


349 #unde‡
__SYS_SOCKET_H_undef_FIOGETOWN


350 #unde‡
FIOGETOWN


352 #ifde‡
__SYS_SOCKET_H_undef_FIOSETOWN


353 #unde‡
__SYS_SOCKET_H_undef_FIOSETOWN


354 #unde‡
FIOSETOWN


356 #ifde‡
__SYS_SOCKET_H_undef_SIOCATMARK


357 #unde‡
__SYS_SOCKET_H_undef_SIOCATMARK


358 #unde‡
SIOCATMARK


360 #ifde‡
__SYS_SOCKET_H_undef_SIOCGPGRP


361 #unde‡
__SYS_SOCKET_H_undef_SIOCGPGRP


362 #unde‡
SIOCGPGRP


364 #ifde‡
__SYS_SOCKET_H_undef_SIOCGSTAMP


365 #unde‡
__SYS_SOCKET_H_undef_SIOCGSTAMP


366 #unde‡
SIOCGSTAMP


368 #ifde‡
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


369 #unde‡
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


370 #unde‡
SIOCGSTAMPNS


372 #ifde‡
__SYS_SOCKET_H_undef_SIOCSPGRP


373 #unde‡
__SYS_SOCKET_H_undef_SIOCSPGRP


374 #unde‡
SIOCSPGRP


379 
	slögî


381 
	ml_⁄off
;

382 
	ml_lögî
;

	@/usr/include/bits/socket2.h

19 #i‚de‡
_SYS_SOCKET_H


23 
ssize_t
 
__ªcv_chk
 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

24 
__Êags
);

25 
ssize_t
 
__REDIRECT
 (
__ªcv_Æüs
, (
__fd
, *
__buf
, 
size_t
 
__n
,

26 
__Êags
), 
ªcv
);

27 
ssize_t
 
__REDIRECT
 (
__ªcv_chk_w¨n
,

28 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

29 
__Êags
), 
__ªcv_chk
)

30 
__w¨«âr
 ("recv called with biggerÜengthÅhan size of destination "

33 
__f‹tify_fun˘i⁄
 
ssize_t


34 
	$ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
)

36 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

38 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

39  
	`__ªcv_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
);

41 i‡(
__n
 > 
	`__bos0
 (
__buf
))

42  
	`__ªcv_chk_w¨n
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
);

44  
	`__ªcv_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
);

45 
	}
}

47 
ssize_t
 
__ªcv‰om_chk
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

48 
size_t
 
__buÊí
, 
__Êags
,

49 
__SOCKADDR_ARG
 
__addr
,

50 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

51 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_Æüs
,

52 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

53 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

54 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
ªcv‰om
);

55 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_chk_w¨n
,

56 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

57 
size_t
 
__buÊí
, 
__Êags
,

58 
__SOCKADDR_ARG
 
__addr
,

59 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
__ªcv‰om_chk
)

60 
__w¨«âr
 ("recvfrom called with biggerÜengthÅhan size of "

63 
__f‹tify_fun˘i⁄
 
ssize_t


64 
	$ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
, 
__Êags
,

65 
__SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
)

67 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

69 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

70  
	`__ªcv‰om_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
,

71 
__addr
, 
__addr_Àn
);

72 i‡(
__n
 > 
	`__bos0
 (
__buf
))

73  
	`__ªcv‰om_chk_w¨n
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
,

74 
__addr
, 
__addr_Àn
);

76  
	`__ªcv‰om_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
, 
__addr
, 
__addr_Àn
);

77 
	}
}

	@/usr/include/bits/stat.h

18 #i‡!
deföed
 
_SYS_STAT_H
 && !deföed 
_FCNTL_H


22 #i‚de‡
_BITS_STAT_H


23 
	#_BITS_STAT_H
 1

	)

26 #i‚de‡
__x86_64__


27 
	#_STAT_VER_LINUX_OLD
 1

	)

28 
	#_STAT_VER_KERNEL
 1

	)

29 
	#_STAT_VER_SVR4
 2

	)

30 
	#_STAT_VER_LINUX
 3

	)

33 
	#_MKNOD_VER_LINUX
 1

	)

34 
	#_MKNOD_VER_SVR4
 2

	)

35 
	#_MKNOD_VER
 
_MKNOD_VER_LINUX


	)

37 
	#_STAT_VER_KERNEL
 0

	)

38 
	#_STAT_VER_LINUX
 1

	)

41 
	#_MKNOD_VER_LINUX
 0

	)

44 
	#_STAT_VER
 
_STAT_VER_LINUX


	)

46 
	s°©


48 
__dev_t
 
	m°_dev
;

49 #i‚de‡
__x86_64__


50 
	m__∑d1
;

52 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


53 
__öo_t
 
	m°_öo
;

55 
__öo_t
 
	m__°_öo
;

57 #i‚de‡
__x86_64__


58 
__mode_t
 
	m°_mode
;

59 
__∆ök_t
 
	m°_∆ök
;

61 
__∆ök_t
 
	m°_∆ök
;

62 
__mode_t
 
	m°_mode
;

64 
__uid_t
 
	m°_uid
;

65 
__gid_t
 
	m°_gid
;

66 #ifde‡
__x86_64__


67 
	m__∑d0
;

69 
__dev_t
 
	m°_rdev
;

70 #i‚de‡
__x86_64__


71 
	m__∑d2
;

73 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


74 
__off_t
 
	m°_size
;

76 
__off64_t
 
	m°_size
;

78 
__blksize_t
 
	m°_blksize
;

79 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


80 
__blk˙t_t
 
	m°_blocks
;

82 
__blk˙t64_t
 
	m°_blocks
;

84 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


91 
time•ec
 
	m°_©im
;

92 
time•ec
 
	m°_mtim
;

93 
time•ec
 
	m°_˘im
;

94 
	#°_©ime
 
°_©im
.
tv_£c


	)

95 
	#°_mtime
 
°_mtim
.
tv_£c


	)

96 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

98 
__time_t
 
	m°_©ime
;

99 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

100 
__time_t
 
	m°_mtime
;

101 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

102 
__time_t
 
	m°_˘ime
;

103 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

105 #ifde‡
__x86_64__


106 
__sysˇŒ_¶⁄g_t
 
	m__unu£d
[3];

108 #i‚de‡
__USE_FILE_OFFSET64


109 
	m__unu£d4
;

110 
	m__unu£d5
;

112 
__öo64_t
 
	m°_öo
;

117 #ifde‡
__USE_LARGEFILE64


119 
	s°©64


121 
__dev_t
 
	m°_dev
;

122 #ifde‡
__x86_64__


123 
__öo64_t
 
	m°_öo
;

124 
__∆ök_t
 
	m°_∆ök
;

125 
__mode_t
 
	m°_mode
;

127 
	m__∑d1
;

128 
__öo_t
 
	m__°_öo
;

129 
__mode_t
 
	m°_mode
;

130 
__∆ök_t
 
	m°_∆ök
;

132 
__uid_t
 
	m°_uid
;

133 
__gid_t
 
	m°_gid
;

134 #ifde‡
__x86_64__


135 
	m__∑d0
;

136 
__dev_t
 
	m°_rdev
;

137 
__off_t
 
	m°_size
;

139 
__dev_t
 
	m°_rdev
;

140 
	m__∑d2
;

141 
__off64_t
 
	m°_size
;

143 
__blksize_t
 
	m°_blksize
;

144 
__blk˙t64_t
 
	m°_blocks
;

145 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


152 
time•ec
 
	m°_©im
;

153 
time•ec
 
	m°_mtim
;

154 
time•ec
 
	m°_˘im
;

156 
__time_t
 
	m°_©ime
;

157 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

158 
__time_t
 
	m°_mtime
;

159 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

160 
__time_t
 
	m°_˘ime
;

161 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

163 #ifde‡
__x86_64__


164 
__sysˇŒ_¶⁄g_t
 
	m__unu£d
[3];

166 
__öo64_t
 
	m°_öo
;

172 
	#_STATBUF_ST_BLKSIZE


	)

173 
	#_STATBUF_ST_RDEV


	)

175 
	#_STATBUF_ST_NSEC


	)

179 
	#__S_IFMT
 0170000

	)

182 
	#__S_IFDIR
 0040000

	)

183 
	#__S_IFCHR
 0020000

	)

184 
	#__S_IFBLK
 0060000

	)

185 
	#__S_IFREG
 0100000

	)

186 
	#__S_IFIFO
 0010000

	)

187 
	#__S_IFLNK
 0120000

	)

188 
	#__S_IFSOCK
 0140000

	)

192 
	#__S_TYPEISMQ
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

193 
	#__S_TYPEISSEM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

194 
	#__S_TYPEISSHM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

198 
	#__S_ISUID
 04000

	)

199 
	#__S_ISGID
 02000

	)

200 
	#__S_ISVTX
 01000

	)

201 
	#__S_IREAD
 0400

	)

202 
	#__S_IWRITE
 0200

	)

203 
	#__S_IEXEC
 0100

	)

205 #ifde‡
__USE_ATFILE


206 
	#UTIME_NOW
 ((1»<< 30Ë- 1l)

	)

207 
	#UTIME_OMIT
 ((1»<< 30Ë- 2l)

	)

	@/usr/include/bits/stdio-ldbl.h

19 #i‚de‡
_STDIO_H


23 
__BEGIN_NAMESPACE_STD


24 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

25 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

26 
	$__LDBL_REDIR_DECL
 (
•rötf
)

27 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

28 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

29 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

30 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

31 && !
deföed
 
__REDIRECT
 \

32 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

33 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

34 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

37 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

39 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

41 
__END_NAMESPACE_STD


43 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


44 
__BEGIN_NAMESPACE_C99


45 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

46 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

47 
__END_NAMESPACE_C99


50 #ifdef 
__USE_ISOC99


51 
__BEGIN_NAMESPACE_C99


52 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

53 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

54 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

55 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

58 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

59 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

60 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

62 
__END_NAMESPACE_C99


65 #ifde‡
__USE_XOPEN2K8


66 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

67 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

70 #ifde‡
__USE_GNU


71 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

72 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

73 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

74 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

75 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

78 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


79 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

80 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

81 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


82 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

83 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

85 #i‡
__USE_FORTIFY_LEVEL
 > 1

86 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

88 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

89 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

90 #ifde‡
__USE_XOPEN2K8


91 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

94 #ifde‡
__USE_GNU


95 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

96 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

97 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

98 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

19 #i‚de‡
_STDIO_H


23 #i‚de‡
__exã∫_ölöe


24 
	#__STDIO_INLINE
 
ölöe


	)

26 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

30 #ifde‡
__USE_EXTERN_INLINES


33 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
)

35 
__STDIO_INLINE
 

36 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

38  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

39 
	}
}

43 
__STDIO_INLINE
 

44 
	$gëch¨
 ()

46  
	`_IO_gëc
 (
°dö
);

47 
	}
}

50 #ifde‡
__USE_MISC


52 
__STDIO_INLINE
 

53 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

55  
	`_IO_gëc_u∆ocked
 (
__Â
);

56 
	}
}

60 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


62 
__STDIO_INLINE
 

63 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

65  
	`_IO_gëc_u∆ocked
 (
__Â
);

66 
	}
}

69 
__STDIO_INLINE
 

70 
	$gëch¨_u∆ocked
 ()

72  
	`_IO_gëc_u∆ocked
 (
°dö
);

73 
	}
}

78 
__STDIO_INLINE
 

79 
	$putch¨
 (
__c
)

81  
	`_IO_putc
 (
__c
, 
°dout
);

82 
	}
}

85 #ifde‡
__USE_MISC


87 
__STDIO_INLINE
 

88 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

90  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

91 
	}
}

95 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


97 
__STDIO_INLINE
 

98 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

100  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

101 
	}
}

104 
__STDIO_INLINE
 

105 
	$putch¨_u∆ocked
 (
__c
)

107  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

108 
	}
}

112 #ifdef 
__USE_GNU


114 
__STDIO_INLINE
 
_IO_ssize_t


115 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

117  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

118 
	}
}

122 #ifde‡
__USE_MISC


124 
__STDIO_INLINE
 

125 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

127  
	`_IO_„of_u∆ocked
 (
__°ªam
);

128 
	}
}

131 
__STDIO_INLINE
 

132 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

134  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

135 
	}
}

141 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

142 && !
deföed
 
	g__˝lu•lus


144 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

145 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

146 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

147 && (
size_t
Ë(
size
) != 0) \

148 ? ({ *
__±r
 = (*Ë(
±r
); \

149 
FILE
 *
__°ªam
 = (
°ªam
); \

150 
size_t
 
__˙t
; \

151 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

152 
__˙t
 > 0; --__cnt) \

154 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

155 i‡(
__c
 =
EOF
) \

157 *
__±r
++ = 
__c
; \

159 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

160 / (
size_t
Ë(
size
); }) \

161 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

162 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

164 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

165 (Ë(
n
), (
size_t
) 0) \

166 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

168 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

169 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

170 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

171 && (
size_t
Ë(
size
) != 0) \

172 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

173 
FILE
 *
__°ªam
 = (
°ªam
); \

174 
size_t
 
__˙t
; \

175 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

176 
__˙t
 > 0; --__cnt) \

177 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

179 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

180 / (
size_t
Ë(
size
); }) \

181 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

182 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

184 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

185 (Ë(
n
), (
size_t
) 0) \

186 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

190 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

19 #i‚de‡
_STDIO_H


23 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

24 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

25 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

26 c⁄° *
__ª°ri˘
 
__f‹m©
,

27 
_G_va_li°
 
__≠
Ë
__THROW
;

29 #ifde‡
__va_¨g_∑ck


30 
__f‹tify_fun˘i⁄
 

31 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
, ...))

33  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

34 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

35 
	}
}

36 #ñi‡!
deföed
 
__˝lu•lus


37 
	#•rötf
(
°r
, ...) \

38 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

39 
__VA_ARGS__
)

	)

42 
__f‹tify_fun˘i⁄
 

43 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
,

44 
_G_va_li°
 
__≠
))

46  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

47 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

48 
	}
}

50 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


52 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

53 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

54 ...Ë
__THROW
;

55 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

56 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

57 
_G_va_li°
 
__≠
Ë
__THROW
;

59 #ifde‡
__va_¨g_∑ck


60 
__f‹tify_fun˘i⁄
 

61 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

62 c⁄° *
__ª°ri˘
 
__fmt
, ...))

64  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

65 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

66 
	}
}

67 #ñi‡!
deföed
 
__˝lu•lus


68 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

69 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

70 
__VA_ARGS__
)

	)

73 
__f‹tify_fun˘i⁄
 

74 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

75 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

77  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

78 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

79 
	}
}

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

85 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

86 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

87 
__¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

88 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

89 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

90 
__v¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

91 
_G_va_li°
 
__≠
);

93 #ifde‡
__va_¨g_∑ck


94 
__f‹tify_fun˘i⁄
 

95 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° *__ª°ri˘ 
__fmt
, ...)

97  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

98 
	`__va_¨g_∑ck
 ());

99 
	}
}

101 
__f‹tify_fun˘i⁄
 

102 
	$¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, ...)

104  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

105 
	}
}

106 #ñi‡!
deföed
 
__˝lu•lus


107 
	#¥ötf
(...) \

108 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

109 
	#Ârötf
(
°ªam
, ...) \

110 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

113 
__f‹tify_fun˘i⁄
 

114 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

116 #ifde‡
__USE_EXTERN_INLINES


117  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

119  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

121 
	}
}

123 
__f‹tify_fun˘i⁄
 

124 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

125 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

127  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

128 
	}
}

130 #ifde‡
__USE_XOPEN2K8


131 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, c⁄° *
__ª°ri˘
 
__fmt
,

132 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

133 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

134 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

135 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

137 #ifde‡
__va_¨g_∑ck


138 
__f‹tify_fun˘i⁄
 

139 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

141  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

142 
	`__va_¨g_∑ck
 ());

143 
	}
}

144 #ñi‡!
deföed
 
__˝lu•lus


145 
	#d¥ötf
(
fd
, ...) \

146 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

149 
__f‹tify_fun˘i⁄
 

150 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

152  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

153 
	}
}

156 #ifde‡
__USE_GNU


158 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

159 c⁄° *
__ª°ri˘
 
__fmt
, ...)

160 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

161 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

162 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

163 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

164 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

165 
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

167 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

168 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

169 
__Êag
,

170 c⁄° *
__ª°ri˘
 
__f‹m©
,

171 
_G_va_li°
 
__¨gs
)

172 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

174 #ifde‡
__va_¨g_∑ck


175 
__f‹tify_fun˘i⁄
 

176 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
, ...))

178  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

179 
	`__va_¨g_∑ck
 ());

180 
	}
}

182 
__f‹tify_fun˘i⁄
 

183 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

186  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

187 
	`__va_¨g_∑ck
 ());

188 
	}
}

190 
__f‹tify_fun˘i⁄
 

191 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

192 c⁄° *
__ª°ri˘
 
__fmt
, ...))

194  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

195 
	`__va_¨g_∑ck
 ());

196 
	}
}

197 #ñi‡!
deföed
 
__˝lu•lus


198 
	#a•rötf
(
±r
, ...) \

199 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

200 
	#__a•rötf
(
±r
, ...) \

201 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

202 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

203 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

206 
__f‹tify_fun˘i⁄
 

207 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

208 
_G_va_li°
 
__≠
))

210  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

211 
	}
}

213 
__f‹tify_fun˘i⁄
 

214 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

215 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

217  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

218 
__≠
);

219 
	}
}

225 #i‡!
deföed
 
__USE_ISOC11
 \

226 || (
deföed
 
	g__˝lu•lus
 && __˝lu•lu†<201103L && !deföed 
__USE_GNU
)

227 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

228 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

229 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

232 
__f‹tify_fun˘i⁄
 
__wur
 *

233 
	$gës
 (*
__°r
)

235 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

236  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

237  
	`__gës_w¨n
 (
__°r
);

238 
	}
}

241 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

242 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

243 *
	`__REDIRECT
 (
__fgës_Æüs
,

244 (*
__ª°ri˘
 
__s
, 
__n
,

245 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

246 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

247 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

248 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

249 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

252 
__f‹tify_fun˘i⁄
 
__wur
 *

253 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

255 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

257 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

258  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

260 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

261  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

263  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

264 
	}
}

266 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

267 
size_t
 
__size
, size_à
__n
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

269 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

270 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

271 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

272 
‰ód
Ë
__wur
;

273 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

274 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

275 
size_t
 
__size
, size_à
__n
,

276 
FILE
 *
__ª°ri˘
 
__°ªam
),

277 
__‰ód_chk
)

278 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

281 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


282 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

283 
FILE
 *
__ª°ri˘
 
__°ªam
)

285 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

287 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

288 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

289 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

290  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

292 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

293  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

295  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

296 
	}
}

298 #ifde‡
__USE_GNU


299 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

300 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

301 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

302 (*
__ª°ri˘
 
__s
, 
__n
,

303 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

304 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

305 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

306 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

307 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

310 
__f‹tify_fun˘i⁄
 
__wur
 *

311 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

313 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

315 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

316  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

318 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

319  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

321  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

322 
	}
}

325 #ifde‡
__USE_MISC


326 #unde‡
‰ód_u∆ocked


327 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

328 
size_t
 
__size
, size_à
__n
,

329 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

330 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

331 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

332 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

333 
‰ód_u∆ocked
Ë
__wur
;

334 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

335 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

336 
size_t
 
__size
, size_à
__n
,

337 
FILE
 *
__ª°ri˘
 
__°ªam
),

338 
__‰ód_u∆ocked_chk
)

339 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

342 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


343 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

344 
FILE
 *
__ª°ri˘
 
__°ªam
)

346 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

349 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

350 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

351  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

352 
__°ªam
);

354 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

355  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

356 
__°ªam
);

359 #ifde‡
__USE_EXTERN_INLINES


360 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

361 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

362 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

363 && 
__size
 * 
__n
 <= 8)

365 
size_t
 
__˙t
 = 
__size
 * 
__n
;

366 *
__˝å
 = (*Ë
__±r
;

367 i‡(
__˙t
 == 0)

370 ; 
__˙t
 > 0; --__cnt)

372 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

373 i‡(
__c
 =
EOF
)

375 *
__˝å
++ = 
__c
;

377  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

380  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

381 
	}
}

	@/usr/include/bits/stdio_lim.h

18 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


22 #ifde‡
_STDIO_H


23 
	#L_tm≤am
 20

	)

24 
	#TMP_MAX
 238328

	)

25 
	#FILENAME_MAX
 4096

	)

27 #ifde‡
__USE_POSIX


28 
	#L_˘îmid
 9

	)

29 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


30 
	#L_cu£rid
 9

	)

35 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


36 #unde‡
FOPEN_MAX


37 
	#FOPEN_MAX
 16

	)

40 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


41 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-bsearch.h

19 
__exã∫_ölöe
 *

20 
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

21 
__com∑r_‚_t
 
__com∑r
)

23 
size_t
 
__l
, 
__u
, 
__idx
;

24 c⁄° *
__p
;

25 
__com∑ris⁄
;

27 
__l
 = 0;

28 
__u
 = 
__nmemb
;

29 
__l
 < 
__u
)

31 
__idx
 = (
__l
 + 
__u
) / 2;

32 
__p
 = (*Ë(((c⁄° *Ë
__ba£
Ë+ (
__idx
 * 
__size
));

33 
__com∑ris⁄
 = (*
__com∑r
Ë(
__key
, 
__p
);

34 i‡(
__com∑ris⁄
 < 0)

35 
__u
 = 
__idx
;

36 i‡(
__com∑ris⁄
 > 0)

37 
__l
 = 
__idx
 + 1;

39  (*Ë
__p
;

42  
NULL
;

43 
	}
}

	@/usr/include/bits/stdlib-float.h

19 #i‚de‡
_STDLIB_H


23 #ifde‡
__USE_EXTERN_INLINES


24 
__BEGIN_NAMESPACE_STD


25 
__exã∫_ölöe
 

26 
__NTH
 (
	$©of
 (c⁄° *
__≈å
))

28  
	`°πod
 (
__≈å
, (**Ë
NULL
);

29 
	}
}

30 
	g__END_NAMESPACE_STD


	@/usr/include/bits/stdlib-ldbl.h

19 #i‚de‡
_STDLIB_H


23 #ifdef 
__USE_ISOC99


24 
__BEGIN_NAMESPACE_C99


25 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

26 
__END_NAMESPACE_C99


29 #ifde‡
__USE_GNU


30 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

33 #ifde‡
__USE_MISC


34 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

35 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

36 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

38 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

19 #i‚de‡
_STDLIB_H


23 *
	$__ªÆ∑th_chk
 (c⁄° *
__ª°ri˘
 
__«me
,

24 *
__ª°ri˘
 
__ªsﬁved
,

25 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

26 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

27 (c⁄° *
__ª°ri˘
 
__«me
,

28 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

29 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

30 (c⁄° *
__ª°ri˘
 
__«me
,

31 *
__ª°ri˘
 
__ªsﬁved
,

32 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


33 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

36 
__f‹tify_fun˘i⁄
 
__wur
 *

37 
	`__NTH
 (
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

39 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

41 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


42 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

43  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

45  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

48  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

49 
	}
}

52 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

53 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

54 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

55 
size_t
 
__buÊí
), 
±¢ame_r
)

56 
	`__n⁄nuŒ
 ((2));

57 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

58 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

59 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

60 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

63 
__f‹tify_fun˘i⁄
 

64 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

66 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

68 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

69  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

70 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

71  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

73  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

74 
	}
}

77 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

78 
__THROW
 
__wur
;

79 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

80 
w˘omb
Ë
__wur
;

82 
__f‹tify_fun˘i⁄
 
__wur
 

83 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

88 
	#__STDLIB_MB_LEN_MAX
 16

	)

89 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


92 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

93  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

94  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

95 
	}
}

98 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

99 c⁄° *
__ª°ri˘
 
__§c
,

100 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

101 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

102 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

103 c⁄° *
__ª°ri˘
 
__§c
,

104 
size_t
 
__Àn
), 
mb°owcs
);

105 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

106 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

107 c⁄° *
__ª°ri˘
 
__§c
,

108 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

109 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

112 
__f‹tify_fun˘i⁄
 
size_t


113 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° *__ª°ri˘ 
__§c
,

114 
size_t
 
__Àn
))

116 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

118 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

119  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

120 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

122 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

123  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

124 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

126  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

127 
	}
}

130 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

131 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

132 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

133 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

134 (*
__ª°ri˘
 
__d°
,

135 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

136 
size_t
 
__Àn
), 
wc°ombs
);

137 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

138 (*
__ª°ri˘
 
__d°
,

139 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

140 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

141 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

143 
__f‹tify_fun˘i⁄
 
size_t


144 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__§c
,

145 
size_t
 
__Àn
))

147 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

149 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

150  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

151 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

152  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

154  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

155 
	}
}

	@/usr/include/bits/string.h

19 #i‚de‡
_STRING_H


24 
	#_STRING_ARCH_u«lig√d
 1

	)

28 #i‡!
deföed
 
__x86_64__
 && (deföed 
__i486__
 || deföed 
__≥¡ium__
 \

29 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

30 || 
deföed
 
	g__noc⁄a__
 || deföed 
	g__©om__
 \

31 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__c‹ei7__
 \

32 || 
deföed
 
	g__k6__
 || deföed 
	g__geode__
 \

33 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

34 || 
deföed
 
	g__amdÁm10__
)

38 #i‡!
deföed
 
__NO_STRING_INLINES
 && deföed 
__USE_STRING_INLINES
 \

39 && 
deföed
 
	g__GNUC__
 && __GNUC__ >= 2

41 #i‚de‡
__STRING_INLINE


42 #i‚de‡
__exã∫_ölöe


43 
	#__STRING_INLINE
 
ölöe


	)

45 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

50 
	#__STRING_SMALL_GET16
(
§c
, 
idx
) \

51 ((((c⁄° *Ë(
§c
))[
idx
 + 1] << 8) \

52 | ((c⁄° *Ë(
§c
))[
idx
])

	)

53 
	#__STRING_SMALL_GET32
(
§c
, 
idx
) \

54 (((((c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

55 | ((c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

56 | ((c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

57 | ((c⁄° *Ë(
§c
))[
idx
])

	)

61 
	#_HAVE_STRING_ARCH_mem˝y
 1

	)

62 
	#mem˝y
(
de°
, 
§c
, 
n
) \

63 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

64 ? 
	`__mem˝y_c
 ((
de°
), (
§c
), (
n
)) \

65 : 
	`__mem˝y_g
 ((
de°
), (
§c
), (
n
))))

	)

66 
	#__mem˝y_c
(
de°
, 
§c
, 
n
) \

67 ((
n
) == 0 \

68 ? (
de°
) \

69 : (((
n
) % 4 == 0) \

70 ? 
	`__mem˝y_by4
 (
de°
, 
§c
, 
n
) \

71 : (((
n
) % 2 == 0) \

72 ? 
	`__mem˝y_by2
 (
de°
, 
§c
, 
n
) \

73 : 
	`__mem˝y_g
 (
de°
, 
§c
, 
n
))))

	)

75 
__STRING_INLINE
 *
__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
,

76 
size_t
 
__n
);

78 
__STRING_INLINE
 *

79 
	$__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

81 
__d0
, 
__d1
;

82 *
__tmp
 = 
__de°
;

83 
__asm__
 
__vﬁ©ûe__


91 : "=&r" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

92 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 4)

94  
__de°
;

95 
	}
}

97 
__STRING_INLINE
 *
__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
,

98 
size_t
 
__n
);

100 
__STRING_INLINE
 *

101 
	$__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

103 
__d0
, 
__d1
;

104 *
__tmp
 = 
__de°
;

105 
__asm__
 
__vﬁ©ûe__


118 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

119 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 2)

121  
__de°
;

122 
	}
}

124 
__STRING_INLINE
 *
__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
);

126 
__STRING_INLINE
 *

127 
	$__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

129 
__d0
, 
__d1
, 
__d2
;

130 *
__tmp
 = 
__de°
;

131 
__asm__
 
__vﬁ©ûe__


142 : "=&c" (
__d0
), "=&D" (
__d1
), "=&S" (
__d2
),

143 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

144 : "0" (
__n
), "1" (
__tmp
), "2" (
__§c
),

145 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
)

147  
__de°
;

148 
	}
}

150 
	#_HAVE_STRING_ARCH_memmove
 1

	)

151 #i‚de‡
_FORCE_INLINES


154 
	#memmove
(
de°
, 
§c
, 
n
Ë
	`__memmove_g
 (de°, src,Ç)

	)

156 
__STRING_INLINE
 *
	$__memmove_g
 (*, c⁄° *, 
size_t
)

157 
	`__asm__
 ("memmove");

159 
__STRING_INLINE
 *

160 
	$__memmove_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

162 
__d0
, 
__d1
, 
__d2
;

163 *
__tmp
 = 
__de°
;

164 i‡(
__de°
 < 
__§c
)

165 
__asm__
 
__vﬁ©ûe__


168 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

169 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

170 : "0" (
__n
), "1" (
__§c
), "2" (
__tmp
),

171 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

173 
__asm__
 
__vﬁ©ûe__


177 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

178 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

179 : "0" (
__n
), "1" (__¿- 1 + (c⁄° *Ë
__§c
),

180 "2" (
__n
 - 1 + (*Ë
__tmp
),

181 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

182  
__de°
;

183 
	}
}

187 
	#_HAVE_STRING_ARCH_memcmp
 1

	)

188 #i‚de‡
_FORCE_INLINES


189 #i‚de‡
__PIC__


191 
__STRING_INLINE
 

192 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

194 
__d0
, 
__d1
, 
__d2
;

195 
__ªs
;

196 
__asm__
 
__vﬁ©ûe__


204 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

205 : "0" (0), "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

206 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

207 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

209  
__ªs
;

210 
	}
}

215 
	#_HAVE_STRING_ARCH_mem£t
 1

	)

216 
	#_USE_STRING_ARCH_mem£t
 1

	)

217 
	#mem£t
(
s
, 
c
, 
n
) \

218 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

219 ? ((
n
) == 1 \

220 ? 
	`__mem£t_c1
 ((
s
), (
c
)) \

221 : 
	`__mem£t_gc
 ((
s
), (
c
), (
n
))) \

222 : (
	`__buûtö_c⁄°™t_p
 (
c
) \

223 ? (
	`__buûtö_c⁄°™t_p
 (
n
) \

224 ? 
	`__mem£t_c˙
 ((
s
), (
c
), (
n
)) \

225 : 
	`mem£t
 ((
s
), (
c
), (
n
))) \

226 : (
	`__buûtö_c⁄°™t_p
 (
n
) \

227 ? 
	`__mem£t_g˙
 ((
s
), (
c
), (
n
)) \

228 : 
	`mem£t
 ((
s
), (
c
), (
n
))))))

	)

230 
	#__mem£t_c1
(
s
, 
c
Ë({ *
__s
 = (s); \

231 *((*Ë
__s
Ë(Ë(
c
); \

232 
__s
; })

	)

234 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

235 ({ *
__s
 = (
s
); \

237 
__ui
; \

238 
__usi
; \

239 
__uc
; \

240 } *
__u
 = 
__s
; \

241 
__c
 = ((Ë((Ë(
c
))) * 0x01010101; \

247 i‡((
n
) == 3 || (n) >= 5) \

248 
__asm__
 
	`__vﬁ©ûe__
 ("" : "Ù" (
__c
) : "0" (__c)); \

251 
n
) \

254 
__u
->
__ui
 = 
__c
; \

255 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

257 
__u
->
__ui
 = 
__c
; \

258 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

260 
__u
->
__ui
 = 
__c
; \

261 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

263 
__u
->
__usi
 = (Ë
__c
; \

264 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

265 
__u
->
__uc
 = (Ë
__c
; \

269 
__u
->
__ui
 = 
__c
; \

270 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

272 
__u
->
__ui
 = 
__c
; \

273 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

275 
__u
->
__ui
 = 
__c
; \

276 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

278 
__u
->
__usi
 = (Ë
__c
; \

282 
__u
->
__ui
 = 
__c
; \

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

285 
__u
->
__ui
 = 
__c
; \

286 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

288 
__u
->
__ui
 = 
__c
; \

289 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

291 
__u
->
__uc
 = (Ë
__c
; \

295 
__u
->
__ui
 = 
__c
; \

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

298 
__u
->
__ui
 = 
__c
; \

299 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

301 
__u
->
__ui
 = 
__c
; \

302 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

304 
__u
->
__ui
 = 
__c
; \

309 
__s
; })

	)

311 
	#__mem£t_c˙
(
s
, 
c
, 
n
) \

312 (((
n
) % 4 == 0) \

313 ? 
	`__mem£t_c˙_by4
 (
s
, ((Ë((Ë(
c
))) * 0x01010101,\

314 
n
) \

315 : (((
n
) % 2 == 0) \

316 ? 
	`__mem£t_c˙_by2
 (
s
, \

317 ((Ë((Ë(
c
))) * 0x01010101,\

318 
n
) \

319 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

321 
__STRING_INLINE
 *
__mem£t_c˙_by4
 (*
__s
, 
__c
,

322 
size_t
 
__n
);

324 
__STRING_INLINE
 *

325 
	$__mem£t_c˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

327 *
__tmp
 = 
__s
;

328 
__d0
;

329 #ifde‡
__i686__


330 
__asm__
 
__vﬁ©ûe__


333 : "=&a" (
__c
), "=&D" (
__tmp
), "=&c" (
__d0
),

334 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

335 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

338 
__asm__
 
__vﬁ©ûe__


344 : "=&r" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

345 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

346 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

349  
__s
;

350 
	}
}

352 
__STRING_INLINE
 *
__mem£t_c˙_by2
 (*
__s
, 
__c
,

353 
size_t
 
__n
);

355 
__STRING_INLINE
 *

356 
	$__mem£t_c˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

358 
__d0
, 
__d1
;

359 *
__tmp
 = 
__s
;

360 #ifde‡
__i686__


361 
__asm__
 
__vﬁ©ûe__


365 : "=&a" (
__d0
), "=&D" (
__tmp
), "=&c" (
__d1
),

366 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

367 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

370 
__asm__
 
__vﬁ©ûe__


376 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

377 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

378 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

381  
__s
;

382 
	}
}

384 
	#__mem£t_g˙
(
s
, 
c
, 
n
) \

385 (((
n
) % 4 == 0) \

386 ? 
	`__mem£t_g˙_by4
 (
s
, 
c
, 
n
) \

387 : (((
n
) % 2 == 0) \

388 ? 
	`__mem£t_g˙_by2
 (
s
, 
c
, 
n
) \

389 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

391 
__STRING_INLINE
 *
__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
);

393 
__STRING_INLINE
 *

394 
	$__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

396 *
__tmp
 = 
__s
;

397 
__d0
;

398 
__asm__
 
__vﬁ©ûe__


408 : "=&q" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

409 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

410 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

412  
__s
;

413 
	}
}

415 
__STRING_INLINE
 *
__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
);

417 
__STRING_INLINE
 *

418 
	$__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

420 
__d0
, 
__d1
;

421 *
__tmp
 = 
__s
;

422 
__asm__
 
__vﬁ©ûe__


433 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

434 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

435 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

437  
__s
;

438 
	}
}

442 
	#_HAVE_STRING_ARCH_memchr
 1

	)

443 #i‚de‡
_FORCE_INLINES


444 
__STRING_INLINE
 *

445 
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

447 
__d0
;

448 #ifde‡
__i686__


449 
__d1
;

451 *
__ªs
;

452 i‡(
__n
 == 0)

453  
NULL
;

454 #ifde‡
__i686__


455 
__asm__
 
__vﬁ©ûe__


459 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

460 : "a" (
__c
), "0" (
__s
), "1" (
__n
), "2" (1),

461 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

464 
__asm__
 
__vﬁ©ûe__


470 : "=D" (
__ªs
), "=&c" (
__d0
)

471 : "a" (
__c
), "0" (
__s
), "1" (
__n
),

472 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

475  
__ªs
 - 1;

476 
	}
}

479 
	#_HAVE_STRING_ARCH_memrchr
 1

	)

480 #i‚de‡
_FORCE_INLINES


481 
__STRING_INLINE
 *
__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
);

483 
__STRING_INLINE
 *

484 
	$__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

486 
__d0
;

487 #ifde‡
__i686__


488 
__d1
;

490 *
__ªs
;

491 i‡(
__n
 == 0)

492  
NULL
;

493 #ifde‡
__i686__


494 
__asm__
 
__vﬁ©ûe__


500 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

501 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n), "2" (-1),

502 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

505 
__asm__
 
__vﬁ©ûe__


512 : "=D" (
__ªs
), "=&c" (
__d0
)

513 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n),

514 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

517  
__ªs
;

518 
	}
}

519 #ifde‡
__USE_GNU


520 
	#memrchr
(
s
, 
c
, 
n
Ë
	`__memrchr
 ((s), (c), (n))

	)

525 
	#_HAVE_STRING_ARCH_øwmemchr
 1

	)

526 
__STRING_INLINE
 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

528 #i‚de‡
_FORCE_INLINES


529 
__STRING_INLINE
 *

530 
	$__øwmemchr
 (c⁄° *
__s
, 
__c
)

532 
__d0
;

533 *
__ªs
;

534 
__asm__
 
__vﬁ©ûe__


537 : "=D" (
__ªs
), "=&c" (
__d0
)

538 : "a" (
__c
), "0" (
__s
), "1" (0xffffffff),

539 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

541  
__ªs
 - 1;

542 
	}
}

543 #ifde‡
__USE_GNU


544 
__STRING_INLINE
 *

545 
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

547  
	`__øwmemchr
 (
__s
, 
__c
);

548 
	}
}

554 
	#_HAVE_STRING_ARCH_°æí
 1

	)

555 
	#°æí
(
°r
) \

556 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
°r
) \

557 ? 
	`__buûtö_°æí
 (
°r
) \

558 : 
	`__°æí_g
 (
°r
)))

	)

559 
__STRING_INLINE
 
size_t
 
__°æí_g
 (c⁄° *
__°r
);

561 
__STRING_INLINE
 
size_t


562 
	$__°æí_g
 (c⁄° *
__°r
)

564 
__dummy
;

565 c⁄° *
__tmp
 = 
__°r
;

566 
__asm__
 
__vﬁ©ûe__


572 : "Ù" (
__tmp
), "=&q" (
__dummy
)

573 : "0" (
__°r
),

574 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__°r
)

576  
__tmp
 - 
__°r
 - 1;

577 
	}
}

581 
	#_HAVE_STRING_ARCH_°r˝y
 1

	)

582 
	#°r˝y
(
de°
, 
§c
) \

583 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

584 ? ( ((
§c
)[0]Ë=1 && 
	`°æí
 (src) + 1 <= 8 \

585 ? 
	`__°r˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

586 : (*Ë
	`mem˝y
 ((*Ë(
de°
), \

587 (c⁄° *Ë(
§c
), \

588 
	`°æí
 (
§c
) + 1)) \

589 : 
	`__°r˝y_g
 ((
de°
), (
§c
))))

	)

591 
	#__°r˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

592 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

594 
__ui
; \

595 
__usi
; \

596 
__uc
; \

597 
__c
; \

598 } *
__u
 = (*Ë
__de°
; \

599 
§˛í
) \

602 
__u
->
__uc
 = '\0'; \

605 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

608 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

609 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

610 
__u
->
__uc
 = '\0'; \

613 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

616 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

617 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

618 
__u
->
__uc
 = '\0'; \

621 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

622 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

623 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

626 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

627 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

628 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

629 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

630 
__u
->
__uc
 = '\0'; \

633 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

634 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

635 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

638 (*Ë
__de°
; }))

	)

640 
__STRING_INLINE
 *
__°r˝y_g
 (*
__de°
, c⁄° *
__§c
);

642 
__STRING_INLINE
 *

643 
	$__°r˝y_g
 (*
__de°
, c⁄° *
__§c
)

645 *
__tmp
 = 
__de°
;

646 
__dummy
;

647 
__asm__
 
__vﬁ©ûe__


656 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
),

657 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

658 : "0" (
__§c
), "1" (
__tmp
),

659 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

661  
__de°
;

662 
	}
}

665 #ifde‡
__USE_GNU


666 
	#_HAVE_STRING_ARCH_°p˝y
 1

	)

668 
	#__°p˝y
(
de°
, 
§c
) \

669 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

670 ? (
	`°æí
 (
§c
) + 1 <= 8 \

671 ? 
	`__°p˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

672 : 
	`__°p˝y_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1)) \

673 : 
	`__°p˝y_g
 ((
de°
), (
§c
))))

	)

674 
	#__°p˝y_c
(
de°
, 
§c
, 
§˛í
) \

675 ((
§˛í
) % 4 == 0 \

676 ? 
	`__memp˝y_by4
 (
de°
, 
§c
, 
§˛í
) - 1 \

677 : ((
§˛í
) % 2 == 0 \

678 ? 
	`__memp˝y_by2
 (
de°
, 
§c
, 
§˛í
) - 1 \

679 : 
	`__memp˝y_byn
 (
de°
, 
§c
, 
§˛í
Ë- 1))

	)

682 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 ((de°), (§c))

	)

684 
	#__°p˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

685 (
	`__exãnsi⁄__
 ({ union { \

686 
__ui
; \

687 
__usi
; \

688 
__uc
; \

689 
__c
; \

690 } *
__u
 = (*Ë(
de°
); \

691 
§˛í
) \

694 
__u
->
__uc
 = '\0'; \

697 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

698 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

701 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

702 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

703 
__u
->
__uc
 = '\0'; \

706 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

707 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

710 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

711 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

712 
__u
->
__uc
 = '\0'; \

715 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

716 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

717 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

718 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

721 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

722 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

723 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

724 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

725 
__u
->
__uc
 = '\0'; \

728 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

729 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

730 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

731 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

734 (*Ë
__u
; }))

	)

736 
__STRING_INLINE
 *
__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
,

737 
size_t
 
__§˛í
);

739 
__STRING_INLINE
 *

740 
	$__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

742 *
__tmp
 = 
__de°
;

743 
__d0
, 
__d1
;

744 
__asm__
 
__vﬁ©ûe__


752 : "=&r" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

753 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4)

755  
__tmp
;

756 
	}
}

758 
__STRING_INLINE
 *
__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
,

759 
size_t
 
__§˛í
);

761 
__STRING_INLINE
 *

762 
	$__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

764 *
__tmp
 = 
__de°
;

765 
__d0
, 
__d1
;

766 
__asm__
 
__vﬁ©ûe__


779 : "=&q" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
),

780 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

781 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

782 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

784  
__tmp
 + 2;

785 
	}
}

787 
__STRING_INLINE
 *
__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
,

788 
size_t
 
__§˛í
);

790 
__STRING_INLINE
 *

791 
	$__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

793 
__d0
, 
__d1
;

794 *
__tmp
 = 
__de°
;

795 
__asm__
 
__vﬁ©ûe__


806 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

807 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

808 : "0" (
__tmp
), "1" (
__§˛í
), "2" (
__§c
),

809 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

811  
__tmp
;

812 
	}
}

814 
__STRING_INLINE
 *
__°p˝y_g
 (*
__de°
, c⁄° *
__§c
);

816 
__STRING_INLINE
 *

817 
	$__°p˝y_g
 (*
__de°
, c⁄° *
__§c
)

819 *
__tmp
 = 
__de°
;

820 
__dummy
;

821 
__asm__
 
__vﬁ©ûe__


830 : "=&r" (
__§c
), "Ù" (
__tmp
), "=&q" (
__dummy
),

831 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

832 : "0" (
__§c
), "1" (
__tmp
),

833 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

835  
__tmp
 - 1;

836 
	}
}

841 
	#_HAVE_STRING_ARCH_°∫˝y
 1

	)

842 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

843 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

844 ? ((
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

845 ? (*Ë
	`mem˝y
 ((*Ë(
de°
), \

846 (c⁄° *Ë(
§c
), 
n
) \

847 : 
	`__°∫˝y_cg
 ((
de°
), (
§c
), 
	`°æí
 (§cË+ 1, 
n
))) \

848 : 
	`__°∫˝y_gg
 ((
de°
), (
§c
), 
n
)))

	)

849 
	#__°∫˝y_cg
(
de°
, 
§c
, 
§˛í
, 
n
) \

850 (((
§˛í
) % 4 == 0) \

851 ? 
	`__°∫˝y_by4
 (
de°
, 
§c
, 
§˛í
, 
n
) \

852 : (((
§˛í
) % 2 == 0) \

853 ? 
	`__°∫˝y_by2
 (
de°
, 
§c
, 
§˛í
, 
n
) \

854 : 
	`__°∫˝y_byn
 (
de°
, 
§c
, 
§˛í
, 
n
)))

	)

856 
__STRING_INLINE
 *
__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[],

857 
size_t
 
__§˛í
, size_à
__n
);

859 
__STRING_INLINE
 *

860 
	$__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

862 *
__tmp
 = 
__de°
;

863 
__dummy1
, 
__dummy2
;

864 
__asm__
 
__vﬁ©ûe__


872 : "=&r" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

873 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

874 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4),

875 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

877 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

878  
__de°
;

879 
	}
}

881 
__STRING_INLINE
 *
__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[],

882 
size_t
 
__§˛í
, size_à
__n
);

884 
__STRING_INLINE
 *

885 
	$__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

887 *
__tmp
 = 
__de°
;

888 
__dummy1
, 
__dummy2
;

889 
__asm__
 
__vﬁ©ûe__


902 : "=&q" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

903 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

904 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

905 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

907 (Ë
	`mem£t
 (
__tmp
 + 2, '\0', 
__n
 - 
__§˛í
);

908  
__de°
;

909 
	}
}

911 
__STRING_INLINE
 *
__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[],

912 
size_t
 
__§˛í
, size_à
__n
);

914 
__STRING_INLINE
 *

915 
	$__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

917 
__d0
, 
__d1
;

918 *
__tmp
 = 
__de°
;

919 
__asm__
 
__vﬁ©ûe__


930 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

931 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

932 : "1" (
__§˛í
), "0" (
__tmp
),"2" (
__§c
),

933 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

935 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

936  
__de°
;

937 
	}
}

939 
__STRING_INLINE
 *
__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
,

940 
size_t
 
__n
);

942 
__STRING_INLINE
 *

943 
	$__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

945 *
__tmp
 = 
__de°
;

946 
__dummy
;

947 i‡(
__n
 > 0)

948 
__asm__
 
__vﬁ©ûe__


964 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
), "=&r" (
__n
)

965 : "0" (
__§c
), "1" (
__tmp
), "3" (
__n
)

968  
__de°
;

969 
	}
}

973 
	#_HAVE_STRING_ARCH_°rˇt
 1

	)

974 
	#°rˇt
(
de°
, 
§c
) \

975 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

976 ? 
	`__°rˇt_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

977 : 
	`__°rˇt_g
 ((
de°
), (
§c
))))

	)

979 
__STRING_INLINE
 *
__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[],

980 
size_t
 
__§˛í
);

982 
__STRING_INLINE
 *

983 
	$__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
)

985 #ifde‡
__i686__


986 
__d0
;

987 *
__tmp
;

988 
__asm__
 
__vﬁ©ûe__


990 : "=D" (
__tmp
), "=&c" (
__d0
),

991 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

992 : "0" (
__de°
), "1" (0xffffffff), "a" (0),

993 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

995 --
__tmp
;

997 *
__tmp
 = 
__de°
 - 1;

998 
__asm__
 
__vﬁ©ûe__


1003 : "Ù" (
__tmp
),

1004 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1005 : "0" (
__tmp
),

1006 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

1009 (Ë
	`mem˝y
 (
__tmp
, 
__§c
, 
__§˛í
);

1010  
__de°
;

1011 
	}
}

1013 
__STRING_INLINE
 *
__°rˇt_g
 (*
__de°
, c⁄° *
__§c
);

1015 
__STRING_INLINE
 *

1016 
	$__°rˇt_g
 (*
__de°
, c⁄° *
__§c
)

1018 *
__tmp
 = 
__de°
 - 1;

1019 
__dummy
;

1020 
__asm__
 
__vﬁ©ûe__


1032 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
),

1033 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1034 : "1" (
__tmp
), "2" (
__§c
),

1035 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

1037  
__de°
;

1038 
	}
}

1042 
	#_HAVE_STRING_ARCH_°∫ˇt
 1

	)

1043 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

1044 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

1045 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

1046 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

1047 ? 
	`°rˇt
 (
__de°
, (
§c
)) \

1048 : (*(*)
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

1049 (c⁄° *Ë(
§c
), \

1050 (
n
)Ë0, 
__de°
)) \

1051 : 
	`__°∫ˇt_g
 (
__de°
, (
§c
), (
n
)); }))

	)

1053 
__STRING_INLINE
 *
__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[],

1054 
size_t
 
__n
);

1056 
__STRING_INLINE
 *

1057 
	$__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__n
)

1059 *
__tmp
 = 
__de°
;

1060 
__dummy
;

1061 #ifde‡
__i686__


1062 
__asm__
 
__vﬁ©ûe__


1076 : "=&a" (
__dummy
), "=&D" (
__tmp
), "=&S" (
__§c
), "=&c" (
__n
)

1077 : "g" (
__n
), "0" (0), "1" (
__tmp
), "2" (
__§c
), "3" (0xffffffff)

1080 --
__tmp
;

1081 
__asm__
 
__vﬁ©ûe__


1098 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__n
)

1099 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
)

1102  
__de°
;

1103 
	}
}

1107 
	#_HAVE_STRING_ARCH_°rcmp
 1

	)

1108 
	#°rcmp
(
s1
, 
s2
) \

1109 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

1110 && ( ((
s1
)[0]Ë!1 || 
	`°æí
 (s1) >= 4) \

1111 && ( ((
s2
)[0]Ë!1 || 
	`°æí
 (s2) >= 4) \

1112 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

1113 (
	`°æí
 (
s1
Ë< såÀ¿(
s2
) \

1114 ? 
	`°æí
 (
s1
Ë: såÀ¿(
s2
)) + 1) \

1115 : (
	`__buûtö_c⁄°™t_p
 (
s1
) &&  ((s1)[0]) == 1 \

1116 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (
s1
) < 4 \

1117 ? (
	`__buûtö_c⁄°™t_p
 (
s2
) &&  ((s2)[0]) == 1 \

1118 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1119 (c⁄° *Ë(
s2
), \

1120 
	`°æí
 (
s1
)) \

1121 : 
	`__°rcmp_cg
 ((c⁄° *Ë(
s1
), \

1122 (c⁄° *Ë(
s2
), \

1123 
	`°æí
 (
s1
))) \

1124 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&&  ((
s1
)[0]) == 1 \

1125 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (s2) < 4 \

1126 ? (
	`__buûtö_c⁄°™t_p
 (
s1
) \

1127 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1128 (c⁄° *Ë(
s2
), \

1129 
	`°æí
 (
s2
)) \

1130 : 
	`__°rcmp_gc
 ((c⁄° *Ë(
s1
), \

1131 (c⁄° *Ë(
s2
), \

1132 
	`°æí
 (
s2
))) \

1133 : 
	`__°rcmp_gg
 ((
s1
), (
s2
))))))

	)

1135 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

1136 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = (
s1
)[0] - (
s2
)[0]; \

1137 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

1139 
__ªsu…
 = (
s1
)[1] - (
s2
)[1]; \

1140 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

1142 
__ªsu…
 = (
s1
)[2] - (
s2
)[2]; \

1143 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

1144 
__ªsu…
 = (
s1
)[3] - (
s2
)[3]; \

1147 
__ªsu…
; }))

	)

1149 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

1150 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = (
s2
); \

1151 
__ªsu…
 = (
s1
)[0] - 
__s2
[0]; \

1152 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

1154 
__ªsu…
 = (
s1
)[1] - 
__s2
[1]; \

1155 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

1157 
__ªsu…
 = (
s1
)[2] - 
__s2
[2]; \

1158 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

1159 
__ªsu…
 = (
s1
)[3] - 
__s2
[3]; \

1162 
__ªsu…
; }))

	)

1164 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

1165 (
	`__exãnsi⁄__
 ({ c⁄° *
__s1
 = (
s1
); \

1166 
__ªsu…
 = 
__s1
[0] - (
s2
)[0]; \

1167 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

1169 
__ªsu…
 = 
__s1
[1] - (
s2
)[1]; \

1170 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

1172 
__ªsu…
 = 
__s1
[2] - (
s2
)[2]; \

1173 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

1174 
__ªsu…
 = 
__s1
[3] - (
s2
)[3]; \

1177 
__ªsu…
; }))

	)

1179 
__STRING_INLINE
 
__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
);

1181 
__STRING_INLINE
 

1182 
	$__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
)

1184 
__ªs
;

1185 
__asm__
 
__vﬁ©ûe__


1201 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
)

1202 : "1" (
__s1
), "2" (
__s2
),

1203 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s1
),

1204 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s2
)

1206  
__ªs
;

1207 
	}
}

1211 
	#_HAVE_STRING_ARCH_°∫cmp
 1

	)

1212 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

1213 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`°æí
 (s1Ë< ((
size_t
Ë(
n
)) \

1214 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1215 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`°æí
 (s2Ë< ((
size_t
Ë(
n
))\

1216 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1217 : 
	`__°∫cmp_g
 ((
s1
), (
s2
), (
n
)))))

	)

1219 
__STRING_INLINE
 
__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
,

1220 
size_t
 
__n
);

1222 
__STRING_INLINE
 

1223 
	$__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

1225 
__ªs
;

1226 
__asm__
 
__vﬁ©ûe__


1245 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
), "=&r" (
__n
)

1246 : "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

1247 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

1248 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

1250  
__ªs
;

1251 
	}
}

1255 
	#_HAVE_STRING_ARCH_°rchr
 1

	)

1256 
	#_USE_STRING_ARCH_°rchr
 1

	)

1257 
	#°rchr
(
s
, 
c
) \

1258 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1259 ? ((
c
) == '\0' \

1260 ? (*Ë
	`__øwmemchr
 ((
s
), (
c
)) \

1261 : 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1262 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1264 
__STRING_INLINE
 *
__°rchr_c
 (c⁄° *
__s
, 
__c
);

1266 
__STRING_INLINE
 *

1267 
	$__°rchr_c
 (c⁄° *
__s
, 
__c
)

1269 
__d0
;

1270 *
__ªs
;

1271 
__asm__
 
__vﬁ©ûe__


1281 : "Ù" (
__ªs
), "=&a" (
__d0
)

1282 : "0" (
__s
), "1" (
__c
),

1283 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1285  
__ªs
;

1286 
	}
}

1288 
__STRING_INLINE
 *
__°rchr_g
 (c⁄° *
__s
, 
__c
);

1290 
__STRING_INLINE
 *

1291 
	$__°rchr_g
 (c⁄° *
__s
, 
__c
)

1293 
__d0
;

1294 *
__ªs
;

1295 
__asm__
 
__vﬁ©ûe__


1306 : "Ù" (
__ªs
), "=&a" (
__d0
)

1307 : "0" (
__s
), "1" (
__c
),

1308 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1310  
__ªs
;

1311 
	}
}

1315 
	#_HAVE_STRING_ARCH_°rch∫ul
 1

	)

1316 
	#__°rch∫ul
(
s
, 
c
) \

1317 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1318 ? ((
c
) == '\0' \

1319 ? (*Ë
	`__øwmemchr
 ((
s
), 
c
) \

1320 : 
	`__°rch∫ul_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1321 : 
	`__°rch∫ul_g
 ((
s
), 
c
)))

	)

1323 
__STRING_INLINE
 *
__°rch∫ul_c
 (c⁄° *
__s
, 
__c
);

1325 
__STRING_INLINE
 *

1326 
	$__°rch∫ul_c
 (c⁄° *
__s
, 
__c
)

1328 
__d0
;

1329 *
__ªs
;

1330 
__asm__
 
__vﬁ©ûe__


1340 : "Ù" (
__ªs
), "=&a" (
__d0
)

1341 : "0" (
__s
), "1" (
__c
),

1342 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1344  
__ªs
;

1345 
	}
}

1347 
__STRING_INLINE
 *
__°rch∫ul_g
 (c⁄° *
__s
, 
__c
);

1349 
__STRING_INLINE
 *

1350 
	$__°rch∫ul_g
 (c⁄° *
__s
, 
__c
)

1352 
__d0
;

1353 *
__ªs
;

1354 
__asm__
 
__vﬁ©ûe__


1365 : "Ù" (
__ªs
), "=&a" (
__d0
)

1366 : "0" (
__s
), "1" (
__c
),

1367 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1369  
__ªs
;

1370 
	}
}

1371 #ifde‡
__USE_GNU


1372 
	#°rch∫ul
(
s
, 
c
Ë
	`__°rch∫ul
 ((s), (c))

	)

1376 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1378 
	#_HAVE_STRING_ARCH_ödex
 1

	)

1379 
	#ödex
(
s
, 
c
) \

1380 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1381 ? 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1382 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1387 
	#_HAVE_STRING_ARCH_°ºchr
 1

	)

1388 
	#°ºchr
(
s
, 
c
) \

1389 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1390 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1391 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1393 #ifde‡
__i686__


1394 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1396 
__STRING_INLINE
 *

1397 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1399 
__d0
, 
__d1
;

1400 *
__ªs
;

1401 
__asm__
 
__vﬁ©ûe__


1409 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1410 : "0" (1), "1" (
__s
), "2" (
__c
),

1411 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1413  
__ªs
 - 1;

1414 
	}
}

1416 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1418 
__STRING_INLINE
 *

1419 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1421 
__d0
, 
__d1
;

1422 *
__ªs
;

1423 
__asm__
 
__vﬁ©ûe__


1432 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1433 : "0" (1), "1" (
__s
), "2" (
__c
),

1434 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1436  
__ªs
 - 1;

1437 
	}
}

1439 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1441 
__STRING_INLINE
 *

1442 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1444 
__d0
, 
__d1
;

1445 *
__ªs
;

1446 
__asm__
 
__vﬁ©ûe__


1456 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1457 : "0" (0), "1" (
__s
), "2" (
__c
),

1458 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1460  
__ªs
;

1461 
	}
}

1463 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1465 
__STRING_INLINE
 *

1466 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1468 
__d0
, 
__d1
;

1469 *
__ªs
;

1470 
__asm__
 
__vﬁ©ûe__


1481 : "Ù" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1482 : "0" (0), "1" (
__s
), "2" (
__c
),

1483 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1485  
__ªs
;

1486 
	}
}

1490 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1492 
	#_HAVE_STRING_ARCH_rödex
 1

	)

1493 
	#rödex
(
s
, 
c
) \

1494 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1495 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1496 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1502 
	#_HAVE_STRING_ARCH_°rc•n
 1

	)

1503 
	#°rc•n
(
s
, 
ªje˘
) \

1504 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
) &&  ((reject)[0]) == 1 \

1505 ? ((
ªje˘
)[0] == '\0' \

1506 ? 
	`°æí
 (
s
) \

1507 : ((
ªje˘
)[1] == '\0' \

1508 ? 
	`__°rc•n_c1
 ((
s
), (((
ªje˘
)[0] << 8) & 0xff00)) \

1509 : 
	`__°rc•n_cg
 ((
s
), (
ªje˘
), 
	`°æí
 (reject)))) \

1510 : 
	`__°rc•n_g
 ((
s
), (
ªje˘
))))

	)

1512 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

1514 #i‚de‡
_FORCE_INLINES


1515 
__STRING_INLINE
 
size_t


1516 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

1518 
__d0
;

1519 *
__ªs
;

1520 
__asm__
 
__vﬁ©ûe__


1529 : "Ù" (
__ªs
), "=&a" (
__d0
)

1530 : "0" (
__s
), "1" (
__ªje˘
),

1531 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1533  (
__ªs
 - 1Ë- 
__s
;

1534 
	}
}

1537 
__STRING_INLINE
 
size_t
 
__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[],

1538 
size_t
 
__ªje˘_Àn
);

1540 
__STRING_INLINE
 
size_t


1541 
	$__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[], 
size_t
 
__ªje˘_Àn
)

1543 
__d0
, 
__d1
, 
__d2
;

1544 c⁄° *
__ªs
;

1545 
__asm__
 
__vﬁ©ûe__


1556 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1557 : "0" (
__s
), "d" (
__ªje˘
), "g" (
__ªje˘_Àn
)

1559  (
__ªs
 - 1Ë- 
__s
;

1560 
	}
}

1562 
__STRING_INLINE
 
size_t
 
__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
);

1563 #ifde‡
__PIC__


1565 
__STRING_INLINE
 
size_t


1566 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1568 
__d0
, 
__d1
, 
__d2
;

1569 c⁄° *
__ªs
;

1570 
__asm__
 
__vﬁ©ûe__


1587 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1588 : "r" (
__ªje˘
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1590  (
__ªs
 - 1Ë- 
__s
;

1591 
	}
}

1593 
__STRING_INLINE
 
size_t


1594 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1596 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1597 c⁄° *
__ªs
;

1598 
__asm__
 
__vﬁ©ûe__


1612 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1613 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ªje˘
), "b" (__reject)

1616  (
__ªs
 - 1Ë- 
__s
;

1617 
	}
}

1623 
	#_HAVE_STRING_ARCH_°r•n
 1

	)

1624 
	#°r•n
(
s
, 
ac˚±
) \

1625 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1626 ? ((
ac˚±
)[0] == '\0' \

1627 ? ((Ë(
s
), 0) \

1628 : ((
ac˚±
)[1] == '\0' \

1629 ? 
	`__°r•n_c1
 ((
s
), (((
ac˚±
)[0] << 8 ) & 0xff00)) \

1630 : 
	`__°r•n_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1631 : 
	`__°r•n_g
 ((
s
), (
ac˚±
))))

	)

1633 #i‚de‡
_FORCE_INLINES


1634 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1636 
__STRING_INLINE
 
size_t


1637 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1639 
__d0
;

1640 *
__ªs
;

1642 
__asm__
 
__vﬁ©ûe__


1648 : "Ù" (
__ªs
), "=&q" (
__d0
)

1649 : "0" (
__s
), "1" (
__ac˚±
),

1650 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1652  (
__ªs
 - 1Ë- 
__s
;

1653 
	}
}

1656 
__STRING_INLINE
 
size_t
 
__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1657 
size_t
 
__ac˚±_Àn
);

1659 
__STRING_INLINE
 
size_t


1660 
	$__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1662 
__d0
, 
__d1
, 
__d2
;

1663 c⁄° *
__ªs
;

1664 
__asm__
 
__vﬁ©ûe__


1675 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1676 : "0" (
__s
), "g" (
__ac˚±
), "g" (
__ac˚±_Àn
),

1679 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
),

1680 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__ac˚±_Àn
]; } *)
__ac˚±
)

1682  (
__ªs
 - 1Ë- 
__s
;

1683 
	}
}

1685 
__STRING_INLINE
 
size_t
 
__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1686 #ifde‡
__PIC__


1688 
__STRING_INLINE
 
size_t


1689 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1691 
__d0
, 
__d1
, 
__d2
;

1692 c⁄° *
__ªs
;

1693 
__asm__
 
__vﬁ©ûe__


1709 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1710 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (__accept)

1712  (
__ªs
 - 1Ë- 
__s
;

1713 
	}
}

1715 
__STRING_INLINE
 
size_t


1716 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1718 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1719 c⁄° *
__ªs
;

1720 
__asm__
 
__vﬁ©ûe__


1734 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1735 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ac˚±
), "b" (__accept)

1737  (
__ªs
 - 1Ë- 
__s
;

1738 
	}
}

1743 
	#_HAVE_STRING_ARCH_°Ωbrk
 1

	)

1744 
	#°Ωbrk
(
s
, 
ac˚±
) \

1745 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1746 ? ((
ac˚±
)[0] == '\0' \

1747 ? ((Ë(
s
), (*) 0) \

1748 : ((
ac˚±
)[1] == '\0' \

1749 ? 
	`°rchr
 ((
s
), (
ac˚±
)[0]) \

1750 : 
	`__°Ωbrk_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1751 : 
	`__°Ωbrk_g
 ((
s
), (
ac˚±
))))

	)

1753 
__STRING_INLINE
 *
__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1754 
size_t
 
__ac˚±_Àn
);

1756 
__STRING_INLINE
 *

1757 
	$__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1759 
__d0
, 
__d1
, 
__d2
;

1760 *
__ªs
;

1761 
__asm__
 
__vﬁ©ûe__


1776 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1777 : "0" (
__s
), "d" (
__ac˚±
), "g" (
__ac˚±_Àn
)

1779  
__ªs
;

1780 
	}
}

1782 
__STRING_INLINE
 *
__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1783 #ifde‡
__PIC__


1785 
__STRING_INLINE
 *

1786 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1788 
__d0
, 
__d1
, 
__d2
;

1789 *
__ªs
;

1790 
__asm__
 
__vﬁ©ûe__


1811 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1812 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1814  
__ªs
;

1815 
	}
}

1817 
__STRING_INLINE
 *

1818 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1820 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1821 *
__ªs
;

1822 
__asm__
 
__vﬁ©ûe__


1841 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&d" (
__d2
), "=&D" (
__d3
)

1842 : "0" (
__s
), "1" (0), "2" (0xffffffff), "b" (
__ac˚±
)

1844  
__ªs
;

1845 
	}
}

1850 
	#_HAVE_STRING_ARCH_°r°r
 1

	)

1851 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1852 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
) &&  ((needle)[0]) == 1 \

1853 ? ((
√edÀ
)[0] == '\0' \

1854 ? (
hay°ack
) \

1855 : ((
√edÀ
)[1] == '\0' \

1856 ? 
	`°rchr
 ((
hay°ack
), (
√edÀ
)[0]) \

1857 : 
	`__°r°r_cg
 ((
hay°ack
), (
√edÀ
), \

1858 
	`°æí
 (
√edÀ
)))) \

1859 : 
	`__°r°r_g
 ((
hay°ack
), (
√edÀ
))))

	)

1863 
__STRING_INLINE
 *
__°r°r_cg
 (c⁄° *
__hay°ack
,

1864 c⁄° 
__√edÀ
[],

1865 
size_t
 
__√edÀ_Àn
);

1867 
__STRING_INLINE
 *

1868 
	$__°r°r_cg
 (c⁄° *
__hay°ack
, c⁄° 
__√edÀ
[],

1869 
size_t
 
__√edÀ_Àn
)

1871 
__d0
, 
__d1
, 
__d2
;

1872 *
__ªs
;

1873 
__asm__
 
__vﬁ©ûe__


1886 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

1887 : "g" (
__√edÀ_Àn
), "1" (
__hay°ack
), "d" (
__√edÀ
)

1889  
__ªs
;

1890 
	}
}

1892 
__STRING_INLINE
 *
__°r°r_g
 (c⁄° *
__hay°ack
,

1893 c⁄° *
__√edÀ
);

1894 #ifde‡
__PIC__


1896 
__STRING_INLINE
 *

1897 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1899 
__d0
, 
__d1
, 
__d2
;

1900 *
__ªs
;

1901 
__asm__
 
__vﬁ©ûe__


1920 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
)

1921 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1922 "d" (
__√edÀ
)

1924  
__ªs
;

1925 
	}
}

1927 
__STRING_INLINE
 *

1928 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1930 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1931 *
__ªs
;

1932 
__asm__
 
__vﬁ©ûe__


1949 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1950 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1951 "b" (
__√edÀ
)

1953  
__ªs
;

1954 
	}
}

1960 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1961 #ifde‡
__i686__


1962 
	#_HAVE_STRING_ARCH_ffs
 1

	)

1963 
	#ffs
(
w‹d
Ë(
	`__buûtö_c⁄°™t_p
 (word) \

1964 ? 
	`__buûtö_ffs
 (
w‹d
) \

1965 : ({ 
__˙t
, 
__tmp
; \

1966 
__asm__
 
__vﬁ©ûe__
 \

1969 : "=&r" (
__˙t
), "Ù" (
__tmp
) \

1970 : "rm" (
w‹d
), "1" (-1)); \

1971 
__˙t
 + 1; }))

	)

1973 #i‚de‡
ff¶


1974 
	#ff¶
(
w‹d
Ë
	`ffs
(w‹d)

	)

1979 #i‚de‡
_FORCE_INLINES


1980 #unde‡
__STRING_INLINE


	@/usr/include/bits/string2.h

20 #i‚de‡
_STRING_H


24 #i‚de‡
__NO_STRING_INLINES


41 #i‚de‡
__STRING_INLINE


42 #ifde‡
__˝lu•lus


43 
	#__STRING_INLINE
 
ölöe


	)

45 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

49 #i‡
_STRING_ARCH_u«lig√d


51 
	~<ídün.h
>

52 
	~<bôs/ty≥s.h
>

54 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


55 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

56 (((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

57 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
])

	)

58 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

59 (((((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

60 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

61 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

62 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
])

	)

64 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

65 (((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
] << 8 \

66 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1])

	)

67 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

68 (((((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
] << 8 \

69 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

70 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

71 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 3])

	)

76 
	#__STRING2_COPY_TYPE
(
N
) \

77 °ru˘ { 
__¨r
[
N
]; } \

78 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

79 
	t__STRING2_COPY_TYPE
 (2);

80 
__STRING2_COPY_TYPE
 (3);

81 
__STRING2_COPY_TYPE
 (4);

82 
__STRING2_COPY_TYPE
 (5);

83 
__STRING2_COPY_TYPE
 (6);

84 
__STRING2_COPY_TYPE
 (7);

85 
__STRING2_COPY_TYPE
 (8);

86 #unde‡
__STRING2_COPY_TYPE


92 
	#__°rög2_1b±r_p
(
__x
) \

93 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

96 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


97 #i‡!
__GNUC_PREREQ
 (3, 0)

98 #i‡
_STRING_ARCH_u«lig√d


99 
	#mem£t
(
s
, 
c
, 
n
) \

100 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

101 ? ((
n
) == 1 \

102 ? 
	`__mem£t_1
 (
s
, 
c
) \

103 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

104 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

105 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

106 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

108 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

109 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

111 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

112 ({ *
__s
 = (
s
); \

114 
__ui
; \

115 
__usi
; \

116 
__uc
; \

117 } *
__u
 = 
__s
; \

118 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

121 (Ë(
n
)) \

124 
__u
->
__ui
 = 
__c
 * 0x01010101; \

125 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

127 
__u
->
__ui
 = 
__c
 * 0x01010101; \

128 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

130 
__u
->
__ui
 = 
__c
 * 0x01010101; \

131 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

133 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

134 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

135 
__u
->
__uc
 = (Ë
__c
; \

139 
__u
->
__ui
 = 
__c
 * 0x01010101; \

140 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

142 
__u
->
__ui
 = 
__c
 * 0x01010101; \

143 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

145 
__u
->
__ui
 = 
__c
 * 0x01010101; \

146 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

148 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

152 
__u
->
__ui
 = 
__c
 * 0x01010101; \

153 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

155 
__u
->
__ui
 = 
__c
 * 0x01010101; \

156 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

158 
__u
->
__ui
 = 
__c
 * 0x01010101; \

159 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

161 
__u
->
__uc
 = (Ë
__c
; \

165 
__u
->
__ui
 = 
__c
 * 0x01010101; \

166 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

168 
__u
->
__ui
 = 
__c
 * 0x01010101; \

169 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

171 
__u
->
__ui
 = 
__c
 * 0x01010101; \

172 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

174 
__u
->
__ui
 = 
__c
 * 0x01010101; \

179 
__s
; })

	)

181 
	#mem£t
(
s
, 
c
, 
n
) \

182 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

183 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

184 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

193 #i‡
__GNUC_PREREQ
 (2, 91)

194 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

202 #ifde‡
__USE_GNU


203 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


204 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


205 #i‡
__GNUC_PREREQ
 (3, 4)

206 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

207 #ñi‡
__GNUC_PREREQ
 (3, 0)

208 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

209 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

210 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

211 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

212 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

214 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

215 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

216 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

217 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

218 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

222 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

225 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


226 #i‡
_STRING_ARCH_u«lig√d


227 #i‚de‡
_FORCE_INLINES


228 
	#__memp˝y_¨gs
(
§c
) \

229 ((c⁄° *Ë(
§c
))[0], ((const *) (src))[2], \

230 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[6], \

231 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

236 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

237 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

238 
__uöt32_t
, 
size_t
);

239 
__STRING_INLINE
 *

240 
	$__memp˝y_smÆl
 (*
__de°1
,

241 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

242 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

243 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

244 
size_t
 
__§˛í
)

247 
__uöt32_t
 
__ui
;

248 
__uöt16_t
 
__usi
;

249 
__uc
;

250 
__c
;

251 } *
__u
 = 
__de°1
;

252 (Ë
__§˛í
)

255 
__u
->
__c
 = 
__§c0_1
;

256 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

259 
__u
->
__usi
 = 
__§c0_2
;

260 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

263 
__u
->
__usi
 = 
__§c0_2
;

264 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

265 
__u
->
__c
 = 
__§c2_1
;

266 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

269 
__u
->
__ui
 = 
__§c0_4
;

270 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

273 
__u
->
__ui
 = 
__§c0_4
;

274 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

275 
__u
->
__c
 = 
__§c4_1
;

276 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

279 
__u
->
__ui
 = 
__§c0_4
;

280 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

281 
__u
->
__usi
 = 
__§c4_2
;

282 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

285 
__u
->
__ui
 = 
__§c0_4
;

286 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

287 
__u
->
__usi
 = 
__§c4_2
;

288 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

289 
__u
->
__c
 = 
__§c6_1
;

290 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

293 
__u
->
__ui
 = 
__§c0_4
;

294 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

295 
__u
->
__ui
 = 
__§c4_4
;

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

299  (*Ë
__u
;

300 
	}
}

302 #i‚de‡
_FORCE_INLINES


303 
	#__memp˝y_¨gs
(
§c
) \

304 ((c⁄° *Ë(
§c
))[0], \

305 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

306 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1] } }), \

307 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

308 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

309 ((c⁄° *Ë(
§c
))[2] } }), \

310 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

311 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

312 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3] } }), \

313 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

314 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

315 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

316 ((c⁄° *Ë(
§c
))[4] } }), \

317 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

318 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

319 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

320 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5] } }), \

321 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

322 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

323 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

324 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

325 ((c⁄° *Ë(
§c
))[6] } }), \

326 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

327 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

328 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

329 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

330 ((c⁄° *Ë(
§c
))[6], ((c⁄° *Ë(§c))[7] } })

	)

332 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

333 
__STRING2_COPY_ARR3
,

334 
__STRING2_COPY_ARR4
,

335 
__STRING2_COPY_ARR5
,

336 
__STRING2_COPY_ARR6
,

337 
__STRING2_COPY_ARR7
,

338 
__STRING2_COPY_ARR8
, 
size_t
);

339 
__STRING_INLINE
 *

340 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

341 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

342 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

343 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

344 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

347 
__c
;

348 
__STRING2_COPY_ARR2
 
__sˇ2
;

349 
__STRING2_COPY_ARR3
 
__sˇ3
;

350 
__STRING2_COPY_ARR4
 
__sˇ4
;

351 
__STRING2_COPY_ARR5
 
__sˇ5
;

352 
__STRING2_COPY_ARR6
 
__sˇ6
;

353 
__STRING2_COPY_ARR7
 
__sˇ7
;

354 
__STRING2_COPY_ARR8
 
__sˇ8
;

355 } *
__u
 = 
__de°
;

356 (Ë
__§˛í
)

359 
__u
->
__c
 = 
__§c1
;

362 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

365 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

368 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

371 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

374 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

377 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

380 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

383  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

384 
	}
}

392 #i‚de‡
_HAVE_STRING_ARCH_°rchr


393 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

394 #i‡
__GNUC_PREREQ
 (3, 2)

395 
	#°rchr
(
s
, 
c
) \

396 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

397 && (
c
) == '\0' \

398 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

399 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

401 
	#°rchr
(
s
, 
c
) \

402 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

403 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

404 : 
	`°rchr
 (
s
, 
c
)))

	)

410 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

411 || 
deföed
 
	g_FORCE_INLINES


412 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

413 
	#°r˝y
(
de°
, 
§c
) \

414 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

415 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

416 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

417 
	`°æí
 (
§c
) + 1) \

418 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

419 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

422 #i‡
_STRING_ARCH_u«lig√d


423 #i‚de‡
_FORCE_INLINES


424 
	#__°r˝y_¨gs
(
§c
) \

425 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

430 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

431 
__uöt32_t
, __uöt32_t, 
size_t
);

432 
__STRING_INLINE
 *

433 
	$__°r˝y_smÆl
 (*
__de°
,

434 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

435 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

436 
size_t
 
__§˛í
)

439 
__uöt32_t
 
__ui
;

440 
__uöt16_t
 
__usi
;

441 
__uc
;

442 } *
__u
 = (*Ë
__de°
;

443 (Ë
__§˛í
)

446 
__u
->
__uc
 = '\0';

449 
__u
->
__usi
 = 
__§c0_2
;

452 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

454 
__u
->
__uc
 = '\0';

457 
__u
->
__ui
 = 
__§c0_4
;

460 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

462 
__u
->
__uc
 = '\0';

465 
__u
->
__ui
 = 
__§c0_4
;

466 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

467 
__u
->
__usi
 = 
__§c4_2
;

470 
__u
->
__ui
 = 
__§c0_4
;

471 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

472 
__u
->
__usi
 = 
__§c4_2
;

473 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

474 
__u
->
__uc
 = '\0';

477 
__u
->
__ui
 = 
__§c0_4
;

478 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

479 
__u
->
__ui
 = 
__§c4_4
;

482  
__de°
;

483 
	}
}

485 #i‚de‡
_FORCE_INLINES


486 
	#__°r˝y_¨gs
(
§c
) \

487 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

488 { { ((c⁄° *Ë(
§c
))[0], '\0' } }), \

489 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

490 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

492 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

493 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

494 ((c⁄° *Ë(
§c
))[2], '\0' } }), \

495 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

496 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

497 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

499 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

500 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

501 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

502 ((c⁄° *Ë(
§c
))[4], '\0' } }), \

503 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

504 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

505 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

506 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

508 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

509 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

510 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

511 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

512 ((c⁄° *Ë(
§c
))[6], '\0' } })

	)

514 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

515 
__STRING2_COPY_ARR3
,

516 
__STRING2_COPY_ARR4
,

517 
__STRING2_COPY_ARR5
,

518 
__STRING2_COPY_ARR6
,

519 
__STRING2_COPY_ARR7
,

520 
__STRING2_COPY_ARR8
, 
size_t
);

521 
__STRING_INLINE
 *

522 
	$__°r˝y_smÆl
 (*
__de°
,

523 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

524 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

525 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

526 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

529 
__c
;

530 
__STRING2_COPY_ARR2
 
__sˇ2
;

531 
__STRING2_COPY_ARR3
 
__sˇ3
;

532 
__STRING2_COPY_ARR4
 
__sˇ4
;

533 
__STRING2_COPY_ARR5
 
__sˇ5
;

534 
__STRING2_COPY_ARR6
 
__sˇ6
;

535 
__STRING2_COPY_ARR7
 
__sˇ7
;

536 
__STRING2_COPY_ARR8
 
__sˇ8
;

537 } *
__u
 = (*Ë
__de°
;

538 (Ë
__§˛í
)

541 
__u
->
__c
 = '\0';

544 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

547 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

550 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

553 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

556 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

559 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

562 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

565  
__de°
;

566 
	}
}

572 #ifde‡
__USE_GNU


573 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


574 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


575 #i‡
__GNUC_PREREQ
 (3, 4)

576 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

577 #ñi‡
__GNUC_PREREQ
 (3, 0)

578 
	#__°p˝y
(
de°
, 
§c
) \

579 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

580 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

581 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

582 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

584 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

586 
	#__°p˝y
(
de°
, 
§c
) \

587 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

588 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

589 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

590 
	`°æí
 (
§c
) + 1) \

591 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

593 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

597 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

600 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


601 #i‡
_STRING_ARCH_u«lig√d


602 #i‚de‡
_FORCE_INLINES


603 
	#__°p˝y_¨gs
(
§c
) \

604 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

609 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

610 
__uöt32_t
, __uöt32_t, 
size_t
);

611 
__STRING_INLINE
 *

612 
	$__°p˝y_smÆl
 (*
__de°
,

613 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

614 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

615 
size_t
 
__§˛í
)

618 
__ui
;

619 
__usi
;

620 
__uc
;

621 
__c
;

622 } *
__u
 = (*Ë
__de°
;

623 (Ë
__§˛í
)

626 
__u
->
__uc
 = '\0';

629 
__u
->
__usi
 = 
__§c0_2
;

630 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

633 
__u
->
__usi
 = 
__§c0_2
;

634 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

635 
__u
->
__uc
 = '\0';

638 
__u
->
__ui
 = 
__§c0_4
;

639 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

642 
__u
->
__ui
 = 
__§c0_4
;

643 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

644 
__u
->
__uc
 = '\0';

647 
__u
->
__ui
 = 
__§c0_4
;

648 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

649 
__u
->
__usi
 = 
__§c4_2
;

650 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

653 
__u
->
__ui
 = 
__§c0_4
;

654 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

655 
__u
->
__usi
 = 
__§c4_2
;

656 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

657 
__u
->
__uc
 = '\0';

660 
__u
->
__ui
 = 
__§c0_4
;

661 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

662 
__u
->
__ui
 = 
__§c4_4
;

663 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

666  &
__u
->
__c
;

667 
	}
}

669 #i‚de‡
_FORCE_INLINES


670 
	#__°p˝y_¨gs
(
§c
) \

671 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

672 { { ((c⁄° *Ë(
§c
))[0], '\0' } }), \

673 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

674 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

676 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

677 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

678 ((c⁄° *Ë(
§c
))[2], '\0' } }), \

679 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

680 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

681 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

683 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

684 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

685 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

686 ((c⁄° *Ë(
§c
))[4], '\0' } }), \

687 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

688 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

689 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

690 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

692 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

693 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

694 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

695 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

696 ((c⁄° *Ë(
§c
))[6], '\0' } })

	)

698 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

699 
__STRING2_COPY_ARR3
,

700 
__STRING2_COPY_ARR4
,

701 
__STRING2_COPY_ARR5
,

702 
__STRING2_COPY_ARR6
,

703 
__STRING2_COPY_ARR7
,

704 
__STRING2_COPY_ARR8
, 
size_t
);

705 
__STRING_INLINE
 *

706 
	$__°p˝y_smÆl
 (*
__de°
,

707 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

708 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

709 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

710 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

713 
__c
;

714 
__STRING2_COPY_ARR2
 
__sˇ2
;

715 
__STRING2_COPY_ARR3
 
__sˇ3
;

716 
__STRING2_COPY_ARR4
 
__sˇ4
;

717 
__STRING2_COPY_ARR5
 
__sˇ5
;

718 
__STRING2_COPY_ARR6
 
__sˇ6
;

719 
__STRING2_COPY_ARR7
 
__sˇ7
;

720 
__STRING2_COPY_ARR8
 
__sˇ8
;

721 } *
__u
 = (*Ë
__de°
;

722 (Ë
__§˛í
)

725 
__u
->
__c
 = '\0';

728 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

731 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

734 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

737 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

740 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

743 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

746 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

749  
__de°
 + 
__§˛í
 - 1;

750 
	}
}

758 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


759 #i‡
__GNUC_PREREQ
 (3, 2)

760 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

762 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

763 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

764 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

765 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

766 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

773 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


774 #ifde‡
_USE_STRING_ARCH_°rchr


775 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

776 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

777 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

778 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

779 ? 
	`°rˇt
 (
__de°
, 
§c
) \

780 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

781 
§c
, 
n
)Ë'\0', 
__de°
)) \

782 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

783 #ñi‡
__GNUC_PREREQ
 (3, 2)

784 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

786 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

787 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

788 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

789 ? 
	`°rˇt
 (
de°
, 
§c
) \

790 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

797 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


798 #i‡
__GNUC_PREREQ
 (3, 2)

799 
	#°rcmp
(
s1
, 
s2
) \

800 
__exãnsi⁄__
 \

801 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

802 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

803 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

804 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

805 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

806 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

807 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

808 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

809 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

810 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

811 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

812 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

813 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

814 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

815 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

816 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

817 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

819 
	#°rcmp
(
s1
, 
s2
) \

820 
__exãnsi⁄__
 \

821 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

822 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

823 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

824 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

825 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

826 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

827 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

828 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

829 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

830 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

831 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

832 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

833 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

834 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

835 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

836 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

837 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

838 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

841 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

842 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

843 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

844 - ((c⁄° *Ë(c⁄° *)(
s2
))[0]); \

845 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

847 
__ªsu…
 = (((const *) \

848 (c⁄° *Ë(
s1
))[1] \

850 (c⁄° *Ë(
s2
))[1]); \

851 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

853 
__ªsu…
 = \

855 (c⁄° *Ë(
s1
))[2] \

857 (c⁄° *Ë(
s2
))[2]); \

858 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

859 
__ªsu…
 = \

861 (c⁄° *Ë(
s1
))[3] \

863 (c⁄° *Ë(
s2
))[3]); \

866 
__ªsu…
; }))

	)

868 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

869 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = \

870 (c⁄° *Ë(c⁄° *Ë(
s2
); \

871 
__ªsu…
 = \

872 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

873 - 
__s2
[0]); \

874 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

876 
__ªsu…
 = (((const *) \

877 (c⁄° *Ë(
s1
))[1] - 
__s2
[1]); \

878 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

880 
__ªsu…
 = (((const *) \

881 (c⁄° *Ë(
s1
))[2] - 
__s2
[2]); \

882 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

883 
__ªsu…
 = (((const *) \

884 (c⁄° *Ë(
s1
))[3] \

885 - 
__s2
[3]); \

888 
__ªsu…
; }))

	)

890 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
Ë(- 
	`__°rcmp_cg
 (s2, s1,Ü2))

	)

895 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


896 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

897 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

898 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

899 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

900 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

901 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

902 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

908 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


909 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


910 #i‡
__GNUC_PREREQ
 (3, 2)

911 
	#°rc•n
(
s
, 
ªje˘
) \

912 
__exãnsi⁄__
 \

913 ({ 
__r0
, 
__r1
, 
__r2
; \

914 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

915 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

916 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

917 : ((
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], __r0 == '\0') \

918 ? 
	`°æí
 (
s
) \

919 : ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], __r1 == '\0') \

920 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

921 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

922 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

923 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

924 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

925 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

926 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

928 
	#°rc•n
(
s
, 
ªje˘
) \

929 
__exãnsi⁄__
 \

930 ({ 
__r0
, 
__r1
, 
__r2
; \

931 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

932 ? ((
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], __r0 == '\0') \

933 ? 
	`°æí
 (
s
) \

934 : ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], __r1 == '\0') \

935 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

936 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

937 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

938 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

939 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

940 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

941 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

945 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

946 
__STRING_INLINE
 
size_t


947 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

949 
size_t
 
__ªsu…
 = 0;

950 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

951 ++
__ªsu…
;

952  
__ªsu…
;

953 
	}
}

955 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (c⁄° *
__s
, 
__ªje˘1
,

956 
__ªje˘2
);

957 
__STRING_INLINE
 
size_t


958 
	$__°rc•n_c2
 (c⁄° *
__s
, 
__ªje˘1
, 
__ªje˘2
)

960 
size_t
 
__ªsu…
 = 0;

961 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


962 && 
__s
[
__ªsu…
] !
__ªje˘2
)

963 ++
__ªsu…
;

964  
__ªsu…
;

965 
	}
}

967 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (c⁄° *
__s
, 
__ªje˘1
,

968 
__ªje˘2
, 
__ªje˘3
);

969 
__STRING_INLINE
 
size_t


970 
	$__°rc•n_c3
 (c⁄° *
__s
, 
__ªje˘1
, 
__ªje˘2
,

971 
__ªje˘3
)

973 
size_t
 
__ªsu…
 = 0;

974 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


975 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

976 ++
__ªsu…
;

977  
__ªsu…
;

978 
	}
}

984 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


985 #i‚de‡
_HAVE_STRING_ARCH_°r•n


986 #i‡
__GNUC_PREREQ
 (3, 2)

987 
	#°r•n
(
s
, 
ac˚±
) \

988 
__exãnsi⁄__
 \

989 ({ 
__a0
, 
__a1
, 
__a2
; \

990 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

991 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

992 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

993 : ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

994 ? ((Ë(
s
), (
size_t
) 0) \

995 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

996 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

997 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

998 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

999 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1000 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1001 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1002 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1004 
	#°r•n
(
s
, 
ac˚±
) \

1005 
__exãnsi⁄__
 \

1006 ({ 
__a0
, 
__a1
, 
__a2
; \

1007 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1008 ? ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1009 ? ((Ë(
s
), (
size_t
) 0) \

1010 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1011 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1012 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1013 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1014 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1015 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1016 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1017 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1021 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1022 
__STRING_INLINE
 
size_t


1023 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1025 
size_t
 
__ªsu…
 = 0;

1027 
__s
[
__ªsu…
] =
__ac˚±
)

1028 ++
__ªsu…
;

1029  
__ªsu…
;

1030 
	}
}

1032 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (c⁄° *
__s
, 
__ac˚±1
,

1033 
__ac˚±2
);

1034 
__STRING_INLINE
 
size_t


1035 
	$__°r•n_c2
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1037 
size_t
 
__ªsu…
 = 0;

1039 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1040 ++
__ªsu…
;

1041  
__ªsu…
;

1042 
	}
}

1044 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (c⁄° *
__s
, 
__ac˚±1
,

1045 
__ac˚±2
, 
__ac˚±3
);

1046 
__STRING_INLINE
 
size_t


1047 
	$__°r•n_c3
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1049 
size_t
 
__ªsu…
 = 0;

1051 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1052 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1053 ++
__ªsu…
;

1054  
__ªsu…
;

1055 
	}
}

1060 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1061 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1062 #i‡
__GNUC_PREREQ
 (3, 2)

1063 
	#°Ωbrk
(
s
, 
ac˚±
) \

1064 
__exãnsi⁄__
 \

1065 ({ 
__a0
, 
__a1
, 
__a2
; \

1066 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1067 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1068 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1069 : ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1070 ? ((Ë(
s
), (*Ë
NULL
) \

1071 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1072 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1073 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1074 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1075 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1076 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1077 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1078 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1080 
	#°Ωbrk
(
s
, 
ac˚±
) \

1081 
__exãnsi⁄__
 \

1082 ({ 
__a0
, 
__a1
, 
__a2
; \

1083 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1084 ? ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1085 ? ((Ë(
s
), (*Ë
NULL
) \

1086 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1087 ? 
	`°rchr
 (
s
, 
__a0
) \

1088 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1089 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1090 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1091 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1092 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1093 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1097 
__STRING_INLINE
 *
__°Ωbrk_c2
 (c⁄° *
__s
, 
__ac˚±1
,

1098 
__ac˚±2
);

1099 
__STRING_INLINE
 *

1100 
	$__°Ωbrk_c2
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1103 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1104 ++
__s
;

1105  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1106 
	}
}

1108 
__STRING_INLINE
 *
__°Ωbrk_c3
 (c⁄° *
__s
, 
__ac˚±1
,

1109 
__ac˚±2
, 
__ac˚±3
);

1110 
__STRING_INLINE
 *

1111 
	$__°Ωbrk_c3
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1114 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1115 && *
__s
 !
__ac˚±3
)

1116 ++
__s
;

1117  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1118 
	}
}

1124 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1125 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1126 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1127 ? (((c⁄° *Ë(
√edÀ
))[0] == '\0' \

1128 ? (*Ë(
size_t
Ë(
hay°ack
) \

1129 : (((c⁄° *Ë(
√edÀ
))[1] == '\0' \

1130 ? 
	`°rchr
 (
hay°ack
, \

1131 ((c⁄° *Ë(
√edÀ
))[0]) \

1132 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1133 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1137 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1138 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1139 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1140 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1141 && ((c⁄° *Ë(
£p
))[0] != '\0' \

1142 && ((c⁄° *Ë(
£p
))[1] == '\0' \

1143 ? 
	`__°πok_r_1c
 (
s
, ((c⁄° *Ë(
£p
))[0], 
√xç
) \

1144 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1147 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1148 
__STRING_INLINE
 *

1149 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1151 *
__ªsu…
;

1152 i‡(
__s
 =
NULL
)

1153 
__s
 = *
__√xç
;

1154 *
__s
 =
__£p
)

1155 ++
__s
;

1156 
__ªsu…
 = 
NULL
;

1157 i‡(*
__s
 != '\0')

1159 
__ªsu…
 = 
__s
++;

1160 *
__s
 != '\0')

1161 i‡(*
__s
++ =
__£p
)

1163 
__s
[-1] = '\0';

1167 *
__√xç
 = 
__s
;

1168  
__ªsu…
;

1169 
	}
}

1170 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


1171 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1176 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1177 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1179 *
__°r£p_g
 (**
__°rögp
, c⁄° *
__dñim
);

1180 
	#__°r£p
(
s
, 
ªje˘
) \

1181 
__exãnsi⁄__
 \

1182 ({ 
__r0
, 
__r1
, 
__r2
; \

1183 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1184 && (
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], \

1185 ((c⁄° *Ë(
ªje˘
))[0] != '\0') \

1186 ? ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], \

1187 ((c⁄° *Ë(
ªje˘
))[1] == '\0') \

1188 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1189 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

1190 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1191 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

1192 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1193 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1194 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1197 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1198 
__STRING_INLINE
 *

1199 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1201 *
__ªtvÆ
 = *
__s
;

1202 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1203 *(*
__s
)++ = '\0';

1204  
__ªtvÆ
;

1205 
	}
}

1207 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1208 
__STRING_INLINE
 *

1209 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1211 *
__ªtvÆ
 = *
__s
;

1212 i‡(
__ªtvÆ
 !
NULL
)

1214 *
__˝
 = 
__ªtvÆ
;

1217 i‡(*
__˝
 == '\0')

1219 
__˝
 = 
NULL
;

1222 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1224 *
__˝
++ = '\0';

1227 ++
__˝
;

1229 *
__s
 = 
__˝
;

1231  
__ªtvÆ
;

1232 
	}
}

1234 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1235 
__ªje˘3
);

1236 
__STRING_INLINE
 *

1237 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1239 *
__ªtvÆ
 = *
__s
;

1240 i‡(
__ªtvÆ
 !
NULL
)

1242 *
__˝
 = 
__ªtvÆ
;

1245 i‡(*
__˝
 == '\0')

1247 
__˝
 = 
NULL
;

1250 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1252 *
__˝
++ = '\0';

1255 ++
__˝
;

1257 *
__s
 = 
__˝
;

1259  
__ªtvÆ
;

1260 
	}
}

1261 #ifde‡
__USE_BSD


1262 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1269 #ifde‡
__USE_MISC


1271 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1272 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1273 
	~<°dlib.h
>

1276 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1278 *
	$__°rdup
 (c⁄° *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1279 
	#__°rdup
(
s
) \

1280 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1281 ? (((c⁄° *Ë(
s
))[0] == '\0' \

1282 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1283 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1284 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1285 i‡(
__ªtvÆ
 !
NULL
) \

1286 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1287 
__ªtvÆ
; 
	}
})) \

1288 : 
	`__°rdup
 (
s
)))

	)

1290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1291 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1295 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1297 *
	$__°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

1298 
__THROW
 
__©åibuã_mÆloc__
;

1299 
	#__°∫dup
(
s
, 
n
) \

1300 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1301 ? (((c⁄° *Ë(
s
))[0] == '\0' \

1302 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1303 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1304 
size_t
 
__n
 = (
n
); \

1305 *
__ªtvÆ
; \

1306 i‡(
__n
 < 
__Àn
) \

1307 
__Àn
 = 
__n
 + 1; \

1308 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1309 i‡(
__ªtvÆ
 !
NULL
) \

1311 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1312 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1313 
__Àn
 - 1); \

1315 
__ªtvÆ
; 
	}
})) \

1316 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1318 #ifde‡
__USE_GNU


1319 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1325 #i‚de‡
_FORCE_INLINES


1326 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

18 #i‚de‡
_STRING_H


22 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

25 #i‚de‡
__˝lu•lus


29 #unde‡
mem˝y


30 #unde‡
memmove


31 #unde‡
mem£t


32 #unde‡
°rˇt


33 #unde‡
°r˝y


34 #unde‡
°∫ˇt


35 #unde‡
°∫˝y


36 #ifde‡
__USE_GNU


37 #unde‡
memp˝y


38 #unde‡
°p˝y


40 #ifde‡
__USE_BSD


41 #unde‡
bc›y


42 #unde‡
bzîo


47 
__f‹tify_fun˘i⁄
 *

48 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

49 
size_t
 
__Àn
))

51  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

52 
	}
}

54 
__f‹tify_fun˘i⁄
 *

55 
__NTH
 (
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__Àn
))

57  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

58 
	}
}

60 #ifde‡
__USE_GNU


61 
__f‹tify_fun˘i⁄
 *

62 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

63 
size_t
 
__Àn
))

65  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

66 
	}
}

75 
__f‹tify_fun˘i⁄
 *

76 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

78 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

79 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

81 
	`__w¨n_mem£t_zîo_Àn
 ();

82  
__de°
;

84  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

85 
	}
}

87 #ifde‡
__USE_BSD


88 
__f‹tify_fun˘i⁄
 

89 
__NTH
 (
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__Àn
))

91 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

92 
	}
}

94 
__f‹tify_fun˘i⁄
 

95 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

97 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

98 
	}
}

101 
__f‹tify_fun˘i⁄
 *

102 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

104  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

105 
	}
}

107 #ifde‡
__USE_GNU


108 
__f‹tify_fun˘i⁄
 *

109 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

111  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

112 
	}
}

116 
__f‹tify_fun˘i⁄
 *

117 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

118 
size_t
 
__Àn
))

120  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

121 
	}
}

124 *
	$__°≤˝y_chk
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

125 
size_t
 
__de°Àn
Ë
__THROW
;

126 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
, c⁄° *
__§c
,

127 
size_t
 
__n
), 
°≤˝y
);

129 
__f‹tify_fun˘i⁄
 *

130 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
))

132 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

133 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿<
	`__bos
 (
__de°
)))

134  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

135  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

136 
	}
}

139 
__f‹tify_fun˘i⁄
 *

140 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

142  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

143 
	}
}

146 
__f‹tify_fun˘i⁄
 *

147 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

148 
size_t
 
__Àn
))

150  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

151 
	}
}

	@/usr/include/bits/sys_errlist.h

19 #i‚de‡
_STDIO_H


25 #ifde‡ 
__USE_BSD


26 
sys_√º
;

27 c⁄° *c⁄° 
sys_îæi°
[];

29 #ifde‡ 
__USE_GNU


30 
_sys_√º
;

31 c⁄° *c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/syscall.h

3 #i‚de‡
_SYSCALL_H


8 #i‡!
deföed
 
__x86_64__


9 
	#SYS__Œ£ek
 
__NR__Œ£ek


	)

10 
	#SYS__√w£À˘
 
__NR__√w£À˘


	)

11 
	#SYS__sys˘l
 
__NR__sys˘l


	)

12 
	#SYS_ac˚ss
 
__NR_ac˚ss


	)

13 
	#SYS_ac˘
 
__NR_ac˘


	)

14 
	#SYS_add_key
 
__NR_add_key


	)

15 
	#SYS_adjtimex
 
__NR_adjtimex


	)

16 
	#SYS_afs_sysˇŒ
 
__NR_afs_sysˇŒ


	)

17 
	#SYS_Æ¨m
 
__NR_Æ¨m


	)

18 
	#SYS_bdÊush
 
__NR_bdÊush


	)

19 
	#SYS_bªak
 
__NR_bªak


	)

20 
	#SYS_brk
 
__NR_brk


	)

21 
	#SYS_ˇpgë
 
__NR_ˇpgë


	)

22 
	#SYS_ˇp£t
 
__NR_ˇp£t


	)

23 
	#SYS_chdú
 
__NR_chdú


	)

24 
	#SYS_chmod
 
__NR_chmod


	)

25 
	#SYS_chown
 
__NR_chown


	)

26 
	#SYS_chown32
 
__NR_chown32


	)

27 
	#SYS_chroŸ
 
__NR_chroŸ


	)

28 
	#SYS_˛ock_adjtime
 
__NR_˛ock_adjtime


	)

29 
	#SYS_˛ock_gëªs
 
__NR_˛ock_gëªs


	)

30 
	#SYS_˛ock_gëtime
 
__NR_˛ock_gëtime


	)

31 
	#SYS_˛ock_«no¶ìp
 
__NR_˛ock_«no¶ìp


	)

32 
	#SYS_˛ock_£âime
 
__NR_˛ock_£âime


	)

33 
	#SYS_˛⁄e
 
__NR_˛⁄e


	)

34 
	#SYS_˛o£
 
__NR_˛o£


	)

35 
	#SYS_¸ót
 
__NR_¸ót


	)

36 
	#SYS_¸óã_moduÀ
 
__NR_¸óã_moduÀ


	)

37 
	#SYS_dñëe_moduÀ
 
__NR_dñëe_moduÀ


	)

38 
	#SYS_dup
 
__NR_dup


	)

39 
	#SYS_dup2
 
__NR_dup2


	)

40 
	#SYS_dup3
 
__NR_dup3


	)

41 
	#SYS_ïﬁl_¸óã
 
__NR_ïﬁl_¸óã


	)

42 
	#SYS_ïﬁl_¸óã1
 
__NR_ïﬁl_¸óã1


	)

43 
	#SYS_ïﬁl_˘l
 
__NR_ïﬁl_˘l


	)

44 
	#SYS_ïﬁl_pwaô
 
__NR_ïﬁl_pwaô


	)

45 
	#SYS_ïﬁl_waô
 
__NR_ïﬁl_waô


	)

46 
	#SYS_evítfd
 
__NR_evítfd


	)

47 
	#SYS_evítfd2
 
__NR_evítfd2


	)

48 
	#SYS_execve
 
__NR_execve


	)

49 
	#SYS_exô
 
__NR_exô


	)

50 
	#SYS_exô_group
 
__NR_exô_group


	)

51 
	#SYS_Ác˚sßt
 
__NR_Ác˚sßt


	)

52 
	#SYS_Ádvi£64
 
__NR_Ádvi£64


	)

53 
	#SYS_Ádvi£64_64
 
__NR_Ádvi£64_64


	)

54 
	#SYS_ÁŒoˇã
 
__NR_ÁŒoˇã


	)

55 
	#SYS_ÁnŸify_öô
 
__NR_ÁnŸify_öô


	)

56 
	#SYS_ÁnŸify_m¨k
 
__NR_ÁnŸify_m¨k


	)

57 
	#SYS_fchdú
 
__NR_fchdú


	)

58 
	#SYS_fchmod
 
__NR_fchmod


	)

59 
	#SYS_fchmod©
 
__NR_fchmod©


	)

60 
	#SYS_fchown
 
__NR_fchown


	)

61 
	#SYS_fchown32
 
__NR_fchown32


	)

62 
	#SYS_fchow«t
 
__NR_fchow«t


	)

63 
	#SYS_f˙é
 
__NR_f˙é


	)

64 
	#SYS_f˙é64
 
__NR_f˙é64


	)

65 
	#SYS_fd©async
 
__NR_fd©async


	)

66 
	#SYS_fgëx©å
 
__NR_fgëx©å


	)

67 
	#SYS_föô_moduÀ
 
__NR_föô_moduÀ


	)

68 
	#SYS_Êi°x©å
 
__NR_Êi°x©å


	)

69 
	#SYS_Êock
 
__NR_Êock


	)

70 
	#SYS_f‹k
 
__NR_f‹k


	)

71 
	#SYS_‰emovex©å
 
__NR_‰emovex©å


	)

72 
	#SYS_f£tx©å
 
__NR_f£tx©å


	)

73 
	#SYS_f°©
 
__NR_f°©


	)

74 
	#SYS_f°©64
 
__NR_f°©64


	)

75 
	#SYS_f°©©64
 
__NR_f°©©64


	)

76 
	#SYS_f°©fs
 
__NR_f°©fs


	)

77 
	#SYS_f°©fs64
 
__NR_f°©fs64


	)

78 
	#SYS_fsync
 
__NR_fsync


	)

79 
	#SYS_·ime
 
__NR_·ime


	)

80 
	#SYS_·runˇã
 
__NR_·runˇã


	)

81 
	#SYS_·runˇã64
 
__NR_·runˇã64


	)

82 
	#SYS_fuãx
 
__NR_fuãx


	)

83 
	#SYS_futimeßt
 
__NR_futimeßt


	)

84 
	#SYS_gë_kî√l_syms
 
__NR_gë_kî√l_syms


	)

85 
	#SYS_gë_mempﬁicy
 
__NR_gë_mempﬁicy


	)

86 
	#SYS_gë_robu°_li°
 
__NR_gë_robu°_li°


	)

87 
	#SYS_gë_thªad_¨ó
 
__NR_gë_thªad_¨ó


	)

88 
	#SYS_gë˝u
 
__NR_gë˝u


	)

89 
	#SYS_gëcwd
 
__NR_gëcwd


	)

90 
	#SYS_gëdíts
 
__NR_gëdíts


	)

91 
	#SYS_gëdíts64
 
__NR_gëdíts64


	)

92 
	#SYS_gëegid
 
__NR_gëegid


	)

93 
	#SYS_gëegid32
 
__NR_gëegid32


	)

94 
	#SYS_gëeuid
 
__NR_gëeuid


	)

95 
	#SYS_gëeuid32
 
__NR_gëeuid32


	)

96 
	#SYS_gëgid
 
__NR_gëgid


	)

97 
	#SYS_gëgid32
 
__NR_gëgid32


	)

98 
	#SYS_gëgroups
 
__NR_gëgroups


	)

99 
	#SYS_gëgroups32
 
__NR_gëgroups32


	)

100 
	#SYS_gëôimî
 
__NR_gëôimî


	)

101 
	#SYS_gëpgid
 
__NR_gëpgid


	)

102 
	#SYS_gëpgΩ
 
__NR_gëpgΩ


	)

103 
	#SYS_gëpid
 
__NR_gëpid


	)

104 
	#SYS_gëpmsg
 
__NR_gëpmsg


	)

105 
	#SYS_gëµid
 
__NR_gëµid


	)

106 
	#SYS_gë¥i‹ôy
 
__NR_gë¥i‹ôy


	)

107 
	#SYS_gëªsgid
 
__NR_gëªsgid


	)

108 
	#SYS_gëªsgid32
 
__NR_gëªsgid32


	)

109 
	#SYS_gëªsuid
 
__NR_gëªsuid


	)

110 
	#SYS_gëªsuid32
 
__NR_gëªsuid32


	)

111 
	#SYS_gëæimô
 
__NR_gëæimô


	)

112 
	#SYS_gërußge
 
__NR_gërußge


	)

113 
	#SYS_gësid
 
__NR_gësid


	)

114 
	#SYS_gëtid
 
__NR_gëtid


	)

115 
	#SYS_gëtimeofday
 
__NR_gëtimeofday


	)

116 
	#SYS_gëuid
 
__NR_gëuid


	)

117 
	#SYS_gëuid32
 
__NR_gëuid32


	)

118 
	#SYS_gëx©å
 
__NR_gëx©å


	)

119 
	#SYS_gây
 
__NR_gây


	)

120 
	#SYS_idÀ
 
__NR_idÀ


	)

121 
	#SYS_öô_moduÀ
 
__NR_öô_moduÀ


	)

122 
	#SYS_öŸify_add_w©ch
 
__NR_öŸify_add_w©ch


	)

123 
	#SYS_öŸify_öô
 
__NR_öŸify_öô


	)

124 
	#SYS_öŸify_öô1
 
__NR_öŸify_öô1


	)

125 
	#SYS_öŸify_rm_w©ch
 
__NR_öŸify_rm_w©ch


	)

126 
	#SYS_io_ˇn˚l
 
__NR_io_ˇn˚l


	)

127 
	#SYS_io_de°roy
 
__NR_io_de°roy


	)

128 
	#SYS_io_gëevíts
 
__NR_io_gëevíts


	)

129 
	#SYS_io_£tup
 
__NR_io_£tup


	)

130 
	#SYS_io_submô
 
__NR_io_submô


	)

131 
	#SYS_io˘l
 
__NR_io˘l


	)

132 
	#SYS_i›îm
 
__NR_i›îm


	)

133 
	#SYS_i›l
 
__NR_i›l


	)

134 
	#SYS_i›rio_gë
 
__NR_i›rio_gë


	)

135 
	#SYS_i›rio_£t
 
__NR_i›rio_£t


	)

136 
	#SYS_ùc
 
__NR_ùc


	)

137 
	#SYS_kcmp
 
__NR_kcmp


	)

138 
	#SYS_kexec_lﬂd
 
__NR_kexec_lﬂd


	)

139 
	#SYS_key˘l
 
__NR_key˘l


	)

140 
	#SYS_kûl
 
__NR_kûl


	)

141 
	#SYS_lchown
 
__NR_lchown


	)

142 
	#SYS_lchown32
 
__NR_lchown32


	)

143 
	#SYS_lgëx©å
 
__NR_lgëx©å


	)

144 
	#SYS_lök
 
__NR_lök


	)

145 
	#SYS_lök©
 
__NR_lök©


	)

146 
	#SYS_li°x©å
 
__NR_li°x©å


	)

147 
	#SYS_Œi°x©å
 
__NR_Œi°x©å


	)

148 
	#SYS_lock
 
__NR_lock


	)

149 
	#SYS_lookup_dcookõ
 
__NR_lookup_dcookõ


	)

150 
	#SYS_Ãemovex©å
 
__NR_Ãemovex©å


	)

151 
	#SYS_l£ek
 
__NR_l£ek


	)

152 
	#SYS_l£tx©å
 
__NR_l£tx©å


	)

153 
	#SYS_l°©
 
__NR_l°©


	)

154 
	#SYS_l°©64
 
__NR_l°©64


	)

155 
	#SYS_madvi£
 
__NR_madvi£


	)

156 
	#SYS_mböd
 
__NR_mböd


	)

157 
	#SYS_migøã_∑ges
 
__NR_migøã_∑ges


	)

158 
	#SYS_möc‹e
 
__NR_möc‹e


	)

159 
	#SYS_mkdú
 
__NR_mkdú


	)

160 
	#SYS_mkdú©
 
__NR_mkdú©


	)

161 
	#SYS_mknod
 
__NR_mknod


	)

162 
	#SYS_mknod©
 
__NR_mknod©


	)

163 
	#SYS_mlock
 
__NR_mlock


	)

164 
	#SYS_mlockÆl
 
__NR_mlockÆl


	)

165 
	#SYS_mm≠
 
__NR_mm≠


	)

166 
	#SYS_mm≠2
 
__NR_mm≠2


	)

167 
	#SYS_modify_ldt
 
__NR_modify_ldt


	)

168 
	#SYS_mou¡
 
__NR_mou¡


	)

169 
	#SYS_move_∑ges
 
__NR_move_∑ges


	)

170 
	#SYS_m¥Ÿe˘
 
__NR_m¥Ÿe˘


	)

171 
	#SYS_mpx
 
__NR_mpx


	)

172 
	#SYS_mq_gë£èâr
 
__NR_mq_gë£èâr


	)

173 
	#SYS_mq_nŸify
 
__NR_mq_nŸify


	)

174 
	#SYS_mq_›í
 
__NR_mq_›í


	)

175 
	#SYS_mq_timedª˚ive
 
__NR_mq_timedª˚ive


	)

176 
	#SYS_mq_timed£nd
 
__NR_mq_timed£nd


	)

177 
	#SYS_mq_u∆ök
 
__NR_mq_u∆ök


	)

178 
	#SYS_mªm≠
 
__NR_mªm≠


	)

179 
	#SYS_msync
 
__NR_msync


	)

180 
	#SYS_mu∆ock
 
__NR_mu∆ock


	)

181 
	#SYS_mu∆ockÆl
 
__NR_mu∆ockÆl


	)

182 
	#SYS_munm≠
 
__NR_munm≠


	)

183 
	#SYS_«me_to_h™dÀ_©
 
__NR_«me_to_h™dÀ_©


	)

184 
	#SYS_«no¶ìp
 
__NR_«no¶ìp


	)

185 
	#SYS_nfs£rv˘l
 
__NR_nfs£rv˘l


	)

186 
	#SYS_ni˚
 
__NR_ni˚


	)

187 
	#SYS_ﬁdf°©
 
__NR_ﬁdf°©


	)

188 
	#SYS_ﬁdl°©
 
__NR_ﬁdl°©


	)

189 
	#SYS_ﬁdﬁdu«me
 
__NR_ﬁdﬁdu«me


	)

190 
	#SYS_ﬁd°©
 
__NR_ﬁd°©


	)

191 
	#SYS_ﬁdu«me
 
__NR_ﬁdu«me


	)

192 
	#SYS_›í
 
__NR_›í


	)

193 
	#SYS_›í_by_h™dÀ_©
 
__NR_›í_by_h™dÀ_©


	)

194 
	#SYS_›í©
 
__NR_›í©


	)

195 
	#SYS_∑u£
 
__NR_∑u£


	)

196 
	#SYS_≥rf_evít_›í
 
__NR_≥rf_evít_›í


	)

197 
	#SYS_≥rs⁄Æôy
 
__NR_≥rs⁄Æôy


	)

198 
	#SYS_pùe
 
__NR_pùe


	)

199 
	#SYS_pùe2
 
__NR_pùe2


	)

200 
	#SYS_pivŸ_roŸ
 
__NR_pivŸ_roŸ


	)

201 
	#SYS_pﬁl
 
__NR_pﬁl


	)

202 
	#SYS_µﬁl
 
__NR_µﬁl


	)

203 
	#SYS_¥˘l
 
__NR_¥˘l


	)

204 
	#SYS_¥ód64
 
__NR_¥ód64


	)

205 
	#SYS_¥ódv
 
__NR_¥ódv


	)

206 
	#SYS_¥limô64
 
__NR_¥limô64


	)

207 
	#SYS_¥o˚ss_vm_ªadv
 
__NR_¥o˚ss_vm_ªadv


	)

208 
	#SYS_¥o˚ss_vm_wrôev
 
__NR_¥o˚ss_vm_wrôev


	)

209 
	#SYS_¥of
 
__NR_¥of


	)

210 
	#SYS_¥ofû
 
__NR_¥ofû


	)

211 
	#SYS_p£À˘6
 
__NR_p£À˘6


	)

212 
	#SYS_±ø˚
 
__NR_±ø˚


	)

213 
	#SYS_puçmsg
 
__NR_puçmsg


	)

214 
	#SYS_pwrôe64
 
__NR_pwrôe64


	)

215 
	#SYS_pwrôev
 
__NR_pwrôev


	)

216 
	#SYS_quîy_moduÀ
 
__NR_quîy_moduÀ


	)

217 
	#SYS_quŸa˘l
 
__NR_quŸa˘l


	)

218 
	#SYS_ªad
 
__NR_ªad


	)

219 
	#SYS_ªadahód
 
__NR_ªadahód


	)

220 
	#SYS_ªaddú
 
__NR_ªaddú


	)

221 
	#SYS_ªadlök
 
__NR_ªadlök


	)

222 
	#SYS_ªadlök©
 
__NR_ªadlök©


	)

223 
	#SYS_ªadv
 
__NR_ªadv


	)

224 
	#SYS_ªboŸ
 
__NR_ªboŸ


	)

225 
	#SYS_ªcvmmsg
 
__NR_ªcvmmsg


	)

226 
	#SYS_ªm≠_fûe_∑ges
 
__NR_ªm≠_fûe_∑ges


	)

227 
	#SYS_ªmovex©å
 
__NR_ªmovex©å


	)

228 
	#SYS_ª«me
 
__NR_ª«me


	)

229 
	#SYS_ª«mót
 
__NR_ª«mót


	)

230 
	#SYS_ªque°_key
 
__NR_ªque°_key


	)

231 
	#SYS_ª°¨t_sysˇŒ
 
__NR_ª°¨t_sysˇŒ


	)

232 
	#SYS_rmdú
 
__NR_rmdú


	)

233 
	#SYS_π_siga˘i⁄
 
__NR_π_siga˘i⁄


	)

234 
	#SYS_π_sig≥ndög
 
__NR_π_sig≥ndög


	)

235 
	#SYS_π_sig¥ocmask
 
__NR_π_sig¥ocmask


	)

236 
	#SYS_π_sigqueueöfo
 
__NR_π_sigqueueöfo


	)

237 
	#SYS_π_sigªtu∫
 
__NR_π_sigªtu∫


	)

238 
	#SYS_π_sigsu•íd
 
__NR_π_sigsu•íd


	)

239 
	#SYS_π_sigtimedwaô
 
__NR_π_sigtimedwaô


	)

240 
	#SYS_π_tgsigqueueöfo
 
__NR_π_tgsigqueueöfo


	)

241 
	#SYS_sched_gë_¥i‹ôy_max
 
__NR_sched_gë_¥i‹ôy_max


	)

242 
	#SYS_sched_gë_¥i‹ôy_mö
 
__NR_sched_gë_¥i‹ôy_mö


	)

243 
	#SYS_sched_gëafföôy
 
__NR_sched_gëafföôy


	)

244 
	#SYS_sched_gë∑øm
 
__NR_sched_gë∑øm


	)

245 
	#SYS_sched_gëscheduÀr
 
__NR_sched_gëscheduÀr


	)

246 
	#SYS_sched_º_gë_öãrvÆ
 
__NR_sched_º_gë_öãrvÆ


	)

247 
	#SYS_sched_£èfföôy
 
__NR_sched_£èfföôy


	)

248 
	#SYS_sched_£ç¨am
 
__NR_sched_£ç¨am


	)

249 
	#SYS_sched_£tscheduÀr
 
__NR_sched_£tscheduÀr


	)

250 
	#SYS_sched_yõld
 
__NR_sched_yõld


	)

251 
	#SYS_£À˘
 
__NR_£À˘


	)

252 
	#SYS_£ndfûe
 
__NR_£ndfûe


	)

253 
	#SYS_£ndfûe64
 
__NR_£ndfûe64


	)

254 
	#SYS_£ndmmsg
 
__NR_£ndmmsg


	)

255 
	#SYS_£t_mempﬁicy
 
__NR_£t_mempﬁicy


	)

256 
	#SYS_£t_robu°_li°
 
__NR_£t_robu°_li°


	)

257 
	#SYS_£t_thªad_¨ó
 
__NR_£t_thªad_¨ó


	)

258 
	#SYS_£t_tid_addªss
 
__NR_£t_tid_addªss


	)

259 
	#SYS_£tdomaö«me
 
__NR_£tdomaö«me


	)

260 
	#SYS_£tfsgid
 
__NR_£tfsgid


	)

261 
	#SYS_£tfsgid32
 
__NR_£tfsgid32


	)

262 
	#SYS_£tfsuid
 
__NR_£tfsuid


	)

263 
	#SYS_£tfsuid32
 
__NR_£tfsuid32


	)

264 
	#SYS_£tgid
 
__NR_£tgid


	)

265 
	#SYS_£tgid32
 
__NR_£tgid32


	)

266 
	#SYS_£tgroups
 
__NR_£tgroups


	)

267 
	#SYS_£tgroups32
 
__NR_£tgroups32


	)

268 
	#SYS_£tho°«me
 
__NR_£tho°«me


	)

269 
	#SYS_£tôimî
 
__NR_£tôimî


	)

270 
	#SYS_£äs
 
__NR_£äs


	)

271 
	#SYS_£çgid
 
__NR_£çgid


	)

272 
	#SYS_£çri‹ôy
 
__NR_£çri‹ôy


	)

273 
	#SYS_£åegid
 
__NR_£åegid


	)

274 
	#SYS_£åegid32
 
__NR_£åegid32


	)

275 
	#SYS_£åesgid
 
__NR_£åesgid


	)

276 
	#SYS_£åesgid32
 
__NR_£åesgid32


	)

277 
	#SYS_£åesuid
 
__NR_£åesuid


	)

278 
	#SYS_£åesuid32
 
__NR_£åesuid32


	)

279 
	#SYS_£åeuid
 
__NR_£åeuid


	)

280 
	#SYS_£åeuid32
 
__NR_£åeuid32


	)

281 
	#SYS_£ålimô
 
__NR_£ålimô


	)

282 
	#SYS_£tsid
 
__NR_£tsid


	)

283 
	#SYS_£âimeofday
 
__NR_£âimeofday


	)

284 
	#SYS_£tuid
 
__NR_£tuid


	)

285 
	#SYS_£tuid32
 
__NR_£tuid32


	)

286 
	#SYS_£tx©å
 
__NR_£tx©å


	)

287 
	#SYS_sgëmask
 
__NR_sgëmask


	)

288 
	#SYS_siga˘i⁄
 
__NR_siga˘i⁄


	)

289 
	#SYS_sigÆt°ack
 
__NR_sigÆt°ack


	)

290 
	#SYS_sig«l
 
__NR_sig«l


	)

291 
	#SYS_sig«lfd
 
__NR_sig«lfd


	)

292 
	#SYS_sig«lfd4
 
__NR_sig«lfd4


	)

293 
	#SYS_sig≥ndög
 
__NR_sig≥ndög


	)

294 
	#SYS_sig¥ocmask
 
__NR_sig¥ocmask


	)

295 
	#SYS_sigªtu∫
 
__NR_sigªtu∫


	)

296 
	#SYS_sigsu•íd
 
__NR_sigsu•íd


	)

297 
	#SYS_sockëˇŒ
 
__NR_sockëˇŒ


	)

298 
	#SYS_•li˚
 
__NR_•li˚


	)

299 
	#SYS_s£tmask
 
__NR_s£tmask


	)

300 
	#SYS_°©
 
__NR_°©


	)

301 
	#SYS_°©64
 
__NR_°©64


	)

302 
	#SYS_°©fs
 
__NR_°©fs


	)

303 
	#SYS_°©fs64
 
__NR_°©fs64


	)

304 
	#SYS_°ime
 
__NR_°ime


	)

305 
	#SYS_°ty
 
__NR_°ty


	)

306 
	#SYS_sw≠off
 
__NR_sw≠off


	)

307 
	#SYS_sw≠⁄
 
__NR_sw≠⁄


	)

308 
	#SYS_symlök
 
__NR_symlök


	)

309 
	#SYS_symlök©
 
__NR_symlök©


	)

310 
	#SYS_sync
 
__NR_sync


	)

311 
	#SYS_sync_fûe_ønge
 
__NR_sync_fûe_ønge


	)

312 
	#SYS_syncfs
 
__NR_syncfs


	)

313 
	#SYS_sysfs
 
__NR_sysfs


	)

314 
	#SYS_sysöfo
 
__NR_sysöfo


	)

315 
	#SYS_sy¶og
 
__NR_sy¶og


	)

316 
	#SYS_ãe
 
__NR_ãe


	)

317 
	#SYS_tgkûl
 
__NR_tgkûl


	)

318 
	#SYS_time
 
__NR_time


	)

319 
	#SYS_timî_¸óã
 
__NR_timî_¸óã


	)

320 
	#SYS_timî_dñëe
 
__NR_timî_dñëe


	)

321 
	#SYS_timî_gëovîrun
 
__NR_timî_gëovîrun


	)

322 
	#SYS_timî_gëtime
 
__NR_timî_gëtime


	)

323 
	#SYS_timî_£âime
 
__NR_timî_£âime


	)

324 
	#SYS_timîfd_¸óã
 
__NR_timîfd_¸óã


	)

325 
	#SYS_timîfd_gëtime
 
__NR_timîfd_gëtime


	)

326 
	#SYS_timîfd_£âime
 
__NR_timîfd_£âime


	)

327 
	#SYS_times
 
__NR_times


	)

328 
	#SYS_tkûl
 
__NR_tkûl


	)

329 
	#SYS_åunˇã
 
__NR_åunˇã


	)

330 
	#SYS_åunˇã64
 
__NR_åunˇã64


	)

331 
	#SYS_ugëæimô
 
__NR_ugëæimô


	)

332 
	#SYS_ulimô
 
__NR_ulimô


	)

333 
	#SYS_umask
 
__NR_umask


	)

334 
	#SYS_umou¡
 
__NR_umou¡


	)

335 
	#SYS_umou¡2
 
__NR_umou¡2


	)

336 
	#SYS_u«me
 
__NR_u«me


	)

337 
	#SYS_u∆ök
 
__NR_u∆ök


	)

338 
	#SYS_u∆ök©
 
__NR_u∆ök©


	)

339 
	#SYS_unsh¨e
 
__NR_unsh¨e


	)

340 
	#SYS_u£lib
 
__NR_u£lib


	)

341 
	#SYS_u°©
 
__NR_u°©


	)

342 
	#SYS_utime
 
__NR_utime


	)

343 
	#SYS_utimíßt
 
__NR_utimíßt


	)

344 
	#SYS_utimes
 
__NR_utimes


	)

345 
	#SYS_vf‹k
 
__NR_vf‹k


	)

346 
	#SYS_vh™gup
 
__NR_vh™gup


	)

347 
	#SYS_vm86
 
__NR_vm86


	)

348 
	#SYS_vm86ﬁd
 
__NR_vm86ﬁd


	)

349 
	#SYS_vm•li˚
 
__NR_vm•li˚


	)

350 
	#SYS_v£rvî
 
__NR_v£rvî


	)

351 
	#SYS_waô4
 
__NR_waô4


	)

352 
	#SYS_waôid
 
__NR_waôid


	)

353 
	#SYS_waôpid
 
__NR_waôpid


	)

354 
	#SYS_wrôe
 
__NR_wrôe


	)

355 
	#SYS_wrôev
 
__NR_wrôev


	)

357 #i‡
deföed
 
__x86_64__
 && deföed 
__LP64__


358 
	#SYS__sys˘l
 
__NR__sys˘l


	)

359 
	#SYS_ac˚±
 
__NR_ac˚±


	)

360 
	#SYS_ac˚±4
 
__NR_ac˚±4


	)

361 
	#SYS_ac˚ss
 
__NR_ac˚ss


	)

362 
	#SYS_ac˘
 
__NR_ac˘


	)

363 
	#SYS_add_key
 
__NR_add_key


	)

364 
	#SYS_adjtimex
 
__NR_adjtimex


	)

365 
	#SYS_afs_sysˇŒ
 
__NR_afs_sysˇŒ


	)

366 
	#SYS_Æ¨m
 
__NR_Æ¨m


	)

367 
	#SYS_¨ch_¥˘l
 
__NR_¨ch_¥˘l


	)

368 
	#SYS_böd
 
__NR_böd


	)

369 
	#SYS_brk
 
__NR_brk


	)

370 
	#SYS_ˇpgë
 
__NR_ˇpgë


	)

371 
	#SYS_ˇp£t
 
__NR_ˇp£t


	)

372 
	#SYS_chdú
 
__NR_chdú


	)

373 
	#SYS_chmod
 
__NR_chmod


	)

374 
	#SYS_chown
 
__NR_chown


	)

375 
	#SYS_chroŸ
 
__NR_chroŸ


	)

376 
	#SYS_˛ock_adjtime
 
__NR_˛ock_adjtime


	)

377 
	#SYS_˛ock_gëªs
 
__NR_˛ock_gëªs


	)

378 
	#SYS_˛ock_gëtime
 
__NR_˛ock_gëtime


	)

379 
	#SYS_˛ock_«no¶ìp
 
__NR_˛ock_«no¶ìp


	)

380 
	#SYS_˛ock_£âime
 
__NR_˛ock_£âime


	)

381 
	#SYS_˛⁄e
 
__NR_˛⁄e


	)

382 
	#SYS_˛o£
 
__NR_˛o£


	)

383 
	#SYS_c⁄√˘
 
__NR_c⁄√˘


	)

384 
	#SYS_¸ót
 
__NR_¸ót


	)

385 
	#SYS_¸óã_moduÀ
 
__NR_¸óã_moduÀ


	)

386 
	#SYS_dñëe_moduÀ
 
__NR_dñëe_moduÀ


	)

387 
	#SYS_dup
 
__NR_dup


	)

388 
	#SYS_dup2
 
__NR_dup2


	)

389 
	#SYS_dup3
 
__NR_dup3


	)

390 
	#SYS_ïﬁl_¸óã
 
__NR_ïﬁl_¸óã


	)

391 
	#SYS_ïﬁl_¸óã1
 
__NR_ïﬁl_¸óã1


	)

392 
	#SYS_ïﬁl_˘l
 
__NR_ïﬁl_˘l


	)

393 
	#SYS_ïﬁl_˘l_ﬁd
 
__NR_ïﬁl_˘l_ﬁd


	)

394 
	#SYS_ïﬁl_pwaô
 
__NR_ïﬁl_pwaô


	)

395 
	#SYS_ïﬁl_waô
 
__NR_ïﬁl_waô


	)

396 
	#SYS_ïﬁl_waô_ﬁd
 
__NR_ïﬁl_waô_ﬁd


	)

397 
	#SYS_evítfd
 
__NR_evítfd


	)

398 
	#SYS_evítfd2
 
__NR_evítfd2


	)

399 
	#SYS_execve
 
__NR_execve


	)

400 
	#SYS_exô
 
__NR_exô


	)

401 
	#SYS_exô_group
 
__NR_exô_group


	)

402 
	#SYS_Ác˚sßt
 
__NR_Ác˚sßt


	)

403 
	#SYS_Ádvi£64
 
__NR_Ádvi£64


	)

404 
	#SYS_ÁŒoˇã
 
__NR_ÁŒoˇã


	)

405 
	#SYS_ÁnŸify_öô
 
__NR_ÁnŸify_öô


	)

406 
	#SYS_ÁnŸify_m¨k
 
__NR_ÁnŸify_m¨k


	)

407 
	#SYS_fchdú
 
__NR_fchdú


	)

408 
	#SYS_fchmod
 
__NR_fchmod


	)

409 
	#SYS_fchmod©
 
__NR_fchmod©


	)

410 
	#SYS_fchown
 
__NR_fchown


	)

411 
	#SYS_fchow«t
 
__NR_fchow«t


	)

412 
	#SYS_f˙é
 
__NR_f˙é


	)

413 
	#SYS_fd©async
 
__NR_fd©async


	)

414 
	#SYS_fgëx©å
 
__NR_fgëx©å


	)

415 
	#SYS_föô_moduÀ
 
__NR_föô_moduÀ


	)

416 
	#SYS_Êi°x©å
 
__NR_Êi°x©å


	)

417 
	#SYS_Êock
 
__NR_Êock


	)

418 
	#SYS_f‹k
 
__NR_f‹k


	)

419 
	#SYS_‰emovex©å
 
__NR_‰emovex©å


	)

420 
	#SYS_f£tx©å
 
__NR_f£tx©å


	)

421 
	#SYS_f°©
 
__NR_f°©


	)

422 
	#SYS_f°©fs
 
__NR_f°©fs


	)

423 
	#SYS_fsync
 
__NR_fsync


	)

424 
	#SYS_·runˇã
 
__NR_·runˇã


	)

425 
	#SYS_fuãx
 
__NR_fuãx


	)

426 
	#SYS_futimeßt
 
__NR_futimeßt


	)

427 
	#SYS_gë_kî√l_syms
 
__NR_gë_kî√l_syms


	)

428 
	#SYS_gë_mempﬁicy
 
__NR_gë_mempﬁicy


	)

429 
	#SYS_gë_robu°_li°
 
__NR_gë_robu°_li°


	)

430 
	#SYS_gë_thªad_¨ó
 
__NR_gë_thªad_¨ó


	)

431 
	#SYS_gë˝u
 
__NR_gë˝u


	)

432 
	#SYS_gëcwd
 
__NR_gëcwd


	)

433 
	#SYS_gëdíts
 
__NR_gëdíts


	)

434 
	#SYS_gëdíts64
 
__NR_gëdíts64


	)

435 
	#SYS_gëegid
 
__NR_gëegid


	)

436 
	#SYS_gëeuid
 
__NR_gëeuid


	)

437 
	#SYS_gëgid
 
__NR_gëgid


	)

438 
	#SYS_gëgroups
 
__NR_gëgroups


	)

439 
	#SYS_gëôimî
 
__NR_gëôimî


	)

440 
	#SYS_gë≥î«me
 
__NR_gë≥î«me


	)

441 
	#SYS_gëpgid
 
__NR_gëpgid


	)

442 
	#SYS_gëpgΩ
 
__NR_gëpgΩ


	)

443 
	#SYS_gëpid
 
__NR_gëpid


	)

444 
	#SYS_gëpmsg
 
__NR_gëpmsg


	)

445 
	#SYS_gëµid
 
__NR_gëµid


	)

446 
	#SYS_gë¥i‹ôy
 
__NR_gë¥i‹ôy


	)

447 
	#SYS_gëªsgid
 
__NR_gëªsgid


	)

448 
	#SYS_gëªsuid
 
__NR_gëªsuid


	)

449 
	#SYS_gëæimô
 
__NR_gëæimô


	)

450 
	#SYS_gërußge
 
__NR_gërußge


	)

451 
	#SYS_gësid
 
__NR_gësid


	)

452 
	#SYS_gësock«me
 
__NR_gësock«me


	)

453 
	#SYS_gësock›t
 
__NR_gësock›t


	)

454 
	#SYS_gëtid
 
__NR_gëtid


	)

455 
	#SYS_gëtimeofday
 
__NR_gëtimeofday


	)

456 
	#SYS_gëuid
 
__NR_gëuid


	)

457 
	#SYS_gëx©å
 
__NR_gëx©å


	)

458 
	#SYS_öô_moduÀ
 
__NR_öô_moduÀ


	)

459 
	#SYS_öŸify_add_w©ch
 
__NR_öŸify_add_w©ch


	)

460 
	#SYS_öŸify_öô
 
__NR_öŸify_öô


	)

461 
	#SYS_öŸify_öô1
 
__NR_öŸify_öô1


	)

462 
	#SYS_öŸify_rm_w©ch
 
__NR_öŸify_rm_w©ch


	)

463 
	#SYS_io_ˇn˚l
 
__NR_io_ˇn˚l


	)

464 
	#SYS_io_de°roy
 
__NR_io_de°roy


	)

465 
	#SYS_io_gëevíts
 
__NR_io_gëevíts


	)

466 
	#SYS_io_£tup
 
__NR_io_£tup


	)

467 
	#SYS_io_submô
 
__NR_io_submô


	)

468 
	#SYS_io˘l
 
__NR_io˘l


	)

469 
	#SYS_i›îm
 
__NR_i›îm


	)

470 
	#SYS_i›l
 
__NR_i›l


	)

471 
	#SYS_i›rio_gë
 
__NR_i›rio_gë


	)

472 
	#SYS_i›rio_£t
 
__NR_i›rio_£t


	)

473 
	#SYS_kcmp
 
__NR_kcmp


	)

474 
	#SYS_kexec_lﬂd
 
__NR_kexec_lﬂd


	)

475 
	#SYS_key˘l
 
__NR_key˘l


	)

476 
	#SYS_kûl
 
__NR_kûl


	)

477 
	#SYS_lchown
 
__NR_lchown


	)

478 
	#SYS_lgëx©å
 
__NR_lgëx©å


	)

479 
	#SYS_lök
 
__NR_lök


	)

480 
	#SYS_lök©
 
__NR_lök©


	)

481 
	#SYS_li°í
 
__NR_li°í


	)

482 
	#SYS_li°x©å
 
__NR_li°x©å


	)

483 
	#SYS_Œi°x©å
 
__NR_Œi°x©å


	)

484 
	#SYS_lookup_dcookõ
 
__NR_lookup_dcookõ


	)

485 
	#SYS_Ãemovex©å
 
__NR_Ãemovex©å


	)

486 
	#SYS_l£ek
 
__NR_l£ek


	)

487 
	#SYS_l£tx©å
 
__NR_l£tx©å


	)

488 
	#SYS_l°©
 
__NR_l°©


	)

489 
	#SYS_madvi£
 
__NR_madvi£


	)

490 
	#SYS_mböd
 
__NR_mböd


	)

491 
	#SYS_migøã_∑ges
 
__NR_migøã_∑ges


	)

492 
	#SYS_möc‹e
 
__NR_möc‹e


	)

493 
	#SYS_mkdú
 
__NR_mkdú


	)

494 
	#SYS_mkdú©
 
__NR_mkdú©


	)

495 
	#SYS_mknod
 
__NR_mknod


	)

496 
	#SYS_mknod©
 
__NR_mknod©


	)

497 
	#SYS_mlock
 
__NR_mlock


	)

498 
	#SYS_mlockÆl
 
__NR_mlockÆl


	)

499 
	#SYS_mm≠
 
__NR_mm≠


	)

500 
	#SYS_modify_ldt
 
__NR_modify_ldt


	)

501 
	#SYS_mou¡
 
__NR_mou¡


	)

502 
	#SYS_move_∑ges
 
__NR_move_∑ges


	)

503 
	#SYS_m¥Ÿe˘
 
__NR_m¥Ÿe˘


	)

504 
	#SYS_mq_gë£èâr
 
__NR_mq_gë£èâr


	)

505 
	#SYS_mq_nŸify
 
__NR_mq_nŸify


	)

506 
	#SYS_mq_›í
 
__NR_mq_›í


	)

507 
	#SYS_mq_timedª˚ive
 
__NR_mq_timedª˚ive


	)

508 
	#SYS_mq_timed£nd
 
__NR_mq_timed£nd


	)

509 
	#SYS_mq_u∆ök
 
__NR_mq_u∆ök


	)

510 
	#SYS_mªm≠
 
__NR_mªm≠


	)

511 
	#SYS_msg˘l
 
__NR_msg˘l


	)

512 
	#SYS_msggë
 
__NR_msggë


	)

513 
	#SYS_msgrcv
 
__NR_msgrcv


	)

514 
	#SYS_msg¢d
 
__NR_msg¢d


	)

515 
	#SYS_msync
 
__NR_msync


	)

516 
	#SYS_mu∆ock
 
__NR_mu∆ock


	)

517 
	#SYS_mu∆ockÆl
 
__NR_mu∆ockÆl


	)

518 
	#SYS_munm≠
 
__NR_munm≠


	)

519 
	#SYS_«me_to_h™dÀ_©
 
__NR_«me_to_h™dÀ_©


	)

520 
	#SYS_«no¶ìp
 
__NR_«no¶ìp


	)

521 
	#SYS_√wf°©©
 
__NR_√wf°©©


	)

522 
	#SYS_nfs£rv˘l
 
__NR_nfs£rv˘l


	)

523 
	#SYS_›í
 
__NR_›í


	)

524 
	#SYS_›í_by_h™dÀ_©
 
__NR_›í_by_h™dÀ_©


	)

525 
	#SYS_›í©
 
__NR_›í©


	)

526 
	#SYS_∑u£
 
__NR_∑u£


	)

527 
	#SYS_≥rf_evít_›í
 
__NR_≥rf_evít_›í


	)

528 
	#SYS_≥rs⁄Æôy
 
__NR_≥rs⁄Æôy


	)

529 
	#SYS_pùe
 
__NR_pùe


	)

530 
	#SYS_pùe2
 
__NR_pùe2


	)

531 
	#SYS_pivŸ_roŸ
 
__NR_pivŸ_roŸ


	)

532 
	#SYS_pﬁl
 
__NR_pﬁl


	)

533 
	#SYS_µﬁl
 
__NR_µﬁl


	)

534 
	#SYS_¥˘l
 
__NR_¥˘l


	)

535 
	#SYS_¥ód64
 
__NR_¥ód64


	)

536 
	#SYS_¥ódv
 
__NR_¥ódv


	)

537 
	#SYS_¥limô64
 
__NR_¥limô64


	)

538 
	#SYS_¥o˚ss_vm_ªadv
 
__NR_¥o˚ss_vm_ªadv


	)

539 
	#SYS_¥o˚ss_vm_wrôev
 
__NR_¥o˚ss_vm_wrôev


	)

540 
	#SYS_p£À˘6
 
__NR_p£À˘6


	)

541 
	#SYS_±ø˚
 
__NR_±ø˚


	)

542 
	#SYS_puçmsg
 
__NR_puçmsg


	)

543 
	#SYS_pwrôe64
 
__NR_pwrôe64


	)

544 
	#SYS_pwrôev
 
__NR_pwrôev


	)

545 
	#SYS_quîy_moduÀ
 
__NR_quîy_moduÀ


	)

546 
	#SYS_quŸa˘l
 
__NR_quŸa˘l


	)

547 
	#SYS_ªad
 
__NR_ªad


	)

548 
	#SYS_ªadahód
 
__NR_ªadahód


	)

549 
	#SYS_ªadlök
 
__NR_ªadlök


	)

550 
	#SYS_ªadlök©
 
__NR_ªadlök©


	)

551 
	#SYS_ªadv
 
__NR_ªadv


	)

552 
	#SYS_ªboŸ
 
__NR_ªboŸ


	)

553 
	#SYS_ªcv‰om
 
__NR_ªcv‰om


	)

554 
	#SYS_ªcvmmsg
 
__NR_ªcvmmsg


	)

555 
	#SYS_ªcvmsg
 
__NR_ªcvmsg


	)

556 
	#SYS_ªm≠_fûe_∑ges
 
__NR_ªm≠_fûe_∑ges


	)

557 
	#SYS_ªmovex©å
 
__NR_ªmovex©å


	)

558 
	#SYS_ª«me
 
__NR_ª«me


	)

559 
	#SYS_ª«mót
 
__NR_ª«mót


	)

560 
	#SYS_ªque°_key
 
__NR_ªque°_key


	)

561 
	#SYS_ª°¨t_sysˇŒ
 
__NR_ª°¨t_sysˇŒ


	)

562 
	#SYS_rmdú
 
__NR_rmdú


	)

563 
	#SYS_π_siga˘i⁄
 
__NR_π_siga˘i⁄


	)

564 
	#SYS_π_sig≥ndög
 
__NR_π_sig≥ndög


	)

565 
	#SYS_π_sig¥ocmask
 
__NR_π_sig¥ocmask


	)

566 
	#SYS_π_sigqueueöfo
 
__NR_π_sigqueueöfo


	)

567 
	#SYS_π_sigªtu∫
 
__NR_π_sigªtu∫


	)

568 
	#SYS_π_sigsu•íd
 
__NR_π_sigsu•íd


	)

569 
	#SYS_π_sigtimedwaô
 
__NR_π_sigtimedwaô


	)

570 
	#SYS_π_tgsigqueueöfo
 
__NR_π_tgsigqueueöfo


	)

571 
	#SYS_sched_gë_¥i‹ôy_max
 
__NR_sched_gë_¥i‹ôy_max


	)

572 
	#SYS_sched_gë_¥i‹ôy_mö
 
__NR_sched_gë_¥i‹ôy_mö


	)

573 
	#SYS_sched_gëafföôy
 
__NR_sched_gëafföôy


	)

574 
	#SYS_sched_gë∑øm
 
__NR_sched_gë∑øm


	)

575 
	#SYS_sched_gëscheduÀr
 
__NR_sched_gëscheduÀr


	)

576 
	#SYS_sched_º_gë_öãrvÆ
 
__NR_sched_º_gë_öãrvÆ


	)

577 
	#SYS_sched_£èfföôy
 
__NR_sched_£èfföôy


	)

578 
	#SYS_sched_£ç¨am
 
__NR_sched_£ç¨am


	)

579 
	#SYS_sched_£tscheduÀr
 
__NR_sched_£tscheduÀr


	)

580 
	#SYS_sched_yõld
 
__NR_sched_yõld


	)

581 
	#SYS_£curôy
 
__NR_£curôy


	)

582 
	#SYS_£À˘
 
__NR_£À˘


	)

583 
	#SYS_£m˘l
 
__NR_£m˘l


	)

584 
	#SYS_£mgë
 
__NR_£mgë


	)

585 
	#SYS_£m›
 
__NR_£m›


	)

586 
	#SYS_£mtimed›
 
__NR_£mtimed›


	)

587 
	#SYS_£ndfûe
 
__NR_£ndfûe


	)

588 
	#SYS_£ndmmsg
 
__NR_£ndmmsg


	)

589 
	#SYS_£ndmsg
 
__NR_£ndmsg


	)

590 
	#SYS_£ndto
 
__NR_£ndto


	)

591 
	#SYS_£t_mempﬁicy
 
__NR_£t_mempﬁicy


	)

592 
	#SYS_£t_robu°_li°
 
__NR_£t_robu°_li°


	)

593 
	#SYS_£t_thªad_¨ó
 
__NR_£t_thªad_¨ó


	)

594 
	#SYS_£t_tid_addªss
 
__NR_£t_tid_addªss


	)

595 
	#SYS_£tdomaö«me
 
__NR_£tdomaö«me


	)

596 
	#SYS_£tfsgid
 
__NR_£tfsgid


	)

597 
	#SYS_£tfsuid
 
__NR_£tfsuid


	)

598 
	#SYS_£tgid
 
__NR_£tgid


	)

599 
	#SYS_£tgroups
 
__NR_£tgroups


	)

600 
	#SYS_£tho°«me
 
__NR_£tho°«me


	)

601 
	#SYS_£tôimî
 
__NR_£tôimî


	)

602 
	#SYS_£äs
 
__NR_£äs


	)

603 
	#SYS_£çgid
 
__NR_£çgid


	)

604 
	#SYS_£çri‹ôy
 
__NR_£çri‹ôy


	)

605 
	#SYS_£åegid
 
__NR_£åegid


	)

606 
	#SYS_£åesgid
 
__NR_£åesgid


	)

607 
	#SYS_£åesuid
 
__NR_£åesuid


	)

608 
	#SYS_£åeuid
 
__NR_£åeuid


	)

609 
	#SYS_£ålimô
 
__NR_£ålimô


	)

610 
	#SYS_£tsid
 
__NR_£tsid


	)

611 
	#SYS_£tsock›t
 
__NR_£tsock›t


	)

612 
	#SYS_£âimeofday
 
__NR_£âimeofday


	)

613 
	#SYS_£tuid
 
__NR_£tuid


	)

614 
	#SYS_£tx©å
 
__NR_£tx©å


	)

615 
	#SYS_shm©
 
__NR_shm©


	)

616 
	#SYS_shm˘l
 
__NR_shm˘l


	)

617 
	#SYS_shmdt
 
__NR_shmdt


	)

618 
	#SYS_shmgë
 
__NR_shmgë


	)

619 
	#SYS_shutdown
 
__NR_shutdown


	)

620 
	#SYS_sigÆt°ack
 
__NR_sigÆt°ack


	)

621 
	#SYS_sig«lfd
 
__NR_sig«lfd


	)

622 
	#SYS_sig«lfd4
 
__NR_sig«lfd4


	)

623 
	#SYS_sockë
 
__NR_sockë


	)

624 
	#SYS_sockë∑ú
 
__NR_sockë∑ú


	)

625 
	#SYS_•li˚
 
__NR_•li˚


	)

626 
	#SYS_°©
 
__NR_°©


	)

627 
	#SYS_°©fs
 
__NR_°©fs


	)

628 
	#SYS_sw≠off
 
__NR_sw≠off


	)

629 
	#SYS_sw≠⁄
 
__NR_sw≠⁄


	)

630 
	#SYS_symlök
 
__NR_symlök


	)

631 
	#SYS_symlök©
 
__NR_symlök©


	)

632 
	#SYS_sync
 
__NR_sync


	)

633 
	#SYS_sync_fûe_ønge
 
__NR_sync_fûe_ønge


	)

634 
	#SYS_syncfs
 
__NR_syncfs


	)

635 
	#SYS_sysfs
 
__NR_sysfs


	)

636 
	#SYS_sysöfo
 
__NR_sysöfo


	)

637 
	#SYS_sy¶og
 
__NR_sy¶og


	)

638 
	#SYS_ãe
 
__NR_ãe


	)

639 
	#SYS_tgkûl
 
__NR_tgkûl


	)

640 
	#SYS_time
 
__NR_time


	)

641 
	#SYS_timî_¸óã
 
__NR_timî_¸óã


	)

642 
	#SYS_timî_dñëe
 
__NR_timî_dñëe


	)

643 
	#SYS_timî_gëovîrun
 
__NR_timî_gëovîrun


	)

644 
	#SYS_timî_gëtime
 
__NR_timî_gëtime


	)

645 
	#SYS_timî_£âime
 
__NR_timî_£âime


	)

646 
	#SYS_timîfd_¸óã
 
__NR_timîfd_¸óã


	)

647 
	#SYS_timîfd_gëtime
 
__NR_timîfd_gëtime


	)

648 
	#SYS_timîfd_£âime
 
__NR_timîfd_£âime


	)

649 
	#SYS_times
 
__NR_times


	)

650 
	#SYS_tkûl
 
__NR_tkûl


	)

651 
	#SYS_åunˇã
 
__NR_åunˇã


	)

652 
	#SYS_tuxˇŒ
 
__NR_tuxˇŒ


	)

653 
	#SYS_umask
 
__NR_umask


	)

654 
	#SYS_umou¡2
 
__NR_umou¡2


	)

655 
	#SYS_u«me
 
__NR_u«me


	)

656 
	#SYS_u∆ök
 
__NR_u∆ök


	)

657 
	#SYS_u∆ök©
 
__NR_u∆ök©


	)

658 
	#SYS_unsh¨e
 
__NR_unsh¨e


	)

659 
	#SYS_u£lib
 
__NR_u£lib


	)

660 
	#SYS_u°©
 
__NR_u°©


	)

661 
	#SYS_utime
 
__NR_utime


	)

662 
	#SYS_utimíßt
 
__NR_utimíßt


	)

663 
	#SYS_utimes
 
__NR_utimes


	)

664 
	#SYS_vf‹k
 
__NR_vf‹k


	)

665 
	#SYS_vh™gup
 
__NR_vh™gup


	)

666 
	#SYS_vm•li˚
 
__NR_vm•li˚


	)

667 
	#SYS_v£rvî
 
__NR_v£rvî


	)

668 
	#SYS_waô4
 
__NR_waô4


	)

669 
	#SYS_waôid
 
__NR_waôid


	)

670 
	#SYS_wrôe
 
__NR_wrôe


	)

671 
	#SYS_wrôev
 
__NR_wrôev


	)

673 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


674 
	#SYS_ac˚±
 
__NR_ac˚±


	)

675 
	#SYS_ac˚±4
 
__NR_ac˚±4


	)

676 
	#SYS_ac˚ss
 
__NR_ac˚ss


	)

677 
	#SYS_ac˘
 
__NR_ac˘


	)

678 
	#SYS_add_key
 
__NR_add_key


	)

679 
	#SYS_adjtimex
 
__NR_adjtimex


	)

680 
	#SYS_afs_sysˇŒ
 
__NR_afs_sysˇŒ


	)

681 
	#SYS_Æ¨m
 
__NR_Æ¨m


	)

682 
	#SYS_¨ch_¥˘l
 
__NR_¨ch_¥˘l


	)

683 
	#SYS_böd
 
__NR_böd


	)

684 
	#SYS_brk
 
__NR_brk


	)

685 
	#SYS_ˇpgë
 
__NR_ˇpgë


	)

686 
	#SYS_ˇp£t
 
__NR_ˇp£t


	)

687 
	#SYS_chdú
 
__NR_chdú


	)

688 
	#SYS_chmod
 
__NR_chmod


	)

689 
	#SYS_chown
 
__NR_chown


	)

690 
	#SYS_chroŸ
 
__NR_chroŸ


	)

691 
	#SYS_˛ock_adjtime
 
__NR_˛ock_adjtime


	)

692 
	#SYS_˛ock_gëªs
 
__NR_˛ock_gëªs


	)

693 
	#SYS_˛ock_gëtime
 
__NR_˛ock_gëtime


	)

694 
	#SYS_˛ock_«no¶ìp
 
__NR_˛ock_«no¶ìp


	)

695 
	#SYS_˛ock_£âime
 
__NR_˛ock_£âime


	)

696 
	#SYS_˛⁄e
 
__NR_˛⁄e


	)

697 
	#SYS_˛o£
 
__NR_˛o£


	)

698 
	#SYS_c⁄√˘
 
__NR_c⁄√˘


	)

699 
	#SYS_¸ót
 
__NR_¸ót


	)

700 
	#SYS_dñëe_moduÀ
 
__NR_dñëe_moduÀ


	)

701 
	#SYS_dup
 
__NR_dup


	)

702 
	#SYS_dup2
 
__NR_dup2


	)

703 
	#SYS_dup3
 
__NR_dup3


	)

704 
	#SYS_ïﬁl_¸óã
 
__NR_ïﬁl_¸óã


	)

705 
	#SYS_ïﬁl_¸óã1
 
__NR_ïﬁl_¸óã1


	)

706 
	#SYS_ïﬁl_˘l
 
__NR_ïﬁl_˘l


	)

707 
	#SYS_ïﬁl_pwaô
 
__NR_ïﬁl_pwaô


	)

708 
	#SYS_ïﬁl_waô
 
__NR_ïﬁl_waô


	)

709 
	#SYS_evítfd
 
__NR_evítfd


	)

710 
	#SYS_evítfd2
 
__NR_evítfd2


	)

711 
	#SYS_execve
 
__NR_execve


	)

712 
	#SYS_exô
 
__NR_exô


	)

713 
	#SYS_exô_group
 
__NR_exô_group


	)

714 
	#SYS_Ác˚sßt
 
__NR_Ác˚sßt


	)

715 
	#SYS_Ádvi£64
 
__NR_Ádvi£64


	)

716 
	#SYS_ÁŒoˇã
 
__NR_ÁŒoˇã


	)

717 
	#SYS_ÁnŸify_öô
 
__NR_ÁnŸify_öô


	)

718 
	#SYS_ÁnŸify_m¨k
 
__NR_ÁnŸify_m¨k


	)

719 
	#SYS_fchdú
 
__NR_fchdú


	)

720 
	#SYS_fchmod
 
__NR_fchmod


	)

721 
	#SYS_fchmod©
 
__NR_fchmod©


	)

722 
	#SYS_fchown
 
__NR_fchown


	)

723 
	#SYS_fchow«t
 
__NR_fchow«t


	)

724 
	#SYS_f˙é
 
__NR_f˙é


	)

725 
	#SYS_fd©async
 
__NR_fd©async


	)

726 
	#SYS_fgëx©å
 
__NR_fgëx©å


	)

727 
	#SYS_föô_moduÀ
 
__NR_föô_moduÀ


	)

728 
	#SYS_Êi°x©å
 
__NR_Êi°x©å


	)

729 
	#SYS_Êock
 
__NR_Êock


	)

730 
	#SYS_f‹k
 
__NR_f‹k


	)

731 
	#SYS_‰emovex©å
 
__NR_‰emovex©å


	)

732 
	#SYS_f£tx©å
 
__NR_f£tx©å


	)

733 
	#SYS_f°©
 
__NR_f°©


	)

734 
	#SYS_f°©fs
 
__NR_f°©fs


	)

735 
	#SYS_fsync
 
__NR_fsync


	)

736 
	#SYS_·runˇã
 
__NR_·runˇã


	)

737 
	#SYS_fuãx
 
__NR_fuãx


	)

738 
	#SYS_futimeßt
 
__NR_futimeßt


	)

739 
	#SYS_gë_mempﬁicy
 
__NR_gë_mempﬁicy


	)

740 
	#SYS_gë_robu°_li°
 
__NR_gë_robu°_li°


	)

741 
	#SYS_gë˝u
 
__NR_gë˝u


	)

742 
	#SYS_gëcwd
 
__NR_gëcwd


	)

743 
	#SYS_gëdíts
 
__NR_gëdíts


	)

744 
	#SYS_gëdíts64
 
__NR_gëdíts64


	)

745 
	#SYS_gëegid
 
__NR_gëegid


	)

746 
	#SYS_gëeuid
 
__NR_gëeuid


	)

747 
	#SYS_gëgid
 
__NR_gëgid


	)

748 
	#SYS_gëgroups
 
__NR_gëgroups


	)

749 
	#SYS_gëôimî
 
__NR_gëôimî


	)

750 
	#SYS_gë≥î«me
 
__NR_gë≥î«me


	)

751 
	#SYS_gëpgid
 
__NR_gëpgid


	)

752 
	#SYS_gëpgΩ
 
__NR_gëpgΩ


	)

753 
	#SYS_gëpid
 
__NR_gëpid


	)

754 
	#SYS_gëpmsg
 
__NR_gëpmsg


	)

755 
	#SYS_gëµid
 
__NR_gëµid


	)

756 
	#SYS_gë¥i‹ôy
 
__NR_gë¥i‹ôy


	)

757 
	#SYS_gëªsgid
 
__NR_gëªsgid


	)

758 
	#SYS_gëªsuid
 
__NR_gëªsuid


	)

759 
	#SYS_gëæimô
 
__NR_gëæimô


	)

760 
	#SYS_gërußge
 
__NR_gërußge


	)

761 
	#SYS_gësid
 
__NR_gësid


	)

762 
	#SYS_gësock«me
 
__NR_gësock«me


	)

763 
	#SYS_gësock›t
 
__NR_gësock›t


	)

764 
	#SYS_gëtid
 
__NR_gëtid


	)

765 
	#SYS_gëtimeofday
 
__NR_gëtimeofday


	)

766 
	#SYS_gëuid
 
__NR_gëuid


	)

767 
	#SYS_gëx©å
 
__NR_gëx©å


	)

768 
	#SYS_öô_moduÀ
 
__NR_öô_moduÀ


	)

769 
	#SYS_öŸify_add_w©ch
 
__NR_öŸify_add_w©ch


	)

770 
	#SYS_öŸify_öô
 
__NR_öŸify_öô


	)

771 
	#SYS_öŸify_öô1
 
__NR_öŸify_öô1


	)

772 
	#SYS_öŸify_rm_w©ch
 
__NR_öŸify_rm_w©ch


	)

773 
	#SYS_io_ˇn˚l
 
__NR_io_ˇn˚l


	)

774 
	#SYS_io_de°roy
 
__NR_io_de°roy


	)

775 
	#SYS_io_gëevíts
 
__NR_io_gëevíts


	)

776 
	#SYS_io_£tup
 
__NR_io_£tup


	)

777 
	#SYS_io_submô
 
__NR_io_submô


	)

778 
	#SYS_io˘l
 
__NR_io˘l


	)

779 
	#SYS_i›îm
 
__NR_i›îm


	)

780 
	#SYS_i›l
 
__NR_i›l


	)

781 
	#SYS_i›rio_gë
 
__NR_i›rio_gë


	)

782 
	#SYS_i›rio_£t
 
__NR_i›rio_£t


	)

783 
	#SYS_kcmp
 
__NR_kcmp


	)

784 
	#SYS_kexec_lﬂd
 
__NR_kexec_lﬂd


	)

785 
	#SYS_key˘l
 
__NR_key˘l


	)

786 
	#SYS_kûl
 
__NR_kûl


	)

787 
	#SYS_lchown
 
__NR_lchown


	)

788 
	#SYS_lgëx©å
 
__NR_lgëx©å


	)

789 
	#SYS_lök
 
__NR_lök


	)

790 
	#SYS_lök©
 
__NR_lök©


	)

791 
	#SYS_li°í
 
__NR_li°í


	)

792 
	#SYS_li°x©å
 
__NR_li°x©å


	)

793 
	#SYS_Œi°x©å
 
__NR_Œi°x©å


	)

794 
	#SYS_lookup_dcookõ
 
__NR_lookup_dcookõ


	)

795 
	#SYS_Ãemovex©å
 
__NR_Ãemovex©å


	)

796 
	#SYS_l£ek
 
__NR_l£ek


	)

797 
	#SYS_l£tx©å
 
__NR_l£tx©å


	)

798 
	#SYS_l°©
 
__NR_l°©


	)

799 
	#SYS_madvi£
 
__NR_madvi£


	)

800 
	#SYS_mböd
 
__NR_mböd


	)

801 
	#SYS_migøã_∑ges
 
__NR_migøã_∑ges


	)

802 
	#SYS_möc‹e
 
__NR_möc‹e


	)

803 
	#SYS_mkdú
 
__NR_mkdú


	)

804 
	#SYS_mkdú©
 
__NR_mkdú©


	)

805 
	#SYS_mknod
 
__NR_mknod


	)

806 
	#SYS_mknod©
 
__NR_mknod©


	)

807 
	#SYS_mlock
 
__NR_mlock


	)

808 
	#SYS_mlockÆl
 
__NR_mlockÆl


	)

809 
	#SYS_mm≠
 
__NR_mm≠


	)

810 
	#SYS_modify_ldt
 
__NR_modify_ldt


	)

811 
	#SYS_mou¡
 
__NR_mou¡


	)

812 
	#SYS_move_∑ges
 
__NR_move_∑ges


	)

813 
	#SYS_m¥Ÿe˘
 
__NR_m¥Ÿe˘


	)

814 
	#SYS_mq_gë£èâr
 
__NR_mq_gë£èâr


	)

815 
	#SYS_mq_nŸify
 
__NR_mq_nŸify


	)

816 
	#SYS_mq_›í
 
__NR_mq_›í


	)

817 
	#SYS_mq_timedª˚ive
 
__NR_mq_timedª˚ive


	)

818 
	#SYS_mq_timed£nd
 
__NR_mq_timed£nd


	)

819 
	#SYS_mq_u∆ök
 
__NR_mq_u∆ök


	)

820 
	#SYS_mªm≠
 
__NR_mªm≠


	)

821 
	#SYS_msg˘l
 
__NR_msg˘l


	)

822 
	#SYS_msggë
 
__NR_msggë


	)

823 
	#SYS_msgrcv
 
__NR_msgrcv


	)

824 
	#SYS_msg¢d
 
__NR_msg¢d


	)

825 
	#SYS_msync
 
__NR_msync


	)

826 
	#SYS_mu∆ock
 
__NR_mu∆ock


	)

827 
	#SYS_mu∆ockÆl
 
__NR_mu∆ockÆl


	)

828 
	#SYS_munm≠
 
__NR_munm≠


	)

829 
	#SYS_«me_to_h™dÀ_©
 
__NR_«me_to_h™dÀ_©


	)

830 
	#SYS_«no¶ìp
 
__NR_«no¶ìp


	)

831 
	#SYS_√wf°©©
 
__NR_√wf°©©


	)

832 
	#SYS_›í
 
__NR_›í


	)

833 
	#SYS_›í_by_h™dÀ_©
 
__NR_›í_by_h™dÀ_©


	)

834 
	#SYS_›í©
 
__NR_›í©


	)

835 
	#SYS_∑u£
 
__NR_∑u£


	)

836 
	#SYS_≥rf_evít_›í
 
__NR_≥rf_evít_›í


	)

837 
	#SYS_≥rs⁄Æôy
 
__NR_≥rs⁄Æôy


	)

838 
	#SYS_pùe
 
__NR_pùe


	)

839 
	#SYS_pùe2
 
__NR_pùe2


	)

840 
	#SYS_pivŸ_roŸ
 
__NR_pivŸ_roŸ


	)

841 
	#SYS_pﬁl
 
__NR_pﬁl


	)

842 
	#SYS_µﬁl
 
__NR_µﬁl


	)

843 
	#SYS_¥˘l
 
__NR_¥˘l


	)

844 
	#SYS_¥ód64
 
__NR_¥ód64


	)

845 
	#SYS_¥ódv
 
__NR_¥ódv


	)

846 
	#SYS_¥limô64
 
__NR_¥limô64


	)

847 
	#SYS_¥o˚ss_vm_ªadv
 
__NR_¥o˚ss_vm_ªadv


	)

848 
	#SYS_¥o˚ss_vm_wrôev
 
__NR_¥o˚ss_vm_wrôev


	)

849 
	#SYS_p£À˘6
 
__NR_p£À˘6


	)

850 
	#SYS_±ø˚
 
__NR_±ø˚


	)

851 
	#SYS_puçmsg
 
__NR_puçmsg


	)

852 
	#SYS_pwrôe64
 
__NR_pwrôe64


	)

853 
	#SYS_pwrôev
 
__NR_pwrôev


	)

854 
	#SYS_quŸa˘l
 
__NR_quŸa˘l


	)

855 
	#SYS_ªad
 
__NR_ªad


	)

856 
	#SYS_ªadahód
 
__NR_ªadahód


	)

857 
	#SYS_ªadlök
 
__NR_ªadlök


	)

858 
	#SYS_ªadlök©
 
__NR_ªadlök©


	)

859 
	#SYS_ªadv
 
__NR_ªadv


	)

860 
	#SYS_ªboŸ
 
__NR_ªboŸ


	)

861 
	#SYS_ªcv‰om
 
__NR_ªcv‰om


	)

862 
	#SYS_ªcvmmsg
 
__NR_ªcvmmsg


	)

863 
	#SYS_ªcvmsg
 
__NR_ªcvmsg


	)

864 
	#SYS_ªm≠_fûe_∑ges
 
__NR_ªm≠_fûe_∑ges


	)

865 
	#SYS_ªmovex©å
 
__NR_ªmovex©å


	)

866 
	#SYS_ª«me
 
__NR_ª«me


	)

867 
	#SYS_ª«mót
 
__NR_ª«mót


	)

868 
	#SYS_ªque°_key
 
__NR_ªque°_key


	)

869 
	#SYS_ª°¨t_sysˇŒ
 
__NR_ª°¨t_sysˇŒ


	)

870 
	#SYS_rmdú
 
__NR_rmdú


	)

871 
	#SYS_π_siga˘i⁄
 
__NR_π_siga˘i⁄


	)

872 
	#SYS_π_sig≥ndög
 
__NR_π_sig≥ndög


	)

873 
	#SYS_π_sig¥ocmask
 
__NR_π_sig¥ocmask


	)

874 
	#SYS_π_sigqueueöfo
 
__NR_π_sigqueueöfo


	)

875 
	#SYS_π_sigªtu∫
 
__NR_π_sigªtu∫


	)

876 
	#SYS_π_sigsu•íd
 
__NR_π_sigsu•íd


	)

877 
	#SYS_π_sigtimedwaô
 
__NR_π_sigtimedwaô


	)

878 
	#SYS_π_tgsigqueueöfo
 
__NR_π_tgsigqueueöfo


	)

879 
	#SYS_sched_gë_¥i‹ôy_max
 
__NR_sched_gë_¥i‹ôy_max


	)

880 
	#SYS_sched_gë_¥i‹ôy_mö
 
__NR_sched_gë_¥i‹ôy_mö


	)

881 
	#SYS_sched_gëafföôy
 
__NR_sched_gëafföôy


	)

882 
	#SYS_sched_gë∑øm
 
__NR_sched_gë∑øm


	)

883 
	#SYS_sched_gëscheduÀr
 
__NR_sched_gëscheduÀr


	)

884 
	#SYS_sched_º_gë_öãrvÆ
 
__NR_sched_º_gë_öãrvÆ


	)

885 
	#SYS_sched_£èfföôy
 
__NR_sched_£èfföôy


	)

886 
	#SYS_sched_£ç¨am
 
__NR_sched_£ç¨am


	)

887 
	#SYS_sched_£tscheduÀr
 
__NR_sched_£tscheduÀr


	)

888 
	#SYS_sched_yõld
 
__NR_sched_yõld


	)

889 
	#SYS_£curôy
 
__NR_£curôy


	)

890 
	#SYS_£À˘
 
__NR_£À˘


	)

891 
	#SYS_£m˘l
 
__NR_£m˘l


	)

892 
	#SYS_£mgë
 
__NR_£mgë


	)

893 
	#SYS_£m›
 
__NR_£m›


	)

894 
	#SYS_£mtimed›
 
__NR_£mtimed›


	)

895 
	#SYS_£ndfûe
 
__NR_£ndfûe


	)

896 
	#SYS_£ndmmsg
 
__NR_£ndmmsg


	)

897 
	#SYS_£ndmsg
 
__NR_£ndmsg


	)

898 
	#SYS_£ndto
 
__NR_£ndto


	)

899 
	#SYS_£t_mempﬁicy
 
__NR_£t_mempﬁicy


	)

900 
	#SYS_£t_robu°_li°
 
__NR_£t_robu°_li°


	)

901 
	#SYS_£t_tid_addªss
 
__NR_£t_tid_addªss


	)

902 
	#SYS_£tdomaö«me
 
__NR_£tdomaö«me


	)

903 
	#SYS_£tfsgid
 
__NR_£tfsgid


	)

904 
	#SYS_£tfsuid
 
__NR_£tfsuid


	)

905 
	#SYS_£tgid
 
__NR_£tgid


	)

906 
	#SYS_£tgroups
 
__NR_£tgroups


	)

907 
	#SYS_£tho°«me
 
__NR_£tho°«me


	)

908 
	#SYS_£tôimî
 
__NR_£tôimî


	)

909 
	#SYS_£äs
 
__NR_£äs


	)

910 
	#SYS_£çgid
 
__NR_£çgid


	)

911 
	#SYS_£çri‹ôy
 
__NR_£çri‹ôy


	)

912 
	#SYS_£åegid
 
__NR_£åegid


	)

913 
	#SYS_£åesgid
 
__NR_£åesgid


	)

914 
	#SYS_£åesuid
 
__NR_£åesuid


	)

915 
	#SYS_£åeuid
 
__NR_£åeuid


	)

916 
	#SYS_£ålimô
 
__NR_£ålimô


	)

917 
	#SYS_£tsid
 
__NR_£tsid


	)

918 
	#SYS_£tsock›t
 
__NR_£tsock›t


	)

919 
	#SYS_£âimeofday
 
__NR_£âimeofday


	)

920 
	#SYS_£tuid
 
__NR_£tuid


	)

921 
	#SYS_£tx©å
 
__NR_£tx©å


	)

922 
	#SYS_shm©
 
__NR_shm©


	)

923 
	#SYS_shm˘l
 
__NR_shm˘l


	)

924 
	#SYS_shmdt
 
__NR_shmdt


	)

925 
	#SYS_shmgë
 
__NR_shmgë


	)

926 
	#SYS_shutdown
 
__NR_shutdown


	)

927 
	#SYS_sigÆt°ack
 
__NR_sigÆt°ack


	)

928 
	#SYS_sig«lfd
 
__NR_sig«lfd


	)

929 
	#SYS_sig«lfd4
 
__NR_sig«lfd4


	)

930 
	#SYS_sockë
 
__NR_sockë


	)

931 
	#SYS_sockë∑ú
 
__NR_sockë∑ú


	)

932 
	#SYS_•li˚
 
__NR_•li˚


	)

933 
	#SYS_°©
 
__NR_°©


	)

934 
	#SYS_°©fs
 
__NR_°©fs


	)

935 
	#SYS_sw≠off
 
__NR_sw≠off


	)

936 
	#SYS_sw≠⁄
 
__NR_sw≠⁄


	)

937 
	#SYS_symlök
 
__NR_symlök


	)

938 
	#SYS_symlök©
 
__NR_symlök©


	)

939 
	#SYS_sync
 
__NR_sync


	)

940 
	#SYS_sync_fûe_ønge
 
__NR_sync_fûe_ønge


	)

941 
	#SYS_syncfs
 
__NR_syncfs


	)

942 
	#SYS_sysfs
 
__NR_sysfs


	)

943 
	#SYS_sysöfo
 
__NR_sysöfo


	)

944 
	#SYS_sy¶og
 
__NR_sy¶og


	)

945 
	#SYS_ãe
 
__NR_ãe


	)

946 
	#SYS_tgkûl
 
__NR_tgkûl


	)

947 
	#SYS_time
 
__NR_time


	)

948 
	#SYS_timî_¸óã
 
__NR_timî_¸óã


	)

949 
	#SYS_timî_dñëe
 
__NR_timî_dñëe


	)

950 
	#SYS_timî_gëovîrun
 
__NR_timî_gëovîrun


	)

951 
	#SYS_timî_gëtime
 
__NR_timî_gëtime


	)

952 
	#SYS_timî_£âime
 
__NR_timî_£âime


	)

953 
	#SYS_timîfd_¸óã
 
__NR_timîfd_¸óã


	)

954 
	#SYS_timîfd_gëtime
 
__NR_timîfd_gëtime


	)

955 
	#SYS_timîfd_£âime
 
__NR_timîfd_£âime


	)

956 
	#SYS_times
 
__NR_times


	)

957 
	#SYS_tkûl
 
__NR_tkûl


	)

958 
	#SYS_åunˇã
 
__NR_åunˇã


	)

959 
	#SYS_tuxˇŒ
 
__NR_tuxˇŒ


	)

960 
	#SYS_umask
 
__NR_umask


	)

961 
	#SYS_umou¡2
 
__NR_umou¡2


	)

962 
	#SYS_u«me
 
__NR_u«me


	)

963 
	#SYS_u∆ök
 
__NR_u∆ök


	)

964 
	#SYS_u∆ök©
 
__NR_u∆ök©


	)

965 
	#SYS_unsh¨e
 
__NR_unsh¨e


	)

966 
	#SYS_u°©
 
__NR_u°©


	)

967 
	#SYS_utime
 
__NR_utime


	)

968 
	#SYS_utimíßt
 
__NR_utimíßt


	)

969 
	#SYS_utimes
 
__NR_utimes


	)

970 
	#SYS_vf‹k
 
__NR_vf‹k


	)

971 
	#SYS_vh™gup
 
__NR_vh™gup


	)

972 
	#SYS_vm•li˚
 
__NR_vm•li˚


	)

973 
	#SYS_waô4
 
__NR_waô4


	)

974 
	#SYS_waôid
 
__NR_waôid


	)

975 
	#SYS_wrôe
 
__NR_wrôe


	)

976 
	#SYS_wrôev
 
__NR_wrôev


	)

	@/usr/include/bits/sysctl.h

18 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


	@/usr/include/bits/time.h

23 #i‡
deföed
 
__√ed_timevÆ
 || deföed 
__USE_GNU


24 #i‚de‡
_STRUCT_TIMEVAL


25 
	#_STRUCT_TIMEVAL
 1

	)

26 
	~<bôs/ty≥s.h
>

30 
	stimevÆ


32 
__time_t
 
	mtv_£c
;

33 
__su£c⁄ds_t
 
	mtv_u£c
;

38 #i‚de‡
__√ed_timevÆ


39 #i‚de‡
_BITS_TIME_H


40 
	#_BITS_TIME_H
 1

	)

48 
	#CLOCKS_PER_SEC
 1000000l

	)

50 #i‡(!
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_POSIX
) \

51 && !
deföed
 
	g__USE_XOPEN2K


54 
	~<bôs/ty≥s.h
>

55 
__sysc⁄f
 ();

56 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

59 #ifde‡
__USE_POSIX199309


61 
	#CLOCK_REALTIME
 0

	)

63 
	#CLOCK_MONOTONIC
 1

	)

65 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

67 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

69 
	#CLOCK_MONOTONIC_RAW
 4

	)

71 
	#CLOCK_REALTIME_COARSE
 5

	)

73 
	#CLOCK_MONOTONIC_COARSE
 6

	)

75 
	#CLOCK_BOOTTIME
 7

	)

77 
	#CLOCK_REALTIME_ALARM
 8

	)

79 
	#CLOCK_BOOTTIME_ALARM
 9

	)

82 
	#TIMER_ABSTIME
 1

	)

85 #ifde‡
__USE_GNU


86 
	~<bôs/timex.h
>

88 
__BEGIN_DECLS


91 
	$˛ock_adjtime
 (
__˛ockid_t
 
__˛ock_id
, 
timex
 *
__utx
Ë
__THROW
;

93 
__END_DECLS


99 #unde‡
__√ed_timevÆ


	@/usr/include/bits/types.h

23 #i‚def 
_BITS_TYPES_H


24 
	#_BITS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/w‹dsize.h
>

30 
	t__u_ch¨
;

31 
	t__u_sh‹t
;

32 
	t__u_öt
;

33 
	t__u_l⁄g
;

36 sig√d 
	t__öt8_t
;

37 
	t__uöt8_t
;

38 sig√d 
	t__öt16_t
;

39 
	t__uöt16_t
;

40 sig√d 
	t__öt32_t
;

41 
	t__uöt32_t
;

42 #i‡
__WORDSIZE
 == 64

43 sig√d 
	t__öt64_t
;

44 
	t__uöt64_t
;

46 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

47 
__exãnsi⁄__
 
	t__uöt64_t
;

51 #i‡
__WORDSIZE
 == 64

52 
	t__quad_t
;

53 
	t__u_quad_t
;

55 
__exãnsi⁄__
 
	t__quad_t
;

56 
__exãnsi⁄__
 
	t__u_quad_t
;

89 
	#__S16_TYPE
 

	)

90 
	#__U16_TYPE
 

	)

91 
	#__S32_TYPE
 

	)

92 
	#__U32_TYPE
 

	)

93 
	#__SLONGWORD_TYPE
 

	)

94 
	#__ULONGWORD_TYPE
 

	)

95 #i‡
__WORDSIZE
 == 32

96 
	#__SQUAD_TYPE
 
__quad_t


	)

97 
	#__UQUAD_TYPE
 
__u_quad_t


	)

98 
	#__SWORD_TYPE
 

	)

99 
	#__UWORD_TYPE
 

	)

100 
	#__SLONG32_TYPE
 

	)

101 
	#__ULONG32_TYPE
 

	)

102 
	#__S64_TYPE
 
__quad_t


	)

103 
	#__U64_TYPE
 
__u_quad_t


	)

106 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

107 #ñi‡
__WORDSIZE
 == 64

108 
	t__SQUAD_TYPE
 

	)

109 
	t__UQUAD_TYPE
 

	)

110 
	t__SWORD_TYPE
 

	)

111 
	t__UWORD_TYPE
 

	)

112 
	t__SLONG32_TYPE
 

	)

113 
	t__ULONG32_TYPE
 

	)

114 
	t__S64_TYPE
 

	)

115 
	t__U64_TYPE
 

	)

117 
	t__STD_TYPE
 

	)

121 
	~<bôs/ty≥sizes.h
>

124 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

125 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

126 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

127 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

128 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

129 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

130 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

131 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

132 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

133 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

134 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

135 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

136 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

137 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

138 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

139 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

140 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

141 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

143 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

144 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

147 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

150 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

153 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

158 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

159 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

162 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

163 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

166 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

167 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

170 
__STD_TYPE
 
__FSWORD_T_TYPE
 
	g__fsw‹d_t
;

172 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

175 
__STD_TYPE
 
__SYSCALL_SLONG_TYPE
 
	g__sysˇŒ_¶⁄g_t
;

177 
__STD_TYPE
 
__SYSCALL_ULONG_TYPE
 
	g__sysˇŒ_ul⁄g_t
;

181 
__off64_t
 
	t__loff_t
;

182 
__quad_t
 *
	t__qaddr_t
;

183 *
	t__ˇddr_t
;

186 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

189 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

192 #unde‡
__STD_TYPE


	@/usr/include/bits/uio.h

18 #i‡!
deföed
 
_SYS_UIO_H
 && !deföed 
_FCNTL_H


22 #i‚de‡
_BITS_UIO_H


23 
	#_BITS_UIO_H
 1

	)

25 
	~<sys/ty≥s.h
>

39 
	#UIO_MAXIOV
 1024

	)

43 
	siovec


45 *
	miov_ba£
;

46 
size_t
 
	miov_Àn
;

52 #ifde‡
__USE_GNU


53 #i‡
deföed
 
_SYS_UIO_H
 && !deföed 
_BITS_UIO_H_FOR_SYS_UIO_H


54 
	#_BITS_UIO_H_FOR_SYS_UIO_H
 1

	)

56 
__BEGIN_DECLS


59 
ssize_t
 
	$¥o˚ss_vm_ªadv
 (
pid_t
 
__pid
, c⁄° 
iovec
 *
__lvec
,

60 
__liov˙t
,

61 c⁄° 
iovec
 *
__rvec
,

62 
__riov˙t
,

63 
__Êags
)

64 
__THROW
;

67 
ssize_t
 
	$¥o˚ss_vm_wrôev
 (
pid_t
 
__pid
, c⁄° 
iovec
 *
__lvec
,

68 
__liov˙t
,

69 c⁄° 
iovec
 *
__rvec
,

70 
__riov˙t
,

71 
__Êags
)

72 
__THROW
;

74 
__END_DECLS


	@/usr/include/bits/unistd.h

19 #i‚de‡
_UNISTD_H


23 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

24 
size_t
 
__buÊí
Ë
__wur
;

25 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

26 
size_t
 
__nbyãs
), 
ªad
Ë
__wur
;

27 
ssize_t
 
	`__REDIRECT
 (
__ªad_chk_w¨n
,

28 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

29 
size_t
 
__buÊí
), 
__ªad_chk
)

30 
__wur
 
	`__w¨«âr
 ("read called with biggerÜengthÅhan size of "

33 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


34 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

36 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

38 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

39  
	`__ªad_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

41 i‡(
__nbyãs
 > 
	`__bos0
 (
__buf
))

42  
	`__ªad_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

44  
	`__ªad_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
);

45 
	}
}

47 #ifde‡
__USE_UNIX98


48 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

49 
__off_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

50 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

51 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

52 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

53 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

54 
__off_t
 
__off£t
), 
¥ód
Ë
__wur
;

55 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

56 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

57 
__off64_t
 
__off£t
), 
¥ód64
Ë
__wur
;

58 
ssize_t
 
	`__REDIRECT
 (
__¥ód_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

60 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__¥ód_chk
)

61 
__wur
 
	`__w¨«âr
 ("pread called with biggerÜengthÅhan size of "

63 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_chk_w¨n
,

64 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

65 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

66 
__¥ód64_chk
)

67 
__wur
 
	`__w¨«âr
 ("pread64 called with biggerÜengthÅhan size of "

70 #i‚de‡
__USE_FILE_OFFSET64


71 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


72 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

74 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

76 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

77  
	`__¥ód_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

79 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

80  
	`__¥ód_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

81 
	`__bos0
 (
__buf
));

83  
	`__¥ód_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

84 
	}
}

86 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


87 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

89 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

91 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

92  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

94 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

95  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

96 
	`__bos0
 (
__buf
));

99  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

100 
	}
}

103 #ifde‡
__USE_LARGEFILE64


104 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


105 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

107 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

109 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

110  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

112 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

113  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

114 
	`__bos0
 (
__buf
));

117  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

118 
	}
}

122 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


123 
ssize_t
 
	$__ªadlök_chk
 (c⁄° *
__ª°ri˘
 
__∑th
,

124 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

125 
size_t
 
__buÊí
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

127 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

128 (c⁄° *
__ª°ri˘
 
__∑th
,

129 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

130 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

131 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_chk_w¨n
,

132 (c⁄° *
__ª°ri˘
 
__∑th
,

133 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

134 
size_t
 
__buÊí
), 
__ªadlök_chk
)

135 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__w¨«âr
 ("readlink called with biggerÜength "

138 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


139 
	`__NTH
 (
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

140 
size_t
 
__Àn
))

142 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

144 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

145  
	`__ªadlök_chk
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

147 i‡–
__Àn
 > 
	`__bos
 (
__buf
))

148  
	`__ªadlök_chk_w¨n
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

150  
	`__ªadlök_Æüs
 (
__∑th
, 
__buf
, 
__Àn
);

151 
	}
}

154 #ifde‡
__USE_ATFILE


155 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

156 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

157 
size_t
 
__buÊí
)

158 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

159 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

160 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

161 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

162 
ªadlök©
)

163 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

164 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_chk_w¨n
,

165 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

166 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

167 
size_t
 
__buÊí
), 
__ªadlök©_chk
)

168 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__w¨«âr
 ("readlinkat called with bigger "

172 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


173 
	`__NTH
 (
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

174 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

176 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

178 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

179  
	`__ªadlök©_chk
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

181 i‡(
__Àn
 > 
	`__bos
 (
__buf
))

182  
	`__ªadlök©_chk_w¨n
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
,

183 
	`__bos
 (
__buf
));

185  
	`__ªadlök©_Æüs
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

186 
	}
}

189 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

190 
__THROW
 
__wur
;

191 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

192 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

193 *
	`__REDIRECT_NTH
 (
__gëcwd_chk_w¨n
,

194 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
),

195 
__gëcwd_chk
)

196 
__wur
 
	`__w¨«âr
 ("getcwd caller with biggerÜengthÅhan size of "

199 
__f‹tify_fun˘i⁄
 
__wur
 *

200 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

202 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

204 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

205  
	`__gëcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

207 i‡(
__size
 > 
	`__bos
 (
__buf
))

208  
	`__gëcwd_chk_w¨n
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

210  
	`__gëcwd_Æüs
 (
__buf
, 
__size
);

211 
	}
}

213 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


214 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

215 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

216 *
	`__REDIRECT_NTH
 (
__gëwd_w¨n
, (*
__buf
), 
gëwd
)

217 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("please use getcwd instead,ás getwd "

220 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

221 
	`__NTH
 (
	$gëwd
 (*
__buf
))

223 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

224  
	`__gëwd_chk
 (
__buf
, 
	`__bos
 (__buf));

225  
	`__gëwd_w¨n
 (
__buf
);

226 
	}
}

229 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

230 
size_t
 
__buÊí
Ë
__THROW
;

231 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

232 
size_t
 
__Àn
), 
c⁄f°r
);

233 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_chk_w¨n
,

234 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

235 
size_t
 
__buÊí
), 
__c⁄f°r_chk
)

236 
	`__w¨«âr
 ("confstr called with biggerÜengthÅhan size of destination "

239 
__f‹tify_fun˘i⁄
 
size_t


240 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

242 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

244 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

245  
	`__c⁄f°r_chk
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

247 i‡(
	`__bos
 (
__buf
Ë< 
__Àn
)

248  
	`__c⁄f°r_chk_w¨n
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

250  
	`__c⁄f°r_Æüs
 (
__«me
, 
__buf
, 
__Àn
);

251 
	}
}

254 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
)

255 
__THROW
 
__wur
;

256 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

257 
gëgroups
Ë
__wur
;

258 
	`__REDIRECT_NTH
 (
__gëgroups_chk_w¨n
,

259 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
),

260 
__gëgroups_chk
)

261 
__wur
 
	`__w¨«âr
 ("getgroups called with bigger group countÅhan what "

264 
__f‹tify_fun˘i⁄
 

265 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

267 i‡(
	`__bos
 (
__li°
Ë!(
size_t
) -1)

269 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
) || __size < 0)

270  
	`__gëgroups_chk
 (
__size
, 
__li°
, 
	`__bos
 (__list));

272 i‡(
__size
 *  (
__gid_t
Ë> 
	`__bos
 (
__li°
))

273  
	`__gëgroups_chk_w¨n
 (
__size
, 
__li°
, 
	`__bos
 (__list));

275  
	`__gëgroups_Æüs
 (
__size
, 
__li°
);

276 
	}
}

279 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

280 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

281 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

282 
size_t
 
__buÊí
), 
ây«me_r
)

283 
	`__n⁄nuŒ
 ((2));

284 
	`__REDIRECT_NTH
 (
__ây«me_r_chk_w¨n
,

285 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

286 
size_t
 
__ƒól
), 
__ây«me_r_chk
)

287 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ttyname_r called with bigger buflenÅhan "

290 
__f‹tify_fun˘i⁄
 

291 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

293 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

295 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

296  
	`__ây«me_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

298 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

299  
	`__ây«me_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

301  
	`__ây«me_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

302 
	}
}

305 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


306 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

307 
	`__n⁄nuŒ
 ((1));

308 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

309 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

310 
	`__REDIRECT
 (
__gëlogö_r_chk_w¨n
,

311 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

312 
__gëlogö_r_chk
)

313 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("getlogin_r called with bigger buflenÅhan "

316 
__f‹tify_fun˘i⁄
 

317 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

319 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

321 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

322  
	`__gëlogö_r_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

324 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

325  
	`__gëlogö_r_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

327  
	`__gëlogö_r_Æüs
 (
__buf
, 
__buÊí
);

328 
	}
}

332 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


333 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

335 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

336 
gëho°«me
Ë
	`__n⁄nuŒ
 ((1));

337 
	`__REDIRECT_NTH
 (
__gëho°«me_chk_w¨n
,

338 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

339 
__gëho°«me_chk
)

340 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("gethostname called with bigger buflenÅhan "

343 
__f‹tify_fun˘i⁄
 

344 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

346 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

349  
	`__gëho°«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

351 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

352  
	`__gëho°«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

354  
	`__gëho°«me_Æüs
 (
__buf
, 
__buÊí
);

355 
	}
}

359 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

360 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

361 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

362 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

363 
size_t
 
__buÊí
),

364 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

365 
	`__REDIRECT_NTH
 (
__gëdomaö«me_chk_w¨n
,

366 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

367 
__gëdomaö«me_chk
)

368 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("getdomainname called with bigger "

372 
__f‹tify_fun˘i⁄
 

373 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

375 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

377 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

378  
	`__gëdomaö«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

380 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

381  
	`__gëdomaö«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

383  
	`__gëdomaö«me_Æüs
 (
__buf
, 
__buÊí
);

384 
	}
}

	@/usr/include/bits/waitflags.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


25 
	#WNOHANG
 1

	)

26 
	#WUNTRACED
 2

	)

29 
	#WSTOPPED
 2

	)

30 
	#WEXITED
 4

	)

31 
	#WCONTINUED
 8

	)

32 
	#WNOWAIT
 0x01000000

	)

34 
	#__WNOTHREAD
 0x20000000

	)

36 
	#__WALL
 0x40000000

	)

37 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


28 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

31 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

34 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

37 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

40 
	#__WIFSIGNALED
(
°©us
) \

41 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

44 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

48 #ifde‡
WCONTINUED


49 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

53 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

56 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

57 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

58 
	#__W_CONTINUED
 0xffff

	)

59 
	#__WCOREFLAG
 0x80

	)

62 #ifdef 
__USE_BSD


64 
	~<ídün.h
>

66 
	uwaô


68 
	mw_°©us
;

71 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


72 
	m__w_ãrmsig
:7;

73 
	m__w_c‹edump
:1;

74 
	m__w_ªtcode
:8;

77 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


79 
	m__w_ªtcode
:8;

80 
	m__w_c‹edump
:1;

81 
	m__w_ãrmsig
:7;

83 } 
	m__waô_ãrmö©ed
;

86 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


87 
	m__w_°›vÆ
:8;

88 
	m__w_°›sig
:8;

91 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


93 
	m__w_°›sig
:8;

94 
	m__w_°›vÆ
:8;

96 } 
	m__waô_°›≥d
;

99 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

100 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

101 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

102 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

103 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/bits/wchar.h

19 #i‚de‡
_BITS_WCHAR_H


20 
	#_BITS_WCHAR_H
 1

	)

33 #ifde‡
__WCHAR_MAX__


34 
	#__WCHAR_MAX
 
__WCHAR_MAX__


	)

35 #ñi‡
L
'\0' - 1 > 0

36 
	#__WCHAR_MAX
 (0xffffffffu + 
L
'\0')

	)

38 
	#__WCHAR_MAX
 (0x7ffffff‡+ 
L
'\0')

	)

41 #ifde‡
__WCHAR_MIN__


42 
	#__WCHAR_MIN
 
__WCHAR_MIN__


	)

43 #ñi‡
L
'\0' - 1 > 0

44 
	#__WCHAR_MIN
 (
L
'\0' + 0)

	)

46 
	#__WCHAR_MIN
 (-
__WCHAR_MAX
 - 1)

	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__
 && !deföed 
__ILP32__


4 
	#__WORDSIZE
 64

	)

6 
	#__WORDSIZE
 32

	)

9 #ifde‡
__x86_64__


10 
	#__WORDSIZE_TIME64_COMPAT32
 1

	)

12 
	#__SYSCALL_WORDSIZE
 64

	)

	@/usr/include/bits/xopen_lim.h

29 #i‚de‡
_XOPEN_LIM_H


30 
	#_XOPEN_LIM_H
 1

	)

32 
	#__√ed_IOV_MAX


	)

33 
	~<bôs/°dio_lim.h
>

65 
	#_XOPEN_IOV_MAX
 
_POSIX_UIO_MAXIOV


	)

70 
	#NL_ARGMAX
 
_POSIX_ARG_MAX


	)

73 
	#NL_LANGMAX
 
_POSIX2_LINE_MAX


	)

76 
	#NL_MSGMAX
 
INT_MAX


	)

80 
	#NL_NMAX
 
INT_MAX


	)

83 
	#NL_SETMAX
 
INT_MAX


	)

86 
	#NL_TEXTMAX
 
INT_MAX


	)

89 
	#NZERO
 20

	)

93 #ifde‡
INT_MAX


94 #i‡
INT_MAX
 == 32767

95 
	#WORD_BIT
 16

	)

97 #i‡
INT_MAX
 == 2147483647

98 
	#WORD_BIT
 32

	)

101 
	#WORD_BIT
 64

	)

104 #ñi‡
deföed
 
__INT_MAX__


105 #i‡
__INT_MAX__
 == 32767

106 
	#WORD_BIT
 16

	)

108 #i‡
__INT_MAX__
 == 2147483647

109 
	#WORD_BIT
 32

	)

112 
	#WORD_BIT
 64

	)

116 
	#WORD_BIT
 32

	)

120 #ifde‡
LONG_MAX


121 #i‡
LONG_MAX
 == 2147483647

122 
	#LONG_BIT
 32

	)

125 
	#LONG_BIT
 64

	)

127 #ñi‡
deföed
 
__LONG_MAX__


128 #i‡
__LONG_MAX__
 == 2147483647

129 
	#LONG_BIT
 32

	)

132 
	#LONG_BIT
 64

	)

135 
	~<bôs/w‹dsize.h
>

136 #i‡
__WORDSIZE
 == 64

137 
	#LONG_BIT
 64

	)

139 
	#LONG_BIT
 32

	)

	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_BSD


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_BSD
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

74 
	#htﬁe64
(
x
Ë(x)

	)

75 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

76 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

98 #unde‡
__USE_ISOC11


99 #unde‡
__USE_ISOC99


100 #unde‡
__USE_ISOC95


101 #unde‡
__USE_ISOCXX11


102 #unde‡
__USE_POSIX


103 #unde‡
__USE_POSIX2


104 #unde‡
__USE_POSIX199309


105 #unde‡
__USE_POSIX199506


106 #unde‡
__USE_XOPEN


107 #unde‡
__USE_XOPEN_EXTENDED


108 #unde‡
__USE_UNIX98


109 #unde‡
__USE_XOPEN2K


110 #unde‡
__USE_XOPEN2KXSI


111 #unde‡
__USE_XOPEN2K8


112 #unde‡
__USE_XOPEN2K8XSI


113 #unde‡
__USE_LARGEFILE


114 #unde‡
__USE_LARGEFILE64


115 #unde‡
__USE_FILE_OFFSET64


116 #unde‡
__USE_BSD


117 #unde‡
__USE_SVID


118 #unde‡
__USE_MISC


119 #unde‡
__USE_ATFILE


120 #unde‡
__USE_GNU


121 #unde‡
__USE_REENTRANT


122 #unde‡
__USE_FORTIFY_LEVEL


123 #unde‡
__FAVOR_BSD


124 #unde‡
__KERNEL_STRICT_NAMES


128 #i‚de‡
_LOOSE_KERNEL_NAMES


129 
	#__KERNEL_STRICT_NAMES


	)

139 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


140 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

141 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

143 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

148 #i‡
deföed
 
_BSD_SOURCE
 && \

149 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

150 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

151 
	#__FAVOR_BSD
 1

	)

155 #ifde‡
_GNU_SOURCE


156 #unde‡
_ISOC95_SOURCE


157 
	#_ISOC95_SOURCE
 1

	)

158 #unde‡
_ISOC99_SOURCE


159 
	#_ISOC99_SOURCE
 1

	)

160 #unde‡
_ISOC11_SOURCE


161 
	#_ISOC11_SOURCE
 1

	)

162 #unde‡
_POSIX_SOURCE


163 
	#_POSIX_SOURCE
 1

	)

164 #unde‡
_POSIX_C_SOURCE


165 
	#_POSIX_C_SOURCE
 200809L

	)

166 #unde‡
_XOPEN_SOURCE


167 
	#_XOPEN_SOURCE
 700

	)

168 #unde‡
_XOPEN_SOURCE_EXTENDED


169 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

170 #unde‡
_LARGEFILE64_SOURCE


171 
	#_LARGEFILE64_SOURCE
 1

	)

172 #unde‡
_BSD_SOURCE


173 
	#_BSD_SOURCE
 1

	)

174 #unde‡
_SVID_SOURCE


175 
	#_SVID_SOURCE
 1

	)

176 #unde‡
_ATFILE_SOURCE


177 
	#_ATFILE_SOURCE
 1

	)

182 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

183 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

184 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

185 
	#_BSD_SOURCE
 1

	)

186 
	#_SVID_SOURCE
 1

	)

190 #i‡(
deföed
 
_ISOC11_SOURCE
 \

191 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

192 
	#__USE_ISOC11
 1

	)

196 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

197 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

198 
	#__USE_ISOC99
 1

	)

202 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

203 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

204 
	#__USE_ISOC95
 1

	)

211 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

212 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

213 
	#__USE_ISOCXX11
 1

	)

218 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

219 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

220 
	#_POSIX_SOURCE
 1

	)

221 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

222 
	#_POSIX_C_SOURCE
 2

	)

223 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

224 
	#_POSIX_C_SOURCE
 199506L

	)

225 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

226 
	#_POSIX_C_SOURCE
 200112L

	)

228 
	#_POSIX_C_SOURCE
 200809L

	)

230 
	#__USE_POSIX_IMPLICITLY
 1

	)

233 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


234 
	#__USE_POSIX
 1

	)

237 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


238 
	#__USE_POSIX2
 1

	)

241 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

242 
	#__USE_POSIX199309
 1

	)

245 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

246 
	#__USE_POSIX199506
 1

	)

249 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

250 
	#__USE_XOPEN2K
 1

	)

251 #unde‡
__USE_ISOC95


252 
	#__USE_ISOC95
 1

	)

253 #unde‡
__USE_ISOC99


254 
	#__USE_ISOC99
 1

	)

257 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

258 
	#__USE_XOPEN2K8
 1

	)

259 #unde‡
_ATFILE_SOURCE


260 
	#_ATFILE_SOURCE
 1

	)

263 #ifdef 
_XOPEN_SOURCE


264 
	#__USE_XOPEN
 1

	)

265 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

266 
	#__USE_XOPEN_EXTENDED
 1

	)

267 
	#__USE_UNIX98
 1

	)

268 #unde‡
_LARGEFILE_SOURCE


269 
	#_LARGEFILE_SOURCE
 1

	)

270 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

271 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

272 
	#__USE_XOPEN2K8
 1

	)

273 
	#__USE_XOPEN2K8XSI
 1

	)

275 
	#__USE_XOPEN2K
 1

	)

276 
	#__USE_XOPEN2KXSI
 1

	)

277 #unde‡
__USE_ISOC95


278 
	#__USE_ISOC95
 1

	)

279 #unde‡
__USE_ISOC99


280 
	#__USE_ISOC99
 1

	)

283 #ifde‡
_XOPEN_SOURCE_EXTENDED


284 
	#__USE_XOPEN_EXTENDED
 1

	)

289 #ifde‡
_LARGEFILE_SOURCE


290 
	#__USE_LARGEFILE
 1

	)

293 #ifde‡
_LARGEFILE64_SOURCE


294 
	#__USE_LARGEFILE64
 1

	)

297 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

298 
	#__USE_FILE_OFFSET64
 1

	)

301 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


302 
	#__USE_MISC
 1

	)

305 #ifdef 
_BSD_SOURCE


306 
	#__USE_BSD
 1

	)

309 #ifdef 
_SVID_SOURCE


310 
	#__USE_SVID
 1

	)

313 #ifdef 
_ATFILE_SOURCE


314 
	#__USE_ATFILE
 1

	)

317 #ifdef 
_GNU_SOURCE


318 
	#__USE_GNU
 1

	)

321 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


322 
	#__USE_REENTRANT
 1

	)

325 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0

326 #i‡!
deföed
 
__OPTIMIZE__
 || __OPTIMIZE__ <= 0

327 #w¨nög 
_FORTIFY_SOURCE
 
ªquúes
 
compûög
 
wôh
 
›timiz©i⁄
 (-
O
)

328 #ñi‡!
__GNUC_PREREQ
 (4, 1)

329 #w¨nög 
_FORTIFY_SOURCE
 
ªquúes
 
GCC
 4.1 
‹
 
œãr


330 #ñi‡
_FORTIFY_SOURCE
 > 1

331 
	#__USE_FORTIFY_LEVEL
 2

	)

333 
	#__USE_FORTIFY_LEVEL
 1

	)

336 #i‚de‡
__USE_FORTIFY_LEVEL


337 
	#__USE_FORTIFY_LEVEL
 0

	)

342 
	~<°dc-¥edef.h
>

350 #unde‡
__GNU_LIBRARY__


351 
	#__GNU_LIBRARY__
 6

	)

355 
	#__GLIBC__
 2

	)

356 
	#__GLIBC_MINOR__
 18

	)

358 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

359 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

362 #i‚de‡
__ASSEMBLER__


363 #i‚de‡
_SYS_CDEFS_H


364 
	~<sys/cdefs.h
>

369 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


370 
	#__USE_LARGEFILE
 1

	)

371 
	#__USE_LARGEFILE64
 1

	)

377 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

378 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

379 && 
deföed
 
	g__exã∫_ölöe


380 
	#__USE_EXTERN_INLINES
 1

	)

388 
	~<gnu/°ubs.h
>

	@/usr/include/libio.h

28 #i‚de‡
_IO_STDIO_H


29 
	#_IO_STDIO_H


	)

31 
	~<_G_c⁄fig.h
>

33 
	#_IO_Âos_t
 
_G_Âos_t


	)

34 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

35 
	#_IO_size_t
 
size_t


	)

36 
	#_IO_ssize_t
 
__ssize_t


	)

37 
	#_IO_off_t
 
__off_t


	)

38 
	#_IO_off64_t
 
__off64_t


	)

39 
	#_IO_pid_t
 
__pid_t


	)

40 
	#_IO_uid_t
 
__uid_t


	)

41 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

42 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

43 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

44 
	#_IO_va_li°
 
_G_va_li°


	)

45 
	#_IO_wöt_t
 
wöt_t


	)

48 
	#__√ed___va_li°


	)

49 
	~<°d¨g.h
>

50 #ifde‡
__GNUC_VA_LIST


51 #unde‡
_IO_va_li°


52 
	#_IO_va_li°
 
__gnuc_va_li°


	)

55 #i‚de‡
__P


56 
	~<sys/cdefs.h
>

59 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

61 #i‚de‡
EOF


62 
	#EOF
 (-1)

	)

64 #i‚de‡
NULL


65 #i‡
deföed
 
__GNUG__
 && \

66 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

67 
	#NULL
 (
__nuŒ
)

	)

69 #i‡!
deföed
(
__˝lu•lus
)

70 
	#NULL
 ((*)0)

	)

72 
	#NULL
 (0)

	)

77 
	#_IOS_INPUT
 1

	)

78 
	#_IOS_OUTPUT
 2

	)

79 
	#_IOS_ATEND
 4

	)

80 
	#_IOS_APPEND
 8

	)

81 
	#_IOS_TRUNC
 16

	)

82 
	#_IOS_NOCREATE
 32

	)

83 
	#_IOS_NOREPLACE
 64

	)

84 
	#_IOS_BIN
 128

	)

92 
	#_IO_MAGIC
 0xFBAD0000

	)

93 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

94 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

95 
	#_IO_USER_BUF
 1

	)

96 
	#_IO_UNBUFFERED
 2

	)

97 
	#_IO_NO_READS
 4

	)

98 
	#_IO_NO_WRITES
 8

	)

99 
	#_IO_EOF_SEEN
 0x10

	)

100 
	#_IO_ERR_SEEN
 0x20

	)

101 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

102 
	#_IO_LINKED
 0x80

	)

103 
	#_IO_IN_BACKUP
 0x100

	)

104 
	#_IO_LINE_BUF
 0x200

	)

105 
	#_IO_TIED_PUT_GET
 0x400

	)

106 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

107 
	#_IO_IS_APPENDING
 0x1000

	)

108 
	#_IO_IS_FILEBUF
 0x2000

	)

109 
	#_IO_BAD_SEEN
 0x4000

	)

110 
	#_IO_USER_LOCK
 0x8000

	)

112 
	#_IO_FLAGS2_MMAP
 1

	)

113 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

114 #ifde‡
_LIBC


115 
	#_IO_FLAGS2_FORTIFY
 4

	)

117 
	#_IO_FLAGS2_USER_WBUF
 8

	)

118 #ifde‡
_LIBC


119 
	#_IO_FLAGS2_SCANF_STD
 16

	)

120 
	#_IO_FLAGS2_NOCLOSE
 32

	)

121 
	#_IO_FLAGS2_CLOEXEC
 64

	)

125 
	#_IO_SKIPWS
 01

	)

126 
	#_IO_LEFT
 02

	)

127 
	#_IO_RIGHT
 04

	)

128 
	#_IO_INTERNAL
 010

	)

129 
	#_IO_DEC
 020

	)

130 
	#_IO_OCT
 040

	)

131 
	#_IO_HEX
 0100

	)

132 
	#_IO_SHOWBASE
 0200

	)

133 
	#_IO_SHOWPOINT
 0400

	)

134 
	#_IO_UPPERCASE
 01000

	)

135 
	#_IO_SHOWPOS
 02000

	)

136 
	#_IO_SCIENTIFIC
 04000

	)

137 
	#_IO_FIXED
 010000

	)

138 
	#_IO_UNITBUF
 020000

	)

139 
	#_IO_STDIO
 040000

	)

140 
	#_IO_DONT_CLOSE
 0100000

	)

141 
	#_IO_BOOLALPHA
 0200000

	)

144 
_IO_jump_t
; 
	g_IO_FILE
;

147 #ifde‡
_IO_MTSAFE_IO


148 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

149 
	~<bôs/°dio-lock.h
>

154 
	t_IO_lock_t
;

160 
	s_IO_m¨kî
 {

161 
_IO_m¨kî
 *
	m_√xt
;

162 
_IO_FILE
 *
	m_sbuf
;

166 
	m_pos
;

168 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

169 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

170 
	mpublic
:

171 
°ªamm¨kî
(
°ªambuf
 *
sb
);

172 ~
°ªamm¨kî
();

173 
ßvög
(Ë{  
	m_•os
 == -2; }

174 
dñè
(
°ªamm¨kî
&);

175 
dñè
();

180 
	e__codecvt_ªsu…


182 
	m__codecvt_ok
,

183 
	m__codecvt_∑πül
,

184 
	m__codecvt_îr‹
,

185 
	m__codecvt_noc⁄v


188 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


191 
	s_IO_codecvt


193 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

194 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

195 
	m__mb°©e_t
 *,

196 c⁄° 
	mwch¨_t
 *,

197 c⁄° 
	mwch¨_t
 *,

198 c⁄° 
	mwch¨_t
 **, *,

200 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

201 
	m__mb°©e_t
 *, *,

203 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

204 
	m__mb°©e_t
 *,

206 c⁄° **, 
	mwch¨_t
 *,

207 
	mwch¨_t
 *, wchar_t **);

208 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

209 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

210 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

211 c⁄° *, c⁄° *, 
	m_IO_size_t
);

212 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

214 
_IO_ic⁄v_t
 
	m__cd_ö
;

215 
_IO_ic⁄v_t
 
	m__cd_out
;

219 
	s_IO_wide_d©a


221 
wch¨_t
 *
	m_IO_ªad_±r
;

222 
wch¨_t
 *
	m_IO_ªad_íd
;

223 
wch¨_t
 *
	m_IO_ªad_ba£
;

224 
wch¨_t
 *
	m_IO_wrôe_ba£
;

225 
wch¨_t
 *
	m_IO_wrôe_±r
;

226 
wch¨_t
 *
	m_IO_wrôe_íd
;

227 
wch¨_t
 *
	m_IO_buf_ba£
;

228 
wch¨_t
 *
	m_IO_buf_íd
;

230 
wch¨_t
 *
	m_IO_ßve_ba£
;

231 
wch¨_t
 *
	m_IO_backup_ba£
;

233 
wch¨_t
 *
	m_IO_ßve_íd
;

235 
__mb°©e_t
 
	m_IO_°©e
;

236 
__mb°©e_t
 
	m_IO_œ°_°©e
;

237 
_IO_codecvt
 
	m_codecvt
;

239 
wch¨_t
 
	m_sh‹tbuf
[1];

241 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

245 
	s_IO_FILE
 {

246 
	m_Êags
;

247 
	#_IO_fûe_Êags
 
_Êags


	)

251 * 
	m_IO_ªad_±r
;

252 * 
	m_IO_ªad_íd
;

253 * 
	m_IO_ªad_ba£
;

254 * 
	m_IO_wrôe_ba£
;

255 * 
	m_IO_wrôe_±r
;

256 * 
	m_IO_wrôe_íd
;

257 * 
	m_IO_buf_ba£
;

258 * 
	m_IO_buf_íd
;

260 *
	m_IO_ßve_ba£
;

261 *
	m_IO_backup_ba£
;

262 *
	m_IO_ßve_íd
;

264 
_IO_m¨kî
 *
	m_m¨kîs
;

266 
_IO_FILE
 *
	m_chaö
;

268 
	m_fûío
;

270 
	m_blksize
;

272 
	m_Êags2
;

274 
_IO_off_t
 
	m_ﬁd_off£t
;

276 
	#__HAVE_COLUMN


	)

278 
	m_cur_cﬁumn
;

279 sig√d 
	m_vèbÀ_off£t
;

280 
	m_sh‹tbuf
[1];

284 
_IO_lock_t
 *
	m_lock
;

285 #ifde‡
_IO_USE_OLD_IO_FILE


288 
	s_IO_FILE_com∂ëe


290 
_IO_FILE
 
	m_fûe
;

292 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

293 
_IO_off64_t
 
	m_off£t
;

294 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


296 
_IO_codecvt
 *
	m_codecvt
;

297 
_IO_wide_d©a
 *
	m_wide_d©a
;

298 
_IO_FILE
 *
	m_‰ìªs_li°
;

299 *
	m_‰ìªs_buf
;

300 
size_t
 
	m_‰ìªs_size
;

302 *
	m__∑d1
;

303 *
	m__∑d2
;

304 *
	m__∑d3
;

305 *
	m__∑d4
;

306 
size_t
 
	m__∑d5
;

308 
	m_mode
;

310 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

314 #i‚de‡
__˝lu•lus


315 
_IO_FILE
 
	t_IO_FILE
;

318 
	g_IO_FILE_∂us
;

320 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

321 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

322 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

323 #i‚de‡
_LIBC


324 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

325 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

326 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

328 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

329 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

330 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

338 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

346 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, c⁄° *
	t__buf
,

347 
	tsize_t
 
	t__n
);

355 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

358 
	t__io_˛o£_‚
 (*
	t__cookõ
);

361 #ifde‡
_GNU_SOURCE


363 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

364 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

365 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

366 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

371 
__io_ªad_‚
 *
	mªad
;

372 
__io_wrôe_‚
 *
	mwrôe
;

373 
__io_£ek_‚
 *
	m£ek
;

374 
__io_˛o£_‚
 *
	m˛o£
;

375 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

376 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

378 
	g_IO_cookõ_fûe
;

381 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

382 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

386 #ifde‡
__˝lu•lus


390 
__undîÊow
 (
_IO_FILE
 *);

391 
__uÊow
 (
_IO_FILE
 *);

392 
__ovîÊow
 (
_IO_FILE
 *, );

393 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


394 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

395 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

396 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

399 #i‡ 
__GNUC__
 >= 3

400 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

402 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

405 
	#_IO_gëc_u∆ocked
(
_Â
) \

406 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

407 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

408 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

409 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

410 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

411 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

412 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

413 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

414 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

415 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

417 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


418 
	#_IO_gëwc_u∆ocked
(
_Â
) \

419 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

420 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

421 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

422 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

423 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

424 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

425 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

426 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

427 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

428 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

431 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

432 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

434 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

435 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

436 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

437 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

439 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

442 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

443 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

445 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

446 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

447 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

449 #ifde‡
_IO_MTSAFE_IO


450 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

451 
	#_IO_Êockfûe
(
_Â
) \

452 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

453 
	#_IO_fu∆ockfûe
(
_Â
) \

454 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

456 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

457 
	#_IO_Êockfûe
(
_Â
Ë

	)

458 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

459 
	#_IO_·rylockfûe
(
_Â
Ë

	)

460 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

461 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

464 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

465 
_IO_va_li°
, *
__ª°ri˘
);

466 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

467 
_IO_va_li°
);

468 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

469 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

471 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

472 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

474 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

476 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


477 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

478 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

479 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

480 #i‡
__GNUC__
 >= 2

483 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


484 
	~<shlib-com∑t.h
>

485 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

486 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

487 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

488 c⁄° 
_IO_°dö_u£d
;

489 
wók_exã∫
 (
_IO_°dö_u£d
);

492 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


493 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

497 
	#_IO_fwide
(
__Â
, 
__mode
) \

498 ({ 
__ªsu…
 = (
__mode
); \

499 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

501 i‡((
__Â
)->
_mode
 == 0) \

503 (
__Â
)->
_mode
 = -1; \

504 
__ªsu…
 = (
__Â
)->
_mode
; \

506 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

507 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

509 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

510 
__ªsu…
; })

	)

513 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

514 
_IO_va_li°
, *
__ª°ri˘
);

515 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

516 
_IO_va_li°
);

517 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

518 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

521 #ifde‡
__LDBL_COMPAT


522 
	~<bôs/libio-ldbl.h
>

525 #ifde‡
__˝lu•lus


	@/usr/include/linux/byteorder/little_endian.h

1 #i‚de‡
_LINUX_BYTEORDER_LITTLE_ENDIAN_H


2 
	#_LINUX_BYTEORDER_LITTLE_ENDIAN_H


	)

4 #i‚de‡
__LITTLE_ENDIAN


5 
	#__LITTLE_ENDIAN
 1234

	)

7 #i‚de‡
__LITTLE_ENDIAN_BITFIELD


8 
	#__LITTLE_ENDIAN_BITFIELD


	)

11 
	~<löux/ty≥s.h
>

12 
	~<löux/swab.h
>

14 
	#__c⁄°™t_ht⁄l
(
x
Ë((
__be32
)
	`___c⁄°™t_swab32
((x)))

	)

15 
	#__c⁄°™t_¡ohl
(
x
Ë
	`___c⁄°™t_swab32
((
__be32
)(x))

	)

16 
	#__c⁄°™t_ht⁄s
(
x
Ë((
__be16
)
	`___c⁄°™t_swab16
((x)))

	)

17 
	#__c⁄°™t_¡ohs
(
x
Ë
	`___c⁄°™t_swab16
((
__be16
)(x))

	)

18 
	#__c⁄°™t_˝u_to_À64
(
x
Ë((
__À64
)(
__u64
)(x))

	)

19 
	#__c⁄°™t_À64_to_˝u
(
x
Ë((
__u64
)(
__À64
)(x))

	)

20 
	#__c⁄°™t_˝u_to_À32
(
x
Ë((
__À32
)(
__u32
)(x))

	)

21 
	#__c⁄°™t_À32_to_˝u
(
x
Ë((
__u32
)(
__À32
)(x))

	)

22 
	#__c⁄°™t_˝u_to_À16
(
x
Ë((
__À16
)(
__u16
)(x))

	)

23 
	#__c⁄°™t_À16_to_˝u
(
x
Ë((
__u16
)(
__À16
)(x))

	)

24 
	#__c⁄°™t_˝u_to_be64
(
x
Ë((
__be64
)
	`___c⁄°™t_swab64
((x)))

	)

25 
	#__c⁄°™t_be64_to_˝u
(
x
Ë
	`___c⁄°™t_swab64
((
__u64
)(
__be64
)(x))

	)

26 
	#__c⁄°™t_˝u_to_be32
(
x
Ë((
__be32
)
	`___c⁄°™t_swab32
((x)))

	)

27 
	#__c⁄°™t_be32_to_˝u
(
x
Ë
	`___c⁄°™t_swab32
((
__u32
)(
__be32
)(x))

	)

28 
	#__c⁄°™t_˝u_to_be16
(
x
Ë((
__be16
)
	`___c⁄°™t_swab16
((x)))

	)

29 
	#__c⁄°™t_be16_to_˝u
(
x
Ë
	`___c⁄°™t_swab16
((
__u16
)(
__be16
)(x))

	)

30 
	#__˝u_to_À64
(
x
Ë((
__À64
)(
__u64
)(x))

	)

31 
	#__À64_to_˝u
(
x
Ë((
__u64
)(
__À64
)(x))

	)

32 
	#__˝u_to_À32
(
x
Ë((
__À32
)(
__u32
)(x))

	)

33 
	#__À32_to_˝u
(
x
Ë((
__u32
)(
__À32
)(x))

	)

34 
	#__˝u_to_À16
(
x
Ë((
__À16
)(
__u16
)(x))

	)

35 
	#__À16_to_˝u
(
x
Ë((
__u16
)(
__À16
)(x))

	)

36 
	#__˝u_to_be64
(
x
Ë((
__be64
)
	`__swab64
((x)))

	)

37 
	#__be64_to_˝u
(
x
Ë
	`__swab64
((
__u64
)(
__be64
)(x))

	)

38 
	#__˝u_to_be32
(
x
Ë((
__be32
)
	`__swab32
((x)))

	)

39 
	#__be32_to_˝u
(
x
Ë
	`__swab32
((
__u32
)(
__be32
)(x))

	)

40 
	#__˝u_to_be16
(
x
Ë((
__be16
)
	`__swab16
((x)))

	)

41 
	#__be16_to_˝u
(
x
Ë
	`__swab16
((
__u16
)(
__be16
)(x))

	)

43 
__ölöe__
 
__À64
 
	$__˝u_to_À64p
(c⁄° 
__u64
 *
p
)

45  (
__À64
)*
p
;

46 
	}
}

47 
__ölöe__
 
__u64
 
	$__À64_to_˝up
(c⁄° 
__À64
 *
p
)

49  (
__u64
)*
p
;

50 
	}
}

51 
__ölöe__
 
__À32
 
	$__˝u_to_À32p
(c⁄° 
__u32
 *
p
)

53  (
__À32
)*
p
;

54 
	}
}

55 
__ölöe__
 
__u32
 
	$__À32_to_˝up
(c⁄° 
__À32
 *
p
)

57  (
__u32
)*
p
;

58 
	}
}

59 
__ölöe__
 
__À16
 
	$__˝u_to_À16p
(c⁄° 
__u16
 *
p
)

61  (
__À16
)*
p
;

62 
	}
}

63 
__ölöe__
 
__u16
 
	$__À16_to_˝up
(c⁄° 
__À16
 *
p
)

65  (
__u16
)*
p
;

66 
	}
}

67 
__ölöe__
 
__be64
 
	$__˝u_to_be64p
(c⁄° 
__u64
 *
p
)

69  (
__be64
)
	`__swab64p
(
p
);

70 
	}
}

71 
__ölöe__
 
__u64
 
	$__be64_to_˝up
(c⁄° 
__be64
 *
p
)

73  
	`__swab64p
((
__u64
 *)
p
);

74 
	}
}

75 
__ölöe__
 
__be32
 
	$__˝u_to_be32p
(c⁄° 
__u32
 *
p
)

77  (
__be32
)
	`__swab32p
(
p
);

78 
	}
}

79 
__ölöe__
 
__u32
 
	$__be32_to_˝up
(c⁄° 
__be32
 *
p
)

81  
	`__swab32p
((
__u32
 *)
p
);

82 
	}
}

83 
__ölöe__
 
__be16
 
	$__˝u_to_be16p
(c⁄° 
__u16
 *
p
)

85  (
__be16
)
	`__swab16p
(
p
);

86 
	}
}

87 
__ölöe__
 
__u16
 
	$__be16_to_˝up
(c⁄° 
__be16
 *
p
)

89  
	`__swab16p
((
__u16
 *)
p
);

90 
	}
}

91 
	#__˝u_to_À64s
(
x
Ëdÿ{ ()(x); } 0)

	)

92 
	#__À64_to_˝us
(
x
Ëdÿ{ ()(x); } 0)

	)

93 
	#__˝u_to_À32s
(
x
Ëdÿ{ ()(x); } 0)

	)

94 
	#__À32_to_˝us
(
x
Ëdÿ{ ()(x); } 0)

	)

95 
	#__˝u_to_À16s
(
x
Ëdÿ{ ()(x); } 0)

	)

96 
	#__À16_to_˝us
(
x
Ëdÿ{ ()(x); } 0)

	)

97 
	#__˝u_to_be64s
(
x
Ë
	`__swab64s
((x))

	)

98 
	#__be64_to_˝us
(
x
Ë
	`__swab64s
((x))

	)

99 
	#__˝u_to_be32s
(
x
Ë
	`__swab32s
((x))

	)

100 
	#__be32_to_˝us
(
x
Ë
	`__swab32s
((x))

	)

101 
	#__˝u_to_be16s
(
x
Ë
	`__swab16s
((x))

	)

102 
	#__be16_to_˝us
(
x
Ë
	`__swab16s
((x))

	)

	@/usr/include/linux/errno.h

1 
	~<asm/î∫o.h
>

	@/usr/include/linux/ioctl.h

1 #i‚de‡
_LINUX_IOCTL_H


2 
	#_LINUX_IOCTL_H


	)

4 
	~<asm/io˘l.h
>

	@/usr/include/linux/ipc.h

1 #i‚de‡
_LINUX_IPC_H


2 
	#_LINUX_IPC_H


	)

4 
	~<löux/ty≥s.h
>

6 
	#IPC_PRIVATE
 ((
__kî√l_key_t
Ë0)

	)

9 
	sùc_≥rm


11 
__kî√l_key_t
 
	mkey
;

12 
__kî√l_uid_t
 
	muid
;

13 
__kî√l_gid_t
 
	mgid
;

14 
__kî√l_uid_t
 
	mcuid
;

15 
__kî√l_gid_t
 
	mcgid
;

16 
__kî√l_mode_t
 
	mmode
;

17 
	m£q
;

21 
	~<asm/ùcbuf.h
>

24 
	#IPC_CREAT
 00001000

	)

25 
	#IPC_EXCL
 00002000

	)

26 
	#IPC_NOWAIT
 00004000

	)

31 
	#IPC_DIPC
 00010000

	)

32 
	#IPC_OWN
 00020000

	)

38 
	#IPC_RMID
 0

	)

39 
	#IPC_SET
 1

	)

40 
	#IPC_STAT
 2

	)

41 
	#IPC_INFO
 3

	)

47 
	#IPC_OLD
 0

	)

49 
	#IPC_64
 0x0100

	)

57 
	sùc_kludge
 {

58 
msgbuf
 *
	mmsgp
;

59 
	mmsgtyp
;

62 
	#SEMOP
 1

	)

63 
	#SEMGET
 2

	)

64 
	#SEMCTL
 3

	)

65 
	#SEMTIMEDOP
 4

	)

66 
	#MSGSND
 11

	)

67 
	#MSGRCV
 12

	)

68 
	#MSGGET
 13

	)

69 
	#MSGCTL
 14

	)

70 
	#SHMAT
 21

	)

71 
	#SHMDT
 22

	)

72 
	#SHMGET
 23

	)

73 
	#SHMCTL
 24

	)

76 
	#DIPC
 25

	)

78 
	#IPCCALL
(
vîsi⁄
,
›
Ë((vîsi⁄)<<16 | (›))

	)

	@/usr/include/linux/limits.h

1 #i‚de‡
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 65536

	)

7 
	#ARG_MAX
 131072

	)

8 
	#LINK_MAX
 127

	)

9 
	#MAX_CANON
 255

	)

10 
	#MAX_INPUT
 255

	)

11 
	#NAME_MAX
 255

	)

12 
	#PATH_MAX
 4096

	)

13 
	#PIPE_BUF
 4096

	)

14 
	#XATTR_NAME_MAX
 255

	)

15 
	#XATTR_SIZE_MAX
 65536

	)

16 
	#XATTR_LIST_MAX
 65536

	)

18 
	#RTSIG_MAX
 32

	)

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__FD_SETSIZE


22 
	#__FD_SETSIZE
 1024

	)

25 
	mfds_bôs
[
__FD_SETSIZE
 / (8 * ())];

26 } 
	t__kî√l_fd_£t
;

29 (*
	t__kî√l_sigh™dÀr_t
)();

32 
	t__kî√l_key_t
;

33 
	t__kî√l_mqd_t
;

35 
	~<asm/posix_ty≥s.h
>

	@/usr/include/linux/sysctl.h

22 #i‚de‡
_LINUX_SYSCTL_H


23 
	#_LINUX_SYSCTL_H


	)

25 
	~<löux/kî√l.h
>

26 
	~<löux/ty≥s.h
>

29 
	gcom∂ëi⁄
;

31 
	#CTL_MAXNAME
 10

	)

36 
	s__sys˘l_¨gs
 {

37 *
	m«me
;

38 
	m∆í
;

39 *
	mﬁdvÆ
;

40 
size_t
 *
	mﬁdÀ≈
;

41 *
	m√wvÆ
;

42 
size_t
 
	m√wÀn
;

43 
	m__unu£d
[4];

52 
	mCTL_KERN
=1,

53 
	mCTL_VM
=2,

54 
	mCTL_NET
=3,

55 
	mCTL_PROC
=4,

56 
	mCTL_FS
=5,

57 
	mCTL_DEBUG
=6,

58 
	mCTL_DEV
=7,

59 
	mCTL_BUS
=8,

60 
	mCTL_ABI
=9,

61 
	mCTL_CPU
=10,

62 
	mCTL_ARLAN
=254,

63 
	mCTL_S390DBF
=5677,

64 
	mCTL_SUNRPC
=7249,

65 
	mCTL_PM
=9899,

66 
	mCTL_FRV
=9898,

72 
	mCTL_BUS_ISA
=1

78 
	mINOTIFY_MAX_USER_INSTANCES
=1,

79 
	mINOTIFY_MAX_USER_WATCHES
=2,

80 
	mINOTIFY_MAX_QUEUED_EVENTS
=3

86 
	mKERN_OSTYPE
=1,

87 
	mKERN_OSRELEASE
=2,

88 
	mKERN_OSREV
=3,

89 
	mKERN_VERSION
=4,

90 
	mKERN_SECUREMASK
=5,

91 
	mKERN_PROF
=6,

92 
	mKERN_NODENAME
=7,

93 
	mKERN_DOMAINNAME
=8,

95 
	mKERN_PANIC
=15,

96 
	mKERN_REALROOTDEV
=16,

98 
	mKERN_SPARC_REBOOT
=21,

99 
	mKERN_CTLALTDEL
=22,

100 
	mKERN_PRINTK
=23,

101 
	mKERN_NAMETRANS
=24,

102 
	mKERN_PPC_HTABRECLAIM
=25,

103 
	mKERN_PPC_ZEROPAGED
=26,

104 
	mKERN_PPC_POWERSAVE_NAP
=27,

105 
	mKERN_MODPROBE
=28,

106 
	mKERN_SG_BIG_BUFF
=29,

107 
	mKERN_ACCT
=30,

108 
	mKERN_PPC_L2CR
=31,

110 
	mKERN_RTSIGNR
=32,

111 
	mKERN_RTSIGMAX
=33,

113 
	mKERN_SHMMAX
=34,

114 
	mKERN_MSGMAX
=35,

115 
	mKERN_MSGMNB
=36,

116 
	mKERN_MSGPOOL
=37,

117 
	mKERN_SYSRQ
=38,

118 
	mKERN_MAX_THREADS
=39,

119 
	mKERN_RANDOM
=40,

120 
	mKERN_SHMALL
=41,

121 
	mKERN_MSGMNI
=42,

122 
	mKERN_SEM
=43,

123 
	mKERN_SPARC_STOP_A
=44,

124 
	mKERN_SHMMNI
=45,

125 
	mKERN_OVERFLOWUID
=46,

126 
	mKERN_OVERFLOWGID
=47,

127 
	mKERN_SHMPATH
=48,

128 
	mKERN_HOTPLUG
=49,

129 
	mKERN_IEEE_EMULATION_WARNINGS
=50,

130 
	mKERN_S390_USER_DEBUG_LOGGING
=51,

131 
	mKERN_CORE_USES_PID
=52,

132 
	mKERN_TAINTED
=53,

133 
	mKERN_CADPID
=54,

134 
	mKERN_PIDMAX
=55,

135 
	mKERN_CORE_PATTERN
=56,

136 
	mKERN_PANIC_ON_OOPS
=57,

137 
	mKERN_HPPA_PWRSW
=58,

138 
	mKERN_HPPA_UNALIGNED
=59,

139 
	mKERN_PRINTK_RATELIMIT
=60,

140 
	mKERN_PRINTK_RATELIMIT_BURST
=61,

141 
	mKERN_PTY
=62,

142 
	mKERN_NGROUPS_MAX
=63,

143 
	mKERN_SPARC_SCONS_PWROFF
=64,

144 
	mKERN_HZ_TIMER
=65,

145 
	mKERN_UNKNOWN_NMI_PANIC
=66,

146 
	mKERN_BOOTLOADER_TYPE
=67,

147 
	mKERN_RANDOMIZE
=68,

148 
	mKERN_SETUID_DUMPABLE
=69,

149 
	mKERN_SPIN_RETRY
=70,

150 
	mKERN_ACPI_VIDEO_FLAGS
=71,

151 
	mKERN_IA64_UNALIGNED
=72,

152 
	mKERN_COMPAT_LOG
=73,

153 
	mKERN_MAX_LOCK_DEPTH
=74,

154 
	mKERN_NMI_WATCHDOG
=75,

155 
	mKERN_PANIC_ON_NMI
=76,

163 
	mVM_UNUSED1
=1,

164 
	mVM_UNUSED2
=2,

165 
	mVM_UNUSED3
=3,

166 
	mVM_UNUSED4
=4,

167 
	mVM_OVERCOMMIT_MEMORY
=5,

168 
	mVM_UNUSED5
=6,

169 
	mVM_UNUSED7
=7,

170 
	mVM_UNUSED8
=8,

171 
	mVM_UNUSED9
=9,

172 
	mVM_PAGE_CLUSTER
=10,

173 
	mVM_DIRTY_BACKGROUND
=11,

174 
	mVM_DIRTY_RATIO
=12,

175 
	mVM_DIRTY_WB_CS
=13,

176 
	mVM_DIRTY_EXPIRE_CS
=14,

177 
	mVM_NR_PDFLUSH_THREADS
=15,

178 
	mVM_OVERCOMMIT_RATIO
=16,

179 
	mVM_PAGEBUF
=17,

180 
	mVM_HUGETLB_PAGES
=18,

181 
	mVM_SWAPPINESS
=19,

182 
	mVM_LOWMEM_RESERVE_RATIO
=20,

183 
	mVM_MIN_FREE_KBYTES
=21,

184 
	mVM_MAX_MAP_COUNT
=22,

185 
	mVM_LAPTOP_MODE
=23,

186 
	mVM_BLOCK_DUMP
=24,

187 
	mVM_HUGETLB_GROUP
=25,

188 
	mVM_VFS_CACHE_PRESSURE
=26,

189 
	mVM_LEGACY_VA_LAYOUT
=27,

190 
	mVM_SWAP_TOKEN_TIMEOUT
=28,

191 
	mVM_DROP_PAGECACHE
=29,

192 
	mVM_PERCPU_PAGELIST_FRACTION
=30,

193 
	mVM_ZONE_RECLAIM_MODE
=31,

194 
	mVM_MIN_UNMAPPED
=32,

195 
	mVM_PANIC_ON_OOM
=33,

196 
	mVM_VDSO_ENABLED
=34,

197 
	mVM_MIN_SLAB
=35,

204 
	mNET_CORE
=1,

205 
	mNET_ETHER
=2,

206 
	mNET_802
=3,

207 
	mNET_UNIX
=4,

208 
	mNET_IPV4
=5,

209 
	mNET_IPX
=6,

210 
	mNET_ATALK
=7,

211 
	mNET_NETROM
=8,

212 
	mNET_AX25
=9,

213 
	mNET_BRIDGE
=10,

214 
	mNET_ROSE
=11,

215 
	mNET_IPV6
=12,

216 
	mNET_X25
=13,

217 
	mNET_TR
=14,

218 
	mNET_DECNET
=15,

219 
	mNET_ECONET
=16,

220 
	mNET_SCTP
=17,

221 
	mNET_LLC
=18,

222 
	mNET_NETFILTER
=19,

223 
	mNET_DCCP
=20,

224 
	mNET_IRDA
=412,

230 
	mRANDOM_POOLSIZE
=1,

231 
	mRANDOM_ENTROPY_COUNT
=2,

232 
	mRANDOM_READ_THRESH
=3,

233 
	mRANDOM_WRITE_THRESH
=4,

234 
	mRANDOM_BOOT_ID
=5,

235 
	mRANDOM_UUID
=6

241 
	mPTY_MAX
=1,

242 
	mPTY_NR
=2

248 
	mBUS_ISA_MEM_BASE
=1,

249 
	mBUS_ISA_PORT_BASE
=2,

250 
	mBUS_ISA_PORT_SHIFT
=3

256 
	mNET_CORE_WMEM_MAX
=1,

257 
	mNET_CORE_RMEM_MAX
=2,

258 
	mNET_CORE_WMEM_DEFAULT
=3,

259 
	mNET_CORE_RMEM_DEFAULT
=4,

261 
	mNET_CORE_MAX_BACKLOG
=6,

262 
	mNET_CORE_FASTROUTE
=7,

263 
	mNET_CORE_MSG_COST
=8,

264 
	mNET_CORE_MSG_BURST
=9,

265 
	mNET_CORE_OPTMEM_MAX
=10,

266 
	mNET_CORE_HOT_LIST_LENGTH
=11,

267 
	mNET_CORE_DIVERT_VERSION
=12,

268 
	mNET_CORE_NO_CONG_THRESH
=13,

269 
	mNET_CORE_NO_CONG
=14,

270 
	mNET_CORE_LO_CONG
=15,

271 
	mNET_CORE_MOD_CONG
=16,

272 
	mNET_CORE_DEV_WEIGHT
=17,

273 
	mNET_CORE_SOMAXCONN
=18,

274 
	mNET_CORE_BUDGET
=19,

275 
	mNET_CORE_AEVENT_ETIME
=20,

276 
	mNET_CORE_AEVENT_RSEQTH
=21,

277 
	mNET_CORE_WARNINGS
=22,

288 
	mNET_UNIX_DESTROY_DELAY
=1,

289 
	mNET_UNIX_DELETE_DELAY
=2,

290 
	mNET_UNIX_MAX_DGRAM_QLEN
=3,

296 
	mNET_NF_CONNTRACK_MAX
=1,

297 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT
=2,

298 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV
=3,

299 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED
=4,

300 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT
=5,

301 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT
=6,

302 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK
=7,

303 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT
=8,

304 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_CLOSE
=9,

305 
	mNET_NF_CONNTRACK_UDP_TIMEOUT
=10,

306 
	mNET_NF_CONNTRACK_UDP_TIMEOUT_STREAM
=11,

307 
	mNET_NF_CONNTRACK_ICMP_TIMEOUT
=12,

308 
	mNET_NF_CONNTRACK_GENERIC_TIMEOUT
=13,

309 
	mNET_NF_CONNTRACK_BUCKETS
=14,

310 
	mNET_NF_CONNTRACK_LOG_INVALID
=15,

311 
	mNET_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS
=16,

312 
	mNET_NF_CONNTRACK_TCP_LOOSE
=17,

313 
	mNET_NF_CONNTRACK_TCP_BE_LIBERAL
=18,

314 
	mNET_NF_CONNTRACK_TCP_MAX_RETRANS
=19,

315 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED
=20,

316 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT
=21,

317 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED
=22,

318 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED
=23,

319 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT
=24,

320 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD
=25,

321 
	mNET_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT
=26,

322 
	mNET_NF_CONNTRACK_COUNT
=27,

323 
	mNET_NF_CONNTRACK_ICMPV6_TIMEOUT
=28,

324 
	mNET_NF_CONNTRACK_FRAG6_TIMEOUT
=29,

325 
	mNET_NF_CONNTRACK_FRAG6_LOW_THRESH
=30,

326 
	mNET_NF_CONNTRACK_FRAG6_HIGH_THRESH
=31,

327 
	mNET_NF_CONNTRACK_CHECKSUM
=32,

334 
	mNET_IPV4_FORWARD
=8,

335 
	mNET_IPV4_DYNADDR
=9,

337 
	mNET_IPV4_CONF
=16,

338 
	mNET_IPV4_NEIGH
=17,

339 
	mNET_IPV4_ROUTE
=18,

340 
	mNET_IPV4_FIB_HASH
=19,

341 
	mNET_IPV4_NETFILTER
=20,

343 
	mNET_IPV4_TCP_TIMESTAMPS
=33,

344 
	mNET_IPV4_TCP_WINDOW_SCALING
=34,

345 
	mNET_IPV4_TCP_SACK
=35,

346 
	mNET_IPV4_TCP_RETRANS_COLLAPSE
=36,

347 
	mNET_IPV4_DEFAULT_TTL
=37,

348 
	mNET_IPV4_AUTOCONFIG
=38,

349 
	mNET_IPV4_NO_PMTU_DISC
=39,

350 
	mNET_IPV4_TCP_SYN_RETRIES
=40,

351 
	mNET_IPV4_IPFRAG_HIGH_THRESH
=41,

352 
	mNET_IPV4_IPFRAG_LOW_THRESH
=42,

353 
	mNET_IPV4_IPFRAG_TIME
=43,

354 
	mNET_IPV4_TCP_MAX_KA_PROBES
=44,

355 
	mNET_IPV4_TCP_KEEPALIVE_TIME
=45,

356 
	mNET_IPV4_TCP_KEEPALIVE_PROBES
=46,

357 
	mNET_IPV4_TCP_RETRIES1
=47,

358 
	mNET_IPV4_TCP_RETRIES2
=48,

359 
	mNET_IPV4_TCP_FIN_TIMEOUT
=49,

360 
	mNET_IPV4_IP_MASQ_DEBUG
=50,

361 
	mNET_TCP_SYNCOOKIES
=51,

362 
	mNET_TCP_STDURG
=52,

363 
	mNET_TCP_RFC1337
=53,

364 
	mNET_TCP_SYN_TAILDROP
=54,

365 
	mNET_TCP_MAX_SYN_BACKLOG
=55,

366 
	mNET_IPV4_LOCAL_PORT_RANGE
=56,

367 
	mNET_IPV4_ICMP_ECHO_IGNORE_ALL
=57,

368 
	mNET_IPV4_ICMP_ECHO_IGNORE_BROADCASTS
=58,

369 
	mNET_IPV4_ICMP_SOURCEQUENCH_RATE
=59,

370 
	mNET_IPV4_ICMP_DESTUNREACH_RATE
=60,

371 
	mNET_IPV4_ICMP_TIMEEXCEED_RATE
=61,

372 
	mNET_IPV4_ICMP_PARAMPROB_RATE
=62,

373 
	mNET_IPV4_ICMP_ECHOREPLY_RATE
=63,

374 
	mNET_IPV4_ICMP_IGNORE_BOGUS_ERROR_RESPONSES
=64,

375 
	mNET_IPV4_IGMP_MAX_MEMBERSHIPS
=65,

376 
	mNET_TCP_TW_RECYCLE
=66,

377 
	mNET_IPV4_ALWAYS_DEFRAG
=67,

378 
	mNET_IPV4_TCP_KEEPALIVE_INTVL
=68,

379 
	mNET_IPV4_INET_PEER_THRESHOLD
=69,

380 
	mNET_IPV4_INET_PEER_MINTTL
=70,

381 
	mNET_IPV4_INET_PEER_MAXTTL
=71,

382 
	mNET_IPV4_INET_PEER_GC_MINTIME
=72,

383 
	mNET_IPV4_INET_PEER_GC_MAXTIME
=73,

384 
	mNET_TCP_ORPHAN_RETRIES
=74,

385 
	mNET_TCP_ABORT_ON_OVERFLOW
=75,

386 
	mNET_TCP_SYNACK_RETRIES
=76,

387 
	mNET_TCP_MAX_ORPHANS
=77,

388 
	mNET_TCP_MAX_TW_BUCKETS
=78,

389 
	mNET_TCP_FACK
=79,

390 
	mNET_TCP_REORDERING
=80,

391 
	mNET_TCP_ECN
=81,

392 
	mNET_TCP_DSACK
=82,

393 
	mNET_TCP_MEM
=83,

394 
	mNET_TCP_WMEM
=84,

395 
	mNET_TCP_RMEM
=85,

396 
	mNET_TCP_APP_WIN
=86,

397 
	mNET_TCP_ADV_WIN_SCALE
=87,

398 
	mNET_IPV4_NONLOCAL_BIND
=88,

399 
	mNET_IPV4_ICMP_RATELIMIT
=89,

400 
	mNET_IPV4_ICMP_RATEMASK
=90,

401 
	mNET_TCP_TW_REUSE
=91,

402 
	mNET_TCP_FRTO
=92,

403 
	mNET_TCP_LOW_LATENCY
=93,

404 
	mNET_IPV4_IPFRAG_SECRET_INTERVAL
=94,

405 
	mNET_IPV4_IGMP_MAX_MSF
=96,

406 
	mNET_TCP_NO_METRICS_SAVE
=97,

407 
	mNET_TCP_DEFAULT_WIN_SCALE
=105,

408 
	mNET_TCP_MODERATE_RCVBUF
=106,

409 
	mNET_TCP_TSO_WIN_DIVISOR
=107,

410 
	mNET_TCP_BIC_BETA
=108,

411 
	mNET_IPV4_ICMP_ERRORS_USE_INBOUND_IFADDR
=109,

412 
	mNET_TCP_CONG_CONTROL
=110,

413 
	mNET_TCP_ABC
=111,

414 
	mNET_IPV4_IPFRAG_MAX_DIST
=112,

415 
	mNET_TCP_MTU_PROBING
=113,

416 
	mNET_TCP_BASE_MSS
=114,

417 
	mNET_IPV4_TCP_WORKAROUND_SIGNED_WINDOWS
=115,

418 
	mNET_TCP_DMA_COPYBREAK
=116,

419 
	mNET_TCP_SLOW_START_AFTER_IDLE
=117,

420 
	mNET_CIPSOV4_CACHE_ENABLE
=118,

421 
	mNET_CIPSOV4_CACHE_BUCKET_SIZE
=119,

422 
	mNET_CIPSOV4_RBM_OPTFMT
=120,

423 
	mNET_CIPSOV4_RBM_STRICTVALID
=121,

424 
	mNET_TCP_AVAIL_CONG_CONTROL
=122,

425 
	mNET_TCP_ALLOWED_CONG_CONTROL
=123,

426 
	mNET_TCP_MAX_SSTHRESH
=124,

427 
	mNET_TCP_FRTO_RESPONSE
=125,

431 
	mNET_IPV4_ROUTE_FLUSH
=1,

432 
	mNET_IPV4_ROUTE_MIN_DELAY
=2,

433 
	mNET_IPV4_ROUTE_MAX_DELAY
=3,

434 
	mNET_IPV4_ROUTE_GC_THRESH
=4,

435 
	mNET_IPV4_ROUTE_MAX_SIZE
=5,

436 
	mNET_IPV4_ROUTE_GC_MIN_INTERVAL
=6,

437 
	mNET_IPV4_ROUTE_GC_TIMEOUT
=7,

438 
	mNET_IPV4_ROUTE_GC_INTERVAL
=8,

439 
	mNET_IPV4_ROUTE_REDIRECT_LOAD
=9,

440 
	mNET_IPV4_ROUTE_REDIRECT_NUMBER
=10,

441 
	mNET_IPV4_ROUTE_REDIRECT_SILENCE
=11,

442 
	mNET_IPV4_ROUTE_ERROR_COST
=12,

443 
	mNET_IPV4_ROUTE_ERROR_BURST
=13,

444 
	mNET_IPV4_ROUTE_GC_ELASTICITY
=14,

445 
	mNET_IPV4_ROUTE_MTU_EXPIRES
=15,

446 
	mNET_IPV4_ROUTE_MIN_PMTU
=16,

447 
	mNET_IPV4_ROUTE_MIN_ADVMSS
=17,

448 
	mNET_IPV4_ROUTE_SECRET_INTERVAL
=18,

449 
	mNET_IPV4_ROUTE_GC_MIN_INTERVAL_MS
=19,

454 
	mNET_PROTO_CONF_ALL
=-2,

455 
	mNET_PROTO_CONF_DEFAULT
=-3

462 
	mNET_IPV4_CONF_FORWARDING
=1,

463 
	mNET_IPV4_CONF_MC_FORWARDING
=2,

464 
	mNET_IPV4_CONF_PROXY_ARP
=3,

465 
	mNET_IPV4_CONF_ACCEPT_REDIRECTS
=4,

466 
	mNET_IPV4_CONF_SECURE_REDIRECTS
=5,

467 
	mNET_IPV4_CONF_SEND_REDIRECTS
=6,

468 
	mNET_IPV4_CONF_SHARED_MEDIA
=7,

469 
	mNET_IPV4_CONF_RP_FILTER
=8,

470 
	mNET_IPV4_CONF_ACCEPT_SOURCE_ROUTE
=9,

471 
	mNET_IPV4_CONF_BOOTP_RELAY
=10,

472 
	mNET_IPV4_CONF_LOG_MARTIANS
=11,

473 
	mNET_IPV4_CONF_TAG
=12,

474 
	mNET_IPV4_CONF_ARPFILTER
=13,

475 
	mNET_IPV4_CONF_MEDIUM_ID
=14,

476 
	mNET_IPV4_CONF_NOXFRM
=15,

477 
	mNET_IPV4_CONF_NOPOLICY
=16,

478 
	mNET_IPV4_CONF_FORCE_IGMP_VERSION
=17,

479 
	mNET_IPV4_CONF_ARP_ANNOUNCE
=18,

480 
	mNET_IPV4_CONF_ARP_IGNORE
=19,

481 
	mNET_IPV4_CONF_PROMOTE_SECONDARIES
=20,

482 
	mNET_IPV4_CONF_ARP_ACCEPT
=21,

483 
	mNET_IPV4_CONF_ARP_NOTIFY
=22,

489 
	mNET_IPV4_NF_CONNTRACK_MAX
=1,

490 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_SENT
=2,

491 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_SYN_RECV
=3,

492 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_ESTABLISHED
=4,

493 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_FIN_WAIT
=5,

494 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE_WAIT
=6,

495 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_LAST_ACK
=7,

496 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_TIME_WAIT
=8,

497 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_CLOSE
=9,

498 
	mNET_IPV4_NF_CONNTRACK_UDP_TIMEOUT
=10,

499 
	mNET_IPV4_NF_CONNTRACK_UDP_TIMEOUT_STREAM
=11,

500 
	mNET_IPV4_NF_CONNTRACK_ICMP_TIMEOUT
=12,

501 
	mNET_IPV4_NF_CONNTRACK_GENERIC_TIMEOUT
=13,

502 
	mNET_IPV4_NF_CONNTRACK_BUCKETS
=14,

503 
	mNET_IPV4_NF_CONNTRACK_LOG_INVALID
=15,

504 
	mNET_IPV4_NF_CONNTRACK_TCP_TIMEOUT_MAX_RETRANS
=16,

505 
	mNET_IPV4_NF_CONNTRACK_TCP_LOOSE
=17,

506 
	mNET_IPV4_NF_CONNTRACK_TCP_BE_LIBERAL
=18,

507 
	mNET_IPV4_NF_CONNTRACK_TCP_MAX_RETRANS
=19,

508 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_CLOSED
=20,

509 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_WAIT
=21,

510 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_COOKIE_ECHOED
=22,

511 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_ESTABLISHED
=23,

512 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_SENT
=24,

513 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_RECD
=25,

514 
	mNET_IPV4_NF_CONNTRACK_SCTP_TIMEOUT_SHUTDOWN_ACK_SENT
=26,

515 
	mNET_IPV4_NF_CONNTRACK_COUNT
=27,

516 
	mNET_IPV4_NF_CONNTRACK_CHECKSUM
=28,

521 
	mNET_IPV6_CONF
=16,

522 
	mNET_IPV6_NEIGH
=17,

523 
	mNET_IPV6_ROUTE
=18,

524 
	mNET_IPV6_ICMP
=19,

525 
	mNET_IPV6_BINDV6ONLY
=20,

526 
	mNET_IPV6_IP6FRAG_HIGH_THRESH
=21,

527 
	mNET_IPV6_IP6FRAG_LOW_THRESH
=22,

528 
	mNET_IPV6_IP6FRAG_TIME
=23,

529 
	mNET_IPV6_IP6FRAG_SECRET_INTERVAL
=24,

530 
	mNET_IPV6_MLD_MAX_MSF
=25,

534 
	mNET_IPV6_ROUTE_FLUSH
=1,

535 
	mNET_IPV6_ROUTE_GC_THRESH
=2,

536 
	mNET_IPV6_ROUTE_MAX_SIZE
=3,

537 
	mNET_IPV6_ROUTE_GC_MIN_INTERVAL
=4,

538 
	mNET_IPV6_ROUTE_GC_TIMEOUT
=5,

539 
	mNET_IPV6_ROUTE_GC_INTERVAL
=6,

540 
	mNET_IPV6_ROUTE_GC_ELASTICITY
=7,

541 
	mNET_IPV6_ROUTE_MTU_EXPIRES
=8,

542 
	mNET_IPV6_ROUTE_MIN_ADVMSS
=9,

543 
	mNET_IPV6_ROUTE_GC_MIN_INTERVAL_MS
=10

547 
	mNET_IPV6_FORWARDING
=1,

548 
	mNET_IPV6_HOP_LIMIT
=2,

549 
	mNET_IPV6_MTU
=3,

550 
	mNET_IPV6_ACCEPT_RA
=4,

551 
	mNET_IPV6_ACCEPT_REDIRECTS
=5,

552 
	mNET_IPV6_AUTOCONF
=6,

553 
	mNET_IPV6_DAD_TRANSMITS
=7,

554 
	mNET_IPV6_RTR_SOLICITS
=8,

555 
	mNET_IPV6_RTR_SOLICIT_INTERVAL
=9,

556 
	mNET_IPV6_RTR_SOLICIT_DELAY
=10,

557 
	mNET_IPV6_USE_TEMPADDR
=11,

558 
	mNET_IPV6_TEMP_VALID_LFT
=12,

559 
	mNET_IPV6_TEMP_PREFERED_LFT
=13,

560 
	mNET_IPV6_REGEN_MAX_RETRY
=14,

561 
	mNET_IPV6_MAX_DESYNC_FACTOR
=15,

562 
	mNET_IPV6_MAX_ADDRESSES
=16,

563 
	mNET_IPV6_FORCE_MLD_VERSION
=17,

564 
	mNET_IPV6_ACCEPT_RA_DEFRTR
=18,

565 
	mNET_IPV6_ACCEPT_RA_PINFO
=19,

566 
	mNET_IPV6_ACCEPT_RA_RTR_PREF
=20,

567 
	mNET_IPV6_RTR_PROBE_INTERVAL
=21,

568 
	mNET_IPV6_ACCEPT_RA_RT_INFO_MAX_PLEN
=22,

569 
	mNET_IPV6_PROXY_NDP
=23,

570 
	mNET_IPV6_ACCEPT_SOURCE_ROUTE
=25,

571 
	m__NET_IPV6_MAX


576 
	mNET_IPV6_ICMP_RATELIMIT
=1

581 
	mNET_NEIGH_MCAST_SOLICIT
=1,

582 
	mNET_NEIGH_UCAST_SOLICIT
=2,

583 
	mNET_NEIGH_APP_SOLICIT
=3,

584 
	mNET_NEIGH_RETRANS_TIME
=4,

585 
	mNET_NEIGH_REACHABLE_TIME
=5,

586 
	mNET_NEIGH_DELAY_PROBE_TIME
=6,

587 
	mNET_NEIGH_GC_STALE_TIME
=7,

588 
	mNET_NEIGH_UNRES_QLEN
=8,

589 
	mNET_NEIGH_PROXY_QLEN
=9,

590 
	mNET_NEIGH_ANYCAST_DELAY
=10,

591 
	mNET_NEIGH_PROXY_DELAY
=11,

592 
	mNET_NEIGH_LOCKTIME
=12,

593 
	mNET_NEIGH_GC_INTERVAL
=13,

594 
	mNET_NEIGH_GC_THRESH1
=14,

595 
	mNET_NEIGH_GC_THRESH2
=15,

596 
	mNET_NEIGH_GC_THRESH3
=16,

597 
	mNET_NEIGH_RETRANS_TIME_MS
=17,

598 
	mNET_NEIGH_REACHABLE_TIME_MS
=18,

603 
	mNET_DCCP_DEFAULT
=1,

608 
	mNET_IPX_PPROP_BROADCASTING
=1,

609 
	mNET_IPX_FORWARDING
=2

614 
	mNET_LLC2
=1,

615 
	mNET_LLC_STATION
=2,

620 
	mNET_LLC2_TIMEOUT
=1,

625 
	mNET_LLC_STATION_ACK_TIMEOUT
=1,

630 
	mNET_LLC2_ACK_TIMEOUT
=1,

631 
	mNET_LLC2_P_TIMEOUT
=2,

632 
	mNET_LLC2_REJ_TIMEOUT
=3,

633 
	mNET_LLC2_BUSY_TIMEOUT
=4,

638 
	mNET_ATALK_AARP_EXPIRY_TIME
=1,

639 
	mNET_ATALK_AARP_TICK_TIME
=2,

640 
	mNET_ATALK_AARP_RETRANSMIT_LIMIT
=3,

641 
	mNET_ATALK_AARP_RESOLVE_TIME
=4

647 
	mNET_NETROM_DEFAULT_PATH_QUALITY
=1,

648 
	mNET_NETROM_OBSOLESCENCE_COUNT_INITIALISER
=2,

649 
	mNET_NETROM_NETWORK_TTL_INITIALISER
=3,

650 
	mNET_NETROM_TRANSPORT_TIMEOUT
=4,

651 
	mNET_NETROM_TRANSPORT_MAXIMUM_TRIES
=5,

652 
	mNET_NETROM_TRANSPORT_ACKNOWLEDGE_DELAY
=6,

653 
	mNET_NETROM_TRANSPORT_BUSY_DELAY
=7,

654 
	mNET_NETROM_TRANSPORT_REQUESTED_WINDOW_SIZE
=8,

655 
	mNET_NETROM_TRANSPORT_NO_ACTIVITY_TIMEOUT
=9,

656 
	mNET_NETROM_ROUTING_CONTROL
=10,

657 
	mNET_NETROM_LINK_FAILS_COUNT
=11,

658 
	mNET_NETROM_RESET
=12

663 
	mNET_AX25_IP_DEFAULT_MODE
=1,

664 
	mNET_AX25_DEFAULT_MODE
=2,

665 
	mNET_AX25_BACKOFF_TYPE
=3,

666 
	mNET_AX25_CONNECT_MODE
=4,

667 
	mNET_AX25_STANDARD_WINDOW
=5,

668 
	mNET_AX25_EXTENDED_WINDOW
=6,

669 
	mNET_AX25_T1_TIMEOUT
=7,

670 
	mNET_AX25_T2_TIMEOUT
=8,

671 
	mNET_AX25_T3_TIMEOUT
=9,

672 
	mNET_AX25_IDLE_TIMEOUT
=10,

673 
	mNET_AX25_N2
=11,

674 
	mNET_AX25_PACLEN
=12,

675 
	mNET_AX25_PROTOCOL
=13,

676 
	mNET_AX25_DAMA_SLAVE_TIMEOUT
=14

681 
	mNET_ROSE_RESTART_REQUEST_TIMEOUT
=1,

682 
	mNET_ROSE_CALL_REQUEST_TIMEOUT
=2,

683 
	mNET_ROSE_RESET_REQUEST_TIMEOUT
=3,

684 
	mNET_ROSE_CLEAR_REQUEST_TIMEOUT
=4,

685 
	mNET_ROSE_ACK_HOLD_BACK_TIMEOUT
=5,

686 
	mNET_ROSE_ROUTING_CONTROL
=6,

687 
	mNET_ROSE_LINK_FAIL_TIMEOUT
=7,

688 
	mNET_ROSE_MAX_VCS
=8,

689 
	mNET_ROSE_WINDOW_SIZE
=9,

690 
	mNET_ROSE_NO_ACTIVITY_TIMEOUT
=10

695 
	mNET_X25_RESTART_REQUEST_TIMEOUT
=1,

696 
	mNET_X25_CALL_REQUEST_TIMEOUT
=2,

697 
	mNET_X25_RESET_REQUEST_TIMEOUT
=3,

698 
	mNET_X25_CLEAR_REQUEST_TIMEOUT
=4,

699 
	mNET_X25_ACK_HOLD_BACK_TIMEOUT
=5,

700 
	mNET_X25_FORWARD
=6

706 
	mNET_TR_RIF_TIMEOUT
=1

711 
	mNET_DECNET_NODE_TYPE
 = 1,

712 
	mNET_DECNET_NODE_ADDRESS
 = 2,

713 
	mNET_DECNET_NODE_NAME
 = 3,

714 
	mNET_DECNET_DEFAULT_DEVICE
 = 4,

715 
	mNET_DECNET_TIME_WAIT
 = 5,

716 
	mNET_DECNET_DN_COUNT
 = 6,

717 
	mNET_DECNET_DI_COUNT
 = 7,

718 
	mNET_DECNET_DR_COUNT
 = 8,

719 
	mNET_DECNET_DST_GC_INTERVAL
 = 9,

720 
	mNET_DECNET_CONF
 = 10,

721 
	mNET_DECNET_NO_FC_MAX_CWND
 = 11,

722 
	mNET_DECNET_MEM
 = 12,

723 
	mNET_DECNET_RMEM
 = 13,

724 
	mNET_DECNET_WMEM
 = 14,

725 
	mNET_DECNET_DEBUG_LEVEL
 = 255

730 
	mNET_DECNET_CONF_LOOPBACK
 = -2,

731 
	mNET_DECNET_CONF_DDCMP
 = -3,

732 
	mNET_DECNET_CONF_PPP
 = -4,

733 
	mNET_DECNET_CONF_X25
 = -5,

734 
	mNET_DECNET_CONF_GRE
 = -6,

735 
	mNET_DECNET_CONF_ETHER
 = -7

742 
	mNET_DECNET_CONF_DEV_PRIORITY
 = 1,

743 
	mNET_DECNET_CONF_DEV_T1
 = 2,

744 
	mNET_DECNET_CONF_DEV_T2
 = 3,

745 
	mNET_DECNET_CONF_DEV_T3
 = 4,

746 
	mNET_DECNET_CONF_DEV_FORWARDING
 = 5,

747 
	mNET_DECNET_CONF_DEV_BLKSIZE
 = 6,

748 
	mNET_DECNET_CONF_DEV_STATE
 = 7

753 
	mNET_SCTP_RTO_INITIAL
 = 1,

754 
	mNET_SCTP_RTO_MIN
 = 2,

755 
	mNET_SCTP_RTO_MAX
 = 3,

756 
	mNET_SCTP_RTO_ALPHA
 = 4,

757 
	mNET_SCTP_RTO_BETA
 = 5,

758 
	mNET_SCTP_VALID_COOKIE_LIFE
 = 6,

759 
	mNET_SCTP_ASSOCIATION_MAX_RETRANS
 = 7,

760 
	mNET_SCTP_PATH_MAX_RETRANS
 = 8,

761 
	mNET_SCTP_MAX_INIT_RETRANSMITS
 = 9,

762 
	mNET_SCTP_HB_INTERVAL
 = 10,

763 
	mNET_SCTP_PRESERVE_ENABLE
 = 11,

764 
	mNET_SCTP_MAX_BURST
 = 12,

765 
	mNET_SCTP_ADDIP_ENABLE
 = 13,

766 
	mNET_SCTP_PRSCTP_ENABLE
 = 14,

767 
	mNET_SCTP_SNDBUF_POLICY
 = 15,

768 
	mNET_SCTP_SACK_TIMEOUT
 = 16,

769 
	mNET_SCTP_RCVBUF_POLICY
 = 17,

774 
	mNET_BRIDGE_NF_CALL_ARPTABLES
 = 1,

775 
	mNET_BRIDGE_NF_CALL_IPTABLES
 = 2,

776 
	mNET_BRIDGE_NF_CALL_IP6TABLES
 = 3,

777 
	mNET_BRIDGE_NF_FILTER_VLAN_TAGGED
 = 4,

778 
	mNET_BRIDGE_NF_FILTER_PPPOE_TAGGED
 = 5,

783 
	mNET_IRDA_DISCOVERY
=1,

784 
	mNET_IRDA_DEVNAME
=2,

785 
	mNET_IRDA_DEBUG
=3,

786 
	mNET_IRDA_FAST_POLL
=4,

787 
	mNET_IRDA_DISCOVERY_SLOTS
=5,

788 
	mNET_IRDA_DISCOVERY_TIMEOUT
=6,

789 
	mNET_IRDA_SLOT_TIMEOUT
=7,

790 
	mNET_IRDA_MAX_BAUD_RATE
=8,

791 
	mNET_IRDA_MIN_TX_TURN_TIME
=9,

792 
	mNET_IRDA_MAX_TX_DATA_SIZE
=10,

793 
	mNET_IRDA_MAX_TX_WINDOW
=11,

794 
	mNET_IRDA_MAX_NOREPLY_TIME
=12,

795 
	mNET_IRDA_WARN_NOREPLY_TIME
=13,

796 
	mNET_IRDA_LAP_KEEPALIVE_TIME
=14,

803 
	mFS_NRINODE
=1,

804 
	mFS_STATINODE
=2,

805 
	mFS_MAXINODE
=3,

806 
	mFS_NRDQUOT
=4,

807 
	mFS_MAXDQUOT
=5,

808 
	mFS_NRFILE
=6,

809 
	mFS_MAXFILE
=7,

810 
	mFS_DENTRY
=8,

811 
	mFS_NRSUPER
=9,

812 
	mFS_MAXSUPER
=10,

813 
	mFS_OVERFLOWUID
=11,

814 
	mFS_OVERFLOWGID
=12,

815 
	mFS_LEASES
=13,

816 
	mFS_DIR_NOTIFY
=14,

817 
	mFS_LEASE_TIME
=15,

818 
	mFS_DQSTATS
=16,

819 
	mFS_XFS
=17,

820 
	mFS_AIO_NR
=18,

821 
	mFS_AIO_MAX_NR
=19,

822 
	mFS_INOTIFY
=20,

823 
	mFS_OCFS2
=988,

828 
	mFS_DQ_LOOKUPS
 = 1,

829 
	mFS_DQ_DROPS
 = 2,

830 
	mFS_DQ_READS
 = 3,

831 
	mFS_DQ_WRITES
 = 4,

832 
	mFS_DQ_CACHE_HITS
 = 5,

833 
	mFS_DQ_ALLOCATED
 = 6,

834 
	mFS_DQ_FREE
 = 7,

835 
	mFS_DQ_SYNCS
 = 8,

836 
	mFS_DQ_WARNINGS
 = 9,

843 
	mDEV_CDROM
=1,

844 
	mDEV_HWMON
=2,

845 
	mDEV_PARPORT
=3,

846 
	mDEV_RAID
=4,

847 
	mDEV_MAC_HID
=5,

848 
	mDEV_SCSI
=6,

849 
	mDEV_IPMI
=7,

854 
	mDEV_CDROM_INFO
=1,

855 
	mDEV_CDROM_AUTOCLOSE
=2,

856 
	mDEV_CDROM_AUTOEJECT
=3,

857 
	mDEV_CDROM_DEBUG
=4,

858 
	mDEV_CDROM_LOCK
=5,

859 
	mDEV_CDROM_CHECK_MEDIA
=6

864 
	mDEV_PARPORT_DEFAULT
=-3

869 
	mDEV_RAID_SPEED_LIMIT_MIN
=1,

870 
	mDEV_RAID_SPEED_LIMIT_MAX
=2

875 
	mDEV_PARPORT_DEFAULT_TIMESLICE
=1,

876 
	mDEV_PARPORT_DEFAULT_SPINTIME
=2

881 
	mDEV_PARPORT_SPINTIME
=1,

882 
	mDEV_PARPORT_BASE_ADDR
=2,

883 
	mDEV_PARPORT_IRQ
=3,

884 
	mDEV_PARPORT_DMA
=4,

885 
	mDEV_PARPORT_MODES
=5,

886 
	mDEV_PARPORT_DEVICES
=6,

887 
	mDEV_PARPORT_AUTOPROBE
=16

892 
	mDEV_PARPORT_DEVICES_ACTIVE
=-3,

897 
	mDEV_PARPORT_DEVICE_TIMESLICE
=1,

902 
	mDEV_MAC_HID_KEYBOARD_SENDS_LINUX_KEYCODES
=1,

903 
	mDEV_MAC_HID_KEYBOARD_LOCK_KEYCODES
=2,

904 
	mDEV_MAC_HID_MOUSE_BUTTON_EMULATION
=3,

905 
	mDEV_MAC_HID_MOUSE_BUTTON2_KEYCODE
=4,

906 
	mDEV_MAC_HID_MOUSE_BUTTON3_KEYCODE
=5,

907 
	mDEV_MAC_HID_ADB_MOUSE_SENDS_KEYCODES
=6

912 
	mDEV_SCSI_LOGGING_LEVEL
=1,

917 
	mDEV_IPMI_POWEROFF_POWERCYCLE
=1,

923 
	mABI_DEFHANDLER_COFF
=1,

924 
	mABI_DEFHANDLER_ELF
=2,

925 
	mABI_DEFHANDLER_LCALL7
=3,

926 
	mABI_DEFHANDLER_LIBCSO
=4,

927 
	mABI_TRACE
=5,

928 
	mABI_FAKE_UTSNAME
=6,

	@/usr/include/paths.h

32 #i‚de‡
_PATHS_H_


33 
	#_PATHS_H_


	)

36 
	#_PATH_DEFPATH
 "/u§/bö:/bö"

	)

38 
	#_PATH_STDPATH
 \

39 "/u§/bö:/bö:/u§/sbö:/sbö"

	)

41 
	#_PATH_BSHELL
 "/bö/sh"

	)

42 
	#_PATH_CONSOLE
 "/dev/c⁄sﬁe"

	)

43 
	#_PATH_CSHELL
 "/bö/csh"

	)

44 
	#_PATH_DEVDB
 "/v¨/run/dev.db"

	)

45 
	#_PATH_DEVNULL
 "/dev/nuŒ"

	)

46 
	#_PATH_DRUM
 "/dev/drum"

	)

47 
	#_PATH_GSHADOW
 "/ëc/gshadow"

	)

48 
	#_PATH_KLOG
 "/¥oc/kmsg"

	)

49 
	#_PATH_KMEM
 "/dev/kmem"

	)

50 
	#_PATH_LASTLOG
 "/v¨/log/œ°log"

	)

51 
	#_PATH_MAILDIR
 "/v¨/maû"

	)

52 
	#_PATH_MAN
 "/u§/sh¨e/m™"

	)

53 
	#_PATH_MEM
 "/dev/mem"

	)

54 
	#_PATH_MNTTAB
 "/ëc/f°ab"

	)

55 
	#_PATH_MOUNTED
 "/ëc/mèb"

	)

56 
	#_PATH_NOLOGIN
 "/ëc/nﬁogö"

	)

57 
	#_PATH_PRESERVE
 "/v¨/lib"

	)

58 
	#_PATH_RWHODIR
 "/v¨/•oﬁ/rwho"

	)

59 
	#_PATH_SENDMAIL
 "/u§/sbö/£ndmaû"

	)

60 
	#_PATH_SHADOW
 "/ëc/shadow"

	)

61 
	#_PATH_SHELLS
 "/ëc/shñls"

	)

62 
	#_PATH_TTY
 "/dev/ây"

	)

63 
	#_PATH_UNIX
 "/boŸ/vmlöux"

	)

64 
	#_PATH_UTMP
 "/v¨/run/utmp"

	)

65 
	#_PATH_VI
 "/u§/bö/vi"

	)

66 
	#_PATH_WTMP
 "/v¨/log/wtmp"

	)

69 
	#_PATH_DEV
 "/dev/"

	)

70 
	#_PATH_TMP
 "/tmp/"

	)

71 
	#_PATH_VARDB
 "/v¨/lib/misc/"

	)

72 
	#_PATH_VARRUN
 "/v¨/run/"

	)

73 
	#_PATH_VARTMP
 "/v¨/tmp/"

	)

	@/usr/include/rpc/netdb.h

36 #i‚de‡
_RPC_NETDB_H


37 
	#_RPC_NETDB_H
 1

	)

39 
	~<„©uªs.h
>

41 
	#__√ed_size_t


	)

42 
	~<°ddef.h
>

44 
__BEGIN_DECLS


46 
	sΩ˚¡


48 *
	mr_«me
;

49 **
	mr_Æü£s
;

50 
	mr_numbî
;

53 
	$£åp˚¡
 (
__°ay›í
Ë
__THROW
;

54 
	$ídΩ˚¡
 (Ë
__THROW
;

55 
Ω˚¡
 *
	$gëΩcby«me
 (c⁄° *
__«me
Ë
__THROW
;

56 
Ω˚¡
 *
	$gëΩcbynumbî
 (
__numbî
Ë
__THROW
;

57 
Ω˚¡
 *
	$gëΩ˚¡
 (Ë
__THROW
;

59 #ifde‡
__USE_MISC


60 
	$gëΩcby«me_r
 (c⁄° *
__«me
, 
Ω˚¡
 *
__ªsu…_buf
,

61 *
__buf„r
, 
size_t
 
__buÊí
,

62 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

64 
	$gëΩcbynumbî_r
 (
__numbî
, 
Ω˚¡
 *
__ªsu…_buf
,

65 *
__buf„r
, 
size_t
 
__buÊí
,

66 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

68 
	$gëΩ˚¡_r
 (
Ω˚¡
 *
__ªsu…_buf
, *
__buf„r
,

69 
size_t
 
__buÊí
, 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

72 
__END_DECLS


	@/usr/include/sys/cdefs.h

18 #i‚def 
_SYS_CDEFS_H


19 
	#_SYS_CDEFS_H
 1

	)

22 #i‚de‡
_FEATURES_H


23 
	~<„©uªs.h
>

29 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


34 #unde‡
__P


35 #unde‡
__PMT


37 #ifde‡
__GNUC__


41 #i‡
__GNUC_PREREQ
 (4, 6Ë&& !
deföed
 
_LIBC


42 
	#__LEAF
 , 
__Àaf__


	)

43 
	#__LEAF_ATTR
 
	`__©åibuã__
 ((
__Àaf__
))

	)

45 
	#__LEAF


	)

46 
	#__LEAF_ATTR


	)

54 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

55 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
))

	)

56 
	#__THROWNL
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

57 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
)Ë
	)
fct

59 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

60 
	#__THROW
 
	`throw
 ()

	)

61 
	#__THROWNL
 
	`throw
 ()

	)

62 
	#__NTH
(
f˘
Ë
__LEAF_ATTR
 f˘ 
	`throw
 ()

	)

64 
	#__THROW


	)

65 
	#__THROWNL


	)

66 
	#__NTH
(
f˘
Ë
	)
fct

72 
	#__ölöe


	)

74 
	#__THROW


	)

75 
	#__THROWNL


	)

76 
	#__NTH
(
f˘
Ë
	)
fct

82 
	#__P
(
¨gs
Ë
	)
args

83 
	#__PMT
(
¨gs
Ë
	)
args

88 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

89 
	#__STRING
(
x
Ë#x

	)

92 
	#__±r_t
 *

	)

93 
	#__l⁄g_doubÀ_t
 

	)

97 #ifdef 
__˝lu•lus


98 
	#__BEGIN_DECLS
 "C" {

	)

99 
	#__END_DECLS
 }

	)

101 
	#__BEGIN_DECLS


	)

102 
	#__END_DECLS


	)

111 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


112 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

113 
	#__END_NAMESPACE_STD
 }

	)

114 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

115 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

116 
	#__END_NAMESPACE_C99
 }

	)

117 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

122 
	#__BEGIN_NAMESPACE_STD


	)

123 
	#__END_NAMESPACE_STD


	)

124 
	#__USING_NAMESPACE_STD
(
«me
)

	)

125 
	#__BEGIN_NAMESPACE_C99


	)

126 
	#__END_NAMESPACE_C99


	)

127 
	#__USING_NAMESPACE_C99
(
«me
)

	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

134 
	#__f‹tify_fun˘i⁄
 
__exã∫_Æways_ölöe
 
__©åibuã_¨tificül__


	)

136 #i‡
__GNUC_PREREQ
 (4,3)

137 
	#__w¨nde˛
(
«me
, 
msg
) \

138 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

139 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

140 
	#__îr‹de˛
(
«me
, 
msg
) \

141 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

143 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

144 
	#__w¨«âr
(
msg
)

	)

145 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

149 #i‡
__GNUC_PREREQ
 (2,97)

151 
	#__Êex¨r
 []

	)

153 #ifde‡
__GNUC__


154 
	#__Êex¨r
 [0]

	)

156 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

157 
	#__Êex¨r
 []

	)

160 
	#__Êex¨r
 [1]

	)

176 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

178 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

179 #ifde‡
__˝lu•lus


180 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

181 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

182 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

183 
«me
 
¥Ÿo
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

185 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

186 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

187 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

188 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROWNL


	)

190 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

191 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

204 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

205 
	#__©åibuã__
(
xyz
Ë

	)

211 #i‡
__GNUC_PREREQ
 (2,96)

212 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

214 
	#__©åibuã_mÆloc__


	)

219 #i‡
__GNUC_PREREQ
 (4, 3)

220 
	#__©åibuã_Æloc_size__
(
∑øms
) \

221 
	`__©åibuã__
 ((
__Æloc_size__
 
∑øms
))

	)

223 
	#__©åibuã_Æloc_size__
(
∑øms
Ë

	)

229 #i‡
__GNUC_PREREQ
 (2,96)

230 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

232 
	#__©åibuã_puª__


	)

236 #i‡
__GNUC_PREREQ
 (2,5)

237 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
 ((
__c⁄°__
))

	)

239 
	#__©åibuã_c⁄°__


	)

245 #i‡
__GNUC_PREREQ
 (3,1)

246 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

247 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

249 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

250 
	#__©åibuã_noölöe__


	)

254 #i‡
__GNUC_PREREQ
 (3,2)

255 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

257 
	#__©åibuã_dïªˇãd__


	)

266 #i‡
__GNUC_PREREQ
 (2,8)

267 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

269 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

276 #i‡
__GNUC_PREREQ
 (2,97)

277 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

278 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

280 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

285 #i‡
__GNUC_PREREQ
 (3,3)

286 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

288 
	#__n⁄nuŒ
(
∑øms
)

	)

293 #i‡
__GNUC_PREREQ
 (3,4)

294 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

295 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

296 #i‡
__USE_FORTIFY_LEVEL
 > 0

297 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

300 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

302 #i‚de‡
__wur


303 
	#__wur


	)

307 #i‡
__GNUC_PREREQ
 (3,2)

308 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

310 
	#__Æways_ölöe
 
__ölöe


	)

315 #i‡
__GNUC_PREREQ
 (4,3)

316 
	#__©åibuã_¨tificül__
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

318 
	#__©åibuã_¨tificül__


	)

321 #ifde‡
__GNUC__


326 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__GNUC_GNU_INLINE__


327 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

328 
	#__exã∫_Æways_ölöe
 \

329 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

331 
	#__exã∫_ölöe
 
__ölöe


	)

332 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

335 
	#__exã∫_ölöe


	)

336 
	#__exã∫_Æways_ölöe


	)

341 #i‡
__GNUC_PREREQ
 (4,3)

342 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

343 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

350 #i‡!
__GNUC_PREREQ
 (2,8)

351 
	#__exãnsi⁄__


	)

355 #i‡!
__GNUC_PREREQ
 (2,92)

356 
	#__ª°ri˘


	)

362 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


363 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

365 #ifde‡
__GNUC__


366 
	#__ª°ri˘_¨r


	)

368 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

369 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

372 
	#__ª°ri˘_¨r


	)

377 #i‡
__GNUC__
 >= 3

378 
	#__glibc_u∆ikñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 0)

	)

379 
	#__glibc_likñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 1)

	)

381 
	#__glibc_u∆ikñy
(
c⁄d
Ë(c⁄d)

	)

382 
	#__glibc_likñy
(
c⁄d
Ë(c⁄d)

	)

385 
	~<bôs/w‹dsize.h
>

387 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


388 
	#__LDBL_COMPAT
 1

	)

389 #ifde‡
__REDIRECT


390 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

391 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

392 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

393 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

394 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

395 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

396 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

397 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

398 
	#__LDBL_REDIR_DECL
(
«me
) \

399 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

400 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

401 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

402 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

403 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

406 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


407 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

408 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

409 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

410 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

411 
	#__LDBL_REDIR_DECL
(
«me
)

	)

412 #ifde‡
__REDIRECT


413 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

414 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

415 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/sys/select.h

21 #i‚de‡
_SYS_SELECT_H


22 
	#_SYS_SELECT_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

30 
	~<bôs/£À˘.h
>

33 
	~<bôs/sig£t.h
>

35 #i‚de‡
__sig£t_t_deföed


36 
	#__sig£t_t_deföed


	)

37 
__sig£t_t
 
	tsig£t_t
;

41 
	#__√ed_time_t


	)

42 
	#__√ed_time•ec


	)

43 
	~<time.h
>

44 
	#__√ed_timevÆ


	)

45 
	~<bôs/time.h
>

47 #i‚de‡
__su£c⁄ds_t_deföed


48 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

49 
	#__su£c⁄ds_t_deföed


	)

54 
	t__fd_mask
;

57 #unde‡
__NFDBITS


59 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

60 
	#__FD_ELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

61 
	#__FD_MASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

68 #ifde‡
__USE_XOPEN


69 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

70 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

72 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

75 } 
	tfd_£t
;

78 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

80 #ifde‡
__USE_MISC


82 
__fd_mask
 
	tfd_mask
;

85 
	#NFDBITS
 
__NFDBITS


	)

90 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

91 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

92 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

93 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

96 
__BEGIN_DECLS


106 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

107 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

108 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

109 
timevÆ
 *
__ª°ri˘
 
__timeout
);

111 #ifde‡
__USE_XOPEN2K


118 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

119 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

120 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

121 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

122 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

127 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__GNUC__


128 
	~<bôs/£À˘2.h
>

131 
	g__END_DECLS


	@/usr/include/sys/statfs.h

19 #i‚def 
_SYS_STATFS_H


20 
	#_SYS_STATFS_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/°©fs.h
>

27 
	g__BEGIN_DECLS


30 #i‚de‡
__USE_FILE_OFFSET64


31 
	$°©fs
 (c⁄° *
__fûe
, 
°©fs
 *
__buf
)

32 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

34 #ifde‡
__REDIRECT_NTH


35 
	`__REDIRECT_NTH
 (
°©fs
,

36 (c⁄° *
__fûe
, 
°©fs
 *
__buf
),

37 
°©fs64
Ë
	`__n⁄nuŒ
 ((1, 2));

39 
	#°©fs
 
°©fs64


	)

42 #ifde‡
__USE_LARGEFILE64


43 
	$°©fs64
 (c⁄° *
__fûe
, 
°©fs64
 *
__buf
)

44 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

49 #i‚de‡
__USE_FILE_OFFSET64


50 
	$f°©fs
 (
__fûdes
, 
°©fs
 *
__buf
)

51 
__THROW
 
	`__n⁄nuŒ
 ((2));

53 #ifde‡
__REDIRECT_NTH


54 
	`__REDIRECT_NTH
 (
f°©fs
, (
__fûdes
, 
°©fs
 *
__buf
),

55 
f°©fs64
Ë
	`__n⁄nuŒ
 ((2));

57 
	#f°©fs
 
f°©fs64


	)

60 #ifde‡
__USE_LARGEFILE64


61 
	$f°©fs64
 (
__fûdes
, 
°©fs64
 *
__buf
)

62 
__THROW
 
	`__n⁄nuŒ
 ((2));

65 
__END_DECLS


	@/usr/include/sys/syslog.h

32 #i‚de‡
_SYS_SYSLOG_H


33 
	#_SYS_SYSLOG_H
 1

	)

35 
	~<„©uªs.h
>

36 
	#__√ed___va_li°


	)

37 
	~<°d¨g.h
>

40 
	~<bôs/sy¶og-∑th.h
>

51 
	#LOG_EMERG
 0

	)

52 
	#LOG_ALERT
 1

	)

53 
	#LOG_CRIT
 2

	)

54 
	#LOG_ERR
 3

	)

55 
	#LOG_WARNING
 4

	)

56 
	#LOG_NOTICE
 5

	)

57 
	#LOG_INFO
 6

	)

58 
	#LOG_DEBUG
 7

	)

60 
	#LOG_PRIMASK
 0x07

	)

62 
	#LOG_PRI
(
p
Ë(’Ë& 
LOG_PRIMASK
)

	)

63 
	#LOG_MAKEPRI
(
Ác
, 
¥i
Ë((ÁcË| (¥i))

	)

65 #ifde‡
SYSLOG_NAMES


66 
	#INTERNAL_NOPRI
 0x10

	)

68 
	#INTERNAL_MARK
 
	`LOG_MAKEPRI
(
LOG_NFACILITIES
 << 3, 0)

	)

69 
	s_code
 {

70 *
	mc_«me
;

71 
	mc_vÆ
;

72 } 
	tCODE
;

74 
CODE
 
	g¥i‹ôy«mes
[] =

76 { "Æît", 
LOG_ALERT
 },

77 { "¸ô", 
LOG_CRIT
 },

78 { "debug", 
LOG_DEBUG
 },

79 { "emîg", 
LOG_EMERG
 },

80 { "îr", 
LOG_ERR
 },

81 { "îr‹", 
LOG_ERR
 },

82 { "öfo", 
LOG_INFO
 },

83 { "n⁄e", 
INTERNAL_NOPRI
 },

84 { "nŸi˚", 
LOG_NOTICE
 },

85 { "∑nic", 
LOG_EMERG
 },

86 { "w¨n", 
LOG_WARNING
 },

87 { "w¨nög", 
LOG_WARNING
 },

88 { 
NULL
, -1 }

93 
	#LOG_KERN
 (0<<3Ë

	)

94 
	#LOG_USER
 (1<<3Ë

	)

95 
	#LOG_MAIL
 (2<<3Ë

	)

96 
	#LOG_DAEMON
 (3<<3Ë

	)

97 
	#LOG_AUTH
 (4<<3Ë

	)

98 
	#LOG_SYSLOG
 (5<<3Ë

	)

99 
	#LOG_LPR
 (6<<3Ë

	)

100 
	#LOG_NEWS
 (7<<3Ë

	)

101 
	#LOG_UUCP
 (8<<3Ë

	)

102 
	#LOG_CRON
 (9<<3Ë

	)

103 
	#LOG_AUTHPRIV
 (10<<3Ë

	)

104 
	#LOG_FTP
 (11<<3Ë

	)

107 
	#LOG_LOCAL0
 (16<<3Ë

	)

108 
	#LOG_LOCAL1
 (17<<3Ë

	)

109 
	#LOG_LOCAL2
 (18<<3Ë

	)

110 
	#LOG_LOCAL3
 (19<<3Ë

	)

111 
	#LOG_LOCAL4
 (20<<3Ë

	)

112 
	#LOG_LOCAL5
 (21<<3Ë

	)

113 
	#LOG_LOCAL6
 (22<<3Ë

	)

114 
	#LOG_LOCAL7
 (23<<3Ë

	)

116 
	#LOG_NFACILITIES
 24

	)

117 
	#LOG_FACMASK
 0x03f8

	)

119 
	#LOG_FAC
(
p
Ë((’Ë& 
LOG_FACMASK
Ë>> 3)

	)

121 #ifde‡
SYSLOG_NAMES


122 
CODE
 
	gÁcûôy«mes
[] =

124 { "auth", 
LOG_AUTH
 },

125 { "auth¥iv", 
LOG_AUTHPRIV
 },

126 { "¸⁄", 
LOG_CRON
 },

127 { "d´m⁄", 
LOG_DAEMON
 },

128 { "·p", 
LOG_FTP
 },

129 { "kîn", 
LOG_KERN
 },

130 { "Õr", 
LOG_LPR
 },

131 { "maû", 
LOG_MAIL
 },

132 { "m¨k", 
INTERNAL_MARK
 },

133 { "√ws", 
LOG_NEWS
 },

134 { "£curôy", 
LOG_AUTH
 },

135 { "sy¶og", 
LOG_SYSLOG
 },

136 { "u£r", 
LOG_USER
 },

137 { "uu˝", 
LOG_UUCP
 },

138 { "loˇl0", 
LOG_LOCAL0
 },

139 { "loˇl1", 
LOG_LOCAL1
 },

140 { "loˇl2", 
LOG_LOCAL2
 },

141 { "loˇl3", 
LOG_LOCAL3
 },

142 { "loˇl4", 
LOG_LOCAL4
 },

143 { "loˇl5", 
LOG_LOCAL5
 },

144 { "loˇl6", 
LOG_LOCAL6
 },

145 { "loˇl7", 
LOG_LOCAL7
 },

146 { 
NULL
, -1 }

153 
	#LOG_MASK
(
¥i
Ë(1 << (¥i)Ë

	)

154 
	#LOG_UPTO
(
¥i
Ë((1 << (’ri)+1)Ë- 1Ë

	)

162 
	#LOG_PID
 0x01

	)

163 
	#LOG_CONS
 0x02

	)

164 
	#LOG_ODELAY
 0x04

	)

165 
	#LOG_NDELAY
 0x08

	)

166 
	#LOG_NOWAIT
 0x10

	)

167 
	#LOG_PERROR
 0x20

	)

169 
__BEGIN_DECLS


175 
˛o£log
 ();

181 
›ílog
 (c⁄° *
__idít
, 
__›ti⁄
, 
__Ácûôy
);

184 
	$£éogmask
 (
__mask
Ë
__THROW
;

190 
	$sy¶og
 (
__¥i
, c⁄° *
__fmt
, ...)

191 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

193 #ifde‡
__USE_BSD


200 
	$vsy¶og
 (
__¥i
, c⁄° *
__fmt
, 
__gnuc_va_li°
 
__≠
)

201 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

206 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


207 
	~<bôs/sy¶og.h
>

209 #ifde‡
__LDBL_COMPAT


210 
	~<bôs/sy¶og-ldbl.h
>

213 
__END_DECLS


	@/usr/include/sys/sysmacros.h

19 #i‚de‡
_SYS_SYSMACROS_H


20 
	#_SYS_SYSMACROS_H
 1

	)

22 
	~<„©uªs.h
>

24 
__BEGIN_DECLS


26 
__exãnsi⁄__


27 
	$gnu_dev_maj‹
 (
__dev
)

28 
__THROW
 
__©åibuã_c⁄°__
;

29 
__exãnsi⁄__


30 
	$gnu_dev_mö‹
 (
__dev
)

31 
__THROW
 
__©åibuã_c⁄°__
;

32 
__exãnsi⁄__


33 
	$gnu_dev_makedev
 (
__maj‹
,

34 
__mö‹
)

35 
__THROW
 
__©åibuã_c⁄°__
;

37 #ifde‡
__USE_EXTERN_INLINES


38 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

39 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

41  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

42 
	}
}

44 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

45 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

47  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

48 
	}
}

50 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

51 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

53  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

54 | (((Ë(
__mö‹
 & ~0xff)) << 12)

55 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

56 
	}
}

58 
	g__END_DECLS


61 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

62 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

63 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/sys/ttydefaults.h

40 #i‚de‡
_SYS_TTYDEFAULTS_H_


41 
	#_SYS_TTYDEFAULTS_H_


	)

46 
	#TTYDEF_IFLAG
 (
BRKINT
 | 
ISTRIP
 | 
ICRNL
 | 
IMAXBEL
 | 
IXON
 | 
IXANY
)

	)

47 
	#TTYDEF_OFLAG
 (
OPOST
 | 
ONLCR
 | 
XTABS
)

	)

48 
	#TTYDEF_LFLAG
 (
ECHO
 | 
ICANON
 | 
ISIG
 | 
IEXTEN
 | 
ECHOE
|
ECHOKE
|
ECHOCTL
)

	)

49 
	#TTYDEF_CFLAG
 (
CREAD
 | 
CS7
 | 
PARENB
 | 
HUPCL
)

	)

50 
	#TTYDEF_SPEED
 (
B9600
)

	)

55 
	#CTRL
(
x
Ë(x&037)

	)

56 
	#CEOF
 
	`CTRL
('d')

	)

57 #ifde‡
_POSIX_VDISABLE


58 
	#CEOL
 
_POSIX_VDISABLE


	)

60 
	#CEOL
 '\0'

	)

62 
	#CERASE
 0177

	)

63 
	#CINTR
 
	`CTRL
('c')

	)

64 #ifde‡
_POSIX_VDISABLE


65 
	#CSTATUS
 
_POSIX_VDISABLE


	)

67 
	#CSTATUS
 '\0'

	)

69 
	#CKILL
 
	`CTRL
('u')

	)

70 
	#CMIN
 1

	)

71 
	#CQUIT
 034

	)

72 
	#CSUSP
 
	`CTRL
('z')

	)

73 
	#CTIME
 0

	)

74 
	#CDSUSP
 
	`CTRL
('y')

	)

75 
	#CSTART
 
	`CTRL
('q')

	)

76 
	#CSTOP
 
	`CTRL
('s')

	)

77 
	#CLNEXT
 
	`CTRL
('v')

	)

78 
	#CDISCARD
 
	`CTRL
('o')

	)

79 
	#CWERASE
 
	`CTRL
('w')

	)

80 
	#CREPRINT
 
	`CTRL
('r')

	)

81 
	#CEOT
 
CEOF


	)

83 
	#CBRK
 
CEOL


	)

84 
	#CRPRNT
 
CREPRINT


	)

85 
	#CFLUSH
 
CDISCARD


	)

93 #ifde‡
TTYDEFCHARS


94 
cc_t
 
	gâydefch¨s
[
NCCS
] = {

95 
CEOF
, 
CEOL
, CEOL, 
CERASE
, 
CWERASE
, 
CKILL
, 
CREPRINT
,

96 
_POSIX_VDISABLE
, 
CINTR
, 
CQUIT
, 
CSUSP
, 
CDSUSP
, 
CSTART
, 
CSTOP
, 
CLNEXT
,

97 
CDISCARD
, 
CMIN
, 
CTIME
, 
CSTATUS
, 
_POSIX_VDISABLE


99 #unde‡
TTYDEFCHARS


	@/usr/include/sys/ucontext.h

18 #i‚de‡
_SYS_UCONTEXT_H


19 
	#_SYS_UCONTEXT_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sig«l.h
>

26 
	~<bôs/sigc⁄ãxt.h
>

28 #ifde‡
__x86_64__


31 
__exãnsi⁄__
 
	tgªg_t
;

34 
	#NGREG
 23

	)

37 
gªg_t
 
	tgªg£t_t
[
NGREG
];

39 #ifde‡
__USE_GNU


43 
	mREG_R8
 = 0,

44 
	#REG_R8
 
REG_R8


	)

45 
	mREG_R9
,

46 
	#REG_R9
 
REG_R9


	)

47 
	mREG_R10
,

48 
	#REG_R10
 
REG_R10


	)

49 
	mREG_R11
,

50 
	#REG_R11
 
REG_R11


	)

51 
	mREG_R12
,

52 
	#REG_R12
 
REG_R12


	)

53 
	mREG_R13
,

54 
	#REG_R13
 
REG_R13


	)

55 
	mREG_R14
,

56 
	#REG_R14
 
REG_R14


	)

57 
	mREG_R15
,

58 
	#REG_R15
 
REG_R15


	)

59 
	mREG_RDI
,

60 
	#REG_RDI
 
REG_RDI


	)

61 
	mREG_RSI
,

62 
	#REG_RSI
 
REG_RSI


	)

63 
	mREG_RBP
,

64 
	#REG_RBP
 
REG_RBP


	)

65 
	mREG_RBX
,

66 
	#REG_RBX
 
REG_RBX


	)

67 
	mREG_RDX
,

68 
	#REG_RDX
 
REG_RDX


	)

69 
	mREG_RAX
,

70 
	#REG_RAX
 
REG_RAX


	)

71 
	mREG_RCX
,

72 
	#REG_RCX
 
REG_RCX


	)

73 
	mREG_RSP
,

74 
	#REG_RSP
 
REG_RSP


	)

75 
	mREG_RIP
,

76 
	#REG_RIP
 
REG_RIP


	)

77 
	mREG_EFL
,

78 
	#REG_EFL
 
REG_EFL


	)

79 
	mREG_CSGSFS
,

80 
	#REG_CSGSFS
 
REG_CSGSFS


	)

81 
	mREG_ERR
,

82 
	#REG_ERR
 
REG_ERR


	)

83 
	mREG_TRAPNO
,

84 
	#REG_TRAPNO
 
REG_TRAPNO


	)

85 
	mREG_OLDMASK
,

86 
	#REG_OLDMASK
 
REG_OLDMASK


	)

87 
	mREG_CR2


88 
	#REG_CR2
 
REG_CR2


	)

92 
	s_libc_Âxªg


94 
	msignifiˇnd
[4];

95 
	mexp⁄ít
;

96 
	m∑ddög
[3];

99 
	s_libc_xmmªg


101 
__uöt32_t
 
	mñemít
[4];

104 
	s_libc_Â°©e


107 
__uöt16_t
 
	mcwd
;

108 
__uöt16_t
 
	mswd
;

109 
__uöt16_t
 
	m·w
;

110 
__uöt16_t
 
	mf›
;

111 
__uöt64_t
 
	mrù
;

112 
__uöt64_t
 
	mrdp
;

113 
__uöt32_t
 
	mmxc§
;

114 
__uöt32_t
 
	mmx¸_mask
;

115 
_libc_Âxªg
 
	m_°
[8];

116 
_libc_xmmªg
 
	m_xmm
[16];

117 
__uöt32_t
 
	m∑ddög
[24];

121 
_libc_Â°©e
 *
	tÂªg£t_t
;

126 
gªg£t_t
 
	mgªgs
;

128 
Âªg£t_t
 
	mÂªgs
;

129 
__exãnsi⁄__
 
	m__ª£rved1
 [8];

130 } 
	tmc⁄ãxt_t
;

133 
	suc⁄ãxt


135 
	muc_Êags
;

136 
uc⁄ãxt
 *
	muc_lök
;

137 
°ack_t
 
	muc_°ack
;

138 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

139 
__sig£t_t
 
	muc_sigmask
;

140 
_libc_Â°©e
 
	m__Âªgs_mem
;

141 } 
	tuc⁄ãxt_t
;

146 
	tgªg_t
;

149 
	#NGREG
 19

	)

152 
gªg_t
 
	tgªg£t_t
[
NGREG
];

154 #ifde‡
__USE_GNU


158 
	mREG_GS
 = 0,

159 
	#REG_GS
 
REG_GS


	)

160 
	mREG_FS
,

161 
	#REG_FS
 
REG_FS


	)

162 
	mREG_ES
,

163 
	#REG_ES
 
REG_ES


	)

164 
	mREG_DS
,

165 
	#REG_DS
 
REG_DS


	)

166 
	mREG_EDI
,

167 
	#REG_EDI
 
REG_EDI


	)

168 
	mREG_ESI
,

169 
	#REG_ESI
 
REG_ESI


	)

170 
	mREG_EBP
,

171 
	#REG_EBP
 
REG_EBP


	)

172 
	mREG_ESP
,

173 
	#REG_ESP
 
REG_ESP


	)

174 
	mREG_EBX
,

175 
	#REG_EBX
 
REG_EBX


	)

176 
	mREG_EDX
,

177 
	#REG_EDX
 
REG_EDX


	)

178 
	mREG_ECX
,

179 
	#REG_ECX
 
REG_ECX


	)

180 
	mREG_EAX
,

181 
	#REG_EAX
 
REG_EAX


	)

182 
	mREG_TRAPNO
,

183 
	#REG_TRAPNO
 
REG_TRAPNO


	)

184 
	mREG_ERR
,

185 
	#REG_ERR
 
REG_ERR


	)

186 
	mREG_EIP
,

187 
	#REG_EIP
 
REG_EIP


	)

188 
	mREG_CS
,

189 
	#REG_CS
 
REG_CS


	)

190 
	mREG_EFL
,

191 
	#REG_EFL
 
REG_EFL


	)

192 
	mREG_UESP
,

193 
	#REG_UESP
 
REG_UESP


	)

194 
	mREG_SS


195 
	#REG_SS
 
REG_SS


	)

200 
	s_libc_Âªg


202 
	msignifiˇnd
[4];

203 
	mexp⁄ít
;

206 
	s_libc_Â°©e


208 
	mcw
;

209 
	msw
;

210 
	mèg
;

211 
	mùoff
;

212 
	mcs£l
;

213 
	md©aoff
;

214 
	md©a£l
;

215 
_libc_Âªg
 
	m_°
[8];

216 
	m°©us
;

220 
_libc_Â°©e
 *
	tÂªg£t_t
;

225 
gªg£t_t
 
	mgªgs
;

228 
Âªg£t_t
 
	mÂªgs
;

229 
	mﬁdmask
;

230 
	m¸2
;

231 } 
	tmc⁄ãxt_t
;

234 
	suc⁄ãxt


236 
	muc_Êags
;

237 
uc⁄ãxt
 *
	muc_lök
;

238 
°ack_t
 
	muc_°ack
;

239 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

240 
__sig£t_t
 
	muc_sigmask
;

241 
_libc_Â°©e
 
	m__Âªgs_mem
;

242 } 
	tuc⁄ãxt_t
;

	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/zconf.h

8 #i‚de‡
ZCONF_H


9 
	#ZCONF_H


	)

17 #ifde‡
Z_PREFIX


18 
	#Z_PREFIX_SET


	)

21 
	#_di°_code
 
z__di°_code


	)

22 
	#_Àngth_code
 
z__Àngth_code


	)

23 
	#_å_Æign
 
z__å_Æign


	)

24 
	#_å_Êush_bôs
 
z__å_Êush_bôs


	)

25 
	#_å_Êush_block
 
z__å_Êush_block


	)

26 
	#_å_öô
 
z__å_öô


	)

27 
	#_å_°‹ed_block
 
z__å_°‹ed_block


	)

28 
	#_å_èŒy
 
z__å_èŒy


	)

29 
	#adÀr32
 
z_adÀr32


	)

30 
	#adÀr32_comböe
 
z_adÀr32_comböe


	)

31 
	#adÀr32_comböe64
 
z_adÀr32_comböe64


	)

32 #i‚de‡
Z_SOLO


33 
	#com¥ess
 
z_com¥ess


	)

34 
	#com¥ess2
 
z_com¥ess2


	)

35 
	#com¥essBound
 
z_com¥essBound


	)

37 
	#¸c32
 
z_¸c32


	)

38 
	#¸c32_comböe
 
z_¸c32_comböe


	)

39 
	#¸c32_comböe64
 
z_¸c32_comböe64


	)

40 
	#deÊ©e
 
z_deÊ©e


	)

41 
	#deÊ©eBound
 
z_deÊ©eBound


	)

42 
	#deÊ©eC›y
 
z_deÊ©eC›y


	)

43 
	#deÊ©eEnd
 
z_deÊ©eEnd


	)

44 
	#deÊ©eInô2_
 
z_deÊ©eInô2_


	)

45 
	#deÊ©eInô_
 
z_deÊ©eInô_


	)

46 
	#deÊ©eP¨ams
 
z_deÊ©eP¨ams


	)

47 
	#deÊ©ePídög
 
z_deÊ©ePídög


	)

48 
	#deÊ©ePrime
 
z_deÊ©ePrime


	)

49 
	#deÊ©eRe£t
 
z_deÊ©eRe£t


	)

50 
	#deÊ©eRe£tKìp
 
z_deÊ©eRe£tKìp


	)

51 
	#deÊ©eSëDi˘i⁄¨y
 
z_deÊ©eSëDi˘i⁄¨y


	)

52 
	#deÊ©eSëHódî
 
z_deÊ©eSëHódî


	)

53 
	#deÊ©eTu√
 
z_deÊ©eTu√


	)

54 
	#deÊ©e_c›yright
 
z_deÊ©e_c›yright


	)

55 
	#gë_¸c_èbÀ
 
z_gë_¸c_èbÀ


	)

56 #i‚de‡
Z_SOLO


57 
	#gz_îr‹
 
z_gz_îr‹


	)

58 
	#gz_ötmax
 
z_gz_ötmax


	)

59 
	#gz_°rwöîr‹
 
z_gz_°rwöîr‹


	)

60 
	#gzbuf„r
 
z_gzbuf„r


	)

61 
	#gz˛óªº
 
z_gz˛óªº


	)

62 
	#gz˛o£
 
z_gz˛o£


	)

63 
	#gz˛o£_r
 
z_gz˛o£_r


	)

64 
	#gz˛o£_w
 
z_gz˛o£_w


	)

65 
	#gzdúe˘
 
z_gzdúe˘


	)

66 
	#gzd›í
 
z_gzd›í


	)

67 
	#gzeof
 
z_gzeof


	)

68 
	#gzîr‹
 
z_gzîr‹


	)

69 
	#gzÊush
 
z_gzÊush


	)

70 
	#gzgëc
 
z_gzgëc


	)

71 
	#gzgëc_
 
z_gzgëc_


	)

72 
	#gzgës
 
z_gzgës


	)

73 
	#gzoff£t
 
z_gzoff£t


	)

74 
	#gzoff£t64
 
z_gzoff£t64


	)

75 
	#gz›í
 
z_gz›í


	)

76 
	#gz›í64
 
z_gz›í64


	)

77 #ifde‡
_WIN32


78 
	#gz›í_w
 
z_gz›í_w


	)

80 
	#gz¥ötf
 
z_gz¥ötf


	)

81 
	#gzv¥ötf
 
z_gzv¥ötf


	)

82 
	#gzputc
 
z_gzputc


	)

83 
	#gzputs
 
z_gzputs


	)

84 
	#gzªad
 
z_gzªad


	)

85 
	#gzªwöd
 
z_gzªwöd


	)

86 
	#gz£ek
 
z_gz£ek


	)

87 
	#gz£ek64
 
z_gz£ek64


	)

88 
	#gz£ç¨ams
 
z_gz£ç¨ams


	)

89 
	#gzãŒ
 
z_gzãŒ


	)

90 
	#gzãŒ64
 
z_gzãŒ64


	)

91 
	#gzungëc
 
z_gzungëc


	)

92 
	#gzwrôe
 
z_gzwrôe


	)

94 
	#öÊ©e
 
z_öÊ©e


	)

95 
	#öÊ©eBack
 
z_öÊ©eBack


	)

96 
	#öÊ©eBackEnd
 
z_öÊ©eBackEnd


	)

97 
	#öÊ©eBackInô_
 
z_öÊ©eBackInô_


	)

98 
	#öÊ©eC›y
 
z_öÊ©eC›y


	)

99 
	#öÊ©eEnd
 
z_öÊ©eEnd


	)

100 
	#öÊ©eGëHódî
 
z_öÊ©eGëHódî


	)

101 
	#öÊ©eInô2_
 
z_öÊ©eInô2_


	)

102 
	#öÊ©eInô_
 
z_öÊ©eInô_


	)

103 
	#öÊ©eM¨k
 
z_öÊ©eM¨k


	)

104 
	#öÊ©ePrime
 
z_öÊ©ePrime


	)

105 
	#öÊ©eRe£t
 
z_öÊ©eRe£t


	)

106 
	#öÊ©eRe£t2
 
z_öÊ©eRe£t2


	)

107 
	#öÊ©eSëDi˘i⁄¨y
 
z_öÊ©eSëDi˘i⁄¨y


	)

108 
	#öÊ©eGëDi˘i⁄¨y
 
z_öÊ©eGëDi˘i⁄¨y


	)

109 
	#öÊ©eSync
 
z_öÊ©eSync


	)

110 
	#öÊ©eSyncPoöt
 
z_öÊ©eSyncPoöt


	)

111 
	#öÊ©eUndîmöe
 
z_öÊ©eUndîmöe


	)

112 
	#öÊ©eRe£tKìp
 
z_öÊ©eRe£tKìp


	)

113 
	#öÊ©e_c›yright
 
z_öÊ©e_c›yright


	)

114 
	#öÊ©e_Á°
 
z_öÊ©e_Á°


	)

115 
	#öÊ©e_èbÀ
 
z_öÊ©e_èbÀ


	)

116 #i‚de‡
Z_SOLO


117 
	#uncom¥ess
 
z_uncom¥ess


	)

119 
	#zEº‹
 
z_zEº‹


	)

120 #i‚de‡
Z_SOLO


121 
	#zˇŒoc
 
z_zˇŒoc


	)

122 
	#zc‰ì
 
z_zc‰ì


	)

124 
	#zlibCompûeFœgs
 
z_zlibCompûeFœgs


	)

125 
	#zlibVîsi⁄
 
z_zlibVîsi⁄


	)

128 
	#Byã
 
z_Byã


	)

129 
	#Byãf
 
z_Byãf


	)

130 
	#Æloc_func
 
z_Æloc_func


	)

131 
	#ch¨f
 
z_ch¨f


	)

132 
	#‰ì_func
 
z_‰ì_func


	)

133 #i‚de‡
Z_SOLO


134 
	#gzFûe
 
z_gzFûe


	)

136 
	#gz_hódî
 
z_gz_hódî


	)

137 
	#gz_hódîp
 
z_gz_hódîp


	)

138 
	#ö_func
 
z_ö_func


	)

139 
	#ötf
 
z_ötf


	)

140 
	#out_func
 
z_out_func


	)

141 
	#uI¡
 
z_uI¡


	)

142 
	#uI¡f
 
z_uI¡f


	)

143 
	#uL⁄g
 
z_uL⁄g


	)

144 
	#uL⁄gf
 
z_uL⁄gf


	)

145 
	#voidp
 
z_voidp


	)

146 
	#voidpc
 
z_voidpc


	)

147 
	#voidpf
 
z_voidpf


	)

150 
	#gz_hódî_s
 
z_gz_hódî_s


	)

151 
	#öã∫Æ_°©e
 
z_öã∫Æ_°©e


	)

155 #i‡
deföed
(
__MSDOS__
Ë&& !deföed(
MSDOS
)

156 
	#MSDOS


	)

158 #i‡(
deföed
(
OS_2
Ë|| deföed(
__OS2__
)Ë&& !deföed(
OS2
)

159 
	#OS2


	)

161 #i‡
deföed
(
_WINDOWS
Ë&& !deföed(
WINDOWS
)

162 
	#WINDOWS


	)

164 #i‡
deföed
(
_WIN32
Ë|| deföed(
_WIN32_WCE
Ë|| deföed(
__WIN32__
)

165 #i‚de‡
WIN32


166 
	#WIN32


	)

169 #i‡(
deföed
(
MSDOS
Ë|| deföed(
OS2
Ë|| deföed(
WINDOWS
)Ë&& !deföed(
WIN32
)

170 #i‡!
deföed
(
__GNUC__
Ë&& !deföed(
__FLAT__
Ë&& !deföed(
__386__
)

171 #i‚de‡
SYS16BIT


172 
	#SYS16BIT


	)

181 #ifde‡
SYS16BIT


182 
	#MAXSEG_64K


	)

184 #ifde‡
MSDOS


185 
	#UNALIGNED_OK


	)

188 #ifde‡
__STDC_VERSION__


189 #i‚de‡
STDC


190 
	#STDC


	)

192 #i‡
__STDC_VERSION__
 >= 199901L

193 #i‚de‡
STDC99


194 
	#STDC99


	)

198 #i‡!
deföed
(
STDC
Ë&& (deföed(
__STDC__
Ë|| deföed(
__˝lu•lus
))

199 
	#STDC


	)

201 #i‡!
deföed
(
STDC
Ë&& (deföed(
__GNUC__
Ë|| deföed(
__BORLANDC__
))

202 
	#STDC


	)

204 #i‡!
deföed
(
STDC
Ë&& (deföed(
MSDOS
Ë|| deföed(
WINDOWS
Ë|| deföed(
WIN32
))

205 
	#STDC


	)

207 #i‡!
deföed
(
STDC
Ë&& (deföed(
OS2
Ë|| deföed(
__HOS_AIX__
))

208 
	#STDC


	)

211 #i‡
deföed
(
__OS400__
Ë&& !deföed(
STDC
)

212 
	#STDC


	)

215 #i‚de‡
STDC


217 c⁄°

	)

221 #i‡
deföed
(
ZLIB_CONST
Ë&& !deföed(
z_c⁄°
)

222 
	#z_c⁄°
 c⁄°

	)

224 
	#z_c⁄°


	)

228 #i‡
deföed
(
__MWERKS__
)||deföed(
≠∂ec
)||deföed(
THINK_C
)||deföed(
__SC__
)

229 
	#NO_DUMMY_DECL


	)

233 #i‚de‡
MAX_MEM_LEVEL


234 #ifde‡
MAXSEG_64K


235 
	#MAX_MEM_LEVEL
 8

	)

237 
	#MAX_MEM_LEVEL
 9

	)

246 #i‚de‡
MAX_WBITS


247 
	#MAX_WBITS
 15

	)

265 #i‚de‡
OF


266 #ifde‡
STDC


267 
	#OF
(
¨gs
Ë
	)
args

269 
	#OF
(
¨gs
Ë()

	)

273 #i‚de‡
Z_ARG


274 #i‡
deföed
(
STDC
Ë|| deföed(
Z_HAVE_STDARG_H
)

275 
	#Z_ARG
(
¨gs
Ë
	)
args

277 
	#Z_ARG
(
¨gs
Ë()

	)

287 #ifde‡
SYS16BIT


288 #i‡
deföed
(
M_I86SM
Ë|| deföed(
M_I86MM
)

290 
	#SMALL_MEDIUM


	)

291 #ifde‡
_MSC_VER


292 
	#FAR
 
_Ár


	)

294 
	#FAR
 
Ár


	)

297 #i‡(
deföed
(
__SMALL__
Ë|| deföed(
__MEDIUM__
))

299 
	#SMALL_MEDIUM


	)

300 #ifde‡
__BORLANDC__


301 
	#FAR
 
_Ár


	)

303 
	#FAR
 
Ár


	)

308 #i‡
deföed
(
WINDOWS
Ë|| deföed(
WIN32
)

312 #ifde‡
ZLIB_DLL


313 #i‡
deföed
(
WIN32
Ë&& (!deföed(
__BORLANDC__
) || (__BORLANDC__ >= 0x500))

314 #ifde‡
ZLIB_INTERNAL


315 
	#ZEXTERN
 
	`__de˛•ec
(
dŒexp‹t
)

	)

317 
	#ZEXTERN
 
	`__de˛•ec
(
dŒimp‹t
)

	)

325 #ifde‡
ZLIB_WINAPI


326 #ifde‡
FAR


327 #unde‡
FAR


329 
	~<wödows.h
>

332 
	#ZEXPORT
 
WINAPI


	)

333 #ifde‡
WIN32


334 
	#ZEXPORTVA
 
WINAPIV


	)

336 
	#ZEXPORTVA
 
FAR
 
CDECL


	)

341 #i‡
deföed
 (
__BEOS__
)

342 #ifde‡
ZLIB_DLL


343 #ifde‡
ZLIB_INTERNAL


344 
	#ZEXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

345 
	#ZEXPORTVA
 
	`__de˛•ec
(
dŒexp‹t
)

	)

347 
	#ZEXPORT
 
	`__de˛•ec
(
dŒimp‹t
)

	)

348 
	#ZEXPORTVA
 
	`__de˛•ec
(
dŒimp‹t
)

	)

353 #i‚de‡
ZEXTERN


354 
	#ZEXTERN
 

	)

356 #i‚de‡
ZEXPORT


357 
	#ZEXPORT


	)

359 #i‚de‡
ZEXPORTVA


360 
	#ZEXPORTVA


	)

363 #i‚de‡
FAR


364 
	#FAR


	)

367 #i‡!
deföed
(
__MACTYPES__
)

368 
	tByã
;

370 
	tuI¡
;

371 
	tuL⁄g
;

373 #ifde‡
SMALL_MEDIUM


375 
	#Byãf
 
Byã
 
FAR


	)

377 
Byã
 
	tFAR
 
	tByãf
;

379 
	tFAR
 
	tch¨f
;

380 
	tFAR
 
	tötf
;

381 
uI¡
 
	tFAR
 
	tuI¡f
;

382 
uL⁄g
 
	tFAR
 
	tuL⁄gf
;

384 #ifde‡
STDC


385 c⁄° *
	tvoidpc
;

386 
	tFAR
 *
	tvoidpf
;

387 *
	tvoidp
;

389 
Byã
 c⁄° *
	tvoidpc
;

390 
Byã
 
	tFAR
 *
	tvoidpf
;

391 
Byã
 *
	tvoidp
;

394 #i‡!
deföed
(
Z_U4
Ë&& !deföed(
Z_SOLO
Ë&& deföed(
STDC
)

395 
	~<limôs.h
>

396 #i‡(
UINT_MAX
 == 0xffffffffUL)

397 
	#Z_U4
 

	)

398 #ñi‡(
ULONG_MAX
 == 0xffffffffUL)

399 
	#Z_U4
 

	)

400 #ñi‡(
USHRT_MAX
 == 0xffffffffUL)

401 
	#Z_U4
 

	)

405 #ifde‡
Z_U4


406 
Z_U4
 
	tz_¸c_t
;

408 
	tz_¸c_t
;

412 
	#Z_HAVE_UNISTD_H


	)

416 
	#Z_HAVE_STDARG_H


	)

419 #ifde‡
STDC


420 #i‚de‡
Z_SOLO


421 
	~<sys/ty≥s.h
>

425 #i‡
deföed
(
STDC
Ë|| deföed(
Z_HAVE_STDARG_H
)

426 #i‚de‡
Z_SOLO


427 
	~<°d¨g.h
>

431 #ifde‡
_WIN32


432 #i‚de‡
Z_SOLO


433 
	~<°ddef.h
>

443 #i‡
deföed
(
_LARGEFILE64_SOURCE
) && -_LARGEFILE64_SOURCE - -1 == 1

444 #unde‡
_LARGEFILE64_SOURCE


447 #i‡
deföed
(
__WATCOMC__
Ë&& !deföed(
Z_HAVE_UNISTD_H
)

448 
	#Z_HAVE_UNISTD_H


	)

450 #i‚de‡
Z_SOLO


451 #i‡
deföed
(
Z_HAVE_UNISTD_H
Ë|| deföed(
_LARGEFILE64_SOURCE
)

452 
	~<uni°d.h
>

453 #ifde‡
VMS


454 
	~<unixio.h
>

456 #i‚de‡
z_off_t


457 
	#z_off_t
 
off_t


	)

462 #i‡
deföed
(
_LFS64_LARGEFILE
) && _LFS64_LARGEFILE-0

463 
	#Z_LFS64


	)

466 #i‡
deföed
(
_LARGEFILE64_SOURCE
Ë&& deföed(
Z_LFS64
)

467 
	#Z_LARGE64


	)

470 #i‡
deföed
(
_FILE_OFFSET_BITS
Ë&& _FILE_OFFSET_BITS-0 =64 && deföed(
Z_LFS64
)

471 
	#Z_WANT64


	)

474 #i‡!
deföed
(
SEEK_SET
Ë&& !deföed(
Z_SOLO
)

475 
	#SEEK_SET
 0

	)

476 
	#SEEK_CUR
 1

	)

477 
	#SEEK_END
 2

	)

480 #i‚de‡
z_off_t


481 
	#z_off_t
 

	)

484 #i‡!
deföed
(
_WIN32
Ë&& deföed(
Z_LARGE64
)

485 
	#z_off64_t
 
off64_t


	)

487 #i‡
deföed
(
_WIN32
Ë&& !deföed(
__GNUC__
Ë&& !deföed(
Z_SOLO
)

488 
	#z_off64_t
 
__öt64


	)

490 
	#z_off64_t
 
z_off_t


	)

495 #i‡
deföed
(
__MVS__
)

496 #¥agm®
m≠
(
deÊ©eInô_
,"DEIN")

497 #¥agm®
m≠
(
deÊ©eInô2_
,"DEIN2")

498 #¥agm®
m≠
(
deÊ©eEnd
,"DEEND")

499 #¥agm®
m≠
(
deÊ©eBound
,"DEBND")

500 #¥agm®
m≠
(
öÊ©eInô_
,"ININ")

501 #¥agm®
m≠
(
öÊ©eInô2_
,"ININ2")

502 #¥agm®
m≠
(
öÊ©eEnd
,"INEND")

503 #¥agm®
m≠
(
öÊ©eSync
,"INSY")

504 #¥agm®
m≠
(
öÊ©eSëDi˘i⁄¨y
,"INSEDI")

505 #¥agm®
m≠
(
com¥essBound
,"CMBND")

506 #¥agm®
m≠
(
öÊ©e_èbÀ
,"INTABL")

507 #¥agm®
m≠
(
öÊ©e_Á°
,"INFA")

508 #¥agm®
m≠
(
öÊ©e_c›yright
,"INCOPY")

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

23 
__off_t
 
	m__pos
;

24 
__mb°©e_t
 
	m__°©e
;

25 } 
	t_G_Âos_t
;

28 
__off64_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos64_t
;

31 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


32 
	~<gc⁄v.h
>

35 
__gc⁄v_öfo
 
	m__cd
;

38 
__gc⁄v_öfo
 
	m__cd
;

39 
__gc⁄v_°ï_d©a
 
	m__d©a
;

40 } 
	m__comböed
;

41 } 
	t_G_ic⁄v_t
;

46 
	#_G_va_li°
 
__gnuc_va_li°


	)

48 
	#_G_HAVE_MMAP
 1

	)

49 
	#_G_HAVE_MREMAP
 1

	)

51 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

54 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

56 
	#_G_BUFSIZ
 8192

	)

	@/usr/include/asm-generic/int-ll64.h

8 #i‚de‡
_ASM_GENERIC_INT_LL64_H


9 
	#_ASM_GENERIC_INT_LL64_H


	)

11 
	~<asm/bô•îl⁄g.h
>

13 #i‚de‡
__ASSEMBLY__


19 
__sig√d__
 
	t__s8
;

20 
	t__u8
;

22 
__sig√d__
 
	t__s16
;

23 
	t__u16
;

25 
__sig√d__
 
	t__s32
;

26 
	t__u32
;

28 #ifde‡
__GNUC__


29 
__exãnsi⁄__
 
__sig√d__
 
	t__s64
;

30 
__exãnsi⁄__
 
	t__u64
;

32 
__sig√d__
 
	t__s64
;

33 
	t__u64
;

	@/usr/include/asm-generic/shmbuf.h

1 #i‚de‡
__ASM_GENERIC_SHMBUF_H


2 
	#__ASM_GENERIC_SHMBUF_H


	)

4 
	~<asm/bô•îl⁄g.h
>

25 
	sshmid64_ds
 {

26 
ùc64_≥rm
 
	mshm_≥rm
;

27 
size_t
 
	mshm_£gsz
;

28 
__kî√l_time_t
 
	mshm_©ime
;

29 #i‡
__BITS_PER_LONG
 != 64

30 
	m__unu£d1
;

32 
__kî√l_time_t
 
	mshm_dtime
;

33 #i‡
__BITS_PER_LONG
 != 64

34 
	m__unu£d2
;

36 
__kî√l_time_t
 
	mshm_˘ime
;

37 #i‡
__BITS_PER_LONG
 != 64

38 
	m__unu£d3
;

40 
__kî√l_pid_t
 
	mshm_˝id
;

41 
__kî√l_pid_t
 
	mshm_Õid
;

42 
	mshm_«âch
;

43 
	m__unu£d4
;

44 
	m__unu£d5
;

47 
	sshmöfo64
 {

48 
	mshmmax
;

49 
	mshmmö
;

50 
	mshmmni
;

51 
	mshm£g
;

52 
	mshmÆl
;

53 
	m__unu£d1
;

54 
	m__unu£d2
;

55 
	m__unu£d3
;

56 
	m__unu£d4
;

	@/usr/include/asm/errno.h

1 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/asm/ioctl.h

1 
	~<asm-gíîic/io˘l.h
>

	@/usr/include/asm/ioctls.h

1 
	~<asm-gíîic/io˘ls.h
>

	@/usr/include/asm/ipcbuf.h

1 
	~<asm-gíîic/ùcbuf.h
>

	@/usr/include/asm/posix_types.h

1 #ifde‡
__i386__


2 
	~<asm/posix_ty≥s_32.h
>

3 #ñi‡
deföed
(
__ILP32__
)

4 
	~<asm/posix_ty≥s_x32.h
>

6 
	~<asm/posix_ty≥s_64.h
>

	@/usr/include/asm/socket.h

1 
	~<asm-gíîic/sockë.h
>

	@/usr/include/asm/unistd_32.h

1 #i‚de‡
_ASM_X86_UNISTD_32_H


2 
	#_ASM_X86_UNISTD_32_H
 1

	)

4 
	#__NR_ª°¨t_sysˇŒ
 0

	)

5 
	#__NR_exô
 1

	)

6 
	#__NR_f‹k
 2

	)

7 
	#__NR_ªad
 3

	)

8 
	#__NR_wrôe
 4

	)

9 
	#__NR_›í
 5

	)

10 
	#__NR_˛o£
 6

	)

11 
	#__NR_waôpid
 7

	)

12 
	#__NR_¸ót
 8

	)

13 
	#__NR_lök
 9

	)

14 
	#__NR_u∆ök
 10

	)

15 
	#__NR_execve
 11

	)

16 
	#__NR_chdú
 12

	)

17 
	#__NR_time
 13

	)

18 
	#__NR_mknod
 14

	)

19 
	#__NR_chmod
 15

	)

20 
	#__NR_lchown
 16

	)

21 
	#__NR_bªak
 17

	)

22 
	#__NR_ﬁd°©
 18

	)

23 
	#__NR_l£ek
 19

	)

24 
	#__NR_gëpid
 20

	)

25 
	#__NR_mou¡
 21

	)

26 
	#__NR_umou¡
 22

	)

27 
	#__NR_£tuid
 23

	)

28 
	#__NR_gëuid
 24

	)

29 
	#__NR_°ime
 25

	)

30 
	#__NR_±ø˚
 26

	)

31 
	#__NR_Æ¨m
 27

	)

32 
	#__NR_ﬁdf°©
 28

	)

33 
	#__NR_∑u£
 29

	)

34 
	#__NR_utime
 30

	)

35 
	#__NR_°ty
 31

	)

36 
	#__NR_gây
 32

	)

37 
	#__NR_ac˚ss
 33

	)

38 
	#__NR_ni˚
 34

	)

39 
	#__NR_·ime
 35

	)

40 
	#__NR_sync
 36

	)

41 
	#__NR_kûl
 37

	)

42 
	#__NR_ª«me
 38

	)

43 
	#__NR_mkdú
 39

	)

44 
	#__NR_rmdú
 40

	)

45 
	#__NR_dup
 41

	)

46 
	#__NR_pùe
 42

	)

47 
	#__NR_times
 43

	)

48 
	#__NR_¥of
 44

	)

49 
	#__NR_brk
 45

	)

50 
	#__NR_£tgid
 46

	)

51 
	#__NR_gëgid
 47

	)

52 
	#__NR_sig«l
 48

	)

53 
	#__NR_gëeuid
 49

	)

54 
	#__NR_gëegid
 50

	)

55 
	#__NR_ac˘
 51

	)

56 
	#__NR_umou¡2
 52

	)

57 
	#__NR_lock
 53

	)

58 
	#__NR_io˘l
 54

	)

59 
	#__NR_f˙é
 55

	)

60 
	#__NR_mpx
 56

	)

61 
	#__NR_£çgid
 57

	)

62 
	#__NR_ulimô
 58

	)

63 
	#__NR_ﬁdﬁdu«me
 59

	)

64 
	#__NR_umask
 60

	)

65 
	#__NR_chroŸ
 61

	)

66 
	#__NR_u°©
 62

	)

67 
	#__NR_dup2
 63

	)

68 
	#__NR_gëµid
 64

	)

69 
	#__NR_gëpgΩ
 65

	)

70 
	#__NR_£tsid
 66

	)

71 
	#__NR_siga˘i⁄
 67

	)

72 
	#__NR_sgëmask
 68

	)

73 
	#__NR_s£tmask
 69

	)

74 
	#__NR_£åeuid
 70

	)

75 
	#__NR_£åegid
 71

	)

76 
	#__NR_sigsu•íd
 72

	)

77 
	#__NR_sig≥ndög
 73

	)

78 
	#__NR_£tho°«me
 74

	)

79 
	#__NR_£ålimô
 75

	)

80 
	#__NR_gëæimô
 76

	)

81 
	#__NR_gërußge
 77

	)

82 
	#__NR_gëtimeofday
 78

	)

83 
	#__NR_£âimeofday
 79

	)

84 
	#__NR_gëgroups
 80

	)

85 
	#__NR_£tgroups
 81

	)

86 
	#__NR_£À˘
 82

	)

87 
	#__NR_symlök
 83

	)

88 
	#__NR_ﬁdl°©
 84

	)

89 
	#__NR_ªadlök
 85

	)

90 
	#__NR_u£lib
 86

	)

91 
	#__NR_sw≠⁄
 87

	)

92 
	#__NR_ªboŸ
 88

	)

93 
	#__NR_ªaddú
 89

	)

94 
	#__NR_mm≠
 90

	)

95 
	#__NR_munm≠
 91

	)

96 
	#__NR_åunˇã
 92

	)

97 
	#__NR_·runˇã
 93

	)

98 
	#__NR_fchmod
 94

	)

99 
	#__NR_fchown
 95

	)

100 
	#__NR_gë¥i‹ôy
 96

	)

101 
	#__NR_£çri‹ôy
 97

	)

102 
	#__NR_¥ofû
 98

	)

103 
	#__NR_°©fs
 99

	)

104 
	#__NR_f°©fs
 100

	)

105 
	#__NR_i›îm
 101

	)

106 
	#__NR_sockëˇŒ
 102

	)

107 
	#__NR_sy¶og
 103

	)

108 
	#__NR_£tôimî
 104

	)

109 
	#__NR_gëôimî
 105

	)

110 
	#__NR_°©
 106

	)

111 
	#__NR_l°©
 107

	)

112 
	#__NR_f°©
 108

	)

113 
	#__NR_ﬁdu«me
 109

	)

114 
	#__NR_i›l
 110

	)

115 
	#__NR_vh™gup
 111

	)

116 
	#__NR_idÀ
 112

	)

117 
	#__NR_vm86ﬁd
 113

	)

118 
	#__NR_waô4
 114

	)

119 
	#__NR_sw≠off
 115

	)

120 
	#__NR_sysöfo
 116

	)

121 
	#__NR_ùc
 117

	)

122 
	#__NR_fsync
 118

	)

123 
	#__NR_sigªtu∫
 119

	)

124 
	#__NR_˛⁄e
 120

	)

125 
	#__NR_£tdomaö«me
 121

	)

126 
	#__NR_u«me
 122

	)

127 
	#__NR_modify_ldt
 123

	)

128 
	#__NR_adjtimex
 124

	)

129 
	#__NR_m¥Ÿe˘
 125

	)

130 
	#__NR_sig¥ocmask
 126

	)

131 
	#__NR_¸óã_moduÀ
 127

	)

132 
	#__NR_öô_moduÀ
 128

	)

133 
	#__NR_dñëe_moduÀ
 129

	)

134 
	#__NR_gë_kî√l_syms
 130

	)

135 
	#__NR_quŸa˘l
 131

	)

136 
	#__NR_gëpgid
 132

	)

137 
	#__NR_fchdú
 133

	)

138 
	#__NR_bdÊush
 134

	)

139 
	#__NR_sysfs
 135

	)

140 
	#__NR_≥rs⁄Æôy
 136

	)

141 
	#__NR_afs_sysˇŒ
 137

	)

142 
	#__NR_£tfsuid
 138

	)

143 
	#__NR_£tfsgid
 139

	)

144 
	#__NR__Œ£ek
 140

	)

145 
	#__NR_gëdíts
 141

	)

146 
	#__NR__√w£À˘
 142

	)

147 
	#__NR_Êock
 143

	)

148 
	#__NR_msync
 144

	)

149 
	#__NR_ªadv
 145

	)

150 
	#__NR_wrôev
 146

	)

151 
	#__NR_gësid
 147

	)

152 
	#__NR_fd©async
 148

	)

153 
	#__NR__sys˘l
 149

	)

154 
	#__NR_mlock
 150

	)

155 
	#__NR_mu∆ock
 151

	)

156 
	#__NR_mlockÆl
 152

	)

157 
	#__NR_mu∆ockÆl
 153

	)

158 
	#__NR_sched_£ç¨am
 154

	)

159 
	#__NR_sched_gë∑øm
 155

	)

160 
	#__NR_sched_£tscheduÀr
 156

	)

161 
	#__NR_sched_gëscheduÀr
 157

	)

162 
	#__NR_sched_yõld
 158

	)

163 
	#__NR_sched_gë_¥i‹ôy_max
 159

	)

164 
	#__NR_sched_gë_¥i‹ôy_mö
 160

	)

165 
	#__NR_sched_º_gë_öãrvÆ
 161

	)

166 
	#__NR_«no¶ìp
 162

	)

167 
	#__NR_mªm≠
 163

	)

168 
	#__NR_£åesuid
 164

	)

169 
	#__NR_gëªsuid
 165

	)

170 
	#__NR_vm86
 166

	)

171 
	#__NR_quîy_moduÀ
 167

	)

172 
	#__NR_pﬁl
 168

	)

173 
	#__NR_nfs£rv˘l
 169

	)

174 
	#__NR_£åesgid
 170

	)

175 
	#__NR_gëªsgid
 171

	)

176 
	#__NR_¥˘l
 172

	)

177 
	#__NR_π_sigªtu∫
 173

	)

178 
	#__NR_π_siga˘i⁄
 174

	)

179 
	#__NR_π_sig¥ocmask
 175

	)

180 
	#__NR_π_sig≥ndög
 176

	)

181 
	#__NR_π_sigtimedwaô
 177

	)

182 
	#__NR_π_sigqueueöfo
 178

	)

183 
	#__NR_π_sigsu•íd
 179

	)

184 
	#__NR_¥ód64
 180

	)

185 
	#__NR_pwrôe64
 181

	)

186 
	#__NR_chown
 182

	)

187 
	#__NR_gëcwd
 183

	)

188 
	#__NR_ˇpgë
 184

	)

189 
	#__NR_ˇp£t
 185

	)

190 
	#__NR_sigÆt°ack
 186

	)

191 
	#__NR_£ndfûe
 187

	)

192 
	#__NR_gëpmsg
 188

	)

193 
	#__NR_puçmsg
 189

	)

194 
	#__NR_vf‹k
 190

	)

195 
	#__NR_ugëæimô
 191

	)

196 
	#__NR_mm≠2
 192

	)

197 
	#__NR_åunˇã64
 193

	)

198 
	#__NR_·runˇã64
 194

	)

199 
	#__NR_°©64
 195

	)

200 
	#__NR_l°©64
 196

	)

201 
	#__NR_f°©64
 197

	)

202 
	#__NR_lchown32
 198

	)

203 
	#__NR_gëuid32
 199

	)

204 
	#__NR_gëgid32
 200

	)

205 
	#__NR_gëeuid32
 201

	)

206 
	#__NR_gëegid32
 202

	)

207 
	#__NR_£åeuid32
 203

	)

208 
	#__NR_£åegid32
 204

	)

209 
	#__NR_gëgroups32
 205

	)

210 
	#__NR_£tgroups32
 206

	)

211 
	#__NR_fchown32
 207

	)

212 
	#__NR_£åesuid32
 208

	)

213 
	#__NR_gëªsuid32
 209

	)

214 
	#__NR_£åesgid32
 210

	)

215 
	#__NR_gëªsgid32
 211

	)

216 
	#__NR_chown32
 212

	)

217 
	#__NR_£tuid32
 213

	)

218 
	#__NR_£tgid32
 214

	)

219 
	#__NR_£tfsuid32
 215

	)

220 
	#__NR_£tfsgid32
 216

	)

221 
	#__NR_pivŸ_roŸ
 217

	)

222 
	#__NR_möc‹e
 218

	)

223 
	#__NR_madvi£
 219

	)

224 
	#__NR_gëdíts64
 220

	)

225 
	#__NR_f˙é64
 221

	)

226 
	#__NR_gëtid
 224

	)

227 
	#__NR_ªadahód
 225

	)

228 
	#__NR_£tx©å
 226

	)

229 
	#__NR_l£tx©å
 227

	)

230 
	#__NR_f£tx©å
 228

	)

231 
	#__NR_gëx©å
 229

	)

232 
	#__NR_lgëx©å
 230

	)

233 
	#__NR_fgëx©å
 231

	)

234 
	#__NR_li°x©å
 232

	)

235 
	#__NR_Œi°x©å
 233

	)

236 
	#__NR_Êi°x©å
 234

	)

237 
	#__NR_ªmovex©å
 235

	)

238 
	#__NR_Ãemovex©å
 236

	)

239 
	#__NR_‰emovex©å
 237

	)

240 
	#__NR_tkûl
 238

	)

241 
	#__NR_£ndfûe64
 239

	)

242 
	#__NR_fuãx
 240

	)

243 
	#__NR_sched_£èfföôy
 241

	)

244 
	#__NR_sched_gëafföôy
 242

	)

245 
	#__NR_£t_thªad_¨ó
 243

	)

246 
	#__NR_gë_thªad_¨ó
 244

	)

247 
	#__NR_io_£tup
 245

	)

248 
	#__NR_io_de°roy
 246

	)

249 
	#__NR_io_gëevíts
 247

	)

250 
	#__NR_io_submô
 248

	)

251 
	#__NR_io_ˇn˚l
 249

	)

252 
	#__NR_Ádvi£64
 250

	)

253 
	#__NR_exô_group
 252

	)

254 
	#__NR_lookup_dcookõ
 253

	)

255 
	#__NR_ïﬁl_¸óã
 254

	)

256 
	#__NR_ïﬁl_˘l
 255

	)

257 
	#__NR_ïﬁl_waô
 256

	)

258 
	#__NR_ªm≠_fûe_∑ges
 257

	)

259 
	#__NR_£t_tid_addªss
 258

	)

260 
	#__NR_timî_¸óã
 259

	)

261 
	#__NR_timî_£âime
 260

	)

262 
	#__NR_timî_gëtime
 261

	)

263 
	#__NR_timî_gëovîrun
 262

	)

264 
	#__NR_timî_dñëe
 263

	)

265 
	#__NR_˛ock_£âime
 264

	)

266 
	#__NR_˛ock_gëtime
 265

	)

267 
	#__NR_˛ock_gëªs
 266

	)

268 
	#__NR_˛ock_«no¶ìp
 267

	)

269 
	#__NR_°©fs64
 268

	)

270 
	#__NR_f°©fs64
 269

	)

271 
	#__NR_tgkûl
 270

	)

272 
	#__NR_utimes
 271

	)

273 
	#__NR_Ádvi£64_64
 272

	)

274 
	#__NR_v£rvî
 273

	)

275 
	#__NR_mböd
 274

	)

276 
	#__NR_gë_mempﬁicy
 275

	)

277 
	#__NR_£t_mempﬁicy
 276

	)

278 
	#__NR_mq_›í
 277

	)

279 
	#__NR_mq_u∆ök
 278

	)

280 
	#__NR_mq_timed£nd
 279

	)

281 
	#__NR_mq_timedª˚ive
 280

	)

282 
	#__NR_mq_nŸify
 281

	)

283 
	#__NR_mq_gë£èâr
 282

	)

284 
	#__NR_kexec_lﬂd
 283

	)

285 
	#__NR_waôid
 284

	)

286 
	#__NR_add_key
 286

	)

287 
	#__NR_ªque°_key
 287

	)

288 
	#__NR_key˘l
 288

	)

289 
	#__NR_i›rio_£t
 289

	)

290 
	#__NR_i›rio_gë
 290

	)

291 
	#__NR_öŸify_öô
 291

	)

292 
	#__NR_öŸify_add_w©ch
 292

	)

293 
	#__NR_öŸify_rm_w©ch
 293

	)

294 
	#__NR_migøã_∑ges
 294

	)

295 
	#__NR_›í©
 295

	)

296 
	#__NR_mkdú©
 296

	)

297 
	#__NR_mknod©
 297

	)

298 
	#__NR_fchow«t
 298

	)

299 
	#__NR_futimeßt
 299

	)

300 
	#__NR_f°©©64
 300

	)

301 
	#__NR_u∆ök©
 301

	)

302 
	#__NR_ª«mót
 302

	)

303 
	#__NR_lök©
 303

	)

304 
	#__NR_symlök©
 304

	)

305 
	#__NR_ªadlök©
 305

	)

306 
	#__NR_fchmod©
 306

	)

307 
	#__NR_Ác˚sßt
 307

	)

308 
	#__NR_p£À˘6
 308

	)

309 
	#__NR_µﬁl
 309

	)

310 
	#__NR_unsh¨e
 310

	)

311 
	#__NR_£t_robu°_li°
 311

	)

312 
	#__NR_gë_robu°_li°
 312

	)

313 
	#__NR_•li˚
 313

	)

314 
	#__NR_sync_fûe_ønge
 314

	)

315 
	#__NR_ãe
 315

	)

316 
	#__NR_vm•li˚
 316

	)

317 
	#__NR_move_∑ges
 317

	)

318 
	#__NR_gë˝u
 318

	)

319 
	#__NR_ïﬁl_pwaô
 319

	)

320 
	#__NR_utimíßt
 320

	)

321 
	#__NR_sig«lfd
 321

	)

322 
	#__NR_timîfd_¸óã
 322

	)

323 
	#__NR_evítfd
 323

	)

324 
	#__NR_ÁŒoˇã
 324

	)

325 
	#__NR_timîfd_£âime
 325

	)

326 
	#__NR_timîfd_gëtime
 326

	)

327 
	#__NR_sig«lfd4
 327

	)

328 
	#__NR_evítfd2
 328

	)

329 
	#__NR_ïﬁl_¸óã1
 329

	)

330 
	#__NR_dup3
 330

	)

331 
	#__NR_pùe2
 331

	)

332 
	#__NR_öŸify_öô1
 332

	)

333 
	#__NR_¥ódv
 333

	)

334 
	#__NR_pwrôev
 334

	)

335 
	#__NR_π_tgsigqueueöfo
 335

	)

336 
	#__NR_≥rf_evít_›í
 336

	)

337 
	#__NR_ªcvmmsg
 337

	)

338 
	#__NR_ÁnŸify_öô
 338

	)

339 
	#__NR_ÁnŸify_m¨k
 339

	)

340 
	#__NR_¥limô64
 340

	)

341 
	#__NR_«me_to_h™dÀ_©
 341

	)

342 
	#__NR_›í_by_h™dÀ_©
 342

	)

343 
	#__NR_˛ock_adjtime
 343

	)

344 
	#__NR_syncfs
 344

	)

345 
	#__NR_£ndmmsg
 345

	)

346 
	#__NR_£äs
 346

	)

347 
	#__NR_¥o˚ss_vm_ªadv
 347

	)

348 
	#__NR_¥o˚ss_vm_wrôev
 348

	)

349 
	#__NR_kcmp
 349

	)

350 
	#__NR_föô_moduÀ
 350

	)

	@/usr/include/asm/unistd_64.h

1 #i‚de‡
_ASM_X86_UNISTD_64_H


2 
	#_ASM_X86_UNISTD_64_H
 1

	)

4 
	#__NR_ªad
 0

	)

5 
	#__NR_wrôe
 1

	)

6 
	#__NR_›í
 2

	)

7 
	#__NR_˛o£
 3

	)

8 
	#__NR_°©
 4

	)

9 
	#__NR_f°©
 5

	)

10 
	#__NR_l°©
 6

	)

11 
	#__NR_pﬁl
 7

	)

12 
	#__NR_l£ek
 8

	)

13 
	#__NR_mm≠
 9

	)

14 
	#__NR_m¥Ÿe˘
 10

	)

15 
	#__NR_munm≠
 11

	)

16 
	#__NR_brk
 12

	)

17 
	#__NR_π_siga˘i⁄
 13

	)

18 
	#__NR_π_sig¥ocmask
 14

	)

19 
	#__NR_π_sigªtu∫
 15

	)

20 
	#__NR_io˘l
 16

	)

21 
	#__NR_¥ód64
 17

	)

22 
	#__NR_pwrôe64
 18

	)

23 
	#__NR_ªadv
 19

	)

24 
	#__NR_wrôev
 20

	)

25 
	#__NR_ac˚ss
 21

	)

26 
	#__NR_pùe
 22

	)

27 
	#__NR_£À˘
 23

	)

28 
	#__NR_sched_yõld
 24

	)

29 
	#__NR_mªm≠
 25

	)

30 
	#__NR_msync
 26

	)

31 
	#__NR_möc‹e
 27

	)

32 
	#__NR_madvi£
 28

	)

33 
	#__NR_shmgë
 29

	)

34 
	#__NR_shm©
 30

	)

35 
	#__NR_shm˘l
 31

	)

36 
	#__NR_dup
 32

	)

37 
	#__NR_dup2
 33

	)

38 
	#__NR_∑u£
 34

	)

39 
	#__NR_«no¶ìp
 35

	)

40 
	#__NR_gëôimî
 36

	)

41 
	#__NR_Æ¨m
 37

	)

42 
	#__NR_£tôimî
 38

	)

43 
	#__NR_gëpid
 39

	)

44 
	#__NR_£ndfûe
 40

	)

45 
	#__NR_sockë
 41

	)

46 
	#__NR_c⁄√˘
 42

	)

47 
	#__NR_ac˚±
 43

	)

48 
	#__NR_£ndto
 44

	)

49 
	#__NR_ªcv‰om
 45

	)

50 
	#__NR_£ndmsg
 46

	)

51 
	#__NR_ªcvmsg
 47

	)

52 
	#__NR_shutdown
 48

	)

53 
	#__NR_böd
 49

	)

54 
	#__NR_li°í
 50

	)

55 
	#__NR_gësock«me
 51

	)

56 
	#__NR_gë≥î«me
 52

	)

57 
	#__NR_sockë∑ú
 53

	)

58 
	#__NR_£tsock›t
 54

	)

59 
	#__NR_gësock›t
 55

	)

60 
	#__NR_˛⁄e
 56

	)

61 
	#__NR_f‹k
 57

	)

62 
	#__NR_vf‹k
 58

	)

63 
	#__NR_execve
 59

	)

64 
	#__NR_exô
 60

	)

65 
	#__NR_waô4
 61

	)

66 
	#__NR_kûl
 62

	)

67 
	#__NR_u«me
 63

	)

68 
	#__NR_£mgë
 64

	)

69 
	#__NR_£m›
 65

	)

70 
	#__NR_£m˘l
 66

	)

71 
	#__NR_shmdt
 67

	)

72 
	#__NR_msggë
 68

	)

73 
	#__NR_msg¢d
 69

	)

74 
	#__NR_msgrcv
 70

	)

75 
	#__NR_msg˘l
 71

	)

76 
	#__NR_f˙é
 72

	)

77 
	#__NR_Êock
 73

	)

78 
	#__NR_fsync
 74

	)

79 
	#__NR_fd©async
 75

	)

80 
	#__NR_åunˇã
 76

	)

81 
	#__NR_·runˇã
 77

	)

82 
	#__NR_gëdíts
 78

	)

83 
	#__NR_gëcwd
 79

	)

84 
	#__NR_chdú
 80

	)

85 
	#__NR_fchdú
 81

	)

86 
	#__NR_ª«me
 82

	)

87 
	#__NR_mkdú
 83

	)

88 
	#__NR_rmdú
 84

	)

89 
	#__NR_¸ót
 85

	)

90 
	#__NR_lök
 86

	)

91 
	#__NR_u∆ök
 87

	)

92 
	#__NR_symlök
 88

	)

93 
	#__NR_ªadlök
 89

	)

94 
	#__NR_chmod
 90

	)

95 
	#__NR_fchmod
 91

	)

96 
	#__NR_chown
 92

	)

97 
	#__NR_fchown
 93

	)

98 
	#__NR_lchown
 94

	)

99 
	#__NR_umask
 95

	)

100 
	#__NR_gëtimeofday
 96

	)

101 
	#__NR_gëæimô
 97

	)

102 
	#__NR_gërußge
 98

	)

103 
	#__NR_sysöfo
 99

	)

104 
	#__NR_times
 100

	)

105 
	#__NR_±ø˚
 101

	)

106 
	#__NR_gëuid
 102

	)

107 
	#__NR_sy¶og
 103

	)

108 
	#__NR_gëgid
 104

	)

109 
	#__NR_£tuid
 105

	)

110 
	#__NR_£tgid
 106

	)

111 
	#__NR_gëeuid
 107

	)

112 
	#__NR_gëegid
 108

	)

113 
	#__NR_£çgid
 109

	)

114 
	#__NR_gëµid
 110

	)

115 
	#__NR_gëpgΩ
 111

	)

116 
	#__NR_£tsid
 112

	)

117 
	#__NR_£åeuid
 113

	)

118 
	#__NR_£åegid
 114

	)

119 
	#__NR_gëgroups
 115

	)

120 
	#__NR_£tgroups
 116

	)

121 
	#__NR_£åesuid
 117

	)

122 
	#__NR_gëªsuid
 118

	)

123 
	#__NR_£åesgid
 119

	)

124 
	#__NR_gëªsgid
 120

	)

125 
	#__NR_gëpgid
 121

	)

126 
	#__NR_£tfsuid
 122

	)

127 
	#__NR_£tfsgid
 123

	)

128 
	#__NR_gësid
 124

	)

129 
	#__NR_ˇpgë
 125

	)

130 
	#__NR_ˇp£t
 126

	)

131 
	#__NR_π_sig≥ndög
 127

	)

132 
	#__NR_π_sigtimedwaô
 128

	)

133 
	#__NR_π_sigqueueöfo
 129

	)

134 
	#__NR_π_sigsu•íd
 130

	)

135 
	#__NR_sigÆt°ack
 131

	)

136 
	#__NR_utime
 132

	)

137 
	#__NR_mknod
 133

	)

138 
	#__NR_u£lib
 134

	)

139 
	#__NR_≥rs⁄Æôy
 135

	)

140 
	#__NR_u°©
 136

	)

141 
	#__NR_°©fs
 137

	)

142 
	#__NR_f°©fs
 138

	)

143 
	#__NR_sysfs
 139

	)

144 
	#__NR_gë¥i‹ôy
 140

	)

145 
	#__NR_£çri‹ôy
 141

	)

146 
	#__NR_sched_£ç¨am
 142

	)

147 
	#__NR_sched_gë∑øm
 143

	)

148 
	#__NR_sched_£tscheduÀr
 144

	)

149 
	#__NR_sched_gëscheduÀr
 145

	)

150 
	#__NR_sched_gë_¥i‹ôy_max
 146

	)

151 
	#__NR_sched_gë_¥i‹ôy_mö
 147

	)

152 
	#__NR_sched_º_gë_öãrvÆ
 148

	)

153 
	#__NR_mlock
 149

	)

154 
	#__NR_mu∆ock
 150

	)

155 
	#__NR_mlockÆl
 151

	)

156 
	#__NR_mu∆ockÆl
 152

	)

157 
	#__NR_vh™gup
 153

	)

158 
	#__NR_modify_ldt
 154

	)

159 
	#__NR_pivŸ_roŸ
 155

	)

160 
	#__NR__sys˘l
 156

	)

161 
	#__NR_¥˘l
 157

	)

162 
	#__NR_¨ch_¥˘l
 158

	)

163 
	#__NR_adjtimex
 159

	)

164 
	#__NR_£ålimô
 160

	)

165 
	#__NR_chroŸ
 161

	)

166 
	#__NR_sync
 162

	)

167 
	#__NR_ac˘
 163

	)

168 
	#__NR_£âimeofday
 164

	)

169 
	#__NR_mou¡
 165

	)

170 
	#__NR_umou¡2
 166

	)

171 
	#__NR_sw≠⁄
 167

	)

172 
	#__NR_sw≠off
 168

	)

173 
	#__NR_ªboŸ
 169

	)

174 
	#__NR_£tho°«me
 170

	)

175 
	#__NR_£tdomaö«me
 171

	)

176 
	#__NR_i›l
 172

	)

177 
	#__NR_i›îm
 173

	)

178 
	#__NR_¸óã_moduÀ
 174

	)

179 
	#__NR_öô_moduÀ
 175

	)

180 
	#__NR_dñëe_moduÀ
 176

	)

181 
	#__NR_gë_kî√l_syms
 177

	)

182 
	#__NR_quîy_moduÀ
 178

	)

183 
	#__NR_quŸa˘l
 179

	)

184 
	#__NR_nfs£rv˘l
 180

	)

185 
	#__NR_gëpmsg
 181

	)

186 
	#__NR_puçmsg
 182

	)

187 
	#__NR_afs_sysˇŒ
 183

	)

188 
	#__NR_tuxˇŒ
 184

	)

189 
	#__NR_£curôy
 185

	)

190 
	#__NR_gëtid
 186

	)

191 
	#__NR_ªadahód
 187

	)

192 
	#__NR_£tx©å
 188

	)

193 
	#__NR_l£tx©å
 189

	)

194 
	#__NR_f£tx©å
 190

	)

195 
	#__NR_gëx©å
 191

	)

196 
	#__NR_lgëx©å
 192

	)

197 
	#__NR_fgëx©å
 193

	)

198 
	#__NR_li°x©å
 194

	)

199 
	#__NR_Œi°x©å
 195

	)

200 
	#__NR_Êi°x©å
 196

	)

201 
	#__NR_ªmovex©å
 197

	)

202 
	#__NR_Ãemovex©å
 198

	)

203 
	#__NR_‰emovex©å
 199

	)

204 
	#__NR_tkûl
 200

	)

205 
	#__NR_time
 201

	)

206 
	#__NR_fuãx
 202

	)

207 
	#__NR_sched_£èfföôy
 203

	)

208 
	#__NR_sched_gëafföôy
 204

	)

209 
	#__NR_£t_thªad_¨ó
 205

	)

210 
	#__NR_io_£tup
 206

	)

211 
	#__NR_io_de°roy
 207

	)

212 
	#__NR_io_gëevíts
 208

	)

213 
	#__NR_io_submô
 209

	)

214 
	#__NR_io_ˇn˚l
 210

	)

215 
	#__NR_gë_thªad_¨ó
 211

	)

216 
	#__NR_lookup_dcookõ
 212

	)

217 
	#__NR_ïﬁl_¸óã
 213

	)

218 
	#__NR_ïﬁl_˘l_ﬁd
 214

	)

219 
	#__NR_ïﬁl_waô_ﬁd
 215

	)

220 
	#__NR_ªm≠_fûe_∑ges
 216

	)

221 
	#__NR_gëdíts64
 217

	)

222 
	#__NR_£t_tid_addªss
 218

	)

223 
	#__NR_ª°¨t_sysˇŒ
 219

	)

224 
	#__NR_£mtimed›
 220

	)

225 
	#__NR_Ádvi£64
 221

	)

226 
	#__NR_timî_¸óã
 222

	)

227 
	#__NR_timî_£âime
 223

	)

228 
	#__NR_timî_gëtime
 224

	)

229 
	#__NR_timî_gëovîrun
 225

	)

230 
	#__NR_timî_dñëe
 226

	)

231 
	#__NR_˛ock_£âime
 227

	)

232 
	#__NR_˛ock_gëtime
 228

	)

233 
	#__NR_˛ock_gëªs
 229

	)

234 
	#__NR_˛ock_«no¶ìp
 230

	)

235 
	#__NR_exô_group
 231

	)

236 
	#__NR_ïﬁl_waô
 232

	)

237 
	#__NR_ïﬁl_˘l
 233

	)

238 
	#__NR_tgkûl
 234

	)

239 
	#__NR_utimes
 235

	)

240 
	#__NR_v£rvî
 236

	)

241 
	#__NR_mböd
 237

	)

242 
	#__NR_£t_mempﬁicy
 238

	)

243 
	#__NR_gë_mempﬁicy
 239

	)

244 
	#__NR_mq_›í
 240

	)

245 
	#__NR_mq_u∆ök
 241

	)

246 
	#__NR_mq_timed£nd
 242

	)

247 
	#__NR_mq_timedª˚ive
 243

	)

248 
	#__NR_mq_nŸify
 244

	)

249 
	#__NR_mq_gë£èâr
 245

	)

250 
	#__NR_kexec_lﬂd
 246

	)

251 
	#__NR_waôid
 247

	)

252 
	#__NR_add_key
 248

	)

253 
	#__NR_ªque°_key
 249

	)

254 
	#__NR_key˘l
 250

	)

255 
	#__NR_i›rio_£t
 251

	)

256 
	#__NR_i›rio_gë
 252

	)

257 
	#__NR_öŸify_öô
 253

	)

258 
	#__NR_öŸify_add_w©ch
 254

	)

259 
	#__NR_öŸify_rm_w©ch
 255

	)

260 
	#__NR_migøã_∑ges
 256

	)

261 
	#__NR_›í©
 257

	)

262 
	#__NR_mkdú©
 258

	)

263 
	#__NR_mknod©
 259

	)

264 
	#__NR_fchow«t
 260

	)

265 
	#__NR_futimeßt
 261

	)

266 
	#__NR_√wf°©©
 262

	)

267 
	#__NR_u∆ök©
 263

	)

268 
	#__NR_ª«mót
 264

	)

269 
	#__NR_lök©
 265

	)

270 
	#__NR_symlök©
 266

	)

271 
	#__NR_ªadlök©
 267

	)

272 
	#__NR_fchmod©
 268

	)

273 
	#__NR_Ác˚sßt
 269

	)

274 
	#__NR_p£À˘6
 270

	)

275 
	#__NR_µﬁl
 271

	)

276 
	#__NR_unsh¨e
 272

	)

277 
	#__NR_£t_robu°_li°
 273

	)

278 
	#__NR_gë_robu°_li°
 274

	)

279 
	#__NR_•li˚
 275

	)

280 
	#__NR_ãe
 276

	)

281 
	#__NR_sync_fûe_ønge
 277

	)

282 
	#__NR_vm•li˚
 278

	)

283 
	#__NR_move_∑ges
 279

	)

284 
	#__NR_utimíßt
 280

	)

285 
	#__NR_ïﬁl_pwaô
 281

	)

286 
	#__NR_sig«lfd
 282

	)

287 
	#__NR_timîfd_¸óã
 283

	)

288 
	#__NR_evítfd
 284

	)

289 
	#__NR_ÁŒoˇã
 285

	)

290 
	#__NR_timîfd_£âime
 286

	)

291 
	#__NR_timîfd_gëtime
 287

	)

292 
	#__NR_ac˚±4
 288

	)

293 
	#__NR_sig«lfd4
 289

	)

294 
	#__NR_evítfd2
 290

	)

295 
	#__NR_ïﬁl_¸óã1
 291

	)

296 
	#__NR_dup3
 292

	)

297 
	#__NR_pùe2
 293

	)

298 
	#__NR_öŸify_öô1
 294

	)

299 
	#__NR_¥ódv
 295

	)

300 
	#__NR_pwrôev
 296

	)

301 
	#__NR_π_tgsigqueueöfo
 297

	)

302 
	#__NR_≥rf_evít_›í
 298

	)

303 
	#__NR_ªcvmmsg
 299

	)

304 
	#__NR_ÁnŸify_öô
 300

	)

305 
	#__NR_ÁnŸify_m¨k
 301

	)

306 
	#__NR_¥limô64
 302

	)

307 
	#__NR_«me_to_h™dÀ_©
 303

	)

308 
	#__NR_›í_by_h™dÀ_©
 304

	)

309 
	#__NR_˛ock_adjtime
 305

	)

310 
	#__NR_syncfs
 306

	)

311 
	#__NR_£ndmmsg
 307

	)

312 
	#__NR_£äs
 308

	)

313 
	#__NR_gë˝u
 309

	)

314 
	#__NR_¥o˚ss_vm_ªadv
 310

	)

315 
	#__NR_¥o˚ss_vm_wrôev
 311

	)

316 
	#__NR_kcmp
 312

	)

317 
	#__NR_föô_moduÀ
 313

	)

	@/usr/include/asm/unistd_x32.h

1 #i‚de‡
_ASM_X86_UNISTD_X32_H


2 
	#_ASM_X86_UNISTD_X32_H
 1

	)

4 
	#__NR_ªad
 (
__X32_SYSCALL_BIT
 + 0)

	)

5 
	#__NR_wrôe
 (
__X32_SYSCALL_BIT
 + 1)

	)

6 
	#__NR_›í
 (
__X32_SYSCALL_BIT
 + 2)

	)

7 
	#__NR_˛o£
 (
__X32_SYSCALL_BIT
 + 3)

	)

8 
	#__NR_°©
 (
__X32_SYSCALL_BIT
 + 4)

	)

9 
	#__NR_f°©
 (
__X32_SYSCALL_BIT
 + 5)

	)

10 
	#__NR_l°©
 (
__X32_SYSCALL_BIT
 + 6)

	)

11 
	#__NR_pﬁl
 (
__X32_SYSCALL_BIT
 + 7)

	)

12 
	#__NR_l£ek
 (
__X32_SYSCALL_BIT
 + 8)

	)

13 
	#__NR_mm≠
 (
__X32_SYSCALL_BIT
 + 9)

	)

14 
	#__NR_m¥Ÿe˘
 (
__X32_SYSCALL_BIT
 + 10)

	)

15 
	#__NR_munm≠
 (
__X32_SYSCALL_BIT
 + 11)

	)

16 
	#__NR_brk
 (
__X32_SYSCALL_BIT
 + 12)

	)

17 
	#__NR_π_sig¥ocmask
 (
__X32_SYSCALL_BIT
 + 14)

	)

18 
	#__NR_¥ód64
 (
__X32_SYSCALL_BIT
 + 17)

	)

19 
	#__NR_pwrôe64
 (
__X32_SYSCALL_BIT
 + 18)

	)

20 
	#__NR_ac˚ss
 (
__X32_SYSCALL_BIT
 + 21)

	)

21 
	#__NR_pùe
 (
__X32_SYSCALL_BIT
 + 22)

	)

22 
	#__NR_£À˘
 (
__X32_SYSCALL_BIT
 + 23)

	)

23 
	#__NR_sched_yõld
 (
__X32_SYSCALL_BIT
 + 24)

	)

24 
	#__NR_mªm≠
 (
__X32_SYSCALL_BIT
 + 25)

	)

25 
	#__NR_msync
 (
__X32_SYSCALL_BIT
 + 26)

	)

26 
	#__NR_möc‹e
 (
__X32_SYSCALL_BIT
 + 27)

	)

27 
	#__NR_madvi£
 (
__X32_SYSCALL_BIT
 + 28)

	)

28 
	#__NR_shmgë
 (
__X32_SYSCALL_BIT
 + 29)

	)

29 
	#__NR_shm©
 (
__X32_SYSCALL_BIT
 + 30)

	)

30 
	#__NR_shm˘l
 (
__X32_SYSCALL_BIT
 + 31)

	)

31 
	#__NR_dup
 (
__X32_SYSCALL_BIT
 + 32)

	)

32 
	#__NR_dup2
 (
__X32_SYSCALL_BIT
 + 33)

	)

33 
	#__NR_∑u£
 (
__X32_SYSCALL_BIT
 + 34)

	)

34 
	#__NR_«no¶ìp
 (
__X32_SYSCALL_BIT
 + 35)

	)

35 
	#__NR_gëôimî
 (
__X32_SYSCALL_BIT
 + 36)

	)

36 
	#__NR_Æ¨m
 (
__X32_SYSCALL_BIT
 + 37)

	)

37 
	#__NR_£tôimî
 (
__X32_SYSCALL_BIT
 + 38)

	)

38 
	#__NR_gëpid
 (
__X32_SYSCALL_BIT
 + 39)

	)

39 
	#__NR_£ndfûe
 (
__X32_SYSCALL_BIT
 + 40)

	)

40 
	#__NR_sockë
 (
__X32_SYSCALL_BIT
 + 41)

	)

41 
	#__NR_c⁄√˘
 (
__X32_SYSCALL_BIT
 + 42)

	)

42 
	#__NR_ac˚±
 (
__X32_SYSCALL_BIT
 + 43)

	)

43 
	#__NR_£ndto
 (
__X32_SYSCALL_BIT
 + 44)

	)

44 
	#__NR_shutdown
 (
__X32_SYSCALL_BIT
 + 48)

	)

45 
	#__NR_böd
 (
__X32_SYSCALL_BIT
 + 49)

	)

46 
	#__NR_li°í
 (
__X32_SYSCALL_BIT
 + 50)

	)

47 
	#__NR_gësock«me
 (
__X32_SYSCALL_BIT
 + 51)

	)

48 
	#__NR_gë≥î«me
 (
__X32_SYSCALL_BIT
 + 52)

	)

49 
	#__NR_sockë∑ú
 (
__X32_SYSCALL_BIT
 + 53)

	)

50 
	#__NR_˛⁄e
 (
__X32_SYSCALL_BIT
 + 56)

	)

51 
	#__NR_f‹k
 (
__X32_SYSCALL_BIT
 + 57)

	)

52 
	#__NR_vf‹k
 (
__X32_SYSCALL_BIT
 + 58)

	)

53 
	#__NR_exô
 (
__X32_SYSCALL_BIT
 + 60)

	)

54 
	#__NR_waô4
 (
__X32_SYSCALL_BIT
 + 61)

	)

55 
	#__NR_kûl
 (
__X32_SYSCALL_BIT
 + 62)

	)

56 
	#__NR_u«me
 (
__X32_SYSCALL_BIT
 + 63)

	)

57 
	#__NR_£mgë
 (
__X32_SYSCALL_BIT
 + 64)

	)

58 
	#__NR_£m›
 (
__X32_SYSCALL_BIT
 + 65)

	)

59 
	#__NR_£m˘l
 (
__X32_SYSCALL_BIT
 + 66)

	)

60 
	#__NR_shmdt
 (
__X32_SYSCALL_BIT
 + 67)

	)

61 
	#__NR_msggë
 (
__X32_SYSCALL_BIT
 + 68)

	)

62 
	#__NR_msg¢d
 (
__X32_SYSCALL_BIT
 + 69)

	)

63 
	#__NR_msgrcv
 (
__X32_SYSCALL_BIT
 + 70)

	)

64 
	#__NR_msg˘l
 (
__X32_SYSCALL_BIT
 + 71)

	)

65 
	#__NR_f˙é
 (
__X32_SYSCALL_BIT
 + 72)

	)

66 
	#__NR_Êock
 (
__X32_SYSCALL_BIT
 + 73)

	)

67 
	#__NR_fsync
 (
__X32_SYSCALL_BIT
 + 74)

	)

68 
	#__NR_fd©async
 (
__X32_SYSCALL_BIT
 + 75)

	)

69 
	#__NR_åunˇã
 (
__X32_SYSCALL_BIT
 + 76)

	)

70 
	#__NR_·runˇã
 (
__X32_SYSCALL_BIT
 + 77)

	)

71 
	#__NR_gëdíts
 (
__X32_SYSCALL_BIT
 + 78)

	)

72 
	#__NR_gëcwd
 (
__X32_SYSCALL_BIT
 + 79)

	)

73 
	#__NR_chdú
 (
__X32_SYSCALL_BIT
 + 80)

	)

74 
	#__NR_fchdú
 (
__X32_SYSCALL_BIT
 + 81)

	)

75 
	#__NR_ª«me
 (
__X32_SYSCALL_BIT
 + 82)

	)

76 
	#__NR_mkdú
 (
__X32_SYSCALL_BIT
 + 83)

	)

77 
	#__NR_rmdú
 (
__X32_SYSCALL_BIT
 + 84)

	)

78 
	#__NR_¸ót
 (
__X32_SYSCALL_BIT
 + 85)

	)

79 
	#__NR_lök
 (
__X32_SYSCALL_BIT
 + 86)

	)

80 
	#__NR_u∆ök
 (
__X32_SYSCALL_BIT
 + 87)

	)

81 
	#__NR_symlök
 (
__X32_SYSCALL_BIT
 + 88)

	)

82 
	#__NR_ªadlök
 (
__X32_SYSCALL_BIT
 + 89)

	)

83 
	#__NR_chmod
 (
__X32_SYSCALL_BIT
 + 90)

	)

84 
	#__NR_fchmod
 (
__X32_SYSCALL_BIT
 + 91)

	)

85 
	#__NR_chown
 (
__X32_SYSCALL_BIT
 + 92)

	)

86 
	#__NR_fchown
 (
__X32_SYSCALL_BIT
 + 93)

	)

87 
	#__NR_lchown
 (
__X32_SYSCALL_BIT
 + 94)

	)

88 
	#__NR_umask
 (
__X32_SYSCALL_BIT
 + 95)

	)

89 
	#__NR_gëtimeofday
 (
__X32_SYSCALL_BIT
 + 96)

	)

90 
	#__NR_gëæimô
 (
__X32_SYSCALL_BIT
 + 97)

	)

91 
	#__NR_gërußge
 (
__X32_SYSCALL_BIT
 + 98)

	)

92 
	#__NR_sysöfo
 (
__X32_SYSCALL_BIT
 + 99)

	)

93 
	#__NR_times
 (
__X32_SYSCALL_BIT
 + 100)

	)

94 
	#__NR_gëuid
 (
__X32_SYSCALL_BIT
 + 102)

	)

95 
	#__NR_sy¶og
 (
__X32_SYSCALL_BIT
 + 103)

	)

96 
	#__NR_gëgid
 (
__X32_SYSCALL_BIT
 + 104)

	)

97 
	#__NR_£tuid
 (
__X32_SYSCALL_BIT
 + 105)

	)

98 
	#__NR_£tgid
 (
__X32_SYSCALL_BIT
 + 106)

	)

99 
	#__NR_gëeuid
 (
__X32_SYSCALL_BIT
 + 107)

	)

100 
	#__NR_gëegid
 (
__X32_SYSCALL_BIT
 + 108)

	)

101 
	#__NR_£çgid
 (
__X32_SYSCALL_BIT
 + 109)

	)

102 
	#__NR_gëµid
 (
__X32_SYSCALL_BIT
 + 110)

	)

103 
	#__NR_gëpgΩ
 (
__X32_SYSCALL_BIT
 + 111)

	)

104 
	#__NR_£tsid
 (
__X32_SYSCALL_BIT
 + 112)

	)

105 
	#__NR_£åeuid
 (
__X32_SYSCALL_BIT
 + 113)

	)

106 
	#__NR_£åegid
 (
__X32_SYSCALL_BIT
 + 114)

	)

107 
	#__NR_gëgroups
 (
__X32_SYSCALL_BIT
 + 115)

	)

108 
	#__NR_£tgroups
 (
__X32_SYSCALL_BIT
 + 116)

	)

109 
	#__NR_£åesuid
 (
__X32_SYSCALL_BIT
 + 117)

	)

110 
	#__NR_gëªsuid
 (
__X32_SYSCALL_BIT
 + 118)

	)

111 
	#__NR_£åesgid
 (
__X32_SYSCALL_BIT
 + 119)

	)

112 
	#__NR_gëªsgid
 (
__X32_SYSCALL_BIT
 + 120)

	)

113 
	#__NR_gëpgid
 (
__X32_SYSCALL_BIT
 + 121)

	)

114 
	#__NR_£tfsuid
 (
__X32_SYSCALL_BIT
 + 122)

	)

115 
	#__NR_£tfsgid
 (
__X32_SYSCALL_BIT
 + 123)

	)

116 
	#__NR_gësid
 (
__X32_SYSCALL_BIT
 + 124)

	)

117 
	#__NR_ˇpgë
 (
__X32_SYSCALL_BIT
 + 125)

	)

118 
	#__NR_ˇp£t
 (
__X32_SYSCALL_BIT
 + 126)

	)

119 
	#__NR_π_sigsu•íd
 (
__X32_SYSCALL_BIT
 + 130)

	)

120 
	#__NR_utime
 (
__X32_SYSCALL_BIT
 + 132)

	)

121 
	#__NR_mknod
 (
__X32_SYSCALL_BIT
 + 133)

	)

122 
	#__NR_≥rs⁄Æôy
 (
__X32_SYSCALL_BIT
 + 135)

	)

123 
	#__NR_u°©
 (
__X32_SYSCALL_BIT
 + 136)

	)

124 
	#__NR_°©fs
 (
__X32_SYSCALL_BIT
 + 137)

	)

125 
	#__NR_f°©fs
 (
__X32_SYSCALL_BIT
 + 138)

	)

126 
	#__NR_sysfs
 (
__X32_SYSCALL_BIT
 + 139)

	)

127 
	#__NR_gë¥i‹ôy
 (
__X32_SYSCALL_BIT
 + 140)

	)

128 
	#__NR_£çri‹ôy
 (
__X32_SYSCALL_BIT
 + 141)

	)

129 
	#__NR_sched_£ç¨am
 (
__X32_SYSCALL_BIT
 + 142)

	)

130 
	#__NR_sched_gë∑øm
 (
__X32_SYSCALL_BIT
 + 143)

	)

131 
	#__NR_sched_£tscheduÀr
 (
__X32_SYSCALL_BIT
 + 144)

	)

132 
	#__NR_sched_gëscheduÀr
 (
__X32_SYSCALL_BIT
 + 145)

	)

133 
	#__NR_sched_gë_¥i‹ôy_max
 (
__X32_SYSCALL_BIT
 + 146)

	)

134 
	#__NR_sched_gë_¥i‹ôy_mö
 (
__X32_SYSCALL_BIT
 + 147)

	)

135 
	#__NR_sched_º_gë_öãrvÆ
 (
__X32_SYSCALL_BIT
 + 148)

	)

136 
	#__NR_mlock
 (
__X32_SYSCALL_BIT
 + 149)

	)

137 
	#__NR_mu∆ock
 (
__X32_SYSCALL_BIT
 + 150)

	)

138 
	#__NR_mlockÆl
 (
__X32_SYSCALL_BIT
 + 151)

	)

139 
	#__NR_mu∆ockÆl
 (
__X32_SYSCALL_BIT
 + 152)

	)

140 
	#__NR_vh™gup
 (
__X32_SYSCALL_BIT
 + 153)

	)

141 
	#__NR_modify_ldt
 (
__X32_SYSCALL_BIT
 + 154)

	)

142 
	#__NR_pivŸ_roŸ
 (
__X32_SYSCALL_BIT
 + 155)

	)

143 
	#__NR_¥˘l
 (
__X32_SYSCALL_BIT
 + 157)

	)

144 
	#__NR_¨ch_¥˘l
 (
__X32_SYSCALL_BIT
 + 158)

	)

145 
	#__NR_adjtimex
 (
__X32_SYSCALL_BIT
 + 159)

	)

146 
	#__NR_£ålimô
 (
__X32_SYSCALL_BIT
 + 160)

	)

147 
	#__NR_chroŸ
 (
__X32_SYSCALL_BIT
 + 161)

	)

148 
	#__NR_sync
 (
__X32_SYSCALL_BIT
 + 162)

	)

149 
	#__NR_ac˘
 (
__X32_SYSCALL_BIT
 + 163)

	)

150 
	#__NR_£âimeofday
 (
__X32_SYSCALL_BIT
 + 164)

	)

151 
	#__NR_mou¡
 (
__X32_SYSCALL_BIT
 + 165)

	)

152 
	#__NR_umou¡2
 (
__X32_SYSCALL_BIT
 + 166)

	)

153 
	#__NR_sw≠⁄
 (
__X32_SYSCALL_BIT
 + 167)

	)

154 
	#__NR_sw≠off
 (
__X32_SYSCALL_BIT
 + 168)

	)

155 
	#__NR_ªboŸ
 (
__X32_SYSCALL_BIT
 + 169)

	)

156 
	#__NR_£tho°«me
 (
__X32_SYSCALL_BIT
 + 170)

	)

157 
	#__NR_£tdomaö«me
 (
__X32_SYSCALL_BIT
 + 171)

	)

158 
	#__NR_i›l
 (
__X32_SYSCALL_BIT
 + 172)

	)

159 
	#__NR_i›îm
 (
__X32_SYSCALL_BIT
 + 173)

	)

160 
	#__NR_öô_moduÀ
 (
__X32_SYSCALL_BIT
 + 175)

	)

161 
	#__NR_dñëe_moduÀ
 (
__X32_SYSCALL_BIT
 + 176)

	)

162 
	#__NR_quŸa˘l
 (
__X32_SYSCALL_BIT
 + 179)

	)

163 
	#__NR_gëpmsg
 (
__X32_SYSCALL_BIT
 + 181)

	)

164 
	#__NR_puçmsg
 (
__X32_SYSCALL_BIT
 + 182)

	)

165 
	#__NR_afs_sysˇŒ
 (
__X32_SYSCALL_BIT
 + 183)

	)

166 
	#__NR_tuxˇŒ
 (
__X32_SYSCALL_BIT
 + 184)

	)

167 
	#__NR_£curôy
 (
__X32_SYSCALL_BIT
 + 185)

	)

168 
	#__NR_gëtid
 (
__X32_SYSCALL_BIT
 + 186)

	)

169 
	#__NR_ªadahód
 (
__X32_SYSCALL_BIT
 + 187)

	)

170 
	#__NR_£tx©å
 (
__X32_SYSCALL_BIT
 + 188)

	)

171 
	#__NR_l£tx©å
 (
__X32_SYSCALL_BIT
 + 189)

	)

172 
	#__NR_f£tx©å
 (
__X32_SYSCALL_BIT
 + 190)

	)

173 
	#__NR_gëx©å
 (
__X32_SYSCALL_BIT
 + 191)

	)

174 
	#__NR_lgëx©å
 (
__X32_SYSCALL_BIT
 + 192)

	)

175 
	#__NR_fgëx©å
 (
__X32_SYSCALL_BIT
 + 193)

	)

176 
	#__NR_li°x©å
 (
__X32_SYSCALL_BIT
 + 194)

	)

177 
	#__NR_Œi°x©å
 (
__X32_SYSCALL_BIT
 + 195)

	)

178 
	#__NR_Êi°x©å
 (
__X32_SYSCALL_BIT
 + 196)

	)

179 
	#__NR_ªmovex©å
 (
__X32_SYSCALL_BIT
 + 197)

	)

180 
	#__NR_Ãemovex©å
 (
__X32_SYSCALL_BIT
 + 198)

	)

181 
	#__NR_‰emovex©å
 (
__X32_SYSCALL_BIT
 + 199)

	)

182 
	#__NR_tkûl
 (
__X32_SYSCALL_BIT
 + 200)

	)

183 
	#__NR_time
 (
__X32_SYSCALL_BIT
 + 201)

	)

184 
	#__NR_fuãx
 (
__X32_SYSCALL_BIT
 + 202)

	)

185 
	#__NR_sched_£èfföôy
 (
__X32_SYSCALL_BIT
 + 203)

	)

186 
	#__NR_sched_gëafföôy
 (
__X32_SYSCALL_BIT
 + 204)

	)

187 
	#__NR_io_£tup
 (
__X32_SYSCALL_BIT
 + 206)

	)

188 
	#__NR_io_de°roy
 (
__X32_SYSCALL_BIT
 + 207)

	)

189 
	#__NR_io_gëevíts
 (
__X32_SYSCALL_BIT
 + 208)

	)

190 
	#__NR_io_submô
 (
__X32_SYSCALL_BIT
 + 209)

	)

191 
	#__NR_io_ˇn˚l
 (
__X32_SYSCALL_BIT
 + 210)

	)

192 
	#__NR_lookup_dcookõ
 (
__X32_SYSCALL_BIT
 + 212)

	)

193 
	#__NR_ïﬁl_¸óã
 (
__X32_SYSCALL_BIT
 + 213)

	)

194 
	#__NR_ªm≠_fûe_∑ges
 (
__X32_SYSCALL_BIT
 + 216)

	)

195 
	#__NR_gëdíts64
 (
__X32_SYSCALL_BIT
 + 217)

	)

196 
	#__NR_£t_tid_addªss
 (
__X32_SYSCALL_BIT
 + 218)

	)

197 
	#__NR_ª°¨t_sysˇŒ
 (
__X32_SYSCALL_BIT
 + 219)

	)

198 
	#__NR_£mtimed›
 (
__X32_SYSCALL_BIT
 + 220)

	)

199 
	#__NR_Ádvi£64
 (
__X32_SYSCALL_BIT
 + 221)

	)

200 
	#__NR_timî_£âime
 (
__X32_SYSCALL_BIT
 + 223)

	)

201 
	#__NR_timî_gëtime
 (
__X32_SYSCALL_BIT
 + 224)

	)

202 
	#__NR_timî_gëovîrun
 (
__X32_SYSCALL_BIT
 + 225)

	)

203 
	#__NR_timî_dñëe
 (
__X32_SYSCALL_BIT
 + 226)

	)

204 
	#__NR_˛ock_£âime
 (
__X32_SYSCALL_BIT
 + 227)

	)

205 
	#__NR_˛ock_gëtime
 (
__X32_SYSCALL_BIT
 + 228)

	)

206 
	#__NR_˛ock_gëªs
 (
__X32_SYSCALL_BIT
 + 229)

	)

207 
	#__NR_˛ock_«no¶ìp
 (
__X32_SYSCALL_BIT
 + 230)

	)

208 
	#__NR_exô_group
 (
__X32_SYSCALL_BIT
 + 231)

	)

209 
	#__NR_ïﬁl_waô
 (
__X32_SYSCALL_BIT
 + 232)

	)

210 
	#__NR_ïﬁl_˘l
 (
__X32_SYSCALL_BIT
 + 233)

	)

211 
	#__NR_tgkûl
 (
__X32_SYSCALL_BIT
 + 234)

	)

212 
	#__NR_utimes
 (
__X32_SYSCALL_BIT
 + 235)

	)

213 
	#__NR_mböd
 (
__X32_SYSCALL_BIT
 + 237)

	)

214 
	#__NR_£t_mempﬁicy
 (
__X32_SYSCALL_BIT
 + 238)

	)

215 
	#__NR_gë_mempﬁicy
 (
__X32_SYSCALL_BIT
 + 239)

	)

216 
	#__NR_mq_›í
 (
__X32_SYSCALL_BIT
 + 240)

	)

217 
	#__NR_mq_u∆ök
 (
__X32_SYSCALL_BIT
 + 241)

	)

218 
	#__NR_mq_timed£nd
 (
__X32_SYSCALL_BIT
 + 242)

	)

219 
	#__NR_mq_timedª˚ive
 (
__X32_SYSCALL_BIT
 + 243)

	)

220 
	#__NR_mq_gë£èâr
 (
__X32_SYSCALL_BIT
 + 245)

	)

221 
	#__NR_add_key
 (
__X32_SYSCALL_BIT
 + 248)

	)

222 
	#__NR_ªque°_key
 (
__X32_SYSCALL_BIT
 + 249)

	)

223 
	#__NR_key˘l
 (
__X32_SYSCALL_BIT
 + 250)

	)

224 
	#__NR_i›rio_£t
 (
__X32_SYSCALL_BIT
 + 251)

	)

225 
	#__NR_i›rio_gë
 (
__X32_SYSCALL_BIT
 + 252)

	)

226 
	#__NR_öŸify_öô
 (
__X32_SYSCALL_BIT
 + 253)

	)

227 
	#__NR_öŸify_add_w©ch
 (
__X32_SYSCALL_BIT
 + 254)

	)

228 
	#__NR_öŸify_rm_w©ch
 (
__X32_SYSCALL_BIT
 + 255)

	)

229 
	#__NR_migøã_∑ges
 (
__X32_SYSCALL_BIT
 + 256)

	)

230 
	#__NR_›í©
 (
__X32_SYSCALL_BIT
 + 257)

	)

231 
	#__NR_mkdú©
 (
__X32_SYSCALL_BIT
 + 258)

	)

232 
	#__NR_mknod©
 (
__X32_SYSCALL_BIT
 + 259)

	)

233 
	#__NR_fchow«t
 (
__X32_SYSCALL_BIT
 + 260)

	)

234 
	#__NR_futimeßt
 (
__X32_SYSCALL_BIT
 + 261)

	)

235 
	#__NR_√wf°©©
 (
__X32_SYSCALL_BIT
 + 262)

	)

236 
	#__NR_u∆ök©
 (
__X32_SYSCALL_BIT
 + 263)

	)

237 
	#__NR_ª«mót
 (
__X32_SYSCALL_BIT
 + 264)

	)

238 
	#__NR_lök©
 (
__X32_SYSCALL_BIT
 + 265)

	)

239 
	#__NR_symlök©
 (
__X32_SYSCALL_BIT
 + 266)

	)

240 
	#__NR_ªadlök©
 (
__X32_SYSCALL_BIT
 + 267)

	)

241 
	#__NR_fchmod©
 (
__X32_SYSCALL_BIT
 + 268)

	)

242 
	#__NR_Ác˚sßt
 (
__X32_SYSCALL_BIT
 + 269)

	)

243 
	#__NR_p£À˘6
 (
__X32_SYSCALL_BIT
 + 270)

	)

244 
	#__NR_µﬁl
 (
__X32_SYSCALL_BIT
 + 271)

	)

245 
	#__NR_unsh¨e
 (
__X32_SYSCALL_BIT
 + 272)

	)

246 
	#__NR_•li˚
 (
__X32_SYSCALL_BIT
 + 275)

	)

247 
	#__NR_ãe
 (
__X32_SYSCALL_BIT
 + 276)

	)

248 
	#__NR_sync_fûe_ønge
 (
__X32_SYSCALL_BIT
 + 277)

	)

249 
	#__NR_utimíßt
 (
__X32_SYSCALL_BIT
 + 280)

	)

250 
	#__NR_ïﬁl_pwaô
 (
__X32_SYSCALL_BIT
 + 281)

	)

251 
	#__NR_sig«lfd
 (
__X32_SYSCALL_BIT
 + 282)

	)

252 
	#__NR_timîfd_¸óã
 (
__X32_SYSCALL_BIT
 + 283)

	)

253 
	#__NR_evítfd
 (
__X32_SYSCALL_BIT
 + 284)

	)

254 
	#__NR_ÁŒoˇã
 (
__X32_SYSCALL_BIT
 + 285)

	)

255 
	#__NR_timîfd_£âime
 (
__X32_SYSCALL_BIT
 + 286)

	)

256 
	#__NR_timîfd_gëtime
 (
__X32_SYSCALL_BIT
 + 287)

	)

257 
	#__NR_ac˚±4
 (
__X32_SYSCALL_BIT
 + 288)

	)

258 
	#__NR_sig«lfd4
 (
__X32_SYSCALL_BIT
 + 289)

	)

259 
	#__NR_evítfd2
 (
__X32_SYSCALL_BIT
 + 290)

	)

260 
	#__NR_ïﬁl_¸óã1
 (
__X32_SYSCALL_BIT
 + 291)

	)

261 
	#__NR_dup3
 (
__X32_SYSCALL_BIT
 + 292)

	)

262 
	#__NR_pùe2
 (
__X32_SYSCALL_BIT
 + 293)

	)

263 
	#__NR_öŸify_öô1
 (
__X32_SYSCALL_BIT
 + 294)

	)

264 
	#__NR_≥rf_evít_›í
 (
__X32_SYSCALL_BIT
 + 298)

	)

265 
	#__NR_ÁnŸify_öô
 (
__X32_SYSCALL_BIT
 + 300)

	)

266 
	#__NR_ÁnŸify_m¨k
 (
__X32_SYSCALL_BIT
 + 301)

	)

267 
	#__NR_¥limô64
 (
__X32_SYSCALL_BIT
 + 302)

	)

268 
	#__NR_«me_to_h™dÀ_©
 (
__X32_SYSCALL_BIT
 + 303)

	)

269 
	#__NR_›í_by_h™dÀ_©
 (
__X32_SYSCALL_BIT
 + 304)

	)

270 
	#__NR_˛ock_adjtime
 (
__X32_SYSCALL_BIT
 + 305)

	)

271 
	#__NR_syncfs
 (
__X32_SYSCALL_BIT
 + 306)

	)

272 
	#__NR_£äs
 (
__X32_SYSCALL_BIT
 + 308)

	)

273 
	#__NR_gë˝u
 (
__X32_SYSCALL_BIT
 + 309)

	)

274 
	#__NR_kcmp
 (
__X32_SYSCALL_BIT
 + 312)

	)

275 
	#__NR_föô_moduÀ
 (
__X32_SYSCALL_BIT
 + 313)

	)

276 
	#__NR_π_siga˘i⁄
 (
__X32_SYSCALL_BIT
 + 512)

	)

277 
	#__NR_π_sigªtu∫
 (
__X32_SYSCALL_BIT
 + 513)

	)

278 
	#__NR_io˘l
 (
__X32_SYSCALL_BIT
 + 514)

	)

279 
	#__NR_ªadv
 (
__X32_SYSCALL_BIT
 + 515)

	)

280 
	#__NR_wrôev
 (
__X32_SYSCALL_BIT
 + 516)

	)

281 
	#__NR_ªcv‰om
 (
__X32_SYSCALL_BIT
 + 517)

	)

282 
	#__NR_£ndmsg
 (
__X32_SYSCALL_BIT
 + 518)

	)

283 
	#__NR_ªcvmsg
 (
__X32_SYSCALL_BIT
 + 519)

	)

284 
	#__NR_execve
 (
__X32_SYSCALL_BIT
 + 520)

	)

285 
	#__NR_±ø˚
 (
__X32_SYSCALL_BIT
 + 521)

	)

286 
	#__NR_π_sig≥ndög
 (
__X32_SYSCALL_BIT
 + 522)

	)

287 
	#__NR_π_sigtimedwaô
 (
__X32_SYSCALL_BIT
 + 523)

	)

288 
	#__NR_π_sigqueueöfo
 (
__X32_SYSCALL_BIT
 + 524)

	)

289 
	#__NR_sigÆt°ack
 (
__X32_SYSCALL_BIT
 + 525)

	)

290 
	#__NR_timî_¸óã
 (
__X32_SYSCALL_BIT
 + 526)

	)

291 
	#__NR_mq_nŸify
 (
__X32_SYSCALL_BIT
 + 527)

	)

292 
	#__NR_kexec_lﬂd
 (
__X32_SYSCALL_BIT
 + 528)

	)

293 
	#__NR_waôid
 (
__X32_SYSCALL_BIT
 + 529)

	)

294 
	#__NR_£t_robu°_li°
 (
__X32_SYSCALL_BIT
 + 530)

	)

295 
	#__NR_gë_robu°_li°
 (
__X32_SYSCALL_BIT
 + 531)

	)

296 
	#__NR_vm•li˚
 (
__X32_SYSCALL_BIT
 + 532)

	)

297 
	#__NR_move_∑ges
 (
__X32_SYSCALL_BIT
 + 533)

	)

298 
	#__NR_¥ódv
 (
__X32_SYSCALL_BIT
 + 534)

	)

299 
	#__NR_pwrôev
 (
__X32_SYSCALL_BIT
 + 535)

	)

300 
	#__NR_π_tgsigqueueöfo
 (
__X32_SYSCALL_BIT
 + 536)

	)

301 
	#__NR_ªcvmmsg
 (
__X32_SYSCALL_BIT
 + 537)

	)

302 
	#__NR_£ndmmsg
 (
__X32_SYSCALL_BIT
 + 538)

	)

303 
	#__NR_¥o˚ss_vm_ªadv
 (
__X32_SYSCALL_BIT
 + 539)

	)

304 
	#__NR_¥o˚ss_vm_wrôev
 (
__X32_SYSCALL_BIT
 + 540)

	)

305 
	#__NR_£tsock›t
 (
__X32_SYSCALL_BIT
 + 541)

	)

306 
	#__NR_gësock›t
 (
__X32_SYSCALL_BIT
 + 542)

	)

	@/usr/include/bits/byteswap-16.h

19 #i‚de‡
_BITS_BYTESWAP_H


23 #ifde‡
__GNUC__


24 #i‡
__GNUC__
 >= 2

25 
	#__bsw≠_16
(
x
) \

26 (
__exãnsi⁄__
 \

27 ({ 
__v
, 
__x
 = (Ë(
x
); \

28 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

29 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

31 
	`__asm__
 ("rorw $8, %w0" \

32 : "Ù" (
__v
) \

33 : "0" (
__x
) \

35 
__v
; }))

	)

38 
	#__bsw≠_16
(
x
) \

39 (
__exãnsi⁄__
 \

40 ({ 
__x
 = (Ë(
x
); \

41 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

44 
__ölöe
 

45 
	$__bsw≠_16
 (
__bsx
)

47  
	`__bsw≠_c⁄°™t_16
 (
__bsx
);

48 
	}
}

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/fcntl-linux.h

19 #i‚def 
_FCNTL_H


37 #ifde‡
__USE_GNU


38 
	~<bôs/uio.h
>

42 
	#O_ACCMODE
 0003

	)

43 
	#O_RDONLY
 00

	)

44 
	#O_WRONLY
 01

	)

45 
	#O_RDWR
 02

	)

46 #i‚de‡
O_CREAT


47 
	#O_CREAT
 0100

	)

49 #i‚de‡
O_EXCL


50 
	#O_EXCL
 0200

	)

52 #i‚de‡
O_NOCTTY


53 
	#O_NOCTTY
 0400

	)

55 #i‚de‡
O_TRUNC


56 
	#O_TRUNC
 01000

	)

58 #i‚de‡
O_APPEND


59 
	#O_APPEND
 02000

	)

61 #i‚de‡
O_NONBLOCK


62 
	#O_NONBLOCK
 04000

	)

64 #i‚de‡
O_NDELAY


65 
	#O_NDELAY
 
O_NONBLOCK


	)

67 #i‚de‡
O_SYNC


68 
	#O_SYNC
 04010000

	)

70 
	#O_FSYNC
 
O_SYNC


	)

71 #i‚de‡
O_ASYNC


72 
	#O_ASYNC
 020000

	)

74 #i‚de‡
__O_LARGEFILE


75 
	#__O_LARGEFILE
 0100000

	)

78 #i‚de‡
__O_DIRECTORY


79 
	#__O_DIRECTORY
 0200000

	)

81 #i‚de‡
__O_NOFOLLOW


82 
	#__O_NOFOLLOW
 0400000

	)

84 #i‚de‡
__O_CLOEXEC


85 
	#__O_CLOEXEC
 02000000

	)

87 #i‚de‡
__O_DIRECT


88 
	#__O_DIRECT
 040000

	)

90 #i‚de‡
__O_NOATIME


91 
	#__O_NOATIME
 01000000

	)

93 #i‚de‡
__O_PATH


94 
	#__O_PATH
 010000000

	)

96 #i‚de‡
__O_DSYNC


97 
	#__O_DSYNC
 010000

	)

99 #i‚de‡
__O_TMPFILE


100 
	#__O_TMPFILE
 020200000

	)

103 #i‚de‡
F_GETLK


104 #i‚de‡
__USE_FILE_OFFSET64


105 
	#F_GETLK
 5

	)

106 
	#F_SETLK
 6

	)

107 
	#F_SETLKW
 7

	)

109 
	#F_GETLK
 
F_GETLK64


	)

110 
	#F_SETLK
 
F_SETLK64


	)

111 
	#F_SETLKW
 
F_SETLKW64


	)

114 #i‚de‡
F_GETLK64


115 
	#F_GETLK64
 12

	)

116 
	#F_SETLK64
 13

	)

117 
	#F_SETLKW64
 14

	)

120 #ifde‡
__USE_LARGEFILE64


121 
	#O_LARGEFILE
 
__O_LARGEFILE


	)

124 #ifde‡
__USE_XOPEN2K8


125 
	#O_DIRECTORY
 
__O_DIRECTORY


	)

126 
	#O_NOFOLLOW
 
__O_NOFOLLOW


	)

127 
	#O_CLOEXEC
 
__O_CLOEXEC


	)

130 #ifde‡
__USE_GNU


131 
	#O_DIRECT
 
__O_DIRECT


	)

132 
	#O_NOATIME
 
__O_NOATIME


	)

133 
	#O_PATH
 
__O_PATH


	)

134 
	#O_TMPFILE
 
__O_TMPFILE


	)

140 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


141 
	#O_DSYNC
 
__O_DSYNC


	)

142 #i‡
deföed
 
__O_RSYNC


143 
	#O_RSYNC
 
__O_RSYNC


	)

145 
	#O_RSYNC
 
O_SYNC


	)

150 
	#F_DUPFD
 0

	)

151 
	#F_GETFD
 1

	)

152 
	#F_SETFD
 2

	)

153 
	#F_GETFL
 3

	)

154 
	#F_SETFL
 4

	)

156 #i‚de‡
__F_SETOWN


157 
	#__F_SETOWN
 8

	)

158 
	#__F_GETOWN
 9

	)

161 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


162 
	#F_SETOWN
 
__F_SETOWN


	)

163 
	#F_GETOWN
 
__F_GETOWN


	)

166 #i‚de‡
__F_SETSIG


167 
	#__F_SETSIG
 10

	)

168 
	#__F_GETSIG
 11

	)

170 #i‚de‡
__F_SETOWN_EX


171 
	#__F_SETOWN_EX
 15

	)

172 
	#__F_GETOWN_EX
 16

	)

175 #ifde‡
__USE_GNU


176 
	#F_SETSIG
 
__F_SETSIG


	)

177 
	#F_GETSIG
 
__F_GETSIG


	)

178 
	#F_SETOWN_EX
 
__F_SETOWN_EX


	)

179 
	#F_GETOWN_EX
 
__F_GETOWN_EX


	)

182 #ifde‡
__USE_GNU


183 
	#F_SETLEASE
 1024

	)

184 
	#F_GETLEASE
 1025

	)

185 
	#F_NOTIFY
 1026

	)

186 
	#F_SETPIPE_SZ
 1031

	)

187 
	#F_GETPIPE_SZ
 1032

	)

189 #ifde‡
__USE_XOPEN2K8


190 
	#F_DUPFD_CLOEXEC
 1030

	)

195 
	#FD_CLOEXEC
 1

	)

197 #i‚de‡
F_RDLCK


199 
	#F_RDLCK
 0

	)

200 
	#F_WRLCK
 1

	)

201 
	#F_UNLCK
 2

	)

206 #i‚de‡
F_EXLCK


207 
	#F_EXLCK
 4

	)

208 
	#F_SHLCK
 8

	)

211 #ifde‡
__USE_BSD


213 
	#LOCK_SH
 1

	)

214 
	#LOCK_EX
 2

	)

215 
	#LOCK_NB
 4

	)

217 
	#LOCK_UN
 8

	)

220 #ifde‡
__USE_GNU


221 
	#LOCK_MAND
 32

	)

222 
	#LOCK_READ
 64

	)

223 
	#LOCK_WRITE
 128

	)

224 
	#LOCK_RW
 192

	)

227 #ifde‡
__USE_GNU


229 
	#DN_ACCESS
 0x00000001

	)

230 
	#DN_MODIFY
 0x00000002

	)

231 
	#DN_CREATE
 0x00000004

	)

232 
	#DN_DELETE
 0x00000008

	)

233 
	#DN_RENAME
 0x00000010

	)

234 
	#DN_ATTRIB
 0x00000020

	)

235 
	#DN_MULTISHOT
 0x80000000

	)

239 #ifde‡
__USE_GNU


241 
	e__pid_ty≥


243 
	mF_OWNER_TID
 = 0,

244 
	mF_OWNER_PID
,

245 
	mF_OWNER_PGRP
,

246 
	mF_OWNER_GID
 = 
F_OWNER_PGRP


250 
	sf_ow√r_ex


252 
__pid_ty≥
 
	mty≥
;

253 
__pid_t
 
	mpid
;

259 #ifdef 
__USE_BSD


260 
	#FAPPEND
 
O_APPEND


	)

261 
	#FFSYNC
 
O_FSYNC


	)

262 
	#FASYNC
 
O_ASYNC


	)

263 
	#FNONBLOCK
 
O_NONBLOCK


	)

264 
	#FNDELAY
 
O_NDELAY


	)

267 #i‚de‡
__POSIX_FADV_DONTNEED


268 
	#__POSIX_FADV_DONTNEED
 4

	)

269 
	#__POSIX_FADV_NOREUSE
 5

	)

272 #ifde‡
__USE_XOPEN2K


273 
	#POSIX_FADV_NORMAL
 0

	)

274 
	#POSIX_FADV_RANDOM
 1

	)

275 
	#POSIX_FADV_SEQUENTIAL
 2

	)

276 
	#POSIX_FADV_WILLNEED
 3

	)

277 
	#POSIX_FADV_DONTNEED
 
__POSIX_FADV_DONTNEED


	)

278 
	#POSIX_FADV_NOREUSE
 
__POSIX_FADV_NOREUSE


	)

282 #ifde‡
__USE_GNU


284 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

287 
	#SYNC_FILE_RANGE_WRITE
 2

	)

290 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

295 
	#SPLICE_F_MOVE
 1

	)

296 
	#SPLICE_F_NONBLOCK
 2

	)

299 
	#SPLICE_F_MORE
 4

	)

300 
	#SPLICE_F_GIFT
 8

	)

304 
	#FALLOC_FL_KEEP_SIZE
 1

	)

307 
	#FALLOC_FL_PUNCH_HOLE
 2

	)

311 
	sfûe_h™dÀ


313 
	mh™dÀ_byãs
;

314 
	mh™dÀ_ty≥
;

316 
	mf_h™dÀ
[0];

320 
	#MAX_HANDLE_SZ
 128

	)

323 
	g__BEGIN_DECLS


325 #ifde‡
__USE_GNU


328 
ssize_t
 
	$ªadahód
 (
__fd
, 
__off64_t
 
__off£t
, 
size_t
 
__cou¡
)

329 
__THROW
;

336 
	`sync_fûe_ønge
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__cou¡
,

337 
__Êags
);

344 
ssize_t
 
	`vm•li˚
 (
__fdout
, c⁄° 
iovec
 *
__iov
,

345 
size_t
 
__cou¡
, 
__Êags
);

351 
ssize_t
 
	`•li˚
 (
__fdö
, 
__off64_t
 *
__offö
, 
__fdout
,

352 
__off64_t
 *
__offout
, 
size_t
 
__Àn
,

353 
__Êags
);

359 
ssize_t
 
	`ãe
 (
__fdö
, 
__fdout
, 
size_t
 
__Àn
,

360 
__Êags
);

366 #i‚de‡
__USE_FILE_OFFSET64


367 
	`ÁŒoˇã
 (
__fd
, 
__mode
, 
__off_t
 
__off£t
, __off_à
__Àn
);

369 #ifde‡
__REDIRECT


370 
	`__REDIRECT
 (
ÁŒoˇã
, (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

371 
__off64_t
 
__Àn
),

372 
ÁŒoˇã64
);

374 
	#ÁŒoˇã
 
ÁŒoˇã64


	)

377 #ifde‡
__USE_LARGEFILE64


378 
	`ÁŒoˇã64
 (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

379 
__off64_t
 
__Àn
);

384 
	$«me_to_h™dÀ_©
 (
__dfd
, c⁄° *
__«me
,

385 
fûe_h™dÀ
 *
__h™dÀ
, *
__m¡_id
,

386 
__Êags
Ë
__THROW
;

392 
	`›í_by_h™dÀ_©
 (
__mou¡dúfd
, 
fûe_h™dÀ
 *
__h™dÀ
,

393 
__Êags
);

397 
__END_DECLS


	@/usr/include/bits/libio-ldbl.h

19 #i‚de‡
_IO_STDIO_H


23 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

24 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/local_lim.h

24 #i‚de‡
NR_OPEN


25 
	#__undef_NR_OPEN


	)

27 #i‚de‡
LINK_MAX


28 
	#__undef_LINK_MAX


	)

30 #i‚de‡
OPEN_MAX


31 
	#__undef_OPEN_MAX


	)

33 #i‚de‡
ARG_MAX


34 
	#__undef_ARG_MAX


	)

38 
	~<löux/limôs.h
>

41 #ifde‡
__undef_NR_OPEN


42 #unde‡
NR_OPEN


43 #unde‡
__undef_NR_OPEN


46 #ifde‡
__undef_LINK_MAX


47 #unde‡
LINK_MAX


48 #unde‡
__undef_LINK_MAX


51 #ifde‡
__undef_OPEN_MAX


52 #unde‡
OPEN_MAX


53 #unde‡
__undef_OPEN_MAX


56 #ifde‡
__undef_ARG_MAX


57 #unde‡
ARG_MAX


58 #unde‡
__undef_ARG_MAX


62 
	#_POSIX_THREAD_KEYS_MAX
 128

	)

64 
	#PTHREAD_KEYS_MAX
 1024

	)

67 
	#_POSIX_THREAD_DESTRUCTOR_ITERATIONS
 4

	)

69 
	#PTHREAD_DESTRUCTOR_ITERATIONS
 
_POSIX_THREAD_DESTRUCTOR_ITERATIONS


	)

72 
	#_POSIX_THREAD_THREADS_MAX
 64

	)

74 #unde‡
PTHREAD_THREADS_MAX


78 
	#AIO_PRIO_DELTA_MAX
 20

	)

81 
	#PTHREAD_STACK_MIN
 16384

	)

84 
	#DELAYTIMER_MAX
 2147483647

	)

87 
	#TTY_NAME_MAX
 32

	)

90 
	#LOGIN_NAME_MAX
 256

	)

93 
	#HOST_NAME_MAX
 64

	)

96 
	#MQ_PRIO_MAX
 32768

	)

99 
	#SEM_VALUE_MAX
 (2147483647)

	)

	@/usr/include/bits/mman-linux.h

19 #i‚de‡
_SYS_MMAN_H


32 
	#PROT_READ
 0x1

	)

33 
	#PROT_WRITE
 0x2

	)

34 
	#PROT_EXEC
 0x4

	)

35 
	#PROT_NONE
 0x0

	)

36 
	#PROT_GROWSDOWN
 0x01000000

	)

38 
	#PROT_GROWSUP
 0x02000000

	)

42 
	#MAP_SHARED
 0x01

	)

43 
	#MAP_PRIVATE
 0x02

	)

44 #ifde‡
__USE_MISC


45 
	#MAP_TYPE
 0x0‡

	)

49 
	#MAP_FIXED
 0x10

	)

50 #ifde‡
__USE_MISC


51 
	#MAP_FILE
 0

	)

52 #ifde‡
__MAP_ANONYMOUS


53 
	#MAP_ANONYMOUS
 
__MAP_ANONYMOUS


	)

55 
	#MAP_ANONYMOUS
 0x20

	)

57 
	#MAP_ANON
 
MAP_ANONYMOUS


	)

59 
	#MAP_HUGE_SHIFT
 26

	)

60 
	#MAP_HUGE_MASK
 0x3f

	)

64 
	#MS_ASYNC
 1

	)

65 
	#MS_SYNC
 4

	)

66 
	#MS_INVALIDATE
 2

	)

69 #ifde‡
__USE_GNU


70 
	#MREMAP_MAYMOVE
 1

	)

71 
	#MREMAP_FIXED
 2

	)

75 #ifde‡
__USE_BSD


76 
	#MADV_NORMAL
 0

	)

77 
	#MADV_RANDOM
 1

	)

78 
	#MADV_SEQUENTIAL
 2

	)

79 
	#MADV_WILLNEED
 3

	)

80 
	#MADV_DONTNEED
 4

	)

81 
	#MADV_REMOVE
 9

	)

82 
	#MADV_DONTFORK
 10

	)

83 
	#MADV_DOFORK
 11

	)

84 
	#MADV_MERGEABLE
 12

	)

85 
	#MADV_UNMERGEABLE
 13

	)

86 
	#MADV_HUGEPAGE
 14

	)

87 
	#MADV_NOHUGEPAGE
 15

	)

88 
	#MADV_DONTDUMP
 16

	)

90 
	#MADV_DODUMP
 17

	)

91 
	#MADV_HWPOISON
 100

	)

95 #ifde‡
__USE_XOPEN2K


96 
	#POSIX_MADV_NORMAL
 0

	)

97 
	#POSIX_MADV_RANDOM
 1

	)

98 
	#POSIX_MADV_SEQUENTIAL
 2

	)

99 
	#POSIX_MADV_WILLNEED
 3

	)

100 
	#POSIX_MADV_DONTNEED
 4

	)

104 #i‚de‡
MCL_CURRENT


105 
	#MCL_CURRENT
 1

	)

106 
	#MCL_FUTURE
 2

	)

	@/usr/include/bits/select.h

18 #i‚de‡
_SYS_SELECT_H


22 
	~<bôs/w‹dsize.h
>

25 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

27 #i‡
__WORDSIZE
 == 64

28 
	#__FD_ZERO_STOS
 "°osq"

	)

30 
	#__FD_ZERO_STOS
 "°o¶"

	)

33 
	#__FD_ZERO
(
fd•
) \

35 
__d0
, 
__d1
; \

36 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

37 : "=c" (
__d0
), "=D" (
__d1
) \

38 : "a" (0), "0" ( (
fd_£t
) \

39 /  (
__fd_mask
)), \

40 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

42 } 0)

	)

48 
	#__FD_ZERO
(
£t
) \

50 
__i
; \

51 
fd_£t
 *
__¨r
 = (
£t
); \

52 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

53 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

54 } 0)

	)

58 
	#__FD_SET
(
d
, 
£t
) \

59 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] |
	`__FD_MASK
 (d)))

	)

60 
	#__FD_CLR
(
d
, 
£t
) \

61 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] &~
	`__FD_MASK
 (d)))

	)

62 
	#__FD_ISSET
(
d
, 
£t
) \

63 ((
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] & 
	`__FD_MASK
 (d)Ë!0)

	)

	@/usr/include/bits/select2.h

19 #i‚de‡
_SYS_SELECT_H


24 
__fdñt_chk
 (
__d
);

25 
	$__fdñt_w¨n
 (
__d
)

26 
	`__w¨«âr
 ("bit outside of fd_set selected");

27 #unde‡
__FD_ELT


28 
	#__FD_ELT
(
d
) \

29 
__exãnsi⁄__
 \

30 ({ 
__d
 = (
d
); \

31 (
	`__buûtö_c⁄°™t_p
 (
__d
) \

32 ? (0 <
__d
 && __d < 
__FD_SETSIZE
 \

33 ? (
__d
 / 
__NFDBITS
) \

34 : 
	`__fdñt_w¨n
 (
__d
)) \

35 : 
	`__fdñt_chk
 (
__d
)); 
	}
})

	)

	@/usr/include/bits/socket_type.h

19 #i‚de‡
_SYS_SOCKET_H


24 
	e__sockë_ty≥


26 
	mSOCK_STREAM
 = 1,

28 
	#SOCK_STREAM
 
SOCK_STREAM


	)

29 
	mSOCK_DGRAM
 = 2,

31 
	#SOCK_DGRAM
 
SOCK_DGRAM


	)

32 
	mSOCK_RAW
 = 3,

33 
	#SOCK_RAW
 
SOCK_RAW


	)

34 
	mSOCK_RDM
 = 4,

35 
	#SOCK_RDM
 
SOCK_RDM


	)

36 
	mSOCK_SEQPACKET
 = 5,

38 
	#SOCK_SEQPACKET
 
SOCK_SEQPACKET


	)

39 
	mSOCK_DCCP
 = 6,

40 
	#SOCK_DCCP
 
SOCK_DCCP


	)

41 
	mSOCK_PACKET
 = 10,

44 
	#SOCK_PACKET
 
SOCK_PACKET


	)

49 
	mSOCK_CLOEXEC
 = 02000000,

51 
	#SOCK_CLOEXEC
 
SOCK_CLOEXEC


	)

52 
	mSOCK_NONBLOCK
 = 00004000

54 
	#SOCK_NONBLOCK
 
SOCK_NONBLOCK


	)

	@/usr/include/bits/statfs.h

18 #i‚de‡
_SYS_STATFS_H


22 
	~<bôs/ty≥s.h
>

24 
	s°©fs


26 
__fsw‹d_t
 
	mf_ty≥
;

27 
__fsw‹d_t
 
	mf_bsize
;

28 #i‚de‡
__USE_FILE_OFFSET64


29 
__fsblk˙t_t
 
	mf_blocks
;

30 
__fsblk˙t_t
 
	mf_b‰ì
;

31 
__fsblk˙t_t
 
	mf_bavaû
;

32 
__fsfû˙t_t
 
	mf_fûes
;

33 
__fsfû˙t_t
 
	mf_f‰ì
;

35 
__fsblk˙t64_t
 
	mf_blocks
;

36 
__fsblk˙t64_t
 
	mf_b‰ì
;

37 
__fsblk˙t64_t
 
	mf_bavaû
;

38 
__fsfû˙t64_t
 
	mf_fûes
;

39 
__fsfû˙t64_t
 
	mf_f‰ì
;

41 
__fsid_t
 
	mf_fsid
;

42 
__fsw‹d_t
 
	mf_«mñí
;

43 
__fsw‹d_t
 
	mf_‰size
;

44 
__fsw‹d_t
 
	mf_Êags
;

45 
__fsw‹d_t
 
	mf_•¨e
[4];

48 #ifde‡
__USE_LARGEFILE64


49 
	s°©fs64


51 
__fsw‹d_t
 
	mf_ty≥
;

52 
__fsw‹d_t
 
	mf_bsize
;

53 
__fsblk˙t64_t
 
	mf_blocks
;

54 
__fsblk˙t64_t
 
	mf_b‰ì
;

55 
__fsblk˙t64_t
 
	mf_bavaû
;

56 
__fsfû˙t64_t
 
	mf_fûes
;

57 
__fsfû˙t64_t
 
	mf_f‰ì
;

58 
__fsid_t
 
	mf_fsid
;

59 
__fsw‹d_t
 
	mf_«mñí
;

60 
__fsw‹d_t
 
	mf_‰size
;

61 
__fsw‹d_t
 
	mf_Êags
;

62 
__fsw‹d_t
 
	mf_•¨e
[4];

67 
	#_STATFS_F_NAMELEN


	)

68 
	#_STATFS_F_FRSIZE


	)

69 
	#_STATFS_F_FLAGS


	)

	@/usr/include/bits/stdio-lock.h

19 #i‚de‡
_BITS_STDIO_LOCK_H


20 
	#_BITS_STDIO_LOCK_H
 1

	)

22 
	~<bôs/libc-lock.h
>

24 
	$__libc_lock_deföe_ªcursive
 (, 
_IO_lock_t
)

27 #ifde‡
	t_LIBC_LOCK_RECURSIVE_INITIALIZER


28 
	t_IO_lock_öôülizî
 
	t_LIBC_LOCK_RECURSIVE_INITIALIZER


	)

29 #ñi‡
	t_IO_MTSAFE_IO


30 #îr‹ 
	tlibio
 
	t√eds
 
	tªcursive
 
	tmuãxes
 
	t_IO_MTSAFE_IO


33 
	t_IO_lock_öô
(
	t_«me
Ë
	t__libc_lock_öô_ªcursive
 (_«me)

	)

34 
	t_IO_lock_föi
(
	t_«me
Ë
	t__libc_lock_föi_ªcursive
 (_«me)

	)

35 
	t_IO_lock_lock
(
	t_«me
Ë
	t__libc_lock_lock_ªcursive
 (_«me)

	)

36 
	t_IO_lock_åylock
(
	t_«me
Ë
	t__libc_lock_åylock_ªcursive
 (_«me)

	)

37 
	t_IO_lock_u∆ock
(
	t_«me
Ë
	t__libc_lock_u∆ock_ªcursive
 (_«me)

	)

40 
	t_IO_˛ónup_ªgi⁄_°¨t
(
	t_f˘
, 
	t_Â
) \

41 
	t__libc_˛ónup_ªgi⁄_°¨t
 (((
	t_Â
)->
	t_Êags
 & 
	t_IO_USER_LOCK
Ë=0, 
	t_f˘
, _Â)

	)

42 
	t_IO_˛ónup_ªgi⁄_°¨t_nﬂrg
(
	t_f˘
) \

43 
	t__libc_˛ónup_ªgi⁄_°¨t
 (1, 
	t_f˘
, 
	tNULL
)

	)

44 
	t_IO_˛ónup_ªgi⁄_íd
(
	t_doô
) \

45 
	t__libc_˛ónup_ªgi⁄_íd
 (
	t_doô
)

	)

47 #i‡
	tdeföed
 
	t_LIBC
 && !deföed 
	tNOT_IN_libc


48 
	t_IO_acquúe_lock
(
	t_Â
) \

49 
	t_IO_˛ónup_ªgi⁄_°¨t
 (((*Ë(*)Ë
	t_IO_fu∆ockfûe
, (
	t_Â
)); \

50 
	`_IO_Êockfûe
 (
_Â
)

	)

52 
	#_IO_ªÀa£_lock
(
_Â
) \

53 
	`_IO_fu∆ockfûe
 (
_Â
); \

54 
	`_IO_˛ónup_ªgi⁄_íd
 (0)

	)

	@/usr/include/bits/syslog-ldbl.h

19 #i‚de‡
_SYS_SYSLOG_H


23 
	$__LDBL_REDIR_DECL
 (
sy¶og
)

25 #ifde‡
__USE_BSD


26 
	$__LDBL_REDIR_DECL
 (
vsy¶og
)

29 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


30 
	$__LDBL_REDIR_DECL
 (
__sy¶og_chk
)

32 #ifde‡
__USE_BSD


33 
	$__LDBL_REDIR_DECL
 (
__vsy¶og_chk
)

	@/usr/include/bits/syslog-path.h

19 #i‚de‡
_SYS_SYSLOG_H


23 #i‚de‡
_BITS_SYSLOG_PATH_H


24 
	#_BITS_SYSLOG_PATH_H
 1

	)

26 
	#_PATH_LOG
 "/dev/log"

	)

	@/usr/include/bits/syslog.h

19 #i‚de‡
_SYS_SYSLOG_H


24 
	$__sy¶og_chk
 (
__¥i
, 
__Êag
, c⁄° *
__fmt
, ...)

25 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

27 #ifde‡
__va_¨g_∑ck


28 
__f‹tify_fun˘i⁄
 

29 
	$sy¶og
 (
__¥i
, c⁄° *
__fmt
, ...)

31 
	`__sy¶og_chk
 (
__¥i
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

32 
	}
}

33 #ñi‡!
deföed
 
__˝lu•lus


34 
	#sy¶og
(
¥i
, ...) \

35 
	`__sy¶og_chk
 (
¥i
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

39 #ifde‡
__USE_BSD


40 
	$__vsy¶og_chk
 (
__¥i
, 
__Êag
, c⁄° *
__fmt
,

41 
__gnuc_va_li°
 
__≠
)

42 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

44 
__f‹tify_fun˘i⁄
 

45 
	$vsy¶og
 (
__¥i
, c⁄° *
__fmt
, 
__gnuc_va_li°
 
__≠
)

47 
	`__vsy¶og_chk
 (
__¥i
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

48 
	}
}

	@/usr/include/bits/timex.h

18 #i‚def 
_BITS_TIMEX_H


19 
	#_BITS_TIMEX_H
 1

	)

21 
	~<bôs/ty≥s.h
>

25 
	stimex


27 
	mmodes
;

28 
__sysˇŒ_¶⁄g_t
 
	moff£t
;

29 
__sysˇŒ_¶⁄g_t
 
	m‰eq
;

30 
__sysˇŒ_¶⁄g_t
 
	mmaxîr‹
;

31 
__sysˇŒ_¶⁄g_t
 
	me°îr‹
;

32 
	m°©us
;

33 
__sysˇŒ_¶⁄g_t
 
	mc⁄°™t
;

34 
__sysˇŒ_¶⁄g_t
 
	m¥ecisi⁄
;

35 
__sysˇŒ_¶⁄g_t
 
	mtﬁî™˚
;

36 
timevÆ
 
	mtime
;

37 
__sysˇŒ_¶⁄g_t
 
	mtick
;

38 
__sysˇŒ_¶⁄g_t
 
	mµs‰eq
;

39 
__sysˇŒ_¶⁄g_t
 
	mjôãr
;

40 
	mshi·
;

41 
__sysˇŒ_¶⁄g_t
 
	m°abû
;

42 
__sysˇŒ_¶⁄g_t
 
	mjô˙t
;

43 
__sysˇŒ_¶⁄g_t
 
	mˇl˙t
;

44 
__sysˇŒ_¶⁄g_t
 
	mîr˙t
;

45 
__sysˇŒ_¶⁄g_t
 
	m°b˙t
;

47 
	mèi
;

56 
	#ADJ_OFFSET
 0x0001

	)

57 
	#ADJ_FREQUENCY
 0x0002

	)

58 
	#ADJ_MAXERROR
 0x0004

	)

59 
	#ADJ_ESTERROR
 0x0008

	)

60 
	#ADJ_STATUS
 0x0010

	)

61 
	#ADJ_TIMECONST
 0x0020

	)

62 
	#ADJ_TAI
 0x0080

	)

63 
	#ADJ_MICRO
 0x1000

	)

64 
	#ADJ_NANO
 0x2000

	)

65 
	#ADJ_TICK
 0x4000

	)

66 
	#ADJ_OFFSET_SINGLESHOT
 0x8001

	)

67 
	#ADJ_OFFSET_SS_READ
 0xa001

	)

70 
	#MOD_OFFSET
 
ADJ_OFFSET


	)

71 
	#MOD_FREQUENCY
 
ADJ_FREQUENCY


	)

72 
	#MOD_MAXERROR
 
ADJ_MAXERROR


	)

73 
	#MOD_ESTERROR
 
ADJ_ESTERROR


	)

74 
	#MOD_STATUS
 
ADJ_STATUS


	)

75 
	#MOD_TIMECONST
 
ADJ_TIMECONST


	)

76 
	#MOD_CLKB
 
ADJ_TICK


	)

77 
	#MOD_CLKA
 
ADJ_OFFSET_SINGLESHOT


	)

78 
	#MOD_TAI
 
ADJ_TAI


	)

79 
	#MOD_MICRO
 
ADJ_MICRO


	)

80 
	#MOD_NANO
 
ADJ_NANO


	)

84 
	#STA_PLL
 0x0001

	)

85 
	#STA_PPSFREQ
 0x0002

	)

86 
	#STA_PPSTIME
 0x0004

	)

87 
	#STA_FLL
 0x0008

	)

89 
	#STA_INS
 0x0010

	)

90 
	#STA_DEL
 0x0020

	)

91 
	#STA_UNSYNC
 0x0040

	)

92 
	#STA_FREQHOLD
 0x0080

	)

94 
	#STA_PPSSIGNAL
 0x0100

	)

95 
	#STA_PPSJITTER
 0x0200

	)

96 
	#STA_PPSWANDER
 0x0400

	)

97 
	#STA_PPSERROR
 0x0800

	)

99 
	#STA_CLOCKERR
 0x1000

	)

100 
	#STA_NANO
 0x2000

	)

101 
	#STA_MODE
 0x4000

	)

102 
	#STA_CLK
 0x8000

	)

105 
	#STA_RONLY
 (
STA_PPSSIGNAL
 | 
STA_PPSJITTER
 | 
STA_PPSWANDER
 | \

106 
STA_PPSERROR
 | 
STA_CLOCKERR
 | 
STA_NANO
 | 
STA_MODE
 | 
STA_CLK
)

	)

	@/usr/include/bits/typesizes.h

19 #i‚de‡
_BITS_TYPES_H


23 #i‚def 
_BITS_TYPESIZES_H


24 
	#_BITS_TYPESIZES_H
 1

	)

30 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


31 
	#__SYSCALL_SLONG_TYPE
 
__SQUAD_TYPE


	)

32 
	#__SYSCALL_ULONG_TYPE
 
__UQUAD_TYPE


	)

34 
	#__SYSCALL_SLONG_TYPE
 
__SLONGWORD_TYPE


	)

35 
	#__SYSCALL_ULONG_TYPE
 
__ULONGWORD_TYPE


	)

38 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

39 
	#__UID_T_TYPE
 
__U32_TYPE


	)

40 
	#__GID_T_TYPE
 
__U32_TYPE


	)

41 
	#__INO_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

42 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

43 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

44 #ifde‡
__x86_64__


45 
	#__NLINK_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

46 
	#__FSWORD_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

48 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

49 
	#__FSWORD_T_TYPE
 
__SWORD_TYPE


	)

51 
	#__OFF_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

52 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

53 
	#__PID_T_TYPE
 
__S32_TYPE


	)

54 
	#__RLIM_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

55 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

56 
	#__BLKCNT_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

57 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

58 
	#__FSBLKCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

59 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

60 
	#__FSFILCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

61 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

62 
	#__ID_T_TYPE
 
__U32_TYPE


	)

63 
	#__CLOCK_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

64 
	#__TIME_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

65 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

66 
	#__SUSECONDS_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

67 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

68 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

69 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

70 
	#__TIMER_T_TYPE
 *

	)

71 
	#__BLKSIZE_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

72 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

73 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

75 #ifde‡
__x86_64__


79 
	#__OFF_T_MATCHES_OFF64_T
 1

	)

82 
	#__INO_T_MATCHES_INO64_T
 1

	)

86 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/gnu/stubs.h

6 #i‡!
deföed
 
__x86_64__


7 
	~<gnu/°ubs-32.h
>

9 #i‡
deföed
 
__x86_64__
 && deföed 
__LP64__


10 
	~<gnu/°ubs-64.h
>

12 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


13 
	~<gnu/°ubs-x32.h
>

	@/usr/include/linux/kernel.h

1 #i‚de‡
_LINUX_KERNEL_H


2 
	#_LINUX_KERNEL_H


	)

4 
	~<löux/sysöfo.h
>

9 
	#__ALIGN_KERNEL
(
x
, 
a
Ë
	`__ALIGN_KERNEL_MASK
(x, (
	`ty≥of
(x))◊Ë- 1)

	)

10 
	#__ALIGN_KERNEL_MASK
(
x
, 
mask
Ë(((xË+ (mask)Ë& ~(mask))

	)

	@/usr/include/linux/param.h

1 #i‚de‡
_LINUX_PARAM_H


2 
	#_LINUX_PARAM_H


	)

4 
	~<asm/∑øm.h
>

	@/usr/include/linux/stddef.h

	@/usr/include/linux/swab.h

1 #i‚de‡
_LINUX_SWAB_H


2 
	#_LINUX_SWAB_H


	)

4 
	~<löux/ty≥s.h
>

6 
	~<asm/swab.h
>

12 
	#___c⁄°™t_swab16
(
x
Ë((
__u16
)( \

13 (((
__u16
)(
x
) & (__u16)0x00ffU) << 8) | \

14 (((
__u16
)(
x
Ë& (__u16)0xff00UË>> 8)))

	)

16 
	#___c⁄°™t_swab32
(
x
Ë((
__u32
)( \

17 (((
__u32
)(
x
) & (__u32)0x000000ffUL) << 24) | \

18 (((
__u32
)(
x
) & (__u32)0x0000ff00UL) << 8) | \

19 (((
__u32
)(
x
) & (__u32)0x00ff0000UL) >> 8) | \

20 (((
__u32
)(
x
Ë& (__u32)0xff000000ULË>> 24)))

	)

22 
	#___c⁄°™t_swab64
(
x
Ë((
__u64
)( \

23 (((
__u64
)(
x
) & (__u64)0x00000000000000ffULL) << 56) | \

24 (((
__u64
)(
x
) & (__u64)0x000000000000ff00ULL) << 40) | \

25 (((
__u64
)(
x
) & (__u64)0x0000000000ff0000ULL) << 24) | \

26 (((
__u64
)(
x
) & (__u64)0x00000000ff000000ULL) << 8) | \

27 (((
__u64
)(
x
) & (__u64)0x000000ff00000000ULL) >> 8) | \

28 (((
__u64
)(
x
) & (__u64)0x0000ff0000000000ULL) >> 24) | \

29 (((
__u64
)(
x
) & (__u64)0x00ff000000000000ULL) >> 40) | \

30 (((
__u64
)(
x
Ë& (__u64)0xff00000000000000ULLË>> 56)))

	)

32 
	#___c⁄°™t_swahw32
(
x
Ë((
__u32
)( \

33 (((
__u32
)(
x
) & (__u32)0x0000ffffUL) << 16) | \

34 (((
__u32
)(
x
Ë& (__u32)0xffff0000ULË>> 16)))

	)

36 
	#___c⁄°™t_swahb32
(
x
Ë((
__u32
)( \

37 (((
__u32
)(
x
) & (__u32)0x00ff00ffUL) << 8) | \

38 (((
__u32
)(
x
Ë& (__u32)0xff00ff00ULË>> 8)))

	)

46 
__ölöe__
 
__u16
 
	$__fswab16
(
__u16
 
vÆ
)

48 #ifde‡
__HAVE_BUILTIN_BSWAP16__


49  
	`__buûtö_bsw≠16
(
vÆ
);

50 #ñi‡
	`deföed
 (
__¨ch_swab16
)

51  
	`__¨ch_swab16
(
vÆ
);

53  
	`___c⁄°™t_swab16
(
vÆ
);

55 
	}
}

57 
__ölöe__
 
__u32
 
	$__fswab32
(
__u32
 
vÆ
)

59 #ifde‡
__HAVE_BUILTIN_BSWAP32__


60  
	`__buûtö_bsw≠32
(
vÆ
);

61 #ñi‡
	`deföed
(
__¨ch_swab32
)

62  
	`__¨ch_swab32
(
vÆ
);

64  
	`___c⁄°™t_swab32
(
vÆ
);

66 
	}
}

68 
__ölöe__
 
__u64
 
	$__fswab64
(
__u64
 
vÆ
)

70 #ifde‡
__HAVE_BUILTIN_BSWAP64__


71  
	`__buûtö_bsw≠64
(
vÆ
);

72 #ñi‡
	`deföed
 (
__¨ch_swab64
)

73  
	`__¨ch_swab64
(
vÆ
);

74 #ñi‡
	`deföed
(
__SWAB_64_THRU_32__
)

75 
__u32
 
h
 = 
vÆ
 >> 32;

76 
__u32
 
l
 = 
vÆ
 & ((1ULL << 32) - 1);

77  (((
__u64
)
	`__fswab32
(
l
)Ë<< 32Ë| ((__u64)(__fswab32(
h
)));

79  
	`___c⁄°™t_swab64
(
vÆ
);

81 
	}
}

83 
__ölöe__
 
__u32
 
	$__fswahw32
(
__u32
 
vÆ
)

85 #ifde‡
__¨ch_swahw32


86  
	`__¨ch_swahw32
(
vÆ
);

88  
	`___c⁄°™t_swahw32
(
vÆ
);

90 
	}
}

92 
__ölöe__
 
__u32
 
	$__fswahb32
(
__u32
 
vÆ
)

94 #ifde‡
__¨ch_swahb32


95  
	`__¨ch_swahb32
(
vÆ
);

97  
	`___c⁄°™t_swahb32
(
vÆ
);

99 
	}
}

105 
	#__swab16
(
x
) \

106 (
	`__buûtö_c⁄°™t_p
((
__u16
)(
x
)) ? \

107 
	`___c⁄°™t_swab16
(
x
) : \

108 
	`__fswab16
(
x
))

	)

114 
	#__swab32
(
x
) \

115 (
	`__buûtö_c⁄°™t_p
((
__u32
)(
x
)) ? \

116 
	`___c⁄°™t_swab32
(
x
) : \

117 
	`__fswab32
(
x
))

	)

123 
	#__swab64
(
x
) \

124 (
	`__buûtö_c⁄°™t_p
((
__u64
)(
x
)) ? \

125 
	`___c⁄°™t_swab64
(
x
) : \

126 
	`__fswab64
(
x
))

	)

134 
	#__swahw32
(
x
) \

135 (
	`__buûtö_c⁄°™t_p
((
__u32
)(
x
)) ? \

136 
	`___c⁄°™t_swahw32
(
x
) : \

137 
	`__fswahw32
(
x
))

	)

145 
	#__swahb32
(
x
) \

146 (
	`__buûtö_c⁄°™t_p
((
__u32
)(
x
)) ? \

147 
	`___c⁄°™t_swahb32
(
x
) : \

148 
	`__fswahb32
(
x
))

	)

154 
__ölöe__
 
__u16
 
	$__swab16p
(c⁄° 
__u16
 *
p
)

156 #ifde‡
__¨ch_swab16p


157  
	`__¨ch_swab16p
(
p
);

159  
	`__swab16
(*
p
);

161 
	}
}

167 
__ölöe__
 
__u32
 
	$__swab32p
(c⁄° 
__u32
 *
p
)

169 #ifde‡
__¨ch_swab32p


170  
	`__¨ch_swab32p
(
p
);

172  
	`__swab32
(*
p
);

174 
	}
}

180 
__ölöe__
 
__u64
 
	$__swab64p
(c⁄° 
__u64
 *
p
)

182 #ifde‡
__¨ch_swab64p


183  
	`__¨ch_swab64p
(
p
);

185  
	`__swab64
(*
p
);

187 
	}
}

195 
__ölöe__
 
__u32
 
	$__swahw32p
(c⁄° 
__u32
 *
p
)

197 #ifde‡
__¨ch_swahw32p


198  
	`__¨ch_swahw32p
(
p
);

200  
	`__swahw32
(*
p
);

202 
	}
}

210 
__ölöe__
 
__u32
 
	$__swahb32p
(c⁄° 
__u32
 *
p
)

212 #ifde‡
__¨ch_swahb32p


213  
	`__¨ch_swahb32p
(
p
);

215  
	`__swahb32
(*
p
);

217 
	}
}

223 
__ölöe__
 
	$__swab16s
(
__u16
 *
p
)

225 #ifde‡
__¨ch_swab16s


226 
	`__¨ch_swab16s
(
p
);

228 *
p
 = 
	`__swab16p
(p);

230 
	}
}

235 
__ölöe__
 
	$__swab32s
(
__u32
 *
p
)

237 #ifde‡
__¨ch_swab32s


238 
	`__¨ch_swab32s
(
p
);

240 *
p
 = 
	`__swab32p
(p);

242 
	}
}

248 
__ölöe__
 
	$__swab64s
(
__u64
 *
p
)

250 #ifde‡
__¨ch_swab64s


251 
	`__¨ch_swab64s
(
p
);

253 *
p
 = 
	`__swab64p
(p);

255 
	}
}

263 
__ölöe__
 
	$__swahw32s
(
__u32
 *
p
)

265 #ifde‡
__¨ch_swahw32s


266 
	`__¨ch_swahw32s
(
p
);

268 *
p
 = 
	`__swahw32p
(p);

270 
	}
}

278 
__ölöe__
 
	$__swahb32s
(
__u32
 *
p
)

280 #ifde‡
__¨ch_swahb32s


281 
	`__¨ch_swahb32s
(
p
);

283 *
p
 = 
	`__swahb32p
(p);

285 
	}
}

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

30 
	#__STDC_IEC_559__
 1

	)

31 
	#__STDC_IEC_559_COMPLEX__
 1

	)

35 
	#__STDC_ISO_10646__
 201103L

	)

38 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/asm-generic/errno.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

9 
	#ENOSYS
 38

	)

10 
	#ENOTEMPTY
 39

	)

11 
	#ELOOP
 40

	)

12 
	#EWOULDBLOCK
 
EAGAIN


	)

13 
	#ENOMSG
 42

	)

14 
	#EIDRM
 43

	)

15 
	#ECHRNG
 44

	)

16 
	#EL2NSYNC
 45

	)

17 
	#EL3HLT
 46

	)

18 
	#EL3RST
 47

	)

19 
	#ELNRNG
 48

	)

20 
	#EUNATCH
 49

	)

21 
	#ENOCSI
 50

	)

22 
	#EL2HLT
 51

	)

23 
	#EBADE
 52

	)

24 
	#EBADR
 53

	)

25 
	#EXFULL
 54

	)

26 
	#ENOANO
 55

	)

27 
	#EBADRQC
 56

	)

28 
	#EBADSLT
 57

	)

30 
	#EDEADLOCK
 
EDEADLK


	)

32 
	#EBFONT
 59

	)

33 
	#ENOSTR
 60

	)

34 
	#ENODATA
 61

	)

35 
	#ETIME
 62

	)

36 
	#ENOSR
 63

	)

37 
	#ENONET
 64

	)

38 
	#ENOPKG
 65

	)

39 
	#EREMOTE
 66

	)

40 
	#ENOLINK
 67

	)

41 
	#EADV
 68

	)

42 
	#ESRMNT
 69

	)

43 
	#ECOMM
 70

	)

44 
	#EPROTO
 71

	)

45 
	#EMULTIHOP
 72

	)

46 
	#EDOTDOT
 73

	)

47 
	#EBADMSG
 74

	)

48 
	#EOVERFLOW
 75

	)

49 
	#ENOTUNIQ
 76

	)

50 
	#EBADFD
 77

	)

51 
	#EREMCHG
 78

	)

52 
	#ELIBACC
 79

	)

53 
	#ELIBBAD
 80

	)

54 
	#ELIBSCN
 81

	)

55 
	#ELIBMAX
 82

	)

56 
	#ELIBEXEC
 83

	)

57 
	#EILSEQ
 84

	)

58 
	#ERESTART
 85

	)

59 
	#ESTRPIPE
 86

	)

60 
	#EUSERS
 87

	)

61 
	#ENOTSOCK
 88

	)

62 
	#EDESTADDRREQ
 89

	)

63 
	#EMSGSIZE
 90

	)

64 
	#EPROTOTYPE
 91

	)

65 
	#ENOPROTOOPT
 92

	)

66 
	#EPROTONOSUPPORT
 93

	)

67 
	#ESOCKTNOSUPPORT
 94

	)

68 
	#EOPNOTSUPP
 95

	)

69 
	#EPFNOSUPPORT
 96

	)

70 
	#EAFNOSUPPORT
 97

	)

71 
	#EADDRINUSE
 98

	)

72 
	#EADDRNOTAVAIL
 99

	)

73 
	#ENETDOWN
 100

	)

74 
	#ENETUNREACH
 101

	)

75 
	#ENETRESET
 102

	)

76 
	#ECONNABORTED
 103

	)

77 
	#ECONNRESET
 104

	)

78 
	#ENOBUFS
 105

	)

79 
	#EISCONN
 106

	)

80 
	#ENOTCONN
 107

	)

81 
	#ESHUTDOWN
 108

	)

82 
	#ETOOMANYREFS
 109

	)

83 
	#ETIMEDOUT
 110

	)

84 
	#ECONNREFUSED
 111

	)

85 
	#EHOSTDOWN
 112

	)

86 
	#EHOSTUNREACH
 113

	)

87 
	#EALREADY
 114

	)

88 
	#EINPROGRESS
 115

	)

89 
	#ESTALE
 116

	)

90 
	#EUCLEAN
 117

	)

91 
	#ENOTNAM
 118

	)

92 
	#ENAVAIL
 119

	)

93 
	#EISNAM
 120

	)

94 
	#EREMOTEIO
 121

	)

95 
	#EDQUOT
 122

	)

97 
	#ENOMEDIUM
 123

	)

98 
	#EMEDIUMTYPE
 124

	)

99 
	#ECANCELED
 125

	)

100 
	#ENOKEY
 126

	)

101 
	#EKEYEXPIRED
 127

	)

102 
	#EKEYREVOKED
 128

	)

103 
	#EKEYREJECTED
 129

	)

106 
	#EOWNERDEAD
 130

	)

107 
	#ENOTRECOVERABLE
 131

	)

109 
	#ERFKILL
 132

	)

111 
	#EHWPOISON
 133

	)

	@/usr/include/asm-generic/ioctl.h

1 #i‚de‡
_ASM_GENERIC_IOCTL_H


2 
	#_ASM_GENERIC_IOCTL_H


	)

22 
	#_IOC_NRBITS
 8

	)

23 
	#_IOC_TYPEBITS
 8

	)

30 #i‚de‡
_IOC_SIZEBITS


31 
	#_IOC_SIZEBITS
 14

	)

34 #i‚de‡
_IOC_DIRBITS


35 
	#_IOC_DIRBITS
 2

	)

38 
	#_IOC_NRMASK
 ((1 << 
_IOC_NRBITS
)-1)

	)

39 
	#_IOC_TYPEMASK
 ((1 << 
_IOC_TYPEBITS
)-1)

	)

40 
	#_IOC_SIZEMASK
 ((1 << 
_IOC_SIZEBITS
)-1)

	)

41 
	#_IOC_DIRMASK
 ((1 << 
_IOC_DIRBITS
)-1)

	)

43 
	#_IOC_NRSHIFT
 0

	)

44 
	#_IOC_TYPESHIFT
 (
_IOC_NRSHIFT
+
_IOC_NRBITS
)

	)

45 
	#_IOC_SIZESHIFT
 (
_IOC_TYPESHIFT
+
_IOC_TYPEBITS
)

	)

46 
	#_IOC_DIRSHIFT
 (
_IOC_SIZESHIFT
+
_IOC_SIZEBITS
)

	)

53 #i‚de‡
_IOC_NONE


54 
	#_IOC_NONE
 0U

	)

57 #i‚de‡
_IOC_WRITE


58 
	#_IOC_WRITE
 1U

	)

61 #i‚de‡
_IOC_READ


62 
	#_IOC_READ
 2U

	)

65 
	#_IOC
(
dú
,
ty≥
,
ƒ
,
size
) \

66 (((
dú
Ë<< 
_IOC_DIRSHIFT
) | \

67 ((
ty≥
Ë<< 
_IOC_TYPESHIFT
) | \

68 ((
ƒ
Ë<< 
_IOC_NRSHIFT
) | \

69 ((
size
Ë<< 
_IOC_SIZESHIFT
))

	)

71 
	#_IOC_TYPECHECK
(
t
Ë(—))

	)

74 
	#_IO
(
ty≥
,
ƒ
Ë
	`_IOC
(
_IOC_NONE
,—y≥),“r),0)

	)

75 
	#_IOR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

76 
	#_IOW
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

77 
	#_IOWR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

78 
	#_IOR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(size))

	)

79 
	#_IOW_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(size))

	)

80 
	#_IOWR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(size))

	)

83 
	#_IOC_DIR
(
ƒ
Ë((“rË>> 
_IOC_DIRSHIFT
Ë& 
_IOC_DIRMASK
)

	)

84 
	#_IOC_TYPE
(
ƒ
Ë((“rË>> 
_IOC_TYPESHIFT
Ë& 
_IOC_TYPEMASK
)

	)

85 
	#_IOC_NR
(
ƒ
Ë((“rË>> 
_IOC_NRSHIFT
Ë& 
_IOC_NRMASK
)

	)

86 
	#_IOC_SIZE
(
ƒ
Ë((“rË>> 
_IOC_SIZESHIFT
Ë& 
_IOC_SIZEMASK
)

	)

90 
	#IOC_IN
 (
_IOC_WRITE
 << 
_IOC_DIRSHIFT
)

	)

91 
	#IOC_OUT
 (
_IOC_READ
 << 
_IOC_DIRSHIFT
)

	)

92 
	#IOC_INOUT
 ((
_IOC_WRITE
|
_IOC_READ
Ë<< 
_IOC_DIRSHIFT
)

	)

93 
	#IOCSIZE_MASK
 (
_IOC_SIZEMASK
 << 
_IOC_SIZESHIFT
)

	)

94 
	#IOCSIZE_SHIFT
 (
_IOC_SIZESHIFT
)

	)

	@/usr/include/asm-generic/ioctls.h

1 #i‚de‡
__ASM_GENERIC_IOCTLS_H


2 
	#__ASM_GENERIC_IOCTLS_H


	)

4 
	~<löux/io˘l.h
>

19 
	#TCGETS
 0x5401

	)

20 
	#TCSETS
 0x5402

	)

21 
	#TCSETSW
 0x5403

	)

22 
	#TCSETSF
 0x5404

	)

23 
	#TCGETA
 0x5405

	)

24 
	#TCSETA
 0x5406

	)

25 
	#TCSETAW
 0x5407

	)

26 
	#TCSETAF
 0x5408

	)

27 
	#TCSBRK
 0x5409

	)

28 
	#TCXONC
 0x540A

	)

29 
	#TCFLSH
 0x540B

	)

30 
	#TIOCEXCL
 0x540C

	)

31 
	#TIOCNXCL
 0x540D

	)

32 
	#TIOCSCTTY
 0x540E

	)

33 
	#TIOCGPGRP
 0x540F

	)

34 
	#TIOCSPGRP
 0x5410

	)

35 
	#TIOCOUTQ
 0x5411

	)

36 
	#TIOCSTI
 0x5412

	)

37 
	#TIOCGWINSZ
 0x5413

	)

38 
	#TIOCSWINSZ
 0x5414

	)

39 
	#TIOCMGET
 0x5415

	)

40 
	#TIOCMBIS
 0x5416

	)

41 
	#TIOCMBIC
 0x5417

	)

42 
	#TIOCMSET
 0x5418

	)

43 
	#TIOCGSOFTCAR
 0x5419

	)

44 
	#TIOCSSOFTCAR
 0x541A

	)

45 
	#FIONREAD
 0x541B

	)

46 
	#TIOCINQ
 
FIONREAD


	)

47 
	#TIOCLINUX
 0x541C

	)

48 
	#TIOCCONS
 0x541D

	)

49 
	#TIOCGSERIAL
 0x541E

	)

50 
	#TIOCSSERIAL
 0x541F

	)

51 
	#TIOCPKT
 0x5420

	)

52 
	#FIONBIO
 0x5421

	)

53 
	#TIOCNOTTY
 0x5422

	)

54 
	#TIOCSETD
 0x5423

	)

55 
	#TIOCGETD
 0x5424

	)

56 
	#TCSBRKP
 0x5425

	)

57 
	#TIOCSBRK
 0x5427

	)

58 
	#TIOCCBRK
 0x5428

	)

59 
	#TIOCGSID
 0x5429

	)

60 
	#TCGETS2
 
	`_IOR
('T', 0x2A, 
ãrmios2
)

	)

61 
	#TCSETS2
 
	`_IOW
('T', 0x2B, 
ãrmios2
)

	)

62 
	#TCSETSW2
 
	`_IOW
('T', 0x2C, 
ãrmios2
)

	)

63 
	#TCSETSF2
 
	`_IOW
('T', 0x2D, 
ãrmios2
)

	)

64 
	#TIOCGRS485
 0x542E

	)

65 #i‚de‡
TIOCSRS485


66 
	#TIOCSRS485
 0x542F

	)

68 
	#TIOCGPTN
 
	`_IOR
('T', 0x30, Ë

	)

69 
	#TIOCSPTLCK
 
	`_IOW
('T', 0x31, Ë

	)

70 
	#TIOCGDEV
 
	`_IOR
('T', 0x32, Ë

	)

71 
	#TCGETX
 0x5432

	)

72 
	#TCSETX
 0x5433

	)

73 
	#TCSETXF
 0x5434

	)

74 
	#TCSETXW
 0x5435

	)

75 
	#TIOCSIG
 
	`_IOW
('T', 0x36, Ë

	)

76 
	#TIOCVHANGUP
 0x5437

	)

77 
	#TIOCGPKT
 
	`_IOR
('T', 0x38, Ë

	)

78 
	#TIOCGPTLCK
 
	`_IOR
('T', 0x39, Ë

	)

79 
	#TIOCGEXCL
 
	`_IOR
('T', 0x40, Ë

	)

81 
	#FIONCLEX
 0x5450

	)

82 
	#FIOCLEX
 0x5451

	)

83 
	#FIOASYNC
 0x5452

	)

84 
	#TIOCSERCONFIG
 0x5453

	)

85 
	#TIOCSERGWILD
 0x5454

	)

86 
	#TIOCSERSWILD
 0x5455

	)

87 
	#TIOCGLCKTRMIOS
 0x5456

	)

88 
	#TIOCSLCKTRMIOS
 0x5457

	)

89 
	#TIOCSERGSTRUCT
 0x5458

	)

90 
	#TIOCSERGETLSR
 0x5459

	)

91 
	#TIOCSERGETMULTI
 0x545A

	)

92 
	#TIOCSERSETMULTI
 0x545B

	)

94 
	#TIOCMIWAIT
 0x545C

	)

95 
	#TIOCGICOUNT
 0x545D

	)

101 #i‚de‡
FIOQSIZE


102 
	#FIOQSIZE
 0x5460

	)

106 
	#TIOCPKT_DATA
 0

	)

107 
	#TIOCPKT_FLUSHREAD
 1

	)

108 
	#TIOCPKT_FLUSHWRITE
 2

	)

109 
	#TIOCPKT_STOP
 4

	)

110 
	#TIOCPKT_START
 8

	)

111 
	#TIOCPKT_NOSTOP
 16

	)

112 
	#TIOCPKT_DOSTOP
 32

	)

113 
	#TIOCPKT_IOCTL
 64

	)

115 
	#TIOCSER_TEMT
 0x01

	)

	@/usr/include/asm-generic/ipcbuf.h

1 #i‚de‡
__ASM_GENERIC_IPCBUF_H


2 
	#__ASM_GENERIC_IPCBUF_H


	)

19 
	sùc64_≥rm
 {

20 
__kî√l_key_t
 
	mkey
;

21 
__kî√l_uid32_t
 
	muid
;

22 
__kî√l_gid32_t
 
	mgid
;

23 
__kî√l_uid32_t
 
	mcuid
;

24 
__kî√l_gid32_t
 
	mcgid
;

25 
__kî√l_mode_t
 
	mmode
;

27 
	m__∑d1
[4 - (
__kî√l_mode_t
)];

28 
	m£q
;

29 
	m__∑d2
;

30 
	m__unu£d1
;

31 
	m__unu£d2
;

	@/usr/include/asm-generic/socket.h

1 #i‚de‡
__ASM_GENERIC_SOCKET_H


2 
	#__ASM_GENERIC_SOCKET_H


	)

4 
	~<asm/sockios.h
>

7 
	#SOL_SOCKET
 1

	)

9 
	#SO_DEBUG
 1

	)

10 
	#SO_REUSEADDR
 2

	)

11 
	#SO_TYPE
 3

	)

12 
	#SO_ERROR
 4

	)

13 
	#SO_DONTROUTE
 5

	)

14 
	#SO_BROADCAST
 6

	)

15 
	#SO_SNDBUF
 7

	)

16 
	#SO_RCVBUF
 8

	)

17 
	#SO_SNDBUFFORCE
 32

	)

18 
	#SO_RCVBUFFORCE
 33

	)

19 
	#SO_KEEPALIVE
 9

	)

20 
	#SO_OOBINLINE
 10

	)

21 
	#SO_NO_CHECK
 11

	)

22 
	#SO_PRIORITY
 12

	)

23 
	#SO_LINGER
 13

	)

24 
	#SO_REUSEPORT
 15

	)

25 #i‚de‡
SO_PASSCRED


26 
	#SO_PASSCRED
 16

	)

27 
	#SO_PEERCRED
 17

	)

28 
	#SO_RCVLOWAT
 18

	)

29 
	#SO_SNDLOWAT
 19

	)

30 
	#SO_RCVTIMEO
 20

	)

31 
	#SO_SNDTIMEO
 21

	)

35 
	#SO_SECURITY_AUTHENTICATION
 22

	)

36 
	#SO_SECURITY_ENCRYPTION_TRANSPORT
 23

	)

37 
	#SO_SECURITY_ENCRYPTION_NETWORK
 24

	)

39 
	#SO_BINDTODEVICE
 25

	)

42 
	#SO_ATTACH_FILTER
 26

	)

43 
	#SO_DETACH_FILTER
 27

	)

44 
	#SO_GET_FILTER
 
SO_ATTACH_FILTER


	)

46 
	#SO_PEERNAME
 28

	)

47 
	#SO_TIMESTAMP
 29

	)

48 
	#SCM_TIMESTAMP
 
SO_TIMESTAMP


	)

50 
	#SO_ACCEPTCONN
 30

	)

52 
	#SO_PEERSEC
 31

	)

53 
	#SO_PASSSEC
 34

	)

54 
	#SO_TIMESTAMPNS
 35

	)

55 
	#SCM_TIMESTAMPNS
 
SO_TIMESTAMPNS


	)

57 
	#SO_MARK
 36

	)

59 
	#SO_TIMESTAMPING
 37

	)

60 
	#SCM_TIMESTAMPING
 
SO_TIMESTAMPING


	)

62 
	#SO_PROTOCOL
 38

	)

63 
	#SO_DOMAIN
 39

	)

65 
	#SO_RXQ_OVFL
 40

	)

67 
	#SO_WIFI_STATUS
 41

	)

68 
	#SCM_WIFI_STATUS
 
SO_WIFI_STATUS


	)

69 
	#SO_PEEK_OFF
 42

	)

72 
	#SO_NOFCS
 43

	)

74 
	#SO_LOCK_FILTER
 44

	)

76 
	#SO_SELECT_ERR_QUEUE
 45

	)

78 
	#SO_BUSY_POLL
 46

	)

	@/usr/include/asm/bitsperlong.h

1 #i‚de‡
__ASM_X86_BITSPERLONG_H


2 
	#__ASM_X86_BITSPERLONG_H


	)

4 #ifde‡
__x86_64__


5 
	#__BITS_PER_LONG
 64

	)

7 
	#__BITS_PER_LONG
 32

	)

10 
	~<asm-gíîic/bô•îl⁄g.h
>

	@/usr/include/asm/param.h

1 
	~<asm-gíîic/∑øm.h
>

	@/usr/include/asm/posix_types_32.h

1 #i‚de‡
_ASM_X86_POSIX_TYPES_32_H


2 
	#_ASM_X86_POSIX_TYPES_32_H


	)

10 
	t__kî√l_mode_t
;

11 
	#__kî√l_mode_t
 
__kî√l_mode_t


	)

13 
	t__kî√l_ùc_pid_t
;

14 
	#__kî√l_ùc_pid_t
 
__kî√l_ùc_pid_t


	)

16 
	t__kî√l_uid_t
;

17 
	t__kî√l_gid_t
;

18 
	#__kî√l_uid_t
 
__kî√l_uid_t


	)

20 
	t__kî√l_ﬁd_dev_t
;

21 
	#__kî√l_ﬁd_dev_t
 
__kî√l_ﬁd_dev_t


	)

23 
	~<asm-gíîic/posix_ty≥s.h
>

	@/usr/include/asm/posix_types_64.h

1 #i‚de‡
_ASM_X86_POSIX_TYPES_64_H


2 
	#_ASM_X86_POSIX_TYPES_64_H


	)

10 
	t__kî√l_ﬁd_uid_t
;

11 
	t__kî√l_ﬁd_gid_t
;

12 
	#__kî√l_ﬁd_uid_t
 
__kî√l_ﬁd_uid_t


	)

14 
	t__kî√l_ﬁd_dev_t
;

15 
	#__kî√l_ﬁd_dev_t
 
__kî√l_ﬁd_dev_t


	)

17 
	~<asm-gíîic/posix_ty≥s.h
>

	@/usr/include/asm/posix_types_x32.h

1 #i‚de‡
_ASM_X86_POSIX_TYPES_X32_H


2 
	#_ASM_X86_POSIX_TYPES_X32_H


	)

13 
	t__kî√l_l⁄g_t
;

14 
	t__kî√l_ul⁄g_t
;

15 
	#__kî√l_l⁄g_t
 
__kî√l_l⁄g_t


	)

17 
	~<asm/posix_ty≥s_64.h
>

	@/usr/include/asm/swab.h

1 #i‚de‡
_ASM_X86_SWAB_H


2 
	#_ASM_X86_SWAB_H


	)

4 
	~<löux/ty≥s.h
>

7 
__ölöe__
 
__u32
 
	$__¨ch_swab32
(
__u32
 
vÆ
)

9 
	`__asm__
("bsw≠»%0" : "Ù" (
vÆ
) : "0" (val));

10  
vÆ
;

11 
	}
}

12 
	#__¨ch_swab32
 
__¨ch_swab32


	)

14 
__ölöe__
 
__u64
 
	$__¨ch_swab64
(
__u64
 
vÆ
)

16 #ifde‡
__i386__


19 
__u32
 
a
;

20 
__u32
 
b
;

21 } 
s
;

22 
__u64
 
u
;

23 } 
v
;

24 
v
.
u
 = 
vÆ
;

25 
	`__asm__
("bswapl %0 ; bswapl %1 ; xchgl %0,%1"

26 : "Ù" (
v
.
s
.
a
), "Ù" (v.s.
b
)

27 : "0" (
v
.
s
.
a
), "1" (v.s.
b
));

28  
v
.
u
;

30 
	`__asm__
("bsw≠q %0" : "Ù" (
vÆ
) : "0" (val));

31  
vÆ
;

33 
	}
}

34 
	#__¨ch_swab64
 
__¨ch_swab64


	)

	@/usr/include/bits/libc-lock.h

19 #i‚de‡
_BITS_LIBC_LOCK_H


20 
	#_BITS_LIBC_LOCK_H
 1

	)

22 
	~<±hªad.h
>

23 
	#__√ed_NULL


	)

24 
	~<°ddef.h
>

28 #i‡
deföed
 
_LIBC
 || deföed 
_IO_MTSAFE_IO


29 #i‡(
deföed
 
NOT_IN_libc
 && !deföed 
IS_IN_lib±hªad
Ë|| !deföed 
_LIBC


30 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__libc_lock_ªcursive_t
;

32 °ru˘ { 
	mlock
; 
	m˙t
; *
	mow√r
; } 
	t__libc_lock_ªcursive_t
;

35 
__libc_lock_ªcursive_›aque__
 
	t__libc_lock_ªcursive_t
;

45 
	#__libc_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

46 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

50 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

51 #i‡
LLL_LOCK_INITIALIZER
 == 0

52 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

53 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

55 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

56 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

58 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

59 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

61 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

62 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

63 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

64 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

68 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

69 
	#__libc_lock_öô_ªcursive
(
NAME
) \

70 ((
NAME
Ë(
__libc_lock_ªcursive_t
Ë
_LIBC_LOCK_RECURSIVE_INITIALIZER
, 0)

	)

72 
	#__libc_lock_öô_ªcursive
(
NAME
) \

74 i‡(
__±hªad_muãx_öô
 !
NULL
) \

76 
±hªad_muãx©å_t
 
__©å
; \

77 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

78 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

79 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

80 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

82 } 0)

	)

86 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

87 
	#__libc_lock_föi_ªcursive
(
NAME
Ë((Ë0)

	)

89 
	#__libc_lock_föi_ªcursive
(
NAME
) \

90 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_de°roy
, (&(
NAME
)), 0)

	)

94 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

95 
	#__libc_lock_lock_ªcursive
(
NAME
) \

97 *
£lf
 = 
THREAD_SELF
; \

98 i‡((
NAME
).
ow√r
 !
£lf
) \

100 
	`Œl_lock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

101 (
NAME
).
ow√r
 = 
£lf
; \

103 ++(
NAME
).
˙t
; \

104 } 0)

	)

106 
	#__libc_lock_lock_ªcursive
(
NAME
) \

107 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
).
muãx
), 0)

	)

111 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

112 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

114 
ªsu…
 = 0; \

115 *
£lf
 = 
THREAD_SELF
; \

116 i‡((
NAME
).
ow√r
 !
£lf
) \

118 i‡(
	`Œl_åylock
 ((
NAME
).
lock
) == 0) \

120 (
NAME
).
ow√r
 = 
£lf
; \

121 (
NAME
).
˙t
 = 1; \

124 
ªsu…
 = 
EBUSY
; \

127 ++(
NAME
).
˙t
; \

128 
ªsu…
; \

129 })

	)

131 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

132 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
)), 0)

	)

136 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

138 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

140 i‡(--(
NAME
).
˙t
 == 0) \

142 (
NAME
).
ow√r
 = 
NULL
; \

143 
	`Œl_u∆ock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

145 } 0)

	)

147 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

148 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
)), 0)

	)

155 
_±hªad_˛ónup_push_de„r
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

156 (*
routöe
Ë(*), *
¨g
);

157 
	`_±hªad_˛ónup_p›_ª°‹e
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

158 
execuã
);

161 
	#__libc_˛ónup_ªgi⁄_°¨t
(
DOIT
, 
FCT
, 
ARG
) \

162 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

163 
_avaû
; \

164 i‡(
DOIT
) { \

165 
_avaû
 = 
	`PTFAVAIL
 (
_±hªad_˛ónup_push_de„r
); \

166 i‡(
_avaû
) { \

167 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_push_de„r
, (&
_buf„r
, 
FCT
, \

168 
ARG
)); \

170 
_buf„r
.
__routöe
 = (
FCT
); \

171 
_buf„r
.
__¨g
 = (
ARG
); \

174 
_avaû
 = 0; \

175 }

	)

178 
	#__libc_˛ónup_ªgi⁄_íd
(
DOIT
) \

179 i‡(
_avaû
) { \

180 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_p›_ª°‹e
, (&
_buf„r
, 
DOIT
));\

181 } i‡(
DOIT
) \

182 
_buf„r
.
	`__routöe
 (_buf„r.
__¨g
); \

183 
	}

	)
}

188 #ifde‡
_LIBC


189 
	~"libc-lockP.h
"

	@/usr/include/gconv.h

22 #i‚de‡
_GCONV_H


23 
	#_GCONV_H
 1

	)

25 
	~<„©uªs.h
>

26 
	#__√ed_mb°©e_t


	)

27 
	#__√ed_wöt_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004

64 
	g__gc⁄v_°ï
;

65 
	g__gc⁄v_°ï_d©a
;

66 
	g__gc⁄v_lﬂded_obje˘
;

67 
	g__gc⁄v_å™s_d©a
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

85 
	t__gc⁄v_°ï_d©a
 *, *,

89 
	tsize_t
 *);

92 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
) (*, const *,

97 (*
	t__gc⁄v_å™s_quîy_f˘
) (const *, const ***,

98 
	tsize_t
 *);

101 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

102 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

104 
	s__gc⁄v_å™s_d©a


107 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

108 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

109 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

110 *
__d©a
;

111 
__gc⁄v_å™s_d©a
 *
__√xt
;

116 
	s__gc⁄v_°ï


118 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

119 c⁄° *
__mod«me
;

121 
__cou¡î
;

123 *
__‰om_«me
;

124 *
__to_«me
;

126 
__gc⁄v_f˘
 
__f˘
;

127 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

128 
__gc⁄v_öô_f˘
 
__öô_f˘
;

129 
__gc⁄v_íd_f˘
 
__íd_f˘
;

133 
__mö_√eded_‰om
;

134 
__max_√eded_‰om
;

135 
__mö_√eded_to
;

136 
__max_√eded_to
;

139 
__°©eful
;

141 *
__d©a
;

146 
	s__gc⁄v_°ï_d©a


148 *
__outbuf
;

149 *
__outbu„nd
;

153 
__Êags
;

157 
__övoˇti⁄_cou¡î
;

161 
__öã∫Æ_u£
;

163 
__mb°©e_t
 *
__°©ï
;

164 
__mb°©e_t
 
__°©e
;

168 
__gc⁄v_å™s_d©a
 *
__å™s
;

173 
	s__gc⁄v_öfo


175 
size_t
 
__n°ïs
;

176 
__gc⁄v_°ï
 *
__°ïs
;

177 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

178 } *
	t__gc⁄v_t
;

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_chÊags


	)

11 
	#__°ub_Áâach


	)

12 
	#__°ub_fchÊags


	)

13 
	#__°ub_fdëach


	)

14 
	#__°ub_gây


	)

15 
	#__°ub_lchmod


	)

16 
	#__°ub_ªvoke


	)

17 
	#__°ub_£éogö


	)

18 
	#__°ub_sigªtu∫


	)

19 
	#__°ub_s°k


	)

20 
	#__°ub_°ty


	)

	@/usr/include/linux/sysinfo.h

1 #i‚de‡
_LINUX_SYSINFO_H


2 
	#_LINUX_SYSINFO_H


	)

4 
	~<löux/ty≥s.h
>

6 
	#SI_LOAD_SHIFT
 16

	)

7 
	ssysöfo
 {

8 
__kî√l_l⁄g_t
 
	mu±ime
;

9 
__kî√l_ul⁄g_t
 
	mlﬂds
[3];

10 
__kî√l_ul⁄g_t
 
	mtŸÆøm
;

11 
__kî√l_ul⁄g_t
 
	m‰ìøm
;

12 
__kî√l_ul⁄g_t
 
	msh¨edøm
;

13 
__kî√l_ul⁄g_t
 
	mbuf„ºam
;

14 
__kî√l_ul⁄g_t
 
	mtŸÆsw≠
;

15 
__kî√l_ul⁄g_t
 
	m‰ìsw≠
;

16 
__u16
 
	m¥ocs
;

17 
__u16
 
	m∑d
;

18 
__kî√l_ul⁄g_t
 
	mtŸÆhigh
;

19 
__kî√l_ul⁄g_t
 
	m‰ìhigh
;

20 
__u32
 
	mmem_unô
;

21 
	m_f
[20-2*(
__kî√l_ul⁄g_t
)-(
__u32
)];

	@/usr/include/wchar.h

23 #i‚de‡
_WCHAR_H


25 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


26 
	#_WCHAR_H
 1

	)

27 
	~<„©uªs.h
>

30 #ifde‡
_WCHAR_H


32 
	#__√ed___FILE


	)

33 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_FILE


	)

36 
	~<°dio.h
>

38 
	#__√ed___va_li°


	)

39 
	~<°d¨g.h
>

41 
	~<bôs/wch¨.h
>

44 
	#__√ed_size_t


	)

45 
	#__√ed_wch¨_t


	)

46 
	#__√ed_NULL


	)

48 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


49 #unde‡
__√ed_wöt_t


50 
	#__√ed_wöt_t


	)

51 
	~<°ddef.h
>

55 #i‚de‡
_WINT_T


60 
	#_WINT_T


	)

61 
	twöt_t
;

65 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

66 && 
deföed
 
__WINT_TYPE__


67 
__BEGIN_NAMESPACE_STD


68 
__WINT_TYPE__
 
	twöt_t
;

69 
	g__END_NAMESPACE_STD


74 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

75 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

79 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
____mb°©e_t_deföed


80 
	#____mb°©e_t_deföed
 1

	)

84 
	m__cou¡
;

87 #ifde‡
__WINT_TYPE__


88 
__WINT_TYPE__
 
	m__wch
;

90 
wöt_t
 
	m__wch
;

92 
	m__wchb
[4];

93 } 
	m__vÆue
;

94 } 
	t__mb°©e_t
;

96 #unde‡
__√ed_mb°©e_t


101 #ifde‡
_WCHAR_H


103 #i‚de‡
__mb°©e_t_deföed


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 
	#__mb°©e_t_deföed
 1

	)

111 #ifde‡
__USE_GNU


112 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

115 #i‚de‡
WCHAR_MIN


117 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

118 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

121 #i‚de‡
WEOF


122 
	#WEOF
 (0xffffffffu)

	)

127 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


128 
	~<w˘y≥.h
>

132 
__BEGIN_DECLS


134 
__BEGIN_NAMESPACE_STD


137 
tm
;

138 
__END_NAMESPACE_STD


142 
	$__USING_NAMESPACE_STD
(
tm
)

145 
__BEGIN_NAMESPACE_STD


147 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

150 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

151 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
;

155 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

158 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

159 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

160 
__THROW
;

163 
	$wcscmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
)

164 
__THROW
 
__©åibuã_puª__
;

166 
	$wc¢cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

167 
__THROW
 
__©åibuã_puª__
;

168 
__END_NAMESPACE_STD


170 #ifde‡
__USE_XOPEN2K8


172 
	$wcsˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

175 
	$wc¢ˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

176 
size_t
 
__n
Ë
__THROW
;

180 
	~<xloˇÀ.h
>

182 
	$wcsˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

183 
__loˇÀ_t
 
__loc
Ë
__THROW
;

185 
	$wc¢ˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

186 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


192 
	$wcscﬁl
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

196 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

197 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

198 
__END_NAMESPACE_STD


200 #ifde‡
__USE_XOPEN2K8


206 
	$wcscﬁl_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

207 
__loˇÀ_t
 
__loc
Ë
__THROW
;

212 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

213 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

216 
wch¨_t
 *
	$wcsdup
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

219 
__BEGIN_NAMESPACE_STD


221 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


222 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

223 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 "C++" c⁄° 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

227 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

228 
__THROW
 
__©åibuã_puª__
;

231 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


232 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

233 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 "C++" c⁄° 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

237 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

238 
__THROW
 
__©åibuã_puª__
;

240 
__END_NAMESPACE_STD


242 #ifde‡
__USE_GNU


245 
wch¨_t
 *
	$wcsch∫ul
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__wc
)

246 
__THROW
 
__©åibuã_puª__
;

249 
__BEGIN_NAMESPACE_STD


252 
size_t
 
	$wcsc•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ªje˘
)

253 
__THROW
 
__©åibuã_puª__
;

256 
size_t
 
	$wcs•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

257 
__THROW
 
__©åibuã_puª__
;

259 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


260 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

262 "C++" c⁄° 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
,

263 c⁄° 
wch¨_t
 *
__ac˚±
)

264 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

266 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

267 
__THROW
 
__©åibuã_puª__
;

270 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


271 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

273 "C++" c⁄° 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
,

274 c⁄° 
wch¨_t
 *
__√edÀ
)

275 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

277 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

278 
__THROW
 
__©åibuã_puª__
;

282 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

283 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

284 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

287 
size_t
 
	$wc¶í
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

288 
__END_NAMESPACE_STD


290 #ifde‡
__USE_XOPEN


292 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


293 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

295 "C++" c⁄° 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
,

296 c⁄° 
wch¨_t
 *
__√edÀ
)

297 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

299 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

300 
__THROW
 
__©åibuã_puª__
;

304 #ifde‡
__USE_XOPEN2K8


306 
size_t
 
	$wc¢Àn
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

307 
__THROW
 
__©åibuã_puª__
;

311 
__BEGIN_NAMESPACE_STD


313 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


314 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

316 "C++" c⁄° 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
,

317 
size_t
 
__n
)

318 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

320 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

321 
__THROW
 
__©åibuã_puª__
;

325 
	$wmemcmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

326 
__THROW
 
__©åibuã_puª__
;

329 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

330 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

334 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

335 
__THROW
;

338 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

339 
__END_NAMESPACE_STD


341 #ifde‡
__USE_GNU


344 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

345 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

346 
__THROW
;

350 
__BEGIN_NAMESPACE_STD


353 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

357 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

361 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

365 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

366 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

367 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

370 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

371 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

374 
size_t
 
	$__mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
size_t
 
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

377 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

378 
__END_NAMESPACE_STD


380 #ifde‡
__USE_EXTERN_INLINES


386 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

387 
__exã∫_ölöe
 
wöt_t


388 
	`__NTH
 (
	$btowc
 (
__c
))

389 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

390 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

392 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

393 
__exã∫_ölöe
 

394 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

395 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

396 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

398 
__exã∫_ölöe
 
size_t


399 
__NTH
 (
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

400 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

401 {  (
__ps
 !
NULL


402 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

405 
__BEGIN_NAMESPACE_STD


408 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

409 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

410 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

414 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

415 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

416 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

417 
__END_NAMESPACE_STD


420 #ifdef 
__USE_XOPEN2K8


423 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

424 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

425 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

429 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

430 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

431 
size_t
 
__nwc
, size_à
__Àn
,

432 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

437 #ifde‡
__USE_XOPEN


439 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

443 
	$wcswidth
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

447 
__BEGIN_NAMESPACE_STD


450 
	$wc°od
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

451 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

452 
__END_NAMESPACE_STD


454 #ifde‡
__USE_ISOC99


455 
__BEGIN_NAMESPACE_C99


457 
	$wc°of
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

459 
	$wc°ﬁd
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

460 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

461 
__END_NAMESPACE_C99


465 
__BEGIN_NAMESPACE_STD


468 
	$wc°ﬁ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

469 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

473 
	$wc°oul
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

474 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

475 
__THROW
;

476 
__END_NAMESPACE_STD


478 #ifde‡
__USE_ISOC99


479 
__BEGIN_NAMESPACE_C99


482 
__exãnsi⁄__


483 
	$wc°ﬁl
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

484 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

485 
__THROW
;

489 
__exãnsi⁄__


490 
	$wc°ouŒ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

491 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

492 
__ba£
Ë
__THROW
;

493 
__END_NAMESPACE_C99


496 #ifde‡
__USE_GNU


499 
__exãnsi⁄__


500 
	$wc°oq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

501 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

502 
__THROW
;

506 
__exãnsi⁄__


507 
	$wc°ouq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

508 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

509 
__ba£
Ë
__THROW
;

512 #ifde‡
__USE_GNU


526 
	~<xloˇÀ.h
>

530 
	$wc°ﬁ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

531 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

532 
__loˇÀ_t
 
__loc
Ë
__THROW
;

534 
	$wc°oul_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

535 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

536 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

538 
__exãnsi⁄__


539 
	$wc°ﬁl_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

540 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

541 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

543 
__exãnsi⁄__


544 
	$wc°ouŒ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

545 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

546 
__ba£
, 
__loˇÀ_t
 
__loc
)

547 
__THROW
;

549 
	$wc°od_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

550 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

551 
__THROW
;

553 
	$wc°of_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

554 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

555 
__THROW
;

557 
	$wc°ﬁd_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

558 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

559 
__loˇÀ_t
 
__loc
Ë
__THROW
;

563 #ifde‡
__USE_XOPEN2K8


566 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

567 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

571 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

572 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

573 
__THROW
;

580 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

583 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


584 
__BEGIN_NAMESPACE_STD


587 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

594 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

595 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

601 
	`w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

605 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

606 
__THROW
 ;

612 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

613 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

614 
__gnuc_va_li°
 
__¨g
)

620 
	`vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

621 
__gnuc_va_li°
 
__¨g
)

625 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

626 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

627 
__gnuc_va_li°
 
__¨g
)

628 
__THROW
 ;

635 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

636 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

642 
	`wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
	$swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

646 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

647 
__THROW
 ;

649 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

650 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

651 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

652 #ifde‡
__REDIRECT


656 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

657 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

658 
__isoc99_fwsˇnf
)

660 
	`__REDIRECT
 (
wsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

661 
__isoc99_wsˇnf
)

663 
	`__REDIRECT_NTH
 (
swsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

664 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

665 ...), 
__isoc99_swsˇnf
)

668 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

669 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

670 
	`__isoc99_wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

671 
	$__isoc99_swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

672 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

673 
__THROW
;

674 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

675 
	#wsˇnf
 
__isoc99_wsˇnf


	)

676 
	#swsˇnf
 
__isoc99_swsˇnf


	)

680 
__END_NAMESPACE_STD


683 #ifde‡
__USE_ISOC99


684 
__BEGIN_NAMESPACE_C99


689 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

690 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

691 
__gnuc_va_li°
 
__¨g
)

697 
	`vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

698 
__gnuc_va_li°
 
__¨g
)

701 
	$vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

702 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

703 
__gnuc_va_li°
 
__¨g
)

704 
__THROW
 ;

706 #i‡!
deföed
 
__USE_GNU
 \

707 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

708 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

709 #ifde‡
__REDIRECT


710 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

711 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

712 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

714 
	`__REDIRECT
 (
vwsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

715 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

717 
	`__REDIRECT_NTH
 (
vswsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

718 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

719 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

722 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

723 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

724 
__gnuc_va_li°
 
__¨g
);

725 
	`__isoc99_vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

726 
__gnuc_va_li°
 
__¨g
);

727 
	$__isoc99_vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

728 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

729 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

730 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

731 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

732 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

736 
__END_NAMESPACE_C99


740 
__BEGIN_NAMESPACE_STD


745 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

746 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

752 
wöt_t
 
	`gëwch¨
 ();

759 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

760 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

766 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

774 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

775 
__FILE
 *
__ª°ri˘
 
__°ªam
);

781 
	`Âutws
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

782 
__FILE
 *
__ª°ri˘
 
__°ªam
);

789 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

790 
__END_NAMESPACE_STD


793 #ifde‡
__USE_GNU


801 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

802 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

810 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

818 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

827 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

828 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

837 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

838 
__FILE
 *
__ª°ri˘
 
__°ªam
);

846 
	`Âutws_u∆ocked
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

847 
__FILE
 *
__ª°ri˘
 
__°ªam
);

851 
__BEGIN_NAMESPACE_C99


855 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

856 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

857 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

858 
__END_NAMESPACE_C99


860 #ifde‡
__USE_GNU


861 
	~<xloˇÀ.h
>

865 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

866 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

867 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

868 
__loˇÀ_t
 
__loc
Ë
__THROW
;

877 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


878 
	#__√ed_iswxxx


	)

879 
	~<w˘y≥.h
>

883 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


884 
	~<bôs/wch¨2.h
>

887 #ifde‡
__LDBL_COMPAT


888 
	~<bôs/wch¨-ldbl.h
>

891 
__END_DECLS


899 #unde‡
__√ed_mb°©e_t


900 #unde‡
__√ed_wöt_t


	@/usr/include/asm-generic/bitsperlong.h

1 #i‚de‡
__ASM_GENERIC_BITS_PER_LONG


2 
	#__ASM_GENERIC_BITS_PER_LONG


	)

11 #i‚de‡
__BITS_PER_LONG


12 
	#__BITS_PER_LONG
 32

	)

	@/usr/include/asm-generic/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@/usr/include/asm-generic/param.h

1 #i‚de‡
__ASM_GENERIC_PARAM_H


2 
	#__ASM_GENERIC_PARAM_H


	)

4 #i‚de‡
HZ


5 
	#HZ
 100

	)

8 #i‚de‡
EXEC_PAGESIZE


9 
	#EXEC_PAGESIZE
 4096

	)

12 #i‚de‡
NOGROUP


13 
	#NOGROUP
 (-1)

	)

16 
	#MAXHOSTNAMELEN
 64

	)

	@/usr/include/asm-generic/posix_types.h

1 #i‚de‡
__ASM_GENERIC_POSIX_TYPES_H


2 
	#__ASM_GENERIC_POSIX_TYPES_H


	)

4 
	~<asm/bô•îl⁄g.h
>

13 #i‚de‡
__kî√l_l⁄g_t


14 
	t__kî√l_l⁄g_t
;

15 
	t__kî√l_ul⁄g_t
;

18 #i‚de‡
__kî√l_öo_t


19 
__kî√l_ul⁄g_t
 
	t__kî√l_öo_t
;

22 #i‚de‡
__kî√l_mode_t


23 
	t__kî√l_mode_t
;

26 #i‚de‡
__kî√l_pid_t


27 
	t__kî√l_pid_t
;

30 #i‚de‡
__kî√l_ùc_pid_t


31 
	t__kî√l_ùc_pid_t
;

34 #i‚de‡
__kî√l_uid_t


35 
	t__kî√l_uid_t
;

36 
	t__kî√l_gid_t
;

39 #i‚de‡
__kî√l_su£c⁄ds_t


40 
__kî√l_l⁄g_t
 
	t__kî√l_su£c⁄ds_t
;

43 #i‚de‡
__kî√l_daddr_t


44 
	t__kî√l_daddr_t
;

47 #i‚de‡
__kî√l_uid32_t


48 
	t__kî√l_uid32_t
;

49 
	t__kî√l_gid32_t
;

52 #i‚de‡
__kî√l_ﬁd_uid_t


53 
__kî√l_uid_t
 
	t__kî√l_ﬁd_uid_t
;

54 
__kî√l_gid_t
 
	t__kî√l_ﬁd_gid_t
;

57 #i‚de‡
__kî√l_ﬁd_dev_t


58 
	t__kî√l_ﬁd_dev_t
;

65 #i‚de‡
__kî√l_size_t


66 #i‡
__BITS_PER_LONG
 != 64

67 
	t__kî√l_size_t
;

68 
	t__kî√l_ssize_t
;

69 
	t__kî√l_±rdiff_t
;

71 
__kî√l_ul⁄g_t
 
	t__kî√l_size_t
;

72 
__kî√l_l⁄g_t
 
	t__kî√l_ssize_t
;

73 
__kî√l_l⁄g_t
 
	t__kî√l_±rdiff_t
;

77 #i‚de‡
__kî√l_fsid_t


79 
	mvÆ
[2];

80 } 
	t__kî√l_fsid_t
;

86 
__kî√l_l⁄g_t
 
	t__kî√l_off_t
;

87 
	t__kî√l_loff_t
;

88 
__kî√l_l⁄g_t
 
	t__kî√l_time_t
;

89 
__kî√l_l⁄g_t
 
	t__kî√l_˛ock_t
;

90 
	t__kî√l_timî_t
;

91 
	t__kî√l_˛ockid_t
;

92 * 
	t__kî√l_ˇddr_t
;

93 
	t__kî√l_uid16_t
;

94 
	t__kî√l_gid16_t
;

	@/usr/include/asm/sockios.h

1 
	~<asm-gíîic/sockios.h
>

	@/usr/include/bits/wchar-ldbl.h

19 #i‚de‡
_WCHAR_H


23 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


24 
__BEGIN_NAMESPACE_C99


25 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

26 
__LDBL_REDIR_DECL
 (
w¥ötf
);

27 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

28 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

31 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

32 && !
deföed
 
	g__REDIRECT
 \

33 && (
deföed
 
	g__STRICT_ANSI__
 || deföed 
	g__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

38 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

39 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

40 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

42 
__END_NAMESPACE_C99


45 #ifde‡
__USE_ISOC99


46 
__BEGIN_NAMESPACE_C99


47 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

48 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

49 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

50 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

51 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

52 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

54 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

55 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

56 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

58 
__END_NAMESPACE_C99


61 #ifde‡
__USE_GNU


62 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

65 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


66 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

67 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

68 #i‡
__USE_FORTIFY_LEVEL
 > 1

69 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

70 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar2.h

19 #i‚de‡
_WCHAR_H


24 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

25 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

26 
size_t
 
__ns1
Ë
__THROW
;

27 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

28 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

29 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

30 
wmem˝y
);

31 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

32 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

33 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

34 
size_t
 
__ns1
), 
__wmem˝y_chk
)

35 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

38 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

39 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

40 
size_t
 
__n
))

42 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

44 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

45  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
,

46 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

48 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

49  
	`__wmem˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

50 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

52  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

53 
	}
}

56 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

57 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

58 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

59 c⁄° 
wch¨_t
 *
__s2
,

60 
size_t
 
__n
), 
wmemmove
);

61 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

62 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

63 
size_t
 
__n
, size_à
__ns1
), 
__wmemmove_chk
)

64 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

67 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

68 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
))

70 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

72 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

73  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

74 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

76 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

77  
	`__wmemmove_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

78 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

80  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

81 
	}
}

84 #ifde‡
__USE_GNU


85 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

86 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

87 
size_t
 
__ns1
Ë
__THROW
;

88 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

89 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

90 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
,

91 
size_t
 
__n
), 
wmemp˝y
);

92 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

93 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

94 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

95 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

96 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

99 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

100 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

101 
size_t
 
__n
))

103 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

105 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

106  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
,

107 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

109 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

110  
	`__wmemp˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

111 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

113  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

114 
	}
}

118 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

119 
size_t
 
__ns
Ë
__THROW
;

120 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

121 
size_t
 
__n
), 
wmem£t
);

122 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

123 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

124 
size_t
 
__ns
), 
__wmem£t_chk
)

125 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

128 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

129 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
))

131 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

133 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

134  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

136 i‡(
__n
 > 
	`__bos0
 (
__s
Ë/  (
wch¨_t
))

137  
	`__wmem£t_chk_w¨n
 (
__s
, 
__c
, 
__n
,

138 
	`__bos0
 (
__s
Ë/  (
wch¨_t
));

140  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

141 
	}
}

144 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

146 
size_t
 
__n
Ë
__THROW
;

147 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

148 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

149 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

151 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

152 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

154 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

155  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

156  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

157 
	}
}

160 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

161 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

162 
size_t
 
__de°Àn
Ë
__THROW
;

163 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
,

164 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

165 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
w˝˝y
);

167 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

168 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

170 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

171  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

172  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

173 
	}
}

176 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

177 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

178 
size_t
 
__de°Àn
Ë
__THROW
;

179 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

180 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

181 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

182 
size_t
 
__n
), 
wc¢˝y
);

183 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

184 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

185 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

186 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

187 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

190 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

191 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

192 
size_t
 
__n
))

194 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

196 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

197  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

198 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

199 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

200  
	`__wc¢˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

201 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

203  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

204 
	}
}

207 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

208 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

209 
size_t
 
__de°Àn
Ë
__THROW
;

210 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

211 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

212 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

213 
size_t
 
__n
), 
w˝n˝y
);

214 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

215 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

216 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

217 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

218 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

221 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

222 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

223 
size_t
 
__n
))

225 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

227 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

228  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

229 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

230 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

231  
	`__w˝n˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

232 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

234  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

235 
	}
}

238 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

239 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

240 
size_t
 
__de°Àn
Ë
__THROW
;

241 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

242 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

243 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

245 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

246 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

248 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

249  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

250  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

251 
	}
}

254 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

255 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

256 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

257 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

258 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

259 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

260 
size_t
 
__n
), 
wc¢ˇt
);

262 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

263 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

264 
size_t
 
__n
))

266 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

267  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

268 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

269  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

270 
	}
}

273 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

274 
__Êag
, 
size_t
 
__s_Àn
,

275 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

276 
__THROW
 ;

278 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

279 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

280 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

281 
sw¥ötf
);

283 #ifde‡
__va_¨g_∑ck


284 
__f‹tify_fun˘i⁄
 

285 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

286 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

288 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

289  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

290 
	`__bos
 (
__s
Ë/  (
wch¨_t
),

291 
__fmt
, 
	`__va_¨g_∑ck
 ());

292  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

293 
	}
}

294 #ñi‡!
deföed
 
__˝lu•lus


296 
	#sw¥ötf
(
s
, 
n
, ...) \

297 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

298 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

299 
	`__bos
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

300 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

303 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

304 
__Êag
, 
size_t
 
__s_Àn
,

305 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

306 
__gnuc_va_li°
 
__¨g
)

307 
__THROW
 ;

309 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

310 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

311 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

312 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

314 
__f‹tify_fun˘i⁄
 

315 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

316 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

318 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

319  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

320 
	`__bos
 (
__s
Ë/  (
wch¨_t
), 
__fmt
, 
__≠
);

321  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

322 
	}
}

325 #i‡
__USE_FORTIFY_LEVEL
 > 1

327 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

328 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

329 
__w¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

331 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

332 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

333 
__gnuc_va_li°
 
__≠
);

334 
__vw¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

335 
__gnuc_va_li°
 
__≠
);

337 #ifde‡
__va_¨g_∑ck


338 
__f‹tify_fun˘i⁄
 

339 
	$w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

341  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

342 
	}
}

344 
__f‹tify_fun˘i⁄
 

345 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

347  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

348 
	`__va_¨g_∑ck
 ());

349 
	}
}

350 #ñi‡!
deföed
 
__˝lu•lus


351 
	#w¥ötf
(...) \

352 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

353 
	#fw¥ötf
(
°ªam
, ...) \

354 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

357 
__f‹tify_fun˘i⁄
 

358 
	$vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

360  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

361 
	}
}

363 
__f‹tify_fun˘i⁄
 

364 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

365 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

367  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

368 
	}
}

372 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

373 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

374 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

375 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

376 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

377 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

378 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

379 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

380 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

383 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

384 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

386 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

388 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

389  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

390 
__n
, 
__°ªam
);

392 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

393  
	`__fgëws_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

394 
__n
, 
__°ªam
);

396  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

397 
	}
}

399 #ifde‡
__USE_GNU


400 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

401 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

402 
__wur
;

403 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

404 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

405 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

406 
__wur
;

407 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

408 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

409 
__FILE
 *
__ª°ri˘
 
__°ªam
),

410 
__fgëws_u∆ocked_chk
)

411 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

414 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

415 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

417 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

419 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

420  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

421 
__n
, 
__°ªam
);

423 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

424  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

425 
__n
, 
__°ªam
);

427  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

428 
	}
}

432 
size_t
 
	$__w¸tomb_chk
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

433 
mb°©e_t
 *
__ª°ri˘
 
__p
,

434 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

435 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

436 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

437 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

439 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


440 
	`__NTH
 (
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

441 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

446 
	#__WCHAR_MB_LEN_MAX
 16

	)

447 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


450 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

451  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

452  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

453 
	}
}

456 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

457 c⁄° **
__ª°ri˘
 
__§c
,

458 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

459 
size_t
 
__d°Àn
Ë
__THROW
;

460 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

461 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

462 c⁄° **
__ª°ri˘
 
__§c
,

463 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

464 
mb§towcs
);

465 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

466 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

467 c⁄° **
__ª°ri˘
 
__§c
,

468 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

469 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

470 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

473 
__f‹tify_fun˘i⁄
 
size_t


474 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

475 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

477 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

479 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

480  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

481 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

483 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

484  
	`__mb§towcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

485 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

487  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

488 
	}
}

491 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

492 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

493 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

494 
size_t
 
__d°Àn
Ë
__THROW
;

495 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

496 (*
__ª°ri˘
 
__d°
,

497 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

498 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

499 
wc§tombs
);

500 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

501 (*
__ª°ri˘
 
__d°
,

502 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

503 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

504 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

505 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

507 
__f‹tify_fun˘i⁄
 
size_t


508 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

509 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

511 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

513 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

514  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

516 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

517  
	`__wc§tombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

519  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

520 
	}
}

523 #ifde‡
__USE_GNU


524 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

525 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

526 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

527 
size_t
 
__d°Àn
Ë
__THROW
;

528 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

529 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

530 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

531 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

532 
mb¢πowcs
);

533 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

534 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

535 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

536 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

537 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

538 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

541 
__f‹tify_fun˘i⁄
 
size_t


542 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

543 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

545 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

547 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

548  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

549 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

551 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

552  
	`__mb¢πowcs_chk_w¨n
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

553 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

555  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

556 
	}
}

559 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

560 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

561 
size_t
 
__nwc
, size_à
__Àn
,

562 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

563 
__THROW
;

564 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

565 (*
__ª°ri˘
 
__d°
,

566 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

567 
size_t
 
__nwc
, size_à
__Àn
,

568 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

569 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

570 (*
__ª°ri˘
 
__d°
,

571 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

572 
size_t
 
__nwc
, size_à
__Àn
,

573 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

574 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

575 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

577 
__f‹tify_fun˘i⁄
 
size_t


578 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

579 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

581 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

583 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

584  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

585 
	`__bos
 (
__d°
));

587 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

588  
	`__wc¢πombs_chk_w¨n
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

589 
	`__bos
 (
__d°
));

591  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

592 
	}
}

	@/usr/include/wctype.h

23 #i‚de‡
_WCTYPE_H


25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 #i‚de‡
__√ed_iswxxx


29 
	#_WCTYPE_H
 1

	)

32 
	#__√ed_wöt_t


	)

33 
	~<wch¨.h
>

37 #i‚de‡
WEOF


38 
	#WEOF
 (0xffffffffu)

	)

41 #unde‡
__√ed_iswxxx


46 #i‚de‡
__iswxxx_deföed


47 
	#__iswxxx_deföed
 1

	)

49 
__BEGIN_NAMESPACE_C99


52 
	tw˘y≥_t
;

53 
	g__END_NAMESPACE_C99


55 #i‚de‡
_ISwbô


60 
	~<ídün.h
>

61 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


62 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

64 
	#_ISwbô
(
bô
) \

65 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

66 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

67 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

68 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

73 
	m__ISwuµî
 = 0,

74 
	m__ISwlowî
 = 1,

75 
	m__ISwÆpha
 = 2,

76 
	m__ISwdigô
 = 3,

77 
	m__ISwxdigô
 = 4,

78 
	m__ISw•a˚
 = 5,

79 
	m__ISw¥öt
 = 6,

80 
	m__ISwgøph
 = 7,

81 
	m__ISwbœnk
 = 8,

82 
	m__ISw˙ål
 = 9,

83 
	m__ISwpun˘
 = 10,

84 
	m__ISwÆnum
 = 11,

86 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

87 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

88 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

89 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

90 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

91 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

92 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

93 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

94 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

95 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

96 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

97 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

102 
__BEGIN_DECLS


104 
__BEGIN_NAMESPACE_C99


111 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

117 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

120 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

124 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

128 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

133 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

136 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

141 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

146 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

151 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

156 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

161 #ifde‡
__USE_ISOC99


162 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
w˘y≥_t
 
	$w˘y≥
 (c⁄° *
__¥›îty
Ë
__THROW
;

175 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

176 
__END_NAMESPACE_C99


183 
__BEGIN_NAMESPACE_C99


186 c⁄° 
	t__öt32_t
 *
	tw˘øns_t
;

187 
__END_NAMESPACE_C99


188 #ifde‡
__USE_GNU


189 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

192 
__BEGIN_NAMESPACE_C99


194 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

197 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
__END_NAMESPACE_C99


200 
__END_DECLS


207 #ifde‡
_WCTYPE_H


213 
__BEGIN_DECLS


215 
__BEGIN_NAMESPACE_C99


218 
w˘øns_t
 
	$w˘øns
 (c⁄° *
__¥›îty
Ë
__THROW
;

221 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

222 
__END_NAMESPACE_C99


224 #ifde‡
__USE_XOPEN2K8


226 
	~<xloˇÀ.h
>

230 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

236 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

239 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

243 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

247 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

252 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

255 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

260 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

265 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

270 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

275 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

280 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

284 
w˘y≥_t
 
	$w˘y≥_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

285 
__THROW
;

289 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

290 
__THROW
;

298 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

301 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

305 
w˘øns_t
 
	$w˘øns_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

306 
__THROW
;

309 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

310 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

314 
__END_DECLS


	@/usr/include/asm-generic/sockios.h

1 #i‚de‡
__ASM_GENERIC_SOCKIOS_H


2 
	#__ASM_GENERIC_SOCKIOS_H


	)

5 
	#FIOSETOWN
 0x8901

	)

6 
	#SIOCSPGRP
 0x8902

	)

7 
	#FIOGETOWN
 0x8903

	)

8 
	#SIOCGPGRP
 0x8904

	)

9 
	#SIOCATMARK
 0x8905

	)

10 
	#SIOCGSTAMP
 0x8906

	)

11 
	#SIOCGSTAMPNS
 0x8907

	)

	@
1
.
1
/usr/include
484
15957
/home/terekhov/tmp/fio/fio/arch/arch-alpha.h
/home/terekhov/tmp/fio/fio/arch/arch-arm.h
/home/terekhov/tmp/fio/fio/arch/arch-generic.h
/home/terekhov/tmp/fio/fio/arch/arch-hppa.h
/home/terekhov/tmp/fio/fio/arch/arch-ia64.h
/home/terekhov/tmp/fio/fio/arch/arch-mips.h
/home/terekhov/tmp/fio/fio/arch/arch-ppc.h
/home/terekhov/tmp/fio/fio/arch/arch-s390.h
/home/terekhov/tmp/fio/fio/arch/arch-sh.h
/home/terekhov/tmp/fio/fio/arch/arch-sparc.h
/home/terekhov/tmp/fio/fio/arch/arch-sparc64.h
/home/terekhov/tmp/fio/fio/arch/arch-x86-common.h
/home/terekhov/tmp/fio/fio/arch/arch-x86.h
/home/terekhov/tmp/fio/fio/arch/arch-x86_64.h
/home/terekhov/tmp/fio/fio/arch/arch.h
/home/terekhov/tmp/fio/fio/backend.c
/home/terekhov/tmp/fio/fio/blktrace.c
/home/terekhov/tmp/fio/fio/blktrace_api.h
/home/terekhov/tmp/fio/fio/cairo_text_helpers.c
/home/terekhov/tmp/fio/fio/cairo_text_helpers.h
/home/terekhov/tmp/fio/fio/cconv.c
/home/terekhov/tmp/fio/fio/cgroup.c
/home/terekhov/tmp/fio/fio/cgroup.h
/home/terekhov/tmp/fio/fio/client.c
/home/terekhov/tmp/fio/fio/client.h
/home/terekhov/tmp/fio/fio/compiler/compiler-gcc3.h
/home/terekhov/tmp/fio/fio/compiler/compiler-gcc4.h
/home/terekhov/tmp/fio/fio/compiler/compiler.h
/home/terekhov/tmp/fio/fio/crc/crc16.c
/home/terekhov/tmp/fio/fio/crc/crc16.h
/home/terekhov/tmp/fio/fio/crc/crc32.c
/home/terekhov/tmp/fio/fio/crc/crc32.h
/home/terekhov/tmp/fio/fio/crc/crc32c-intel.c
/home/terekhov/tmp/fio/fio/crc/crc32c.c
/home/terekhov/tmp/fio/fio/crc/crc32c.h
/home/terekhov/tmp/fio/fio/crc/crc64.c
/home/terekhov/tmp/fio/fio/crc/crc64.h
/home/terekhov/tmp/fio/fio/crc/crc7.c
/home/terekhov/tmp/fio/fio/crc/crc7.h
/home/terekhov/tmp/fio/fio/crc/md5.c
/home/terekhov/tmp/fio/fio/crc/md5.h
/home/terekhov/tmp/fio/fio/crc/sha1.c
/home/terekhov/tmp/fio/fio/crc/sha1.h
/home/terekhov/tmp/fio/fio/crc/sha256.c
/home/terekhov/tmp/fio/fio/crc/sha256.h
/home/terekhov/tmp/fio/fio/crc/sha512.c
/home/terekhov/tmp/fio/fio/crc/sha512.h
/home/terekhov/tmp/fio/fio/crc/test.c
/home/terekhov/tmp/fio/fio/crc/test.h
/home/terekhov/tmp/fio/fio/crc/xxhash.c
/home/terekhov/tmp/fio/fio/crc/xxhash.h
/home/terekhov/tmp/fio/fio/debug.c
/home/terekhov/tmp/fio/fio/debug.h
/home/terekhov/tmp/fio/fio/diskutil.c
/home/terekhov/tmp/fio/fio/diskutil.h
/home/terekhov/tmp/fio/fio/engines/binject.c
/home/terekhov/tmp/fio/fio/engines/cpu.c
/home/terekhov/tmp/fio/fio/engines/e4defrag.c
/home/terekhov/tmp/fio/fio/engines/falloc.c
/home/terekhov/tmp/fio/fio/engines/fusion-aw.c
/home/terekhov/tmp/fio/fio/engines/guasi.c
/home/terekhov/tmp/fio/fio/engines/libaio.c
/home/terekhov/tmp/fio/fio/engines/mmap.c
/home/terekhov/tmp/fio/fio/engines/net.c
/home/terekhov/tmp/fio/fio/engines/null.c
/home/terekhov/tmp/fio/fio/engines/posixaio.c
/home/terekhov/tmp/fio/fio/engines/rbd.c
/home/terekhov/tmp/fio/fio/engines/rdma.c
/home/terekhov/tmp/fio/fio/engines/sg.c
/home/terekhov/tmp/fio/fio/engines/skeleton_external.c
/home/terekhov/tmp/fio/fio/engines/solarisaio.c
/home/terekhov/tmp/fio/fio/engines/splice.c
/home/terekhov/tmp/fio/fio/engines/sync.c
/home/terekhov/tmp/fio/fio/engines/windowsaio.c
/home/terekhov/tmp/fio/fio/err.h
/home/terekhov/tmp/fio/fio/eta.c
/home/terekhov/tmp/fio/fio/fifo.c
/home/terekhov/tmp/fio/fio/fifo.h
/home/terekhov/tmp/fio/fio/file.h
/home/terekhov/tmp/fio/fio/filehash.c
/home/terekhov/tmp/fio/fio/filehash.h
/home/terekhov/tmp/fio/fio/filelock.c
/home/terekhov/tmp/fio/fio/filelock.h
/home/terekhov/tmp/fio/fio/filesetup.c
/home/terekhov/tmp/fio/fio/fio.c
/home/terekhov/tmp/fio/fio/fio.h
/home/terekhov/tmp/fio/fio/fio_time.h
/home/terekhov/tmp/fio/fio/flist.h
/home/terekhov/tmp/fio/fio/flow.c
/home/terekhov/tmp/fio/fio/flow.h
/home/terekhov/tmp/fio/fio/gclient.c
/home/terekhov/tmp/fio/fio/gclient.h
/home/terekhov/tmp/fio/fio/gcompat.c
/home/terekhov/tmp/fio/fio/gcompat.h
/home/terekhov/tmp/fio/fio/gerror.c
/home/terekhov/tmp/fio/fio/gerror.h
/home/terekhov/tmp/fio/fio/gettime-thread.c
/home/terekhov/tmp/fio/fio/gettime.c
/home/terekhov/tmp/fio/fio/gettime.h
/home/terekhov/tmp/fio/fio/gfio.c
/home/terekhov/tmp/fio/fio/gfio.h
/home/terekhov/tmp/fio/fio/ghelpers.c
/home/terekhov/tmp/fio/fio/ghelpers.h
/home/terekhov/tmp/fio/fio/goptions.c
/home/terekhov/tmp/fio/fio/goptions.h
/home/terekhov/tmp/fio/fio/graph.c
/home/terekhov/tmp/fio/fio/graph.h
/home/terekhov/tmp/fio/fio/hash.h
/home/terekhov/tmp/fio/fio/helpers.c
/home/terekhov/tmp/fio/fio/helpers.h
/home/terekhov/tmp/fio/fio/idletime.c
/home/terekhov/tmp/fio/fio/idletime.h
/home/terekhov/tmp/fio/fio/init.c
/home/terekhov/tmp/fio/fio/io_ddir.h
/home/terekhov/tmp/fio/fio/io_u.c
/home/terekhov/tmp/fio/fio/io_u_queue.c
/home/terekhov/tmp/fio/fio/io_u_queue.h
/home/terekhov/tmp/fio/fio/ioengine.h
/home/terekhov/tmp/fio/fio/ioengines.c
/home/terekhov/tmp/fio/fio/iolog.c
/home/terekhov/tmp/fio/fio/iolog.h
/home/terekhov/tmp/fio/fio/json.c
/home/terekhov/tmp/fio/fio/json.h
/home/terekhov/tmp/fio/fio/lib/axmap.c
/home/terekhov/tmp/fio/fio/lib/axmap.h
/home/terekhov/tmp/fio/fio/lib/bswap.h
/home/terekhov/tmp/fio/fio/lib/ffz.h
/home/terekhov/tmp/fio/fio/lib/flist_sort.c
/home/terekhov/tmp/fio/fio/lib/fls.h
/home/terekhov/tmp/fio/fio/lib/getopt.h
/home/terekhov/tmp/fio/fio/lib/getopt_long.c
/home/terekhov/tmp/fio/fio/lib/getrusage.c
/home/terekhov/tmp/fio/fio/lib/getrusage.h
/home/terekhov/tmp/fio/fio/lib/hweight.c
/home/terekhov/tmp/fio/fio/lib/hweight.h
/home/terekhov/tmp/fio/fio/lib/ieee754.c
/home/terekhov/tmp/fio/fio/lib/ieee754.h
/home/terekhov/tmp/fio/fio/lib/inet_aton.c
/home/terekhov/tmp/fio/fio/lib/inet_aton.h
/home/terekhov/tmp/fio/fio/lib/lfsr.c
/home/terekhov/tmp/fio/fio/lib/lfsr.h
/home/terekhov/tmp/fio/fio/lib/num2str.c
/home/terekhov/tmp/fio/fio/lib/prio_tree.c
/home/terekhov/tmp/fio/fio/lib/prio_tree.h
/home/terekhov/tmp/fio/fio/lib/rand.c
/home/terekhov/tmp/fio/fio/lib/rand.h
/home/terekhov/tmp/fio/fio/lib/rbtree.c
/home/terekhov/tmp/fio/fio/lib/rbtree.h
/home/terekhov/tmp/fio/fio/lib/strcasestr.c
/home/terekhov/tmp/fio/fio/lib/strcasestr.h
/home/terekhov/tmp/fio/fio/lib/strsep.c
/home/terekhov/tmp/fio/fio/lib/strsep.h
/home/terekhov/tmp/fio/fio/lib/zipf.c
/home/terekhov/tmp/fio/fio/lib/zipf.h
/home/terekhov/tmp/fio/fio/libfio.c
/home/terekhov/tmp/fio/fio/log.c
/home/terekhov/tmp/fio/fio/log.h
/home/terekhov/tmp/fio/fio/memalign.c
/home/terekhov/tmp/fio/fio/memalign.h
/home/terekhov/tmp/fio/fio/memory.c
/home/terekhov/tmp/fio/fio/minmax.h
/home/terekhov/tmp/fio/fio/mutex.c
/home/terekhov/tmp/fio/fio/mutex.h
/home/terekhov/tmp/fio/fio/options.c
/home/terekhov/tmp/fio/fio/options.h
/home/terekhov/tmp/fio/fio/os/binject.h
/home/terekhov/tmp/fio/fio/os/kcompat.h
/home/terekhov/tmp/fio/fio/os/os-aix.h
/home/terekhov/tmp/fio/fio/os/os-android.h
/home/terekhov/tmp/fio/fio/os/os-freebsd.h
/home/terekhov/tmp/fio/fio/os/os-hpux.h
/home/terekhov/tmp/fio/fio/os/os-linux.h
/home/terekhov/tmp/fio/fio/os/os-mac.h
/home/terekhov/tmp/fio/fio/os/os-netbsd.h
/home/terekhov/tmp/fio/fio/os/os-openbsd.h
/home/terekhov/tmp/fio/fio/os/os-solaris.h
/home/terekhov/tmp/fio/fio/os/os-windows.h
/home/terekhov/tmp/fio/fio/os/os.h
/home/terekhov/tmp/fio/fio/os/windows/posix.c
/home/terekhov/tmp/fio/fio/os/windows/posix.h
/home/terekhov/tmp/fio/fio/os/windows/posix/include/arpa/inet.h
/home/terekhov/tmp/fio/fio/os/windows/posix/include/asm/types.h
/home/terekhov/tmp/fio/fio/os/windows/posix/include/dirent.h
/home/terekhov/tmp/fio/fio/os/windows/posix/include/dlfcn.h
/home/terekhov/tmp/fio/fio/os/windows/posix/include/libgen.h
/home/terekhov/tmp/fio/fio/os/windows/posix/include/netdb.h
/home/terekhov/tmp/fio/fio/os/windows/posix/include/netinet/in.h
/home/terekhov/tmp/fio/fio/os/windows/posix/include/netinet/tcp.h
/home/terekhov/tmp/fio/fio/os/windows/posix/include/poll.h
/home/terekhov/tmp/fio/fio/os/windows/posix/include/semaphore.h
/home/terekhov/tmp/fio/fio/os/windows/posix/include/sys/ipc.h
/home/terekhov/tmp/fio/fio/os/windows/posix/include/sys/mman.h
/home/terekhov/tmp/fio/fio/os/windows/posix/include/sys/poll.h
/home/terekhov/tmp/fio/fio/os/windows/posix/include/sys/resource.h
/home/terekhov/tmp/fio/fio/os/windows/posix/include/sys/shm.h
/home/terekhov/tmp/fio/fio/os/windows/posix/include/sys/socket.h
/home/terekhov/tmp/fio/fio/os/windows/posix/include/sys/uio.h
/home/terekhov/tmp/fio/fio/os/windows/posix/include/sys/un.h
/home/terekhov/tmp/fio/fio/os/windows/posix/include/sys/wait.h
/home/terekhov/tmp/fio/fio/os/windows/posix/include/syslog.h
/home/terekhov/tmp/fio/fio/parse.c
/home/terekhov/tmp/fio/fio/parse.h
/home/terekhov/tmp/fio/fio/printing.c
/home/terekhov/tmp/fio/fio/printing.h
/home/terekhov/tmp/fio/fio/profile.c
/home/terekhov/tmp/fio/fio/profile.h
/home/terekhov/tmp/fio/fio/profiles/act.c
/home/terekhov/tmp/fio/fio/profiles/tiobench.c
/home/terekhov/tmp/fio/fio/server.c
/home/terekhov/tmp/fio/fio/server.h
/home/terekhov/tmp/fio/fio/smalloc.c
/home/terekhov/tmp/fio/fio/smalloc.h
/home/terekhov/tmp/fio/fio/stat.c
/home/terekhov/tmp/fio/fio/stat.h
/home/terekhov/tmp/fio/fio/t/axmap.c
/home/terekhov/tmp/fio/fio/t/genzipf.c
/home/terekhov/tmp/fio/fio/t/ieee754.c
/home/terekhov/tmp/fio/fio/t/lfsr-test.c
/home/terekhov/tmp/fio/fio/t/log.c
/home/terekhov/tmp/fio/fio/t/stest.c
/home/terekhov/tmp/fio/fio/td_error.c
/home/terekhov/tmp/fio/fio/td_error.h
/home/terekhov/tmp/fio/fio/thread_options.h
/home/terekhov/tmp/fio/fio/tickmarks.c
/home/terekhov/tmp/fio/fio/tickmarks.h
/home/terekhov/tmp/fio/fio/time.c
/home/terekhov/tmp/fio/fio/trim.c
/home/terekhov/tmp/fio/fio/trim.h
/home/terekhov/tmp/fio/fio/verify.c
/home/terekhov/tmp/fio/fio/verify.h
../arch/arch.h
../compiler/compiler.h
../crc/crc16.h
../crc/crc32.h
../crc/crc32c.h
../crc/crc64.h
../crc/crc7.h
../crc/md5.h
../crc/sha1.h
../crc/sha256.h
../crc/sha512.h
../crc/xxhash.h
../file.h
../filehash.h
../fio.h
../fio_time.h
../flist.h
../gettime.h
../hash.h
../lib/axmap.h
../lib/bswap.h
../lib/ffz.h
../lib/hweight.h
../lib/ieee754.h
../lib/lfsr.h
../lib/strsep.h
../lib/zipf.h
../log.h
../minmax.h
../parse.h
../profile.h
../smalloc.h
../verify.h
/usr/include/aio.h
/usr/include/arpa/inet.h
/usr/include/asm/byteorder.h
/usr/include/asm/types.h
/usr/include/assert.h
/usr/include/ctype.h
/usr/include/dirent.h
/usr/include/dlfcn.h
/usr/include/elf.h
/usr/include/err.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/getopt.h
/usr/include/ieee754.h
/usr/include/inttypes.h
/usr/include/libaio.h
/usr/include/libgen.h
/usr/include/limits.h
/usr/include/linux/falloc.h
/usr/include/linux/fs.h
/usr/include/linux/major.h
/usr/include/linux/mempolicy.h
/usr/include/linux/raw.h
/usr/include/linux/shm.h
/usr/include/linux/types.h
/usr/include/linux/unistd.h
/usr/include/locale.h
/usr/include/malloc.h
/usr/include/math.h
/usr/include/mntent.h
/usr/include/netdb.h
/usr/include/netinet/in.h
/usr/include/netinet/tcp.h
/usr/include/pthread.h
/usr/include/sched.h
/usr/include/scsi/sg.h
/usr/include/semaphore.h
/usr/include/setjmp.h
/usr/include/signal.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/sys/fcntl.h
/usr/include/sys/ioctl.h
/usr/include/sys/ipc.h
/usr/include/sys/mman.h
/usr/include/sys/param.h
/usr/include/sys/poll.h
/usr/include/sys/resource.h
/usr/include/sys/shm.h
/usr/include/sys/socket.h
/usr/include/sys/stat.h
/usr/include/sys/syscall.h
/usr/include/sys/sysctl.h
/usr/include/sys/time.h
/usr/include/sys/types.h
/usr/include/sys/uio.h
/usr/include/sys/un.h
/usr/include/sys/vfs.h
/usr/include/sys/wait.h
/usr/include/syslog.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/zlib.h
/usr/include/alloca.h
/usr/include/asm-generic/types.h
/usr/include/asm/shmbuf.h
/usr/include/asm/unistd.h
/usr/include/bits/byteswap.h
/usr/include/bits/confname.h
/usr/include/bits/dirent.h
/usr/include/bits/dlfcn.h
/usr/include/bits/environments.h
/usr/include/bits/errno.h
/usr/include/bits/fcntl.h
/usr/include/bits/fcntl2.h
/usr/include/bits/huge_val.h
/usr/include/bits/huge_valf.h
/usr/include/bits/huge_vall.h
/usr/include/bits/in.h
/usr/include/bits/inf.h
/usr/include/bits/ioctl-types.h
/usr/include/bits/ioctls.h
/usr/include/bits/ipc.h
/usr/include/bits/ipctypes.h
/usr/include/bits/locale.h
/usr/include/bits/math-finite.h
/usr/include/bits/mathcalls.h
/usr/include/bits/mathdef.h
/usr/include/bits/mathinline.h
/usr/include/bits/mman.h
/usr/include/bits/nan.h
/usr/include/bits/netdb.h
/usr/include/bits/param.h
/usr/include/bits/poll.h
/usr/include/bits/poll2.h
/usr/include/bits/posix1_lim.h
/usr/include/bits/posix2_lim.h
/usr/include/bits/posix_opt.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/resource.h
/usr/include/bits/sched.h
/usr/include/bits/semaphore.h
/usr/include/bits/setjmp.h
/usr/include/bits/setjmp2.h
/usr/include/bits/shm.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/siginfo.h
/usr/include/bits/signum.h
/usr/include/bits/sigset.h
/usr/include/bits/sigstack.h
/usr/include/bits/sigthread.h
/usr/include/bits/sockaddr.h
/usr/include/bits/socket.h
/usr/include/bits/socket2.h
/usr/include/bits/stat.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-bsearch.h
/usr/include/bits/stdlib-float.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/syscall.h
/usr/include/bits/sysctl.h
/usr/include/bits/time.h
/usr/include/bits/types.h
/usr/include/bits/uio.h
/usr/include/bits/unistd.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wchar.h
/usr/include/bits/wordsize.h
/usr/include/bits/xopen_lim.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/libio.h
/usr/include/linux/byteorder/little_endian.h
/usr/include/linux/errno.h
/usr/include/linux/ioctl.h
/usr/include/linux/ipc.h
/usr/include/linux/limits.h
/usr/include/linux/posix_types.h
/usr/include/linux/sysctl.h
/usr/include/paths.h
/usr/include/rpc/netdb.h
/usr/include/sys/cdefs.h
/usr/include/sys/select.h
/usr/include/sys/statfs.h
/usr/include/sys/syslog.h
/usr/include/sys/sysmacros.h
/usr/include/sys/ttydefaults.h
/usr/include/sys/ucontext.h
/usr/include/xlocale.h
/usr/include/zconf.h
/usr/include/_G_config.h
/usr/include/asm-generic/int-ll64.h
/usr/include/asm-generic/shmbuf.h
/usr/include/asm/errno.h
/usr/include/asm/ioctl.h
/usr/include/asm/ioctls.h
/usr/include/asm/ipcbuf.h
/usr/include/asm/posix_types.h
/usr/include/asm/socket.h
/usr/include/asm/unistd_32.h
/usr/include/asm/unistd_64.h
/usr/include/asm/unistd_x32.h
/usr/include/bits/byteswap-16.h
/usr/include/bits/endian.h
/usr/include/bits/fcntl-linux.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/local_lim.h
/usr/include/bits/mman-linux.h
/usr/include/bits/select.h
/usr/include/bits/select2.h
/usr/include/bits/socket_type.h
/usr/include/bits/statfs.h
/usr/include/bits/stdio-lock.h
/usr/include/bits/syslog-ldbl.h
/usr/include/bits/syslog-path.h
/usr/include/bits/syslog.h
/usr/include/bits/timex.h
/usr/include/bits/typesizes.h
/usr/include/gnu/stubs.h
/usr/include/linux/kernel.h
/usr/include/linux/param.h
/usr/include/linux/stddef.h
/usr/include/linux/swab.h
/usr/include/stdc-predef.h
/usr/include/asm-generic/errno.h
/usr/include/asm-generic/ioctl.h
/usr/include/asm-generic/ioctls.h
/usr/include/asm-generic/ipcbuf.h
/usr/include/asm-generic/socket.h
/usr/include/asm/bitsperlong.h
/usr/include/asm/param.h
/usr/include/asm/posix_types_32.h
/usr/include/asm/posix_types_64.h
/usr/include/asm/posix_types_x32.h
/usr/include/asm/swab.h
/usr/include/bits/libc-lock.h
/usr/include/gconv.h
/usr/include/gnu/stubs-32.h
/usr/include/linux/sysinfo.h
/usr/include/wchar.h
/usr/include/asm-generic/bitsperlong.h
/usr/include/asm-generic/errno-base.h
/usr/include/asm-generic/param.h
/usr/include/asm-generic/posix_types.h
/usr/include/asm/sockios.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar2.h
/usr/include/wctype.h
/usr/include/asm-generic/sockios.h
